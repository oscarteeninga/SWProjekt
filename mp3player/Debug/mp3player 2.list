
mp3player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020814  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000059c4  080209e4  080209e4  000309e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080263a8  080263a8  00040120  2**0
                  CONTENTS
  4 .ARM          00000008  080263a8  080263a8  000363a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080263b0  080263b0  00040120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080263b0  080263b0  000363b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080263b4  080263b4  000363b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  080263b8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013164  20000120  080264d8  00040120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013284  080264d8  00043284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00092cf8  00000000  00000000  00040150  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000f917  00000000  00000000  000d2e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00077ed7  00000000  00000000  000e275f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00003390  00000000  00000000  0015a638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000115a0  00000000  00000000  0015d9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0003de50  00000000  00000000  0016ef68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00053a50  00000000  00000000  001acdb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00133ff2  00000000  00000000  00200808  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  003347fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c42c  00000000  00000000  00334878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000120 	.word	0x20000120
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080209cc 	.word	0x080209cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000124 	.word	0x20000124
 800020c:	080209cc 	.word	0x080209cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b972 	b.w	8000ef8 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	4688      	mov	r8, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d14b      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	4615      	mov	r5, r2
 8000c3e:	d967      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0720 	rsb	r7, r2, #32
 8000c4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c52:	4095      	lsls	r5, r2
 8000c54:	ea47 0803 	orr.w	r8, r7, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c64:	fa1f fc85 	uxth.w	ip, r5
 8000c68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c70:	fb07 f10c 	mul.w	r1, r7, ip
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18eb      	adds	r3, r5, r3
 8000c7a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c7e:	f080 811b 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8118 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000c88:	3f02      	subs	r7, #2
 8000c8a:	442b      	add	r3, r5
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ca0:	45a4      	cmp	ip, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	192c      	adds	r4, r5, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000cae:	45a4      	cmp	ip, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	442c      	add	r4, r5
 8000cb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cbc:	eba4 040c 	sub.w	r4, r4, ip
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	b11e      	cbz	r6, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xbe>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80eb 	beq.w	8000eb2 <__udivmoddi4+0x286>
 8000cdc:	2700      	movs	r7, #0
 8000cde:	e9c6 0100 	strd	r0, r1, [r6]
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f783 	clz	r7, r3
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d147      	bne.n	8000d82 <__udivmoddi4+0x156>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd0>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80fa 	bhi.w	8000ef0 <__udivmoddi4+0x2c4>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	4698      	mov	r8, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xe8>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 808f 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1e:	1b49      	subs	r1, r1, r5
 8000d20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d24:	fa1f f885 	uxth.w	r8, r5
 8000d28:	2701      	movs	r7, #1
 8000d2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2e:	0c23      	lsrs	r3, r4, #16
 8000d30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb08 f10c 	mul.w	r1, r8, ip
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d40:	18eb      	adds	r3, r5, r3
 8000d42:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	f200 80cd 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d4e:	4684      	mov	ip, r0
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	b2a3      	uxth	r3, r4
 8000d54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d60:	fb08 f800 	mul.w	r8, r8, r0
 8000d64:	45a0      	cmp	r8, r4
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0x14c>
 8000d68:	192c      	adds	r4, r5, r4
 8000d6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x14a>
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	f200 80b6 	bhi.w	8000ee2 <__udivmoddi4+0x2b6>
 8000d76:	4618      	mov	r0, r3
 8000d78:	eba4 0408 	sub.w	r4, r4, r8
 8000d7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d80:	e79f      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d82:	f1c7 0c20 	rsb	ip, r7, #32
 8000d86:	40bb      	lsls	r3, r7
 8000d88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d90:	fa01 f407 	lsl.w	r4, r1, r7
 8000d94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000da0:	4325      	orrs	r5, r4
 8000da2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da6:	0c2c      	lsrs	r4, r5, #16
 8000da8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dac:	fa1f fa8e 	uxth.w	sl, lr
 8000db0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db4:	fb09 f40a 	mul.w	r4, r9, sl
 8000db8:	429c      	cmp	r4, r3
 8000dba:	fa02 f207 	lsl.w	r2, r2, r7
 8000dbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dcc:	f080 8087 	bcs.w	8000ede <__udivmoddi4+0x2b2>
 8000dd0:	429c      	cmp	r4, r3
 8000dd2:	f240 8084 	bls.w	8000ede <__udivmoddi4+0x2b2>
 8000dd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dda:	4473      	add	r3, lr
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	b2ad      	uxth	r5, r5
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3310 	mls	r3, r8, r0, r3
 8000de8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000df0:	45a2      	cmp	sl, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1e 0404 	adds.w	r4, lr, r4
 8000df8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfc:	d26b      	bcs.n	8000ed6 <__udivmoddi4+0x2aa>
 8000dfe:	45a2      	cmp	sl, r4
 8000e00:	d969      	bls.n	8000ed6 <__udivmoddi4+0x2aa>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4474      	add	r4, lr
 8000e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	eba4 040a 	sub.w	r4, r4, sl
 8000e12:	454c      	cmp	r4, r9
 8000e14:	46c2      	mov	sl, r8
 8000e16:	464b      	mov	r3, r9
 8000e18:	d354      	bcc.n	8000ec4 <__udivmoddi4+0x298>
 8000e1a:	d051      	beq.n	8000ec0 <__udivmoddi4+0x294>
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d069      	beq.n	8000ef4 <__udivmoddi4+0x2c8>
 8000e20:	ebb1 050a 	subs.w	r5, r1, sl
 8000e24:	eb64 0403 	sbc.w	r4, r4, r3
 8000e28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e2c:	40fd      	lsrs	r5, r7
 8000e2e:	40fc      	lsrs	r4, r7
 8000e30:	ea4c 0505 	orr.w	r5, ip, r5
 8000e34:	e9c6 5400 	strd	r5, r4, [r6]
 8000e38:	2700      	movs	r7, #0
 8000e3a:	e747      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f703 	lsr.w	r7, r0, r3
 8000e44:	4095      	lsls	r5, r2
 8000e46:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e52:	4338      	orrs	r0, r7
 8000e54:	0c01      	lsrs	r1, r0, #16
 8000e56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e5a:	fa1f f885 	uxth.w	r8, r5
 8000e5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e66:	fb07 f308 	mul.w	r3, r7, r8
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x256>
 8000e72:	1869      	adds	r1, r5, r1
 8000e74:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e78:	d22f      	bcs.n	8000eda <__udivmoddi4+0x2ae>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d92d      	bls.n	8000eda <__udivmoddi4+0x2ae>
 8000e7e:	3f02      	subs	r7, #2
 8000e80:	4429      	add	r1, r5
 8000e82:	1acb      	subs	r3, r1, r3
 8000e84:	b281      	uxth	r1, r0
 8000e86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb00 f308 	mul.w	r3, r0, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x27e>
 8000e9a:	1869      	adds	r1, r5, r1
 8000e9c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ea0:	d217      	bcs.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d915      	bls.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4429      	add	r1, r5
 8000eaa:	1ac9      	subs	r1, r1, r3
 8000eac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eb0:	e73b      	b.n	8000d2a <__udivmoddi4+0xfe>
 8000eb2:	4637      	mov	r7, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e709      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb8:	4607      	mov	r7, r0
 8000eba:	e6e7      	b.n	8000c8c <__udivmoddi4+0x60>
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ec0:	4541      	cmp	r1, r8
 8000ec2:	d2ab      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ecc:	3801      	subs	r0, #1
 8000ece:	4613      	mov	r3, r2
 8000ed0:	e7a4      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed2:	4660      	mov	r0, ip
 8000ed4:	e7e9      	b.n	8000eaa <__udivmoddi4+0x27e>
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	e795      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000eda:	4667      	mov	r7, ip
 8000edc:	e7d1      	b.n	8000e82 <__udivmoddi4+0x256>
 8000ede:	4681      	mov	r9, r0
 8000ee0:	e77c      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	442c      	add	r4, r5
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0x14c>
 8000ee8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eec:	442b      	add	r3, r5
 8000eee:	e72f      	b.n	8000d50 <__udivmoddi4+0x124>
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	e708      	b.n	8000d06 <__udivmoddi4+0xda>
 8000ef4:	4637      	mov	r7, r6
 8000ef6:	e6e9      	b.n	8000ccc <__udivmoddi4+0xa0>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <xmp3fixpt_SetBitstreamPointer>:
 **************************************************************************************/
void SetBitstreamPointer(BitStreamInfo *bsi, int nBytes, unsigned char *buf)
{
	/* init bitstream */
	bsi->bytePtr = buf;
	bsi->iCache = 0;		/* 4-byte unsigned int */
 8000efc:	2300      	movs	r3, #0
	bsi->bytePtr = buf;
 8000efe:	6002      	str	r2, [r0, #0]
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
	bsi->nBytes = nBytes;
 8000f00:	60c1      	str	r1, [r0, #12]
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 8000f02:	e9c0 3301 	strd	r3, r3, [r0, #4]
}
 8000f06:	4770      	bx	lr

08000f08 <xmp3fixpt_GetBits>:
 *              if nBits = 0, returns 0 (useful for scalefactor unpacking)
 *
 * TODO:        optimize for ARM
 **************************************************************************************/
unsigned int GetBits(BitStreamInfo *bsi, int nBits)
{
 8000f08:	4603      	mov	r3, r0
	unsigned int data, lowBits;

	nBits &= 0x1f;							/* nBits mod 32 to avoid unpredictable results like >> by negative amount */
 8000f0a:	f001 011f 	and.w	r1, r1, #31
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 8000f0e:	6840      	ldr	r0, [r0, #4]
{
 8000f10:	b5f0      	push	{r4, r5, r6, r7, lr}
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
	bsi->iCache <<= nBits;					/* left-justify cache */
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8000f12:	689c      	ldr	r4, [r3, #8]
	bsi->iCache <<= nBits;					/* left-justify cache */
 8000f14:	fa00 f201 	lsl.w	r2, r0, r1
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 8000f18:	f1c1 051f 	rsb	r5, r1, #31
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8000f1c:	1a61      	subs	r1, r4, r1
	bsi->iCache <<= nBits;					/* left-justify cache */
 8000f1e:	605a      	str	r2, [r3, #4]
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 8000f20:	40e8      	lsrs	r0, r5

	/* if we cross an int boundary, refill the cache */
	if (bsi->cachedBits < 0) {
 8000f22:	2900      	cmp	r1, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8000f24:	6099      	str	r1, [r3, #8]
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 8000f26:	ea4f 0050 	mov.w	r0, r0, lsr #1
	if (bsi->cachedBits < 0) {
 8000f2a:	db00      	blt.n	8000f2e <xmp3fixpt_GetBits+0x26>
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
		bsi->iCache <<= lowBits;			/* left-justify cache */
	}

	return data;
}
 8000f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int nBytes = bsi->nBytes;
 8000f2e:	68da      	ldr	r2, [r3, #12]
		lowBits = -bsi->cachedBits;
 8000f30:	424f      	negs	r7, r1
 8000f32:	f101 0620 	add.w	r6, r1, #32
	if (nBytes >= 4) {
 8000f36:	2a03      	cmp	r2, #3
 8000f38:	dc33      	bgt.n	8000fa2 <xmp3fixpt_GetBits+0x9a>
		bsi->iCache = 0;
 8000f3a:	2500      	movs	r5, #0
 8000f3c:	f1c2 0403 	rsb	r4, r2, #3
 8000f40:	605d      	str	r5, [r3, #4]
 8000f42:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
		while (nBytes--) {
 8000f46:	2a00      	cmp	r2, #0
 8000f48:	d04d      	beq.n	8000fe6 <xmp3fixpt_GetBits+0xde>
 8000f4a:	f8d3 c000 	ldr.w	ip, [r3]
 8000f4e:	2a01      	cmp	r2, #1
			bsi->iCache |= (*bsi->bytePtr++);
 8000f50:	f10c 0401 	add.w	r4, ip, #1
 8000f54:	601c      	str	r4, [r3, #0]
 8000f56:	f89c 5000 	ldrb.w	r5, [ip]
			bsi->iCache <<= 8;
 8000f5a:	ea4f 2405 	mov.w	r4, r5, lsl #8
 8000f5e:	605c      	str	r4, [r3, #4]
		while (nBytes--) {
 8000f60:	d012      	beq.n	8000f88 <xmp3fixpt_GetBits+0x80>
			bsi->iCache |= (*bsi->bytePtr++);
 8000f62:	f10c 0502 	add.w	r5, ip, #2
		while (nBytes--) {
 8000f66:	2a02      	cmp	r2, #2
			bsi->iCache |= (*bsi->bytePtr++);
 8000f68:	601d      	str	r5, [r3, #0]
 8000f6a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8000f6e:	ea45 0504 	orr.w	r5, r5, r4
			bsi->iCache <<= 8;
 8000f72:	ea4f 2405 	mov.w	r4, r5, lsl #8
 8000f76:	605c      	str	r4, [r3, #4]
		while (nBytes--) {
 8000f78:	d006      	beq.n	8000f88 <xmp3fixpt_GetBits+0x80>
			bsi->iCache |= (*bsi->bytePtr++);
 8000f7a:	f10c 0503 	add.w	r5, ip, #3
 8000f7e:	601d      	str	r5, [r3, #0]
 8000f80:	f89c 5002 	ldrb.w	r5, [ip, #2]
 8000f84:	4325      	orrs	r5, r4
			bsi->iCache <<= 8;
 8000f86:	022c      	lsls	r4, r5, #8
 8000f88:	fa04 f40e 	lsl.w	r4, r4, lr
 8000f8c:	fa24 f606 	lsr.w	r6, r4, r6
 8000f90:	40bc      	lsls	r4, r7
 8000f92:	4330      	orrs	r0, r6
 8000f94:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
		bsi->nBytes = 0;
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
		bsi->iCache <<= lowBits;			/* left-justify cache */
 8000f9c:	e9c3 4601 	strd	r4, r6, [r3, #4]
}
 8000fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8000fa2:	681c      	ldr	r4, [r3, #0]
		bsi->nBytes -= 4;
 8000fa4:	3a04      	subs	r2, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8000fa6:	4625      	mov	r5, r4
 8000fa8:	1c61      	adds	r1, r4, #1
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8000faa:	f104 0e03 	add.w	lr, r4, #3
		bsi->iCache |= (*bsi->bytePtr++);
 8000fae:	f104 0c04 	add.w	ip, r4, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8000fb2:	6019      	str	r1, [r3, #0]
 8000fb4:	f815 1b02 	ldrb.w	r1, [r5], #2
 8000fb8:	0609      	lsls	r1, r1, #24
 8000fba:	e9c3 5100 	strd	r5, r1, [r3]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8000fbe:	7865      	ldrb	r5, [r4, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8000fc0:	f8c3 e000 	str.w	lr, [r3]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8000fc4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fc8:	6059      	str	r1, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8000fca:	78a5      	ldrb	r5, [r4, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 8000fcc:	f8c3 c000 	str.w	ip, [r3]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8000fd0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8000fd4:	6059      	str	r1, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++);
 8000fd6:	78e4      	ldrb	r4, [r4, #3]
		bsi->nBytes -= 4;
 8000fd8:	60da      	str	r2, [r3, #12]
		bsi->iCache |= (*bsi->bytePtr++);
 8000fda:	430c      	orrs	r4, r1
 8000fdc:	fa24 f206 	lsr.w	r2, r4, r6
 8000fe0:	40bc      	lsls	r4, r7
 8000fe2:	4310      	orrs	r0, r2
 8000fe4:	e7da      	b.n	8000f9c <xmp3fixpt_GetBits+0x94>
		while (nBytes--) {
 8000fe6:	4614      	mov	r4, r2
 8000fe8:	e7d4      	b.n	8000f94 <xmp3fixpt_GetBits+0x8c>
 8000fea:	bf00      	nop

08000fec <xmp3fixpt_CalcBitsUsed>:
 **************************************************************************************/
int CalcBitsUsed(BitStreamInfo *bsi, unsigned char *startBuf, int startOffset)
{
	int bitsUsed;

	bitsUsed  = (bsi->bytePtr - startBuf) * 8;
 8000fec:	6803      	ldr	r3, [r0, #0]
	bitsUsed -= bsi->cachedBits;
 8000fee:	6880      	ldr	r0, [r0, #8]
	bitsUsed  = (bsi->bytePtr - startBuf) * 8;
 8000ff0:	1a59      	subs	r1, r3, r1
	bitsUsed -= bsi->cachedBits;
 8000ff2:	ebc0 00c1 	rsb	r0, r0, r1, lsl #3
	bitsUsed -= startOffset;

	return bitsUsed;
}
 8000ff6:	1a80      	subs	r0, r0, r2
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <xmp3fixpt_CheckPadBit>:
int CheckPadBit(MP3DecInfo *mp3DecInfo)
{
	FrameHeader *fh;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS)
 8000ffc:	b130      	cbz	r0, 800100c <xmp3fixpt_CheckPadBit+0x10>
 8000ffe:	6803      	ldr	r3, [r0, #0]
 8001000:	b123      	cbz	r3, 800100c <xmp3fixpt_CheckPadBit+0x10>
		return -1;

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));

	return (fh->paddingBit ? 1 : 0);
 8001002:	6958      	ldr	r0, [r3, #20]
 8001004:	3000      	adds	r0, #0
 8001006:	bf18      	it	ne
 8001008:	2001      	movne	r0, #1
 800100a:	4770      	bx	lr
		return -1;
 800100c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <xmp3fixpt_UnpackFrameHeader>:

	int verIdx;
	FrameHeader *fh;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 8001014:	2800      	cmp	r0, #0
 8001016:	f000 80e2 	beq.w	80011de <xmp3fixpt_UnpackFrameHeader+0x1ca>
 800101a:	6803      	ldr	r3, [r0, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80de 	beq.w	80011de <xmp3fixpt_UnpackFrameHeader+0x1ca>
 8001022:	780a      	ldrb	r2, [r1, #0]
 8001024:	2aff      	cmp	r2, #255	; 0xff
 8001026:	f040 80da 	bne.w	80011de <xmp3fixpt_UnpackFrameHeader+0x1ca>
 800102a:	784a      	ldrb	r2, [r1, #1]
{
 800102c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 8001030:	f002 04e0 	and.w	r4, r2, #224	; 0xe0
{
 8001034:	b083      	sub	sp, #12
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 8001036:	2ce0      	cmp	r4, #224	; 0xe0
 8001038:	f040 80cc 	bne.w	80011d4 <xmp3fixpt_UnpackFrameHeader+0x1c0>
		return -1;

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));

	/* read header fields - use bitmasks instead of GetBits() for speed, since format never varies */
	verIdx =         (buf[1] >> 3) & 0x03;
 800103c:	08d2      	lsrs	r2, r2, #3
	fh->ver =        (MPEGVersion)( verIdx == 0 ? MPEG25 : ((verIdx & 0x01) ? MPEG1 : MPEG2) );
 800103e:	0794      	lsls	r4, r2, #30
 8001040:	f040 80bb 	bne.w	80011ba <xmp3fixpt_UnpackFrameHeader+0x1a6>
 8001044:	2202      	movs	r2, #2
 8001046:	701a      	strb	r2, [r3, #0]
	fh->layer = 4 - ((buf[1] >> 1) & 0x03);     /* easy mapping of index to layer number, 4 = error */
 8001048:	784d      	ldrb	r5, [r1, #1]
 800104a:	f3c5 0541 	ubfx	r5, r5, #1, #2
 800104e:	f1c5 0e04 	rsb	lr, r5, #4
 8001052:	f8c3 e004 	str.w	lr, [r3, #4]
	fh->crc =   1 - ((buf[1] >> 0) & 0x01);
 8001056:	784e      	ldrb	r6, [r1, #1]
 8001058:	43f4      	mvns	r4, r6
 800105a:	f006 0601 	and.w	r6, r6, #1
 800105e:	f004 0401 	and.w	r4, r4, #1
 8001062:	9600      	str	r6, [sp, #0]
 8001064:	609c      	str	r4, [r3, #8]
	fh->brIdx =      (buf[2] >> 4) & 0x0f;
 8001066:	788f      	ldrb	r7, [r1, #2]
 8001068:	093f      	lsrs	r7, r7, #4
 800106a:	60df      	str	r7, [r3, #12]
	fh->srIdx =      (buf[2] >> 2) & 0x03;
 800106c:	788c      	ldrb	r4, [r1, #2]
 800106e:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8001072:	611c      	str	r4, [r3, #16]
	fh->copyFlag =   (buf[3] >> 3) & 0x01;
	fh->origFlag =   (buf[3] >> 2) & 0x01;
	fh->emphasis =   (buf[3] >> 0) & 0x03;

	/* check parameters to avoid indexing tables with bad values */
	if (fh->srIdx == 3 || fh->layer == 4 || fh->brIdx == 15)
 8001074:	2f0f      	cmp	r7, #15
 8001076:	bf18      	it	ne
 8001078:	2c03      	cmpne	r4, #3
	fh->paddingBit = (buf[2] >> 1) & 0x01;
 800107a:	788e      	ldrb	r6, [r1, #2]
 800107c:	f3c6 0640 	ubfx	r6, r6, #1, #1
 8001080:	615e      	str	r6, [r3, #20]
 8001082:	9601      	str	r6, [sp, #4]
	fh->privateBit = (buf[2] >> 0) & 0x01;
 8001084:	788e      	ldrb	r6, [r1, #2]
 8001086:	f006 0601 	and.w	r6, r6, #1
 800108a:	619e      	str	r6, [r3, #24]
	fh->sMode =      (StereoMode)((buf[3] >> 6) & 0x03);      /* maps to correct enum (see definition) */    
 800108c:	78ce      	ldrb	r6, [r1, #3]
 800108e:	ea4f 1696 	mov.w	r6, r6, lsr #6
 8001092:	771e      	strb	r6, [r3, #28]
	fh->modeExt =    (buf[3] >> 4) & 0x03;
 8001094:	f891 c003 	ldrb.w	ip, [r1, #3]
 8001098:	f3cc 1c01 	ubfx	ip, ip, #4, #2
 800109c:	f8c3 c020 	str.w	ip, [r3, #32]
	fh->copyFlag =   (buf[3] >> 3) & 0x01;
 80010a0:	f891 c003 	ldrb.w	ip, [r1, #3]
 80010a4:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
 80010a8:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
	fh->origFlag =   (buf[3] >> 2) & 0x01;
 80010ac:	f891 c003 	ldrb.w	ip, [r1, #3]
 80010b0:	f3cc 0c80 	ubfx	ip, ip, #2, #1
 80010b4:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
	fh->emphasis =   (buf[3] >> 0) & 0x03;
 80010b8:	f891 c003 	ldrb.w	ip, [r1, #3]
 80010bc:	f00c 0c03 	and.w	ip, ip, #3
 80010c0:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
	if (fh->srIdx == 3 || fh->layer == 4 || fh->brIdx == 15)
 80010c4:	f000 8086 	beq.w	80011d4 <xmp3fixpt_UnpackFrameHeader+0x1c0>
 80010c8:	f1ae 0904 	sub.w	r9, lr, #4
 80010cc:	fab9 f989 	clz	r9, r9
 80010d0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80010d4:	f1b9 0f00 	cmp.w	r9, #0
 80010d8:	d17c      	bne.n	80011d4 <xmp3fixpt_UnpackFrameHeader+0x1c0>
		return -1;

	fh->sfBand = &sfBandTable[fh->ver][fh->srIdx];	/* for readability (we reference sfBandTable many times in decoder) */
 80010da:	f04f 08de 	mov.w	r8, #222	; 0xde
 80010de:	f04f 0c4a 	mov.w	ip, #74	; 0x4a
 80010e2:	f8df a108 	ldr.w	sl, [pc, #264]	; 80011ec <xmp3fixpt_UnpackFrameHeader+0x1d8>
	if (fh->sMode != Joint)		/* just to be safe (dequant, stproc check fh->modeExt) */
 80010e6:	2e01      	cmp	r6, #1
	fh->sfBand = &sfBandTable[fh->ver][fh->srIdx];	/* for readability (we reference sfBandTable many times in decoder) */
 80010e8:	fb08 f802 	mul.w	r8, r8, r2
 80010ec:	fb1c 8c04 	smlabb	ip, ip, r4, r8
 80010f0:	44e2      	add	sl, ip
 80010f2:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
	if (fh->sMode != Joint)		/* just to be safe (dequant, stproc check fh->modeExt) */
 80010f6:	d064      	beq.n	80011c2 <xmp3fixpt_UnpackFrameHeader+0x1ae>
		fh->modeExt = 0;

	/* init user-accessible data */
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 80010f8:	2e03      	cmp	r6, #3
		fh->modeExt = 0;
 80010fa:	f8c3 9020 	str.w	r9, [r3, #32]
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 80010fe:	d160      	bne.n	80011c2 <xmp3fixpt_UnpackFrameHeader+0x1ae>
 8001100:	f04f 0b01 	mov.w	fp, #1
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 8001104:	ea4f 0a42 	mov.w	sl, r2, lsl #1
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 8001108:	f1c5 0503 	rsb	r5, r5, #3
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 800110c:	2a00      	cmp	r2, #0
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800110e:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80011f0 <xmp3fixpt_UnpackFrameHeader+0x1dc>
 8001112:	eb0a 0c02 	add.w	ip, sl, r2
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 8001116:	f8c0 b7bc 	str.w	fp, [r0, #1980]	; 0x7bc
	mp3DecInfo->layer = fh->layer;
 800111a:	f8c0 e7d0 	str.w	lr, [r0, #2000]	; 0x7d0
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 800111e:	bf18      	it	ne
 8001120:	f04f 0801 	movne.w	r8, #1
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 8001124:	eb0c 0b05 	add.w	fp, ip, r5
	mp3DecInfo->version = fh->ver;
 8001128:	f880 27d4 	strb.w	r2, [r0, #2004]	; 0x7d4
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800112c:	eb0c 0e04 	add.w	lr, ip, r4
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 8001130:	4a2c      	ldr	r2, [pc, #176]	; (80011e4 <xmp3fixpt_UnpackFrameHeader+0x1d0>)
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 8001132:	bf08      	it	eq
 8001134:	f04f 0802 	moveq.w	r8, #2
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 8001138:	f932 b01b 	ldrsh.w	fp, [r2, fp, lsl #1]
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800113c:	f859 202e 	ldr.w	r2, [r9, lr, lsl #2]
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 8001140:	f8c0 87c4 	str.w	r8, [r0, #1988]	; 0x7c4
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 8001144:	f8c0 27c0 	str.w	r2, [r0, #1984]	; 0x7c0
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 8001148:	fb9b f2f8 	sdiv	r2, fp, r8
 800114c:	f8c0 27c8 	str.w	r2, [r0, #1992]	; 0x7c8
	/* get bitrate and nSlots from table, unless brIdx == 0 (free mode) in which case caller must figure it out himself
	 * question - do we want to overwrite mp3DecInfo->bitrate with 0 each time if it's free mode, and
	 *  copy the pre-calculated actual free bitrate into it in mp3dec.c (according to the spec, 
	 *  this shouldn't be necessary, since it should be either all frames free or none free)
	 */
	if (fh->brIdx) {
 8001150:	b34f      	cbz	r7, 80011a6 <xmp3fixpt_UnpackFrameHeader+0x192>
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 8001152:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8001156:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <xmp3fixpt_UnpackFrameHeader+0x1d4>)
 8001158:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
	
		/* nSlots = total frame bytes (from table) - sideInfo bytes - header - CRC (if present) + pad (if present) */
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800115c:	2e03      	cmp	r6, #3
 800115e:	bf0c      	ite	eq
 8001160:	4656      	moveq	r6, sl
 8001162:	f10a 0601 	addne.w	r6, sl, #1
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 8001166:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800116a:	f8df e088 	ldr.w	lr, [pc, #136]	; 80011f4 <xmp3fixpt_UnpackFrameHeader+0x1e0>
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800116e:	4465      	add	r5, ip
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 8001170:	4464      	add	r4, ip
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 8001172:	f8df c084 	ldr.w	ip, [pc, #132]	; 80011f8 <xmp3fixpt_UnpackFrameHeader+0x1e4>
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 8001176:	443d      	add	r5, r7
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 8001178:	4427      	add	r7, r4
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800117a:	f93c 6016 	ldrsh.w	r6, [ip, r6, lsl #1]
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800117e:	f932 2015 	ldrsh.w	r2, [r2, r5, lsl #1]
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 8001182:	f93e 4017 	ldrsh.w	r4, [lr, r7, lsl #1]
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 8001186:	ebc2 1542 	rsb	r5, r2, r2, lsl #5
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800118a:	1ba4      	subs	r4, r4, r6
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800118c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 8001190:	1f25      	subs	r5, r4, #4
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 8001192:	00d2      	lsls	r2, r2, #3
 8001194:	f8c0 27b8 	str.w	r2, [r0, #1976]	; 0x7b8
			4 - (fh->crc ? 2 : 0) + (fh->paddingBit ? 1 : 0);
 8001198:	9a00      	ldr	r2, [sp, #0]
 800119a:	b902      	cbnz	r2, 800119e <xmp3fixpt_UnpackFrameHeader+0x18a>
 800119c:	1fa5      	subs	r5, r4, #6
 800119e:	9a01      	ldr	r2, [sp, #4]
 80011a0:	442a      	add	r2, r5
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 80011a2:	f8c0 27cc 	str.w	r2, [r0, #1996]	; 0x7cc
	}

	/* load crc word, if enabled, and return length of frame header (in bytes) */
	if (fh->crc) {
 80011a6:	9a00      	ldr	r2, [sp, #0]
 80011a8:	b972      	cbnz	r2, 80011c8 <xmp3fixpt_UnpackFrameHeader+0x1b4>
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
 80011aa:	888a      	ldrh	r2, [r1, #4]
		return 6;
 80011ac:	2006      	movs	r0, #6
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
 80011ae:	ba52      	rev16	r2, r2
 80011b0:	b292      	uxth	r2, r2
 80011b2:	631a      	str	r2, [r3, #48]	; 0x30
	} else {
		fh->CRCWord = 0;
		return 4;
	}
}
 80011b4:	b003      	add	sp, #12
 80011b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011ba:	43d2      	mvns	r2, r2
 80011bc:	f002 0201 	and.w	r2, r2, #1
 80011c0:	e741      	b.n	8001046 <xmp3fixpt_UnpackFrameHeader+0x32>
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 80011c2:	f04f 0b02 	mov.w	fp, #2
 80011c6:	e79d      	b.n	8001104 <xmp3fixpt_UnpackFrameHeader+0xf0>
		fh->CRCWord = 0;
 80011c8:	2200      	movs	r2, #0
		return 4;
 80011ca:	2004      	movs	r0, #4
		fh->CRCWord = 0;
 80011cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80011ce:	b003      	add	sp, #12
 80011d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80011d8:	b003      	add	sp, #12
 80011da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 80011de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80011e2:	4770      	bx	lr
 80011e4:	08023314 	.word	0x08023314
 80011e8:	080231e0 	.word	0x080231e0
 80011ec:	08023328 	.word	0x08023328
 80011f0:	080232f0 	.word	0x080232f0
 80011f4:	080235d0 	.word	0x080235d0
 80011f8:	080235c4 	.word	0x080235c4

080011fc <xmp3fixpt_UnpackSideInfo>:
 *
 * Return:      length (in bytes) of side info data
 *              -1 if null input pointers
 **************************************************************************************/
int UnpackSideInfo(MP3DecInfo *mp3DecInfo, unsigned char *buf)
{
 80011fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001200:	b08b      	sub	sp, #44	; 0x2c
	FrameHeader *fh;
	SideInfo *si;
	SideInfoSub *sis;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS)
 8001202:	2800      	cmp	r0, #0
 8001204:	f001 82f4 	beq.w	80027f0 <xmp3fixpt_UnpackSideInfo+0x15f4>
 8001208:	6805      	ldr	r5, [r0, #0]
 800120a:	2d00      	cmp	r5, #0
 800120c:	f001 82f0 	beq.w	80027f0 <xmp3fixpt_UnpackSideInfo+0x15f4>
 8001210:	6846      	ldr	r6, [r0, #4]
 8001212:	9604      	str	r6, [sp, #16]
 8001214:	2e00      	cmp	r6, #0
 8001216:	f001 82eb 	beq.w	80027f0 <xmp3fixpt_UnpackSideInfo+0x15f4>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));

	bsi = &bitStreamInfo;
	if (fh->ver == MPEG1) {
 800121a:	782c      	ldrb	r4, [r5, #0]
 800121c:	4607      	mov	r7, r0
 800121e:	9000      	str	r0, [sp, #0]
 8001220:	460b      	mov	r3, r1
 8001222:	7f2a      	ldrb	r2, [r5, #28]
 8001224:	2c00      	cmp	r4, #0
 8001226:	f000 810f 	beq.w	8001448 <xmp3fixpt_UnpackSideInfo+0x24c>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
			for (bd = 0; bd < MAX_SCFBD; bd++)
				si->scfsi[ch][bd] = GetBits(bsi, 1);
	} else {
		/* MPEG 2, MPEG 2.5 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800122a:	2a03      	cmp	r2, #3
		SetBitstreamPointer(bsi, nBytes, buf);
		si->mainDataBegin = GetBits(bsi, 8);
 800122c:	ae06      	add	r6, sp, #24
	bsi->iCache = 0;		/* 4-byte unsigned int */
 800122e:	f04f 0200 	mov.w	r2, #0
	bsi->bytePtr = buf;
 8001232:	9106      	str	r1, [sp, #24]
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 8001234:	bf14      	ite	ne
 8001236:	2311      	movne	r3, #17
 8001238:	2309      	moveq	r3, #9
		si->mainDataBegin = GetBits(bsi, 8);
 800123a:	2108      	movs	r1, #8
 800123c:	4630      	mov	r0, r6
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800123e:	9305      	str	r3, [sp, #20]
	bsi->iCache = 0;		/* 4-byte unsigned int */
 8001240:	9207      	str	r2, [sp, #28]
		si->mainDataBegin = GetBits(bsi, 8);
 8001242:	9602      	str	r6, [sp, #8]
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 8001244:	e9cd 2308 	strd	r2, r3, [sp, #32]
		si->mainDataBegin = GetBits(bsi, 8);
 8001248:	f7ff fe5e 	bl	8000f08 <xmp3fixpt_GetBits>
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 800124c:	7f2b      	ldrb	r3, [r5, #28]
		si->mainDataBegin = GetBits(bsi, 8);
 800124e:	9c04      	ldr	r4, [sp, #16]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 8001250:	2b03      	cmp	r3, #3
		si->mainDataBegin = GetBits(bsi, 8);
 8001252:	6020      	str	r0, [r4, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 8001254:	4630      	mov	r0, r6
 8001256:	bf14      	ite	ne
 8001258:	2102      	movne	r1, #2
 800125a:	2101      	moveq	r1, #1
 800125c:	f7ff fe54 	bl	8000f08 <xmp3fixpt_GetBits>
 8001260:	6060      	str	r0, [r4, #4]
	}

	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 8001262:	9a00      	ldr	r2, [sp, #0]
 8001264:	f8d2 37c4 	ldr.w	r3, [r2, #1988]	; 0x7c4
 8001268:	2b00      	cmp	r3, #0
 800126a:	f340 80e4 	ble.w	8001436 <xmp3fixpt_UnpackSideInfo+0x23a>
 800126e:	2700      	movs	r7, #0
 8001270:	f8d2 c7bc 	ldr.w	ip, [r2, #1980]	; 0x7bc
 8001274:	9a04      	ldr	r2, [sp, #16]
 8001276:	9703      	str	r7, [sp, #12]
 8001278:	9201      	str	r2, [sp, #4]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800127a:	f1bc 0f00 	cmp.w	ip, #0
 800127e:	f340 80d1 	ble.w	8001424 <xmp3fixpt_UnpackSideInfo+0x228>
 8001282:	7828      	ldrb	r0, [r5, #0]
 8001284:	2600      	movs	r6, #0
 8001286:	9b07      	ldr	r3, [sp, #28]
 8001288:	9c01      	ldr	r4, [sp, #4]
 800128a:	4686      	mov	lr, r0
 800128c:	9a08      	ldr	r2, [sp, #32]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800128e:	f1a2 000c 	sub.w	r0, r2, #12
	bsi->iCache <<= nBits;					/* left-justify cache */
 8001292:	0319      	lsls	r1, r3, #12
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 8001294:	ea4f 5813 	mov.w	r8, r3, lsr #20
	if (bsi->cachedBits < 0) {
 8001298:	2800      	cmp	r0, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800129a:	e9cd 1007 	strd	r1, r0, [sp, #28]
	if (bsi->cachedBits < 0) {
 800129e:	f2c0 830a 	blt.w	80018b6 <xmp3fixpt_UnpackSideInfo+0x6ba>
 80012a2:	ea4f 5cd1 	mov.w	ip, r1, lsr #23
 80012a6:	055b      	lsls	r3, r3, #21
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80012a8:	f1a0 0109 	sub.w	r1, r0, #9
			sis = &si->sis[gr][ch];						/* side info subblock for this granule, channel */

			sis->part23Length =    GetBits(bsi, 12);
 80012ac:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
	if (bsi->cachedBits < 0) {
 80012b0:	2900      	cmp	r1, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80012b2:	e9cd 3107 	strd	r3, r1, [sp, #28]
	if (bsi->cachedBits < 0) {
 80012b6:	f2c0 82b6 	blt.w	8001826 <xmp3fixpt_UnpackSideInfo+0x62a>
 80012ba:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80012be:	021b      	lsls	r3, r3, #8
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80012c0:	f1a1 0008 	sub.w	r0, r1, #8
			sis->nBigvals =        GetBits(bsi, 9);
 80012c4:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
	if (bsi->cachedBits < 0) {
 80012c8:	2800      	cmp	r0, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80012ca:	e9cd 3007 	strd	r3, r0, [sp, #28]
	if (bsi->cachedBits < 0) {
 80012ce:	f2c0 8269 	blt.w	80017a4 <xmp3fixpt_UnpackSideInfo+0x5a8>
			sis->globalGain =      GetBits(bsi, 8);
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 80012d2:	f1be 0f00 	cmp.w	lr, #0
			sis->globalGain =      GetBits(bsi, 8);
 80012d6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 80012da:	bf15      	itete	ne
 80012dc:	2209      	movne	r2, #9
 80012de:	2204      	moveq	r2, #4
 80012e0:	f04f 0c16 	movne.w	ip, #22
 80012e4:	f04f 0c1b 	moveq.w	ip, #27
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80012e8:	1a80      	subs	r0, r0, r2
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 80012ea:	fa23 fc0c 	lsr.w	ip, r3, ip
	bsi->iCache <<= nBits;					/* left-justify cache */
 80012ee:	4093      	lsls	r3, r2
	if (bsi->cachedBits < 0) {
 80012f0:	2800      	cmp	r0, #0
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 80012f2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80012f6:	e9cd 3007 	strd	r3, r0, [sp, #28]
	if (bsi->cachedBits < 0) {
 80012fa:	f2c0 820f 	blt.w	800171c <xmp3fixpt_UnpackSideInfo+0x520>
 80012fe:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 8001302:	005b      	lsls	r3, r3, #1
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001304:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 8001308:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
	if (bsi->cachedBits < 0) {
 800130c:	f1b8 0f00 	cmp.w	r8, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001310:	e9cd 3807 	strd	r3, r8, [sp, #28]
	if (bsi->cachedBits < 0) {
 8001314:	f2c0 81c3 	blt.w	800169e <xmp3fixpt_UnpackSideInfo+0x4a2>
			sis->winSwitchFlag =   GetBits(bsi, 1);
 8001318:	f8c4 e038 	str.w	lr, [r4, #56]	; 0x38

			if(sis->winSwitchFlag) {
 800131c:	f1be 0f00 	cmp.w	lr, #0
 8001320:	f000 80ce 	beq.w	80014c0 <xmp3fixpt_UnpackSideInfo+0x2c4>
				/* this is a start, stop, short, or mixed block */
				sis->blockType =       GetBits(bsi, 2);		/* 0 = normal, 1 = start, 2 = short, 3 = stop */
 8001324:	2102      	movs	r1, #2
 8001326:	9802      	ldr	r0, [sp, #8]
 8001328:	f7ff fdee 	bl	8000f08 <xmp3fixpt_GetBits>
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800132c:	e9dd 3907 	ldrd	r3, r9, [sp, #28]
				sis->blockType =       GetBits(bsi, 2);		/* 0 = normal, 1 = start, 2 = short, 3 = stop */
 8001330:	63e0      	str	r0, [r4, #60]	; 0x3c
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001332:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
	bsi->iCache <<= nBits;					/* left-justify cache */
 8001336:	0059      	lsls	r1, r3, #1
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 8001338:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
	if (bsi->cachedBits < 0) {
 800133c:	2a00      	cmp	r2, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800133e:	e9cd 1207 	strd	r1, r2, [sp, #28]
	if (bsi->cachedBits < 0) {
 8001342:	f2c0 83ca 	blt.w	8001ada <xmp3fixpt_UnpackSideInfo+0x8de>
 8001346:	0ec8      	lsrs	r0, r1, #27
 8001348:	019b      	lsls	r3, r3, #6
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800134a:	1f51      	subs	r1, r2, #5
				sis->mixedBlock =      GetBits(bsi, 1);		/* 0 = not mixed, 1 = mixed */
 800134c:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
	if (bsi->cachedBits < 0) {
 8001350:	2900      	cmp	r1, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001352:	e9cd 3107 	strd	r3, r1, [sp, #28]
	if (bsi->cachedBits < 0) {
 8001356:	f2c0 8330 	blt.w	80019ba <xmp3fixpt_UnpackSideInfo+0x7be>
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800135a:	1f4a      	subs	r2, r1, #5
 800135c:	ea4f 6cd3 	mov.w	ip, r3, lsr #27
 8001360:	015b      	lsls	r3, r3, #5
				sis->tableSelect[0] =  GetBits(bsi, 5);
 8001362:	6460      	str	r0, [r4, #68]	; 0x44
	if (bsi->cachedBits < 0) {
 8001364:	2a00      	cmp	r2, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001366:	e9cd 3207 	strd	r3, r2, [sp, #28]
	if (bsi->cachedBits < 0) {
 800136a:	f2c0 8371 	blt.w	8001a50 <xmp3fixpt_UnpackSideInfo+0x854>
 800136e:	ea4f 7b53 	mov.w	fp, r3, lsr #29
 8001372:	00db      	lsls	r3, r3, #3
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001374:	1ed1      	subs	r1, r2, #3
				sis->tableSelect[1] =  GetBits(bsi, 5);
				sis->tableSelect[2] =  0;					/* unused */
 8001376:	2000      	movs	r0, #0
				sis->tableSelect[1] =  GetBits(bsi, 5);
 8001378:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
	if (bsi->cachedBits < 0) {
 800137c:	4281      	cmp	r1, r0
				sis->tableSelect[2] =  0;					/* unused */
 800137e:	64e0      	str	r0, [r4, #76]	; 0x4c
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001380:	e9cd 3107 	strd	r3, r1, [sp, #28]
	if (bsi->cachedBits < 0) {
 8001384:	f2c0 850a 	blt.w	8001d9c <xmp3fixpt_UnpackSideInfo+0xba0>
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001388:	1eca      	subs	r2, r1, #3
 800138a:	ea4f 7c53 	mov.w	ip, r3, lsr #29
 800138e:	00db      	lsls	r3, r3, #3
				sis->subBlockGain[0] = GetBits(bsi, 3);
 8001390:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	if (bsi->cachedBits < 0) {
 8001394:	2a00      	cmp	r2, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001396:	e9cd 3207 	strd	r3, r2, [sp, #28]
	if (bsi->cachedBits < 0) {
 800139a:	f2c0 854c 	blt.w	8001e36 <xmp3fixpt_UnpackSideInfo+0xc3a>
 800139e:	0f58      	lsrs	r0, r3, #29
 80013a0:	ea4f 08c3 	mov.w	r8, r3, lsl #3
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80013a4:	1ed3      	subs	r3, r2, #3
				sis->subBlockGain[1] = GetBits(bsi, 3);
 80013a6:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
	if (bsi->cachedBits < 0) {
 80013aa:	2b00      	cmp	r3, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80013ac:	e9cd 8307 	strd	r8, r3, [sp, #28]
	if (bsi->cachedBits < 0) {
 80013b0:	f2c0 8420 	blt.w	8001bf4 <xmp3fixpt_UnpackSideInfo+0x9f8>
				sis->subBlockGain[2] = GetBits(bsi, 3);

				/* TODO - check logic */
				if (sis->blockType == 0) {
 80013b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				sis->subBlockGain[2] = GetBits(bsi, 3);
 80013b6:	65a0      	str	r0, [r4, #88]	; 0x58
				if (sis->blockType == 0) {
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f040 8169 	bne.w	8001690 <xmp3fixpt_UnpackSideInfo+0x494>
 80013be:	6de2      	ldr	r2, [r4, #92]	; 0x5c
					/* this should not be allowed, according to spec */
					sis->nBigvals = 0;
					sis->part23Length = 0;
					sis->sfCompress = 0;
 80013c0:	6363      	str	r3, [r4, #52]	; 0x34
 80013c2:	f1c2 0214 	rsb	r2, r2, #20
					sis->part23Length = 0;
 80013c6:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80013ca:	9b07      	ldr	r3, [sp, #28]
 80013cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
				sis->tableSelect[1] =  GetBits(bsi, 5);
				sis->tableSelect[2] =  GetBits(bsi, 5);
				sis->region0Count =    GetBits(bsi, 4);
				sis->region1Count =    GetBits(bsi, 3);
			}
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 80013d0:	f895 e000 	ldrb.w	lr, [r5]
 80013d4:	0fd8      	lsrs	r0, r3, #31
				sis->region1Count = 20 - sis->region0Count;
 80013d6:	6622      	str	r2, [r4, #96]	; 0x60
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 80013de:	f1be 0f00 	cmp.w	lr, #0
 80013e2:	f000 80ae 	beq.w	8001542 <xmp3fixpt_UnpackSideInfo+0x346>
 80013e6:	2200      	movs	r2, #0
	if (bsi->cachedBits < 0) {
 80013e8:	2900      	cmp	r1, #0
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 80013ea:	6662      	str	r2, [r4, #100]	; 0x64
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80013ec:	e9cd 3107 	strd	r3, r1, [sp, #28]
	if (bsi->cachedBits < 0) {
 80013f0:	f2c0 80ba 	blt.w	8001568 <xmp3fixpt_UnpackSideInfo+0x36c>
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80013f4:	1e4a      	subs	r2, r1, #1
 80013f6:	ea4f 78d3 	mov.w	r8, r3, lsr #31
 80013fa:	005b      	lsls	r3, r3, #1
			sis->sfactScale =        GetBits(bsi, 1);
 80013fc:	66a0      	str	r0, [r4, #104]	; 0x68
	if (bsi->cachedBits < 0) {
 80013fe:	2a00      	cmp	r2, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001400:	e9cd 3207 	strd	r3, r2, [sp, #28]
	if (bsi->cachedBits < 0) {
 8001404:	f2c0 80fc 	blt.w	8001600 <xmp3fixpt_UnpackSideInfo+0x404>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8001408:	9900      	ldr	r1, [sp, #0]
 800140a:	3601      	adds	r6, #1
 800140c:	3448      	adds	r4, #72	; 0x48
 800140e:	f8d1 17bc 	ldr.w	r1, [r1, #1980]	; 0x7bc
			sis->count1TableSelect = GetBits(bsi, 1);
 8001412:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8001416:	42b1      	cmp	r1, r6
 8001418:	f73f af39 	bgt.w	800128e <xmp3fixpt_UnpackSideInfo+0x92>
 800141c:	9b00      	ldr	r3, [sp, #0]
 800141e:	468c      	mov	ip, r1
 8001420:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 8001424:	9a03      	ldr	r2, [sp, #12]
 8001426:	9901      	ldr	r1, [sp, #4]
 8001428:	3201      	adds	r2, #1
 800142a:	3190      	adds	r1, #144	; 0x90
 800142c:	429a      	cmp	r2, r3
 800142e:	9203      	str	r2, [sp, #12]
 8001430:	9101      	str	r1, [sp, #4]
 8001432:	f6ff af22 	blt.w	800127a <xmp3fixpt_UnpackSideInfo+0x7e>
		}
	}
	mp3DecInfo->mainDataBegin = si->mainDataBegin;	/* needed by main decode loop */
 8001436:	9b04      	ldr	r3, [sp, #16]
 8001438:	9a00      	ldr	r2, [sp, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	9805      	ldr	r0, [sp, #20]
 800143e:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8

	ASSERT(nBytes == CalcBitsUsed(bsi, buf, 0) >> 3);

	return nBytes;	
}
 8001442:	b00b      	add	sp, #44	; 0x2c
 8001444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 8001448:	2a03      	cmp	r2, #3
		si->mainDataBegin = GetBits(bsi, 9);
 800144a:	f10d 0818 	add.w	r8, sp, #24
	bsi->bytePtr = buf;
 800144e:	9306      	str	r3, [sp, #24]
		si->mainDataBegin = GetBits(bsi, 9);
 8001450:	f04f 0109 	mov.w	r1, #9
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 8001454:	bf14      	ite	ne
 8001456:	2320      	movne	r3, #32
 8001458:	2311      	moveq	r3, #17
		si->mainDataBegin = GetBits(bsi, 9);
 800145a:	4640      	mov	r0, r8
 800145c:	f8cd 8008 	str.w	r8, [sp, #8]
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 8001460:	9305      	str	r3, [sp, #20]
	bsi->nBytes = nBytes;
 8001462:	9309      	str	r3, [sp, #36]	; 0x24
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 8001464:	e9cd 4407 	strd	r4, r4, [sp, #28]
		si->mainDataBegin = GetBits(bsi, 9);
 8001468:	f7ff fd4e 	bl	8000f08 <xmp3fixpt_GetBits>
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800146c:	7f2b      	ldrb	r3, [r5, #28]
		si->mainDataBegin = GetBits(bsi, 9);
 800146e:	6030      	str	r0, [r6, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 8001470:	4640      	mov	r0, r8
 8001472:	2b03      	cmp	r3, #3
 8001474:	bf14      	ite	ne
 8001476:	2103      	movne	r1, #3
 8001478:	2105      	moveq	r1, #5
 800147a:	f7ff fd45 	bl	8000f08 <xmp3fixpt_GetBits>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800147e:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 8001482:	6070      	str	r0, [r6, #4]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 8001484:	2a00      	cmp	r2, #0
 8001486:	f77f aeec 	ble.w	8001262 <xmp3fixpt_UnpackSideInfo+0x66>
 800148a:	f106 0c18 	add.w	ip, r6, #24
 800148e:	9808      	ldr	r0, [sp, #32]
 8001490:	46ab      	mov	fp, r5
		bsi->iCache = 0;
 8001492:	46a6      	mov	lr, r4
 8001494:	9b07      	ldr	r3, [sp, #28]
 8001496:	eb0c 1802 	add.w	r8, ip, r2, lsl #4
 800149a:	4605      	mov	r5, r0
 800149c:	f1ac 0610 	sub.w	r6, ip, #16
 80014a0:	4629      	mov	r1, r5
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80014a2:	3d01      	subs	r5, #1
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 80014a4:	0fda      	lsrs	r2, r3, #31
	bsi->iCache <<= nBits;					/* left-justify cache */
 80014a6:	005b      	lsls	r3, r3, #1
	if (bsi->cachedBits < 0) {
 80014a8:	2d00      	cmp	r5, #0
	bsi->iCache <<= nBits;					/* left-justify cache */
 80014aa:	e9cd 3507 	strd	r3, r5, [sp, #28]
	if (bsi->cachedBits < 0) {
 80014ae:	f2c0 8243 	blt.w	8001938 <xmp3fixpt_UnpackSideInfo+0x73c>
				si->scfsi[ch][bd] = GetBits(bsi, 1);
 80014b2:	f846 2b04 	str.w	r2, [r6], #4
			for (bd = 0; bd < MAX_SCFBD; bd++)
 80014b6:	45b4      	cmp	ip, r6
 80014b8:	f000 80e3 	beq.w	8001682 <xmp3fixpt_UnpackSideInfo+0x486>
 80014bc:	4629      	mov	r1, r5
 80014be:	e7f0      	b.n	80014a2 <xmp3fixpt_UnpackSideInfo+0x2a6>
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80014c0:	f1a8 0105 	sub.w	r1, r8, #5
	bsi->iCache <<= nBits;					/* left-justify cache */
 80014c4:	0158      	lsls	r0, r3, #5
				sis->blockType = 0;
 80014c6:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 80014ca:	ea4f 6cd3 	mov.w	ip, r3, lsr #27
	if (bsi->cachedBits < 0) {
 80014ce:	2900      	cmp	r1, #0
				sis->mixedBlock = 0;
 80014d0:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80014d4:	e9cd 0107 	strd	r0, r1, [sp, #28]
	if (bsi->cachedBits < 0) {
 80014d8:	f2c0 84f6 	blt.w	8001ec8 <xmp3fixpt_UnpackSideInfo+0xccc>
 80014dc:	0ec0      	lsrs	r0, r0, #27
 80014de:	ea4f 2e83 	mov.w	lr, r3, lsl #10
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80014e2:	1f4a      	subs	r2, r1, #5
				sis->tableSelect[0] =  GetBits(bsi, 5);
 80014e4:	f8c4 c044 	str.w	ip, [r4, #68]	; 0x44
	if (bsi->cachedBits < 0) {
 80014e8:	2a00      	cmp	r2, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80014ea:	e9cd e207 	strd	lr, r2, [sp, #28]
	if (bsi->cachedBits < 0) {
 80014ee:	f2c0 83c4 	blt.w	8001c7a <xmp3fixpt_UnpackSideInfo+0xa7e>
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80014f2:	1f51      	subs	r1, r2, #5
 80014f4:	ea4f 63de 	mov.w	r3, lr, lsr #27
 80014f8:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
				sis->tableSelect[1] =  GetBits(bsi, 5);
 80014fc:	64a0      	str	r0, [r4, #72]	; 0x48
	if (bsi->cachedBits < 0) {
 80014fe:	2900      	cmp	r1, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001500:	e9cd e107 	strd	lr, r1, [sp, #28]
	if (bsi->cachedBits < 0) {
 8001504:	f2c0 8407 	blt.w	8001d16 <xmp3fixpt_UnpackSideInfo+0xb1a>
				sis->tableSelect[2] =  GetBits(bsi, 5);
 8001508:	64e3      	str	r3, [r4, #76]	; 0x4c
				sis->region0Count =    GetBits(bsi, 4);
 800150a:	2104      	movs	r1, #4
 800150c:	9802      	ldr	r0, [sp, #8]
 800150e:	f7ff fcfb 	bl	8000f08 <xmp3fixpt_GetBits>
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001512:	e9dd 3807 	ldrd	r3, r8, [sp, #28]
				sis->region0Count =    GetBits(bsi, 4);
 8001516:	65e0      	str	r0, [r4, #92]	; 0x5c
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001518:	f1a8 0903 	sub.w	r9, r8, #3
	bsi->iCache <<= nBits;					/* left-justify cache */
 800151c:	00da      	lsls	r2, r3, #3
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800151e:	0f59      	lsrs	r1, r3, #29
	if (bsi->cachedBits < 0) {
 8001520:	f1b9 0f00 	cmp.w	r9, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001524:	e9cd 2907 	strd	r2, r9, [sp, #28]
	if (bsi->cachedBits < 0) {
 8001528:	f2c0 831c 	blt.w	8001b64 <xmp3fixpt_UnpackSideInfo+0x968>
 800152c:	0fd0      	lsrs	r0, r2, #31
 800152e:	011b      	lsls	r3, r3, #4
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 8001530:	f895 e000 	ldrb.w	lr, [r5]
				sis->region1Count =    GetBits(bsi, 3);
 8001534:	6621      	str	r1, [r4, #96]	; 0x60
 8001536:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800153a:	f1be 0f00 	cmp.w	lr, #0
 800153e:	f47f af52 	bne.w	80013e6 <xmp3fixpt_UnpackSideInfo+0x1ea>
	if (bsi->cachedBits < 0) {
 8001542:	2900      	cmp	r1, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001544:	e9cd 3107 	strd	r3, r1, [sp, #28]
	if (bsi->cachedBits < 0) {
 8001548:	f2c0 865c 	blt.w	8002204 <xmp3fixpt_UnpackSideInfo+0x1008>
 800154c:	0fda      	lsrs	r2, r3, #31
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800154e:	4682      	mov	sl, r0
	if (bsi->cachedBits < 0) {
 8001550:	4689      	mov	r9, r1
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4610      	mov	r0, r2
 8001556:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800155a:	4652      	mov	r2, sl
	if (bsi->cachedBits < 0) {
 800155c:	2900      	cmp	r1, #0
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800155e:	6662      	str	r2, [r4, #100]	; 0x64
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001560:	e9cd 3107 	strd	r3, r1, [sp, #28]
	if (bsi->cachedBits < 0) {
 8001564:	f6bf af46 	bge.w	80013f4 <xmp3fixpt_UnpackSideInfo+0x1f8>
	int nBytes = bsi->nBytes;
 8001568:	9a09      	ldr	r2, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800156a:	f1c9 0301 	rsb	r3, r9, #1
 800156e:	f101 0c20 	add.w	ip, r1, #32
	if (nBytes >= 4) {
 8001572:	2a03      	cmp	r2, #3
 8001574:	f300 85bf 	bgt.w	80020f6 <xmp3fixpt_UnpackSideInfo+0xefa>
 8001578:	f1c2 0803 	rsb	r8, r2, #3
		bsi->iCache = 0;
 800157c:	9707      	str	r7, [sp, #28]
 800157e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
		while (nBytes--) {
 8001582:	2a00      	cmp	r2, #0
 8001584:	f001 80ce 	beq.w	8002724 <xmp3fixpt_UnpackSideInfo+0x1528>
			bsi->iCache |= (*bsi->bytePtr++);
 8001588:	f8dd a018 	ldr.w	sl, [sp, #24]
		while (nBytes--) {
 800158c:	2a01      	cmp	r2, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800158e:	f10a 0901 	add.w	r9, sl, #1
 8001592:	f8cd 9018 	str.w	r9, [sp, #24]
 8001596:	f89a 9000 	ldrb.w	r9, [sl]
			bsi->iCache <<= 8;
 800159a:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800159e:	f8cd 901c 	str.w	r9, [sp, #28]
		while (nBytes--) {
 80015a2:	d017      	beq.n	80015d4 <xmp3fixpt_UnpackSideInfo+0x3d8>
			bsi->iCache |= (*bsi->bytePtr++);
 80015a4:	f10a 0b02 	add.w	fp, sl, #2
		while (nBytes--) {
 80015a8:	2a02      	cmp	r2, #2
			bsi->iCache |= (*bsi->bytePtr++);
 80015aa:	f8cd b018 	str.w	fp, [sp, #24]
 80015ae:	f89a b001 	ldrb.w	fp, [sl, #1]
 80015b2:	ea4b 0909 	orr.w	r9, fp, r9
			bsi->iCache <<= 8;
 80015b6:	ea4f 2909 	mov.w	r9, r9, lsl #8
 80015ba:	f8cd 901c 	str.w	r9, [sp, #28]
		while (nBytes--) {
 80015be:	d009      	beq.n	80015d4 <xmp3fixpt_UnpackSideInfo+0x3d8>
			bsi->iCache |= (*bsi->bytePtr++);
 80015c0:	f10a 0b03 	add.w	fp, sl, #3
 80015c4:	f8cd b018 	str.w	fp, [sp, #24]
 80015c8:	f89a a002 	ldrb.w	sl, [sl, #2]
 80015cc:	ea4a 0909 	orr.w	r9, sl, r9
			bsi->iCache <<= 8;
 80015d0:	ea4f 2909 	mov.w	r9, r9, lsl #8
 80015d4:	fa09 f808 	lsl.w	r8, r9, r8
 80015d8:	fa28 fc0c 	lsr.w	ip, r8, ip
 80015dc:	fa08 f303 	lsl.w	r3, r8, r3
 80015e0:	ea40 000c 	orr.w	r0, r0, ip
 80015e4:	ea4f 78d3 	mov.w	r8, r3, lsr #31
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
		bsi->nBytes = 0;
 80015ee:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 80015f0:	4661      	mov	r1, ip
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80015f2:	1e4a      	subs	r2, r1, #1
			sis->sfactScale =        GetBits(bsi, 1);
 80015f4:	66a0      	str	r0, [r4, #104]	; 0x68
	if (bsi->cachedBits < 0) {
 80015f6:	2a00      	cmp	r2, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 80015f8:	e9cd 3207 	strd	r3, r2, [sp, #28]
	if (bsi->cachedBits < 0) {
 80015fc:	f6bf af04 	bge.w	8001408 <xmp3fixpt_UnpackSideInfo+0x20c>
	int nBytes = bsi->nBytes;
 8001600:	9809      	ldr	r0, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 8001602:	f1c1 0901 	rsb	r9, r1, #1
 8001606:	311f      	adds	r1, #31
	if (nBytes >= 4) {
 8001608:	2803      	cmp	r0, #3
 800160a:	f300 84a5 	bgt.w	8001f58 <xmp3fixpt_UnpackSideInfo+0xd5c>
 800160e:	f1c0 0c03 	rsb	ip, r0, #3
		bsi->iCache = 0;
 8001612:	9707      	str	r7, [sp, #28]
 8001614:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
		while (nBytes--) {
 8001618:	2800      	cmp	r0, #0
 800161a:	f001 8076 	beq.w	800270a <xmp3fixpt_UnpackSideInfo+0x150e>
			bsi->iCache |= (*bsi->bytePtr++);
 800161e:	f8dd a018 	ldr.w	sl, [sp, #24]
		while (nBytes--) {
 8001622:	2801      	cmp	r0, #1
			bsi->iCache |= (*bsi->bytePtr++);
 8001624:	f10a 0301 	add.w	r3, sl, #1
 8001628:	9306      	str	r3, [sp, #24]
 800162a:	f89a b000 	ldrb.w	fp, [sl]
			bsi->iCache <<= 8;
 800162e:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
 8001632:	f8cd b01c 	str.w	fp, [sp, #28]
		while (nBytes--) {
 8001636:	f001 8086 	beq.w	8002746 <xmp3fixpt_UnpackSideInfo+0x154a>
			bsi->iCache |= (*bsi->bytePtr++);
 800163a:	f10a 0302 	add.w	r3, sl, #2
		while (nBytes--) {
 800163e:	2802      	cmp	r0, #2
			bsi->iCache |= (*bsi->bytePtr++);
 8001640:	9306      	str	r3, [sp, #24]
 8001642:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8001646:	ea43 030b 	orr.w	r3, r3, fp
			bsi->iCache <<= 8;
 800164a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800164e:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001650:	d008      	beq.n	8001664 <xmp3fixpt_UnpackSideInfo+0x468>
			bsi->iCache |= (*bsi->bytePtr++);
 8001652:	f10a 0b03 	add.w	fp, sl, #3
 8001656:	f8cd b018 	str.w	fp, [sp, #24]
 800165a:	f89a a002 	ldrb.w	sl, [sl, #2]
 800165e:	ea4a 0303 	orr.w	r3, sl, r3
			bsi->iCache <<= 8;
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	fa03 f30c 	lsl.w	r3, r3, ip
 8001668:	fa23 f101 	lsr.w	r1, r3, r1
 800166c:	fa03 f309 	lsl.w	r3, r3, r9
 8001670:	ea48 0801 	orr.w	r8, r8, r1
 8001674:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
		bsi->nBytes = 0;
 8001678:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 800167a:	460a      	mov	r2, r1
 800167c:	e9cd 3107 	strd	r3, r1, [sp, #28]
 8001680:	e6c2      	b.n	8001408 <xmp3fixpt_UnpackSideInfo+0x20c>
 8001682:	f10c 0c10 	add.w	ip, ip, #16
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 8001686:	45e0      	cmp	r8, ip
 8001688:	f47f af08 	bne.w	800149c <xmp3fixpt_UnpackSideInfo+0x2a0>
 800168c:	465d      	mov	r5, fp
 800168e:	e5e8      	b.n	8001262 <xmp3fixpt_UnpackSideInfo+0x66>
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 8001690:	2b02      	cmp	r3, #2
 8001692:	f000 85ae 	beq.w	80021f2 <xmp3fixpt_UnpackSideInfo+0xff6>
					sis->region0Count = 7;
 8001696:	2307      	movs	r3, #7
 8001698:	220d      	movs	r2, #13
 800169a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800169c:	e695      	b.n	80013ca <xmp3fixpt_UnpackSideInfo+0x1ce>
	int nBytes = bsi->nBytes;
 800169e:	9a09      	ldr	r2, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 80016a0:	f1c0 0c01 	rsb	ip, r0, #1
 80016a4:	301f      	adds	r0, #31
	if (nBytes >= 4) {
 80016a6:	2a03      	cmp	r2, #3
 80016a8:	f300 847d 	bgt.w	8001fa6 <xmp3fixpt_UnpackSideInfo+0xdaa>
 80016ac:	f1c2 0103 	rsb	r1, r2, #3
		bsi->iCache = 0;
 80016b0:	9707      	str	r7, [sp, #28]
 80016b2:	00c9      	lsls	r1, r1, #3
		while (nBytes--) {
 80016b4:	2a00      	cmp	r2, #0
 80016b6:	f001 802b 	beq.w	8002710 <xmp3fixpt_UnpackSideInfo+0x1514>
			bsi->iCache |= (*bsi->bytePtr++);
 80016ba:	f8dd 9018 	ldr.w	r9, [sp, #24]
		while (nBytes--) {
 80016be:	2a01      	cmp	r2, #1
			bsi->iCache |= (*bsi->bytePtr++);
 80016c0:	f109 0301 	add.w	r3, r9, #1
 80016c4:	9306      	str	r3, [sp, #24]
 80016c6:	f899 a000 	ldrb.w	sl, [r9]
			bsi->iCache <<= 8;
 80016ca:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 80016ce:	f8cd a01c 	str.w	sl, [sp, #28]
		while (nBytes--) {
 80016d2:	f001 802e 	beq.w	8002732 <xmp3fixpt_UnpackSideInfo+0x1536>
			bsi->iCache |= (*bsi->bytePtr++);
 80016d6:	f109 0302 	add.w	r3, r9, #2
		while (nBytes--) {
 80016da:	2a02      	cmp	r2, #2
			bsi->iCache |= (*bsi->bytePtr++);
 80016dc:	9306      	str	r3, [sp, #24]
 80016de:	f899 3001 	ldrb.w	r3, [r9, #1]
 80016e2:	ea43 030a 	orr.w	r3, r3, sl
			bsi->iCache <<= 8;
 80016e6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80016ea:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 80016ec:	d008      	beq.n	8001700 <xmp3fixpt_UnpackSideInfo+0x504>
			bsi->iCache |= (*bsi->bytePtr++);
 80016ee:	f109 0a03 	add.w	sl, r9, #3
 80016f2:	f8cd a018 	str.w	sl, [sp, #24]
 80016f6:	f899 9002 	ldrb.w	r9, [r9, #2]
 80016fa:	ea49 0303 	orr.w	r3, r9, r3
			bsi->iCache <<= 8;
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	408b      	lsls	r3, r1
 8001702:	fa23 f000 	lsr.w	r0, r3, r0
 8001706:	fa03 f30c 	lsl.w	r3, r3, ip
 800170a:	ea4e 0e00 	orr.w	lr, lr, r0
 800170e:	eb08 00c2 	add.w	r0, r8, r2, lsl #3
		bsi->nBytes = 0;
 8001712:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8001714:	4680      	mov	r8, r0
 8001716:	e9cd 3007 	strd	r3, r0, [sp, #28]
 800171a:	e5fd      	b.n	8001318 <xmp3fixpt_UnpackSideInfo+0x11c>
	int nBytes = bsi->nBytes;
 800171c:	9a09      	ldr	r2, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800171e:	4243      	negs	r3, r0
 8001720:	f100 0820 	add.w	r8, r0, #32
	if (nBytes >= 4) {
 8001724:	2a03      	cmp	r2, #3
 8001726:	f300 84bb 	bgt.w	80020a0 <xmp3fixpt_UnpackSideInfo+0xea4>
 800172a:	f1c2 0103 	rsb	r1, r2, #3
		bsi->iCache = 0;
 800172e:	9707      	str	r7, [sp, #28]
 8001730:	00c9      	lsls	r1, r1, #3
		while (nBytes--) {
 8001732:	2a00      	cmp	r2, #0
 8001734:	f000 87f2 	beq.w	800271c <xmp3fixpt_UnpackSideInfo+0x1520>
			bsi->iCache |= (*bsi->bytePtr++);
 8001738:	f8dd 9018 	ldr.w	r9, [sp, #24]
		while (nBytes--) {
 800173c:	2a01      	cmp	r2, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800173e:	f109 0e01 	add.w	lr, r9, #1
 8001742:	f8cd e018 	str.w	lr, [sp, #24]
 8001746:	f899 e000 	ldrb.w	lr, [r9]
			bsi->iCache <<= 8;
 800174a:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800174e:	f8cd e01c 	str.w	lr, [sp, #28]
		while (nBytes--) {
 8001752:	d017      	beq.n	8001784 <xmp3fixpt_UnpackSideInfo+0x588>
			bsi->iCache |= (*bsi->bytePtr++);
 8001754:	f109 0a02 	add.w	sl, r9, #2
		while (nBytes--) {
 8001758:	2a02      	cmp	r2, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800175a:	f8cd a018 	str.w	sl, [sp, #24]
 800175e:	f899 a001 	ldrb.w	sl, [r9, #1]
 8001762:	ea4a 0e0e 	orr.w	lr, sl, lr
			bsi->iCache <<= 8;
 8001766:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800176a:	f8cd e01c 	str.w	lr, [sp, #28]
		while (nBytes--) {
 800176e:	d009      	beq.n	8001784 <xmp3fixpt_UnpackSideInfo+0x588>
			bsi->iCache |= (*bsi->bytePtr++);
 8001770:	f109 0a03 	add.w	sl, r9, #3
 8001774:	f8cd a018 	str.w	sl, [sp, #24]
 8001778:	f899 9002 	ldrb.w	r9, [r9, #2]
 800177c:	ea49 0e0e 	orr.w	lr, r9, lr
			bsi->iCache <<= 8;
 8001780:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 8001784:	fa0e f101 	lsl.w	r1, lr, r1
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	fa21 f808 	lsr.w	r8, r1, r8
 8001790:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 8001794:	ea4c 0c08 	orr.w	ip, ip, r8
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	eb00 08c2 	add.w	r8, r0, r2, lsl #3
		bsi->nBytes = 0;
 800179e:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 80017a0:	4640      	mov	r0, r8
 80017a2:	e5af      	b.n	8001304 <xmp3fixpt_UnpackSideInfo+0x108>
	int nBytes = bsi->nBytes;
 80017a4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 80017a8:	f1c1 0908 	rsb	r9, r1, #8
 80017ac:	3118      	adds	r1, #24
	if (nBytes >= 4) {
 80017ae:	f1bc 0f03 	cmp.w	ip, #3
 80017b2:	f300 844d 	bgt.w	8002050 <xmp3fixpt_UnpackSideInfo+0xe54>
 80017b6:	f1cc 0a03 	rsb	sl, ip, #3
		bsi->iCache = 0;
 80017ba:	9707      	str	r7, [sp, #28]
 80017bc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
		while (nBytes--) {
 80017c0:	f1bc 0f00 	cmp.w	ip, #0
 80017c4:	f000 87a7 	beq.w	8002716 <xmp3fixpt_UnpackSideInfo+0x151a>
			bsi->iCache |= (*bsi->bytePtr++);
 80017c8:	9b06      	ldr	r3, [sp, #24]
		while (nBytes--) {
 80017ca:	f1bc 0f01 	cmp.w	ip, #1
			bsi->iCache |= (*bsi->bytePtr++);
 80017ce:	f103 0201 	add.w	r2, r3, #1
 80017d2:	9206      	str	r2, [sp, #24]
 80017d4:	781a      	ldrb	r2, [r3, #0]
			bsi->iCache <<= 8;
 80017d6:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80017da:	9207      	str	r2, [sp, #28]
		while (nBytes--) {
 80017dc:	f000 8783 	beq.w	80026e6 <xmp3fixpt_UnpackSideInfo+0x14ea>
			bsi->iCache |= (*bsi->bytePtr++);
 80017e0:	f103 0b02 	add.w	fp, r3, #2
		while (nBytes--) {
 80017e4:	f1bc 0f02 	cmp.w	ip, #2
			bsi->iCache |= (*bsi->bytePtr++);
 80017e8:	f8cd b018 	str.w	fp, [sp, #24]
 80017ec:	f893 b001 	ldrb.w	fp, [r3, #1]
 80017f0:	ea4b 0202 	orr.w	r2, fp, r2
			bsi->iCache <<= 8;
 80017f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80017f8:	9207      	str	r2, [sp, #28]
		while (nBytes--) {
 80017fa:	f000 8774 	beq.w	80026e6 <xmp3fixpt_UnpackSideInfo+0x14ea>
			bsi->iCache |= (*bsi->bytePtr++);
 80017fe:	f103 0b03 	add.w	fp, r3, #3
 8001802:	f8cd b018 	str.w	fp, [sp, #24]
 8001806:	789b      	ldrb	r3, [r3, #2]
 8001808:	4313      	orrs	r3, r2
			bsi->iCache <<= 8;
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	fa03 f30a 	lsl.w	r3, r3, sl
 8001810:	fa23 f101 	lsr.w	r1, r3, r1
 8001814:	fa03 f309 	lsl.w	r3, r3, r9
 8001818:	ea48 0801 	orr.w	r8, r8, r1
 800181c:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
		bsi->nBytes = 0;
 8001820:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8001822:	4608      	mov	r0, r1
 8001824:	e555      	b.n	80012d2 <xmp3fixpt_UnpackSideInfo+0xd6>
	int nBytes = bsi->nBytes;
 8001826:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800182a:	f1c0 0309 	rsb	r3, r0, #9
 800182e:	3017      	adds	r0, #23
	if (nBytes >= 4) {
 8001830:	f1b9 0f03 	cmp.w	r9, #3
 8001834:	f300 83de 	bgt.w	8001ff4 <xmp3fixpt_UnpackSideInfo+0xdf8>
 8001838:	f1c9 0803 	rsb	r8, r9, #3
		bsi->iCache = 0;
 800183c:	9707      	str	r7, [sp, #28]
 800183e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
		while (nBytes--) {
 8001842:	f1b9 0f00 	cmp.w	r9, #0
 8001846:	f000 875c 	beq.w	8002702 <xmp3fixpt_UnpackSideInfo+0x1506>
			bsi->iCache |= (*bsi->bytePtr++);
 800184a:	f8dd a018 	ldr.w	sl, [sp, #24]
		while (nBytes--) {
 800184e:	f1b9 0f01 	cmp.w	r9, #1
			bsi->iCache |= (*bsi->bytePtr++);
 8001852:	f10a 0201 	add.w	r2, sl, #1
 8001856:	9206      	str	r2, [sp, #24]
 8001858:	f89a 2000 	ldrb.w	r2, [sl]
			bsi->iCache <<= 8;
 800185c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8001860:	9207      	str	r2, [sp, #28]
		while (nBytes--) {
 8001862:	f000 8733 	beq.w	80026cc <xmp3fixpt_UnpackSideInfo+0x14d0>
			bsi->iCache |= (*bsi->bytePtr++);
 8001866:	f10a 0b02 	add.w	fp, sl, #2
		while (nBytes--) {
 800186a:	f1b9 0f02 	cmp.w	r9, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800186e:	f8cd b018 	str.w	fp, [sp, #24]
 8001872:	f89a b001 	ldrb.w	fp, [sl, #1]
 8001876:	ea4b 0202 	orr.w	r2, fp, r2
			bsi->iCache <<= 8;
 800187a:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800187e:	9207      	str	r2, [sp, #28]
		while (nBytes--) {
 8001880:	f000 8724 	beq.w	80026cc <xmp3fixpt_UnpackSideInfo+0x14d0>
			bsi->iCache |= (*bsi->bytePtr++);
 8001884:	f10a 0b03 	add.w	fp, sl, #3
 8001888:	f8cd b018 	str.w	fp, [sp, #24]
 800188c:	f89a a002 	ldrb.w	sl, [sl, #2]
 8001890:	ea4a 0202 	orr.w	r2, sl, r2
			bsi->iCache <<= 8;
 8001894:	0212      	lsls	r2, r2, #8
 8001896:	fa02 f808 	lsl.w	r8, r2, r8
 800189a:	fa28 f000 	lsr.w	r0, r8, r0
 800189e:	fa08 f303 	lsl.w	r3, r8, r3
 80018a2:	ea4c 0c00 	orr.w	ip, ip, r0
 80018a6:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	eb01 00c9 	add.w	r0, r1, r9, lsl #3
		bsi->nBytes = 0;
 80018b0:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 80018b2:	4601      	mov	r1, r0
 80018b4:	e504      	b.n	80012c0 <xmp3fixpt_UnpackSideInfo+0xc4>
	int nBytes = bsi->nBytes;
 80018b6:	9909      	ldr	r1, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 80018b8:	f1c2 0c0c 	rsb	ip, r2, #12
 80018bc:	3214      	adds	r2, #20
	if (nBytes >= 4) {
 80018be:	2903      	cmp	r1, #3
 80018c0:	f300 8449 	bgt.w	8002156 <xmp3fixpt_UnpackSideInfo+0xf5a>
 80018c4:	f1c1 0903 	rsb	r9, r1, #3
		bsi->iCache = 0;
 80018c8:	9707      	str	r7, [sp, #28]
 80018ca:	ea4f 09c9 	mov.w	r9, r9, lsl #3
		while (nBytes--) {
 80018ce:	2900      	cmp	r1, #0
 80018d0:	f000 8713 	beq.w	80026fa <xmp3fixpt_UnpackSideInfo+0x14fe>
			bsi->iCache |= (*bsi->bytePtr++);
 80018d4:	f8dd a018 	ldr.w	sl, [sp, #24]
		while (nBytes--) {
 80018d8:	2901      	cmp	r1, #1
			bsi->iCache |= (*bsi->bytePtr++);
 80018da:	f10a 0301 	add.w	r3, sl, #1
 80018de:	9306      	str	r3, [sp, #24]
 80018e0:	f89a 3000 	ldrb.w	r3, [sl]
			bsi->iCache <<= 8;
 80018e4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80018e8:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 80018ea:	d015      	beq.n	8001918 <xmp3fixpt_UnpackSideInfo+0x71c>
			bsi->iCache |= (*bsi->bytePtr++);
 80018ec:	f10a 0b02 	add.w	fp, sl, #2
		while (nBytes--) {
 80018f0:	2902      	cmp	r1, #2
			bsi->iCache |= (*bsi->bytePtr++);
 80018f2:	f8cd b018 	str.w	fp, [sp, #24]
 80018f6:	f89a b001 	ldrb.w	fp, [sl, #1]
 80018fa:	ea4b 0303 	orr.w	r3, fp, r3
			bsi->iCache <<= 8;
 80018fe:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001902:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001904:	d008      	beq.n	8001918 <xmp3fixpt_UnpackSideInfo+0x71c>
			bsi->iCache |= (*bsi->bytePtr++);
 8001906:	f10a 0b03 	add.w	fp, sl, #3
 800190a:	f8cd b018 	str.w	fp, [sp, #24]
 800190e:	f89a a002 	ldrb.w	sl, [sl, #2]
 8001912:	ea4a 0303 	orr.w	r3, sl, r3
			bsi->iCache <<= 8;
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	fa03 f309 	lsl.w	r3, r3, r9
 800191c:	fa23 f202 	lsr.w	r2, r3, r2
 8001920:	fa03 f30c 	lsl.w	r3, r3, ip
 8001924:	ea48 0802 	orr.w	r8, r8, r2
 8001928:	ea4f 5cd3 	mov.w	ip, r3, lsr #23
 800192c:	025b      	lsls	r3, r3, #9
 800192e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		bsi->nBytes = 0;
 8001932:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8001934:	4610      	mov	r0, r2
 8001936:	e4b7      	b.n	80012a8 <xmp3fixpt_UnpackSideInfo+0xac>
	int nBytes = bsi->nBytes;
 8001938:	9809      	ldr	r0, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800193a:	f1c1 0301 	rsb	r3, r1, #1
 800193e:	311f      	adds	r1, #31
	if (nBytes >= 4) {
 8001940:	2803      	cmp	r0, #3
 8001942:	f300 8432 	bgt.w	80021aa <xmp3fixpt_UnpackSideInfo+0xfae>
 8001946:	f1c0 0403 	rsb	r4, r0, #3
		bsi->iCache = 0;
 800194a:	f8cd e01c 	str.w	lr, [sp, #28]
 800194e:	00e4      	lsls	r4, r4, #3
		while (nBytes--) {
 8001950:	2800      	cmp	r0, #0
 8001952:	f000 86eb 	beq.w	800272c <xmp3fixpt_UnpackSideInfo+0x1530>
			bsi->iCache |= (*bsi->bytePtr++);
 8001956:	f8dd 9018 	ldr.w	r9, [sp, #24]
		while (nBytes--) {
 800195a:	2801      	cmp	r0, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800195c:	f109 0701 	add.w	r7, r9, #1
 8001960:	9706      	str	r7, [sp, #24]
 8001962:	f899 7000 	ldrb.w	r7, [r9]
			bsi->iCache <<= 8;
 8001966:	ea4f 2a07 	mov.w	sl, r7, lsl #8
 800196a:	f8cd a01c 	str.w	sl, [sp, #28]
		while (nBytes--) {
 800196e:	f000 86f4 	beq.w	800275a <xmp3fixpt_UnpackSideInfo+0x155e>
			bsi->iCache |= (*bsi->bytePtr++);
 8001972:	f109 0702 	add.w	r7, r9, #2
		while (nBytes--) {
 8001976:	2802      	cmp	r0, #2
			bsi->iCache |= (*bsi->bytePtr++);
 8001978:	9706      	str	r7, [sp, #24]
 800197a:	f899 7001 	ldrb.w	r7, [r9, #1]
 800197e:	ea47 070a 	orr.w	r7, r7, sl
			bsi->iCache <<= 8;
 8001982:	ea4f 2707 	mov.w	r7, r7, lsl #8
 8001986:	9707      	str	r7, [sp, #28]
		while (nBytes--) {
 8001988:	d008      	beq.n	800199c <xmp3fixpt_UnpackSideInfo+0x7a0>
			bsi->iCache |= (*bsi->bytePtr++);
 800198a:	f109 0a03 	add.w	sl, r9, #3
 800198e:	f8cd a018 	str.w	sl, [sp, #24]
 8001992:	f899 9002 	ldrb.w	r9, [r9, #2]
 8001996:	ea49 0707 	orr.w	r7, r9, r7
			bsi->iCache <<= 8;
 800199a:	023f      	lsls	r7, r7, #8
 800199c:	fa07 f404 	lsl.w	r4, r7, r4
 80019a0:	fa24 f101 	lsr.w	r1, r4, r1
 80019a4:	fa04 f303 	lsl.w	r3, r4, r3
 80019a8:	430a      	orrs	r2, r1
 80019aa:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
		bsi->nBytes = 0;
 80019ae:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 80019b2:	460d      	mov	r5, r1
 80019b4:	e9cd 3107 	strd	r3, r1, [sp, #28]
 80019b8:	e57b      	b.n	80014b2 <xmp3fixpt_UnpackSideInfo+0x2b6>
	int nBytes = bsi->nBytes;
 80019ba:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 80019be:	f1c2 0c05 	rsb	ip, r2, #5
 80019c2:	321b      	adds	r2, #27
	if (nBytes >= 4) {
 80019c4:	f1be 0f03 	cmp.w	lr, #3
 80019c8:	f300 8499 	bgt.w	80022fe <xmp3fixpt_UnpackSideInfo+0x1102>
 80019cc:	f1ce 0803 	rsb	r8, lr, #3
		bsi->iCache = 0;
 80019d0:	9707      	str	r7, [sp, #28]
 80019d2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
		while (nBytes--) {
 80019d6:	f1be 0f00 	cmp.w	lr, #0
 80019da:	f000 866a 	beq.w	80026b2 <xmp3fixpt_UnpackSideInfo+0x14b6>
			bsi->iCache |= (*bsi->bytePtr++);
 80019de:	f8dd 9018 	ldr.w	r9, [sp, #24]
		while (nBytes--) {
 80019e2:	f1be 0f01 	cmp.w	lr, #1
			bsi->iCache |= (*bsi->bytePtr++);
 80019e6:	f109 0301 	add.w	r3, r9, #1
 80019ea:	9306      	str	r3, [sp, #24]
 80019ec:	f899 3000 	ldrb.w	r3, [r9]
			bsi->iCache <<= 8;
 80019f0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80019f4:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 80019f6:	d016      	beq.n	8001a26 <xmp3fixpt_UnpackSideInfo+0x82a>
			bsi->iCache |= (*bsi->bytePtr++);
 80019f8:	f109 0a02 	add.w	sl, r9, #2
		while (nBytes--) {
 80019fc:	f1be 0f02 	cmp.w	lr, #2
			bsi->iCache |= (*bsi->bytePtr++);
 8001a00:	f8cd a018 	str.w	sl, [sp, #24]
 8001a04:	f899 a001 	ldrb.w	sl, [r9, #1]
 8001a08:	ea4a 0303 	orr.w	r3, sl, r3
			bsi->iCache <<= 8;
 8001a0c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001a10:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001a12:	d008      	beq.n	8001a26 <xmp3fixpt_UnpackSideInfo+0x82a>
			bsi->iCache |= (*bsi->bytePtr++);
 8001a14:	f109 0a03 	add.w	sl, r9, #3
 8001a18:	f8cd a018 	str.w	sl, [sp, #24]
 8001a1c:	f899 9002 	ldrb.w	r9, [r9, #2]
 8001a20:	ea49 0303 	orr.w	r3, r9, r3
			bsi->iCache <<= 8;
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	fa03 f308 	lsl.w	r3, r3, r8
 8001a2a:	fa23 f202 	lsr.w	r2, r3, r2
 8001a2e:	fa03 f30c 	lsl.w	r3, r3, ip
 8001a32:	4310      	orrs	r0, r2
 8001a34:	ea4f 6cd3 	mov.w	ip, r3, lsr #27
 8001a38:	015b      	lsls	r3, r3, #5
 8001a3a:	eb01 02ce 	add.w	r2, r1, lr, lsl #3
		bsi->nBytes = 0;
 8001a3e:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8001a40:	4611      	mov	r1, r2
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001a42:	1f4a      	subs	r2, r1, #5
				sis->tableSelect[0] =  GetBits(bsi, 5);
 8001a44:	6460      	str	r0, [r4, #68]	; 0x44
	if (bsi->cachedBits < 0) {
 8001a46:	2a00      	cmp	r2, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001a48:	e9cd 3207 	strd	r3, r2, [sp, #28]
	if (bsi->cachedBits < 0) {
 8001a4c:	f6bf ac8f 	bge.w	800136e <xmp3fixpt_UnpackSideInfo+0x172>
	int nBytes = bsi->nBytes;
 8001a50:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 8001a54:	f1c1 0005 	rsb	r0, r1, #5
 8001a58:	311b      	adds	r1, #27
	if (nBytes >= 4) {
 8001a5a:	f1be 0f03 	cmp.w	lr, #3
 8001a5e:	f300 841f 	bgt.w	80022a0 <xmp3fixpt_UnpackSideInfo+0x10a4>
 8001a62:	f1ce 0803 	rsb	r8, lr, #3
		bsi->iCache = 0;
 8001a66:	9707      	str	r7, [sp, #28]
 8001a68:	ea4f 08c8 	mov.w	r8, r8, lsl #3
		while (nBytes--) {
 8001a6c:	f1be 0f00 	cmp.w	lr, #0
 8001a70:	f000 8608 	beq.w	8002684 <xmp3fixpt_UnpackSideInfo+0x1488>
			bsi->iCache |= (*bsi->bytePtr++);
 8001a74:	f8dd 9018 	ldr.w	r9, [sp, #24]
		while (nBytes--) {
 8001a78:	f1be 0f01 	cmp.w	lr, #1
			bsi->iCache |= (*bsi->bytePtr++);
 8001a7c:	f109 0301 	add.w	r3, r9, #1
 8001a80:	9306      	str	r3, [sp, #24]
 8001a82:	f899 3000 	ldrb.w	r3, [r9]
			bsi->iCache <<= 8;
 8001a86:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001a8a:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001a8c:	d016      	beq.n	8001abc <xmp3fixpt_UnpackSideInfo+0x8c0>
			bsi->iCache |= (*bsi->bytePtr++);
 8001a8e:	f109 0a02 	add.w	sl, r9, #2
		while (nBytes--) {
 8001a92:	f1be 0f02 	cmp.w	lr, #2
			bsi->iCache |= (*bsi->bytePtr++);
 8001a96:	f8cd a018 	str.w	sl, [sp, #24]
 8001a9a:	f899 a001 	ldrb.w	sl, [r9, #1]
 8001a9e:	ea4a 0303 	orr.w	r3, sl, r3
			bsi->iCache <<= 8;
 8001aa2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001aa6:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001aa8:	d008      	beq.n	8001abc <xmp3fixpt_UnpackSideInfo+0x8c0>
			bsi->iCache |= (*bsi->bytePtr++);
 8001aaa:	f109 0a03 	add.w	sl, r9, #3
 8001aae:	f8cd a018 	str.w	sl, [sp, #24]
 8001ab2:	f899 9002 	ldrb.w	r9, [r9, #2]
 8001ab6:	ea49 0303 	orr.w	r3, r9, r3
			bsi->iCache <<= 8;
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	fa03 f308 	lsl.w	r3, r3, r8
 8001ac0:	fa23 f101 	lsr.w	r1, r3, r1
 8001ac4:	4083      	lsls	r3, r0
 8001ac6:	ea4c 0c01 	orr.w	ip, ip, r1
 8001aca:	ea4f 7b53 	mov.w	fp, r3, lsr #29
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	eb02 01ce 	add.w	r1, r2, lr, lsl #3
		bsi->nBytes = 0;
 8001ad4:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8001ad6:	460a      	mov	r2, r1
 8001ad8:	e44c      	b.n	8001374 <xmp3fixpt_UnpackSideInfo+0x178>
	int nBytes = bsi->nBytes;
 8001ada:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 8001ade:	f1c9 0801 	rsb	r8, r9, #1
 8001ae2:	f109 011f 	add.w	r1, r9, #31
	if (nBytes >= 4) {
 8001ae6:	f1be 0f03 	cmp.w	lr, #3
 8001aea:	f300 8437 	bgt.w	800235c <xmp3fixpt_UnpackSideInfo+0x1160>
 8001aee:	f1ce 0003 	rsb	r0, lr, #3
		bsi->iCache = 0;
 8001af2:	9707      	str	r7, [sp, #28]
 8001af4:	00c0      	lsls	r0, r0, #3
		while (nBytes--) {
 8001af6:	f1be 0f00 	cmp.w	lr, #0
 8001afa:	f000 85e3 	beq.w	80026c4 <xmp3fixpt_UnpackSideInfo+0x14c8>
			bsi->iCache |= (*bsi->bytePtr++);
 8001afe:	f8dd 9018 	ldr.w	r9, [sp, #24]
		while (nBytes--) {
 8001b02:	f1be 0f01 	cmp.w	lr, #1
			bsi->iCache |= (*bsi->bytePtr++);
 8001b06:	f109 0301 	add.w	r3, r9, #1
 8001b0a:	9306      	str	r3, [sp, #24]
 8001b0c:	f899 3000 	ldrb.w	r3, [r9]
			bsi->iCache <<= 8;
 8001b10:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001b14:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001b16:	d016      	beq.n	8001b46 <xmp3fixpt_UnpackSideInfo+0x94a>
			bsi->iCache |= (*bsi->bytePtr++);
 8001b18:	f109 0a02 	add.w	sl, r9, #2
		while (nBytes--) {
 8001b1c:	f1be 0f02 	cmp.w	lr, #2
			bsi->iCache |= (*bsi->bytePtr++);
 8001b20:	f8cd a018 	str.w	sl, [sp, #24]
 8001b24:	f899 a001 	ldrb.w	sl, [r9, #1]
 8001b28:	ea4a 0303 	orr.w	r3, sl, r3
			bsi->iCache <<= 8;
 8001b2c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001b30:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001b32:	d008      	beq.n	8001b46 <xmp3fixpt_UnpackSideInfo+0x94a>
			bsi->iCache |= (*bsi->bytePtr++);
 8001b34:	f109 0a03 	add.w	sl, r9, #3
 8001b38:	f8cd a018 	str.w	sl, [sp, #24]
 8001b3c:	f899 9002 	ldrb.w	r9, [r9, #2]
 8001b40:	ea49 0303 	orr.w	r3, r9, r3
			bsi->iCache <<= 8;
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	4083      	lsls	r3, r0
 8001b48:	fa23 f101 	lsr.w	r1, r3, r1
 8001b4c:	fa03 f308 	lsl.w	r3, r3, r8
 8001b50:	ea4c 0c01 	orr.w	ip, ip, r1
 8001b54:	0ed8      	lsrs	r0, r3, #27
 8001b56:	015b      	lsls	r3, r3, #5
 8001b58:	eb02 01ce 	add.w	r1, r2, lr, lsl #3
		bsi->nBytes = 0;
 8001b5c:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8001b5e:	460a      	mov	r2, r1
 8001b60:	f7ff bbf3 	b.w	800134a <xmp3fixpt_UnpackSideInfo+0x14e>
	int nBytes = bsi->nBytes;
 8001b64:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 8001b68:	f1c8 0e03 	rsb	lr, r8, #3
 8001b6c:	f108 021d 	add.w	r2, r8, #29
	if (nBytes >= 4) {
 8001b70:	f1bc 0f03 	cmp.w	ip, #3
 8001b74:	f300 84a4 	bgt.w	80024c0 <xmp3fixpt_UnpackSideInfo+0x12c4>
 8001b78:	f1cc 0003 	rsb	r0, ip, #3
		bsi->iCache = 0;
 8001b7c:	9707      	str	r7, [sp, #28]
 8001b7e:	00c0      	lsls	r0, r0, #3
		while (nBytes--) {
 8001b80:	f1bc 0f00 	cmp.w	ip, #0
 8001b84:	f000 8599 	beq.w	80026ba <xmp3fixpt_UnpackSideInfo+0x14be>
			bsi->iCache |= (*bsi->bytePtr++);
 8001b88:	f8dd 8018 	ldr.w	r8, [sp, #24]
		while (nBytes--) {
 8001b8c:	f1bc 0f01 	cmp.w	ip, #1
			bsi->iCache |= (*bsi->bytePtr++);
 8001b90:	f108 0301 	add.w	r3, r8, #1
 8001b94:	9306      	str	r3, [sp, #24]
 8001b96:	f898 3000 	ldrb.w	r3, [r8]
			bsi->iCache <<= 8;
 8001b9a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001b9e:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001ba0:	f000 8613 	beq.w	80027ca <xmp3fixpt_UnpackSideInfo+0x15ce>
			bsi->iCache |= (*bsi->bytePtr++);
 8001ba4:	f108 0a02 	add.w	sl, r8, #2
		while (nBytes--) {
 8001ba8:	f1bc 0f02 	cmp.w	ip, #2
			bsi->iCache |= (*bsi->bytePtr++);
 8001bac:	f8cd a018 	str.w	sl, [sp, #24]
 8001bb0:	f898 a001 	ldrb.w	sl, [r8, #1]
 8001bb4:	ea4a 0303 	orr.w	r3, sl, r3
			bsi->iCache <<= 8;
 8001bb8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001bbc:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001bbe:	f000 8604 	beq.w	80027ca <xmp3fixpt_UnpackSideInfo+0x15ce>
			bsi->iCache |= (*bsi->bytePtr++);
 8001bc2:	f108 0a03 	add.w	sl, r8, #3
 8001bc6:	f8cd a018 	str.w	sl, [sp, #24]
 8001bca:	f898 8002 	ldrb.w	r8, [r8, #2]
 8001bce:	ea48 0303 	orr.w	r3, r8, r3
			bsi->iCache <<= 8;
 8001bd2:	021b      	lsls	r3, r3, #8
 8001bd4:	fa03 f000 	lsl.w	r0, r3, r0
 8001bd8:	fa20 f202 	lsr.w	r2, r0, r2
 8001bdc:	fa00 fe0e 	lsl.w	lr, r0, lr
 8001be0:	4311      	orrs	r1, r2
 8001be2:	ea4f 70de 	mov.w	r0, lr, lsr #31
 8001be6:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8001bea:	eb09 02cc 	add.w	r2, r9, ip, lsl #3
		bsi->nBytes = 0;
 8001bee:	9709      	str	r7, [sp, #36]	; 0x24
 8001bf0:	f000 bc8f 	b.w	8002512 <xmp3fixpt_UnpackSideInfo+0x1316>
	int nBytes = bsi->nBytes;
 8001bf4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 8001bf8:	f1c2 0e03 	rsb	lr, r2, #3
 8001bfc:	321d      	adds	r2, #29
	if (nBytes >= 4) {
 8001bfe:	f1bc 0f03 	cmp.w	ip, #3
 8001c02:	f300 8403 	bgt.w	800240c <xmp3fixpt_UnpackSideInfo+0x1210>
 8001c06:	f1cc 0803 	rsb	r8, ip, #3
		bsi->iCache = 0;
 8001c0a:	9707      	str	r7, [sp, #28]
 8001c0c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
		while (nBytes--) {
 8001c10:	f1bc 0f00 	cmp.w	ip, #0
 8001c14:	f000 853a 	beq.w	800268c <xmp3fixpt_UnpackSideInfo+0x1490>
			bsi->iCache |= (*bsi->bytePtr++);
 8001c18:	f8dd 9018 	ldr.w	r9, [sp, #24]
		while (nBytes--) {
 8001c1c:	f1bc 0f01 	cmp.w	ip, #1
			bsi->iCache |= (*bsi->bytePtr++);
 8001c20:	f109 0101 	add.w	r1, r9, #1
 8001c24:	9106      	str	r1, [sp, #24]
 8001c26:	f899 1000 	ldrb.w	r1, [r9]
			bsi->iCache <<= 8;
 8001c2a:	ea4f 2101 	mov.w	r1, r1, lsl #8
 8001c2e:	9107      	str	r1, [sp, #28]
		while (nBytes--) {
 8001c30:	f000 85be 	beq.w	80027b0 <xmp3fixpt_UnpackSideInfo+0x15b4>
			bsi->iCache |= (*bsi->bytePtr++);
 8001c34:	f109 0a02 	add.w	sl, r9, #2
		while (nBytes--) {
 8001c38:	f1bc 0f02 	cmp.w	ip, #2
			bsi->iCache |= (*bsi->bytePtr++);
 8001c3c:	f8cd a018 	str.w	sl, [sp, #24]
 8001c40:	f899 a001 	ldrb.w	sl, [r9, #1]
 8001c44:	ea4a 0101 	orr.w	r1, sl, r1
			bsi->iCache <<= 8;
 8001c48:	ea4f 2101 	mov.w	r1, r1, lsl #8
 8001c4c:	9107      	str	r1, [sp, #28]
		while (nBytes--) {
 8001c4e:	f000 85af 	beq.w	80027b0 <xmp3fixpt_UnpackSideInfo+0x15b4>
			bsi->iCache |= (*bsi->bytePtr++);
 8001c52:	f109 0a03 	add.w	sl, r9, #3
 8001c56:	f8cd a018 	str.w	sl, [sp, #24]
 8001c5a:	f899 9002 	ldrb.w	r9, [r9, #2]
 8001c5e:	ea49 0101 	orr.w	r1, r9, r1
			bsi->iCache <<= 8;
 8001c62:	0209      	lsls	r1, r1, #8
 8001c64:	fa01 f808 	lsl.w	r8, r1, r8
 8001c68:	fa28 f202 	lsr.w	r2, r8, r2
 8001c6c:	fa08 f10e 	lsl.w	r1, r8, lr
 8001c70:	4310      	orrs	r0, r2
 8001c72:	eb03 02cc 	add.w	r2, r3, ip, lsl #3
		bsi->nBytes = 0;
 8001c76:	9709      	str	r7, [sp, #36]	; 0x24
 8001c78:	e3ef      	b.n	800245a <xmp3fixpt_UnpackSideInfo+0x125e>
	int nBytes = bsi->nBytes;
 8001c7a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 8001c7e:	f1c1 0e05 	rsb	lr, r1, #5
 8001c82:	311b      	adds	r1, #27
	if (nBytes >= 4) {
 8001c84:	f1bc 0f03 	cmp.w	ip, #3
 8001c88:	f300 8473 	bgt.w	8002572 <xmp3fixpt_UnpackSideInfo+0x1376>
 8001c8c:	f1cc 0803 	rsb	r8, ip, #3
		bsi->iCache = 0;
 8001c90:	9707      	str	r7, [sp, #28]
 8001c92:	ea4f 08c8 	mov.w	r8, r8, lsl #3
		while (nBytes--) {
 8001c96:	f1bc 0f00 	cmp.w	ip, #0
 8001c9a:	f000 84fd 	beq.w	8002698 <xmp3fixpt_UnpackSideInfo+0x149c>
			bsi->iCache |= (*bsi->bytePtr++);
 8001c9e:	f8dd 9018 	ldr.w	r9, [sp, #24]
		while (nBytes--) {
 8001ca2:	f1bc 0f01 	cmp.w	ip, #1
			bsi->iCache |= (*bsi->bytePtr++);
 8001ca6:	f109 0301 	add.w	r3, r9, #1
 8001caa:	9306      	str	r3, [sp, #24]
 8001cac:	f899 3000 	ldrb.w	r3, [r9]
			bsi->iCache <<= 8;
 8001cb0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001cb4:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001cb6:	f000 8565 	beq.w	8002784 <xmp3fixpt_UnpackSideInfo+0x1588>
			bsi->iCache |= (*bsi->bytePtr++);
 8001cba:	f109 0a02 	add.w	sl, r9, #2
		while (nBytes--) {
 8001cbe:	f1bc 0f02 	cmp.w	ip, #2
			bsi->iCache |= (*bsi->bytePtr++);
 8001cc2:	f8cd a018 	str.w	sl, [sp, #24]
 8001cc6:	f899 a001 	ldrb.w	sl, [r9, #1]
 8001cca:	ea4a 0303 	orr.w	r3, sl, r3
			bsi->iCache <<= 8;
 8001cce:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001cd2:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001cd4:	f000 8556 	beq.w	8002784 <xmp3fixpt_UnpackSideInfo+0x1588>
			bsi->iCache |= (*bsi->bytePtr++);
 8001cd8:	f109 0a03 	add.w	sl, r9, #3
 8001cdc:	f8cd a018 	str.w	sl, [sp, #24]
 8001ce0:	f899 9002 	ldrb.w	r9, [r9, #2]
 8001ce4:	ea49 0303 	orr.w	r3, r9, r3
			bsi->iCache <<= 8;
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	fa03 f808 	lsl.w	r8, r3, r8
 8001cee:	fa08 fe0e 	lsl.w	lr, r8, lr
 8001cf2:	fa28 f101 	lsr.w	r1, r8, r1
 8001cf6:	ea4f 63de 	mov.w	r3, lr, lsr #27
 8001cfa:	4308      	orrs	r0, r1
 8001cfc:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 8001d00:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		bsi->nBytes = 0;
 8001d04:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8001d06:	460a      	mov	r2, r1
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001d08:	1f51      	subs	r1, r2, #5
				sis->tableSelect[1] =  GetBits(bsi, 5);
 8001d0a:	64a0      	str	r0, [r4, #72]	; 0x48
	if (bsi->cachedBits < 0) {
 8001d0c:	2900      	cmp	r1, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001d0e:	e9cd e107 	strd	lr, r1, [sp, #28]
	if (bsi->cachedBits < 0) {
 8001d12:	f6bf abf9 	bge.w	8001508 <xmp3fixpt_UnpackSideInfo+0x30c>
	int nBytes = bsi->nBytes;
 8001d16:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 8001d1a:	f1c2 0e05 	rsb	lr, r2, #5
 8001d1e:	321b      	adds	r2, #27
	if (nBytes >= 4) {
 8001d20:	f1bc 0f03 	cmp.w	ip, #3
 8001d24:	f300 83fa 	bgt.w	800251c <xmp3fixpt_UnpackSideInfo+0x1320>
 8001d28:	f1cc 0803 	rsb	r8, ip, #3
		bsi->iCache = 0;
 8001d2c:	9707      	str	r7, [sp, #28]
 8001d2e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
		while (nBytes--) {
 8001d32:	f1bc 0f00 	cmp.w	ip, #0
 8001d36:	f000 84b9 	beq.w	80026ac <xmp3fixpt_UnpackSideInfo+0x14b0>
			bsi->iCache |= (*bsi->bytePtr++);
 8001d3a:	f8dd 9018 	ldr.w	r9, [sp, #24]
		while (nBytes--) {
 8001d3e:	f1bc 0f01 	cmp.w	ip, #1
			bsi->iCache |= (*bsi->bytePtr++);
 8001d42:	f109 0001 	add.w	r0, r9, #1
 8001d46:	9006      	str	r0, [sp, #24]
 8001d48:	f899 0000 	ldrb.w	r0, [r9]
			bsi->iCache <<= 8;
 8001d4c:	ea4f 2000 	mov.w	r0, r0, lsl #8
 8001d50:	9007      	str	r0, [sp, #28]
		while (nBytes--) {
 8001d52:	f000 8524 	beq.w	800279e <xmp3fixpt_UnpackSideInfo+0x15a2>
			bsi->iCache |= (*bsi->bytePtr++);
 8001d56:	f109 0a02 	add.w	sl, r9, #2
		while (nBytes--) {
 8001d5a:	f1bc 0f02 	cmp.w	ip, #2
			bsi->iCache |= (*bsi->bytePtr++);
 8001d5e:	f8cd a018 	str.w	sl, [sp, #24]
 8001d62:	f899 a001 	ldrb.w	sl, [r9, #1]
 8001d66:	ea4a 0000 	orr.w	r0, sl, r0
			bsi->iCache <<= 8;
 8001d6a:	ea4f 2000 	mov.w	r0, r0, lsl #8
 8001d6e:	9007      	str	r0, [sp, #28]
		while (nBytes--) {
 8001d70:	f000 8515 	beq.w	800279e <xmp3fixpt_UnpackSideInfo+0x15a2>
			bsi->iCache |= (*bsi->bytePtr++);
 8001d74:	f109 0a03 	add.w	sl, r9, #3
 8001d78:	f8cd a018 	str.w	sl, [sp, #24]
 8001d7c:	f899 9002 	ldrb.w	r9, [r9, #2]
 8001d80:	ea49 0000 	orr.w	r0, r9, r0
			bsi->iCache <<= 8;
 8001d84:	0200      	lsls	r0, r0, #8
 8001d86:	fa00 f808 	lsl.w	r8, r0, r8
 8001d8a:	fa28 f202 	lsr.w	r2, r8, r2
 8001d8e:	fa08 f00e 	lsl.w	r0, r8, lr
 8001d92:	4313      	orrs	r3, r2
 8001d94:	eb01 02cc 	add.w	r2, r1, ip, lsl #3
		bsi->nBytes = 0;
 8001d98:	9709      	str	r7, [sp, #36]	; 0x24
 8001d9a:	e3e6      	b.n	800256a <xmp3fixpt_UnpackSideInfo+0x136e>
	int nBytes = bsi->nBytes;
 8001d9c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 8001da0:	f1c2 0c03 	rsb	ip, r2, #3
 8001da4:	321d      	adds	r2, #29
	if (nBytes >= 4) {
 8001da6:	f1be 0f03 	cmp.w	lr, #3
 8001daa:	f300 8301 	bgt.w	80023b0 <xmp3fixpt_UnpackSideInfo+0x11b4>
 8001dae:	f1ce 0803 	rsb	r8, lr, #3
		bsi->iCache = 0;
 8001db2:	9707      	str	r7, [sp, #28]
 8001db4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
		while (nBytes--) {
 8001db8:	f1be 0f00 	cmp.w	lr, #0
 8001dbc:	f000 8472 	beq.w	80026a4 <xmp3fixpt_UnpackSideInfo+0x14a8>
			bsi->iCache |= (*bsi->bytePtr++);
 8001dc0:	f8dd 9018 	ldr.w	r9, [sp, #24]
		while (nBytes--) {
 8001dc4:	f1be 0f01 	cmp.w	lr, #1
			bsi->iCache |= (*bsi->bytePtr++);
 8001dc8:	f109 0301 	add.w	r3, r9, #1
 8001dcc:	9306      	str	r3, [sp, #24]
 8001dce:	f899 3000 	ldrb.w	r3, [r9]
			bsi->iCache <<= 8;
 8001dd2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001dd6:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001dd8:	d016      	beq.n	8001e08 <xmp3fixpt_UnpackSideInfo+0xc0c>
			bsi->iCache |= (*bsi->bytePtr++);
 8001dda:	f109 0a02 	add.w	sl, r9, #2
		while (nBytes--) {
 8001dde:	f1be 0f02 	cmp.w	lr, #2
			bsi->iCache |= (*bsi->bytePtr++);
 8001de2:	f8cd a018 	str.w	sl, [sp, #24]
 8001de6:	f899 a001 	ldrb.w	sl, [r9, #1]
 8001dea:	ea4a 0303 	orr.w	r3, sl, r3
			bsi->iCache <<= 8;
 8001dee:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001df2:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001df4:	d008      	beq.n	8001e08 <xmp3fixpt_UnpackSideInfo+0xc0c>
			bsi->iCache |= (*bsi->bytePtr++);
 8001df6:	f109 0a03 	add.w	sl, r9, #3
 8001dfa:	f8cd a018 	str.w	sl, [sp, #24]
 8001dfe:	f899 9002 	ldrb.w	r9, [r9, #2]
 8001e02:	ea49 0303 	orr.w	r3, r9, r3
			bsi->iCache <<= 8;
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	fa03 f308 	lsl.w	r3, r3, r8
 8001e0c:	fa23 f202 	lsr.w	r2, r3, r2
 8001e10:	fa03 f30c 	lsl.w	r3, r3, ip
 8001e14:	ea4b 0b02 	orr.w	fp, fp, r2
 8001e18:	ea4f 7c53 	mov.w	ip, r3, lsr #29
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	eb01 02ce 	add.w	r2, r1, lr, lsl #3
		bsi->nBytes = 0;
 8001e22:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8001e24:	4611      	mov	r1, r2
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001e26:	1eca      	subs	r2, r1, #3
				sis->subBlockGain[0] = GetBits(bsi, 3);
 8001e28:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	if (bsi->cachedBits < 0) {
 8001e2c:	2a00      	cmp	r2, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8001e2e:	e9cd 3207 	strd	r3, r2, [sp, #28]
	if (bsi->cachedBits < 0) {
 8001e32:	f6bf aab4 	bge.w	800139e <xmp3fixpt_UnpackSideInfo+0x1a2>
	int nBytes = bsi->nBytes;
 8001e36:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 8001e3a:	f1c1 0003 	rsb	r0, r1, #3
 8001e3e:	311d      	adds	r1, #29
	if (nBytes >= 4) {
 8001e40:	f1be 0f03 	cmp.w	lr, #3
 8001e44:	f300 830d 	bgt.w	8002462 <xmp3fixpt_UnpackSideInfo+0x1266>
 8001e48:	f1ce 0803 	rsb	r8, lr, #3
		bsi->iCache = 0;
 8001e4c:	9707      	str	r7, [sp, #28]
 8001e4e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
		while (nBytes--) {
 8001e52:	f1be 0f00 	cmp.w	lr, #0
 8001e56:	f000 841c 	beq.w	8002692 <xmp3fixpt_UnpackSideInfo+0x1496>
			bsi->iCache |= (*bsi->bytePtr++);
 8001e5a:	f8dd 9018 	ldr.w	r9, [sp, #24]
		while (nBytes--) {
 8001e5e:	f1be 0f01 	cmp.w	lr, #1
			bsi->iCache |= (*bsi->bytePtr++);
 8001e62:	f109 0301 	add.w	r3, r9, #1
 8001e66:	9306      	str	r3, [sp, #24]
 8001e68:	f899 3000 	ldrb.w	r3, [r9]
			bsi->iCache <<= 8;
 8001e6c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001e70:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001e72:	f000 847b 	beq.w	800276c <xmp3fixpt_UnpackSideInfo+0x1570>
			bsi->iCache |= (*bsi->bytePtr++);
 8001e76:	f109 0a02 	add.w	sl, r9, #2
		while (nBytes--) {
 8001e7a:	f1be 0f02 	cmp.w	lr, #2
			bsi->iCache |= (*bsi->bytePtr++);
 8001e7e:	f8cd a018 	str.w	sl, [sp, #24]
 8001e82:	f899 a001 	ldrb.w	sl, [r9, #1]
 8001e86:	ea4a 0303 	orr.w	r3, sl, r3
			bsi->iCache <<= 8;
 8001e8a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001e8e:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001e90:	f000 846c 	beq.w	800276c <xmp3fixpt_UnpackSideInfo+0x1570>
			bsi->iCache |= (*bsi->bytePtr++);
 8001e94:	f109 0a03 	add.w	sl, r9, #3
 8001e98:	f8cd a018 	str.w	sl, [sp, #24]
 8001e9c:	f899 9002 	ldrb.w	r9, [r9, #2]
 8001ea0:	ea49 0303 	orr.w	r3, r9, r3
			bsi->iCache <<= 8;
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	fa03 f808 	lsl.w	r8, r3, r8
 8001eaa:	fa28 f101 	lsr.w	r1, r8, r1
 8001eae:	fa08 f300 	lsl.w	r3, r8, r0
 8001eb2:	ea4c 0c01 	orr.w	ip, ip, r1
 8001eb6:	0f58      	lsrs	r0, r3, #29
 8001eb8:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001ebc:	eb02 01ce 	add.w	r1, r2, lr, lsl #3
		bsi->nBytes = 0;
 8001ec0:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8001ec2:	460a      	mov	r2, r1
 8001ec4:	f7ff ba6e 	b.w	80013a4 <xmp3fixpt_UnpackSideInfo+0x1a8>
	int nBytes = bsi->nBytes;
 8001ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 8001eca:	f1c8 0005 	rsb	r0, r8, #5
 8001ece:	f108 081b 	add.w	r8, r8, #27
	if (nBytes >= 4) {
 8001ed2:	2a03      	cmp	r2, #3
 8001ed4:	f300 837a 	bgt.w	80025cc <xmp3fixpt_UnpackSideInfo+0x13d0>
 8001ed8:	f1c2 0903 	rsb	r9, r2, #3
		bsi->iCache = 0;
 8001edc:	f8cd e01c 	str.w	lr, [sp, #28]
 8001ee0:	ea4f 09c9 	mov.w	r9, r9, lsl #3
		while (nBytes--) {
 8001ee4:	2a00      	cmp	r2, #0
 8001ee6:	f000 83db 	beq.w	80026a0 <xmp3fixpt_UnpackSideInfo+0x14a4>
			bsi->iCache |= (*bsi->bytePtr++);
 8001eea:	f8dd e018 	ldr.w	lr, [sp, #24]
		while (nBytes--) {
 8001eee:	2a01      	cmp	r2, #1
			bsi->iCache |= (*bsi->bytePtr++);
 8001ef0:	f10e 0301 	add.w	r3, lr, #1
 8001ef4:	9306      	str	r3, [sp, #24]
 8001ef6:	f89e 3000 	ldrb.w	r3, [lr]
			bsi->iCache <<= 8;
 8001efa:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001efe:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001f00:	f000 845f 	beq.w	80027c2 <xmp3fixpt_UnpackSideInfo+0x15c6>
			bsi->iCache |= (*bsi->bytePtr++);
 8001f04:	f10e 0a02 	add.w	sl, lr, #2
		while (nBytes--) {
 8001f08:	2a02      	cmp	r2, #2
			bsi->iCache |= (*bsi->bytePtr++);
 8001f0a:	f8cd a018 	str.w	sl, [sp, #24]
 8001f0e:	f89e a001 	ldrb.w	sl, [lr, #1]
 8001f12:	ea4a 0303 	orr.w	r3, sl, r3
			bsi->iCache <<= 8;
 8001f16:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001f1a:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 8001f1c:	f000 8451 	beq.w	80027c2 <xmp3fixpt_UnpackSideInfo+0x15c6>
			bsi->iCache |= (*bsi->bytePtr++);
 8001f20:	f10e 0a03 	add.w	sl, lr, #3
 8001f24:	f8cd a018 	str.w	sl, [sp, #24]
 8001f28:	f89e e002 	ldrb.w	lr, [lr, #2]
 8001f2c:	ea4e 0e03 	orr.w	lr, lr, r3
			bsi->iCache <<= 8;
 8001f30:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 8001f34:	fa0e fe09 	lsl.w	lr, lr, r9
 8001f38:	fa2e f808 	lsr.w	r8, lr, r8
 8001f3c:	fa0e fe00 	lsl.w	lr, lr, r0
 8001f40:	ea4c 0c08 	orr.w	ip, ip, r8
 8001f44:	ea4f 60de 	mov.w	r0, lr, lsr #27
 8001f48:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 8001f4c:	eb01 08c2 	add.w	r8, r1, r2, lsl #3
		bsi->nBytes = 0;
 8001f50:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8001f52:	4641      	mov	r1, r8
 8001f54:	f7ff bac5 	b.w	80014e2 <xmp3fixpt_UnpackSideInfo+0x2e6>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8001f58:	9b06      	ldr	r3, [sp, #24]
		bsi->nBytes -= 4;
 8001f5a:	f1a0 0c04 	sub.w	ip, r0, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	4618      	mov	r0, r3
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8001f62:	f103 0b03 	add.w	fp, r3, #3
		bsi->iCache |= (*bsi->bytePtr++);
 8001f66:	f103 0a04 	add.w	sl, r3, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8001f6a:	9206      	str	r2, [sp, #24]
 8001f6c:	f810 2b02 	ldrb.w	r2, [r0], #2
 8001f70:	0612      	lsls	r2, r2, #24
 8001f72:	e9cd 0206 	strd	r0, r2, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8001f76:	7858      	ldrb	r0, [r3, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8001f78:	f8cd b018 	str.w	fp, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8001f7c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001f80:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8001f82:	7898      	ldrb	r0, [r3, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 8001f84:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8001f88:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001f8c:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 8001f8e:	78db      	ldrb	r3, [r3, #3]
		bsi->nBytes -= 4;
 8001f90:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 8001f94:	431a      	orrs	r2, r3
 8001f96:	fa22 f001 	lsr.w	r0, r2, r1
 8001f9a:	fa02 f309 	lsl.w	r3, r2, r9
 8001f9e:	ea48 0800 	orr.w	r8, r8, r0
 8001fa2:	f7ff bb6a 	b.w	800167a <xmp3fixpt_UnpackSideInfo+0x47e>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8001fa6:	9b06      	ldr	r3, [sp, #24]
		bsi->nBytes -= 4;
 8001fa8:	f1a2 0804 	sub.w	r8, r2, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8001fac:	1c59      	adds	r1, r3, #1
 8001fae:	461a      	mov	r2, r3
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8001fb0:	f103 0a03 	add.w	sl, r3, #3
		bsi->iCache |= (*bsi->bytePtr++);
 8001fb4:	f103 0904 	add.w	r9, r3, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8001fb8:	9106      	str	r1, [sp, #24]
 8001fba:	f812 1b02 	ldrb.w	r1, [r2], #2
 8001fbe:	0609      	lsls	r1, r1, #24
 8001fc0:	e9cd 2106 	strd	r2, r1, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8001fc4:	785a      	ldrb	r2, [r3, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8001fc6:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8001fca:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001fce:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8001fd0:	789a      	ldrb	r2, [r3, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 8001fd2:	f8cd 9018 	str.w	r9, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8001fd6:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8001fda:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 8001fdc:	78db      	ldrb	r3, [r3, #3]
		bsi->nBytes -= 4;
 8001fde:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 8001fe2:	430b      	orrs	r3, r1
 8001fe4:	fa23 f200 	lsr.w	r2, r3, r0
 8001fe8:	fa03 f30c 	lsl.w	r3, r3, ip
 8001fec:	ea4e 0e02 	orr.w	lr, lr, r2
 8001ff0:	f7ff bb90 	b.w	8001714 <xmp3fixpt_UnpackSideInfo+0x518>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8001ff4:	9906      	ldr	r1, [sp, #24]
		bsi->nBytes -= 4;
 8001ff6:	f1a9 0904 	sub.w	r9, r9, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8001ffa:	4688      	mov	r8, r1
 8001ffc:	1c4a      	adds	r2, r1, #1
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8001ffe:	f101 0b03 	add.w	fp, r1, #3
		bsi->iCache |= (*bsi->bytePtr++);
 8002002:	f101 0a04 	add.w	sl, r1, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002006:	9206      	str	r2, [sp, #24]
 8002008:	f818 2b02 	ldrb.w	r2, [r8], #2
 800200c:	0612      	lsls	r2, r2, #24
 800200e:	e9cd 8206 	strd	r8, r2, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8002012:	f891 8001 	ldrb.w	r8, [r1, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002016:	f8cd b018 	str.w	fp, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800201a:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 800201e:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002020:	f891 8002 	ldrb.w	r8, [r1, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 8002024:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002028:	ea42 2208 	orr.w	r2, r2, r8, lsl #8
 800202c:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800202e:	78c9      	ldrb	r1, [r1, #3]
		bsi->nBytes -= 4;
 8002030:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 8002034:	ea41 0802 	orr.w	r8, r1, r2
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8002038:	4601      	mov	r1, r0
 800203a:	fa08 f303 	lsl.w	r3, r8, r3
 800203e:	fa28 f200 	lsr.w	r2, r8, r0
 8002042:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8002046:	ea4c 0c02 	orr.w	ip, ip, r2
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	f7ff b938 	b.w	80012c0 <xmp3fixpt_UnpackSideInfo+0xc4>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002050:	9806      	ldr	r0, [sp, #24]
		bsi->nBytes -= 4;
 8002052:	f1ac 0c04 	sub.w	ip, ip, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002056:	4603      	mov	r3, r0
 8002058:	1c42      	adds	r2, r0, #1
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800205a:	f100 0b03 	add.w	fp, r0, #3
		bsi->iCache |= (*bsi->bytePtr++);
 800205e:	f100 0a04 	add.w	sl, r0, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002062:	9206      	str	r2, [sp, #24]
 8002064:	f813 2b02 	ldrb.w	r2, [r3], #2
 8002068:	0612      	lsls	r2, r2, #24
 800206a:	e9cd 3206 	strd	r3, r2, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800206e:	7843      	ldrb	r3, [r0, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002070:	f8cd b018 	str.w	fp, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8002074:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002078:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800207a:	7883      	ldrb	r3, [r0, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 800207c:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002080:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002084:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 8002086:	78c3      	ldrb	r3, [r0, #3]
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8002088:	4608      	mov	r0, r1
		bsi->nBytes -= 4;
 800208a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800208e:	4313      	orrs	r3, r2
 8002090:	fa23 f201 	lsr.w	r2, r3, r1
 8002094:	fa03 f309 	lsl.w	r3, r3, r9
 8002098:	ea48 0802 	orr.w	r8, r8, r2
 800209c:	f7ff b919 	b.w	80012d2 <xmp3fixpt_UnpackSideInfo+0xd6>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80020a0:	9806      	ldr	r0, [sp, #24]
		bsi->nBytes -= 4;
 80020a2:	f1a2 0e04 	sub.w	lr, r2, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80020a6:	1c41      	adds	r1, r0, #1
 80020a8:	4602      	mov	r2, r0
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80020aa:	f100 0a03 	add.w	sl, r0, #3
		bsi->iCache |= (*bsi->bytePtr++);
 80020ae:	f100 0904 	add.w	r9, r0, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80020b2:	9106      	str	r1, [sp, #24]
 80020b4:	f812 1b02 	ldrb.w	r1, [r2], #2
 80020b8:	0609      	lsls	r1, r1, #24
 80020ba:	e9cd 2106 	strd	r2, r1, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 80020be:	7842      	ldrb	r2, [r0, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80020c0:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 80020c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80020c8:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80020ca:	7882      	ldrb	r2, [r0, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 80020cc:	f8cd 9018 	str.w	r9, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80020d0:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80020d4:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 80020d6:	78c2      	ldrb	r2, [r0, #3]
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 80020d8:	4640      	mov	r0, r8
		bsi->nBytes -= 4;
 80020da:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 80020de:	4311      	orrs	r1, r2
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	fa21 f108 	lsr.w	r1, r1, r8
 80020e8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 80020ec:	ea4c 0c01 	orr.w	ip, ip, r1
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	f7ff b907 	b.w	8001304 <xmp3fixpt_UnpackSideInfo+0x108>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80020f6:	f8dd 8018 	ldr.w	r8, [sp, #24]
		bsi->nBytes -= 4;
 80020fa:	f1a2 0904 	sub.w	r9, r2, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80020fe:	f108 0101 	add.w	r1, r8, #1
 8002102:	4642      	mov	r2, r8
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002104:	f108 0b03 	add.w	fp, r8, #3
		bsi->iCache |= (*bsi->bytePtr++);
 8002108:	f108 0a04 	add.w	sl, r8, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800210c:	9106      	str	r1, [sp, #24]
 800210e:	f812 1b02 	ldrb.w	r1, [r2], #2
 8002112:	0609      	lsls	r1, r1, #24
 8002114:	e9cd 2106 	strd	r2, r1, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8002118:	f898 2001 	ldrb.w	r2, [r8, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800211c:	f8cd b018 	str.w	fp, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8002120:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002124:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002126:	f898 2002 	ldrb.w	r2, [r8, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 800212a:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800212e:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8002132:	4661      	mov	r1, ip
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002134:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 8002136:	f898 8003 	ldrb.w	r8, [r8, #3]
		bsi->nBytes -= 4;
 800213a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800213e:	ea48 0202 	orr.w	r2, r8, r2
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	fa22 f20c 	lsr.w	r2, r2, ip
 800214a:	ea4f 78d3 	mov.w	r8, r3, lsr #31
 800214e:	4310      	orrs	r0, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	f7ff ba4e 	b.w	80015f2 <xmp3fixpt_UnpackSideInfo+0x3f6>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002156:	9806      	ldr	r0, [sp, #24]
		bsi->nBytes -= 4;
 8002158:	f1a1 0904 	sub.w	r9, r1, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800215c:	1c43      	adds	r3, r0, #1
 800215e:	4601      	mov	r1, r0
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002160:	f100 0b03 	add.w	fp, r0, #3
		bsi->iCache |= (*bsi->bytePtr++);
 8002164:	f100 0a04 	add.w	sl, r0, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002168:	9306      	str	r3, [sp, #24]
 800216a:	f811 3b02 	ldrb.w	r3, [r1], #2
 800216e:	061b      	lsls	r3, r3, #24
 8002170:	e9cd 1306 	strd	r1, r3, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8002174:	7841      	ldrb	r1, [r0, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002176:	f8cd b018 	str.w	fp, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800217a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800217e:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002180:	7881      	ldrb	r1, [r0, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 8002182:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002186:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800218a:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800218c:	78c0      	ldrb	r0, [r0, #3]
		bsi->nBytes -= 4;
 800218e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 8002192:	4301      	orrs	r1, r0
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8002194:	4610      	mov	r0, r2
 8002196:	fa01 f30c 	lsl.w	r3, r1, ip
 800219a:	40d1      	lsrs	r1, r2
 800219c:	ea4f 5cd3 	mov.w	ip, r3, lsr #23
 80021a0:	ea48 0801 	orr.w	r8, r8, r1
 80021a4:	025b      	lsls	r3, r3, #9
 80021a6:	f7ff b87f 	b.w	80012a8 <xmp3fixpt_UnpackSideInfo+0xac>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80021aa:	9d06      	ldr	r5, [sp, #24]
		bsi->nBytes -= 4;
 80021ac:	3804      	subs	r0, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80021ae:	462f      	mov	r7, r5
 80021b0:	1c6c      	adds	r4, r5, #1
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80021b2:	f105 0a03 	add.w	sl, r5, #3
		bsi->iCache |= (*bsi->bytePtr++);
 80021b6:	f105 0904 	add.w	r9, r5, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80021ba:	9406      	str	r4, [sp, #24]
 80021bc:	f817 4b02 	ldrb.w	r4, [r7], #2
 80021c0:	0624      	lsls	r4, r4, #24
 80021c2:	e9cd 7406 	strd	r7, r4, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 80021c6:	786f      	ldrb	r7, [r5, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80021c8:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 80021cc:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80021d0:	9407      	str	r4, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80021d2:	78af      	ldrb	r7, [r5, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 80021d4:	f8cd 9018 	str.w	r9, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80021d8:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
 80021dc:	9407      	str	r4, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 80021de:	78ed      	ldrb	r5, [r5, #3]
		bsi->nBytes -= 4;
 80021e0:	9009      	str	r0, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 80021e2:	432c      	orrs	r4, r5
 80021e4:	fa24 f001 	lsr.w	r0, r4, r1
 80021e8:	fa04 f303 	lsl.w	r3, r4, r3
 80021ec:	4302      	orrs	r2, r0
 80021ee:	f7ff bbe0 	b.w	80019b2 <xmp3fixpt_UnpackSideInfo+0x7b6>
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 80021f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f47f aa4e 	bne.w	8001696 <xmp3fixpt_UnpackSideInfo+0x49a>
					sis->region0Count = 8;
 80021fa:	2308      	movs	r3, #8
 80021fc:	220c      	movs	r2, #12
 80021fe:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002200:	f7ff b8e3 	b.w	80013ca <xmp3fixpt_UnpackSideInfo+0x1ce>
	int nBytes = bsi->nBytes;
 8002204:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 8002208:	f1c9 0801 	rsb	r8, r9, #1
 800220c:	f109 021f 	add.w	r2, r9, #31
	if (nBytes >= 4) {
 8002210:	f1bc 0f03 	cmp.w	ip, #3
 8002214:	f300 8206 	bgt.w	8002624 <xmp3fixpt_UnpackSideInfo+0x1428>
 8002218:	f1cc 0303 	rsb	r3, ip, #3
		bsi->iCache = 0;
 800221c:	f8cd e01c 	str.w	lr, [sp, #28]
 8002220:	00db      	lsls	r3, r3, #3
		while (nBytes--) {
 8002222:	f1bc 0f00 	cmp.w	ip, #0
 8002226:	f000 82dc 	beq.w	80027e2 <xmp3fixpt_UnpackSideInfo+0x15e6>
			bsi->iCache |= (*bsi->bytePtr++);
 800222a:	f8dd a018 	ldr.w	sl, [sp, #24]
		while (nBytes--) {
 800222e:	f1bc 0f01 	cmp.w	ip, #1
			bsi->iCache |= (*bsi->bytePtr++);
 8002232:	f10a 0901 	add.w	r9, sl, #1
 8002236:	f8cd 9018 	str.w	r9, [sp, #24]
 800223a:	f89a b000 	ldrb.w	fp, [sl]
			bsi->iCache <<= 8;
 800223e:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
 8002242:	f8cd b01c 	str.w	fp, [sp, #28]
		while (nBytes--) {
 8002246:	f000 82d0 	beq.w	80027ea <xmp3fixpt_UnpackSideInfo+0x15ee>
			bsi->iCache |= (*bsi->bytePtr++);
 800224a:	f10a 0902 	add.w	r9, sl, #2
		while (nBytes--) {
 800224e:	f1bc 0f02 	cmp.w	ip, #2
			bsi->iCache |= (*bsi->bytePtr++);
 8002252:	f8cd 9018 	str.w	r9, [sp, #24]
 8002256:	f89a 9001 	ldrb.w	r9, [sl, #1]
 800225a:	ea49 090b 	orr.w	r9, r9, fp
			bsi->iCache <<= 8;
 800225e:	ea4f 2909 	mov.w	r9, r9, lsl #8
 8002262:	f8cd 901c 	str.w	r9, [sp, #28]
		while (nBytes--) {
 8002266:	d009      	beq.n	800227c <xmp3fixpt_UnpackSideInfo+0x1080>
			bsi->iCache |= (*bsi->bytePtr++);
 8002268:	f10a 0b03 	add.w	fp, sl, #3
 800226c:	f8cd b018 	str.w	fp, [sp, #24]
 8002270:	f89a a002 	ldrb.w	sl, [sl, #2]
 8002274:	ea4a 0909 	orr.w	r9, sl, r9
			bsi->iCache <<= 8;
 8002278:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800227c:	fa09 f303 	lsl.w	r3, r9, r3
 8002280:	fa23 f202 	lsr.w	r2, r3, r2
 8002284:	fa03 f808 	lsl.w	r8, r3, r8
 8002288:	ea42 0a00 	orr.w	sl, r2, r0
 800228c:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8002290:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8002294:	eb01 02cc 	add.w	r2, r1, ip, lsl #3
		bsi->nBytes = 0;
 8002298:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 800229a:	4691      	mov	r9, r2
 800229c:	f7ff b95b 	b.w	8001556 <xmp3fixpt_UnpackSideInfo+0x35a>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80022a0:	9a06      	ldr	r2, [sp, #24]
		bsi->nBytes -= 4;
 80022a2:	f1ae 0e04 	sub.w	lr, lr, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80022a6:	4690      	mov	r8, r2
 80022a8:	1c53      	adds	r3, r2, #1
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80022aa:	f102 0a03 	add.w	sl, r2, #3
		bsi->iCache |= (*bsi->bytePtr++);
 80022ae:	f102 0904 	add.w	r9, r2, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80022b2:	9306      	str	r3, [sp, #24]
 80022b4:	f818 3b02 	ldrb.w	r3, [r8], #2
 80022b8:	061b      	lsls	r3, r3, #24
 80022ba:	e9cd 8306 	strd	r8, r3, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 80022be:	f892 8001 	ldrb.w	r8, [r2, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80022c2:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 80022c6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80022ca:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80022cc:	f892 8002 	ldrb.w	r8, [r2, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 80022d0:	f8cd 9018 	str.w	r9, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80022d4:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 80022d8:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 80022da:	f892 8003 	ldrb.w	r8, [r2, #3]
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 80022de:	460a      	mov	r2, r1
		bsi->nBytes -= 4;
 80022e0:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 80022e4:	ea48 0803 	orr.w	r8, r8, r3
 80022e8:	fa08 f300 	lsl.w	r3, r8, r0
 80022ec:	fa28 f801 	lsr.w	r8, r8, r1
 80022f0:	ea4f 7b53 	mov.w	fp, r3, lsr #29
 80022f4:	ea4c 0c08 	orr.w	ip, ip, r8
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	f7ff b83b 	b.w	8001374 <xmp3fixpt_UnpackSideInfo+0x178>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80022fe:	9906      	ldr	r1, [sp, #24]
		bsi->nBytes -= 4;
 8002300:	f1ae 0e04 	sub.w	lr, lr, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002304:	4688      	mov	r8, r1
 8002306:	1c4b      	adds	r3, r1, #1
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002308:	f101 0a03 	add.w	sl, r1, #3
		bsi->iCache |= (*bsi->bytePtr++);
 800230c:	f101 0904 	add.w	r9, r1, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002310:	9306      	str	r3, [sp, #24]
 8002312:	f818 3b02 	ldrb.w	r3, [r8], #2
 8002316:	061b      	lsls	r3, r3, #24
 8002318:	e9cd 8306 	strd	r8, r3, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800231c:	f891 8001 	ldrb.w	r8, [r1, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002320:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8002324:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8002328:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800232a:	f891 8002 	ldrb.w	r8, [r1, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 800232e:	f8cd 9018 	str.w	r9, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002332:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 8002336:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 8002338:	f891 8003 	ldrb.w	r8, [r1, #3]
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 800233c:	4611      	mov	r1, r2
		bsi->nBytes -= 4;
 800233e:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 8002342:	ea48 0803 	orr.w	r8, r8, r3
 8002346:	fa08 f30c 	lsl.w	r3, r8, ip
 800234a:	fa28 f802 	lsr.w	r8, r8, r2
 800234e:	ea4f 6cd3 	mov.w	ip, r3, lsr #27
 8002352:	ea40 0008 	orr.w	r0, r0, r8
 8002356:	015b      	lsls	r3, r3, #5
 8002358:	f7ff bb73 	b.w	8001a42 <xmp3fixpt_UnpackSideInfo+0x846>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800235c:	9a06      	ldr	r2, [sp, #24]
		bsi->nBytes -= 4;
 800235e:	f1ae 0e04 	sub.w	lr, lr, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002362:	4610      	mov	r0, r2
 8002364:	1c53      	adds	r3, r2, #1
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002366:	f102 0a03 	add.w	sl, r2, #3
		bsi->iCache |= (*bsi->bytePtr++);
 800236a:	f102 0904 	add.w	r9, r2, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800236e:	9306      	str	r3, [sp, #24]
 8002370:	f810 3b02 	ldrb.w	r3, [r0], #2
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	e9cd 0306 	strd	r0, r3, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800237a:	7850      	ldrb	r0, [r2, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800237c:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8002380:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002384:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002386:	7890      	ldrb	r0, [r2, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 8002388:	f8cd 9018 	str.w	r9, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800238c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002390:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 8002392:	78d0      	ldrb	r0, [r2, #3]
		bsi->nBytes -= 4;
 8002394:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 8002398:	4318      	orrs	r0, r3
 800239a:	fa20 f201 	lsr.w	r2, r0, r1
 800239e:	fa00 f308 	lsl.w	r3, r0, r8
 80023a2:	ea4c 0c02 	orr.w	ip, ip, r2
 80023a6:	0ed8      	lsrs	r0, r3, #27
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 80023a8:	460a      	mov	r2, r1
 80023aa:	015b      	lsls	r3, r3, #5
 80023ac:	f7fe bfcd 	b.w	800134a <xmp3fixpt_UnpackSideInfo+0x14e>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80023b0:	9906      	ldr	r1, [sp, #24]
		bsi->nBytes -= 4;
 80023b2:	f1ae 0e04 	sub.w	lr, lr, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80023b6:	4688      	mov	r8, r1
 80023b8:	1c4b      	adds	r3, r1, #1
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80023ba:	f101 0a03 	add.w	sl, r1, #3
		bsi->iCache |= (*bsi->bytePtr++);
 80023be:	f101 0904 	add.w	r9, r1, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80023c2:	9306      	str	r3, [sp, #24]
 80023c4:	f818 3b02 	ldrb.w	r3, [r8], #2
 80023c8:	061b      	lsls	r3, r3, #24
 80023ca:	e9cd 8306 	strd	r8, r3, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 80023ce:	f891 8001 	ldrb.w	r8, [r1, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80023d2:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 80023d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80023da:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80023dc:	f891 8002 	ldrb.w	r8, [r1, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 80023e0:	f8cd 9018 	str.w	r9, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80023e4:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 80023e8:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 80023ea:	f891 8003 	ldrb.w	r8, [r1, #3]
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 80023ee:	4611      	mov	r1, r2
		bsi->nBytes -= 4;
 80023f0:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 80023f4:	ea48 0803 	orr.w	r8, r8, r3
 80023f8:	fa08 f30c 	lsl.w	r3, r8, ip
 80023fc:	fa28 f802 	lsr.w	r8, r8, r2
 8002400:	ea4f 7c53 	mov.w	ip, r3, lsr #29
 8002404:	ea4b 0b08 	orr.w	fp, fp, r8
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	e50c      	b.n	8001e26 <xmp3fixpt_UnpackSideInfo+0xc2a>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800240c:	9906      	ldr	r1, [sp, #24]
		bsi->nBytes -= 4;
 800240e:	f1ac 0c04 	sub.w	ip, ip, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002412:	4688      	mov	r8, r1
 8002414:	1c4b      	adds	r3, r1, #1
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002416:	f101 0a03 	add.w	sl, r1, #3
		bsi->iCache |= (*bsi->bytePtr++);
 800241a:	f101 0904 	add.w	r9, r1, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800241e:	9306      	str	r3, [sp, #24]
 8002420:	f818 3b02 	ldrb.w	r3, [r8], #2
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	e9cd 8306 	strd	r8, r3, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800242a:	f891 8001 	ldrb.w	r8, [r1, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800242e:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8002432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8002436:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002438:	f891 8002 	ldrb.w	r8, [r1, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 800243c:	f8cd 9018 	str.w	r9, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002440:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 8002444:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 8002446:	78c9      	ldrb	r1, [r1, #3]
		bsi->nBytes -= 4;
 8002448:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800244c:	430b      	orrs	r3, r1
 800244e:	fa23 fc02 	lsr.w	ip, r3, r2
 8002452:	fa03 f10e 	lsl.w	r1, r3, lr
 8002456:	ea40 000c 	orr.w	r0, r0, ip
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800245a:	e9cd 1207 	strd	r1, r2, [sp, #28]
 800245e:	f7fe bfa9 	b.w	80013b4 <xmp3fixpt_UnpackSideInfo+0x1b8>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002462:	9a06      	ldr	r2, [sp, #24]
		bsi->nBytes -= 4;
 8002464:	f1ae 0e04 	sub.w	lr, lr, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002468:	4690      	mov	r8, r2
 800246a:	1c53      	adds	r3, r2, #1
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800246c:	f102 0a03 	add.w	sl, r2, #3
		bsi->iCache |= (*bsi->bytePtr++);
 8002470:	f102 0904 	add.w	r9, r2, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002474:	9306      	str	r3, [sp, #24]
 8002476:	f818 3b02 	ldrb.w	r3, [r8], #2
 800247a:	061b      	lsls	r3, r3, #24
 800247c:	e9cd 8306 	strd	r8, r3, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8002480:	f892 8001 	ldrb.w	r8, [r2, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002484:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8002488:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800248c:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800248e:	f892 8002 	ldrb.w	r8, [r2, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 8002492:	f8cd 9018 	str.w	r9, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002496:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 800249a:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800249c:	f892 8003 	ldrb.w	r8, [r2, #3]
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 80024a0:	460a      	mov	r2, r1
		bsi->nBytes -= 4;
 80024a2:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 80024a6:	ea48 0803 	orr.w	r8, r8, r3
 80024aa:	fa08 f300 	lsl.w	r3, r8, r0
 80024ae:	fa28 f801 	lsr.w	r8, r8, r1
 80024b2:	0f58      	lsrs	r0, r3, #29
 80024b4:	ea4c 0c08 	orr.w	ip, ip, r8
 80024b8:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80024bc:	f7fe bf72 	b.w	80013a4 <xmp3fixpt_UnpackSideInfo+0x1a8>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80024c0:	9806      	ldr	r0, [sp, #24]
		bsi->nBytes -= 4;
 80024c2:	f1ac 0c04 	sub.w	ip, ip, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80024c6:	4680      	mov	r8, r0
 80024c8:	1c43      	adds	r3, r0, #1
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80024ca:	f100 0a03 	add.w	sl, r0, #3
		bsi->iCache |= (*bsi->bytePtr++);
 80024ce:	f100 0904 	add.w	r9, r0, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80024d2:	9306      	str	r3, [sp, #24]
 80024d4:	f818 3b02 	ldrb.w	r3, [r8], #2
 80024d8:	061b      	lsls	r3, r3, #24
 80024da:	e9cd 8306 	strd	r8, r3, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 80024de:	f890 8001 	ldrb.w	r8, [r0, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80024e2:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 80024e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80024ea:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80024ec:	f890 8002 	ldrb.w	r8, [r0, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 80024f0:	f8cd 9018 	str.w	r9, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80024f4:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 80024f8:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 80024fa:	78c0      	ldrb	r0, [r0, #3]
		bsi->nBytes -= 4;
 80024fc:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 8002500:	4303      	orrs	r3, r0
 8002502:	fa03 fe0e 	lsl.w	lr, r3, lr
 8002506:	40d3      	lsrs	r3, r2
 8002508:	ea4f 70de 	mov.w	r0, lr, lsr #31
 800250c:	4319      	orrs	r1, r3
 800250e:	ea4f 034e 	mov.w	r3, lr, lsl #1
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8002512:	4691      	mov	r9, r2
 8002514:	e9cd e207 	strd	lr, r2, [sp, #28]
 8002518:	f7ff b80a 	b.w	8001530 <xmp3fixpt_UnpackSideInfo+0x334>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800251c:	9806      	ldr	r0, [sp, #24]
		bsi->nBytes -= 4;
 800251e:	f1ac 0c04 	sub.w	ip, ip, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002522:	4680      	mov	r8, r0
 8002524:	1c41      	adds	r1, r0, #1
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002526:	f100 0a03 	add.w	sl, r0, #3
		bsi->iCache |= (*bsi->bytePtr++);
 800252a:	f100 0904 	add.w	r9, r0, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800252e:	9106      	str	r1, [sp, #24]
 8002530:	f818 1b02 	ldrb.w	r1, [r8], #2
 8002534:	0609      	lsls	r1, r1, #24
 8002536:	e9cd 8106 	strd	r8, r1, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800253a:	f890 8001 	ldrb.w	r8, [r0, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800253e:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8002542:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8002546:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002548:	f890 8002 	ldrb.w	r8, [r0, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 800254c:	f8cd 9018 	str.w	r9, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002550:	ea41 2108 	orr.w	r1, r1, r8, lsl #8
 8002554:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 8002556:	78c0      	ldrb	r0, [r0, #3]
		bsi->nBytes -= 4;
 8002558:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800255c:	4301      	orrs	r1, r0
 800255e:	fa21 fc02 	lsr.w	ip, r1, r2
 8002562:	fa01 f00e 	lsl.w	r0, r1, lr
 8002566:	ea43 030c 	orr.w	r3, r3, ip
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800256a:	e9cd 0207 	strd	r0, r2, [sp, #28]
 800256e:	f7fe bfcb 	b.w	8001508 <xmp3fixpt_UnpackSideInfo+0x30c>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002572:	9a06      	ldr	r2, [sp, #24]
		bsi->nBytes -= 4;
 8002574:	f1ac 0c04 	sub.w	ip, ip, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002578:	4690      	mov	r8, r2
 800257a:	1c53      	adds	r3, r2, #1
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800257c:	f102 0a03 	add.w	sl, r2, #3
		bsi->iCache |= (*bsi->bytePtr++);
 8002580:	f102 0904 	add.w	r9, r2, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002584:	9306      	str	r3, [sp, #24]
 8002586:	f818 3b02 	ldrb.w	r3, [r8], #2
 800258a:	061b      	lsls	r3, r3, #24
 800258c:	e9cd 8306 	strd	r8, r3, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8002590:	f892 8001 	ldrb.w	r8, [r2, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002594:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8002598:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800259c:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800259e:	f892 8002 	ldrb.w	r8, [r2, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 80025a2:	f8cd 9018 	str.w	r9, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80025a6:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 80025aa:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 80025ac:	78d2      	ldrb	r2, [r2, #3]
		bsi->nBytes -= 4;
 80025ae:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 80025b2:	4313      	orrs	r3, r2
 80025b4:	fa23 f201 	lsr.w	r2, r3, r1
 80025b8:	fa03 fe0e 	lsl.w	lr, r3, lr
 80025bc:	4310      	orrs	r0, r2
 80025be:	ea4f 63de 	mov.w	r3, lr, lsr #27
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 80025c2:	460a      	mov	r2, r1
 80025c4:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 80025c8:	f7ff bb9e 	b.w	8001d08 <xmp3fixpt_UnpackSideInfo+0xb0c>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80025cc:	9906      	ldr	r1, [sp, #24]
		bsi->nBytes -= 4;
 80025ce:	f1a2 0e04 	sub.w	lr, r2, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80025d2:	1c4b      	adds	r3, r1, #1
 80025d4:	460a      	mov	r2, r1
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80025d6:	f101 0a03 	add.w	sl, r1, #3
		bsi->iCache |= (*bsi->bytePtr++);
 80025da:	f101 0904 	add.w	r9, r1, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 80025de:	9306      	str	r3, [sp, #24]
 80025e0:	f812 3b02 	ldrb.w	r3, [r2], #2
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 80025ea:	784a      	ldrb	r2, [r1, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80025ec:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 80025f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80025f4:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80025f6:	788a      	ldrb	r2, [r1, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 80025f8:	f8cd 9018 	str.w	r9, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 80025fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002600:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 8002602:	78ca      	ldrb	r2, [r1, #3]
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8002604:	4641      	mov	r1, r8
		bsi->nBytes -= 4;
 8002606:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800260a:	4313      	orrs	r3, r2
 800260c:	fa03 fe00 	lsl.w	lr, r3, r0
 8002610:	fa23 f308 	lsr.w	r3, r3, r8
 8002614:	ea4f 60de 	mov.w	r0, lr, lsr #27
 8002618:	ea4c 0c03 	orr.w	ip, ip, r3
 800261c:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 8002620:	f7fe bf5f 	b.w	80014e2 <xmp3fixpt_UnpackSideInfo+0x2e6>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002624:	9906      	ldr	r1, [sp, #24]
		bsi->nBytes -= 4;
 8002626:	f1ac 0c04 	sub.w	ip, ip, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800262a:	4689      	mov	r9, r1
 800262c:	1c4b      	adds	r3, r1, #1
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800262e:	f101 0b03 	add.w	fp, r1, #3
		bsi->iCache |= (*bsi->bytePtr++);
 8002632:	f101 0a04 	add.w	sl, r1, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8002636:	9306      	str	r3, [sp, #24]
 8002638:	f819 3b02 	ldrb.w	r3, [r9], #2
 800263c:	061b      	lsls	r3, r3, #24
 800263e:	e9cd 9306 	strd	r9, r3, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8002642:	f891 9001 	ldrb.w	r9, [r1, #1]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002646:	f8cd b018 	str.w	fp, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800264a:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
 800264e:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002650:	f891 9002 	ldrb.w	r9, [r1, #2]
		bsi->iCache |= (*bsi->bytePtr++);
 8002654:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8002658:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
 800265c:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800265e:	f891 a003 	ldrb.w	sl, [r1, #3]
		bsi->nBytes -= 4;
 8002662:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 8002666:	ea4a 0903 	orr.w	r9, sl, r3
 800266a:	fa09 f808 	lsl.w	r8, r9, r8
 800266e:	fa29 f902 	lsr.w	r9, r9, r2
 8002672:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8002676:	ea49 0a00 	orr.w	sl, r9, r0
 800267a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 800267e:	4691      	mov	r9, r2
 8002680:	f7fe bf69 	b.w	8001556 <xmp3fixpt_UnpackSideInfo+0x35a>
		while (nBytes--) {
 8002684:	4673      	mov	r3, lr
 8002686:	46f3      	mov	fp, lr
 8002688:	f7ff ba22 	b.w	8001ad0 <xmp3fixpt_UnpackSideInfo+0x8d4>
 800268c:	4661      	mov	r1, ip
 800268e:	f7ff baf0 	b.w	8001c72 <xmp3fixpt_UnpackSideInfo+0xa76>
 8002692:	46f0      	mov	r8, lr
 8002694:	4670      	mov	r0, lr
 8002696:	e411      	b.n	8001ebc <xmp3fixpt_UnpackSideInfo+0xcc0>
 8002698:	46e6      	mov	lr, ip
 800269a:	4663      	mov	r3, ip
 800269c:	f7ff bb30 	b.w	8001d00 <xmp3fixpt_UnpackSideInfo+0xb04>
 80026a0:	4670      	mov	r0, lr
 80026a2:	e453      	b.n	8001f4c <xmp3fixpt_UnpackSideInfo+0xd50>
 80026a4:	4673      	mov	r3, lr
 80026a6:	46f4      	mov	ip, lr
 80026a8:	f7ff bbb9 	b.w	8001e1e <xmp3fixpt_UnpackSideInfo+0xc22>
 80026ac:	4660      	mov	r0, ip
 80026ae:	f7ff bb71 	b.w	8001d94 <xmp3fixpt_UnpackSideInfo+0xb98>
 80026b2:	4673      	mov	r3, lr
 80026b4:	46f4      	mov	ip, lr
 80026b6:	f7ff b9c0 	b.w	8001a3a <xmp3fixpt_UnpackSideInfo+0x83e>
 80026ba:	4663      	mov	r3, ip
 80026bc:	4660      	mov	r0, ip
 80026be:	46e6      	mov	lr, ip
 80026c0:	f7ff ba93 	b.w	8001bea <xmp3fixpt_UnpackSideInfo+0x9ee>
 80026c4:	4673      	mov	r3, lr
 80026c6:	4670      	mov	r0, lr
 80026c8:	f7ff ba46 	b.w	8001b58 <xmp3fixpt_UnpackSideInfo+0x95c>
 80026cc:	fa02 f208 	lsl.w	r2, r2, r8
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	fa22 f000 	lsr.w	r0, r2, r0
 80026d8:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80026dc:	ea4c 0c00 	orr.w	ip, ip, r0
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	f7ff b8e3 	b.w	80018ac <xmp3fixpt_UnpackSideInfo+0x6b0>
 80026e6:	fa02 f30a 	lsl.w	r3, r2, sl
 80026ea:	fa23 f101 	lsr.w	r1, r3, r1
 80026ee:	fa03 f309 	lsl.w	r3, r3, r9
 80026f2:	ea48 0801 	orr.w	r8, r8, r1
 80026f6:	f7ff b891 	b.w	800181c <xmp3fixpt_UnpackSideInfo+0x620>
 80026fa:	460b      	mov	r3, r1
 80026fc:	468c      	mov	ip, r1
 80026fe:	f7ff b916 	b.w	800192e <xmp3fixpt_UnpackSideInfo+0x732>
 8002702:	464b      	mov	r3, r9
 8002704:	46c8      	mov	r8, r9
 8002706:	f7ff b8d1 	b.w	80018ac <xmp3fixpt_UnpackSideInfo+0x6b0>
 800270a:	4603      	mov	r3, r0
 800270c:	f7fe bfb2 	b.w	8001674 <xmp3fixpt_UnpackSideInfo+0x478>
 8002710:	4613      	mov	r3, r2
 8002712:	f7fe bffc 	b.w	800170e <xmp3fixpt_UnpackSideInfo+0x512>
 8002716:	4663      	mov	r3, ip
 8002718:	f7ff b880 	b.w	800181c <xmp3fixpt_UnpackSideInfo+0x620>
 800271c:	4613      	mov	r3, r2
 800271e:	4696      	mov	lr, r2
 8002720:	f7ff b83b 	b.w	800179a <xmp3fixpt_UnpackSideInfo+0x59e>
 8002724:	4613      	mov	r3, r2
 8002726:	4690      	mov	r8, r2
 8002728:	f7fe bf5f 	b.w	80015ea <xmp3fixpt_UnpackSideInfo+0x3ee>
 800272c:	4603      	mov	r3, r0
 800272e:	f7ff b93c 	b.w	80019aa <xmp3fixpt_UnpackSideInfo+0x7ae>
 8002732:	fa0a f301 	lsl.w	r3, sl, r1
 8002736:	fa23 f000 	lsr.w	r0, r3, r0
 800273a:	fa03 f30c 	lsl.w	r3, r3, ip
 800273e:	ea4e 0e00 	orr.w	lr, lr, r0
 8002742:	f7fe bfe4 	b.w	800170e <xmp3fixpt_UnpackSideInfo+0x512>
 8002746:	fa0b f30c 	lsl.w	r3, fp, ip
 800274a:	fa23 f101 	lsr.w	r1, r3, r1
 800274e:	fa03 f309 	lsl.w	r3, r3, r9
 8002752:	ea48 0801 	orr.w	r8, r8, r1
 8002756:	f7fe bf8d 	b.w	8001674 <xmp3fixpt_UnpackSideInfo+0x478>
 800275a:	fa0a f704 	lsl.w	r7, sl, r4
 800275e:	fa27 f101 	lsr.w	r1, r7, r1
 8002762:	fa07 f303 	lsl.w	r3, r7, r3
 8002766:	430a      	orrs	r2, r1
 8002768:	f7ff b91f 	b.w	80019aa <xmp3fixpt_UnpackSideInfo+0x7ae>
 800276c:	fa03 f308 	lsl.w	r3, r3, r8
 8002770:	fa23 f101 	lsr.w	r1, r3, r1
 8002774:	4083      	lsls	r3, r0
 8002776:	ea4c 0c01 	orr.w	ip, ip, r1
 800277a:	0f58      	lsrs	r0, r3, #29
 800277c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002780:	f7ff bb9c 	b.w	8001ebc <xmp3fixpt_UnpackSideInfo+0xcc0>
 8002784:	fa03 f308 	lsl.w	r3, r3, r8
 8002788:	fa23 f101 	lsr.w	r1, r3, r1
 800278c:	fa03 fe0e 	lsl.w	lr, r3, lr
 8002790:	4308      	orrs	r0, r1
 8002792:	ea4f 63de 	mov.w	r3, lr, lsr #27
 8002796:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 800279a:	f7ff bab1 	b.w	8001d00 <xmp3fixpt_UnpackSideInfo+0xb04>
 800279e:	fa00 f008 	lsl.w	r0, r0, r8
 80027a2:	fa20 f202 	lsr.w	r2, r0, r2
 80027a6:	fa00 f00e 	lsl.w	r0, r0, lr
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f7ff baf2 	b.w	8001d94 <xmp3fixpt_UnpackSideInfo+0xb98>
 80027b0:	fa01 f108 	lsl.w	r1, r1, r8
 80027b4:	fa21 f202 	lsr.w	r2, r1, r2
 80027b8:	fa01 f10e 	lsl.w	r1, r1, lr
 80027bc:	4310      	orrs	r0, r2
 80027be:	f7ff ba58 	b.w	8001c72 <xmp3fixpt_UnpackSideInfo+0xa76>
 80027c2:	fa03 fe09 	lsl.w	lr, r3, r9
 80027c6:	f7ff bbb7 	b.w	8001f38 <xmp3fixpt_UnpackSideInfo+0xd3c>
 80027ca:	4083      	lsls	r3, r0
 80027cc:	fa23 f202 	lsr.w	r2, r3, r2
 80027d0:	fa03 fe0e 	lsl.w	lr, r3, lr
 80027d4:	4311      	orrs	r1, r2
 80027d6:	ea4f 70de 	mov.w	r0, lr, lsr #31
 80027da:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80027de:	f7ff ba04 	b.w	8001bea <xmp3fixpt_UnpackSideInfo+0x9ee>
 80027e2:	4682      	mov	sl, r0
 80027e4:	4663      	mov	r3, ip
 80027e6:	4660      	mov	r0, ip
 80027e8:	e554      	b.n	8002294 <xmp3fixpt_UnpackSideInfo+0x1098>
 80027ea:	fa0b f303 	lsl.w	r3, fp, r3
 80027ee:	e547      	b.n	8002280 <xmp3fixpt_UnpackSideInfo+0x1084>
		return -1;
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027f4:	9305      	str	r3, [sp, #20]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe be23 	b.w	8001442 <xmp3fixpt_UnpackSideInfo+0x246>

080027fc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80027fc:	b500      	push	{lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 80027fe:	2301      	movs	r3, #1
{
 8002800:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8002802:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8002806:	f001 f975 	bl	8003af4 <BSP_PlatformIsDetected>
 800280a:	b908      	cbnz	r0, 8002810 <BSP_SD_Init+0x14>
  {
    status = SD_NOT_PRESENT;
 800280c:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8002810:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8002814:	2b01      	cmp	r3, #1
 8002816:	d003      	beq.n	8002820 <BSP_SD_Init+0x24>
    return MSD_ERROR_SD_NOT_PRESENT;
 8002818:	2002      	movs	r0, #2
}
 800281a:	b003      	add	sp, #12
 800281c:	f85d fb04 	ldr.w	pc, [sp], #4
  sd_state = HAL_SD_Init(&hsd1);
 8002820:	4807      	ldr	r0, [pc, #28]	; (8002840 <BSP_SD_Init+0x44>)
 8002822:	f011 f9bf 	bl	8013ba4 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8002826:	2800      	cmp	r0, #0
 8002828:	d1f7      	bne.n	800281a <BSP_SD_Init+0x1e>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800282a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800282e:	4804      	ldr	r0, [pc, #16]	; (8002840 <BSP_SD_Init+0x44>)
 8002830:	f011 f9ea 	bl	8013c08 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8002834:	3000      	adds	r0, #0
 8002836:	bf18      	it	ne
 8002838:	2001      	movne	r0, #1
}
 800283a:	b003      	add	sp, #12
 800283c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002840:	2000ef5c 	.word	0x2000ef5c

08002844 <BSP_SD_ReadBlocks_DMA>:
{
 8002844:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8002846:	4613      	mov	r3, r2
 8002848:	460a      	mov	r2, r1
 800284a:	4601      	mov	r1, r0
 800284c:	4803      	ldr	r0, [pc, #12]	; (800285c <BSP_SD_ReadBlocks_DMA+0x18>)
 800284e:	f010 fe45 	bl	80134dc <HAL_SD_ReadBlocks_DMA>
}
 8002852:	3000      	adds	r0, #0
 8002854:	bf18      	it	ne
 8002856:	2001      	movne	r0, #1
 8002858:	bd08      	pop	{r3, pc}
 800285a:	bf00      	nop
 800285c:	2000ef5c 	.word	0x2000ef5c

08002860 <BSP_SD_WriteBlocks_DMA>:
{
 8002860:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8002862:	4613      	mov	r3, r2
 8002864:	460a      	mov	r2, r1
 8002866:	4601      	mov	r1, r0
 8002868:	4803      	ldr	r0, [pc, #12]	; (8002878 <BSP_SD_WriteBlocks_DMA+0x18>)
 800286a:	f010 fec9 	bl	8013600 <HAL_SD_WriteBlocks_DMA>
}
 800286e:	3000      	adds	r0, #0
 8002870:	bf18      	it	ne
 8002872:	2001      	movne	r0, #1
 8002874:	bd08      	pop	{r3, pc}
 8002876:	bf00      	nop
 8002878:	2000ef5c 	.word	0x2000ef5c

0800287c <BSP_SD_GetCardState>:
{
 800287c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800287e:	4803      	ldr	r0, [pc, #12]	; (800288c <BSP_SD_GetCardState+0x10>)
 8002880:	f011 fa4c 	bl	8013d1c <HAL_SD_GetCardState>
}
 8002884:	3804      	subs	r0, #4
 8002886:	bf18      	it	ne
 8002888:	2001      	movne	r0, #1
 800288a:	bd08      	pop	{r3, pc}
 800288c:	2000ef5c 	.word	0x2000ef5c

08002890 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8002890:	4601      	mov	r1, r0
 8002892:	4801      	ldr	r0, [pc, #4]	; (8002898 <BSP_SD_GetCardInfo+0x8>)
 8002894:	f011 b9a2 	b.w	8013bdc <HAL_SD_GetCardInfo>
 8002898:	2000ef5c 	.word	0x2000ef5c

0800289c <HAL_SD_RxCpltCallback>:
{
 800289c:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800289e:	f008 fa23 	bl	800ace8 <BSP_SD_ReadCpltCallback>
}
 80028a2:	bd08      	pop	{r3, pc}

080028a4 <xmp3fixpt_AllocateBuffers>:
//	hi =  (HuffmanInfo *)     malloc(sizeof(HuffmanInfo));
//	di =  (DequantInfo *)     malloc(sizeof(DequantInfo));
//	mi =  (IMDCTInfo *)       malloc(sizeof(IMDCTInfo));
//	sbi = (SubbandInfo *)     malloc(sizeof(SubbandInfo));

	mp3DecInfo->FrameHeaderPS =     (void *)fh;
 80028a4:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <xmp3fixpt_AllocateBuffers+0x80>)
 80028a6:	2238      	movs	r2, #56	; 0x38
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
{
 80028ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mp3DecInfo->FrameHeaderPS =     (void *)fh;
 80028b0:	4c1d      	ldr	r4, [pc, #116]	; (8002928 <xmp3fixpt_AllocateBuffers+0x84>)
	mp3DecInfo->SideInfoPS =        (void *)si;
 80028b2:	f8df a084 	ldr.w	sl, [pc, #132]	; 8002938 <xmp3fixpt_AllocateBuffers+0x94>
	mp3DecInfo->ScaleFactorInfoPS = (void *)sfi;
 80028b6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800293c <xmp3fixpt_AllocateBuffers+0x98>
	mp3DecInfo->HuffmanInfoPS =     (void *)hi;
 80028ba:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8002940 <xmp3fixpt_AllocateBuffers+0x9c>
	mp3DecInfo->DequantInfoPS =     (void *)di;
 80028be:	4f1b      	ldr	r7, [pc, #108]	; (800292c <xmp3fixpt_AllocateBuffers+0x88>)
	mp3DecInfo->IMDCTInfoPS =       (void *)mi;
 80028c0:	4e1b      	ldr	r6, [pc, #108]	; (8002930 <xmp3fixpt_AllocateBuffers+0x8c>)
	mp3DecInfo->SubbandInfoPS =     (void *)sbi;
 80028c2:	4d1c      	ldr	r5, [pc, #112]	; (8002934 <xmp3fixpt_AllocateBuffers+0x90>)
	mp3DecInfo->SideInfoPS =        (void *)si;
 80028c4:	e9c4 3a00 	strd	r3, sl, [r4]
	mp3DecInfo->HuffmanInfoPS =     (void *)hi;
 80028c8:	e9c4 9802 	strd	r9, r8, [r4, #8]
	mp3DecInfo->IMDCTInfoPS =       (void *)mi;
 80028cc:	e9c4 7604 	strd	r7, r6, [r4, #16]
	mp3DecInfo->SubbandInfoPS =     (void *)sbi;
 80028d0:	61a5      	str	r5, [r4, #24]
 80028d2:	f01c ff1f 	bl	801f714 <memset>
 80028d6:	4650      	mov	r0, sl
 80028d8:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80028dc:	2100      	movs	r1, #0
 80028de:	f01c ff19 	bl	801f714 <memset>
 80028e2:	4648      	mov	r0, r9
 80028e4:	f44f 728e 	mov.w	r2, #284	; 0x11c
 80028e8:	2100      	movs	r1, #0
 80028ea:	f01c ff13 	bl	801f714 <memset>
 80028ee:	4640      	mov	r0, r8
 80028f0:	f241 2210 	movw	r2, #4624	; 0x1210
 80028f4:	2100      	movs	r1, #0
 80028f6:	f01c ff0d 	bl	801f714 <memset>
 80028fa:	4638      	mov	r0, r7
 80028fc:	f44f 7252 	mov.w	r2, #840	; 0x348
 8002900:	2100      	movs	r1, #0
 8002902:	f01c ff07 	bl	801f714 <memset>
 8002906:	4630      	mov	r0, r6
 8002908:	f44f 52d9 	mov.w	r2, #6944	; 0x1b20
 800290c:	2100      	movs	r1, #0
 800290e:	f01c ff01 	bl	801f714 <memset>
 8002912:	4628      	mov	r0, r5
 8002914:	f242 2204 	movw	r2, #8708	; 0x2204
 8002918:	2100      	movs	r1, #0
 800291a:	f01c fefb 	bl	801f714 <memset>
	ClearBuffer(di,  sizeof(DequantInfo));
	ClearBuffer(mi,  sizeof(IMDCTInfo));
	ClearBuffer(sbi, sizeof(SubbandInfo));

	return mp3DecInfo;
}
 800291e:	4620      	mov	r0, r4
 8002920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002924:	20000484 	.word	0x20000484
 8002928:	200031ec 	.word	0x200031ec
 800292c:	2000013c 	.word	0x2000013c
 8002930:	200016cc 	.word	0x200016cc
 8002934:	200039dc 	.word	0x200039dc
 8002938:	20005cfc 	.word	0x20005cfc
 800293c:	20005be0 	.word	0x20005be0
 8002940:	200004bc 	.word	0x200004bc

08002944 <xmp3fixpt_FreeBuffers>:
//	SAFE_FREE(mp3DecInfo->DequantInfoPS);
//	SAFE_FREE(mp3DecInfo->IMDCTInfoPS);
//	SAFE_FREE(mp3DecInfo->SubbandInfoPS);
//
//	SAFE_FREE(mp3DecInfo);
}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop

08002948 <debug_init>:
	
}

void debug_init(UART_HandleTypeDef* handler)
{
	pUart = handler;
 8002948:	4b01      	ldr	r3, [pc, #4]	; (8002950 <debug_init+0x8>)
 800294a:	6018      	str	r0, [r3, #0]
}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20005e44 	.word	0x20005e44

08002954 <debug_chr>:
{
	#if USE_HAL
	HAL_UART_Transmit(pUart,
	(uint8_t*)&chr, 1, 1000);
	#else
	while(__HAL_UART_GET_FLAG(pUart, UART_FLAG_TXE) == RESET) { ; }
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <debug_chr+0x10>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	69d3      	ldr	r3, [r2, #28]
 800295c:	061b      	lsls	r3, r3, #24
 800295e:	d5fc      	bpl.n	800295a <debug_chr+0x6>
	pUart->Instance->TDR = (uint16_t)chr;
 8002960:	6290      	str	r0, [r2, #40]	; 0x28
	#endif
}
 8002962:	4770      	bx	lr
 8002964:	20005e44 	.word	0x20005e44

08002968 <xmp3fixpt_FDCT32>:
 * TODO:        code organization and optimization for ARM
 *              possibly interleave stereo (cut # of coef loads in half - may not have
 *                enough registers)
 **************************************************************************************/
void FDCT32(int *buf, int *dest, int offset, int oddBlock, int gb)
{
 8002968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800296c:	b087      	sub	sp, #28
 800296e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002970:	9101      	str	r1, [sp, #4]
	/* scaling - ensure at least 6 guard bits for DCT 
	 * (in practice this is already true 99% of time, so this code is
	 *  almost never triggered)
	 */
	es = 0;
	if (gb < 6) {
 8002972:	2c05      	cmp	r4, #5
{
 8002974:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (gb < 6) {
 8002978:	f300 84b1 	bgt.w	80032de <xmp3fixpt_FDCT32+0x976>
		es = 6 - gb;
 800297c:	f1c4 0306 	rsb	r3, r4, #6
 8002980:	f100 017c 	add.w	r1, r0, #124	; 0x7c
 8002984:	461c      	mov	r4, r3
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	1f03      	subs	r3, r0, #4
		for (i = 0; i < 32; i++)
			buf[i] >>= es;
 800298a:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800298e:	4122      	asrs	r2, r4
		for (i = 0; i < 32; i++)
 8002990:	4299      	cmp	r1, r3
			buf[i] >>= es;
 8002992:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 32; i++)
 8002994:	d1f9      	bne.n	800298a <xmp3fixpt_FDCT32+0x22>
	}

	/* first pass */    
	D32FP(0, 1, 5, 1);
 8002996:	6801      	ldr	r1, [r0, #0]
 8002998:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800299a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800299c:	1a8b      	subs	r3, r1, r2
 800299e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80029a0:	440a      	add	r2, r1

#elif defined(ARM_TEST)
static __inline__ int MULSHIFT32(int x, int y)
{
	int zlow;
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80029a2:	49c7      	ldr	r1, [pc, #796]	; (8002cc0 <xmp3fixpt_FDCT32+0x358>)
 80029a4:	fb81 6303 	smull	r6, r3, r1, r3
 80029a8:	1b61      	subs	r1, r4, r5
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	442c      	add	r4, r5
 80029ae:	4dc5      	ldr	r5, [pc, #788]	; (8002cc4 <xmp3fixpt_FDCT32+0x35c>)
 80029b0:	fb85 6101 	smull	r6, r1, r5, r1
 80029b4:	1915      	adds	r5, r2, r4
 80029b6:	0149      	lsls	r1, r1, #5
 80029b8:	1b12      	subs	r2, r2, r4
 80029ba:	4cc3      	ldr	r4, [pc, #780]	; (8002cc8 <xmp3fixpt_FDCT32+0x360>)
 80029bc:	6005      	str	r5, [r0, #0]
 80029be:	fb84 5202 	smull	r5, r2, r4, r2
 80029c2:	185d      	adds	r5, r3, r1
 80029c4:	0052      	lsls	r2, r2, #1
 80029c6:	1a5b      	subs	r3, r3, r1
 80029c8:	e9c0 250f 	strd	r2, r5, [r0, #60]	; 0x3c
 80029cc:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(1, 1, 3, 1);
 80029d0:	6841      	ldr	r1, [r0, #4]
	D32FP(0, 1, 5, 1);
 80029d2:	005b      	lsls	r3, r3, #1
	D32FP(1, 1, 3, 1);
 80029d4:	6f82      	ldr	r2, [r0, #120]	; 0x78
	D32FP(0, 1, 5, 1);
 80029d6:	67c3      	str	r3, [r0, #124]	; 0x7c
	D32FP(1, 1, 3, 1);
 80029d8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80029da:	1a8b      	subs	r3, r1, r2
 80029dc:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80029de:	440a      	add	r2, r1
 80029e0:	49ba      	ldr	r1, [pc, #744]	; (8002ccc <xmp3fixpt_FDCT32+0x364>)
 80029e2:	fb81 6303 	smull	r6, r3, r1, r3
 80029e6:	1b61      	subs	r1, r4, r5
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	442c      	add	r4, r5
 80029ec:	4db8      	ldr	r5, [pc, #736]	; (8002cd0 <xmp3fixpt_FDCT32+0x368>)
 80029ee:	fb85 6101 	smull	r6, r1, r5, r1
 80029f2:	1915      	adds	r5, r2, r4
 80029f4:	00c9      	lsls	r1, r1, #3
 80029f6:	1b12      	subs	r2, r2, r4
 80029f8:	4cb6      	ldr	r4, [pc, #728]	; (8002cd4 <xmp3fixpt_FDCT32+0x36c>)
 80029fa:	6045      	str	r5, [r0, #4]
 80029fc:	fb84 5202 	smull	r5, r2, r4, r2
 8002a00:	185d      	adds	r5, r3, r1
 8002a02:	0052      	lsls	r2, r2, #1
 8002a04:	1a5b      	subs	r3, r3, r1
 8002a06:	6382      	str	r2, [r0, #56]	; 0x38
 8002a08:	6445      	str	r5, [r0, #68]	; 0x44
 8002a0a:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(2, 1, 3, 1);
 8002a0e:	6881      	ldr	r1, [r0, #8]
	D32FP(1, 1, 3, 1);
 8002a10:	005b      	lsls	r3, r3, #1
	D32FP(2, 1, 3, 1);
 8002a12:	6f42      	ldr	r2, [r0, #116]	; 0x74
	D32FP(1, 1, 3, 1);
 8002a14:	6783      	str	r3, [r0, #120]	; 0x78
	D32FP(2, 1, 3, 1);
 8002a16:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002a18:	1a8b      	subs	r3, r1, r2
 8002a1a:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8002a1c:	440a      	add	r2, r1
 8002a1e:	49ae      	ldr	r1, [pc, #696]	; (8002cd8 <xmp3fixpt_FDCT32+0x370>)
 8002a20:	fb81 6303 	smull	r6, r3, r1, r3
 8002a24:	1b61      	subs	r1, r4, r5
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	442c      	add	r4, r5
 8002a2a:	4dac      	ldr	r5, [pc, #688]	; (8002cdc <xmp3fixpt_FDCT32+0x374>)
 8002a2c:	fb85 6101 	smull	r6, r1, r5, r1
 8002a30:	1915      	adds	r5, r2, r4
 8002a32:	00c9      	lsls	r1, r1, #3
 8002a34:	1b12      	subs	r2, r2, r4
 8002a36:	4caa      	ldr	r4, [pc, #680]	; (8002ce0 <xmp3fixpt_FDCT32+0x378>)
 8002a38:	6085      	str	r5, [r0, #8]
 8002a3a:	fb84 5202 	smull	r5, r2, r4, r2
 8002a3e:	185d      	adds	r5, r3, r1
 8002a40:	0052      	lsls	r2, r2, #1
 8002a42:	1a5b      	subs	r3, r3, r1
 8002a44:	6342      	str	r2, [r0, #52]	; 0x34
 8002a46:	6485      	str	r5, [r0, #72]	; 0x48
 8002a48:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(3, 1, 2, 1);
 8002a4c:	68c1      	ldr	r1, [r0, #12]
	D32FP(2, 1, 3, 1);
 8002a4e:	005b      	lsls	r3, r3, #1
	D32FP(3, 1, 2, 1);
 8002a50:	6f02      	ldr	r2, [r0, #112]	; 0x70
	D32FP(2, 1, 3, 1);
 8002a52:	6743      	str	r3, [r0, #116]	; 0x74
	D32FP(3, 1, 2, 1);
 8002a54:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002a56:	1a8b      	subs	r3, r1, r2
 8002a58:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8002a5a:	440a      	add	r2, r1
 8002a5c:	49a1      	ldr	r1, [pc, #644]	; (8002ce4 <xmp3fixpt_FDCT32+0x37c>)
 8002a5e:	fb81 6303 	smull	r6, r3, r1, r3
 8002a62:	1b61      	subs	r1, r4, r5
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	442c      	add	r4, r5
 8002a68:	4d9f      	ldr	r5, [pc, #636]	; (8002ce8 <xmp3fixpt_FDCT32+0x380>)
 8002a6a:	fb85 6101 	smull	r6, r1, r5, r1
 8002a6e:	1915      	adds	r5, r2, r4
 8002a70:	0089      	lsls	r1, r1, #2
 8002a72:	1b12      	subs	r2, r2, r4
 8002a74:	4c9d      	ldr	r4, [pc, #628]	; (8002cec <xmp3fixpt_FDCT32+0x384>)
 8002a76:	60c5      	str	r5, [r0, #12]
 8002a78:	fb84 5202 	smull	r5, r2, r4, r2
 8002a7c:	185d      	adds	r5, r3, r1
 8002a7e:	0052      	lsls	r2, r2, #1
 8002a80:	1a5b      	subs	r3, r3, r1
 8002a82:	6302      	str	r2, [r0, #48]	; 0x30
 8002a84:	64c5      	str	r5, [r0, #76]	; 0x4c
 8002a86:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(4, 1, 2, 1);
 8002a8a:	6901      	ldr	r1, [r0, #16]
	D32FP(3, 1, 2, 1);
 8002a8c:	005b      	lsls	r3, r3, #1
	D32FP(4, 1, 2, 1);
 8002a8e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
	D32FP(3, 1, 2, 1);
 8002a90:	6703      	str	r3, [r0, #112]	; 0x70
	D32FP(4, 1, 2, 1);
 8002a92:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002a94:	1a8b      	subs	r3, r1, r2
 8002a96:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8002a98:	440a      	add	r2, r1
 8002a9a:	4995      	ldr	r1, [pc, #596]	; (8002cf0 <xmp3fixpt_FDCT32+0x388>)
 8002a9c:	fb81 6303 	smull	r6, r3, r1, r3
 8002aa0:	1b61      	subs	r1, r4, r5
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	442c      	add	r4, r5
 8002aa6:	4d93      	ldr	r5, [pc, #588]	; (8002cf4 <xmp3fixpt_FDCT32+0x38c>)
 8002aa8:	fb85 6101 	smull	r6, r1, r5, r1
 8002aac:	1915      	adds	r5, r2, r4
 8002aae:	0089      	lsls	r1, r1, #2
 8002ab0:	1b12      	subs	r2, r2, r4
 8002ab2:	4c91      	ldr	r4, [pc, #580]	; (8002cf8 <xmp3fixpt_FDCT32+0x390>)
 8002ab4:	6105      	str	r5, [r0, #16]
 8002ab6:	fb84 5202 	smull	r5, r2, r4, r2
 8002aba:	185d      	adds	r5, r3, r1
 8002abc:	0052      	lsls	r2, r2, #1
 8002abe:	1a5b      	subs	r3, r3, r1
 8002ac0:	62c2      	str	r2, [r0, #44]	; 0x2c
 8002ac2:	6505      	str	r5, [r0, #80]	; 0x50
 8002ac4:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(5, 1, 1, 2);
 8002ac8:	6941      	ldr	r1, [r0, #20]
	D32FP(4, 1, 2, 1);
 8002aca:	005b      	lsls	r3, r3, #1
	D32FP(5, 1, 1, 2);
 8002acc:	6e82      	ldr	r2, [r0, #104]	; 0x68
	D32FP(4, 1, 2, 1);
 8002ace:	66c3      	str	r3, [r0, #108]	; 0x6c
	D32FP(5, 1, 1, 2);
 8002ad0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002ad2:	1a8b      	subs	r3, r1, r2
 8002ad4:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8002ad6:	440a      	add	r2, r1
 8002ad8:	4988      	ldr	r1, [pc, #544]	; (8002cfc <xmp3fixpt_FDCT32+0x394>)
 8002ada:	fb81 6303 	smull	r6, r3, r1, r3
 8002ade:	1b61      	subs	r1, r4, r5
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	442c      	add	r4, r5
 8002ae4:	4d86      	ldr	r5, [pc, #536]	; (8002d00 <xmp3fixpt_FDCT32+0x398>)
 8002ae6:	fb85 6101 	smull	r6, r1, r5, r1
 8002aea:	1915      	adds	r5, r2, r4
 8002aec:	0049      	lsls	r1, r1, #1
 8002aee:	1b12      	subs	r2, r2, r4
 8002af0:	4c84      	ldr	r4, [pc, #528]	; (8002d04 <xmp3fixpt_FDCT32+0x39c>)
 8002af2:	6145      	str	r5, [r0, #20]
 8002af4:	fb84 5202 	smull	r5, r2, r4, r2
 8002af8:	185d      	adds	r5, r3, r1
 8002afa:	0092      	lsls	r2, r2, #2
 8002afc:	1a5b      	subs	r3, r3, r1
 8002afe:	6282      	str	r2, [r0, #40]	; 0x28
 8002b00:	6545      	str	r5, [r0, #84]	; 0x54
 8002b02:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(6, 1, 1, 2);
 8002b06:	6981      	ldr	r1, [r0, #24]
	D32FP(5, 1, 1, 2);
 8002b08:	009b      	lsls	r3, r3, #2
	D32FP(6, 1, 1, 2);
 8002b0a:	6e42      	ldr	r2, [r0, #100]	; 0x64
	D32FP(5, 1, 1, 2);
 8002b0c:	6683      	str	r3, [r0, #104]	; 0x68
	D32FP(6, 1, 1, 2);
 8002b0e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002b10:	1a8b      	subs	r3, r1, r2
 8002b12:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8002b14:	440a      	add	r2, r1
 8002b16:	497c      	ldr	r1, [pc, #496]	; (8002d08 <xmp3fixpt_FDCT32+0x3a0>)
 8002b18:	fb81 6303 	smull	r6, r3, r1, r3
 8002b1c:	1b61      	subs	r1, r4, r5
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	442c      	add	r4, r5
 8002b22:	4d7a      	ldr	r5, [pc, #488]	; (8002d0c <xmp3fixpt_FDCT32+0x3a4>)
 8002b24:	fb85 6101 	smull	r6, r1, r5, r1
 8002b28:	1915      	adds	r5, r2, r4
 8002b2a:	0049      	lsls	r1, r1, #1
 8002b2c:	1b12      	subs	r2, r2, r4
 8002b2e:	4c78      	ldr	r4, [pc, #480]	; (8002d10 <xmp3fixpt_FDCT32+0x3a8>)
 8002b30:	6185      	str	r5, [r0, #24]
 8002b32:	fb84 5202 	smull	r5, r2, r4, r2
 8002b36:	185d      	adds	r5, r3, r1
 8002b38:	0092      	lsls	r2, r2, #2
 8002b3a:	1a5b      	subs	r3, r3, r1
 8002b3c:	6242      	str	r2, [r0, #36]	; 0x24
 8002b3e:	6585      	str	r5, [r0, #88]	; 0x58
 8002b40:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(7, 1, 1, 4);
 8002b44:	69c1      	ldr	r1, [r0, #28]
	D32FP(6, 1, 1, 2);
 8002b46:	009b      	lsls	r3, r3, #2
	D32FP(7, 1, 1, 4);
 8002b48:	6e02      	ldr	r2, [r0, #96]	; 0x60
	D32FP(6, 1, 1, 2);
 8002b4a:	6643      	str	r3, [r0, #100]	; 0x64
	D32FP(7, 1, 1, 4);
 8002b4c:	6a04      	ldr	r4, [r0, #32]
 8002b4e:	1a8b      	subs	r3, r1, r2
 8002b50:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8002b52:	440a      	add	r2, r1
 8002b54:	496f      	ldr	r1, [pc, #444]	; (8002d14 <xmp3fixpt_FDCT32+0x3ac>)
 8002b56:	fb81 6303 	smull	r6, r3, r1, r3
 8002b5a:	1b61      	subs	r1, r4, r5
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	442c      	add	r4, r5
 8002b60:	4d6d      	ldr	r5, [pc, #436]	; (8002d18 <xmp3fixpt_FDCT32+0x3b0>)
 8002b62:	fb85 6101 	smull	r6, r1, r5, r1
 8002b66:	1915      	adds	r5, r2, r4
 8002b68:	0049      	lsls	r1, r1, #1
 8002b6a:	1b12      	subs	r2, r2, r4
 8002b6c:	4c6b      	ldr	r4, [pc, #428]	; (8002d1c <xmp3fixpt_FDCT32+0x3b4>)
 8002b6e:	61c5      	str	r5, [r0, #28]
 8002b70:	fb84 5202 	smull	r5, r2, r4, r2
 8002b74:	185d      	adds	r5, r3, r1
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	1a5b      	subs	r3, r3, r1
 8002b7a:	6202      	str	r2, [r0, #32]
 8002b7c:	65c5      	str	r5, [r0, #92]	; 0x5c
 8002b7e:	fb84 2303 	smull	r2, r3, r4, r3
 8002b82:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8002d24 <xmp3fixpt_FDCT32+0x3bc>
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
 8002b8c:	f100 0720 	add.w	r7, r0, #32
 8002b90:	6603      	str	r3, [r0, #96]	; 0x60
 8002b92:	9005      	str	r0, [sp, #20]
 8002b94:	9202      	str	r2, [sp, #8]

	/* second pass */
	for (i = 4; i > 0; i--) {
		a0 = buf[0]; 	    a7 = buf[7];		a3 = buf[3];	    a4 = buf[4];
 8002b96:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8002b9a:	f857 5c20 	ldr.w	r5, [r7, #-32]
 8002b9e:	f857 4c14 	ldr.w	r4, [r7, #-20]
		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
 8002ba2:	1aab      	subs	r3, r5, r2
		a0 = buf[0]; 	    a7 = buf[7];		a3 = buf[3];	    a4 = buf[4];
 8002ba4:	f857 6c10 	ldr.w	r6, [r7, #-16]
		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
 8002ba8:	4415      	add	r5, r2
 8002baa:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8002bae:	fb82 1303 	smull	r1, r3, r2, r3
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 8002bb2:	1ba2      	subs	r2, r4, r6
		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
 8002bb4:	0059      	lsls	r1, r3, #1
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 8002bb6:	4434      	add	r4, r6
 8002bb8:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 8002bbc:	fb83 6202 	smull	r6, r2, r3, r2
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 8002bc0:	eba5 0e04 	sub.w	lr, r5, r4
 8002bc4:	eb05 0904 	add.w	r9, r5, r4
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 8002bc8:	00d3      	lsls	r3, r2, #3
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 8002bca:	f8da 4068 	ldr.w	r4, [sl, #104]	; 0x68
 8002bce:	fb84 2e0e 	smull	r2, lr, r4, lr
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 8002bd2:	1aca      	subs	r2, r1, r3
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 8002bd4:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 8002bd8:	440b      	add	r3, r1
 8002bda:	fb84 1202 	smull	r1, r2, r4, r2

		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
 8002bde:	f857 1c08 	ldr.w	r1, [r7, #-8]
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 8002be2:	0052      	lsls	r2, r2, #1
		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
 8002be4:	f857 5c1c 	ldr.w	r5, [r7, #-28]
 8002be8:	f857 8c18 	ldr.w	r8, [r7, #-24]
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 8002bec:	eba5 0c01 	sub.w	ip, r5, r1
		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
 8002bf0:	f857 6c0c 	ldr.w	r6, [r7, #-12]
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 8002bf4:	440d      	add	r5, r1
 8002bf6:	f8da 106c 	ldr.w	r1, [sl, #108]	; 0x6c
 8002bfa:	fb81 4c0c 	smull	r4, ip, r1, ip
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 8002bfe:	eba8 0406 	sub.w	r4, r8, r6
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 8002c02:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 8002c06:	4446      	add	r6, r8
 8002c08:	f8da 1070 	ldr.w	r1, [sl, #112]	; 0x70
 8002c0c:	fb81 8404 	smull	r8, r4, r1, r4
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 8002c10:	1ba9      	subs	r1, r5, r6
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 8002c12:	0064      	lsls	r4, r4, #1
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 8002c14:	4435      	add	r5, r6
 8002c16:	f8da 8074 	ldr.w	r8, [sl, #116]	; 0x74
 8002c1a:	fb88 6101 	smull	r6, r1, r8, r1
		a5 = b5 + b6;	    a6 = MULSHIFT32(*cptr++, b6 - b5) << 2;
 8002c1e:	ebac 0604 	sub.w	r6, ip, r4
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 8002c22:	0089      	lsls	r1, r1, #2
		a5 = b5 + b6;	    a6 = MULSHIFT32(*cptr++, b6 - b5) << 2;
 8002c24:	4464      	add	r4, ip
 8002c26:	fb88 c606 	smull	ip, r6, r8, r6
 8002c2a:	483d      	ldr	r0, [pc, #244]	; (8002d20 <xmp3fixpt_FDCT32+0x3b8>)

		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 8002c2c:	eba9 0805 	sub.w	r8, r9, r5
		a5 = b5 + b6;	    a6 = MULSHIFT32(*cptr++, b6 - b5) << 2;
 8002c30:	00b6      	lsls	r6, r6, #2
 8002c32:	fb80 c808 	smull	ip, r8, r0, r8
		b2 = a2 + a3;	    b3 = MULSHIFT32(COS4_0, a3 - a2) << 1;
 8002c36:	ebae 0c01 	sub.w	ip, lr, r1
 8002c3a:	fb80 bc0c 	smull	fp, ip, r0, ip
 8002c3e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002c42:	4471      	add	r1, lr
		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 8002c44:	444d      	add	r5, r9
 8002c46:	ea4f 0848 	mov.w	r8, r8, lsl #1
		buf[0] = b0;	    buf[1] = b1;
		buf[2] = b2 + b3;	buf[3] = b3;
 8002c4a:	eb01 0e0c 	add.w	lr, r1, ip

		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 8002c4e:	1b19      	subs	r1, r3, r4
		buf[2] = b2 + b3;	buf[3] = b3;
 8002c50:	e947 ec06 	strd	lr, ip, [r7, #-24]
		buf[0] = b0;	    buf[1] = b1;
 8002c54:	e947 5808 	strd	r5, r8, [r7, #-32]
 8002c58:	fb80 5101 	smull	r5, r1, r0, r1
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 8002c5c:	1b95      	subs	r5, r2, r6
		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 8002c5e:	0049      	lsls	r1, r1, #1
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 8002c60:	4432      	add	r2, r6
 8002c62:	fb80 6505 	smull	r6, r5, r0, r5
 8002c66:	006d      	lsls	r5, r5, #1
		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 8002c68:	4423      	add	r3, r4
 8002c6a:	f10a 0a18 	add.w	sl, sl, #24
		b6 += b7;
 8002c6e:	442a      	add	r2, r5
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 8002c70:	194c      	adds	r4, r1, r5
		buf[6] = b5 + b6;	buf[7] = b7;
 8002c72:	f847 5c04 	str.w	r5, [r7, #-4]
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 8002c76:	4413      	add	r3, r2
		buf[6] = b5 + b6;	buf[7] = b7;
 8002c78:	440a      	add	r2, r1
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 8002c7a:	e947 3404 	strd	r3, r4, [r7, #-16]
		buf[6] = b5 + b6;	buf[7] = b7;
 8002c7e:	f847 2c08 	str.w	r2, [r7, #-8]
 8002c82:	3720      	adds	r7, #32
	for (i = 4; i > 0; i--) {
 8002c84:	9b02      	ldr	r3, [sp, #8]
 8002c86:	429f      	cmp	r7, r3
 8002c88:	d185      	bne.n	8002b96 <xmp3fixpt_FDCT32+0x22e>
 8002c8a:	9805      	ldr	r0, [sp, #20]
		buf += 8;
	}
	buf -= 32;	/* reset */

	/* sample 0 - always delayed one block */
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 8002c8c:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8002c90:	1a53      	subs	r3, r2, r1
 8002c92:	0094      	lsls	r4, r2, #2
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c9c:	009a      	lsls	r2, r3, #2
 8002c9e:	2900      	cmp	r1, #0
 8002ca0:	f000 8310 	beq.w	80032c4 <xmp3fixpt_FDCT32+0x95c>
 8002ca4:	9d01      	ldr	r5, [sp, #4]
 8002ca6:	f504 5488 	add.w	r4, r4, #4352	; 0x1100
	s = buf[ 0];				d[0] = d[8] = s;
 8002caa:	6801      	ldr	r1, [r0, #0]
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 8002cac:	2700      	movs	r7, #0
 8002cae:	eb05 0e02 	add.w	lr, r5, r2
 8002cb2:	462e      	mov	r6, r5
	s = buf[ 0];				d[0] = d[8] = s;
 8002cb4:	f8ce 1020 	str.w	r1, [lr, #32]
 8002cb8:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
 8002cbc:	e034      	b.n	8002d28 <xmp3fixpt_FDCT32+0x3c0>
 8002cbe:	bf00      	nop
 8002cc0:	4013c251 	.word	0x4013c251
 8002cc4:	518522fb 	.word	0x518522fb
 8002cc8:	404f4672 	.word	0x404f4672
 8002ccc:	40b345bd 	.word	0x40b345bd
 8002cd0:	6d0b20cf 	.word	0x6d0b20cf
 8002cd4:	42e13c10 	.word	0x42e13c10
 8002cd8:	41fa2d6d 	.word	0x41fa2d6d
 8002cdc:	41d95790 	.word	0x41d95790
 8002ce0:	48919f44 	.word	0x48919f44
 8002ce4:	43f93421 	.word	0x43f93421
 8002ce8:	5efc8d96 	.word	0x5efc8d96
 8002cec:	52cb0e63 	.word	0x52cb0e63
 8002cf0:	46cc1bc4 	.word	0x46cc1bc4
 8002cf4:	4ad81a97 	.word	0x4ad81a97
 8002cf8:	64e2402e 	.word	0x64e2402e
 8002cfc:	4a9d9cf0 	.word	0x4a9d9cf0
 8002d00:	7c7d1db3 	.word	0x7c7d1db3
 8002d04:	43e224a9 	.word	0x43e224a9
 8002d08:	4fae3711 	.word	0x4fae3711
 8002d0c:	6b6fcf26 	.word	0x6b6fcf26
 8002d10:	6e3c92c1 	.word	0x6e3c92c1
 8002d14:	56601ea7 	.word	0x56601ea7
 8002d18:	5f4cf6eb 	.word	0x5f4cf6eb
 8002d1c:	519e4e04 	.word	0x519e4e04
 8002d20:	5a82799a 	.word	0x5a82799a
 8002d24:	08020a1c 	.word	0x08020a1c
    
	/* samples 16 to 31 */
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 8002d28:	4633      	mov	r3, r6

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 8002d2a:	6845      	ldr	r5, [r0, #4]
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
	s = buf[15];				d[0] = d[8] = s;	d += 64;
	s = tmp;					d[0] = d[8] = s;

	/* samples 16 to 1 (sample 16 used again) */
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 8002d2c:	f5a2 617c 	sub.w	r1, r2, #4032	; 0xfc0
	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 8002d30:	4632      	mov	r2, r6
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 8002d32:	4423      	add	r3, r4
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 8002d34:	4439      	add	r1, r7
	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 8002d36:	621d      	str	r5, [r3, #32]
 8002d38:	5135      	str	r5, [r6, r4]
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 8002d3a:	440a      	add	r2, r1
	tmp = buf[25] + buf[29];
 8002d3c:	6f47      	ldr	r7, [r0, #116]	; 0x74
 8002d3e:	6e44      	ldr	r4, [r0, #100]	; 0x64
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 8002d40:	6c45      	ldr	r5, [r0, #68]	; 0x44
	tmp = buf[25] + buf[29];
 8002d42:	443c      	add	r4, r7
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 8002d44:	4425      	add	r5, r4
 8002d46:	f8c3 5120 	str.w	r5, [r3, #288]	; 0x120
 8002d4a:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	s = buf[ 9] + buf[13];		d[0] = d[8] = s;	d += 64;
 8002d4e:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8002d50:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002d52:	4435      	add	r5, r6
 8002d54:	f8c3 5220 	str.w	r5, [r3, #544]	; 0x220
 8002d58:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 8002d5c:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8002d5e:	442c      	add	r4, r5
 8002d60:	f8c3 4320 	str.w	r4, [r3, #800]	; 0x320
 8002d64:	f8c3 4300 	str.w	r4, [r3, #768]	; 0x300
	tmp = buf[29] + buf[27];
 8002d68:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8002d6a:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	s = buf[ 5];				d[0] = d[8] = s;	d += 64;
 8002d6c:	6947      	ldr	r7, [r0, #20]
	tmp = buf[29] + buf[27];
 8002d6e:	442c      	add	r4, r5
	s = buf[ 5];				d[0] = d[8] = s;	d += 64;
 8002d70:	f8c3 7420 	str.w	r7, [r3, #1056]	; 0x420
 8002d74:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 8002d78:	6d47      	ldr	r7, [r0, #84]	; 0x54
 8002d7a:	4427      	add	r7, r4
 8002d7c:	f8c3 7520 	str.w	r7, [r3, #1312]	; 0x520
 8002d80:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500
	s = buf[13] + buf[11];		d[0] = d[8] = s;	d += 64;
 8002d84:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8002d86:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8002d88:	443d      	add	r5, r7
 8002d8a:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
 8002d8e:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 8002d92:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 8002d94:	443c      	add	r4, r7
 8002d96:	f8c3 4720 	str.w	r4, [r3, #1824]	; 0x720
 8002d9a:	f8c3 4700 	str.w	r4, [r3, #1792]	; 0x700
	tmp = buf[27] + buf[31];
 8002d9e:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8002da0:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
	s = buf[ 3];				d[0] = d[8] = s;	d += 64;
 8002da2:	68c7      	ldr	r7, [r0, #12]
	tmp = buf[27] + buf[31];
 8002da4:	442c      	add	r4, r5
	s = buf[ 3];				d[0] = d[8] = s;	d += 64;
 8002da6:	f8c3 7820 	str.w	r7, [r3, #2080]	; 0x820
 8002daa:	f8c3 7800 	str.w	r7, [r3, #2048]	; 0x800
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 8002dae:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 8002db0:	4427      	add	r7, r4
 8002db2:	f8c3 7920 	str.w	r7, [r3, #2336]	; 0x920
 8002db6:	f8c3 7900 	str.w	r7, [r3, #2304]	; 0x900
	s = buf[11] + buf[15];		d[0] = d[8] = s;	d += 64;
 8002dba:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8002dbc:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8002dbe:	443d      	add	r5, r7
 8002dc0:	f8c3 5a20 	str.w	r5, [r3, #2592]	; 0xa20
 8002dc4:	f8c3 5a00 	str.w	r5, [r3, #2560]	; 0xa00
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 8002dc8:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
 8002dca:	443c      	add	r4, r7
 8002dcc:	f8c3 4b20 	str.w	r4, [r3, #2848]	; 0xb20
 8002dd0:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
	s = buf[ 7];				d[0] = d[8] = s;	d += 64;
 8002dd4:	69c4      	ldr	r4, [r0, #28]
	tmp = buf[31];
 8002dd6:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
	s = buf[ 7];				d[0] = d[8] = s;	d += 64;
 8002dd8:	f8c3 4c20 	str.w	r4, [r3, #3104]	; 0xc20
 8002ddc:	f8c3 4c00 	str.w	r4, [r3, #3072]	; 0xc00
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 8002de0:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8002de2:	442c      	add	r4, r5
 8002de4:	f8c3 4d20 	str.w	r4, [r3, #3360]	; 0xd20
 8002de8:	f8c3 4d00 	str.w	r4, [r3, #3328]	; 0xd00
	s = buf[15];				d[0] = d[8] = s;	d += 64;
 8002dec:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	s = tmp;					d[0] = d[8] = s;
 8002dee:	f8c3 5f20 	str.w	r5, [r3, #3872]	; 0xf20
 8002df2:	f8c3 5f00 	str.w	r5, [r3, #3840]	; 0xf00
	s = buf[15];				d[0] = d[8] = s;	d += 64;
 8002df6:	f8c3 4e20 	str.w	r4, [r3, #3616]	; 0xe20
 8002dfa:	f8c3 4e00 	str.w	r4, [r3, #3584]	; 0xe00

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 8002dfe:	9d01      	ldr	r5, [sp, #4]
 8002e00:	6844      	ldr	r4, [r0, #4]
 8002e02:	6214      	str	r4, [r2, #32]
 8002e04:	506c      	str	r4, [r5, r1]

	tmp = buf[30] + buf[25];
 8002e06:	6e47      	ldr	r7, [r0, #100]	; 0x64
 8002e08:	6f84      	ldr	r4, [r0, #120]	; 0x78
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 8002e0a:	6c45      	ldr	r5, [r0, #68]	; 0x44
	tmp = buf[30] + buf[25];
 8002e0c:	443c      	add	r4, r7
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 8002e0e:	4425      	add	r5, r4
 8002e10:	f8c2 5120 	str.w	r5, [r2, #288]	; 0x120
 8002e14:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
	s = buf[14] + buf[ 9];		d[0] = d[8] = s;	d += 64;
 8002e18:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002e1a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8002e1c:	4435      	add	r5, r6
 8002e1e:	f8c2 5220 	str.w	r5, [r2, #544]	; 0x220
 8002e22:	f8c2 5200 	str.w	r5, [r2, #512]	; 0x200
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 8002e26:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8002e28:	442c      	add	r4, r5
 8002e2a:	f8c2 4320 	str.w	r4, [r2, #800]	; 0x320
 8002e2e:	f8c2 4300 	str.w	r4, [r2, #768]	; 0x300
	s = buf[ 6];				d[0] = d[8] = s;	d += 64;
 8002e32:	6984      	ldr	r4, [r0, #24]
 8002e34:	f8c2 4420 	str.w	r4, [r2, #1056]	; 0x420
 8002e38:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400

	tmp = buf[26] + buf[30];
 8002e3c:	6f87      	ldr	r7, [r0, #120]	; 0x78
 8002e3e:	6e84      	ldr	r4, [r0, #104]	; 0x68
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 8002e40:	6d85      	ldr	r5, [r0, #88]	; 0x58
	tmp = buf[26] + buf[30];
 8002e42:	443c      	add	r4, r7
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 8002e44:	4425      	add	r5, r4
 8002e46:	f8c2 5520 	str.w	r5, [r2, #1312]	; 0x520
 8002e4a:	f8c2 5500 	str.w	r5, [r2, #1280]	; 0x500
	s = buf[10] + buf[14];		d[0] = d[8] = s;	d += 64;
 8002e4e:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8002e50:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8002e52:	4435      	add	r5, r6
 8002e54:	f8c2 5620 	str.w	r5, [r2, #1568]	; 0x620
 8002e58:	f8c2 5600 	str.w	r5, [r2, #1536]	; 0x600
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 8002e5c:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8002e5e:	442c      	add	r4, r5
 8002e60:	f8c2 4720 	str.w	r4, [r2, #1824]	; 0x720
 8002e64:	f8c2 4700 	str.w	r4, [r2, #1792]	; 0x700
	s = buf[ 2];				d[0] = d[8] = s;	d += 64;
 8002e68:	6884      	ldr	r4, [r0, #8]
 8002e6a:	f8c2 4820 	str.w	r4, [r2, #2080]	; 0x820
 8002e6e:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800

	tmp = buf[28] + buf[26];
 8002e72:	6e87      	ldr	r7, [r0, #104]	; 0x68
 8002e74:	6f04      	ldr	r4, [r0, #112]	; 0x70
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 8002e76:	6c85      	ldr	r5, [r0, #72]	; 0x48
	tmp = buf[28] + buf[26];
 8002e78:	443c      	add	r4, r7
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 8002e7a:	4425      	add	r5, r4
 8002e7c:	f8c2 5920 	str.w	r5, [r2, #2336]	; 0x920
 8002e80:	f8c2 5900 	str.w	r5, [r2, #2304]	; 0x900
	s = buf[12] + buf[10];		d[0] = d[8] = s;	d += 64;
 8002e84:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8002e86:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8002e88:	4435      	add	r5, r6
 8002e8a:	f8c2 5a20 	str.w	r5, [r2, #2592]	; 0xa20
 8002e8e:	f8c2 5a00 	str.w	r5, [r2, #2560]	; 0xa00
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 8002e92:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8002e94:	442c      	add	r4, r5
 8002e96:	f8c2 4b20 	str.w	r4, [r2, #2848]	; 0xb20
 8002e9a:	f8c2 4b00 	str.w	r4, [r2, #2816]	; 0xb00
	s = buf[ 4];				d[0] = d[8] = s;	d += 64;
 8002e9e:	6904      	ldr	r4, [r0, #16]
 8002ea0:	f8c2 4c20 	str.w	r4, [r2, #3104]	; 0xc20
 8002ea4:	f8c2 4c00 	str.w	r4, [r2, #3072]	; 0xc00

	tmp = buf[24] + buf[28];
 8002ea8:	6f07      	ldr	r7, [r0, #112]	; 0x70
 8002eaa:	6e04      	ldr	r4, [r0, #96]	; 0x60
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 8002eac:	6d05      	ldr	r5, [r0, #80]	; 0x50
	tmp = buf[24] + buf[28];
 8002eae:	443c      	add	r4, r7
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 8002eb0:	4425      	add	r5, r4
 8002eb2:	f8c2 5d20 	str.w	r5, [r2, #3360]	; 0xd20
 8002eb6:	f8c2 5d00 	str.w	r5, [r2, #3328]	; 0xd00
	s = buf[ 8] + buf[12];		d[0] = d[8] = s;	d += 64;
 8002eba:	6a05      	ldr	r5, [r0, #32]
 8002ebc:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8002ebe:	4435      	add	r5, r6
 8002ec0:	f8c2 5e20 	str.w	r5, [r2, #3616]	; 0xe20
 8002ec4:	f8c2 5e00 	str.w	r5, [r2, #3584]	; 0xe00
	s = buf[16] + tmp;			d[0] = d[8] = s;
 8002ec8:	6c07      	ldr	r7, [r0, #64]	; 0x40

	/* this is so rarely invoked that it's not worth making two versions of the output
	 *   shuffle code (one for no shift, one for clip + variable shift) like in IMDCT
	 * here we just load, clip, shift, and store on the rare instances that es != 0
	 */
	if (es) {
 8002eca:	9800      	ldr	r0, [sp, #0]
	s = buf[16] + tmp;			d[0] = d[8] = s;
 8002ecc:	443c      	add	r4, r7
 8002ece:	f8c2 4f20 	str.w	r4, [r2, #3872]	; 0xf20
 8002ed2:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
	if (es) {
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	f000 81f1 	beq.w	80032be <xmp3fixpt_FDCT32+0x956>
		d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);
 8002edc:	f1c0 001f 	rsb	r0, r0, #31
 8002ee0:	f8de 5000 	ldr.w	r5, [lr]
 8002ee4:	2401      	movs	r4, #1
 8002ee6:	9e00      	ldr	r6, [sp, #0]
 8002ee8:	fa45 fc00 	asr.w	ip, r5, r0
 8002eec:	17ef      	asrs	r7, r5, #31
 8002eee:	4084      	lsls	r4, r0
 8002ef0:	45bc      	cmp	ip, r7
 8002ef2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002ef6:	bf18      	it	ne
 8002ef8:	ea87 0504 	eorne.w	r5, r7, r4
 8002efc:	40b5      	lsls	r5, r6
 8002efe:	f8ce 5020 	str.w	r5, [lr, #32]
 8002f02:	f8ce 5000 	str.w	r5, [lr]
	
		d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
		for (i = 16; i <= 31; i++) {
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 8002f06:	681e      	ldr	r6, [r3, #0]
 8002f08:	fa46 f700 	asr.w	r7, r6, r0
 8002f0c:	17f5      	asrs	r5, r6, #31
 8002f0e:	42bd      	cmp	r5, r7
 8002f10:	9f00      	ldr	r7, [sp, #0]
 8002f12:	bf18      	it	ne
 8002f14:	ea85 0604 	eorne.w	r6, r5, r4
 8002f18:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
 8002f1c:	40be      	lsls	r6, r7
 8002f1e:	fa45 fc00 	asr.w	ip, r5, r0
 8002f22:	17ef      	asrs	r7, r5, #31
 8002f24:	621e      	str	r6, [r3, #32]
 8002f26:	4567      	cmp	r7, ip
 8002f28:	601e      	str	r6, [r3, #0]
 8002f2a:	f8d3 6200 	ldr.w	r6, [r3, #512]	; 0x200
 8002f2e:	bf18      	it	ne
 8002f30:	ea87 0504 	eorne.w	r5, r7, r4
 8002f34:	9f00      	ldr	r7, [sp, #0]
 8002f36:	fa46 fc00 	asr.w	ip, r6, r0
 8002f3a:	40bd      	lsls	r5, r7
 8002f3c:	17f7      	asrs	r7, r6, #31
 8002f3e:	4567      	cmp	r7, ip
 8002f40:	f8c3 5120 	str.w	r5, [r3, #288]	; 0x120
 8002f44:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
 8002f48:	bf18      	it	ne
 8002f4a:	ea84 0607 	eorne.w	r6, r4, r7
 8002f4e:	f8d3 5300 	ldr.w	r5, [r3, #768]	; 0x300
 8002f52:	9f00      	ldr	r7, [sp, #0]
 8002f54:	fa45 fc00 	asr.w	ip, r5, r0
 8002f58:	40be      	lsls	r6, r7
 8002f5a:	17ef      	asrs	r7, r5, #31
 8002f5c:	4567      	cmp	r7, ip
 8002f5e:	f8c3 6220 	str.w	r6, [r3, #544]	; 0x220
 8002f62:	f8c3 6200 	str.w	r6, [r3, #512]	; 0x200
 8002f66:	bf18      	it	ne
 8002f68:	ea84 0507 	eorne.w	r5, r4, r7
 8002f6c:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8002f70:	9f00      	ldr	r7, [sp, #0]
 8002f72:	fa46 fc00 	asr.w	ip, r6, r0
 8002f76:	40bd      	lsls	r5, r7
 8002f78:	17f7      	asrs	r7, r6, #31
 8002f7a:	4567      	cmp	r7, ip
 8002f7c:	f8c3 5320 	str.w	r5, [r3, #800]	; 0x320
 8002f80:	f8c3 5300 	str.w	r5, [r3, #768]	; 0x300
 8002f84:	bf18      	it	ne
 8002f86:	ea84 0607 	eorne.w	r6, r4, r7
 8002f8a:	f8d3 5500 	ldr.w	r5, [r3, #1280]	; 0x500
 8002f8e:	9f00      	ldr	r7, [sp, #0]
 8002f90:	fa45 fc00 	asr.w	ip, r5, r0
 8002f94:	40be      	lsls	r6, r7
 8002f96:	17ef      	asrs	r7, r5, #31
 8002f98:	4567      	cmp	r7, ip
 8002f9a:	f8c3 6420 	str.w	r6, [r3, #1056]	; 0x420
 8002f9e:	f8c3 6400 	str.w	r6, [r3, #1024]	; 0x400
 8002fa2:	bf18      	it	ne
 8002fa4:	ea84 0507 	eorne.w	r5, r4, r7
 8002fa8:	f8d3 6600 	ldr.w	r6, [r3, #1536]	; 0x600
 8002fac:	9f00      	ldr	r7, [sp, #0]
 8002fae:	fa46 fc00 	asr.w	ip, r6, r0
 8002fb2:	40bd      	lsls	r5, r7
 8002fb4:	17f7      	asrs	r7, r6, #31
 8002fb6:	4567      	cmp	r7, ip
 8002fb8:	f8c3 5520 	str.w	r5, [r3, #1312]	; 0x520
 8002fbc:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
 8002fc0:	bf18      	it	ne
 8002fc2:	ea84 0607 	eorne.w	r6, r4, r7
 8002fc6:	f8d3 5700 	ldr.w	r5, [r3, #1792]	; 0x700
 8002fca:	9f00      	ldr	r7, [sp, #0]
 8002fcc:	fa45 fc00 	asr.w	ip, r5, r0
 8002fd0:	40be      	lsls	r6, r7
 8002fd2:	17ef      	asrs	r7, r5, #31
 8002fd4:	4567      	cmp	r7, ip
 8002fd6:	f8c3 6620 	str.w	r6, [r3, #1568]	; 0x620
 8002fda:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 8002fde:	bf18      	it	ne
 8002fe0:	ea84 0507 	eorne.w	r5, r4, r7
 8002fe4:	f8d3 6800 	ldr.w	r6, [r3, #2048]	; 0x800
 8002fe8:	9f00      	ldr	r7, [sp, #0]
 8002fea:	fa46 fc00 	asr.w	ip, r6, r0
 8002fee:	40bd      	lsls	r5, r7
 8002ff0:	17f7      	asrs	r7, r6, #31
 8002ff2:	4567      	cmp	r7, ip
 8002ff4:	f8c3 5720 	str.w	r5, [r3, #1824]	; 0x720
 8002ff8:	f8c3 5700 	str.w	r5, [r3, #1792]	; 0x700
 8002ffc:	bf18      	it	ne
 8002ffe:	ea84 0607 	eorne.w	r6, r4, r7
 8003002:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 8003006:	9f00      	ldr	r7, [sp, #0]
 8003008:	fa45 fc00 	asr.w	ip, r5, r0
 800300c:	40be      	lsls	r6, r7
 800300e:	17ef      	asrs	r7, r5, #31
 8003010:	4567      	cmp	r7, ip
 8003012:	f8c3 6820 	str.w	r6, [r3, #2080]	; 0x820
 8003016:	f8c3 6800 	str.w	r6, [r3, #2048]	; 0x800
 800301a:	bf18      	it	ne
 800301c:	ea84 0507 	eorne.w	r5, r4, r7
 8003020:	f8d3 6a00 	ldr.w	r6, [r3, #2560]	; 0xa00
 8003024:	9f00      	ldr	r7, [sp, #0]
 8003026:	fa46 fc00 	asr.w	ip, r6, r0
 800302a:	40bd      	lsls	r5, r7
 800302c:	17f7      	asrs	r7, r6, #31
 800302e:	4567      	cmp	r7, ip
 8003030:	f8c3 5920 	str.w	r5, [r3, #2336]	; 0x920
 8003034:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
 8003038:	bf18      	it	ne
 800303a:	ea84 0607 	eorne.w	r6, r4, r7
 800303e:	f8d3 5b00 	ldr.w	r5, [r3, #2816]	; 0xb00
 8003042:	9f00      	ldr	r7, [sp, #0]
 8003044:	fa45 fc00 	asr.w	ip, r5, r0
 8003048:	40be      	lsls	r6, r7
 800304a:	17ef      	asrs	r7, r5, #31
 800304c:	4567      	cmp	r7, ip
 800304e:	f8c3 6a20 	str.w	r6, [r3, #2592]	; 0xa20
 8003052:	f8c3 6a00 	str.w	r6, [r3, #2560]	; 0xa00
 8003056:	bf18      	it	ne
 8003058:	ea84 0507 	eorne.w	r5, r4, r7
 800305c:	f8d3 6c00 	ldr.w	r6, [r3, #3072]	; 0xc00
 8003060:	9f00      	ldr	r7, [sp, #0]
 8003062:	fa46 fc00 	asr.w	ip, r6, r0
 8003066:	40bd      	lsls	r5, r7
 8003068:	17f7      	asrs	r7, r6, #31
 800306a:	4567      	cmp	r7, ip
 800306c:	f8c3 5b20 	str.w	r5, [r3, #2848]	; 0xb20
 8003070:	f8c3 5b00 	str.w	r5, [r3, #2816]	; 0xb00
 8003074:	bf18      	it	ne
 8003076:	ea84 0607 	eorne.w	r6, r4, r7
 800307a:	f8d3 5d00 	ldr.w	r5, [r3, #3328]	; 0xd00
 800307e:	9f00      	ldr	r7, [sp, #0]
 8003080:	fa45 fc00 	asr.w	ip, r5, r0
 8003084:	40be      	lsls	r6, r7
 8003086:	17ef      	asrs	r7, r5, #31
 8003088:	4567      	cmp	r7, ip
 800308a:	f8c3 6c20 	str.w	r6, [r3, #3104]	; 0xc20
 800308e:	f8c3 6c00 	str.w	r6, [r3, #3072]	; 0xc00
 8003092:	bf18      	it	ne
 8003094:	ea84 0507 	eorne.w	r5, r4, r7
 8003098:	f8d3 6e00 	ldr.w	r6, [r3, #3584]	; 0xe00
 800309c:	9f00      	ldr	r7, [sp, #0]
 800309e:	fa46 fc00 	asr.w	ip, r6, r0
 80030a2:	40bd      	lsls	r5, r7
 80030a4:	17f7      	asrs	r7, r6, #31
 80030a6:	4567      	cmp	r7, ip
 80030a8:	f8c3 5d20 	str.w	r5, [r3, #3360]	; 0xd20
 80030ac:	f8c3 5d00 	str.w	r5, [r3, #3328]	; 0xd00
 80030b0:	bf18      	it	ne
 80030b2:	ea84 0607 	eorne.w	r6, r4, r7
 80030b6:	f8d3 5f00 	ldr.w	r5, [r3, #3840]	; 0xf00
 80030ba:	9f00      	ldr	r7, [sp, #0]
 80030bc:	fa45 fc00 	asr.w	ip, r5, r0
 80030c0:	40be      	lsls	r6, r7
 80030c2:	17ef      	asrs	r7, r5, #31
 80030c4:	45bc      	cmp	ip, r7
 80030c6:	f8c3 6e20 	str.w	r6, [r3, #3616]	; 0xe20
 80030ca:	f8c3 6e00 	str.w	r6, [r3, #3584]	; 0xe00
 80030ce:	bf18      	it	ne
 80030d0:	ea87 0504 	eorne.w	r5, r7, r4
 80030d4:	9e00      	ldr	r6, [sp, #0]
 80030d6:	40b5      	lsls	r5, r6
 80030d8:	f8c3 5f20 	str.w	r5, [r3, #3872]	; 0xf20
 80030dc:	f8c3 5f00 	str.w	r5, [r3, #3840]	; 0xf00
		}

		d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		for (i = 15; i >= 0; i--) {
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 80030e0:	9b01      	ldr	r3, [sp, #4]
 80030e2:	585b      	ldr	r3, [r3, r1]
 80030e4:	fa43 f600 	asr.w	r6, r3, r0
 80030e8:	17dd      	asrs	r5, r3, #31
 80030ea:	42b5      	cmp	r5, r6
 80030ec:	bf18      	it	ne
 80030ee:	ea85 0304 	eorne.w	r3, r5, r4
 80030f2:	9d00      	ldr	r5, [sp, #0]
 80030f4:	40ab      	lsls	r3, r5
 80030f6:	9d01      	ldr	r5, [sp, #4]
 80030f8:	6213      	str	r3, [r2, #32]
 80030fa:	506b      	str	r3, [r5, r1]
 80030fc:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 8003100:	fa43 f500 	asr.w	r5, r3, r0
 8003104:	17d9      	asrs	r1, r3, #31
 8003106:	428d      	cmp	r5, r1
 8003108:	9d00      	ldr	r5, [sp, #0]
 800310a:	bf18      	it	ne
 800310c:	ea81 0304 	eorne.w	r3, r1, r4
 8003110:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8003114:	40ab      	lsls	r3, r5
 8003116:	fa41 f600 	asr.w	r6, r1, r0
 800311a:	17cd      	asrs	r5, r1, #31
 800311c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
 8003120:	42b5      	cmp	r5, r6
 8003122:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8003126:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
 800312a:	bf18      	it	ne
 800312c:	ea85 0104 	eorne.w	r1, r5, r4
 8003130:	9d00      	ldr	r5, [sp, #0]
 8003132:	fa43 f600 	asr.w	r6, r3, r0
 8003136:	40a9      	lsls	r1, r5
 8003138:	17dd      	asrs	r5, r3, #31
 800313a:	42ae      	cmp	r6, r5
 800313c:	f8c2 1220 	str.w	r1, [r2, #544]	; 0x220
 8003140:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
 8003144:	bf18      	it	ne
 8003146:	ea85 0304 	eorne.w	r3, r5, r4
 800314a:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 800314e:	9d00      	ldr	r5, [sp, #0]
 8003150:	fa41 f600 	asr.w	r6, r1, r0
 8003154:	40ab      	lsls	r3, r5
 8003156:	17cd      	asrs	r5, r1, #31
 8003158:	42ae      	cmp	r6, r5
 800315a:	f8c2 3320 	str.w	r3, [r2, #800]	; 0x320
 800315e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
 8003162:	bf18      	it	ne
 8003164:	ea85 0104 	eorne.w	r1, r5, r4
 8003168:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
 800316c:	9d00      	ldr	r5, [sp, #0]
 800316e:	fa43 f600 	asr.w	r6, r3, r0
 8003172:	40a9      	lsls	r1, r5
 8003174:	17dd      	asrs	r5, r3, #31
 8003176:	42ae      	cmp	r6, r5
 8003178:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 800317c:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
 8003180:	bf18      	it	ne
 8003182:	ea85 0304 	eorne.w	r3, r5, r4
 8003186:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
 800318a:	9d00      	ldr	r5, [sp, #0]
 800318c:	fa41 f600 	asr.w	r6, r1, r0
 8003190:	40ab      	lsls	r3, r5
 8003192:	17cd      	asrs	r5, r1, #31
 8003194:	42ae      	cmp	r6, r5
 8003196:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
 800319a:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
 800319e:	bf18      	it	ne
 80031a0:	ea85 0104 	eorne.w	r1, r5, r4
 80031a4:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
 80031a8:	9d00      	ldr	r5, [sp, #0]
 80031aa:	fa43 f600 	asr.w	r6, r3, r0
 80031ae:	40a9      	lsls	r1, r5
 80031b0:	17dd      	asrs	r5, r3, #31
 80031b2:	42ae      	cmp	r6, r5
 80031b4:	f8c2 1620 	str.w	r1, [r2, #1568]	; 0x620
 80031b8:	f8c2 1600 	str.w	r1, [r2, #1536]	; 0x600
 80031bc:	bf18      	it	ne
 80031be:	ea85 0304 	eorne.w	r3, r5, r4
 80031c2:	f8d2 1800 	ldr.w	r1, [r2, #2048]	; 0x800
 80031c6:	9d00      	ldr	r5, [sp, #0]
 80031c8:	fa41 f600 	asr.w	r6, r1, r0
 80031cc:	40ab      	lsls	r3, r5
 80031ce:	17cd      	asrs	r5, r1, #31
 80031d0:	42ae      	cmp	r6, r5
 80031d2:	f8c2 3720 	str.w	r3, [r2, #1824]	; 0x720
 80031d6:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
 80031da:	bf18      	it	ne
 80031dc:	ea85 0104 	eorne.w	r1, r5, r4
 80031e0:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 80031e4:	9d00      	ldr	r5, [sp, #0]
 80031e6:	fa43 f600 	asr.w	r6, r3, r0
 80031ea:	40a9      	lsls	r1, r5
 80031ec:	17dd      	asrs	r5, r3, #31
 80031ee:	42ae      	cmp	r6, r5
 80031f0:	f8c2 1820 	str.w	r1, [r2, #2080]	; 0x820
 80031f4:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
 80031f8:	bf18      	it	ne
 80031fa:	ea85 0304 	eorne.w	r3, r5, r4
 80031fe:	f8d2 1a00 	ldr.w	r1, [r2, #2560]	; 0xa00
 8003202:	9d00      	ldr	r5, [sp, #0]
 8003204:	fa41 f600 	asr.w	r6, r1, r0
 8003208:	40ab      	lsls	r3, r5
 800320a:	17cd      	asrs	r5, r1, #31
 800320c:	42ae      	cmp	r6, r5
 800320e:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
 8003212:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
 8003216:	bf18      	it	ne
 8003218:	ea85 0104 	eorne.w	r1, r5, r4
 800321c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8003220:	9d00      	ldr	r5, [sp, #0]
 8003222:	fa43 f600 	asr.w	r6, r3, r0
 8003226:	40a9      	lsls	r1, r5
 8003228:	17dd      	asrs	r5, r3, #31
 800322a:	42ae      	cmp	r6, r5
 800322c:	f8c2 1a20 	str.w	r1, [r2, #2592]	; 0xa20
 8003230:	f8c2 1a00 	str.w	r1, [r2, #2560]	; 0xa00
 8003234:	bf18      	it	ne
 8003236:	ea85 0304 	eorne.w	r3, r5, r4
 800323a:	f8d2 1c00 	ldr.w	r1, [r2, #3072]	; 0xc00
 800323e:	9d00      	ldr	r5, [sp, #0]
 8003240:	fa41 f600 	asr.w	r6, r1, r0
 8003244:	40ab      	lsls	r3, r5
 8003246:	17cd      	asrs	r5, r1, #31
 8003248:	42ae      	cmp	r6, r5
 800324a:	f8c2 3b20 	str.w	r3, [r2, #2848]	; 0xb20
 800324e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8003252:	bf18      	it	ne
 8003254:	ea85 0104 	eorne.w	r1, r5, r4
 8003258:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 800325c:	9d00      	ldr	r5, [sp, #0]
 800325e:	fa43 f600 	asr.w	r6, r3, r0
 8003262:	40a9      	lsls	r1, r5
 8003264:	17dd      	asrs	r5, r3, #31
 8003266:	42ae      	cmp	r6, r5
 8003268:	f8c2 1c20 	str.w	r1, [r2, #3104]	; 0xc20
 800326c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8003270:	bf18      	it	ne
 8003272:	ea85 0304 	eorne.w	r3, r5, r4
 8003276:	f8d2 1e00 	ldr.w	r1, [r2, #3584]	; 0xe00
 800327a:	9d00      	ldr	r5, [sp, #0]
 800327c:	fa41 f600 	asr.w	r6, r1, r0
 8003280:	40ab      	lsls	r3, r5
 8003282:	17cd      	asrs	r5, r1, #31
 8003284:	42ae      	cmp	r6, r5
 8003286:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
 800328a:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
 800328e:	bf18      	it	ne
 8003290:	ea85 0104 	eorne.w	r1, r5, r4
 8003294:	f8d2 3f00 	ldr.w	r3, [r2, #3840]	; 0xf00
 8003298:	9d00      	ldr	r5, [sp, #0]
 800329a:	fa43 f000 	asr.w	r0, r3, r0
 800329e:	40a9      	lsls	r1, r5
 80032a0:	17dd      	asrs	r5, r3, #31
 80032a2:	42a8      	cmp	r0, r5
 80032a4:	f8c2 1e20 	str.w	r1, [r2, #3616]	; 0xe20
 80032a8:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00
 80032ac:	bf18      	it	ne
 80032ae:	ea85 0304 	eorne.w	r3, r5, r4
 80032b2:	9900      	ldr	r1, [sp, #0]
 80032b4:	408b      	lsls	r3, r1
 80032b6:	f8c2 3f20 	str.w	r3, [r2, #3872]	; 0xf20
 80032ba:	f8c2 3f00 	str.w	r3, [r2, #3840]	; 0xf00
		}
	}
}
 80032be:	b007      	add	sp, #28
 80032c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 80032c4:	9d01      	ldr	r5, [sp, #4]
 80032c6:	f502 5388 	add.w	r3, r2, #4352	; 0x1100
	s = buf[ 0];				d[0] = d[8] = s;
 80032ca:	6801      	ldr	r1, [r0, #0]
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 80032cc:	f44f 5788 	mov.w	r7, #4352	; 0x1100
 80032d0:	eb05 0e03 	add.w	lr, r5, r3
 80032d4:	462e      	mov	r6, r5
	s = buf[ 0];				d[0] = d[8] = s;
 80032d6:	f8ce 1020 	str.w	r1, [lr, #32]
 80032da:	50e9      	str	r1, [r5, r3]
 80032dc:	e524      	b.n	8002d28 <xmp3fixpt_FDCT32+0x3c0>
	es = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	f7ff bb58 	b.w	8002996 <xmp3fixpt_FDCT32+0x2e>
 80032e6:	bf00      	nop

080032e8 <xmp3fixpt_Dequantize>:
	HuffmanInfo *hi;
	DequantInfo *di;
	CriticalBandInfo *cbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 80032e8:	2800      	cmp	r0, #0
 80032ea:	f000 817b 	beq.w	80035e4 <xmp3fixpt_Dequantize+0x2fc>
{
 80032ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 80032f2:	6807      	ldr	r7, [r0, #0]
{
 80032f4:	b091      	sub	sp, #68	; 0x44
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 80032f6:	2f00      	cmp	r7, #0
 80032f8:	f000 8171 	beq.w	80035de <xmp3fixpt_Dequantize+0x2f6>
 80032fc:	6843      	ldr	r3, [r0, #4]
 80032fe:	461d      	mov	r5, r3
 8003300:	9307      	str	r3, [sp, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 816b 	beq.w	80035de <xmp3fixpt_Dequantize+0x2f6>
 8003308:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800330c:	f1b9 0f00 	cmp.w	r9, #0
 8003310:	f000 8165 	beq.w	80035de <xmp3fixpt_Dequantize+0x2f6>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 8003314:	68c4      	ldr	r4, [r0, #12]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 8003316:	2c00      	cmp	r4, #0
 8003318:	f000 8161 	beq.w	80035de <xmp3fixpt_Dequantize+0x2f6>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 800331c:	f8d0 8010 	ldr.w	r8, [r0, #16]
 8003320:	f1b8 0f00 	cmp.w	r8, #0
 8003324:	f000 815b 	beq.w	80035de <xmp3fixpt_Dequantize+0x2f6>
	si = (SideInfo *)(mp3DecInfo->SideInfoPS);
	sfi = (ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS);
	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
	di = (DequantInfo *)mp3DecInfo->DequantInfoPS;
	cbi = di->cbi;
	mOut[0] = mOut[1] = 0;
 8003328:	2300      	movs	r3, #0

	/* dequantize all the samples in each channel */
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800332a:	f8d0 27bc 	ldr.w	r2, [r0, #1980]	; 0x7bc
 800332e:	460e      	mov	r6, r1
	cbi = di->cbi;
 8003330:	f508 7146 	add.w	r1, r8, #792	; 0x318
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8003334:	429a      	cmp	r2, r3
 8003336:	9008      	str	r0, [sp, #32]
	cbi = di->cbi;
 8003338:	9109      	str	r1, [sp, #36]	; 0x24
	mOut[0] = mOut[1] = 0;
 800333a:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800333e:	f340 8093 	ble.w	8003468 <xmp3fixpt_Dequantize+0x180>
 8003342:	eb06 0bc6 	add.w	fp, r6, r6, lsl #3
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh,
 8003346:	f504 5290 	add.w	r2, r4, #4608	; 0x1200
 800334a:	ebc6 1a46 	rsb	sl, r6, r6, lsl #5
 800334e:	9102      	str	r1, [sp, #8]
 8003350:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 8003354:	463b      	mov	r3, r7
 8003356:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800335a:	4641      	mov	r1, r8
 800335c:	f10b 0c28 	add.w	ip, fp, #40	; 0x28
 8003360:	920a      	str	r2, [sp, #40]	; 0x28
 8003362:	eb09 000a 	add.w	r0, r9, sl
 8003366:	44ac      	add	ip, r5
 8003368:	9001      	str	r0, [sp, #4]
 800336a:	4620      	mov	r0, r4
 800336c:	f8cd c000 	str.w	ip, [sp]
 8003370:	f000 fa30 	bl	80037d4 <xmp3fixpt_DequantChannel>
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8003374:	9a08      	ldr	r2, [sp, #32]
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh,
 8003376:	f241 2308 	movw	r3, #4616	; 0x1208
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800337a:	f8d2 27bc 	ldr.w	r2, [r2, #1980]	; 0x7bc
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh,
 800337e:	18e1      	adds	r1, r4, r3
 8003380:	50e0      	str	r0, [r4, r3]
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8003382:	2a01      	cmp	r2, #1
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh,
 8003384:	910b      	str	r1, [sp, #44]	; 0x2c
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8003386:	dd6f      	ble.n	8003468 <xmp3fixpt_Dequantize+0x180>
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh,
 8003388:	9d07      	ldr	r5, [sp, #28]
 800338a:	f10a 033e 	add.w	r3, sl, #62	; 0x3e
 800338e:	f10b 0170 	add.w	r1, fp, #112	; 0x70
 8003392:	f508 704c 	add.w	r0, r8, #816	; 0x330
 8003396:	444b      	add	r3, r9
 8003398:	f241 2204 	movw	r2, #4612	; 0x1204
 800339c:	4429      	add	r1, r5
 800339e:	9002      	str	r0, [sp, #8]
 80033a0:	4422      	add	r2, r4
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	9100      	str	r1, [sp, #0]
 80033a6:	463b      	mov	r3, r7
 80033a8:	4641      	mov	r1, r8
 80033aa:	f504 6010 	add.w	r0, r4, #2304	; 0x900
 80033ae:	f000 fa11 	bl	80037d4 <xmp3fixpt_DequantChannel>
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 80033b2:	9908      	ldr	r1, [sp, #32]
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh,
 80033b4:	f241 220c 	movw	r2, #4620	; 0x120c
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 80033b8:	f8d1 37bc 	ldr.w	r3, [r1, #1980]	; 0x7bc
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh,
 80033bc:	50a0      	str	r0, [r4, r2]
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 80033be:	2b02      	cmp	r3, #2
 80033c0:	dd52      	ble.n	8003468 <xmp3fixpt_Dequantize+0x180>
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh,
 80033c2:	9d07      	ldr	r5, [sp, #28]
 80033c4:	f10a 037c 	add.w	r3, sl, #124	; 0x7c
 80033c8:	f10b 01b8 	add.w	r1, fp, #184	; 0xb8
 80033cc:	f508 7c52 	add.w	ip, r8, #840	; 0x348
 80033d0:	444b      	add	r3, r9
 80033d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80033d4:	4429      	add	r1, r5
 80033d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80033d8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80033dc:	9100      	str	r1, [sp, #0]
 80033de:	463b      	mov	r3, r7
 80033e0:	4641      	mov	r1, r8
 80033e2:	f000 f9f7 	bl	80037d4 <xmp3fixpt_DequantChannel>
 80033e6:	f241 2310 	movw	r3, #4624	; 0x1210
 80033ea:	50e0      	str	r0, [r4, r3]
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 80033ec:	9b08      	ldr	r3, [sp, #32]
 80033ee:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	dd38      	ble.n	8003468 <xmp3fixpt_Dequantize+0x180>
 80033f6:	f50b 7b80 	add.w	fp, fp, #256	; 0x100
 80033fa:	f10a 03ba 	add.w	r3, sl, #186	; 0xba
 80033fe:	9d07      	ldr	r5, [sp, #28]
 8003400:	f241 2a14 	movw	sl, #4628	; 0x1214
 8003404:	444b      	add	r3, r9
 8003406:	f504 52d8 	add.w	r2, r4, #6912	; 0x1b00
 800340a:	eb05 010b 	add.w	r1, r5, fp
 800340e:	44a2      	add	sl, r4
 8003410:	f508 7058 	add.w	r0, r8, #864	; 0x360
 8003414:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8003418:	940c      	str	r4, [sp, #48]	; 0x30
 800341a:	46b9      	mov	r9, r7
 800341c:	960d      	str	r6, [sp, #52]	; 0x34
 800341e:	f04f 0b03 	mov.w	fp, #3
 8003422:	4614      	mov	r4, r2
 8003424:	461f      	mov	r7, r3
 8003426:	460e      	mov	r6, r1
 8003428:	9d08      	ldr	r5, [sp, #32]
 800342a:	900a      	str	r0, [sp, #40]	; 0x28
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh,
 800342c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800342e:	f1aa 0208 	sub.w	r2, sl, #8
 8003432:	9701      	str	r7, [sp, #4]
 8003434:	4620      	mov	r0, r4
 8003436:	9302      	str	r3, [sp, #8]
 8003438:	4641      	mov	r1, r8
 800343a:	464b      	mov	r3, r9
 800343c:	9600      	str	r6, [sp, #0]
 800343e:	f000 f9c9 	bl	80037d4 <xmp3fixpt_DequantChannel>
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8003442:	f10b 0b01 	add.w	fp, fp, #1
 8003446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003448:	3648      	adds	r6, #72	; 0x48
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh,
 800344a:	f84a 0b04 	str.w	r0, [sl], #4
 800344e:	373e      	adds	r7, #62	; 0x3e
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8003450:	f8d5 37bc 	ldr.w	r3, [r5, #1980]	; 0x7bc
 8003454:	3218      	adds	r2, #24
 8003456:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 800345a:	455b      	cmp	r3, fp
 800345c:	920a      	str	r2, [sp, #40]	; 0x28
 800345e:	dce5      	bgt.n	800342c <xmp3fixpt_Dequantize+0x144>
 8003460:	464f      	mov	r7, r9
 8003462:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8003464:	e9dd 940b 	ldrd	r9, r4, [sp, #44]	; 0x2c
	/* joint stereo processing assumes one guard bit in input samples
	 * it's extremely rare not to have at least one gb, so if this is the case
	 *   just make a pass over the data and clip to [-2^30+1, 2^30-1]
	 * in practice this may never happen
	 */
	if (fh->modeExt && (hi->gb[0] < 1 || hi->gb[1] < 1)) {
 8003468:	6a38      	ldr	r0, [r7, #32]
 800346a:	2800      	cmp	r0, #0
 800346c:	d067      	beq.n	800353e <xmp3fixpt_Dequantize+0x256>
 800346e:	f241 2308 	movw	r3, #4616	; 0x1208
 8003472:	58e3      	ldr	r3, [r4, r3]
 8003474:	2b00      	cmp	r3, #0
 8003476:	dd65      	ble.n	8003544 <xmp3fixpt_Dequantize+0x25c>
 8003478:	f241 230c 	movw	r3, #4620	; 0x120c
 800347c:	58e3      	ldr	r3, [r4, r3]
 800347e:	2b00      	cmp	r3, #0
 8003480:	dd60      	ble.n	8003544 <xmp3fixpt_Dequantize+0x25c>
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
		}
	}

	/* do mid-side stereo processing, if enabled */
	if (fh->modeExt >> 1) {
 8003482:	0842      	lsrs	r2, r0, #1
 8003484:	f000 0301 	and.w	r3, r0, #1
 8003488:	f000 80af 	beq.w	80035ea <xmp3fixpt_Dequantize+0x302>
		if (fh->modeExt & 0x01) {
 800348c:	b15b      	cbz	r3, 80034a6 <xmp3fixpt_Dequantize+0x1be>
			/* intensity stereo enabled - run mid-side up to start of right zero region */
			if (cbi[1].cbType == 0)
 800348e:	f8d8 2330 	ldr.w	r2, [r8, #816]	; 0x330
 8003492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003494:	2a00      	cmp	r2, #0
 8003496:	f040 8099 	bne.w	80035cc <xmp3fixpt_Dequantize+0x2e4>
				nSamps = fh->sfBand->l[cbi[1].cbEndL + 1];
 800349a:	f8d8 2344 	ldr.w	r2, [r8, #836]	; 0x344
 800349e:	3201      	adds	r2, #1
 80034a0:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 80034a4:	e008      	b.n	80034b8 <xmp3fixpt_Dequantize+0x1d0>
			else 
				nSamps = 3 * fh->sfBand->s[cbi[1].cbEndSMax + 1];
		} else {
			/* intensity stereo disabled - run mid-side on whole spectrum */
			nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 80034a6:	f241 2204 	movw	r2, #4612	; 0x1204
 80034aa:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 80034ae:	58a1      	ldr	r1, [r4, r2]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4299      	cmp	r1, r3
 80034b4:	bfb8      	it	lt
 80034b6:	4619      	movlt	r1, r3
		}
		MidSideProc(hi->huffDecBuf, nSamps, mOut);
 80034b8:	ad0e      	add	r5, sp, #56	; 0x38
 80034ba:	4620      	mov	r0, r4
 80034bc:	462a      	mov	r2, r5
 80034be:	f008 f96d 	bl	800b79c <xmp3fixpt_MidSideProc>
 80034c2:	6a38      	ldr	r0, [r7, #32]
	}

	/* do intensity stereo processing, if enabled */
	if (fh->modeExt & 0x01) {
 80034c4:	07c3      	lsls	r3, r0, #31
 80034c6:	d51e      	bpl.n	8003506 <xmp3fixpt_Dequantize+0x21e>
		nSamps = hi->nonZeroBound[0];
 80034c8:	f504 5290 	add.w	r2, r4, #4608	; 0x1200
 80034cc:	ebc6 1346 	rsb	r3, r6, r6, lsl #5
 80034d0:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
		if (fh->ver == MPEG1) {
 80034d4:	f897 c000 	ldrb.w	ip, [r7]
		nSamps = hi->nonZeroBound[0];
 80034d8:	6811      	ldr	r1, [r2, #0]
 80034da:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80034de:	9a07      	ldr	r2, [sp, #28]
 80034e0:	1040      	asrs	r0, r0, #1
 80034e2:	333e      	adds	r3, #62	; 0x3e
 80034e4:	eb02 1606 	add.w	r6, r2, r6, lsl #4
 80034e8:	f8d6 6088 	ldr.w	r6, [r6, #136]	; 0x88
		if (fh->ver == MPEG1) {
 80034ec:	f1bc 0f00 	cmp.w	ip, #0
 80034f0:	d15e      	bne.n	80035b0 <xmp3fixpt_Dequantize+0x2c8>
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
 80034f2:	9001      	str	r0, [sp, #4]
 80034f4:	463a      	mov	r2, r7
 80034f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034f8:	e9cd 6502 	strd	r6, r5, [sp, #8]
 80034fc:	9000      	str	r0, [sp, #0]
 80034fe:	4620      	mov	r0, r4
 8003500:	f008 f980 	bl	800b804 <xmp3fixpt_IntensityProcMPEG1>
 8003504:	6a38      	ldr	r0, [r7, #32]
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
		}
	}

	/* adjust guard bit count and nonZeroBound if we did any stereo processing */
	if (fh->modeExt) {
 8003506:	b1d0      	cbz	r0, 800353e <xmp3fixpt_Dequantize+0x256>
		hi->gb[0] = CLZ(mOut[0]) - 1;
		hi->gb[1] = CLZ(mOut[1]) - 1;
		nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 8003508:	f241 2104 	movw	r1, #4612	; 0x1204
 800350c:	f504 5590 	add.w	r5, r4, #4608	; 0x1200
		hi->gb[0] = CLZ(mOut[0]) - 1;
 8003510:	f241 2008 	movw	r0, #4616	; 0x1208
while (!(x & 0x80000000)) {
numZeros++;
x <
}*/

	__asm__ ("clz %0, %1" : "=r" (numZeros) : "r" (x) : "cc");
 8003514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 8003516:	5862      	ldr	r2, [r4, r1]
		hi->gb[1] = CLZ(mOut[1]) - 1;
 8003518:	f241 260c 	movw	r6, #4620	; 0x120c
		nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 800351c:	682f      	ldr	r7, [r5, #0]
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	42ba      	cmp	r2, r7
		hi->gb[0] = CLZ(mOut[0]) - 1;
 8003524:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
		nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 8003528:	bfb8      	it	lt
 800352a:	463a      	movlt	r2, r7
		hi->gb[0] = CLZ(mOut[0]) - 1;
 800352c:	5023      	str	r3, [r4, r0]
 800352e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		hi->nonZeroBound[0] = nSamps;
		hi->nonZeroBound[1] = nSamps;
	}

	/* output format Q(DQ_FRACBITS_OUT) */
	return 0;
 8003530:	2000      	movs	r0, #0
 8003532:	fab3 f383 	clz	r3, r3
		hi->gb[1] = CLZ(mOut[1]) - 1;
 8003536:	3b01      	subs	r3, #1
 8003538:	51a3      	str	r3, [r4, r6]
		hi->nonZeroBound[0] = nSamps;
 800353a:	602a      	str	r2, [r5, #0]
		hi->nonZeroBound[1] = nSamps;
 800353c:	5062      	str	r2, [r4, r1]
}
 800353e:	b011      	add	sp, #68	; 0x44
 8003540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 8003544:	f504 5390 	add.w	r3, r4, #4608	; 0x1200
 8003548:	6819      	ldr	r1, [r3, #0]
 800354a:	2900      	cmp	r1, #0
 800354c:	dd14      	ble.n	8003578 <xmp3fixpt_Dequantize+0x290>
 800354e:	1f23      	subs	r3, r4, #4
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 8003550:	4d27      	ldr	r5, [pc, #156]	; (80035f0 <xmp3fixpt_Dequantize+0x308>)
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
 8003552:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 8003556:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800355a:	e002      	b.n	8003562 <xmp3fixpt_Dequantize+0x27a>
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800355c:	428b      	cmp	r3, r1
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 800355e:	601d      	str	r5, [r3, #0]
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 8003560:	d00a      	beq.n	8003578 <xmp3fixpt_Dequantize+0x290>
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 8003562:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8003566:	42aa      	cmp	r2, r5
 8003568:	dbf8      	blt.n	800355c <xmp3fixpt_Dequantize+0x274>
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
 800356a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800356e:	bfa8      	it	ge
 8003570:	f8c3 c000 	strge.w	ip, [r3]
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 8003574:	428b      	cmp	r3, r1
 8003576:	d1f4      	bne.n	8003562 <xmp3fixpt_Dequantize+0x27a>
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 8003578:	f241 2304 	movw	r3, #4612	; 0x1204
 800357c:	58e1      	ldr	r1, [r4, r3]
 800357e:	2900      	cmp	r1, #0
 8003580:	f77f af7f 	ble.w	8003482 <xmp3fixpt_Dequantize+0x19a>
 8003584:	f604 03fc 	addw	r3, r4, #2300	; 0x8fc
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 8003588:	4d19      	ldr	r5, [pc, #100]	; (80035f0 <xmp3fixpt_Dequantize+0x308>)
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
 800358a:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 800358e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003592:	e003      	b.n	800359c <xmp3fixpt_Dequantize+0x2b4>
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 8003594:	601d      	str	r5, [r3, #0]
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 8003596:	4299      	cmp	r1, r3
 8003598:	f43f af73 	beq.w	8003482 <xmp3fixpt_Dequantize+0x19a>
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 800359c:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80035a0:	42aa      	cmp	r2, r5
 80035a2:	dbf7      	blt.n	8003594 <xmp3fixpt_Dequantize+0x2ac>
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
 80035a4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80035a8:	bfa8      	it	ge
 80035aa:	f8c3 c000 	strge.w	ip, [r3]
 80035ae:	e7f2      	b.n	8003596 <xmp3fixpt_Dequantize+0x2ae>
			IntensityProcMPEG2(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, &sfi->sfjs,
 80035b0:	f109 02f8 	add.w	r2, r9, #248	; 0xf8
 80035b4:	e9cd 2001 	strd	r2, r0, [sp, #4]
 80035b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035ba:	463a      	mov	r2, r7
 80035bc:	9000      	str	r0, [sp, #0]
 80035be:	4620      	mov	r0, r4
 80035c0:	e9cd 6503 	strd	r6, r5, [sp, #12]
 80035c4:	f008 faa4 	bl	800bb10 <xmp3fixpt_IntensityProcMPEG2>
 80035c8:	6a38      	ldr	r0, [r7, #32]
 80035ca:	e79c      	b.n	8003506 <xmp3fixpt_Dequantize+0x21e>
				nSamps = 3 * fh->sfBand->s[cbi[1].cbEndSMax + 1];
 80035cc:	f8d8 2340 	ldr.w	r2, [r8, #832]	; 0x340
 80035d0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80035d4:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
 80035d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80035dc:	e76c      	b.n	80034b8 <xmp3fixpt_Dequantize+0x1d0>
		return -1;
 80035de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035e2:	e7ac      	b.n	800353e <xmp3fixpt_Dequantize+0x256>
 80035e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80035e8:	4770      	bx	lr
 80035ea:	2001      	movs	r0, #1
 80035ec:	ad0e      	add	r5, sp, #56	; 0x38
 80035ee:	e76b      	b.n	80034c8 <xmp3fixpt_Dequantize+0x1e0>
 80035f0:	c0000001 	.word	0xc0000001

080035f4 <DequantBlock>:
	int mask = 0;
	const int *tab16, *coef;

	tab16 = pow43_14[scale & 0x3];
	scalef = pow14[scale & 0x3];
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 80035f4:	ea4f 0ca3 	mov.w	ip, r3, asr #2
	tab16 = pow43_14[scale & 0x3];
 80035f8:	f003 0303 	and.w	r3, r3, #3
{
 80035fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* cache first 4 values */
	shift = MIN(scalei + 3, 31);
 8003600:	4667      	mov	r7, ip
	tab16 = pow43_14[scale & 0x3];
 8003602:	4e64      	ldr	r6, [pc, #400]	; (8003794 <DequantBlock+0x1a0>)
	scalef = pow14[scale & 0x3];
 8003604:	4d64      	ldr	r5, [pc, #400]	; (8003798 <DequantBlock+0x1a4>)
{
 8003606:	b08b      	sub	sp, #44	; 0x2c
	shift = MIN(scalei + 3, 31);
 8003608:	2f1c      	cmp	r7, #28
	tab16 = pow43_14[scale & 0x3];
 800360a:	eb06 1883 	add.w	r8, r6, r3, lsl #6
	scalef = pow14[scale & 0x3];
 800360e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
	shift = MAX(shift, 0);
	tab4[0] = 0;
 8003612:	f04f 0400 	mov.w	r4, #0
	shift = MIN(scalei + 3, 31);
 8003616:	bfa8      	it	ge
 8003618:	271c      	movge	r7, #28
 800361a:	eb00 0e82 	add.w	lr, r0, r2, lsl #2
	scalef = pow14[scale & 0x3];
 800361e:	9301      	str	r3, [sp, #4]
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 8003620:	f1bc 0f1f 	cmp.w	ip, #31
	shift = MIN(scalei + 3, 31);
 8003624:	f107 0703 	add.w	r7, r7, #3
	tab4[1] = tab16[1] >> shift;
	tab4[2] = tab16[2] >> shift;
	tab4[3] = tab16[3] >> shift;
 8003628:	f8d8 300c 	ldr.w	r3, [r8, #12]
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800362c:	46e3      	mov	fp, ip
	int mask = 0;
 800362e:	4625      	mov	r5, r4
	shift = MAX(shift, 0);
 8003630:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 8003634:	bfa8      	it	ge
 8003636:	f04f 0b1f 	movge.w	fp, #31
	tab4[0] = 0;
 800363a:	9406      	str	r4, [sp, #24]
	tab4[3] = tab16[3] >> shift;
 800363c:	413b      	asrs	r3, r7
	tab4[2] = tab16[2] >> shift;
 800363e:	e9d8 6201 	ldrd	r6, r2, [r8, #4]
	tab4[3] = tab16[3] >> shift;
 8003642:	9309      	str	r3, [sp, #36]	; 0x24
	tab4[1] = tab16[1] >> shift;
 8003644:	413e      	asrs	r6, r7
	tab4[2] = tab16[2] >> shift;
 8003646:	413a      	asrs	r2, r7
 8003648:	e9cd 6207 	strd	r6, r2, [sp, #28]

	do {

		sx = *inbuf++;
 800364c:	f850 3b04 	ldr.w	r3, [r0], #4
		x = sx & 0x7fffffff;	/* sx = sign|mag */
 8003650:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000

		if (x < 4) {
 8003654:	2c03      	cmp	r4, #3
 8003656:	dc10      	bgt.n	800367a <DequantBlock+0x86>

			y = tab4[x];
 8003658:	aa0a      	add	r2, sp, #40	; 0x28
 800365a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800365e:	f854 2c10 	ldr.w	r2, [r4, #-16]
			}
		}

		/* sign and store */
		mask |= y;
		*outbuf++ = (sx < 0) ? -y : y;
 8003662:	2b00      	cmp	r3, #0
		mask |= y;
 8003664:	ea45 0502 	orr.w	r5, r5, r2
		*outbuf++ = (sx < 0) ? -y : y;
 8003668:	db14      	blt.n	8003694 <DequantBlock+0xa0>

	} while (--num);
 800366a:	4570      	cmp	r0, lr
		*outbuf++ = (sx < 0) ? -y : y;
 800366c:	f841 2b04 	str.w	r2, [r1], #4
	} while (--num);
 8003670:	d1ec      	bne.n	800364c <DequantBlock+0x58>

	return mask;
}
 8003672:	4628      	mov	r0, r5
 8003674:	b00b      	add	sp, #44	; 0x2c
 8003676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (x < 16) {
 800367a:	2c0f      	cmp	r4, #15
 800367c:	dc13      	bgt.n	80036a6 <DequantBlock+0xb2>
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 800367e:	f1bc 0f00 	cmp.w	ip, #0
			y = tab16[x];
 8003682:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 8003686:	db7c      	blt.n	8003782 <DequantBlock+0x18e>
 8003688:	fa42 f20b 	asr.w	r2, r2, fp
		*outbuf++ = (sx < 0) ? -y : y;
 800368c:	2b00      	cmp	r3, #0
		mask |= y;
 800368e:	ea45 0502 	orr.w	r5, r5, r2
		*outbuf++ = (sx < 0) ? -y : y;
 8003692:	daea      	bge.n	800366a <DequantBlock+0x76>
 8003694:	4252      	negs	r2, r2
	} while (--num);
 8003696:	4570      	cmp	r0, lr
		*outbuf++ = (sx < 0) ? -y : y;
 8003698:	f841 2b04 	str.w	r2, [r1], #4
	} while (--num);
 800369c:	d1d6      	bne.n	800364c <DequantBlock+0x58>
}
 800369e:	4628      	mov	r0, r5
 80036a0:	b00b      	add	sp, #44	; 0x2c
 80036a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (x < 64) {
 80036a6:	2c3f      	cmp	r4, #63	; 0x3f
 80036a8:	dc0e      	bgt.n	80036c8 <DequantBlock+0xd4>
				y = pow43[x-16];
 80036aa:	4e3c      	ldr	r6, [pc, #240]	; (800379c <DequantBlock+0x1a8>)
 80036ac:	3c10      	subs	r4, #16
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80036ae:	9a01      	ldr	r2, [sp, #4]
 80036b0:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 80036b4:	fb84 6202 	smull	r6, r2, r4, r2
 80036b8:	4614      	mov	r4, r2
				shift = scalei - 3;
 80036ba:	f1ab 0203 	sub.w	r2, fp, #3
			if (shift < 0) {
 80036be:	2a00      	cmp	r2, #0
 80036c0:	db54      	blt.n	800376c <DequantBlock+0x178>
				y >>= shift;
 80036c2:	fa44 f202 	asr.w	r2, r4, r2
 80036c6:	e7cc      	b.n	8003662 <DequantBlock+0x6e>
				x <<= 17;
 80036c8:	0462      	lsls	r2, r4, #17
				if (x < 0x08000000)
 80036ca:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80036ce:	db5c      	blt.n	800378a <DequantBlock+0x196>
 80036d0:	2402      	movs	r4, #2
				shift = 0;
 80036d2:	f04f 0a00 	mov.w	sl, #0
				if (x < 0x20000000)
 80036d6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80036da:	da01      	bge.n	80036e0 <DequantBlock+0xec>
					x <<= 2, shift += 2;
 80036dc:	0092      	lsls	r2, r2, #2
 80036de:	46a2      	mov	sl, r4
				if (x < 0x40000000)
 80036e0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80036e4:	da02      	bge.n	80036ec <DequantBlock+0xf8>
					x <<= 1, shift += 1;
 80036e6:	0052      	lsls	r2, r2, #1
 80036e8:	f10a 0a01 	add.w	sl, sl, #1
				coef = (x < SQRTHALF) ? poly43lo : poly43hi;
 80036ec:	4c2c      	ldr	r4, [pc, #176]	; (80037a0 <DequantBlock+0x1ac>)
 80036ee:	4f2d      	ldr	r7, [pc, #180]	; (80037a4 <DequantBlock+0x1b0>)
 80036f0:	42a2      	cmp	r2, r4
 80036f2:	4e2d      	ldr	r6, [pc, #180]	; (80037a8 <DequantBlock+0x1b4>)
 80036f4:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80037d0 <DequantBlock+0x1dc>
 80036f8:	4614      	mov	r4, r2
 80036fa:	bfc8      	it	gt
 80036fc:	463e      	movgt	r6, r7
 80036fe:	4f2b      	ldr	r7, [pc, #172]	; (80037ac <DequantBlock+0x1b8>)
 8003700:	9602      	str	r6, [sp, #8]
 8003702:	4e2b      	ldr	r6, [pc, #172]	; (80037b0 <DequantBlock+0x1bc>)
 8003704:	bfc8      	it	gt
 8003706:	4637      	movgt	r7, r6
 8003708:	4e2a      	ldr	r6, [pc, #168]	; (80037b4 <DequantBlock+0x1c0>)
 800370a:	9703      	str	r7, [sp, #12]
 800370c:	4f2a      	ldr	r7, [pc, #168]	; (80037b8 <DequantBlock+0x1c4>)
 800370e:	bfc8      	it	gt
 8003710:	463e      	movgt	r6, r7
 8003712:	4f2a      	ldr	r7, [pc, #168]	; (80037bc <DequantBlock+0x1c8>)
 8003714:	9605      	str	r6, [sp, #20]
 8003716:	4e2a      	ldr	r6, [pc, #168]	; (80037c0 <DequantBlock+0x1cc>)
 8003718:	bfc8      	it	gt
 800371a:	464e      	movgt	r6, r9
 800371c:	9604      	str	r6, [sp, #16]
 800371e:	4e29      	ldr	r6, [pc, #164]	; (80037c4 <DequantBlock+0x1d0>)
 8003720:	bfc8      	it	gt
 8003722:	463e      	movgt	r6, r7
 8003724:	fb86 9404 	smull	r9, r4, r6, r4
				y = MULSHIFT32(y, x) + coef[1];
 8003728:	9e04      	ldr	r6, [sp, #16]
 800372a:	4434      	add	r4, r6
 800372c:	4616      	mov	r6, r2
 800372e:	fb84 7606 	smull	r7, r6, r4, r6
				y = MULSHIFT32(y, x) + coef[2];
 8003732:	9c05      	ldr	r4, [sp, #20]
 8003734:	4434      	add	r4, r6
 8003736:	46a1      	mov	r9, r4
 8003738:	4614      	mov	r4, r2
 800373a:	fb89 6404 	smull	r6, r4, r9, r4
				y = MULSHIFT32(y, x) + coef[3];
 800373e:	9f03      	ldr	r7, [sp, #12]
 8003740:	443c      	add	r4, r7
 8003742:	fb84 6202 	smull	r6, r2, r4, r2
				y = MULSHIFT32(y, pow2frac[shift]) << 3;
 8003746:	4c20      	ldr	r4, [pc, #128]	; (80037c8 <DequantBlock+0x1d4>)
				y = MULSHIFT32(y, x) + coef[4];
 8003748:	9e02      	ldr	r6, [sp, #8]
 800374a:	f854 402a 	ldr.w	r4, [r4, sl, lsl #2]
 800374e:	4432      	add	r2, r6
 8003750:	fb82 6404 	smull	r6, r4, r2, r4
				y = MULSHIFT32(y, pow2frac[shift]) << 3;
 8003754:	00e4      	lsls	r4, r4, #3
 8003756:	9a01      	ldr	r2, [sp, #4]
 8003758:	fb84 6202 	smull	r6, r2, r4, r2
				shift = scalei - pow2exp[shift];
 800375c:	4e1b      	ldr	r6, [pc, #108]	; (80037cc <DequantBlock+0x1d8>)
 800375e:	4614      	mov	r4, r2
 8003760:	f856 202a 	ldr.w	r2, [r6, sl, lsl #2]
 8003764:	ebab 0202 	sub.w	r2, fp, r2
			if (shift < 0) {
 8003768:	2a00      	cmp	r2, #0
 800376a:	daaa      	bge.n	80036c2 <DequantBlock+0xce>
				shift = -shift;
 800376c:	4256      	negs	r6, r2
				if (y > (0x7fffffff >> shift))
 800376e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003772:	fa42 f706 	asr.w	r7, r2, r6
 8003776:	42a7      	cmp	r7, r4
 8003778:	f6ff af73 	blt.w	8003662 <DequantBlock+0x6e>
					y <<= shift;
 800377c:	fa04 f206 	lsl.w	r2, r4, r6
 8003780:	e76f      	b.n	8003662 <DequantBlock+0x6e>
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 8003782:	f1cb 0400 	rsb	r4, fp, #0
 8003786:	40a2      	lsls	r2, r4
 8003788:	e76b      	b.n	8003662 <DequantBlock+0x6e>
					x <<= 4, shift += 4;
 800378a:	0562      	lsls	r2, r4, #21
 800378c:	f04f 0a04 	mov.w	sl, #4
 8003790:	2406      	movs	r4, #6
 8003792:	e7a0      	b.n	80036d6 <DequantBlock+0xe2>
 8003794:	08020bec 	.word	0x08020bec
 8003798:	08020adc 	.word	0x08020adc
 800379c:	08020b2c 	.word	0x08020b2c
 80037a0:	5a827999 	.word	0x5a827999
 80037a4:	fef577b4 	.word	0xfef577b4
 80037a8:	ff581859 	.word	0xff581859
 80037ac:	236c498d 	.word	0x236c498d
 80037b0:	27c2cef0 	.word	0x27c2cef0
 80037b4:	5957aa1b 	.word	0x5957aa1b
 80037b8:	46e9408b 	.word	0x46e9408b
 80037bc:	10852163 	.word	0x10852163
 80037c0:	b02e4828 	.word	0xb02e4828
 80037c4:	29a0bda9 	.word	0x29a0bda9
 80037c8:	08020b0c 	.word	0x08020b0c
 80037cc:	08020aec 	.word	0x08020aec
 80037d0:	d333f6a4 	.word	0xd333f6a4

080037d4 <xmp3fixpt_DequantChannel>:
 *
 * Notes:       dequantized samples in Q(DQ_FRACBITS_OUT) format 
 **************************************************************************************/
int DequantChannel(int *sampleBuf, int *workBuf, int *nonZeroBound, FrameHeader *fh, SideInfoSub *sis, 
					ScaleFactorInfoSub *sfis, CriticalBandInfo *cbi)
{
 80037d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037d8:	b093      	sub	sp, #76	; 0x4c
 80037da:	461c      	mov	r4, r3
 80037dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80037e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80037e2:	930c      	str	r3, [sp, #48]	; 0x30
 80037e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	int globalGain, gainI;
	int cbMax[3];
	ARRAY3 *buf;    /* short block reorder */
	
	/* set default start/end points for short/long blocks - will update with non-zero cb info */
	if (sis->blockType == 2) {
 80037e6:	6949      	ldr	r1, [r1, #20]
 80037e8:	3301      	adds	r3, #1
{
 80037ea:	9206      	str	r2, [sp, #24]
 80037ec:	981c      	ldr	r0, [sp, #112]	; 0x70
	if (sis->blockType == 2) {
 80037ee:	2902      	cmp	r1, #2
 80037f0:	6a22      	ldr	r2, [r4, #32]
 80037f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80037f6:	6880      	ldr	r0, [r0, #8]
 80037f8:	ea4f 0262 	mov.w	r2, r2, asr #1
 80037fc:	9302      	str	r3, [sp, #8]
{
 80037fe:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
	if (sis->blockType == 2) {
 8003802:	d060      	beq.n	80038c6 <xmp3fixpt_DequantChannel+0xf2>
		cbStartL = 0;
		cbEndL =   22;
		cbStartS = 13;
		cbEndS =   13;
	}
	cbMax[2] = cbMax[1] = cbMax[0] = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	930f      	str	r3, [sp, #60]	; 0x3c
	/* offset globalGain by -2 if midSide enabled, for 1/sqrt(2) used in MidSideProc()
	 *  (DequantBlock() does 0.25 * gainI so knocking it down by two is the same as 
	 *   dividing every sample by sqrt(2) = multiplying by 2^-.5)
	 */
	globalGain = sis->globalGain;
	if (fh->modeExt >> 1)
 8003808:	2a00      	cmp	r2, #0
 800380a:	d157      	bne.n	80038bc <xmp3fixpt_DequantChannel+0xe8>
		cbStartS = 13;
 800380c:	230d      	movs	r3, #13
		cbEndL =   22;
 800380e:	f04f 0816 	mov.w	r8, #22
		cbStartS = 13;
 8003812:	9304      	str	r3, [sp, #16]
		 globalGain -= 2;
	globalGain += IMDCT_SCALE;		/* scale everything by sqrt(2), for fast IMDCT36 */
 8003814:	3002      	adds	r0, #2
		cbEndL =   22;
 8003816:	f04f 0a00 	mov.w	sl, #0
 800381a:	f1c0 03d2 	rsb	r3, r0, #210	; 0xd2
 800381e:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8003822:	f8cd 800c 	str.w	r8, [sp, #12]
 8003826:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
 800382a:	4654      	mov	r4, sl
 800382c:	9301      	str	r3, [sp, #4]
 800382e:	46d3      	mov	fp, sl
 8003830:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003834:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 8003838:	e002      	b.n	8003840 <xmp3fixpt_DequantChannel+0x6c>

	/* long blocks */
	for (cb = 0; cb < cbEndL; cb++) {
 800383a:	9b03      	ldr	r3, [sp, #12]
 800383c:	429d      	cmp	r5, r3
 800383e:	da29      	bge.n	8003894 <xmp3fixpt_DequantChannel+0xc0>
 8003840:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34

		nonZero = 0;
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 8003844:	1c65      	adds	r5, r4, #1
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));

		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 8003846:	9b08      	ldr	r3, [sp, #32]
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 8003848:	488d      	ldr	r0, [pc, #564]	; (8003a80 <xmp3fixpt_DequantChannel+0x2ac>)
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800384a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800384e:	f8d9 703c 	ldr.w	r7, [r9, #60]	; 0x3c
 8003852:	eb02 0344 	add.w	r3, r2, r4, lsl #1
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 8003856:	f932 2014 	ldrsh.w	r2, [r2, r4, lsl #1]
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800385a:	eb00 0c05 	add.w	ip, r0, r5
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800385e:	4608      	mov	r0, r1
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 8003860:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003864:	1a9a      	subs	r2, r3, r2
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 8003866:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800386a:	b117      	cbz	r7, 8003872 <xmp3fixpt_DequantChannel+0x9e>
 800386c:	f81c cc01 	ldrb.w	ip, [ip, #-1]
 8003870:	4463      	add	r3, ip
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 8003872:	9f02      	ldr	r7, [sp, #8]
		i += nSamps;
 8003874:	4493      	add	fp, r2
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 8003876:	46bc      	mov	ip, r7
 8003878:	9f01      	ldr	r7, [sp, #4]
 800387a:	fb0c 7303 	mla	r3, ip, r3, r7
 800387e:	f7ff feb9 	bl	80035f4 <DequantBlock>

		/* update highest non-zero critical band */
		if (nonZero) 
 8003882:	b100      	cbz	r0, 8003886 <xmp3fixpt_DequantChannel+0xb2>
			cbMax[0] = cb;
 8003884:	940f      	str	r4, [sp, #60]	; 0x3c
		gbMask |= nonZero;

		if (i >= *nonZeroBound) 
 8003886:	9b06      	ldr	r3, [sp, #24]
		gbMask |= nonZero;
 8003888:	ea4a 0a00 	orr.w	sl, sl, r0
 800388c:	462c      	mov	r4, r5
		if (i >= *nonZeroBound) 
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	455b      	cmp	r3, fp
 8003892:	dcd2      	bgt.n	800383a <xmp3fixpt_DequantChannel+0x66>
			break;
	}

	/* set cbi (Type, EndS[], EndSMax will be overwritten if we proceed to do short blocks) */
	cbi->cbType = 0;			/* long only */
 8003894:	2300      	movs	r3, #0
	cbi->cbEndL  = cbMax[0];
 8003896:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	cbi->cbType = 0;			/* long only */
 800389a:	600b      	str	r3, [r1, #0]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 800389c:	604b      	str	r3, [r1, #4]
	cbi->cbEndSMax = 0;
 800389e:	610b      	str	r3, [r1, #16]
 80038a0:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
	cbi->cbEndL  = cbMax[0];
 80038a4:	614a      	str	r2, [r1, #20]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 80038a6:	e9c1 3302 	strd	r3, r3, [r1, #8]

	/* early exit if no short blocks */
	if (cbStartS >= 12) 
 80038aa:	9b04      	ldr	r3, [sp, #16]
 80038ac:	2b0b      	cmp	r3, #11
 80038ae:	dd21      	ble.n	80038f4 <xmp3fixpt_DequantChannel+0x120>
	__asm__ ("clz %0, %1" : "=r" (numZeros) : "r" (x) : "cc");
 80038b0:	faba f08a 	clz	r0, sl
		return CLZ(gbMask) - 1;
 80038b4:	3801      	subs	r0, #1
	cbi->cbEndSMax = cbMax[0];
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);

	return CLZ(gbMask) - 1;
}
 80038b6:	b013      	add	sp, #76	; 0x4c
 80038b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cbStartS = 13;
 80038bc:	230d      	movs	r3, #13
		cbEndL =   22;
 80038be:	f04f 0816 	mov.w	r8, #22
		cbStartS = 13;
 80038c2:	9304      	str	r3, [sp, #16]
 80038c4:	e7a7      	b.n	8003816 <xmp3fixpt_DequantChannel+0x42>
		if (sis->mixedBlock) { 
 80038c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80038c8:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80038cc:	f1bb 0f00 	cmp.w	fp, #0
 80038d0:	f040 80b8 	bne.w	8003a44 <xmp3fixpt_DequantChannel+0x270>
	if (fh->modeExt >> 1)
 80038d4:	2a00      	cmp	r2, #0
 80038d6:	f000 80d0 	beq.w	8003a7a <xmp3fixpt_DequantChannel+0x2a6>
	cbi->cbType = 0;			/* long only */
 80038da:	2300      	movs	r3, #0
 80038dc:	f1c0 02d2 	rsb	r2, r0, #210	; 0xd2
	cbi->cbEndSMax = 0;
 80038e0:	469a      	mov	sl, r3
 80038e2:	9201      	str	r2, [sp, #4]
	cbi->cbType = 0;			/* long only */
 80038e4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
	cbi->cbEndSMax = 0;
 80038e6:	9304      	str	r3, [sp, #16]
	cbi->cbType = 0;			/* long only */
 80038e8:	6013      	str	r3, [r2, #0]
	cbi->cbEndL  = cbMax[0];
 80038ea:	6153      	str	r3, [r2, #20]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 80038ec:	6053      	str	r3, [r2, #4]
	cbi->cbEndSMax = 0;
 80038ee:	6113      	str	r3, [r2, #16]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 80038f0:	e9c2 3302 	strd	r3, r3, [r2, #8]
 80038f4:	9a04      	ldr	r2, [sp, #16]
 80038f6:	4658      	mov	r0, fp
 80038f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80038fa:	0053      	lsls	r3, r2, #1
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
 80038fc:	920f      	str	r2, [sp, #60]	; 0x3c
 80038fe:	3128      	adds	r1, #40	; 0x28
 8003900:	f8cd a014 	str.w	sl, [sp, #20]
 8003904:	f8cd b00c 	str.w	fp, [sp, #12]
 8003908:	910d      	str	r1, [sp, #52]	; 0x34
 800390a:	4611      	mov	r1, r2
 800390c:	189a      	adds	r2, r3, r2
 800390e:	3217      	adds	r2, #23
 8003910:	444a      	add	r2, r9
 8003912:	4692      	mov	sl, r2
 8003914:	9207      	str	r2, [sp, #28]
 8003916:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
 800391a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		for (w = 0; w < 3; w++) {
 800391c:	2600      	movs	r6, #0
 800391e:	9908      	ldr	r1, [sp, #32]
 8003920:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003922:	eb01 0480 	add.w	r4, r1, r0, lsl #2
		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8003926:	9904      	ldr	r1, [sp, #16]
 8003928:	4413      	add	r3, r2
 800392a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800392e:	3101      	adds	r1, #1
 8003930:	46a0      	mov	r8, r4
 8003932:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 8003936:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800393a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800393c:	1aed      	subs	r5, r5, r3
 800393e:	910a      	str	r1, [sp, #40]	; 0x28
 8003940:	940b      	str	r4, [sp, #44]	; 0x2c
 8003942:	ea4f 0985 	mov.w	r9, r5, lsl #2
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);
 8003946:	9801      	ldr	r0, [sp, #4]
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 8003948:	462a      	mov	r2, r5
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);
 800394a:	f85b 3b04 	ldr.w	r3, [fp], #4
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800394e:	4639      	mov	r1, r7
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);
 8003950:	f81a cb01 	ldrb.w	ip, [sl], #1
 8003954:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 8003958:	9c02      	ldr	r4, [sp, #8]
 800395a:	4640      	mov	r0, r8
 800395c:	fb04 330c 	mla	r3, r4, ip, r3
 8003960:	f7ff fe48 	bl	80035f4 <DequantBlock>
			if (nonZero)
 8003964:	2800      	cmp	r0, #0
 8003966:	d043      	beq.n	80039f0 <xmp3fixpt_DequantChannel+0x21c>
				cbMax[w] = cb;
 8003968:	9b04      	ldr	r3, [sp, #16]
 800396a:	aa0f      	add	r2, sp, #60	; 0x3c
 800396c:	44c8      	add	r8, r9
 800396e:	444f      	add	r7, r9
 8003970:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
		for (w = 0; w < 3; w++) {
 8003974:	3601      	adds	r6, #1
			gbMask |= nonZero;
 8003976:	9b05      	ldr	r3, [sp, #20]
		for (w = 0; w < 3; w++) {
 8003978:	2e03      	cmp	r6, #3
			gbMask |= nonZero;
 800397a:	ea43 0300 	orr.w	r3, r3, r0
 800397e:	9305      	str	r3, [sp, #20]
		for (w = 0; w < 3; w++) {
 8003980:	d1e1      	bne.n	8003946 <xmp3fixpt_DequantChannel+0x172>
		i += 3*nSamps;
 8003982:	006a      	lsls	r2, r5, #1
 8003984:	9903      	ldr	r1, [sp, #12]
		for (j = 0; j < nSamps; j++) {
 8003986:	2d00      	cmp	r5, #0
 8003988:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		i += 3*nSamps;
 800398a:	eb02 0305 	add.w	r3, r2, r5
 800398e:	4419      	add	r1, r3
 8003990:	9103      	str	r1, [sp, #12]
		for (j = 0; j < nSamps; j++) {
 8003992:	dd1c      	ble.n	80039ce <xmp3fixpt_DequantChannel+0x1fa>
 8003994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003996:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800399a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800399e:	3a01      	subs	r2, #1
 80039a0:	1f01      	subs	r1, r0, #4
 80039a2:	18eb      	adds	r3, r5, r3
 80039a4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80039a8:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80039ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
			buf[j][0] = workBuf[0*nSamps + j];
 80039b0:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80039b4:	340c      	adds	r4, #12
 80039b6:	f844 0c0c 	str.w	r0, [r4, #-12]
			buf[j][1] = workBuf[1*nSamps + j];
 80039ba:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80039be:	f844 0c08 	str.w	r0, [r4, #-8]
		for (j = 0; j < nSamps; j++) {
 80039c2:	429d      	cmp	r5, r3
			buf[j][2] = workBuf[2*nSamps + j];
 80039c4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80039c8:	f844 0c04 	str.w	r0, [r4, #-4]
		for (j = 0; j < nSamps; j++) {
 80039cc:	d1f0      	bne.n	80039b0 <xmp3fixpt_DequantChannel+0x1dc>
 80039ce:	9a07      	ldr	r2, [sp, #28]
		if (i >= *nonZeroBound) 
 80039d0:	9b06      	ldr	r3, [sp, #24]
 80039d2:	3203      	adds	r2, #3
	for (cb = cbStartS; cb < cbEndS; cb++) {
 80039d4:	9903      	ldr	r1, [sp, #12]
		if (i >= *nonZeroBound) 
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	9207      	str	r2, [sp, #28]
	for (cb = cbStartS; cb < cbEndS; cb++) {
 80039da:	428b      	cmp	r3, r1
 80039dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039de:	9204      	str	r2, [sp, #16]
 80039e0:	dd0c      	ble.n	80039fc <xmp3fixpt_DequantChannel+0x228>
 80039e2:	2a0c      	cmp	r2, #12
 80039e4:	dc0a      	bgt.n	80039fc <xmp3fixpt_DequantChannel+0x228>
 80039e6:	0053      	lsls	r3, r2, #1
 80039e8:	4608      	mov	r0, r1
 80039ea:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80039ee:	e794      	b.n	800391a <xmp3fixpt_DequantChannel+0x146>
		for (w = 0; w < 3; w++) {
 80039f0:	3601      	adds	r6, #1
 80039f2:	44c8      	add	r8, r9
 80039f4:	444f      	add	r7, r9
 80039f6:	2e03      	cmp	r6, #3
 80039f8:	d1a5      	bne.n	8003946 <xmp3fixpt_DequantChannel+0x172>
 80039fa:	e7c2      	b.n	8003982 <xmp3fixpt_DequantChannel+0x1ae>
	*nonZeroBound = i;
 80039fc:	9b06      	ldr	r3, [sp, #24]
 80039fe:	f8dd b00c 	ldr.w	fp, [sp, #12]
	cbi->cbEndS[0] = cbMax[0];
 8003a02:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	*nonZeroBound = i;
 8003a04:	f8c3 b000 	str.w	fp, [r3]
	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 8003a08:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003a0a:	f8dd a014 	ldr.w	sl, [sp, #20]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8003a12:	2b00      	cmp	r3, #0
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
 8003a14:	4623      	mov	r3, r4
	cbi->cbEndS[0] = cbMax[0];
 8003a16:	6074      	str	r4, [r6, #4]
	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 8003a18:	bf0c      	ite	eq
 8003a1a:	2501      	moveq	r5, #1
 8003a1c:	2502      	movne	r5, #2
	cbi->cbEndS[2] = cbMax[2];
 8003a1e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 8003a22:	6035      	str	r5, [r6, #0]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
 8003a24:	428c      	cmp	r4, r1
	cbi->cbEndS[1] = cbMax[1];
 8003a26:	60b1      	str	r1, [r6, #8]
	cbi->cbEndS[2] = cbMax[2];
 8003a28:	60f2      	str	r2, [r6, #12]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
 8003a2a:	bfb8      	it	lt
 8003a2c:	460b      	movlt	r3, r1
 8003a2e:	faba f08a 	clz	r0, sl
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);
 8003a32:	4293      	cmp	r3, r2
	return CLZ(gbMask) - 1;
 8003a34:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);
 8003a38:	bfb8      	it	lt
 8003a3a:	4613      	movlt	r3, r2
 8003a3c:	6133      	str	r3, [r6, #16]
}
 8003a3e:	b013      	add	sp, #76	; 0x4c
 8003a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 8003a44:	7823      	ldrb	r3, [r4, #0]
 8003a46:	b933      	cbnz	r3, 8003a56 <xmp3fixpt_DequantChannel+0x282>
	cbMax[2] = cbMax[1] = cbMax[0] = 0;
 8003a48:	930f      	str	r3, [sp, #60]	; 0x3c
	if (fh->modeExt >> 1)
 8003a4a:	b962      	cbnz	r2, 8003a66 <xmp3fixpt_DequantChannel+0x292>
			cbStartS = 3; 
 8003a4c:	2303      	movs	r3, #3
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 8003a4e:	f04f 0808 	mov.w	r8, #8
			cbStartS = 3; 
 8003a52:	9304      	str	r3, [sp, #16]
 8003a54:	e6de      	b.n	8003814 <xmp3fixpt_DequantChannel+0x40>
	cbMax[2] = cbMax[1] = cbMax[0] = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	930f      	str	r3, [sp, #60]	; 0x3c
	if (fh->modeExt >> 1)
 8003a5a:	b94a      	cbnz	r2, 8003a70 <xmp3fixpt_DequantChannel+0x29c>
			cbStartS = 3; 
 8003a5c:	2303      	movs	r3, #3
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 8003a5e:	f04f 0806 	mov.w	r8, #6
			cbStartS = 3; 
 8003a62:	9304      	str	r3, [sp, #16]
 8003a64:	e6d6      	b.n	8003814 <xmp3fixpt_DequantChannel+0x40>
 8003a66:	2303      	movs	r3, #3
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 8003a68:	f04f 0808 	mov.w	r8, #8
			cbStartS = 3; 
 8003a6c:	9304      	str	r3, [sp, #16]
 8003a6e:	e6d2      	b.n	8003816 <xmp3fixpt_DequantChannel+0x42>
 8003a70:	2303      	movs	r3, #3
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 8003a72:	f04f 0806 	mov.w	r8, #6
			cbStartS = 3; 
 8003a76:	9304      	str	r3, [sp, #16]
 8003a78:	e6cd      	b.n	8003816 <xmp3fixpt_DequantChannel+0x42>
	globalGain += IMDCT_SCALE;		/* scale everything by sqrt(2), for fast IMDCT36 */
 8003a7a:	3002      	adds	r0, #2
 8003a7c:	e72d      	b.n	80038da <xmp3fixpt_DequantChannel+0x106>
 8003a7e:	bf00      	nop
 8003a80:	08020cec 	.word	0x08020cec

08003a84 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8003a84:	b570      	push	{r4, r5, r6, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003a86:	4c11      	ldr	r4, [pc, #68]	; (8003acc <MX_FATFS_Init+0x48>)
 8003a88:	4811      	ldr	r0, [pc, #68]	; (8003ad0 <MX_FATFS_Init+0x4c>)
 8003a8a:	4621      	mov	r1, r4
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8003a8c:	4d11      	ldr	r5, [pc, #68]	; (8003ad4 <MX_FATFS_Init+0x50>)
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003a8e:	f019 fb8f 	bl	801d1b0 <FATFS_LinkDriver>
 8003a92:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <MX_FATFS_Init+0x54>)
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8003a94:	4629      	mov	r1, r5
  /* additional user code for init */     
  printf("SD card path: %s\n",SDPath);
  printf("USB path: %s\n",USBHPath);
  
  
  f_mount(&SDFatFS,USBHPath,0);
 8003a96:	4e11      	ldr	r6, [pc, #68]	; (8003adc <MX_FATFS_Init+0x58>)
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003a98:	7018      	strb	r0, [r3, #0]
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8003a9a:	4811      	ldr	r0, [pc, #68]	; (8003ae0 <MX_FATFS_Init+0x5c>)
 8003a9c:	f019 fb88 	bl	801d1b0 <FATFS_LinkDriver>
 8003aa0:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <MX_FATFS_Init+0x60>)
  printf("SD card path: %s\n",SDPath);
 8003aa2:	4621      	mov	r1, r4
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8003aa4:	7018      	strb	r0, [r3, #0]
  printf("SD card path: %s\n",SDPath);
 8003aa6:	4810      	ldr	r0, [pc, #64]	; (8003ae8 <MX_FATFS_Init+0x64>)
 8003aa8:	f01b fee4 	bl	801f874 <iprintf>
  printf("USB path: %s\n",USBHPath);
 8003aac:	4629      	mov	r1, r5
 8003aae:	480f      	ldr	r0, [pc, #60]	; (8003aec <MX_FATFS_Init+0x68>)
 8003ab0:	f01b fee0 	bl	801f874 <iprintf>
  f_mount(&SDFatFS,USBHPath,0);
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f018 fb3d 	bl	801c138 <f_mount>
  f_mount(&SDFatFS,SDPath,0);
 8003abe:	4621      	mov	r1, r4
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	2200      	movs	r2, #0
  
  /* USER CODE END Init */
}
 8003ac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  f_mount(&SDFatFS,SDPath,0);
 8003ac8:	f018 bb36 	b.w	801c138 <f_mount>
 8003acc:	2000e3c0 	.word	0x2000e3c0
 8003ad0:	08023700 	.word	0x08023700
 8003ad4:	2000e3bc 	.word	0x2000e3bc
 8003ad8:	2000e3b8 	.word	0x2000e3b8
 8003adc:	2000ea60 	.word	0x2000ea60
 8003ae0:	08023f34 	.word	0x08023f34
 8003ae4:	2000ec9c 	.word	0x2000ec9c
 8003ae8:	08020d04 	.word	0x08020d04
 8003aec:	08020d18 	.word	0x08020d18

08003af0 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8003af0:	2000      	movs	r0, #0
 8003af2:	4770      	bx	lr

08003af4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8003af4:	b508      	push	{r3, lr}
  uint8_t status = (uint8_t)0x01;
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_PORT,SD_PIN) == GPIO_PIN_RESET) {
 8003af6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003afa:	4803      	ldr	r0, [pc, #12]	; (8003b08 <BSP_PlatformIsDetected+0x14>)
 8003afc:	f00c fbde 	bl	80102bc <HAL_GPIO_ReadPin>
  }
  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */ 
  return status;
}  
 8003b00:	3000      	adds	r0, #0
 8003b02:	bf18      	it	ne
 8003b04:	2001      	movne	r0, #1
 8003b06:	bd08      	pop	{r3, pc}
 8003b08:	40020800 	.word	0x40020800

08003b0c <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop

08003b10 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop

08003b14 <vApplicationMallocFailedHook>:
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop

08003b18 <lcd_start>:

/* ------------------------------------------------------------------- */

// Initialize the LCD display (call this only once at the start of the player!)
void lcd_start(void)
{
 8003b18:	b510      	push	{r4, lr}
  /* LCD Initialization */
  BSP_LCD_Init();
 8003b1a:	f00b f80d 	bl	800eb38 <BSP_LCD_Init>

  /* LCD Initialization */
  BSP_LCD_LayerDefaultInit(LAYER_BG, (unsigned int)0xC0000000);
 8003b1e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003b22:	2000      	movs	r0, #0

  /* Select the LCD Background Layer  */
  BSP_LCD_SelectLayer(LAYER_BG);

  /* Clear the Background Layer */
  BSP_LCD_Clear(BG_COLOR);
 8003b24:	4c14      	ldr	r4, [pc, #80]	; (8003b78 <lcd_start+0x60>)
  BSP_LCD_LayerDefaultInit(LAYER_BG, (unsigned int)0xC0000000);
 8003b26:	f00a f9c7 	bl	800deb8 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(LAYER_FG, (unsigned int)0xC0000000+(LCD_X_SIZE*LCD_Y_SIZE*8));
 8003b2a:	4914      	ldr	r1, [pc, #80]	; (8003b7c <lcd_start+0x64>)
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f00a f9c3 	bl	800deb8 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8003b32:	f00a ff2b 	bl	800e98c <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(LAYER_BG);
 8003b36:	2000      	movs	r0, #0
 8003b38:	f00a f9fa 	bl	800df30 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(BG_COLOR);
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f00a fa2d 	bl	800df9c <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(BG_COLOR);
 8003b42:	4620      	mov	r0, r4
 8003b44:	f00a fa1c 	bl	800df80 <BSP_LCD_SetBackColor>


  /* Select the LCD Foreground Layer  */
  BSP_LCD_SelectLayer(LAYER_FG);
 8003b48:	2001      	movs	r0, #1
 8003b4a:	f00a f9f1 	bl	800df30 <BSP_LCD_SelectLayer>

  /* Clear the Foreground Layer */
  BSP_LCD_SetColorKeying(LAYER_FG,BG_COLOR);
 8003b4e:	4621      	mov	r1, r4
 8003b50:	2001      	movs	r0, #1
 8003b52:	f00a f9f9 	bl	800df48 <BSP_LCD_SetColorKeying>
  BSP_LCD_Clear(BG_COLOR);
 8003b56:	4620      	mov	r0, r4
 8003b58:	f00a fa20 	bl	800df9c <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(BG_COLOR);
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f00a fa0f 	bl	800df80 <BSP_LCD_SetBackColor>


  /* Configure the transparency for foreground and background :
     Increase the transparency */
  BSP_LCD_SetTransparency(LAYER_BG, 0xFF);
 8003b62:	21ff      	movs	r1, #255	; 0xff
 8003b64:	2000      	movs	r0, #0
 8003b66:	f00a f9e9 	bl	800df3c <BSP_LCD_SetTransparency>
  BSP_LCD_SetTransparency(LAYER_FG, 0xFF);
 8003b6a:	21ff      	movs	r1, #255	; 0xff
 8003b6c:	2001      	movs	r0, #1
}
 8003b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_SetTransparency(LAYER_FG, 0xFF);
 8003b72:	f00a b9e3 	b.w	800df3c <BSP_LCD_SetTransparency>
 8003b76:	bf00      	nop
 8003b78:	880f0f0f 	.word	0x880f0f0f
 8003b7c:	c00ff000 	.word	0xc00ff000

08003b80 <initialize_touchscreen>:
}

// Initialize the touchscreen
// Should be called once, to create all the necessary structures
int initialize_touchscreen(void)
{
 8003b80:	b510      	push	{r4, lr}
	uint8_t status = 0;
	status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8003b82:	f00a f981 	bl	800de88 <BSP_LCD_GetXSize>
 8003b86:	4604      	mov	r4, r0
 8003b88:	f00a f98a 	bl	800dea0 <BSP_LCD_GetYSize>
 8003b8c:	b281      	uxth	r1, r0
 8003b8e:	b2a0      	uxth	r0, r4
 8003b90:	f00b f970 	bl	800ee74 <BSP_TS_Init>
	if(status != TS_OK) return -1;
 8003b94:	3000      	adds	r0, #0
 8003b96:	bf18      	it	ne
 8003b98:	2001      	movne	r0, #1
	return 0;
}
 8003b9a:	4240      	negs	r0, r0
 8003b9c:	bd10      	pop	{r4, pc}
 8003b9e:	bf00      	nop

08003ba0 <touchscreen_loop_init>:

// Call this once to init the TS-input-reading-loop
void touchscreen_loop_init(void)
{
 8003ba0:	b508      	push	{r3, lr}
    newX = 120;
 8003ba2:	4909      	ldr	r1, [pc, #36]	; (8003bc8 <touchscreen_loop_init+0x28>)
 8003ba4:	2378      	movs	r3, #120	; 0x78
	newY = 120;
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <touchscreen_loop_init+0x2c>)
    BSP_LCD_SelectLayer(LAYER_FG);
 8003ba8:	2001      	movs	r0, #1
    newX = 120;
 8003baa:	800b      	strh	r3, [r1, #0]
	newY = 120;
 8003bac:	8013      	strh	r3, [r2, #0]
    BSP_LCD_SelectLayer(LAYER_FG);
 8003bae:	f00a f9bf 	bl	800df30 <BSP_LCD_SelectLayer>
	BSP_LCD_SetTransparency(LAYER_FG, (uint8_t) 0xFF);
 8003bb2:	21ff      	movs	r1, #255	; 0xff
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	f00a f9c1 	bl	800df3c <BSP_LCD_SetTransparency>
	BSP_LCD_SetColorKeying(LAYER_FG, BG_COLOR);
 8003bba:	4905      	ldr	r1, [pc, #20]	; (8003bd0 <touchscreen_loop_init+0x30>)
 8003bbc:	2001      	movs	r0, #1
}
 8003bbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BSP_LCD_SetColorKeying(LAYER_FG, BG_COLOR);
 8003bc2:	f00a b9c1 	b.w	800df48 <BSP_LCD_SetColorKeying>
 8003bc6:	bf00      	nop
 8003bc8:	2000ec9e 	.word	0x2000ec9e
 8003bcc:	2000eca0 	.word	0x2000eca0
 8003bd0:	880f0f0f 	.word	0x880f0f0f
 8003bd4:	00000000 	.word	0x00000000

08003bd8 <check_touchscreen>:

// Single iteration of getting TS input
// RETURNS: new state according to the user choice or EMPTY if no new choice has been made
Mp3_Player_State check_touchscreen()
{	
 8003bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bdc:	b083      	sub	sp, #12
	uint32_t currentTicks = HAL_GetTick();
 8003bde:	f00b fa87 	bl	800f0f0 <HAL_GetTick>
	
	if (currentTicks < lastTicks + TICKS_DELTA)
 8003be2:	4ab7      	ldr	r2, [pc, #732]	; (8003ec0 <check_touchscreen+0x2e8>)
 8003be4:	6813      	ldr	r3, [r2, #0]
 8003be6:	3364      	adds	r3, #100	; 0x64
 8003be8:	4283      	cmp	r3, r0
 8003bea:	f200 8140 	bhi.w	8003e6e <check_touchscreen+0x296>
		return EMPTY;
	
	lastTicks = currentTicks;
	
    BSP_TS_GetState(&TS_State);
 8003bee:	4cb5      	ldr	r4, [pc, #724]	; (8003ec4 <check_touchscreen+0x2ec>)
	lastTicks = currentTicks;
 8003bf0:	6010      	str	r0, [r2, #0]
    BSP_TS_GetState(&TS_State);
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f00b f968 	bl	800eec8 <BSP_TS_GetState>
	if (TS_State.touchDetected == 0)
 8003bf8:	7823      	ldrb	r3, [r4, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 8137 	beq.w	8003e6e <check_touchscreen+0x296>
 8003c00:	8866      	ldrh	r6, [r4, #2]
 8003c02:	89a5      	ldrh	r5, [r4, #12]
 8003c04:	f3c6 060b 	ubfx	r6, r6, #0, #12
		return EMPTY;
	if ((TS_State.touchX[0] & 0x0FFF) >= 10)
    {
		newX = TS_State.touchX[0] & 0x0FFF;
 8003c08:	4baf      	ldr	r3, [pc, #700]	; (8003ec8 <check_touchscreen+0x2f0>)
 8003c0a:	f3c5 050b 	ubfx	r5, r5, #0, #12
	lastState.touchX[0] = newX;
	lastState.touchY[0] = newY;

	for (int i = 0; i < CONTROL_BUTTONS_NUMBER; i++) {

		uint16_t buttonCornerX = buttonsLeftUpper[i][0];
 8003c0e:	4caf      	ldr	r4, [pc, #700]	; (8003ecc <check_touchscreen+0x2f4>)
	if ((TS_State.touchX[0] & 0x0FFF) >= 10)
 8003c10:	2e09      	cmp	r6, #9
		newX = TS_State.touchX[0] & 0x0FFF;
 8003c12:	bf8c      	ite	hi
 8003c14:	801e      	strhhi	r6, [r3, #0]
 8003c16:	881e      	ldrhls	r6, [r3, #0]
	if ((TS_State.touchY[0] & 0x0FFF) >= 10)
 8003c18:	2d09      	cmp	r5, #9
		newY = TS_State.touchY[0] & 0x0FFF;
 8003c1a:	4bad      	ldr	r3, [pc, #692]	; (8003ed0 <check_touchscreen+0x2f8>)
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	bf8c      	ite	hi
 8003c20:	801d      	strhhi	r5, [r3, #0]
 8003c22:	881d      	ldrhls	r5, [r3, #0]
 8003c24:	f7fc fc9e 	bl	8000564 <__aeabi_i2d>
		uint16_t buttonCornerX = buttonsLeftUpper[i][0];
 8003c28:	8827      	ldrh	r7, [r4, #0]
 8003c2a:	4680      	mov	r8, r0
 8003c2c:	4689      	mov	r9, r1
		uint16_t buttonCornerY = buttonsLeftUpper[i][1];

		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003c2e:	4638      	mov	r0, r7
 8003c30:	e9cd 8900 	strd	r8, r9, [sp]
 8003c34:	f7fc fc96 	bl	8000564 <__aeabi_i2d>
 8003c38:	a39f      	add	r3, pc, #636	; (adr r3, 8003eb8 <check_touchscreen+0x2e0>)
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	f7fc fb45 	bl	80002cc <__adddf3>
 8003c42:	4642      	mov	r2, r8
 8003c44:	464b      	mov	r3, r9
 8003c46:	f7fc ff7d 	bl	8000b44 <__aeabi_dcmpge>
 8003c4a:	b328      	cbz	r0, 8003c98 <check_touchscreen+0xc0>
		uint16_t buttonCornerY = buttonsLeftUpper[i][1];
 8003c4c:	f8b4 a002 	ldrh.w	sl, [r4, #2]
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003c50:	f04f 0b01 	mov.w	fp, #1
			newY <= buttonCornerY + CONTROL_BUTTON_SIZE &&
 8003c54:	4650      	mov	r0, sl
 8003c56:	f7fc fc85 	bl	8000564 <__aeabi_i2d>
 8003c5a:	a397      	add	r3, pc, #604	; (adr r3, 8003eb8 <check_touchscreen+0x2e0>)
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f7fc fb34 	bl	80002cc <__adddf3>
 8003c64:	4680      	mov	r8, r0
 8003c66:	4689      	mov	r9, r1
 8003c68:	4628      	mov	r0, r5
 8003c6a:	f7fc fc7b 	bl	8000564 <__aeabi_i2d>
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4640      	mov	r0, r8
 8003c74:	4649      	mov	r1, r9
 8003c76:	f7fc ff65 	bl	8000b44 <__aeabi_dcmpge>
 8003c7a:	b900      	cbnz	r0, 8003c7e <check_touchscreen+0xa6>
 8003c7c:	4683      	mov	fp, r0
			newX > buttonCornerX &&
 8003c7e:	f01b 0fff 	tst.w	fp, #255	; 0xff
 8003c82:	d009      	beq.n	8003c98 <check_touchscreen+0xc0>
 8003c84:	45aa      	cmp	sl, r5
 8003c86:	bf2c      	ite	cs
 8003c88:	2300      	movcs	r3, #0
 8003c8a:	2301      	movcc	r3, #1
 8003c8c:	42be      	cmp	r6, r7
 8003c8e:	bf98      	it	ls
 8003c90:	2300      	movls	r3, #0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f040 8101 	bne.w	8003e9a <check_touchscreen+0x2c2>
		uint16_t buttonCornerX = buttonsLeftUpper[i][0];
 8003c98:	88a7      	ldrh	r7, [r4, #4]
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003c9a:	4638      	mov	r0, r7
 8003c9c:	f7fc fc62 	bl	8000564 <__aeabi_i2d>
 8003ca0:	a385      	add	r3, pc, #532	; (adr r3, 8003eb8 <check_touchscreen+0x2e0>)
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	f7fc fb11 	bl	80002cc <__adddf3>
 8003caa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003cae:	f7fc ff49 	bl	8000b44 <__aeabi_dcmpge>
 8003cb2:	b300      	cbz	r0, 8003cf6 <check_touchscreen+0x11e>
		uint16_t buttonCornerY = buttonsLeftUpper[i][1];
 8003cb4:	f8b4 a006 	ldrh.w	sl, [r4, #6]
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003cb8:	f04f 0b01 	mov.w	fp, #1
			newY <= buttonCornerY + CONTROL_BUTTON_SIZE &&
 8003cbc:	4650      	mov	r0, sl
 8003cbe:	f7fc fc51 	bl	8000564 <__aeabi_i2d>
 8003cc2:	a37d      	add	r3, pc, #500	; (adr r3, 8003eb8 <check_touchscreen+0x2e0>)
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	f7fc fb00 	bl	80002cc <__adddf3>
 8003ccc:	4680      	mov	r8, r0
 8003cce:	4689      	mov	r9, r1
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f7fc fc47 	bl	8000564 <__aeabi_i2d>
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4640      	mov	r0, r8
 8003cdc:	4649      	mov	r1, r9
 8003cde:	f7fc ff31 	bl	8000b44 <__aeabi_dcmpge>
 8003ce2:	b900      	cbnz	r0, 8003ce6 <check_touchscreen+0x10e>
 8003ce4:	4683      	mov	fp, r0
			newX > buttonCornerX &&
 8003ce6:	f01b 0fff 	tst.w	fp, #255	; 0xff
 8003cea:	d004      	beq.n	8003cf6 <check_touchscreen+0x11e>
 8003cec:	45aa      	cmp	sl, r5
 8003cee:	bf38      	it	cc
 8003cf0:	42b7      	cmpcc	r7, r6
 8003cf2:	f0c0 80d4 	bcc.w	8003e9e <check_touchscreen+0x2c6>
		uint16_t buttonCornerX = buttonsLeftUpper[i][0];
 8003cf6:	8927      	ldrh	r7, [r4, #8]
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003cf8:	4638      	mov	r0, r7
 8003cfa:	f7fc fc33 	bl	8000564 <__aeabi_i2d>
 8003cfe:	a36e      	add	r3, pc, #440	; (adr r3, 8003eb8 <check_touchscreen+0x2e0>)
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f7fc fae2 	bl	80002cc <__adddf3>
 8003d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d0c:	f7fc ff1a 	bl	8000b44 <__aeabi_dcmpge>
 8003d10:	b300      	cbz	r0, 8003d54 <check_touchscreen+0x17c>
		uint16_t buttonCornerY = buttonsLeftUpper[i][1];
 8003d12:	f8b4 800a 	ldrh.w	r8, [r4, #10]
			newY <= buttonCornerY + CONTROL_BUTTON_SIZE &&
 8003d16:	4628      	mov	r0, r5
 8003d18:	f7fc fc24 	bl	8000564 <__aeabi_i2d>
 8003d1c:	4682      	mov	sl, r0
 8003d1e:	468b      	mov	fp, r1
 8003d20:	4640      	mov	r0, r8
 8003d22:	f7fc fc1f 	bl	8000564 <__aeabi_i2d>
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003d26:	f04f 0901 	mov.w	r9, #1
			newY <= buttonCornerY + CONTROL_BUTTON_SIZE &&
 8003d2a:	a363      	add	r3, pc, #396	; (adr r3, 8003eb8 <check_touchscreen+0x2e0>)
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	f7fc facc 	bl	80002cc <__adddf3>
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4650      	mov	r0, sl
 8003d3a:	4659      	mov	r1, fp
 8003d3c:	f7fc fef8 	bl	8000b30 <__aeabi_dcmple>
 8003d40:	b900      	cbnz	r0, 8003d44 <check_touchscreen+0x16c>
 8003d42:	4681      	mov	r9, r0
			newX > buttonCornerX &&
 8003d44:	f019 0fff 	tst.w	r9, #255	; 0xff
 8003d48:	d004      	beq.n	8003d54 <check_touchscreen+0x17c>
 8003d4a:	42b7      	cmp	r7, r6
 8003d4c:	bf38      	it	cc
 8003d4e:	45a8      	cmpcc	r8, r5
 8003d50:	f0c0 8097 	bcc.w	8003e82 <check_touchscreen+0x2aa>
		uint16_t buttonCornerX = buttonsLeftUpper[i][0];
 8003d54:	89a7      	ldrh	r7, [r4, #12]
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003d56:	4638      	mov	r0, r7
 8003d58:	f7fc fc04 	bl	8000564 <__aeabi_i2d>
 8003d5c:	a356      	add	r3, pc, #344	; (adr r3, 8003eb8 <check_touchscreen+0x2e0>)
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	f7fc fab3 	bl	80002cc <__adddf3>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d6e:	f7fc fedf 	bl	8000b30 <__aeabi_dcmple>
 8003d72:	b1f8      	cbz	r0, 8003db4 <check_touchscreen+0x1dc>
		uint16_t buttonCornerY = buttonsLeftUpper[i][1];
 8003d74:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			newY <= buttonCornerY + CONTROL_BUTTON_SIZE &&
 8003d78:	4628      	mov	r0, r5
 8003d7a:	f7fc fbf3 	bl	8000564 <__aeabi_i2d>
 8003d7e:	4682      	mov	sl, r0
 8003d80:	468b      	mov	fp, r1
 8003d82:	4640      	mov	r0, r8
 8003d84:	f7fc fbee 	bl	8000564 <__aeabi_i2d>
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003d88:	f04f 0901 	mov.w	r9, #1
			newY <= buttonCornerY + CONTROL_BUTTON_SIZE &&
 8003d8c:	a34a      	add	r3, pc, #296	; (adr r3, 8003eb8 <check_touchscreen+0x2e0>)
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	f7fc fa9b 	bl	80002cc <__adddf3>
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4650      	mov	r0, sl
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	f7fc fec7 	bl	8000b30 <__aeabi_dcmple>
 8003da2:	b900      	cbnz	r0, 8003da6 <check_touchscreen+0x1ce>
 8003da4:	4681      	mov	r9, r0
			newX > buttonCornerX &&
 8003da6:	f019 0fff 	tst.w	r9, #255	; 0xff
 8003daa:	d003      	beq.n	8003db4 <check_touchscreen+0x1dc>
 8003dac:	42be      	cmp	r6, r7
 8003dae:	bf88      	it	hi
 8003db0:	4545      	cmphi	r5, r8
 8003db2:	d864      	bhi.n	8003e7e <check_touchscreen+0x2a6>
		uint16_t buttonCornerX = buttonsLeftUpper[i][0];
 8003db4:	8a27      	ldrh	r7, [r4, #16]
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003db6:	4638      	mov	r0, r7
 8003db8:	f7fc fbd4 	bl	8000564 <__aeabi_i2d>
 8003dbc:	a33e      	add	r3, pc, #248	; (adr r3, 8003eb8 <check_touchscreen+0x2e0>)
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	f7fc fa83 	bl	80002cc <__adddf3>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003dce:	f7fc feaf 	bl	8000b30 <__aeabi_dcmple>
 8003dd2:	b1f8      	cbz	r0, 8003e14 <check_touchscreen+0x23c>
		uint16_t buttonCornerY = buttonsLeftUpper[i][1];
 8003dd4:	f8b4 8012 	ldrh.w	r8, [r4, #18]
			newY <= buttonCornerY + CONTROL_BUTTON_SIZE &&
 8003dd8:	4628      	mov	r0, r5
 8003dda:	f7fc fbc3 	bl	8000564 <__aeabi_i2d>
 8003dde:	4682      	mov	sl, r0
 8003de0:	468b      	mov	fp, r1
 8003de2:	4640      	mov	r0, r8
 8003de4:	f7fc fbbe 	bl	8000564 <__aeabi_i2d>
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003de8:	f04f 0901 	mov.w	r9, #1
			newY <= buttonCornerY + CONTROL_BUTTON_SIZE &&
 8003dec:	a332      	add	r3, pc, #200	; (adr r3, 8003eb8 <check_touchscreen+0x2e0>)
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	f7fc fa6b 	bl	80002cc <__adddf3>
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4650      	mov	r0, sl
 8003dfc:	4659      	mov	r1, fp
 8003dfe:	f7fc fe97 	bl	8000b30 <__aeabi_dcmple>
 8003e02:	b900      	cbnz	r0, 8003e06 <check_touchscreen+0x22e>
 8003e04:	4681      	mov	r9, r0
			newX > buttonCornerX &&
 8003e06:	f019 0fff 	tst.w	r9, #255	; 0xff
 8003e0a:	d003      	beq.n	8003e14 <check_touchscreen+0x23c>
 8003e0c:	42be      	cmp	r6, r7
 8003e0e:	bf88      	it	hi
 8003e10:	4545      	cmphi	r5, r8
 8003e12:	d830      	bhi.n	8003e76 <check_touchscreen+0x29e>
		uint16_t buttonCornerX = buttonsLeftUpper[i][0];
 8003e14:	8aa7      	ldrh	r7, [r4, #20]
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003e16:	4638      	mov	r0, r7
 8003e18:	f7fc fba4 	bl	8000564 <__aeabi_i2d>
 8003e1c:	a326      	add	r3, pc, #152	; (adr r3, 8003eb8 <check_touchscreen+0x2e0>)
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	f7fc fa53 	bl	80002cc <__adddf3>
 8003e26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e2a:	f7fc fe8b 	bl	8000b44 <__aeabi_dcmpge>
 8003e2e:	b1f0      	cbz	r0, 8003e6e <check_touchscreen+0x296>
		uint16_t buttonCornerY = buttonsLeftUpper[i][1];
 8003e30:	8ae4      	ldrh	r4, [r4, #22]
			newY <= buttonCornerY + CONTROL_BUTTON_SIZE &&
 8003e32:	4628      	mov	r0, r5
 8003e34:	f7fc fb96 	bl	8000564 <__aeabi_i2d>
 8003e38:	4680      	mov	r8, r0
 8003e3a:	4689      	mov	r9, r1
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	f7fc fb91 	bl	8000564 <__aeabi_i2d>
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003e42:	f04f 0a01 	mov.w	sl, #1
			newY <= buttonCornerY + CONTROL_BUTTON_SIZE &&
 8003e46:	a31c      	add	r3, pc, #112	; (adr r3, 8003eb8 <check_touchscreen+0x2e0>)
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	f7fc fa3e 	bl	80002cc <__adddf3>
		if (newX <= buttonCornerX + CONTROL_BUTTON_SIZE &&
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4640      	mov	r0, r8
 8003e56:	4649      	mov	r1, r9
 8003e58:	f7fc fe6a 	bl	8000b30 <__aeabi_dcmple>
 8003e5c:	b900      	cbnz	r0, 8003e60 <check_touchscreen+0x288>
 8003e5e:	4682      	mov	sl, r0
			newX > buttonCornerX &&
 8003e60:	f01a 0fff 	tst.w	sl, #255	; 0xff
 8003e64:	d003      	beq.n	8003e6e <check_touchscreen+0x296>
 8003e66:	42ac      	cmp	r4, r5
 8003e68:	bf38      	it	cc
 8003e6a:	42b7      	cmpcc	r7, r6
 8003e6c:	d31e      	bcc.n	8003eac <check_touchscreen+0x2d4>
		return EMPTY;
 8003e6e:	2008      	movs	r0, #8
			else
				return buttonState[i];
		}
	}
	return EMPTY;
}
 8003e70:	b003      	add	sp, #12
 8003e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < CONTROL_BUTTONS_NUMBER; i++) {
 8003e76:	2304      	movs	r3, #4
				return buttonState[i];
 8003e78:	4a16      	ldr	r2, [pc, #88]	; (8003ed4 <check_touchscreen+0x2fc>)
 8003e7a:	5cd0      	ldrb	r0, [r2, r3]
 8003e7c:	e7f8      	b.n	8003e70 <check_touchscreen+0x298>
			newX > buttonCornerX &&
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e7fa      	b.n	8003e78 <check_touchscreen+0x2a0>
				if (playButtonState == PLAY) {
 8003e82:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <check_touchscreen+0x300>)
 8003e84:	781a      	ldrb	r2, [r3, #0]
 8003e86:	b122      	cbz	r2, 8003e92 <check_touchscreen+0x2ba>
	for (int i = 0; i < CONTROL_BUTTONS_NUMBER; i++) {
 8003e88:	2202      	movs	r2, #2
					playButtonState = PLAY;
 8003e8a:	2100      	movs	r1, #0
			if (i == 1)
 8003e8c:	2a01      	cmp	r2, #1
					playButtonState = PLAY;
 8003e8e:	7019      	strb	r1, [r3, #0]
			if (i == 1)
 8003e90:	d00a      	beq.n	8003ea8 <check_touchscreen+0x2d0>
				playButtonState = PAUSE;
 8003e92:	2201      	movs	r2, #1
				return STOP;
 8003e94:	2002      	movs	r0, #2
				playButtonState = PAUSE;
 8003e96:	701a      	strb	r2, [r3, #0]
				return STOP;
 8003e98:	e7ea      	b.n	8003e70 <check_touchscreen+0x298>
			newX > buttonCornerX &&
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e7ec      	b.n	8003e78 <check_touchscreen+0x2a0>
				if (playButtonState == PLAY) {
 8003e9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ed8 <check_touchscreen+0x300>)
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	b92a      	cbnz	r2, 8003eb0 <check_touchscreen+0x2d8>
					playButtonState = PAUSE;
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
				return playButtonState;
 8003ea8:	7818      	ldrb	r0, [r3, #0]
 8003eaa:	e7e1      	b.n	8003e70 <check_touchscreen+0x298>
 8003eac:	2305      	movs	r3, #5
 8003eae:	e7e3      	b.n	8003e78 <check_touchscreen+0x2a0>
	for (int i = 0; i < CONTROL_BUTTONS_NUMBER; i++) {
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	e7ea      	b.n	8003e8a <check_touchscreen+0x2b2>
 8003eb4:	f3af 8000 	nop.w
 8003eb8:	33333333 	.word	0x33333333
 8003ebc:	40533333 	.word	0x40533333
 8003ec0:	20005e74 	.word	0x20005e74
 8003ec4:	20005e48 	.word	0x20005e48
 8003ec8:	2000ec9e 	.word	0x2000ec9e
 8003ecc:	20000008 	.word	0x20000008
 8003ed0:	2000eca0 	.word	0x2000eca0
 8003ed4:	20000000 	.word	0x20000000
 8003ed8:	20005e78 	.word	0x20005e78

08003edc <update_actual_time>:

void update_actual_time(int time) {
 8003edc:	b530      	push	{r4, r5, lr}
 8003ede:	4604      	mov	r4, r0
 8003ee0:	b091      	sub	sp, #68	; 0x44
	BSP_LCD_SelectLayer(LAYER_FG);
 8003ee2:	2001      	movs	r0, #1
 8003ee4:	f00a f824 	bl	800df30 <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(BG_COLOR);
 8003ee8:	4819      	ldr	r0, [pc, #100]	; (8003f50 <update_actual_time+0x74>)
 8003eea:	f00a f83d 	bl	800df68 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, LCD_Y_SIZE - 75, 100, 75);
 8003eee:	21c5      	movs	r1, #197	; 0xc5
 8003ef0:	234b      	movs	r3, #75	; 0x4b
 8003ef2:	2264      	movs	r2, #100	; 0x64
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	f00a f96f 	bl	800e1d8 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(TIME_COLOR);
 8003efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003efe:	f00a f833 	bl	800df68 <BSP_LCD_SetTextColor>
	char buf[50];
	sprintf(buf, " %d:%d%d", time/60, (time%60)/10, time%10);
 8003f02:	4814      	ldr	r0, [pc, #80]	; (8003f54 <update_actual_time+0x78>)
 8003f04:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <update_actual_time+0x7c>)
 8003f06:	17e2      	asrs	r2, r4, #31
 8003f08:	fb80 1004 	smull	r1, r0, r0, r4
 8003f0c:	fb83 5104 	smull	r5, r1, r3, r4
 8003f10:	4420      	add	r0, r4
 8003f12:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
 8003f16:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 8003f1a:	a803      	add	r0, sp, #12
 8003f1c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003f20:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 8003f24:	eba4 0141 	sub.w	r1, r4, r1, lsl #1
 8003f28:	eba4 0485 	sub.w	r4, r4, r5, lsl #2
 8003f2c:	9100      	str	r1, [sp, #0]
 8003f2e:	fb83 1304 	smull	r1, r3, r3, r4
 8003f32:	17e4      	asrs	r4, r4, #31
 8003f34:	4909      	ldr	r1, [pc, #36]	; (8003f5c <update_actual_time+0x80>)
 8003f36:	ebc4 03a3 	rsb	r3, r4, r3, asr #2
 8003f3a:	f01b fd3b 	bl	801f9b4 <siprintf>
	BSP_LCD_DisplayStringAt(0, LCD_Y_SIZE - 34, (unsigned char *) buf, LEFT_MODE);
 8003f3e:	aa03      	add	r2, sp, #12
 8003f40:	2303      	movs	r3, #3
 8003f42:	21ee      	movs	r1, #238	; 0xee
 8003f44:	2000      	movs	r0, #0
 8003f46:	f00a f8eb 	bl	800e120 <BSP_LCD_DisplayStringAt>
}
 8003f4a:	b011      	add	sp, #68	; 0x44
 8003f4c:	bd30      	pop	{r4, r5, pc}
 8003f4e:	bf00      	nop
 8003f50:	880f0f0f 	.word	0x880f0f0f
 8003f54:	88888889 	.word	0x88888889
 8003f58:	66666667 	.word	0x66666667
 8003f5c:	08020d34 	.word	0x08020d34

08003f60 <show_full_time>:

void show_full_time(int time) {
 8003f60:	b530      	push	{r4, r5, lr}
 8003f62:	4604      	mov	r4, r0
 8003f64:	b091      	sub	sp, #68	; 0x44
	BSP_LCD_SelectLayer(LAYER_FG);
 8003f66:	2001      	movs	r0, #1
 8003f68:	f009 ffe2 	bl	800df30 <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(BG_COLOR);
 8003f6c:	481a      	ldr	r0, [pc, #104]	; (8003fd8 <show_full_time+0x78>)
 8003f6e:	f009 fffb 	bl	800df68 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(LCD_X_SIZE-100, LCD_Y_SIZE - 75, 100, 75);
 8003f72:	21c5      	movs	r1, #197	; 0xc5
 8003f74:	234b      	movs	r3, #75	; 0x4b
 8003f76:	2264      	movs	r2, #100	; 0x64
 8003f78:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8003f7c:	f00a f92c 	bl	800e1d8 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(TIME_COLOR);
 8003f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f84:	f009 fff0 	bl	800df68 <BSP_LCD_SetTextColor>
	char buf[50];
	sprintf(buf, " %d:%d%d", time/60, (time%60)/10, time%10);
 8003f88:	4814      	ldr	r0, [pc, #80]	; (8003fdc <show_full_time+0x7c>)
 8003f8a:	4b15      	ldr	r3, [pc, #84]	; (8003fe0 <show_full_time+0x80>)
 8003f8c:	17e2      	asrs	r2, r4, #31
 8003f8e:	fb80 1004 	smull	r1, r0, r0, r4
 8003f92:	fb83 5104 	smull	r5, r1, r3, r4
 8003f96:	4420      	add	r0, r4
 8003f98:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
 8003f9c:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 8003fa0:	a803      	add	r0, sp, #12
 8003fa2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003fa6:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 8003faa:	eba4 0141 	sub.w	r1, r4, r1, lsl #1
 8003fae:	eba4 0485 	sub.w	r4, r4, r5, lsl #2
 8003fb2:	9100      	str	r1, [sp, #0]
 8003fb4:	fb83 1304 	smull	r1, r3, r3, r4
 8003fb8:	17e4      	asrs	r4, r4, #31
 8003fba:	490a      	ldr	r1, [pc, #40]	; (8003fe4 <show_full_time+0x84>)
 8003fbc:	ebc4 03a3 	rsb	r3, r4, r3, asr #2
 8003fc0:	f01b fcf8 	bl	801f9b4 <siprintf>
	BSP_LCD_DisplayStringAt(LCD_X_SIZE-100, LCD_Y_SIZE - 34, (unsigned char *) buf, LEFT_MODE);
 8003fc4:	aa03      	add	r2, sp, #12
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	21ee      	movs	r1, #238	; 0xee
 8003fca:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8003fce:	f00a f8a7 	bl	800e120 <BSP_LCD_DisplayStringAt>
}
 8003fd2:	b011      	add	sp, #68	; 0x44
 8003fd4:	bd30      	pop	{r4, r5, pc}
 8003fd6:	bf00      	nop
 8003fd8:	880f0f0f 	.word	0x880f0f0f
 8003fdc:	88888889 	.word	0x88888889
 8003fe0:	66666667 	.word	0x66666667
 8003fe4:	08020d34 	.word	0x08020d34

08003fe8 <update_progress_bar>:

void update_progress_bar(double progress) {
 8003fe8:	b570      	push	{r4, r5, r6, lr}
	BSP_LCD_SelectLayer(LAYER_FG);
 8003fea:	2001      	movs	r0, #1
void update_progress_bar(double progress) {
 8003fec:	ec55 4b10 	vmov	r4, r5, d0
	BSP_LCD_SelectLayer(LAYER_FG);
 8003ff0:	f009 ff9e 	bl	800df30 <BSP_LCD_SelectLayer>

	double epsilon = 1e-2;
	if(progress <= epsilon) {
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	a315      	add	r3, pc, #84	; (adr r3, 8004050 <update_progress_bar+0x68>)
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	f7fc fd97 	bl	8000b30 <__aeabi_dcmple>
 8004002:	b998      	cbnz	r0, 800402c <update_progress_bar+0x44>
		BSP_LCD_SetTextColor(BG_COLOR);
		BSP_LCD_FillRect(100, YPix(BAR_Y_POSITION), LCD_X_SIZE - 200, 7);
		return;
	}

	BSP_LCD_SetTextColor(BAR_COLOR);
 8004004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004008:	f009 ffae 	bl	800df68 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(100, YPix(BAR_Y_POSITION),  (uint16_t)(progress * (LCD_X_SIZE - 200)), 5);
 800400c:	2200      	movs	r2, #0
 800400e:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <update_progress_bar+0x60>)
 8004010:	4620      	mov	r0, r4
 8004012:	4629      	mov	r1, r5
 8004014:	f7fc fb10 	bl	8000638 <__aeabi_dmul>
 8004018:	f7fc fdd0 	bl	8000bbc <__aeabi_d2uiz>
 800401c:	2305      	movs	r3, #5
 800401e:	b282      	uxth	r2, r0
 8004020:	21f7      	movs	r1, #247	; 0xf7
 8004022:	2064      	movs	r0, #100	; 0x64
}
 8004024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	BSP_LCD_FillRect(100, YPix(BAR_Y_POSITION),  (uint16_t)(progress * (LCD_X_SIZE - 200)), 5);
 8004028:	f00a b8d6 	b.w	800e1d8 <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(BG_COLOR);
 800402c:	4807      	ldr	r0, [pc, #28]	; (800404c <update_progress_bar+0x64>)
 800402e:	f009 ff9b 	bl	800df68 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(100, YPix(BAR_Y_POSITION), LCD_X_SIZE - 200, 7);
 8004032:	2307      	movs	r3, #7
 8004034:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004038:	21f7      	movs	r1, #247	; 0xf7
 800403a:	2064      	movs	r0, #100	; 0x64
}
 800403c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BSP_LCD_FillRect(100, YPix(BAR_Y_POSITION), LCD_X_SIZE - 200, 7);
 8004040:	f00a b8ca 	b.w	800e1d8 <BSP_LCD_FillRect>
 8004044:	f3af 8000 	nop.w
 8004048:	40718000 	.word	0x40718000
 800404c:	880f0f0f 	.word	0x880f0f0f
 8004050:	47ae147b 	.word	0x47ae147b
 8004054:	3f847ae1 	.word	0x3f847ae1

08004058 <update_volume_bar>:

void update_volume_bar(int volume) {
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	4605      	mov	r5, r0
	BSP_LCD_SelectLayer(LAYER_FG);
 800405c:	2001      	movs	r0, #1
 800405e:	f009 ff67 	bl	800df30 <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(FG_COLOR);
 8004062:	480f      	ldr	r0, [pc, #60]	; (80040a0 <update_volume_bar+0x48>)
 8004064:	f009 ff80 	bl	800df68 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(44, 29, LCD_X_SIZE - 88, 17);
	BSP_LCD_SetTextColor(VOLUME_BAR_COLOR);
	BSP_LCD_FillRect(45, 30, (uint16_t)(volume * (LCD_X_SIZE - 90)/100), 15);
 8004068:	f44f 74c3 	mov.w	r4, #390	; 0x186
	BSP_LCD_FillRect(44, 29, LCD_X_SIZE - 88, 17);
 800406c:	2311      	movs	r3, #17
 800406e:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8004072:	211d      	movs	r1, #29
 8004074:	202c      	movs	r0, #44	; 0x2c
 8004076:	f00a f8af 	bl	800e1d8 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(VOLUME_BAR_COLOR);
 800407a:	480a      	ldr	r0, [pc, #40]	; (80040a4 <update_volume_bar+0x4c>)
 800407c:	f009 ff74 	bl	800df68 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(45, 30, (uint16_t)(volume * (LCD_X_SIZE - 90)/100), 15);
 8004080:	fb04 f405 	mul.w	r4, r4, r5
 8004084:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <update_volume_bar+0x50>)
 8004086:	230f      	movs	r3, #15
 8004088:	211e      	movs	r1, #30
 800408a:	202d      	movs	r0, #45	; 0x2d
 800408c:	fb82 5204 	smull	r5, r2, r2, r4
 8004090:	17e4      	asrs	r4, r4, #31
 8004092:	ebc4 1262 	rsb	r2, r4, r2, asr #5
}
 8004096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	BSP_LCD_FillRect(45, 30, (uint16_t)(volume * (LCD_X_SIZE - 90)/100), 15);
 800409a:	b292      	uxth	r2, r2
 800409c:	f00a b89c 	b.w	800e1d8 <BSP_LCD_FillRect>
 80040a0:	880f0f0f 	.word	0x880f0f0f
 80040a4:	ffffa500 	.word	0xffffa500
 80040a8:	51eb851f 	.word	0x51eb851f
 80040ac:	00000000 	.word	0x00000000

080040b0 <update_play_pause_button>:
	Points3[2].X += CONTROL_BUTTON_SIZE*0.4;
	BSP_LCD_FillPolygon(Points3, 3);
}

// Refresh only the PLAY/PAUSE button
void update_play_pause_button() {
 80040b0:	b530      	push	{r4, r5, lr}

	BSP_LCD_SelectLayer(LAYER_BG);
 80040b2:	2000      	movs	r0, #0
void update_play_pause_button() {
 80040b4:	b085      	sub	sp, #20
	BSP_LCD_SelectLayer(LAYER_BG);
 80040b6:	f009 ff3b 	bl	800df30 <BSP_LCD_SelectLayer>
	uint16_t xButton = buttonsLeftUpper[1][0];
 80040ba:	4b33      	ldr	r3, [pc, #204]	; (8004188 <update_play_pause_button+0xd8>)
	uint16_t yButton = buttonsLeftUpper[1][1];
	// Clear field under previous displayed button
	BSP_LCD_SetTextColor(BG_COLOR);
 80040bc:	4833      	ldr	r0, [pc, #204]	; (800418c <update_play_pause_button+0xdc>)
	uint16_t xButton = buttonsLeftUpper[1][0];
 80040be:	889d      	ldrh	r5, [r3, #4]
	uint16_t yButton = buttonsLeftUpper[1][1];
 80040c0:	88dc      	ldrh	r4, [r3, #6]
	BSP_LCD_SetTextColor(BG_COLOR);
 80040c2:	f009 ff51 	bl	800df68 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(xButton, yButton, CONTROL_BUTTON_SIZE, CONTROL_BUTTON_SIZE);
 80040c6:	234c      	movs	r3, #76	; 0x4c
 80040c8:	4628      	mov	r0, r5
 80040ca:	4621      	mov	r1, r4
 80040cc:	461a      	mov	r2, r3
 80040ce:	f00a f883 	bl	800e1d8 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(BUTTON_COLOR);
 80040d2:	482f      	ldr	r0, [pc, #188]	; (8004190 <update_play_pause_button+0xe0>)
 80040d4:	f009 ff48 	bl	800df68 <BSP_LCD_SetTextColor>
	if(playButtonState == PAUSE) {
 80040d8:	4b2e      	ldr	r3, [pc, #184]	; (8004194 <update_play_pause_button+0xe4>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d01b      	beq.n	8004118 <update_play_pause_button+0x68>
		Point Points2[]= {{xButton + 7, yButton + 7}, {xButton + 7, yButton + 7 + 0.806*CONTROL_BUTTON_SIZE},
			{xButton + 7 + 58, yButton + CONTROL_BUTTON_SIZE / 2}};
		BSP_LCD_FillPolygon(Points2, 3);
	} else if(playButtonState == PLAY) {
 80040e0:	b9c3      	cbnz	r3, 8004114 <update_play_pause_button+0x64>
		BSP_LCD_FillRect(xButton + 7, yButton + 7, CONTROL_BUTTON_SIZE*0.27, CONTROL_BUTTON_SIZE - 14);
 80040e2:	3407      	adds	r4, #7
 80040e4:	3507      	adds	r5, #7
 80040e6:	233e      	movs	r3, #62	; 0x3e
 80040e8:	2214      	movs	r2, #20
 80040ea:	b2a4      	uxth	r4, r4
 80040ec:	b2a8      	uxth	r0, r5
 80040ee:	4621      	mov	r1, r4
 80040f0:	f00a f872 	bl	800e1d8 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(xButton + 7 + CONTROL_BUTTON_SIZE*0.431, yButton + 7, CONTROL_BUTTON_SIZE*0.27, CONTROL_BUTTON_SIZE - 14);
 80040f4:	4628      	mov	r0, r5
 80040f6:	f7fc fa35 	bl	8000564 <__aeabi_i2d>
 80040fa:	a31d      	add	r3, pc, #116	; (adr r3, 8004170 <update_play_pause_button+0xc0>)
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	f7fc f8e4 	bl	80002cc <__adddf3>
 8004104:	f7fc fd5a 	bl	8000bbc <__aeabi_d2uiz>
 8004108:	4621      	mov	r1, r4
 800410a:	b280      	uxth	r0, r0
 800410c:	233e      	movs	r3, #62	; 0x3e
 800410e:	2214      	movs	r2, #20
 8004110:	f00a f862 	bl	800e1d8 <BSP_LCD_FillRect>
	}

}
 8004114:	b005      	add	sp, #20
 8004116:	bd30      	pop	{r4, r5, pc}
		Point Points2[]= {{xButton + 7, yButton + 7}, {xButton + 7, yButton + 7 + 0.806*CONTROL_BUTTON_SIZE},
 8004118:	1deb      	adds	r3, r5, #7
 800411a:	1de2      	adds	r2, r4, #7
			{xButton + 7 + 58, yButton + CONTROL_BUTTON_SIZE / 2}};
 800411c:	3541      	adds	r5, #65	; 0x41
		Point Points2[]= {{xButton + 7, yButton + 7}, {xButton + 7, yButton + 7 + 0.806*CONTROL_BUTTON_SIZE},
 800411e:	b21b      	sxth	r3, r3
 8004120:	4610      	mov	r0, r2
 8004122:	f8ad 2006 	strh.w	r2, [sp, #6]
 8004126:	f8ad 3004 	strh.w	r3, [sp, #4]
 800412a:	f8ad 3008 	strh.w	r3, [sp, #8]
 800412e:	f7fc fa19 	bl	8000564 <__aeabi_i2d>
 8004132:	a311      	add	r3, pc, #68	; (adr r3, 8004178 <update_play_pause_button+0xc8>)
 8004134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004138:	f7fc f8c8 	bl	80002cc <__adddf3>
 800413c:	f7fc fd16 	bl	8000b6c <__aeabi_d2iz>
 8004140:	f8ad 000a 	strh.w	r0, [sp, #10]
			{xButton + 7 + 58, yButton + CONTROL_BUTTON_SIZE / 2}};
 8004144:	4620      	mov	r0, r4
		Point Points2[]= {{xButton + 7, yButton + 7}, {xButton + 7, yButton + 7 + 0.806*CONTROL_BUTTON_SIZE},
 8004146:	f8ad 500c 	strh.w	r5, [sp, #12]
			{xButton + 7 + 58, yButton + CONTROL_BUTTON_SIZE / 2}};
 800414a:	f7fc fa0b 	bl	8000564 <__aeabi_i2d>
 800414e:	a30c      	add	r3, pc, #48	; (adr r3, 8004180 <update_play_pause_button+0xd0>)
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f7fc f8ba 	bl	80002cc <__adddf3>
		Point Points2[]= {{xButton + 7, yButton + 7}, {xButton + 7, yButton + 7 + 0.806*CONTROL_BUTTON_SIZE},
 8004158:	f7fc fd08 	bl	8000b6c <__aeabi_d2iz>
		BSP_LCD_FillPolygon(Points2, 3);
 800415c:	2103      	movs	r1, #3
		Point Points2[]= {{xButton + 7, yButton + 7}, {xButton + 7, yButton + 7 + 0.806*CONTROL_BUTTON_SIZE},
 800415e:	f8ad 000e 	strh.w	r0, [sp, #14]
		BSP_LCD_FillPolygon(Points2, 3);
 8004162:	a801      	add	r0, sp, #4
 8004164:	f00a f88a 	bl	800e27c <BSP_LCD_FillPolygon>
}
 8004168:	b005      	add	sp, #20
 800416a:	bd30      	pop	{r4, r5, pc}
 800416c:	f3af 8000 	nop.w
 8004170:	03afb7e9 	.word	0x03afb7e9
 8004174:	40408ce7 	.word	0x40408ce7
 8004178:	6a161e51 	.word	0x6a161e51
 800417c:	404ef34d 	.word	0x404ef34d
 8004180:	33333333 	.word	0x33333333
 8004184:	40433333 	.word	0x40433333
 8004188:	20000008 	.word	0x20000008
 800418c:	880f0f0f 	.word	0x880f0f0f
 8004190:	ff008000 	.word	0xff008000
 8004194:	20005e78 	.word	0x20005e78

08004198 <refresh_screen>:
void refresh_screen(const char *info_text) {
 8004198:	b510      	push	{r4, lr}
 800419a:	4604      	mov	r4, r0
 800419c:	b09a      	sub	sp, #104	; 0x68
	BSP_LCD_SelectLayer(LAYER_FG);
 800419e:	2001      	movs	r0, #1
 80041a0:	f009 fec6 	bl	800df30 <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(BG_COLOR);
 80041a4:	480e      	ldr	r0, [pc, #56]	; (80041e0 <refresh_screen+0x48>)
 80041a6:	f009 fedf 	bl	800df68 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, YPix(TEXT_Y_POSITION), LCD_X_SIZE, 40);
 80041aa:	2328      	movs	r3, #40	; 0x28
 80041ac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80041b0:	2188      	movs	r1, #136	; 0x88
 80041b2:	2000      	movs	r0, #0
 80041b4:	f00a f810 	bl	800e1d8 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(TEXT_COLOR);
 80041b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041bc:	f009 fed4 	bl	800df68 <BSP_LCD_SetTextColor>
	sprintf(buf, " %s", info_text);
 80041c0:	4622      	mov	r2, r4
 80041c2:	a801      	add	r0, sp, #4
 80041c4:	4907      	ldr	r1, [pc, #28]	; (80041e4 <refresh_screen+0x4c>)
 80041c6:	f01b fbf5 	bl	801f9b4 <siprintf>
	BSP_LCD_DisplayStringAt(0, YPix(TEXT_Y_POSITION), (unsigned char *)buf,CENTER_MODE);
 80041ca:	aa01      	add	r2, sp, #4
 80041cc:	2301      	movs	r3, #1
 80041ce:	2188      	movs	r1, #136	; 0x88
 80041d0:	2000      	movs	r0, #0
 80041d2:	f009 ffa5 	bl	800e120 <BSP_LCD_DisplayStringAt>
	update_play_pause_button();
 80041d6:	f7ff ff6b 	bl	80040b0 <update_play_pause_button>
}
 80041da:	b01a      	add	sp, #104	; 0x68
 80041dc:	bd10      	pop	{r4, pc}
 80041de:	bf00      	nop
 80041e0:	880f0f0f 	.word	0x880f0f0f
 80041e4:	08020d30 	.word	0x08020d30

080041e8 <draw_buttons>:
void draw_buttons() {
 80041e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	BSP_LCD_SetTextColor(BUTTON_COLOR);
 80041ea:	4e77      	ldr	r6, [pc, #476]	; (80043c8 <draw_buttons+0x1e0>)
void draw_buttons() {
 80041ec:	b087      	sub	sp, #28
	xButton = buttonsLeftUpper[0][0];
 80041ee:	4c77      	ldr	r4, [pc, #476]	; (80043cc <draw_buttons+0x1e4>)
	BSP_LCD_SetTextColor(BUTTON_COLOR);
 80041f0:	4630      	mov	r0, r6
 80041f2:	f009 feb9 	bl	800df68 <BSP_LCD_SetTextColor>
	xButton = buttonsLeftUpper[0][0];
 80041f6:	8827      	ldrh	r7, [r4, #0]
	yButton = buttonsLeftUpper[0][1];
 80041f8:	8865      	ldrh	r5, [r4, #2]
	Point Points1[]= {{xButton + 7, yButton + CONTROL_BUTTON_SIZE / 2}, {xButton + CONTROL_BUTTON_SIZE / 2, yButton + 7}, 
 80041fa:	1dfb      	adds	r3, r7, #7
 80041fc:	4628      	mov	r0, r5
 80041fe:	3507      	adds	r5, #7
 8004200:	f8ad 3000 	strh.w	r3, [sp]
 8004204:	f7fc f9ae 	bl	8000564 <__aeabi_i2d>
 8004208:	a369      	add	r3, pc, #420	; (adr r3, 80043b0 <draw_buttons+0x1c8>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f7fc f85d 	bl	80002cc <__adddf3>
 8004212:	f7fc fcab 	bl	8000b6c <__aeabi_d2iz>
 8004216:	f8ad 0002 	strh.w	r0, [sp, #2]
 800421a:	4638      	mov	r0, r7
 800421c:	f7fc f9a2 	bl	8000564 <__aeabi_i2d>
 8004220:	a363      	add	r3, pc, #396	; (adr r3, 80043b0 <draw_buttons+0x1c8>)
 8004222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004226:	f7fc f851 	bl	80002cc <__adddf3>
 800422a:	f7fc fc9f 	bl	8000b6c <__aeabi_d2iz>
 800422e:	f8ad 5006 	strh.w	r5, [sp, #6]
 8004232:	b203      	sxth	r3, r0
		{xButton + CONTROL_BUTTON_SIZE / 2, yButton + 7 + CONTROL_BUTTON_SIZE*0.806}};
 8004234:	4628      	mov	r0, r5
	Point Points1[]= {{xButton + 7, yButton + CONTROL_BUTTON_SIZE / 2}, {xButton + CONTROL_BUTTON_SIZE / 2, yButton + 7}, 
 8004236:	f8ad 3004 	strh.w	r3, [sp, #4]
 800423a:	f8ad 3008 	strh.w	r3, [sp, #8]
		{xButton + CONTROL_BUTTON_SIZE / 2, yButton + 7 + CONTROL_BUTTON_SIZE*0.806}};
 800423e:	f7fc f991 	bl	8000564 <__aeabi_i2d>
 8004242:	a35d      	add	r3, pc, #372	; (adr r3, 80043b8 <draw_buttons+0x1d0>)
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	f7fc f840 	bl	80002cc <__adddf3>
	Point Points1[]= {{xButton + 7, yButton + CONTROL_BUTTON_SIZE / 2}, {xButton + CONTROL_BUTTON_SIZE / 2, yButton + 7}, 
 800424c:	f7fc fc8e 	bl	8000b6c <__aeabi_d2iz>
	BSP_LCD_FillPolygon(Points1, 3);
 8004250:	2103      	movs	r1, #3
	Point Points1[]= {{xButton + 7, yButton + CONTROL_BUTTON_SIZE / 2}, {xButton + CONTROL_BUTTON_SIZE / 2, yButton + 7}, 
 8004252:	f8ad 000a 	strh.w	r0, [sp, #10]
	BSP_LCD_FillPolygon(Points1, 3);
 8004256:	4668      	mov	r0, sp
 8004258:	f00a f810 	bl	800e27c <BSP_LCD_FillPolygon>
	Points1[0].X += CONTROL_BUTTON_SIZE*0.4;
 800425c:	f9bd 0000 	ldrsh.w	r0, [sp]
 8004260:	f7fc f980 	bl	8000564 <__aeabi_i2d>
 8004264:	a356      	add	r3, pc, #344	; (adr r3, 80043c0 <draw_buttons+0x1d8>)
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f7fc f82f 	bl	80002cc <__adddf3>
 800426e:	f7fc fc7d 	bl	8000b6c <__aeabi_d2iz>
 8004272:	f8ad 0000 	strh.w	r0, [sp]
	Points1[1].X += CONTROL_BUTTON_SIZE*0.4;
 8004276:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800427a:	f7fc f973 	bl	8000564 <__aeabi_i2d>
 800427e:	a350      	add	r3, pc, #320	; (adr r3, 80043c0 <draw_buttons+0x1d8>)
 8004280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004284:	f7fc f822 	bl	80002cc <__adddf3>
 8004288:	f7fc fc70 	bl	8000b6c <__aeabi_d2iz>
 800428c:	f8ad 0004 	strh.w	r0, [sp, #4]
	Points1[2].X += CONTROL_BUTTON_SIZE*0.4;
 8004290:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8004294:	f7fc f966 	bl	8000564 <__aeabi_i2d>
 8004298:	a349      	add	r3, pc, #292	; (adr r3, 80043c0 <draw_buttons+0x1d8>)
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	f7fc f815 	bl	80002cc <__adddf3>
 80042a2:	f7fc fc63 	bl	8000b6c <__aeabi_d2iz>
	BSP_LCD_FillPolygon(Points1, 3);
 80042a6:	2103      	movs	r1, #3
	Points1[2].X += CONTROL_BUTTON_SIZE*0.4;
 80042a8:	f8ad 0008 	strh.w	r0, [sp, #8]
	BSP_LCD_FillPolygon(Points1, 3);
 80042ac:	4668      	mov	r0, sp
 80042ae:	f009 ffe5 	bl	800e27c <BSP_LCD_FillPolygon>
	update_play_pause_button();
 80042b2:	f7ff fefd 	bl	80040b0 <update_play_pause_button>
	BSP_LCD_SetTextColor(BUTTON_COLOR);
 80042b6:	4630      	mov	r0, r6
 80042b8:	f009 fe56 	bl	800df68 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(15, 29, (unsigned char *)"-", LEFT_MODE);
 80042bc:	2303      	movs	r3, #3
 80042be:	4a44      	ldr	r2, [pc, #272]	; (80043d0 <draw_buttons+0x1e8>)
 80042c0:	211d      	movs	r1, #29
 80042c2:	200f      	movs	r0, #15
 80042c4:	f009 ff2c 	bl	800e120 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(LCD_X_SIZE - 30, 29, (unsigned char *)"+", LEFT_MODE);
 80042c8:	2303      	movs	r3, #3
 80042ca:	4a42      	ldr	r2, [pc, #264]	; (80043d4 <draw_buttons+0x1ec>)
 80042cc:	211d      	movs	r1, #29
 80042ce:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80042d2:	f009 ff25 	bl	800e120 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(BUTTON_COLOR);
 80042d6:	4630      	mov	r0, r6
 80042d8:	f009 fe46 	bl	800df68 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(xButton, yButton + 7, CONTROL_BUTTON_SIZE - 14, CONTROL_BUTTON_SIZE - 14);
 80042dc:	8961      	ldrh	r1, [r4, #10]
 80042de:	233e      	movs	r3, #62	; 0x3e
 80042e0:	8920      	ldrh	r0, [r4, #8]
 80042e2:	3107      	adds	r1, #7
 80042e4:	461a      	mov	r2, r3
 80042e6:	b289      	uxth	r1, r1
 80042e8:	f009 ff76 	bl	800e1d8 <BSP_LCD_FillRect>
	xButton = buttonsLeftUpper[3][0];
 80042ec:	89a5      	ldrh	r5, [r4, #12]
	yButton = buttonsLeftUpper[3][1];
 80042ee:	89e4      	ldrh	r4, [r4, #14]
	Point Points3[]= {{xButton + 7, yButton + 7}, {xButton + 7, yButton + 7 + CONTROL_BUTTON_SIZE*0.806},
 80042f0:	1deb      	adds	r3, r5, #7
 80042f2:	1de2      	adds	r2, r4, #7
 80042f4:	b21b      	sxth	r3, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f8ad 200e 	strh.w	r2, [sp, #14]
 80042fc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004300:	f8ad 3010 	strh.w	r3, [sp, #16]
 8004304:	f7fc f92e 	bl	8000564 <__aeabi_i2d>
 8004308:	a32b      	add	r3, pc, #172	; (adr r3, 80043b8 <draw_buttons+0x1d0>)
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	f7fb ffdd 	bl	80002cc <__adddf3>
 8004312:	f7fc fc2b 	bl	8000b6c <__aeabi_d2iz>
 8004316:	f8ad 0012 	strh.w	r0, [sp, #18]
		{xButton + CONTROL_BUTTON_SIZE / 2 , yButton + CONTROL_BUTTON_SIZE / 2}};
 800431a:	4628      	mov	r0, r5
 800431c:	f7fc f922 	bl	8000564 <__aeabi_i2d>
 8004320:	a323      	add	r3, pc, #140	; (adr r3, 80043b0 <draw_buttons+0x1c8>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f7fb ffd1 	bl	80002cc <__adddf3>
	Point Points3[]= {{xButton + 7, yButton + 7}, {xButton + 7, yButton + 7 + CONTROL_BUTTON_SIZE*0.806},
 800432a:	f7fc fc1f 	bl	8000b6c <__aeabi_d2iz>
 800432e:	f8ad 0014 	strh.w	r0, [sp, #20]
		{xButton + CONTROL_BUTTON_SIZE / 2 , yButton + CONTROL_BUTTON_SIZE / 2}};
 8004332:	4620      	mov	r0, r4
 8004334:	f7fc f916 	bl	8000564 <__aeabi_i2d>
 8004338:	a31d      	add	r3, pc, #116	; (adr r3, 80043b0 <draw_buttons+0x1c8>)
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	f7fb ffc5 	bl	80002cc <__adddf3>
	Point Points3[]= {{xButton + 7, yButton + 7}, {xButton + 7, yButton + 7 + CONTROL_BUTTON_SIZE*0.806},
 8004342:	f7fc fc13 	bl	8000b6c <__aeabi_d2iz>
	BSP_LCD_FillPolygon(Points3, 3);
 8004346:	2103      	movs	r1, #3
	Point Points3[]= {{xButton + 7, yButton + 7}, {xButton + 7, yButton + 7 + CONTROL_BUTTON_SIZE*0.806},
 8004348:	f8ad 0016 	strh.w	r0, [sp, #22]
	BSP_LCD_FillPolygon(Points3, 3);
 800434c:	a803      	add	r0, sp, #12
 800434e:	f009 ff95 	bl	800e27c <BSP_LCD_FillPolygon>
	Points3[0].X += CONTROL_BUTTON_SIZE*0.4;
 8004352:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8004356:	f7fc f905 	bl	8000564 <__aeabi_i2d>
 800435a:	a319      	add	r3, pc, #100	; (adr r3, 80043c0 <draw_buttons+0x1d8>)
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f7fb ffb4 	bl	80002cc <__adddf3>
 8004364:	f7fc fc02 	bl	8000b6c <__aeabi_d2iz>
 8004368:	f8ad 000c 	strh.w	r0, [sp, #12]
	Points3[1].X += CONTROL_BUTTON_SIZE*0.4;
 800436c:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8004370:	f7fc f8f8 	bl	8000564 <__aeabi_i2d>
 8004374:	a312      	add	r3, pc, #72	; (adr r3, 80043c0 <draw_buttons+0x1d8>)
 8004376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437a:	f7fb ffa7 	bl	80002cc <__adddf3>
 800437e:	f7fc fbf5 	bl	8000b6c <__aeabi_d2iz>
 8004382:	f8ad 0010 	strh.w	r0, [sp, #16]
	Points3[2].X += CONTROL_BUTTON_SIZE*0.4;
 8004386:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 800438a:	f7fc f8eb 	bl	8000564 <__aeabi_i2d>
 800438e:	a30c      	add	r3, pc, #48	; (adr r3, 80043c0 <draw_buttons+0x1d8>)
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f7fb ff9a 	bl	80002cc <__adddf3>
 8004398:	f7fc fbe8 	bl	8000b6c <__aeabi_d2iz>
	BSP_LCD_FillPolygon(Points3, 3);
 800439c:	2103      	movs	r1, #3
	Points3[2].X += CONTROL_BUTTON_SIZE*0.4;
 800439e:	f8ad 0014 	strh.w	r0, [sp, #20]
	BSP_LCD_FillPolygon(Points3, 3);
 80043a2:	a803      	add	r0, sp, #12
 80043a4:	f009 ff6a 	bl	800e27c <BSP_LCD_FillPolygon>
}
 80043a8:	b007      	add	sp, #28
 80043aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ac:	f3af 8000 	nop.w
 80043b0:	33333333 	.word	0x33333333
 80043b4:	40433333 	.word	0x40433333
 80043b8:	6a161e50 	.word	0x6a161e50
 80043bc:	404ef34d 	.word	0x404ef34d
 80043c0:	eb851eb8 	.word	0xeb851eb8
 80043c4:	403eb851 	.word	0x403eb851
 80043c8:	ff008000 	.word	0xff008000
 80043cc:	20000008 	.word	0x20000008
 80043d0:	08020d28 	.word	0x08020d28
 80043d4:	08020d2c 	.word	0x08020d2c

080043d8 <draw_background>:
{
 80043d8:	b508      	push	{r3, lr}
	BSP_LCD_SelectLayer(LAYER_BG);
 80043da:	2000      	movs	r0, #0
 80043dc:	f009 fda8 	bl	800df30 <BSP_LCD_SelectLayer>
	draw_buttons();
 80043e0:	f7ff ff02 	bl	80041e8 <draw_buttons>
	BSP_LCD_SelectLayer(LAYER_FG);
 80043e4:	2001      	movs	r0, #1
}
 80043e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BSP_LCD_SelectLayer(LAYER_FG);
 80043ea:	f009 bda1 	b.w	800df30 <BSP_LCD_SelectLayer>
 80043ee:	bf00      	nop

080043f0 <xmp3fixpt_DecodeHuffman>:
 *                byte located at buf + offset)
 *              -1 if null input pointers, huffBlockBits < 0, or decoder runs 
 *                out of bits prematurely (invalid bitstream)
 **************************************************************************************/
int DecodeHuffman(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int huffBlockBits, int gr, int ch)
{
 80043f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f4:	b099      	sub	sp, #100	; 0x64
 80043f6:	9110      	str	r1, [sp, #64]	; 0x40
 80043f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80043fa:	9303      	str	r3, [sp, #12]
	SideInfoSub *sis;
	ScaleFactorInfo *sfi;
	HuffmanInfo *hi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || !mp3DecInfo->HuffmanInfoPS)
 80043fc:	2800      	cmp	r0, #0
 80043fe:	f000 81c3 	beq.w	8004788 <xmp3fixpt_DecodeHuffman+0x398>
 8004402:	6801      	ldr	r1, [r0, #0]
 8004404:	2900      	cmp	r1, #0
 8004406:	f000 81bf 	beq.w	8004788 <xmp3fixpt_DecodeHuffman+0x398>
 800440a:	6844      	ldr	r4, [r0, #4]
 800440c:	940d      	str	r4, [sp, #52]	; 0x34
 800440e:	2c00      	cmp	r4, #0
 8004410:	f000 81ba 	beq.w	8004788 <xmp3fixpt_DecodeHuffman+0x398>
 8004414:	6883      	ldr	r3, [r0, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 81b6 	beq.w	8004788 <xmp3fixpt_DecodeHuffman+0x398>
 800441c:	68c3      	ldr	r3, [r0, #12]
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
	sis = &si->sis[gr][ch];
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));
	hi = (HuffmanInfo*)(mp3DecInfo->HuffmanInfoPS);

	if (huffBlockBits < 0)
 800441e:	9a03      	ldr	r2, [sp, #12]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || !mp3DecInfo->HuffmanInfoPS)
 8004420:	9312      	str	r3, [sp, #72]	; 0x48
 8004422:	fab3 f383 	clz	r3, r3
 8004426:	095b      	lsrs	r3, r3, #5
	if (huffBlockBits < 0)
 8004428:	ea53 73d2 	orrs.w	r3, r3, r2, lsr #31
 800442c:	f040 81ac 	bne.w	8004788 <xmp3fixpt_DecodeHuffman+0x398>
		return -1;

	/* figure out region boundaries (the first 2*bigVals coefficients divided into 3 regions) */
	if (sis->winSwitchFlag && sis->blockType == 2) {
 8004430:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8004432:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004434:	00d5      	lsls	r5, r2, #3
 8004436:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800443c:	950c      	str	r5, [sp, #48]	; 0x30
 800443e:	189a      	adds	r2, r3, r2
 8004440:	930e      	str	r3, [sp, #56]	; 0x38
 8004442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004444:	0112      	lsls	r2, r2, #4
 8004446:	18eb      	adds	r3, r5, r3
 8004448:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800444c:	4422      	add	r2, r4
 800444e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004450:	2b00      	cmp	r3, #0
 8004452:	f040 82ad 	bne.w	80049b0 <xmp3fixpt_DecodeHuffman+0x5c0>
				r1Start = fh->sfBand->l[6] + 2*w;
			}
		}
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
	} else {
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 8004456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004458:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800445a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800445c:	189a      	adds	r2, r3, r2
 800445e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004460:	0112      	lsls	r2, r2, #4
 8004462:	440b      	add	r3, r1
 8004464:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800446a:	4413      	add	r3, r2
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 800446c:	e9d3 2317 	ldrd	r2, r3, [r3, #92]	; 0x5c
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 8004470:	3201      	adds	r2, #1
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 8004472:	4413      	add	r3, r2
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 8004474:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 8004478:	3301      	adds	r3, #1
 800447a:	f930 1013 	ldrsh.w	r1, [r0, r3, lsl #1]
 800447e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	}

	/* offset rEnd index by 1 so first region = rEnd[1] - rEnd[0], etc. */
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 8004480:	9823      	ldr	r0, [sp, #140]	; 0x8c
	rEnd[2] = MIN(r2Start, rEnd[3]);
	rEnd[1] = MIN(r1Start, rEnd[3]);
	rEnd[0] = 0;
 8004482:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
 8004486:	9f12      	ldr	r7, [sp, #72]	; 0x48
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 8004488:	181e      	adds	r6, r3, r0
 800448a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800448c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800448e:	181c      	adds	r4, r3, r0
 8004490:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8004492:	00f3      	lsls	r3, r6, #3
 8004494:	eb07 0580 	add.w	r5, r7, r0, lsl #2
	rEnd[0] = 0;
 8004498:	2000      	movs	r0, #0
	hi->nonZeroBound[ch] = rEnd[3];

	/* decode Huffman pairs (rEnd[i] are always even numbers) */
	bitsLeft = huffBlockBits;
	for (i = 0; i < 3; i++) {
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800449a:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 800449e:	9f10      	ldr	r7, [sp, #64]	; 0x40
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 80044a0:	0124      	lsls	r4, r4, #4
	hi->nonZeroBound[ch] = rEnd[3];
 80044a2:	f505 5590 	add.w	r5, r5, #4608	; 0x1200
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 80044a6:	960f      	str	r6, [sp, #60]	; 0x3c
	hi->nonZeroBound[ch] = rEnd[3];
 80044a8:	9511      	str	r5, [sp, #68]	; 0x44
 80044aa:	f103 0544 	add.w	r5, r3, #68	; 0x44
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 80044ae:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80044b0:	4423      	add	r3, r4
 80044b2:	442c      	add	r4, r5
	hi->nonZeroBound[ch] = rEnd[3];
 80044b4:	9d11      	ldr	r5, [sp, #68]	; 0x44
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 80044b6:	4433      	add	r3, r6
	rEnd[0] = 0;
 80044b8:	f84b 0d10 	str.w	r0, [fp, #-16]!
 80044bc:	1934      	adds	r4, r6, r4
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 80044be:	9705      	str	r7, [sp, #20]
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	9408      	str	r4, [sp, #32]
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	f8cd b018 	str.w	fp, [sp, #24]
 80044ca:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80044ce:	bfa8      	it	ge
 80044d0:	f44f 7310 	movge.w	r3, #576	; 0x240
	rEnd[2] = MIN(r2Start, rEnd[3]);
 80044d4:	4299      	cmp	r1, r3
 80044d6:	4618      	mov	r0, r3
	hi->nonZeroBound[ch] = rEnd[3];
 80044d8:	602b      	str	r3, [r5, #0]
	rEnd[2] = MIN(r2Start, rEnd[3]);
 80044da:	bfa8      	it	ge
 80044dc:	4619      	movge	r1, r3
	rEnd[1] = MIN(r1Start, rEnd[3]);
 80044de:	429a      	cmp	r2, r3
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 80044e0:	9313      	str	r3, [sp, #76]	; 0x4c
	rEnd[1] = MIN(r1Start, rEnd[3]);
 80044e2:	bfa8      	it	ge
 80044e4:	461a      	movge	r2, r3
 80044e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	rEnd[2] = MIN(r2Start, rEnd[3]);
 80044e8:	9116      	str	r1, [sp, #88]	; 0x58
	rEnd[1] = MIN(r1Start, rEnd[3]);
 80044ea:	9215      	str	r2, [sp, #84]	; 0x54
 80044ec:	465a      	mov	r2, fp
 80044ee:	681b      	ldr	r3, [r3, #0]
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 80044f0:	9017      	str	r0, [sp, #92]	; 0x5c
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 80044f2:	4611      	mov	r1, r2
 80044f4:	6816      	ldr	r6, [r2, #0]
 80044f6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80044fa:	eba2 0c06 	sub.w	ip, r2, r6
 80044fe:	9106      	str	r1, [sp, #24]
	if(nVals <= 0) 
 8004500:	f1bc 0f00 	cmp.w	ip, #0
 8004504:	f340 8248 	ble.w	8004998 <xmp3fixpt_DecodeHuffman+0x5a8>
	if (bitsLeft < 0)
 8004508:	9a03      	ldr	r2, [sp, #12]
 800450a:	2a00      	cmp	r2, #0
 800450c:	f2c0 813c 	blt.w	8004788 <xmp3fixpt_DecodeHuffman+0x398>
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 8004510:	9a08      	ldr	r2, [sp, #32]
	cachedBits = (8 - bitOffset) & 0x07;
 8004512:	425b      	negs	r3, r3
	tabType = huffTabLookup[tabIdx].tabType;
 8004514:	499f      	ldr	r1, [pc, #636]	; (8004794 <xmp3fixpt_DecodeHuffman+0x3a4>)
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 8004516:	6812      	ldr	r2, [r2, #0]
	if (cachedBits)
 8004518:	f013 0307 	ands.w	r3, r3, #7
	tabType = huffTabLookup[tabIdx].tabType;
 800451c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8004520:	7909      	ldrb	r1, [r1, #4]
 8004522:	9101      	str	r1, [sp, #4]
	if (cachedBits)
 8004524:	f000 8235 	beq.w	8004992 <xmp3fixpt_DecodeHuffman+0x5a2>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 8004528:	9c05      	ldr	r4, [sp, #20]
 800452a:	f1c3 0020 	rsb	r0, r3, #32
 800452e:	7821      	ldrb	r1, [r4, #0]
 8004530:	1c65      	adds	r5, r4, #1
 8004532:	fa01 f000 	lsl.w	r0, r1, r0
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 8004536:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004538:	eb01 0686 	add.w	r6, r1, r6, lsl #2
	if (tabType == noBits) {
 800453c:	9901      	ldr	r1, [sp, #4]
 800453e:	2900      	cmp	r1, #0
 8004540:	f040 8132 	bne.w	80047a8 <xmp3fixpt_DecodeHuffman+0x3b8>
 8004544:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004548:	f106 0308 	add.w	r3, r6, #8
 800454c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004550:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
			xy[i+0] = 0;
 8004554:	2200      	movs	r2, #0
			xy[i+1] = 0;
 8004556:	e9c6 2200 	strd	r2, r2, [r6]
 800455a:	3608      	adds	r6, #8
		for (i = 0; i < nVals; i+=2) {
 800455c:	42b3      	cmp	r3, r6
 800455e:	d1f9      	bne.n	8004554 <xmp3fixpt_DecodeHuffman+0x164>
		if (bitsUsed < 0 || bitsUsed > bitsLeft)	/* error - overran end of bitstream */
			return -1;

		/* update bitstream position */
		buf += (bitsUsed + *bitOffset) >> 3;
 8004560:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004562:	9808      	ldr	r0, [sp, #32]
 8004564:	680b      	ldr	r3, [r1, #0]
 8004566:	3004      	adds	r0, #4
 8004568:	441a      	add	r2, r3
 800456a:	9008      	str	r0, [sp, #32]
 800456c:	9805      	ldr	r0, [sp, #20]
		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 800456e:	f002 0307 	and.w	r3, r2, #7
		buf += (bitsUsed + *bitOffset) >> 3;
 8004572:	eb00 02e2 	add.w	r2, r0, r2, asr #3
		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 8004576:	600b      	str	r3, [r1, #0]
	for (i = 0; i < 3; i++) {
 8004578:	a917      	add	r1, sp, #92	; 0x5c
		buf += (bitsUsed + *bitOffset) >> 3;
 800457a:	9205      	str	r2, [sp, #20]
	for (i = 0; i < 3; i++) {
 800457c:	9a06      	ldr	r2, [sp, #24]
 800457e:	4291      	cmp	r1, r2
 8004580:	d1b7      	bne.n	80044f2 <xmp3fixpt_DecodeHuffman+0x102>
	if (bitsLeft <= 0)
 8004582:	9a03      	ldr	r2, [sp, #12]
 8004584:	2a00      	cmp	r2, #0
 8004586:	f000 8287 	beq.w	8004a98 <xmp3fixpt_DecodeHuffman+0x6a8>
		bitsLeft -= bitsUsed;
	}

	/* decode Huffman quads (if any) */
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800458a:	9822      	ldr	r0, [sp, #136]	; 0x88
	cachedBits = (8 - bitOffset) & 0x07;
 800458c:	425b      	negs	r3, r3
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800458e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	tBase = (unsigned char *)quadTable + quadTabOffset[tabIdx];
 8004590:	4c81      	ldr	r4, [pc, #516]	; (8004798 <xmp3fixpt_DecodeHuffman+0x3a8>)
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 8004592:	4402      	add	r2, r0
 8004594:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8004596:	4611      	mov	r1, r2
 8004598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800459a:	0109      	lsls	r1, r1, #4
 800459c:	1810      	adds	r0, r2, r0
	maxBits = quadTabMaxBits[tabIdx];
 800459e:	4a7f      	ldr	r2, [pc, #508]	; (800479c <xmp3fixpt_DecodeHuffman+0x3ac>)
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 80045a0:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80045a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045a6:	4401      	add	r1, r0
 80045a8:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
	maxBits = quadTabMaxBits[tabIdx];
 80045aa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	if (cachedBits)
 80045ae:	f013 0207 	ands.w	r2, r3, #7
	tBase = (unsigned char *)quadTable + quadTabOffset[tabIdx];
 80045b2:	f854 a021 	ldr.w	sl, [r4, r1, lsl #2]
	if (cachedBits)
 80045b6:	f040 8215 	bne.w	80049e4 <xmp3fixpt_DecodeHuffman+0x5f4>
		buf += (bitsUsed + *bitOffset) >> 3;
 80045ba:	9b05      	ldr	r3, [sp, #20]
	cache = 0;
 80045bc:	4611      	mov	r1, r2
		buf += (bitsUsed + *bitOffset) >> 3;
 80045be:	9301      	str	r3, [sp, #4]
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 80045c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045c2:	f240 2c3d 	movw	ip, #573	; 0x23d
	i = padBits = 0;
 80045c6:	f04f 0e00 	mov.w	lr, #0
 80045ca:	f1c0 0820 	rsb	r8, r0, #32
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 80045ce:	461d      	mov	r5, r3
 80045d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	i = padBits = 0;
 80045d2:	4677      	mov	r7, lr
 80045d4:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 80047a4 <xmp3fixpt_DecodeHuffman+0x3b4>
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 80045d8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80045dc:	ebac 0c03 	sub.w	ip, ip, r3
	bitsLeft -= cachedBits;
 80045e0:	9b03      	ldr	r3, [sp, #12]
 80045e2:	eba3 0b02 	sub.w	fp, r3, r2
	while (i < (nVals - 3)) {
 80045e6:	4567      	cmp	r7, ip
 80045e8:	da57      	bge.n	800469a <xmp3fixpt_DecodeHuffman+0x2aa>
		if (bitsLeft >= 16) {
 80045ea:	f1bb 0f0f 	cmp.w	fp, #15
 80045ee:	f340 8207 	ble.w	8004a00 <xmp3fixpt_DecodeHuffman+0x610>
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 80045f2:	9801      	ldr	r0, [sp, #4]
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 80045f4:	f1c2 0410 	rsb	r4, r2, #16
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 80045f8:	f1c2 0318 	rsb	r3, r2, #24
			bitsLeft -= 16;
 80045fc:	f1ab 0b10 	sub.w	fp, fp, #16
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8004600:	7806      	ldrb	r6, [r0, #0]
			cachedBits += 16;
 8004602:	3210      	adds	r2, #16
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 8004604:	7840      	ldrb	r0, [r0, #1]
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8004606:	fa06 f303 	lsl.w	r3, r6, r3
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800460a:	40a0      	lsls	r0, r4
 800460c:	9c01      	ldr	r4, [sp, #4]
 800460e:	4303      	orrs	r3, r0
 8004610:	3402      	adds	r4, #2
 8004612:	4319      	orrs	r1, r3
 8004614:	9401      	str	r4, [sp, #4]
 8004616:	f105 0010 	add.w	r0, r5, #16
 800461a:	e00e      	b.n	800463a <xmp3fixpt_DecodeHuffman+0x24a>
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800461c:	2a09      	cmp	r2, #9
			*vwxy++ = w;
 800461e:	f840 5c0c 	str.w	r5, [r0, #-12]
			*vwxy++ = v;
 8004622:	f840 6c10 	str.w	r6, [r0, #-16]
 8004626:	4605      	mov	r5, r0
			i += 4;
 8004628:	f107 0704 	add.w	r7, r7, #4
			*vwxy++ = y;
 800462c:	e940 4302 	strd	r4, r3, [r0, #-8]
 8004630:	f100 0010 	add.w	r0, r0, #16
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 8004634:	ddd7      	ble.n	80045e6 <xmp3fixpt_DecodeHuffman+0x1f6>
 8004636:	4567      	cmp	r7, ip
 8004638:	dad5      	bge.n	80045e6 <xmp3fixpt_DecodeHuffman+0x1f6>
			cw = tBase[cache >> (32 - maxBits)];
 800463a:	fa21 f308 	lsr.w	r3, r1, r8
 800463e:	4453      	add	r3, sl
 8004640:	f819 3003 	ldrb.w	r3, [r9, r3]
			len = GetHLenQ(cw);
 8004644:	091c      	lsrs	r4, r3, #4
			v = GetCWVQ(cw);	if(v) {ApplySign(v, cache); cache <<= 1; cachedBits--;}
 8004646:	f013 0608 	ands.w	r6, r3, #8
			cachedBits -= len;
 800464a:	eba2 0204 	sub.w	r2, r2, r4
			cache <<= len;
 800464e:	fa01 f104 	lsl.w	r1, r1, r4
			v = GetCWVQ(cw);	if(v) {ApplySign(v, cache); cache <<= 1; cachedBits--;}
 8004652:	d005      	beq.n	8004660 <xmp3fixpt_DecodeHuffman+0x270>
 8004654:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004658:	3a01      	subs	r2, #1
 800465a:	0049      	lsls	r1, r1, #1
 800465c:	f046 0601 	orr.w	r6, r6, #1
			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
 8004660:	f013 0504 	ands.w	r5, r3, #4
 8004664:	d005      	beq.n	8004672 <xmp3fixpt_DecodeHuffman+0x282>
 8004666:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800466a:	3a01      	subs	r2, #1
 800466c:	0049      	lsls	r1, r1, #1
 800466e:	f045 0501 	orr.w	r5, r5, #1
			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
 8004672:	f013 0402 	ands.w	r4, r3, #2
 8004676:	d005      	beq.n	8004684 <xmp3fixpt_DecodeHuffman+0x294>
 8004678:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800467c:	3a01      	subs	r2, #1
 800467e:	0049      	lsls	r1, r1, #1
 8004680:	f044 0401 	orr.w	r4, r4, #1
			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}
 8004684:	f013 0301 	ands.w	r3, r3, #1
 8004688:	d005      	beq.n	8004696 <xmp3fixpt_DecodeHuffman+0x2a6>
 800468a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800468e:	3a01      	subs	r2, #1
 8004690:	0049      	lsls	r1, r1, #1
 8004692:	f043 0301 	orr.w	r3, r3, #1
			if (cachedBits < padBits)
 8004696:	4572      	cmp	r2, lr
 8004698:	dac0      	bge.n	800461c <xmp3fixpt_DecodeHuffman+0x22c>
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800469a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800469c:	6813      	ldr	r3, [r2, #0]
 800469e:	441f      	add	r7, r3

	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 80046a0:	f5b7 7f10 	cmp.w	r7, #576	; 0x240
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 80046a4:	6017      	str	r7, [r2, #0]
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 80046a6:	da0f      	bge.n	80046c8 <xmp3fixpt_DecodeHuffman+0x2d8>
		hi->huffDecBuf[ch][i] = 0;
 80046a8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80046aa:	2100      	movs	r1, #0
 80046ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046ae:	4413      	add	r3, r2
 80046b0:	ebc7 7287 	rsb	r2, r7, r7, lsl #30
 80046b4:	eb07 1783 	add.w	r7, r7, r3, lsl #6
 80046b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80046ba:	0092      	lsls	r2, r2, #2
 80046bc:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 80046c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c4:	f01b f826 	bl	801f714 <memset>
	
	/* If bits used for 576 samples < huffBlockBits, then the extras are considered
	 *  to be stuffing bits (throw away, but need to return correct bitstream position) 
	 */
	buf += (bitsLeft + *bitOffset) >> 3;
 80046c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046ca:	9903      	ldr	r1, [sp, #12]
 80046cc:	6813      	ldr	r3, [r2, #0]
 80046ce:	4419      	add	r1, r3
 80046d0:	460b      	mov	r3, r1
 80046d2:	9905      	ldr	r1, [sp, #20]
 80046d4:	eb01 00e3 	add.w	r0, r1, r3, asr #3
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
	
	return (buf - startBuf);
 80046d8:	9910      	ldr	r1, [sp, #64]	; 0x40
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
 80046da:	f003 0307 	and.w	r3, r3, #7
	return (buf - startBuf);
 80046de:	1a40      	subs	r0, r0, r1
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
 80046e0:	6013      	str	r3, [r2, #0]
}
 80046e2:	b019      	add	sp, #100	; 0x64
 80046e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		maxBits = GetMaxbits(tBase[0]);
 80046e8:	4a2d      	ldr	r2, [pc, #180]	; (80047a0 <xmp3fixpt_DecodeHuffman+0x3b0>)
		padBits = 0;
 80046ea:	f04f 0800 	mov.w	r8, #0
 80046ee:	f8dd 9008 	ldr.w	r9, [sp, #8]
		maxBits = GetMaxbits(tBase[0]);
 80046f2:	f832 7011 	ldrh.w	r7, [r2, r1, lsl #1]
 80046f6:	4632      	mov	r2, r6
 80046f8:	f007 070f 	and.w	r7, r7, #15
 80046fc:	f1c7 0720 	rsb	r7, r7, #32
			if (bitsLeft >= 16) {
 8004700:	f1be 0f0f 	cmp.w	lr, #15
 8004704:	f340 81dc 	ble.w	8004ac0 <xmp3fixpt_DecodeHuffman+0x6d0>
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8004708:	7829      	ldrb	r1, [r5, #0]
 800470a:	f1c3 0a18 	rsb	sl, r3, #24
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800470e:	786c      	ldrb	r4, [r5, #1]
 8004710:	f1c3 0610 	rsb	r6, r3, #16
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8004714:	fa01 f10a 	lsl.w	r1, r1, sl
				bitsLeft -= 16;
 8004718:	f1ae 0e10 	sub.w	lr, lr, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800471c:	40b4      	lsls	r4, r6
 800471e:	3502      	adds	r5, #2
				cachedBits += 16;
 8004720:	3310      	adds	r3, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 8004722:	4321      	orrs	r1, r4
 8004724:	4308      	orrs	r0, r1
 8004726:	f102 0108 	add.w	r1, r2, #8
 800472a:	e00a      	b.n	8004742 <xmp3fixpt_DecodeHuffman+0x352>
			while (nVals > 0 && cachedBits >= 11 ) {
 800472c:	f1bc 0f00 	cmp.w	ip, #0
				*xy++ = y;
 8004730:	e941 4602 	strd	r4, r6, [r1, #-8]
 8004734:	f101 0108 	add.w	r1, r1, #8
			while (nVals > 0 && cachedBits >= 11 ) {
 8004738:	f340 81b0 	ble.w	8004a9c <xmp3fixpt_DecodeHuffman+0x6ac>
 800473c:	2b0a      	cmp	r3, #10
 800473e:	f340 81ad 	ble.w	8004a9c <xmp3fixpt_DecodeHuffman+0x6ac>
				cw = tBase[cache >> (32 - maxBits)];
 8004742:	fa20 f207 	lsr.w	r2, r0, r7
 8004746:	eb09 0242 	add.w	r2, r9, r2, lsl #1
 800474a:	8852      	ldrh	r2, [r2, #2]
				len = GetHLen(cw);
 800474c:	ea4f 3a12 	mov.w	sl, r2, lsr #12
 8004750:	f3c2 1603 	ubfx	r6, r2, #4, #4
				cachedBits -= len;
 8004754:	eba3 030a 	sub.w	r3, r3, sl
				x = GetCWX(cw);		if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 8004758:	4634      	mov	r4, r6
				cache <<= len;
 800475a:	fa00 f00a 	lsl.w	r0, r0, sl
				x = GetCWX(cw);		if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800475e:	b126      	cbz	r6, 800476a <xmp3fixpt_DecodeHuffman+0x37a>
 8004760:	f000 4400 	and.w	r4, r0, #2147483648	; 0x80000000
 8004764:	3b01      	subs	r3, #1
 8004766:	0040      	lsls	r0, r0, #1
 8004768:	4334      	orrs	r4, r6
 800476a:	f3c2 2203 	ubfx	r2, r2, #8, #4
				y = GetCWY(cw);		if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800476e:	f000 4a00 	and.w	sl, r0, #2147483648	; 0x80000000
 8004772:	4616      	mov	r6, r2
 8004774:	b11a      	cbz	r2, 800477e <xmp3fixpt_DecodeHuffman+0x38e>
 8004776:	ea4a 0602 	orr.w	r6, sl, r2
 800477a:	3b01      	subs	r3, #1
 800477c:	0040      	lsls	r0, r0, #1
				if (cachedBits < padBits)
 800477e:	4543      	cmp	r3, r8
				nVals -= 2;
 8004780:	f1ac 0c02 	sub.w	ip, ip, #2
 8004784:	460a      	mov	r2, r1
				if (cachedBits < padBits)
 8004786:	dad1      	bge.n	800472c <xmp3fixpt_DecodeHuffman+0x33c>
		return -1;
 8004788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800478c:	b019      	add	sp, #100	; 0x64
 800478e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004792:	bf00      	nop
 8004794:	08020d40 	.word	0x08020d40
 8004798:	08022fec 	.word	0x08022fec
 800479c:	08022fe4 	.word	0x08022fe4
 80047a0:	08020ec0 	.word	0x08020ec0
 80047a4:	08022ff4 	.word	0x08022ff4
	bitsLeft -= cachedBits;
 80047a8:	9c03      	ldr	r4, [sp, #12]
	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 80047aa:	49c2      	ldr	r1, [pc, #776]	; (8004ab4 <xmp3fixpt_DecodeHuffman+0x6c4>)
	bitsLeft -= cachedBits;
 80047ac:	eba4 0e03 	sub.w	lr, r4, r3
	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 80047b0:	4cc1      	ldr	r4, [pc, #772]	; (8004ab8 <xmp3fixpt_DecodeHuffman+0x6c8>)
 80047b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80047b6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80047ba:	9402      	str	r4, [sp, #8]
	} else if (tabType == oneShot) {
 80047bc:	9c01      	ldr	r4, [sp, #4]
 80047be:	2c01      	cmp	r4, #1
 80047c0:	d092      	beq.n	80046e8 <xmp3fixpt_DecodeHuffman+0x2f8>
	} else if (tabType == loopLinbits || tabType == loopNoLinbits) {
 80047c2:	1ea1      	subs	r1, r4, #2
 80047c4:	2901      	cmp	r1, #1
 80047c6:	d8df      	bhi.n	8004788 <xmp3fixpt_DecodeHuffman+0x398>
	linBits = huffTabLookup[tabIdx].linBits;
 80047c8:	49bc      	ldr	r1, [pc, #752]	; (8004abc <xmp3fixpt_DecodeHuffman+0x6cc>)
		padBits = 0;
 80047ca:	2400      	movs	r4, #0
	linBits = huffTabLookup[tabIdx].linBits;
 80047cc:	f851 1032 	ldr.w	r1, [r1, r2, lsl #3]
		padBits = 0;
 80047d0:	9404      	str	r4, [sp, #16]
	linBits = huffTabLookup[tabIdx].linBits;
 80047d2:	9107      	str	r1, [sp, #28]
					minBits = linBits + 1;
 80047d4:	1c4c      	adds	r4, r1, #1
	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 80047d6:	9a02      	ldr	r2, [sp, #8]
					y += (int)(cache >> (32 - linBits));
 80047d8:	f1c1 0120 	rsb	r1, r1, #32
					minBits = linBits + 1;
 80047dc:	9409      	str	r4, [sp, #36]	; 0x24
					y += (int)(cache >> (32 - linBits));
 80047de:	910a      	str	r1, [sp, #40]	; 0x28
			if (bitsLeft >= 16) {
 80047e0:	f1be 0f0f 	cmp.w	lr, #15
 80047e4:	f340 8134 	ble.w	8004a50 <xmp3fixpt_DecodeHuffman+0x660>
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 80047e8:	7829      	ldrb	r1, [r5, #0]
 80047ea:	f1c3 0818 	rsb	r8, r3, #24
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 80047ee:	786c      	ldrb	r4, [r5, #1]
 80047f0:	f1c3 0710 	rsb	r7, r3, #16
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 80047f4:	fa01 f108 	lsl.w	r1, r1, r8
				bitsLeft -= 16;
 80047f8:	f1ae 0e10 	sub.w	lr, lr, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 80047fc:	40bc      	lsls	r4, r7
 80047fe:	3502      	adds	r5, #2
				cachedBits += 16;
 8004800:	3310      	adds	r3, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 8004802:	4321      	orrs	r1, r4
 8004804:	4308      	orrs	r0, r1
			while (nVals > 0 && cachedBits >= 11 ) {
 8004806:	f1bc 0f00 	cmp.w	ip, #0
 800480a:	f340 80b7 	ble.w	800497c <xmp3fixpt_DecodeHuffman+0x58c>
 800480e:	2b0a      	cmp	r3, #10
 8004810:	f340 80b4 	ble.w	800497c <xmp3fixpt_DecodeHuffman+0x58c>
				maxBits = GetMaxbits(tCurr[0]);
 8004814:	8814      	ldrh	r4, [r2, #0]
 8004816:	f004 040f 	and.w	r4, r4, #15
				cw = tCurr[(cache >> (32 - maxBits)) + 1];
 800481a:	f1c4 0120 	rsb	r1, r4, #32
 800481e:	fa20 f101 	lsr.w	r1, r0, r1
 8004822:	3101      	adds	r1, #1
 8004824:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
				if (!len) {
 8004828:	0b0f      	lsrs	r7, r1, #12
 800482a:	f000 80e4 	beq.w	80049f6 <xmp3fixpt_DecodeHuffman+0x606>
				if (x == 15 && tabType == loopLinbits) {
 800482e:	9a01      	ldr	r2, [sp, #4]
				x = GetCWX(cw);
 8004830:	f3c1 1403 	ubfx	r4, r1, #4, #4
				cachedBits -= len;
 8004834:	1bdb      	subs	r3, r3, r7
				cache <<= len;
 8004836:	40b8      	lsls	r0, r7
				if (x == 15 && tabType == loopLinbits) {
 8004838:	f1a2 0a03 	sub.w	sl, r2, #3
 800483c:	2c0f      	cmp	r4, #15
				y = GetCWY(cw);
 800483e:	f3c1 2103 	ubfx	r1, r1, #8, #4
				if (x == 15 && tabType == loopLinbits) {
 8004842:	faba fa8a 	clz	sl, sl
 8004846:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800484a:	d141      	bne.n	80048d0 <xmp3fixpt_DecodeHuffman+0x4e0>
 800484c:	f1ba 0f00 	cmp.w	sl, #0
 8004850:	d03e      	beq.n	80048d0 <xmp3fixpt_DecodeHuffman+0x4e0>
					minBits = linBits + 1 + (y ? 1 : 0);
 8004852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004854:	2900      	cmp	r1, #0
 8004856:	bf18      	it	ne
 8004858:	3201      	addne	r2, #1
 800485a:	4693      	mov	fp, r2
					if (cachedBits + bitsLeft < minBits)
 800485c:	eb03 020e 	add.w	r2, r3, lr
 8004860:	4593      	cmp	fp, r2
 8004862:	dc91      	bgt.n	8004788 <xmp3fixpt_DecodeHuffman+0x398>
					while (cachedBits < minBits) {
 8004864:	455b      	cmp	r3, fp
 8004866:	da2c      	bge.n	80048c2 <xmp3fixpt_DecodeHuffman+0x4d2>
 8004868:	ea6f 0903 	mvn.w	r9, r3
 800486c:	f1c3 0718 	rsb	r7, r3, #24
 8004870:	462c      	mov	r4, r5
 8004872:	eb09 080b 	add.w	r8, r9, fp
 8004876:	eb05 08d8 	add.w	r8, r5, r8, lsr #3
 800487a:	f108 0801 	add.w	r8, r8, #1
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800487e:	f814 2b01 	ldrb.w	r2, [r4], #1
 8004882:	40ba      	lsls	r2, r7
					while (cachedBits < minBits) {
 8004884:	4544      	cmp	r4, r8
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8004886:	f1a7 0708 	sub.w	r7, r7, #8
 800488a:	ea40 0002 	orr.w	r0, r0, r2
					while (cachedBits < minBits) {
 800488e:	d1f6      	bne.n	800487e <xmp3fixpt_DecodeHuffman+0x48e>
 8004890:	44d9      	add	r9, fp
 8004892:	f1ae 0e08 	sub.w	lr, lr, #8
 8004896:	3308      	adds	r3, #8
 8004898:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 800489c:	ebc9 7249 	rsb	r2, r9, r9, lsl #29
 80048a0:	f109 0401 	add.w	r4, r9, #1
 80048a4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
					if (bitsLeft < 0) {
 80048a8:	eb1e 0ec2 	adds.w	lr, lr, r2, lsl #3
 80048ac:	4425      	add	r5, r4
 80048ae:	d508      	bpl.n	80048c2 <xmp3fixpt_DecodeHuffman+0x4d2>
						cachedBits += bitsLeft;
 80048b0:	4473      	add	r3, lr
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 80048b2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
						bitsLeft = 0;
 80048b6:	f04f 0e00 	mov.w	lr, #0
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 80048ba:	1e5a      	subs	r2, r3, #1
 80048bc:	fa44 f202 	asr.w	r2, r4, r2
 80048c0:	4010      	ands	r0, r2
					x += (int)(cache >> (32 - linBits));
 80048c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048c4:	fa20 f402 	lsr.w	r4, r0, r2
					cachedBits -= linBits;
 80048c8:	9a07      	ldr	r2, [sp, #28]
					x += (int)(cache >> (32 - linBits));
 80048ca:	340f      	adds	r4, #15
					cachedBits -= linBits;
 80048cc:	1a9b      	subs	r3, r3, r2
					cache <<= linBits;
 80048ce:	4090      	lsls	r0, r2
				if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 80048d0:	b124      	cbz	r4, 80048dc <xmp3fixpt_DecodeHuffman+0x4ec>
 80048d2:	f000 4200 	and.w	r2, r0, #2147483648	; 0x80000000
 80048d6:	3b01      	subs	r3, #1
 80048d8:	0040      	lsls	r0, r0, #1
 80048da:	4314      	orrs	r4, r2
				if (y == 15 && tabType == loopLinbits) {
 80048dc:	290f      	cmp	r1, #15
 80048de:	d137      	bne.n	8004950 <xmp3fixpt_DecodeHuffman+0x560>
 80048e0:	f1ba 0f00 	cmp.w	sl, #0
 80048e4:	d034      	beq.n	8004950 <xmp3fixpt_DecodeHuffman+0x560>
					if (cachedBits + bitsLeft < minBits)
 80048e6:	eb0e 0203 	add.w	r2, lr, r3
 80048ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048ec:	4291      	cmp	r1, r2
 80048ee:	f73f af4b 	bgt.w	8004788 <xmp3fixpt_DecodeHuffman+0x398>
					while (cachedBits < minBits) {
 80048f2:	4299      	cmp	r1, r3
 80048f4:	dd25      	ble.n	8004942 <xmp3fixpt_DecodeHuffman+0x552>
 80048f6:	9a07      	ldr	r2, [sp, #28]
 80048f8:	f1c3 0118 	rsb	r1, r3, #24
 80048fc:	eba2 0803 	sub.w	r8, r2, r3
 8004900:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8004904:	f108 0701 	add.w	r7, r8, #1
 8004908:	442f      	add	r7, r5
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800490a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800490e:	408a      	lsls	r2, r1
					while (cachedBits < minBits) {
 8004910:	42bd      	cmp	r5, r7
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8004912:	f1a1 0108 	sub.w	r1, r1, #8
 8004916:	ea40 0002 	orr.w	r0, r0, r2
					while (cachedBits < minBits) {
 800491a:	d1f6      	bne.n	800490a <xmp3fixpt_DecodeHuffman+0x51a>
 800491c:	f1ae 0e08 	sub.w	lr, lr, #8
 8004920:	ebc8 7248 	rsb	r2, r8, r8, lsl #29
 8004924:	3308      	adds	r3, #8
					if (bitsLeft < 0) {
 8004926:	eb1e 0ec2 	adds.w	lr, lr, r2, lsl #3
 800492a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800492e:	d508      	bpl.n	8004942 <xmp3fixpt_DecodeHuffman+0x552>
						cachedBits += bitsLeft;
 8004930:	4473      	add	r3, lr
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 8004932:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
						bitsLeft = 0;
 8004936:	f04f 0e00 	mov.w	lr, #0
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800493a:	1e5a      	subs	r2, r3, #1
 800493c:	fa41 f202 	asr.w	r2, r1, r2
 8004940:	4010      	ands	r0, r2
					y += (int)(cache >> (32 - linBits));
 8004942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004944:	fa20 f102 	lsr.w	r1, r0, r2
					cachedBits -= linBits;
 8004948:	9a07      	ldr	r2, [sp, #28]
					y += (int)(cache >> (32 - linBits));
 800494a:	310f      	adds	r1, #15
					cachedBits -= linBits;
 800494c:	1a9b      	subs	r3, r3, r2
					cache <<= linBits;
 800494e:	4090      	lsls	r0, r2
				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 8004950:	b121      	cbz	r1, 800495c <xmp3fixpt_DecodeHuffman+0x56c>
 8004952:	f000 4200 	and.w	r2, r0, #2147483648	; 0x80000000
 8004956:	3b01      	subs	r3, #1
 8004958:	0040      	lsls	r0, r0, #1
 800495a:	4311      	orrs	r1, r2
				if (cachedBits < padBits)
 800495c:	9a04      	ldr	r2, [sp, #16]
 800495e:	4293      	cmp	r3, r2
 8004960:	f6ff af12 	blt.w	8004788 <xmp3fixpt_DecodeHuffman+0x398>
				nVals -= 2;
 8004964:	f1ac 0c02 	sub.w	ip, ip, #2
				*xy++ = x;
 8004968:	4637      	mov	r7, r6
	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800496a:	9a02      	ldr	r2, [sp, #8]
			while (nVals > 0 && cachedBits >= 11 ) {
 800496c:	f1bc 0f00 	cmp.w	ip, #0
				*xy++ = x;
 8004970:	f847 4b08 	str.w	r4, [r7], #8
				*xy++ = y;
 8004974:	6071      	str	r1, [r6, #4]
 8004976:	463e      	mov	r6, r7
			while (nVals > 0 && cachedBits >= 11 ) {
 8004978:	f73f af49 	bgt.w	800480e <xmp3fixpt_DecodeHuffman+0x41e>
		while (nVals > 0) {
 800497c:	f1bc 0f00 	cmp.w	ip, #0
 8004980:	f73f af2e 	bgt.w	80047e0 <xmp3fixpt_DecodeHuffman+0x3f0>
		bitsLeft += (cachedBits - padBits);
 8004984:	9a04      	ldr	r2, [sp, #16]
 8004986:	1a9a      	subs	r2, r3, r2
		return (startBits - bitsLeft);
 8004988:	9b03      	ldr	r3, [sp, #12]
		bitsLeft += (cachedBits - padBits);
 800498a:	4472      	add	r2, lr
		return (startBits - bitsLeft);
 800498c:	1a9a      	subs	r2, r3, r2
 800498e:	0fd3      	lsrs	r3, r2, #31
 8004990:	e004      	b.n	800499c <xmp3fixpt_DecodeHuffman+0x5ac>
	if (cachedBits)
 8004992:	9d05      	ldr	r5, [sp, #20]
	cache = 0;
 8004994:	4618      	mov	r0, r3
 8004996:	e5ce      	b.n	8004536 <xmp3fixpt_DecodeHuffman+0x146>
	if(nVals <= 0) 
 8004998:	2300      	movs	r3, #0
		return 0;
 800499a:	461a      	mov	r2, r3
		if (bitsUsed < 0 || bitsUsed > bitsLeft)	/* error - overran end of bitstream */
 800499c:	9903      	ldr	r1, [sp, #12]
 800499e:	428a      	cmp	r2, r1
 80049a0:	f73f aef2 	bgt.w	8004788 <xmp3fixpt_DecodeHuffman+0x398>
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f47f aeef 	bne.w	8004788 <xmp3fixpt_DecodeHuffman+0x398>
 80049aa:	1a8b      	subs	r3, r1, r2
 80049ac:	9303      	str	r3, [sp, #12]
 80049ae:	e5d7      	b.n	8004560 <xmp3fixpt_DecodeHuffman+0x170>
	if (sis->winSwitchFlag && sis->blockType == 2) {
 80049b0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	f47f ad4f 	bne.w	8004456 <xmp3fixpt_DecodeHuffman+0x66>
		if (sis->mixedBlock == 0) {
 80049b8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f040 80a4 	bne.w	8004b08 <xmp3fixpt_DecodeHuffman+0x718>
			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 80049c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049c2:	f1a3 33aa 	sub.w	r3, r3, #2863311530	; 0xaaaaaaaa
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 80049c6:	f44f 7110 	mov.w	r1, #576	; 0x240
			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 80049ca:	3201      	adds	r2, #1
 80049cc:	fb83 4302 	smull	r4, r3, r3, r2
 80049d0:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 80049d4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80049d8:	462b      	mov	r3, r5
 80049da:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 80049de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80049e2:	e54d      	b.n	8004480 <xmp3fixpt_DecodeHuffman+0x90>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 80049e4:	9c05      	ldr	r4, [sp, #20]
 80049e6:	f1c2 0120 	rsb	r1, r2, #32
 80049ea:	7823      	ldrb	r3, [r4, #0]
 80049ec:	3401      	adds	r4, #1
 80049ee:	fa03 f101 	lsl.w	r1, r3, r1
 80049f2:	9401      	str	r4, [sp, #4]
 80049f4:	e5e4      	b.n	80045c0 <xmp3fixpt_DecodeHuffman+0x1d0>
					cachedBits -= maxBits;
 80049f6:	1b1b      	subs	r3, r3, r4
					cache <<= maxBits;
 80049f8:	40a0      	lsls	r0, r4
					tCurr += cw;
 80049fa:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80049fe:	e702      	b.n	8004806 <xmp3fixpt_DecodeHuffman+0x416>
			if (cachedBits + bitsLeft <= 0) return i;
 8004a00:	eb0b 0302 	add.w	r3, fp, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f77f ae48 	ble.w	800469a <xmp3fixpt_DecodeHuffman+0x2aa>
			if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8004a0a:	f1bb 0f00 	cmp.w	fp, #0
 8004a0e:	dd08      	ble.n	8004a22 <xmp3fixpt_DecodeHuffman+0x632>
 8004a10:	9e01      	ldr	r6, [sp, #4]
 8004a12:	f1c2 0018 	rsb	r0, r2, #24
 8004a16:	7834      	ldrb	r4, [r6, #0]
 8004a18:	3601      	adds	r6, #1
 8004a1a:	fa04 f000 	lsl.w	r0, r4, r0
 8004a1e:	9601      	str	r6, [sp, #4]
 8004a20:	4301      	orrs	r1, r0
			if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 8004a22:	f1bb 0f08 	cmp.w	fp, #8
 8004a26:	dd07      	ble.n	8004a38 <xmp3fixpt_DecodeHuffman+0x648>
 8004a28:	9c01      	ldr	r4, [sp, #4]
 8004a2a:	f1c2 0010 	rsb	r0, r2, #16
 8004a2e:	7822      	ldrb	r2, [r4, #0]
 8004a30:	3401      	adds	r4, #1
 8004a32:	4082      	lsls	r2, r0
 8004a34:	9401      	str	r4, [sp, #4]
 8004a36:	4311      	orrs	r1, r2
			cache &= (signed int)0x80000000 >> (cachedBits - 1);
 8004a38:	1e58      	subs	r0, r3, #1
			cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 8004a3a:	f103 020a 	add.w	r2, r3, #10
			cache &= (signed int)0x80000000 >> (cachedBits - 1);
 8004a3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
			padBits = 10;
 8004a42:	f04f 0e0a 	mov.w	lr, #10
			bitsLeft = 0;
 8004a46:	f04f 0b00 	mov.w	fp, #0
			cache &= (signed int)0x80000000 >> (cachedBits - 1);
 8004a4a:	4103      	asrs	r3, r0
 8004a4c:	4019      	ands	r1, r3
 8004a4e:	e5e2      	b.n	8004616 <xmp3fixpt_DecodeHuffman+0x226>
				if (cachedBits + bitsLeft <= 0)	return -1;
 8004a50:	eb0e 0403 	add.w	r4, lr, r3
 8004a54:	2c00      	cmp	r4, #0
 8004a56:	f77f ae97 	ble.w	8004788 <xmp3fixpt_DecodeHuffman+0x398>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8004a5a:	f1be 0f00 	cmp.w	lr, #0
 8004a5e:	dd05      	ble.n	8004a6c <xmp3fixpt_DecodeHuffman+0x67c>
 8004a60:	7829      	ldrb	r1, [r5, #0]
 8004a62:	f1c3 0718 	rsb	r7, r3, #24
 8004a66:	3501      	adds	r5, #1
 8004a68:	40b9      	lsls	r1, r7
 8004a6a:	4308      	orrs	r0, r1
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 8004a6c:	f1be 0f08 	cmp.w	lr, #8
 8004a70:	dd05      	ble.n	8004a7e <xmp3fixpt_DecodeHuffman+0x68e>
 8004a72:	f1c3 0110 	rsb	r1, r3, #16
 8004a76:	782b      	ldrb	r3, [r5, #0]
 8004a78:	3501      	adds	r5, #1
 8004a7a:	408b      	lsls	r3, r1
 8004a7c:	4318      	orrs	r0, r3
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 8004a7e:	1e61      	subs	r1, r4, #1
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 8004a80:	f104 030b 	add.w	r3, r4, #11
				padBits = 11;
 8004a84:	240b      	movs	r4, #11
				bitsLeft = 0;
 8004a86:	f04f 0e00 	mov.w	lr, #0
				padBits = 11;
 8004a8a:	9404      	str	r4, [sp, #16]
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 8004a8c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004a90:	fa44 f101 	asr.w	r1, r4, r1
 8004a94:	4008      	ands	r0, r1
 8004a96:	e6b6      	b.n	8004806 <xmp3fixpt_DecodeHuffman+0x416>
 8004a98:	4617      	mov	r7, r2
 8004a9a:	e5fe      	b.n	800469a <xmp3fixpt_DecodeHuffman+0x2aa>
		while (nVals > 0) {
 8004a9c:	f1bc 0f00 	cmp.w	ip, #0
 8004aa0:	f73f ae2e 	bgt.w	8004700 <xmp3fixpt_DecodeHuffman+0x310>
		bitsLeft += (cachedBits - padBits);
 8004aa4:	eba3 0208 	sub.w	r2, r3, r8
		return (startBits - bitsLeft);
 8004aa8:	9b03      	ldr	r3, [sp, #12]
		bitsLeft += (cachedBits - padBits);
 8004aaa:	4472      	add	r2, lr
		return (startBits - bitsLeft);
 8004aac:	1a9a      	subs	r2, r3, r2
 8004aae:	0fd3      	lsrs	r3, r2, #31
 8004ab0:	e774      	b.n	800499c <xmp3fixpt_DecodeHuffman+0x5ac>
 8004ab2:	bf00      	nop
 8004ab4:	08020e40 	.word	0x08020e40
 8004ab8:	08020ec0 	.word	0x08020ec0
 8004abc:	08020d40 	.word	0x08020d40
				if (cachedBits + bitsLeft <= 0)	return -1;
 8004ac0:	eb0e 0103 	add.w	r1, lr, r3
 8004ac4:	2900      	cmp	r1, #0
 8004ac6:	f77f ae5f 	ble.w	8004788 <xmp3fixpt_DecodeHuffman+0x398>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8004aca:	f1be 0f00 	cmp.w	lr, #0
 8004ace:	dd06      	ble.n	8004ade <xmp3fixpt_DecodeHuffman+0x6ee>
 8004ad0:	782e      	ldrb	r6, [r5, #0]
 8004ad2:	f1c3 0418 	rsb	r4, r3, #24
 8004ad6:	3501      	adds	r5, #1
 8004ad8:	fa06 f404 	lsl.w	r4, r6, r4
 8004adc:	4320      	orrs	r0, r4
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 8004ade:	f1be 0f08 	cmp.w	lr, #8
 8004ae2:	dd05      	ble.n	8004af0 <xmp3fixpt_DecodeHuffman+0x700>
 8004ae4:	f1c3 0410 	rsb	r4, r3, #16
 8004ae8:	782b      	ldrb	r3, [r5, #0]
 8004aea:	3501      	adds	r5, #1
 8004aec:	40a3      	lsls	r3, r4
 8004aee:	4318      	orrs	r0, r3
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 8004af0:	1e4c      	subs	r4, r1, #1
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 8004af2:	f101 030b 	add.w	r3, r1, #11
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 8004af6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
				padBits = 11;
 8004afa:	f04f 080b 	mov.w	r8, #11
				bitsLeft = 0;
 8004afe:	f04f 0e00 	mov.w	lr, #0
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 8004b02:	4121      	asrs	r1, r4
 8004b04:	4008      	ands	r0, r1
 8004b06:	e60e      	b.n	8004726 <xmp3fixpt_DecodeHuffman+0x336>
			if (fh->ver == MPEG1) {
 8004b08:	780b      	ldrb	r3, [r1, #0]
 8004b0a:	b93b      	cbnz	r3, 8004b1c <xmp3fixpt_DecodeHuffman+0x72c>
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 8004b0c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 8004b0e:	f44f 7110 	mov.w	r1, #576	; 0x240
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 8004b12:	3301      	adds	r3, #1
 8004b14:	f930 2013 	ldrsh.w	r2, [r0, r3, lsl #1]
 8004b18:	462b      	mov	r3, r5
 8004b1a:	e4b1      	b.n	8004480 <xmp3fixpt_DecodeHuffman+0x90>
				w = fh->sfBand->s[4] - fh->sfBand->s[3];
 8004b1c:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 8004b20:	f44f 7110 	mov.w	r1, #576	; 0x240
				w = fh->sfBand->s[4] - fh->sfBand->s[3];
 8004b24:	f9b0 4034 	ldrsh.w	r4, [r0, #52]	; 0x34
				r1Start = fh->sfBand->l[6] + 2*w;
 8004b28:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
				w = fh->sfBand->s[4] - fh->sfBand->s[3];
 8004b2c:	1b1b      	subs	r3, r3, r4
				r1Start = fh->sfBand->l[6] + 2*w;
 8004b2e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004b32:	462b      	mov	r3, r5
 8004b34:	e4a4      	b.n	8004480 <xmp3fixpt_DecodeHuffman+0x90>
 8004b36:	bf00      	nop

08004b38 <WinPrevious.part.0>:
	xp = xPrev;
	/* mapping (see IMDCT12x3): xPrev[0-2] = sum[6-8], xPrev[3-8] = sum[12-17] */
	if (btPrev == 2) {
		/* this could be reordered for minimum loads/stores */
		wpLo = imdctWin[btPrev];
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 8004b38:	4b35      	ldr	r3, [pc, #212]	; (8004c10 <WinPrevious.part.0+0xd8>)
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8004b3a:	6882      	ldr	r2, [r0, #8]
static void WinPrevious(int *xPrev, int *xPrevWin, int btPrev)
 8004b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 8004b40:	f8d3 e138 	ldr.w	lr, [r3, #312]	; 0x138
 8004b44:	fb8e 4202 	smull	r4, r2, lr, r2
 8004b48:	6984      	ldr	r4, [r0, #24]
 8004b4a:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
 8004b4e:	fb85 6404 	smull	r6, r4, r5, r4
 8004b52:	4422      	add	r2, r4
		xPrevWin[ 1] = MULSHIFT32(wpLo[ 7], xPrev[1]) + MULSHIFT32(wpLo[1], xPrev[7]);
 8004b54:	f8d3 c13c 	ldr.w	ip, [r3, #316]	; 0x13c
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 8004b58:	600a      	str	r2, [r1, #0]
 8004b5a:	6842      	ldr	r2, [r0, #4]
 8004b5c:	fb8c 4202 	smull	r4, r2, ip, r2
 8004b60:	69c4      	ldr	r4, [r0, #28]
 8004b62:	f8d3 5124 	ldr.w	r5, [r3, #292]	; 0x124
 8004b66:	fb85 6404 	smull	r6, r4, r5, r4
		xPrevWin[ 1] = MULSHIFT32(wpLo[ 7], xPrev[1]) + MULSHIFT32(wpLo[1], xPrev[7]);
 8004b6a:	4422      	add	r2, r4
		xPrevWin[ 2] = MULSHIFT32(wpLo[ 8], xPrev[0]) + MULSHIFT32(wpLo[2], xPrev[8]);
 8004b6c:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140
		xPrevWin[ 1] = MULSHIFT32(wpLo[ 7], xPrev[1]) + MULSHIFT32(wpLo[1], xPrev[7]);
 8004b70:	604a      	str	r2, [r1, #4]
 8004b72:	6805      	ldr	r5, [r0, #0]
 8004b74:	fb86 2505 	smull	r2, r5, r6, r5
 8004b78:	6a02      	ldr	r2, [r0, #32]
 8004b7a:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 8004b7e:	fb84 7202 	smull	r7, r2, r4, r2
		xPrevWin[ 2] = MULSHIFT32(wpLo[ 8], xPrev[0]) + MULSHIFT32(wpLo[2], xPrev[8]);
 8004b82:	442a      	add	r2, r5
		xPrevWin[ 3] = MULSHIFT32(wpLo[ 9], xPrev[0]) + MULSHIFT32(wpLo[3], xPrev[8]);
 8004b84:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
		xPrevWin[ 2] = MULSHIFT32(wpLo[ 8], xPrev[0]) + MULSHIFT32(wpLo[2], xPrev[8]);
 8004b88:	608a      	str	r2, [r1, #8]
 8004b8a:	6807      	ldr	r7, [r0, #0]
 8004b8c:	fb85 2707 	smull	r2, r7, r5, r7
 8004b90:	6a02      	ldr	r2, [r0, #32]
 8004b92:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
 8004b96:	fb84 8202 	smull	r8, r2, r4, r2
		xPrevWin[ 3] = MULSHIFT32(wpLo[ 9], xPrev[0]) + MULSHIFT32(wpLo[3], xPrev[8]);
 8004b9a:	4417      	add	r7, r2
		xPrevWin[ 4] = MULSHIFT32(wpLo[10], xPrev[1]) + MULSHIFT32(wpLo[4], xPrev[7]);
 8004b9c:	f8d3 8148 	ldr.w	r8, [r3, #328]	; 0x148
		xPrevWin[ 3] = MULSHIFT32(wpLo[ 9], xPrev[0]) + MULSHIFT32(wpLo[3], xPrev[8]);
 8004ba0:	60cf      	str	r7, [r1, #12]
 8004ba2:	6842      	ldr	r2, [r0, #4]
 8004ba4:	fb88 4202 	smull	r4, r2, r8, r2
 8004ba8:	69c4      	ldr	r4, [r0, #28]
 8004baa:	f8d3 7130 	ldr.w	r7, [r3, #304]	; 0x130
 8004bae:	fb87 9404 	smull	r9, r4, r7, r4
		xPrevWin[ 4] = MULSHIFT32(wpLo[10], xPrev[1]) + MULSHIFT32(wpLo[4], xPrev[7]);
 8004bb2:	4422      	add	r2, r4
		xPrevWin[ 5] = MULSHIFT32(wpLo[11], xPrev[2]) + MULSHIFT32(wpLo[5], xPrev[6]);
 8004bb4:	f8d3 714c 	ldr.w	r7, [r3, #332]	; 0x14c
		xPrevWin[ 4] = MULSHIFT32(wpLo[10], xPrev[1]) + MULSHIFT32(wpLo[4], xPrev[7]);
 8004bb8:	610a      	str	r2, [r1, #16]
 8004bba:	6882      	ldr	r2, [r0, #8]
 8004bbc:	fb87 4202 	smull	r4, r2, r7, r2
 8004bc0:	6984      	ldr	r4, [r0, #24]
 8004bc2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8004bc6:	fb83 9404 	smull	r9, r4, r3, r4
		xPrevWin[ 5] = MULSHIFT32(wpLo[11], xPrev[2]) + MULSHIFT32(wpLo[5], xPrev[6]);
 8004bca:	4422      	add	r2, r4
 8004bcc:	614a      	str	r2, [r1, #20]
 8004bce:	6943      	ldr	r3, [r0, #20]
 8004bd0:	fb8e 2303 	smull	r2, r3, lr, r3
		xPrevWin[ 6] = MULSHIFT32(wpLo[ 6], xPrev[5]);
 8004bd4:	618b      	str	r3, [r1, #24]
 8004bd6:	6903      	ldr	r3, [r0, #16]
 8004bd8:	fb8c 2303 	smull	r2, r3, ip, r3
		xPrevWin[ 7] = MULSHIFT32(wpLo[ 7], xPrev[4]);
 8004bdc:	61cb      	str	r3, [r1, #28]
 8004bde:	68c3      	ldr	r3, [r0, #12]
 8004be0:	fb86 2303 	smull	r2, r3, r6, r3
		xPrevWin[ 8] = MULSHIFT32(wpLo[ 8], xPrev[3]);
 8004be4:	620b      	str	r3, [r1, #32]
 8004be6:	68c3      	ldr	r3, [r0, #12]
 8004be8:	fb85 2303 	smull	r2, r3, r5, r3
		xPrevWin[ 9] = MULSHIFT32(wpLo[ 9], xPrev[3]);
 8004bec:	624b      	str	r3, [r1, #36]	; 0x24
 8004bee:	6903      	ldr	r3, [r0, #16]
 8004bf0:	fb88 2303 	smull	r2, r3, r8, r3
		xPrevWin[10] = MULSHIFT32(wpLo[10], xPrev[4]);
 8004bf4:	628b      	str	r3, [r1, #40]	; 0x28
 8004bf6:	6942      	ldr	r2, [r0, #20]
 8004bf8:	fb87 3202 	smull	r3, r2, r7, r2
		xPrevWin[11] = MULSHIFT32(wpLo[11], xPrev[5]);
		xPrevWin[12] = xPrevWin[13] = xPrevWin[14] = xPrevWin[15] = xPrevWin[16] = xPrevWin[17] = 0;
 8004bfc:	2300      	movs	r3, #0
		xPrevWin[11] = MULSHIFT32(wpLo[11], xPrev[5]);
 8004bfe:	62ca      	str	r2, [r1, #44]	; 0x2c
		xPrevWin[12] = xPrevWin[13] = xPrevWin[14] = xPrevWin[15] = xPrevWin[16] = xPrevWin[17] = 0;
 8004c00:	e9c1 3310 	strd	r3, r3, [r1, #64]	; 0x40
 8004c04:	e9c1 330e 	strd	r3, r3, [r1, #56]	; 0x38
 8004c08:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
			*xpwLo++ = MULSHIFT32(wLo, x);
			*xpwHi-- = MULSHIFT32(wHi, x);
		}
	}
}
 8004c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c10:	080238b4 	.word	0x080238b4

08004c14 <FreqInvertRescale>:
 *              rescaled (as necessary) previous samples
 *
 * Return:      updated mOut (from new outputs y)
 **************************************************************************************/
static int FreqInvertRescale(int *y, int *xPrev, int blockIdx, int es)
{
 8004c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c18:	f002 0201 	and.w	r2, r2, #1
 8004c1c:	b08f      	sub	sp, #60	; 0x3c
	int i, d, mOut;
	int y0, y1, y2, y3, y4, y5, y6, y7, y8;

	if (es == 0) {
 8004c1e:	bb93      	cbnz	r3, 8004c86 <FreqInvertRescale+0x72>
		/* fast case - frequency invert only (no rescaling) - can fuse into overlap-add for speed, if desired */
		if (blockIdx & 0x01) {
 8004c20:	b36a      	cbz	r2, 8004c7e <FreqInvertRescale+0x6a>
			y += NBANDS;
			y0 = *y;	y += 2*NBANDS;
			y1 = *y;	y += 2*NBANDS;
 8004c22:	f8d0 4180 	ldr.w	r4, [r0, #384]	; 0x180
			*y = -y5;	y += 2*NBANDS;
			*y = -y6;	y += 2*NBANDS;
			*y = -y7;	y += 2*NBANDS;
			*y = -y8;	y += 2*NBANDS;
		}
		return 0;
 8004c26:	461a      	mov	r2, r3
			y2 = *y;	y += 2*NBANDS;
 8004c28:	f8d0 1280 	ldr.w	r1, [r0, #640]	; 0x280
			y3 = *y;	y += 2*NBANDS;
 8004c2c:	f8d0 6380 	ldr.w	r6, [r0, #896]	; 0x380
			*y = -y1;	y += 2*NBANDS;
 8004c30:	4264      	negs	r4, r4
			y4 = *y;	y += 2*NBANDS;
 8004c32:	f8d0 3480 	ldr.w	r3, [r0, #1152]	; 0x480
			*y = -y2;	y += 2*NBANDS;
 8004c36:	4249      	negs	r1, r1
			*y = -y3;	y += 2*NBANDS;
 8004c38:	4276      	negs	r6, r6
			y5 = *y;	y += 2*NBANDS;
 8004c3a:	f8d0 7580 	ldr.w	r7, [r0, #1408]	; 0x580
			*y = -y4;	y += 2*NBANDS;
 8004c3e:	425b      	negs	r3, r3
			y6 = *y;	y += 2*NBANDS;
 8004c40:	f8d0 5680 	ldr.w	r5, [r0, #1664]	; 0x680
			*y = -y1;	y += 2*NBANDS;
 8004c44:	f8c0 4180 	str.w	r4, [r0, #384]	; 0x180
			*y = -y5;	y += 2*NBANDS;
 8004c48:	427f      	negs	r7, r7
			y7 = *y;	y += 2*NBANDS;
 8004c4a:	f8d0 4780 	ldr.w	r4, [r0, #1920]	; 0x780
			*y = -y6;	y += 2*NBANDS;
 8004c4e:	426d      	negs	r5, r5
			*y = -y2;	y += 2*NBANDS;
 8004c50:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
			*y = -y3;	y += 2*NBANDS;
 8004c54:	f8c0 6380 	str.w	r6, [r0, #896]	; 0x380
			*y = -y7;	y += 2*NBANDS;
 8004c58:	4264      	negs	r4, r4
			y8 = *y;	y += 2*NBANDS;
 8004c5a:	f8d0 1880 	ldr.w	r1, [r0, #2176]	; 0x880
			*y = -y0;	y += 2*NBANDS;
 8004c5e:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
			*y = -y8;	y += 2*NBANDS;
 8004c62:	4249      	negs	r1, r1
			*y = -y4;	y += 2*NBANDS;
 8004c64:	f8c0 3480 	str.w	r3, [r0, #1152]	; 0x480
			*y = -y0;	y += 2*NBANDS;
 8004c68:	4273      	negs	r3, r6
			*y = -y5;	y += 2*NBANDS;
 8004c6a:	f8c0 7580 	str.w	r7, [r0, #1408]	; 0x580
			*y = -y6;	y += 2*NBANDS;
 8004c6e:	f8c0 5680 	str.w	r5, [r0, #1664]	; 0x680
			*y = -y7;	y += 2*NBANDS;
 8004c72:	f8c0 4780 	str.w	r4, [r0, #1920]	; 0x780
			*y = -y8;	y += 2*NBANDS;
 8004c76:	f8c0 1880 	str.w	r1, [r0, #2176]	; 0x880
			*y = -y0;	y += 2*NBANDS;
 8004c7a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
			}
		}
		return mOut;
	}
}
 8004c7e:	4610      	mov	r0, r2
 8004c80:	b00f      	add	sp, #60	; 0x3c
 8004c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c86:	f1c3 041f 	rsb	r4, r3, #31
 8004c8a:	2501      	movs	r5, #1
 8004c8c:	40a5      	lsls	r5, r4
 8004c8e:	3d01      	subs	r5, #1
		if (blockIdx & 0x01) {
 8004c90:	2a00      	cmp	r2, #0
 8004c92:	d045      	beq.n	8004d20 <FreqInvertRescale+0x10c>
 8004c94:	f100 0880 	add.w	r8, r0, #128	; 0x80
 8004c98:	f500 6910 	add.w	r9, r0, #2304	; 0x900
		mOut = 0;
 8004c9c:	2200      	movs	r2, #0
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004c9e:	f858 6c80 	ldr.w	r6, [r8, #-128]
 8004ca2:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8004ca6:	17f7      	asrs	r7, r6, #31
 8004ca8:	fa46 fc04 	asr.w	ip, r6, r4
 8004cac:	45bc      	cmp	ip, r7
 8004cae:	bf18      	it	ne
 8004cb0:	ea85 0607 	eorne.w	r6, r5, r7
 8004cb4:	fa06 f703 	lsl.w	r7, r6, r3
 8004cb8:	f848 7c80 	str.w	r7, [r8, #-128]
	sign = x >> (sizeof(int) * 8 - 1);
 8004cbc:	ea4f 7ce7 	mov.w	ip, r7, asr #31
				d = -*y;	CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004cc0:	f850 6c80 	ldr.w	r6, [r0, #-128]
	x ^= sign;
 8004cc4:	ea8c 0707 	eor.w	r7, ip, r7
 8004cc8:	4276      	negs	r6, r6
	x -= sign;
 8004cca:	eba7 070c 	sub.w	r7, r7, ip
 8004cce:	fa46 fe04 	asr.w	lr, r6, r4
 8004cd2:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 8004cd6:	45e6      	cmp	lr, ip
 8004cd8:	bf18      	it	ne
 8004cda:	ea8c 0605 	eorne.w	r6, ip, r5
 8004cde:	409e      	lsls	r6, r3
	sign = x >> (sizeof(int) * 8 - 1);
 8004ce0:	ea4f 7ee6 	mov.w	lr, r6, asr #31
 8004ce4:	f840 6c80 	str.w	r6, [r0, #-128]
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8004ce8:	f8d1 c000 	ldr.w	ip, [r1]
	x ^= sign;
 8004cec:	ea8e 0606 	eor.w	r6, lr, r6
 8004cf0:	ea4f 7aec 	mov.w	sl, ip, asr #31
 8004cf4:	fa4c fb04 	asr.w	fp, ip, r4
	x -= sign;
 8004cf8:	eba6 060e 	sub.w	r6, r6, lr
 8004cfc:	45d3      	cmp	fp, sl
 8004cfe:	ea8a 0e05 	eor.w	lr, sl, r5
				d = -*y;	CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004d02:	ea46 0607 	orr.w	r6, r6, r7
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8004d06:	fa0e f703 	lsl.w	r7, lr, r3
				d = -*y;	CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004d0a:	ea42 0206 	orr.w	r2, r2, r6
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8004d0e:	f000 81de 	beq.w	80050ce <FreqInvertRescale+0x4ba>
			for (i = 0; i < 18; i+=2) {
 8004d12:	4548      	cmp	r0, r9
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8004d14:	f841 7b04 	str.w	r7, [r1], #4
 8004d18:	f508 7880 	add.w	r8, r8, #256	; 0x100
			for (i = 0; i < 18; i+=2) {
 8004d1c:	d1bf      	bne.n	8004c9e <FreqInvertRescale+0x8a>
 8004d1e:	e7ae      	b.n	8004c7e <FreqInvertRescale+0x6a>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004d20:	6802      	ldr	r2, [r0, #0]
 8004d22:	fa42 f704 	asr.w	r7, r2, r4
 8004d26:	17d6      	asrs	r6, r2, #31
 8004d28:	42be      	cmp	r6, r7
 8004d2a:	bf18      	it	ne
 8004d2c:	ea86 0205 	eorne.w	r2, r6, r5
 8004d30:	fa02 f603 	lsl.w	r6, r2, r3
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004d34:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 8004d38:	fa42 fe04 	asr.w	lr, r2, r4
 8004d3c:	ea4f 7ce2 	mov.w	ip, r2, asr #31
	sign = x >> (sizeof(int) * 8 - 1);
 8004d40:	17f7      	asrs	r7, r6, #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004d42:	6006      	str	r6, [r0, #0]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004d44:	45f4      	cmp	ip, lr
	x ^= sign;
 8004d46:	ea87 0906 	eor.w	r9, r7, r6
 8004d4a:	bf18      	it	ne
 8004d4c:	ea8c 0205 	eorne.w	r2, ip, r5
	x -= sign;
 8004d50:	eba9 0607 	sub.w	r6, r9, r7
 8004d54:	409a      	lsls	r2, r3
 8004d56:	9602      	str	r6, [sp, #8]
 8004d58:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	sign = x >> (sizeof(int) * 8 - 1);
 8004d5c:	ea4f 79e2 	mov.w	r9, r2, asr #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8004d60:	680e      	ldr	r6, [r1, #0]
	x ^= sign;
 8004d62:	ea89 0202 	eor.w	r2, r9, r2
 8004d66:	fa46 fc04 	asr.w	ip, r6, r4
 8004d6a:	17f7      	asrs	r7, r6, #31
	x -= sign;
 8004d6c:	eba2 0209 	sub.w	r2, r2, r9
 8004d70:	4567      	cmp	r7, ip
 8004d72:	9204      	str	r2, [sp, #16]
 8004d74:	bf18      	it	ne
 8004d76:	ea87 0605 	eorne.w	r6, r7, r5
 8004d7a:	409e      	lsls	r6, r3
 8004d7c:	600e      	str	r6, [r1, #0]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004d7e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8004d82:	fa42 f704 	asr.w	r7, r2, r4
 8004d86:	17d6      	asrs	r6, r2, #31
 8004d88:	42be      	cmp	r6, r7
 8004d8a:	bf18      	it	ne
 8004d8c:	ea86 0205 	eorne.w	r2, r6, r5
 8004d90:	fa02 f603 	lsl.w	r6, r2, r3
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004d94:	f8d0 2180 	ldr.w	r2, [r0, #384]	; 0x180
 8004d98:	fa42 fe04 	asr.w	lr, r2, r4
 8004d9c:	ea4f 7ce2 	mov.w	ip, r2, asr #31
	sign = x >> (sizeof(int) * 8 - 1);
 8004da0:	17f7      	asrs	r7, r6, #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004da2:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004da6:	45f4      	cmp	ip, lr
	x ^= sign;
 8004da8:	ea87 0906 	eor.w	r9, r7, r6
 8004dac:	bf18      	it	ne
 8004dae:	ea8c 0205 	eorne.w	r2, ip, r5
	x -= sign;
 8004db2:	eba9 0607 	sub.w	r6, r9, r7
 8004db6:	409a      	lsls	r2, r3
 8004db8:	9605      	str	r6, [sp, #20]
 8004dba:	f8c0 2180 	str.w	r2, [r0, #384]	; 0x180
	sign = x >> (sizeof(int) * 8 - 1);
 8004dbe:	ea4f 79e2 	mov.w	r9, r2, asr #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8004dc2:	684e      	ldr	r6, [r1, #4]
	x ^= sign;
 8004dc4:	ea82 0209 	eor.w	r2, r2, r9
 8004dc8:	fa46 fc04 	asr.w	ip, r6, r4
 8004dcc:	17f7      	asrs	r7, r6, #31
	x -= sign;
 8004dce:	eba2 0209 	sub.w	r2, r2, r9
 8004dd2:	4567      	cmp	r7, ip
 8004dd4:	9201      	str	r2, [sp, #4]
 8004dd6:	bf18      	it	ne
 8004dd8:	ea87 0605 	eorne.w	r6, r7, r5
 8004ddc:	409e      	lsls	r6, r3
 8004dde:	604e      	str	r6, [r1, #4]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004de0:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
 8004de4:	fa42 f704 	asr.w	r7, r2, r4
 8004de8:	17d6      	asrs	r6, r2, #31
 8004dea:	42be      	cmp	r6, r7
 8004dec:	bf18      	it	ne
 8004dee:	ea86 0205 	eorne.w	r2, r6, r5
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004df2:	f8d0 6280 	ldr.w	r6, [r0, #640]	; 0x280
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004df6:	409a      	lsls	r2, r3
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004df8:	fa46 fc04 	asr.w	ip, r6, r4
 8004dfc:	17f7      	asrs	r7, r6, #31
	sign = x >> (sizeof(int) * 8 - 1);
 8004dfe:	ea4f 79e2 	mov.w	r9, r2, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004e02:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004e06:	4567      	cmp	r7, ip
	x ^= sign;
 8004e08:	ea82 0209 	eor.w	r2, r2, r9
 8004e0c:	bf18      	it	ne
 8004e0e:	ea85 0607 	eorne.w	r6, r5, r7
	x -= sign;
 8004e12:	eba2 0209 	sub.w	r2, r2, r9
 8004e16:	fa06 f703 	lsl.w	r7, r6, r3
 8004e1a:	9206      	str	r2, [sp, #24]
 8004e1c:	f8c0 7280 	str.w	r7, [r0, #640]	; 0x280
	sign = x >> (sizeof(int) * 8 - 1);
 8004e20:	17fe      	asrs	r6, r7, #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8004e22:	688a      	ldr	r2, [r1, #8]
	x ^= sign;
 8004e24:	ea87 0906 	eor.w	r9, r7, r6
 8004e28:	fa42 fc04 	asr.w	ip, r2, r4
 8004e2c:	17d7      	asrs	r7, r2, #31
	x -= sign;
 8004e2e:	eba9 0606 	sub.w	r6, r9, r6
 8004e32:	4567      	cmp	r7, ip
 8004e34:	9607      	str	r6, [sp, #28]
 8004e36:	bf18      	it	ne
 8004e38:	ea85 0207 	eorne.w	r2, r5, r7
 8004e3c:	409a      	lsls	r2, r3
 8004e3e:	608a      	str	r2, [r1, #8]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004e40:	f8d0 6300 	ldr.w	r6, [r0, #768]	; 0x300
 8004e44:	fa46 f704 	asr.w	r7, r6, r4
 8004e48:	17f2      	asrs	r2, r6, #31
 8004e4a:	42ba      	cmp	r2, r7
 8004e4c:	bf18      	it	ne
 8004e4e:	ea85 0602 	eorne.w	r6, r5, r2
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004e52:	f8d0 2380 	ldr.w	r2, [r0, #896]	; 0x380
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004e56:	409e      	lsls	r6, r3
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004e58:	fa42 fe04 	asr.w	lr, r2, r4
 8004e5c:	ea4f 7ce2 	mov.w	ip, r2, asr #31
	sign = x >> (sizeof(int) * 8 - 1);
 8004e60:	17f7      	asrs	r7, r6, #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004e62:	f8c0 6300 	str.w	r6, [r0, #768]	; 0x300
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004e66:	45f4      	cmp	ip, lr
	x ^= sign;
 8004e68:	ea86 0607 	eor.w	r6, r6, r7
 8004e6c:	bf18      	it	ne
 8004e6e:	ea85 020c 	eorne.w	r2, r5, ip
	x -= sign;
 8004e72:	1bf6      	subs	r6, r6, r7
 8004e74:	409a      	lsls	r2, r3
 8004e76:	9608      	str	r6, [sp, #32]
 8004e78:	f8c0 2380 	str.w	r2, [r0, #896]	; 0x380
	sign = x >> (sizeof(int) * 8 - 1);
 8004e7c:	ea4f 7ee2 	mov.w	lr, r2, asr #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8004e80:	68ce      	ldr	r6, [r1, #12]
	x ^= sign;
 8004e82:	ea82 020e 	eor.w	r2, r2, lr
 8004e86:	fa46 fc04 	asr.w	ip, r6, r4
 8004e8a:	17f7      	asrs	r7, r6, #31
	x -= sign;
 8004e8c:	eba2 020e 	sub.w	r2, r2, lr
 8004e90:	4567      	cmp	r7, ip
 8004e92:	9209      	str	r2, [sp, #36]	; 0x24
 8004e94:	bf18      	it	ne
 8004e96:	ea85 0607 	eorne.w	r6, r5, r7
 8004e9a:	409e      	lsls	r6, r3
 8004e9c:	60ce      	str	r6, [r1, #12]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004e9e:	f8d0 6400 	ldr.w	r6, [r0, #1024]	; 0x400
 8004ea2:	fa46 f704 	asr.w	r7, r6, r4
 8004ea6:	17f2      	asrs	r2, r6, #31
 8004ea8:	42ba      	cmp	r2, r7
 8004eaa:	bf18      	it	ne
 8004eac:	ea85 0602 	eorne.w	r6, r5, r2
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004eb0:	f8d0 2480 	ldr.w	r2, [r0, #1152]	; 0x480
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004eb4:	409e      	lsls	r6, r3
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004eb6:	fa42 fe04 	asr.w	lr, r2, r4
 8004eba:	ea4f 7ce2 	mov.w	ip, r2, asr #31
	sign = x >> (sizeof(int) * 8 - 1);
 8004ebe:	17f7      	asrs	r7, r6, #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004ec0:	f8c0 6400 	str.w	r6, [r0, #1024]	; 0x400
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004ec4:	45f4      	cmp	ip, lr
	x ^= sign;
 8004ec6:	ea86 0607 	eor.w	r6, r6, r7
 8004eca:	bf18      	it	ne
 8004ecc:	ea85 020c 	eorne.w	r2, r5, ip
	x -= sign;
 8004ed0:	1bf6      	subs	r6, r6, r7
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	960a      	str	r6, [sp, #40]	; 0x28
 8004ed6:	f8c0 2480 	str.w	r2, [r0, #1152]	; 0x480
	sign = x >> (sizeof(int) * 8 - 1);
 8004eda:	17d7      	asrs	r7, r2, #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8004edc:	690e      	ldr	r6, [r1, #16]
	x ^= sign;
 8004ede:	407a      	eors	r2, r7
 8004ee0:	fa46 fe04 	asr.w	lr, r6, r4
 8004ee4:	ea4f 7ce6 	mov.w	ip, r6, asr #31
	x -= sign;
 8004ee8:	1bd2      	subs	r2, r2, r7
 8004eea:	45f4      	cmp	ip, lr
 8004eec:	920b      	str	r2, [sp, #44]	; 0x2c
 8004eee:	bf18      	it	ne
 8004ef0:	ea85 060c 	eorne.w	r6, r5, ip
 8004ef4:	409e      	lsls	r6, r3
 8004ef6:	610e      	str	r6, [r1, #16]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004ef8:	f8d0 2500 	ldr.w	r2, [r0, #1280]	; 0x500
 8004efc:	fa42 f704 	asr.w	r7, r2, r4
 8004f00:	17d6      	asrs	r6, r2, #31
 8004f02:	42be      	cmp	r6, r7
 8004f04:	bf18      	it	ne
 8004f06:	ea85 0206 	eorne.w	r2, r5, r6
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004f0a:	f8d0 6580 	ldr.w	r6, [r0, #1408]	; 0x580
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004f0e:	409a      	lsls	r2, r3
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004f10:	fa46 fc04 	asr.w	ip, r6, r4
 8004f14:	17f7      	asrs	r7, r6, #31
	sign = x >> (sizeof(int) * 8 - 1);
 8004f16:	ea4f 7ee2 	mov.w	lr, r2, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004f1a:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004f1e:	4567      	cmp	r7, ip
	x ^= sign;
 8004f20:	ea82 020e 	eor.w	r2, r2, lr
 8004f24:	bf18      	it	ne
 8004f26:	ea85 0607 	eorne.w	r6, r5, r7
	x -= sign;
 8004f2a:	eba2 020e 	sub.w	r2, r2, lr
 8004f2e:	409e      	lsls	r6, r3
 8004f30:	920c      	str	r2, [sp, #48]	; 0x30
 8004f32:	f8c0 6580 	str.w	r6, [r0, #1408]	; 0x580
	sign = x >> (sizeof(int) * 8 - 1);
 8004f36:	ea4f 7ce6 	mov.w	ip, r6, asr #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8004f3a:	694a      	ldr	r2, [r1, #20]
	x ^= sign;
 8004f3c:	ea86 080c 	eor.w	r8, r6, ip
 8004f40:	fa42 fe04 	asr.w	lr, r2, r4
 8004f44:	17d6      	asrs	r6, r2, #31
	x -= sign;
 8004f46:	eba8 070c 	sub.w	r7, r8, ip
 8004f4a:	4576      	cmp	r6, lr
 8004f4c:	970d      	str	r7, [sp, #52]	; 0x34
 8004f4e:	bf18      	it	ne
 8004f50:	ea85 0206 	eorne.w	r2, r5, r6
 8004f54:	409a      	lsls	r2, r3
 8004f56:	614a      	str	r2, [r1, #20]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004f58:	f8d0 2600 	ldr.w	r2, [r0, #1536]	; 0x600
 8004f5c:	fa42 f704 	asr.w	r7, r2, r4
 8004f60:	17d6      	asrs	r6, r2, #31
 8004f62:	42be      	cmp	r6, r7
 8004f64:	bf18      	it	ne
 8004f66:	ea85 0206 	eorne.w	r2, r5, r6
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004f6a:	f8d0 6680 	ldr.w	r6, [r0, #1664]	; 0x680
 8004f6e:	fa46 fc04 	asr.w	ip, r6, r4
 8004f72:	17f7      	asrs	r7, r6, #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004f74:	409a      	lsls	r2, r3
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004f76:	4567      	cmp	r7, ip
	sign = x >> (sizeof(int) * 8 - 1);
 8004f78:	ea4f 7ee2 	mov.w	lr, r2, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004f7c:	f8c0 2600 	str.w	r2, [r0, #1536]	; 0x600
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004f80:	bf18      	it	ne
 8004f82:	ea85 0607 	eorne.w	r6, r5, r7
	x ^= sign;
 8004f86:	ea82 080e 	eor.w	r8, r2, lr
 8004f8a:	409e      	lsls	r6, r3
	x -= sign;
 8004f8c:	eba8 080e 	sub.w	r8, r8, lr
 8004f90:	f8c0 6680 	str.w	r6, [r0, #1664]	; 0x680
	sign = x >> (sizeof(int) * 8 - 1);
 8004f94:	ea4f 7ce6 	mov.w	ip, r6, asr #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8004f98:	698a      	ldr	r2, [r1, #24]
	x ^= sign;
 8004f9a:	ea86 0e0c 	eor.w	lr, r6, ip
 8004f9e:	fa42 f704 	asr.w	r7, r2, r4
 8004fa2:	17d6      	asrs	r6, r2, #31
	x -= sign;
 8004fa4:	ebae 0e0c 	sub.w	lr, lr, ip
 8004fa8:	42be      	cmp	r6, r7
 8004faa:	bf18      	it	ne
 8004fac:	ea85 0206 	eorne.w	r2, r5, r6
 8004fb0:	409a      	lsls	r2, r3
 8004fb2:	618a      	str	r2, [r1, #24]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004fb4:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
 8004fb8:	fa42 f704 	asr.w	r7, r2, r4
 8004fbc:	17d6      	asrs	r6, r2, #31
 8004fbe:	42be      	cmp	r6, r7
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004fc0:	f8d0 7780 	ldr.w	r7, [r0, #1920]	; 0x780
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004fc4:	bf18      	it	ne
 8004fc6:	ea85 0206 	eorne.w	r2, r5, r6
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004fca:	fa47 f904 	asr.w	r9, r7, r4
 8004fce:	17fe      	asrs	r6, r7, #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004fd0:	409a      	lsls	r2, r3
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004fd2:	454e      	cmp	r6, r9
	sign = x >> (sizeof(int) * 8 - 1);
 8004fd4:	ea4f 7ae2 	mov.w	sl, r2, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004fd8:	f8c0 2700 	str.w	r2, [r0, #1792]	; 0x700
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8004fdc:	bf18      	it	ne
 8004fde:	ea85 0706 	eorne.w	r7, r5, r6
	x ^= sign;
 8004fe2:	ea82 0c0a 	eor.w	ip, r2, sl
 8004fe6:	409f      	lsls	r7, r3
	x -= sign;
 8004fe8:	ebac 0c0a 	sub.w	ip, ip, sl
 8004fec:	f8c0 7780 	str.w	r7, [r0, #1920]	; 0x780
	sign = x >> (sizeof(int) * 8 - 1);
 8004ff0:	ea4f 7ae7 	mov.w	sl, r7, asr #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8004ff4:	69ca      	ldr	r2, [r1, #28]
	x ^= sign;
 8004ff6:	ea87 070a 	eor.w	r7, r7, sl
 8004ffa:	fa42 f904 	asr.w	r9, r2, r4
 8004ffe:	17d6      	asrs	r6, r2, #31
	x -= sign;
 8005000:	eba7 070a 	sub.w	r7, r7, sl
 8005004:	454e      	cmp	r6, r9
 8005006:	bf18      	it	ne
 8005008:	ea85 0206 	eorne.w	r2, r5, r6
 800500c:	409a      	lsls	r2, r3
 800500e:	61ca      	str	r2, [r1, #28]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8005010:	f8d0 6800 	ldr.w	r6, [r0, #2048]	; 0x800
 8005014:	fa46 f904 	asr.w	r9, r6, r4
 8005018:	17f2      	asrs	r2, r6, #31
 800501a:	4591      	cmp	r9, r2
 800501c:	bf18      	it	ne
 800501e:	ea82 0605 	eorne.w	r6, r2, r5
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8005022:	f8d0 2880 	ldr.w	r2, [r0, #2176]	; 0x880
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8005026:	409e      	lsls	r6, r3
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8005028:	fa42 fb04 	asr.w	fp, r2, r4
 800502c:	ea4f 7ae2 	mov.w	sl, r2, asr #31
	sign = x >> (sizeof(int) * 8 - 1);
 8005030:	ea4f 79e6 	mov.w	r9, r6, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8005034:	f8c0 6800 	str.w	r6, [r0, #2048]	; 0x800
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8005038:	45d3      	cmp	fp, sl
	x ^= sign;
 800503a:	ea89 0606 	eor.w	r6, r9, r6
 800503e:	bf18      	it	ne
 8005040:	ea8a 0205 	eorne.w	r2, sl, r5
	x -= sign;
 8005044:	eba6 0609 	sub.w	r6, r6, r9
 8005048:	409a      	lsls	r2, r3
 800504a:	9603      	str	r6, [sp, #12]
 800504c:	9e02      	ldr	r6, [sp, #8]
	sign = x >> (sizeof(int) * 8 - 1);
 800504e:	ea4f 7be2 	mov.w	fp, r2, asr #31
 8005052:	f8c0 2880 	str.w	r2, [r0, #2176]	; 0x880
 8005056:	46b1      	mov	r9, r6
 8005058:	9e04      	ldr	r6, [sp, #16]
 800505a:	9801      	ldr	r0, [sp, #4]
	x ^= sign;
 800505c:	ea8b 0202 	eor.w	r2, fp, r2
 8005060:	ea49 0906 	orr.w	r9, r9, r6
 8005064:	9e05      	ldr	r6, [sp, #20]
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8005066:	f8d1 a020 	ldr.w	sl, [r1, #32]
	x -= sign;
 800506a:	eba2 020b 	sub.w	r2, r2, fp
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800506e:	ea49 0906 	orr.w	r9, r9, r6
 8005072:	9e08      	ldr	r6, [sp, #32]
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8005074:	fa4a f404 	asr.w	r4, sl, r4
 8005078:	ea4f 7bea 	mov.w	fp, sl, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800507c:	ea49 0900 	orr.w	r9, r9, r0
 8005080:	9806      	ldr	r0, [sp, #24]
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8005082:	455c      	cmp	r4, fp
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8005084:	ea49 0900 	orr.w	r9, r9, r0
 8005088:	9807      	ldr	r0, [sp, #28]
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800508a:	bf18      	it	ne
 800508c:	ea8b 0a05 	eorne.w	sl, fp, r5
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8005090:	ea49 0000 	orr.w	r0, r9, r0
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8005094:	fa0a f303 	lsl.w	r3, sl, r3
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8005098:	4330      	orrs	r0, r6
 800509a:	9e09      	ldr	r6, [sp, #36]	; 0x24
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800509c:	620b      	str	r3, [r1, #32]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800509e:	4330      	orrs	r0, r6
 80050a0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80050a2:	4330      	orrs	r0, r6
 80050a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80050a6:	4330      	orrs	r0, r6
 80050a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80050aa:	4330      	orrs	r0, r6
 80050ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80050ae:	4330      	orrs	r0, r6
 80050b0:	9e03      	ldr	r6, [sp, #12]
 80050b2:	ea40 0808 	orr.w	r8, r0, r8
 80050b6:	ea48 0e0e 	orr.w	lr, r8, lr
 80050ba:	ea4e 0c0c 	orr.w	ip, lr, ip
 80050be:	ea4c 0707 	orr.w	r7, ip, r7
 80050c2:	433e      	orrs	r6, r7
 80050c4:	4332      	orrs	r2, r6
}
 80050c6:	4610      	mov	r0, r2
 80050c8:	b00f      	add	sp, #60	; 0x3c
 80050ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 80050ce:	fa0c f603 	lsl.w	r6, ip, r3
			for (i = 0; i < 18; i+=2) {
 80050d2:	4548      	cmp	r0, r9
 80050d4:	f508 7880 	add.w	r8, r8, #256	; 0x100
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 80050d8:	f841 6b04 	str.w	r6, [r1], #4
			for (i = 0; i < 18; i+=2) {
 80050dc:	f47f addf 	bne.w	8004c9e <FreqInvertRescale+0x8a>
 80050e0:	e5cd      	b.n	8004c7e <FreqInvertRescale+0x6a>
 80050e2:	bf00      	nop

080050e4 <xmp3fixpt_IMDCT>:
 *              updated hi->nonZeroBound index for this channel
 *
 * Return:      0 on success,  -1 if null input pointers
 **************************************************************************************/
int IMDCT(MP3DecInfo *mp3DecInfo, int gr, int ch)
{
 80050e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e8:	b0cd      	sub	sp, #308	; 0x134
 80050ea:	e9cd 120d 	strd	r1, r2, [sp, #52]	; 0x34
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	BlockCount bc;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 80050ee:	2800      	cmp	r0, #0
 80050f0:	f003 8046 	beq.w	8008180 <xmp3fixpt_IMDCT+0x309c>
 80050f4:	6803      	ldr	r3, [r0, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f003 8042 	beq.w	8008180 <xmp3fixpt_IMDCT+0x309c>
 80050fc:	6846      	ldr	r6, [r0, #4]
 80050fe:	9633      	str	r6, [sp, #204]	; 0xcc
 8005100:	2e00      	cmp	r6, #0
 8005102:	f003 803d 	beq.w	8008180 <xmp3fixpt_IMDCT+0x309c>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 8005106:	68c5      	ldr	r5, [r0, #12]
 8005108:	9510      	str	r5, [sp, #64]	; 0x40
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800510a:	2d00      	cmp	r5, #0
 800510c:	f003 8038 	beq.w	8008180 <xmp3fixpt_IMDCT+0x309c>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 8005110:	6940      	ldr	r0, [r0, #20]
 8005112:	9011      	str	r0, [sp, #68]	; 0x44
 8005114:	2800      	cmp	r0, #0
 8005116:	f003 8033 	beq.w	8008180 <xmp3fixpt_IMDCT+0x309c>
 800511a:	4617      	mov	r7, r2
	 * for mixed blocks, nBfly always 1, except 3 for 8 kHz MPEG 2.5 (see sfBandTab) 
     *   nLongBlocks = number of blocks with (possibly) non-zero power 
	 *   nBfly = number of butterflies to do (nLongBlocks - 1, unless no long blocks)
	 */
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
	if (si->sis[gr][ch].blockType != 2) {
 800511c:	4608      	mov	r0, r1
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800511e:	781a      	ldrb	r2, [r3, #0]
	if (si->sis[gr][ch].blockType != 2) {
 8005120:	00c9      	lsls	r1, r1, #3
 8005122:	00fc      	lsls	r4, r7, #3
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 8005124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005126:	2a00      	cmp	r2, #0
	if (si->sis[gr][ch].blockType != 2) {
 8005128:	eb01 0200 	add.w	r2, r1, r0
 800512c:	eb04 0007 	add.w	r0, r4, r7
 8005130:	9435      	str	r4, [sp, #212]	; 0xd4
 8005132:	9134      	str	r1, [sp, #208]	; 0xd0
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 8005134:	bf18      	it	ne
 8005136:	2406      	movne	r4, #6
 8005138:	ea4f 2100 	mov.w	r1, r0, lsl #8
 800513c:	bf08      	it	eq
 800513e:	2408      	moveq	r4, #8
	if (si->sis[gr][ch].blockType != 2) {
 8005140:	0112      	lsls	r2, r2, #4
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 8005142:	f8df c2f0 	ldr.w	ip, [pc, #752]	; 8005434 <xmp3fixpt_IMDCT+0x350>
 8005146:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
	if (si->sis[gr][ch].blockType != 2) {
 800514a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800514e:	9112      	str	r1, [sp, #72]	; 0x48
 8005150:	1869      	adds	r1, r5, r1
 8005152:	4432      	add	r2, r6
 8005154:	9118      	str	r1, [sp, #96]	; 0x60
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 8005156:	fb8c 1003 	smull	r1, r0, ip, r3
 800515a:	17db      	asrs	r3, r3, #31
 800515c:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
	if (si->sis[gr][ch].blockType != 2) {
 8005160:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 8005162:	b201      	sxth	r1, r0
	if (si->sis[gr][ch].blockType != 2) {
 8005164:	2b02      	cmp	r3, #2
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 8005166:	910f      	str	r1, [sp, #60]	; 0x3c
	if (si->sis[gr][ch].blockType != 2) {
 8005168:	f002 87ed 	beq.w	8008146 <xmp3fixpt_IMDCT+0x3062>
		/* all long transforms */
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800516c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8005170:	f240 2226 	movw	r2, #550	; 0x226
 8005174:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005178:	4293      	cmp	r3, r2
 800517a:	f340 851f 	ble.w	8005bbc <xmp3fixpt_IMDCT+0xad8>
 800517e:	f240 2336 	movw	r3, #566	; 0x236
 8005182:	21f8      	movs	r1, #248	; 0xf8
 8005184:	9313      	str	r3, [sp, #76]	; 0x4c
 8005186:	2320      	movs	r3, #32
 8005188:	9316      	str	r3, [sp, #88]	; 0x58
 800518a:	231f      	movs	r3, #31
 800518c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800518e:	4419      	add	r1, r3
		a0 = x[-1];			c0 = *c;	c++;	b0 = x[0];		c1 = *c;	c++;
 8005190:	4aa7      	ldr	r2, [pc, #668]	; (8005430 <xmp3fixpt_IMDCT+0x34c>)
 8005192:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8005196:	4603      	mov	r3, r0
 8005198:	9109      	str	r1, [sp, #36]	; 0x24
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 800519a:	6911      	ldr	r1, [r2, #16]
 800519c:	9101      	str	r1, [sp, #4]
 800519e:	6951      	ldr	r1, [r2, #20]
 80051a0:	9102      	str	r1, [sp, #8]
		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 80051a2:	6991      	ldr	r1, [r2, #24]
 80051a4:	9103      	str	r1, [sp, #12]
 80051a6:	69d1      	ldr	r1, [r2, #28]
 80051a8:	9104      	str	r1, [sp, #16]
		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 80051aa:	6a11      	ldr	r1, [r2, #32]
 80051ac:	9105      	str	r1, [sp, #20]
 80051ae:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80051b0:	9106      	str	r1, [sp, #24]
		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 80051b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 80051b4:	e9d2 400e 	ldrd	r4, r0, [r2, #56]	; 0x38
		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 80051b8:	9107      	str	r1, [sp, #28]
 80051ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 80051bc:	900c      	str	r0, [sp, #48]	; 0x30
		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 80051be:	9108      	str	r1, [sp, #32]
		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 80051c0:	e9d2 650c 	ldrd	r6, r5, [r2, #48]	; 0x30
		a0 = x[-1];			c0 = *c;	c++;	b0 = x[0];		c1 = *c;	c++;
 80051c4:	e9d2 8e00 	ldrd	r8, lr, [r2]
		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 80051c8:	e9d2 c702 	ldrd	ip, r7, [r2, #8]
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 80051cc:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
		a0 = x[-1];			c0 = *c;	c++;	b0 = x[0];		c1 = *c;	c++;
 80051d0:	e9d3 2911 	ldrd	r2, r9, [r3, #68]	; 0x44
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80051d4:	4692      	mov	sl, r2
 80051d6:	fb88 1a0a 	smull	r1, sl, r8, sl
 80051da:	4649      	mov	r1, r9
 80051dc:	fb8e b101 	smull	fp, r1, lr, r1
		x[-1] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 80051e0:	ebaa 0101 	sub.w	r1, sl, r1
 80051e4:	0049      	lsls	r1, r1, #1
 80051e6:	6459      	str	r1, [r3, #68]	; 0x44
 80051e8:	fb88 1909 	smull	r1, r9, r8, r9
 80051ec:	fb8e 1202 	smull	r1, r2, lr, r2
		x[0] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 80051f0:	eb09 0102 	add.w	r1, r9, r2
		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 80051f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051f6:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
		x[0] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 80051fa:	0049      	lsls	r1, r1, #1
 80051fc:	4692      	mov	sl, r2
 80051fe:	6499      	str	r1, [r3, #72]	; 0x48
 8005200:	fb8c 1a0a 	smull	r1, sl, ip, sl
 8005204:	4649      	mov	r1, r9
 8005206:	fb87 b101 	smull	fp, r1, r7, r1
		x[-2] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800520a:	ebaa 0101 	sub.w	r1, sl, r1
 800520e:	0049      	lsls	r1, r1, #1
 8005210:	6419      	str	r1, [r3, #64]	; 0x40
 8005212:	fb8c 1909 	smull	r1, r9, ip, r9
 8005216:	fb87 1202 	smull	r1, r2, r7, r2
		x[1] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800521a:	eb09 0102 	add.w	r1, r9, r2
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 800521e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005220:	f8d3 9050 	ldr.w	r9, [r3, #80]	; 0x50
		x[1] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8005224:	0049      	lsls	r1, r1, #1
 8005226:	4692      	mov	sl, r2
 8005228:	9c01      	ldr	r4, [sp, #4]
 800522a:	64d9      	str	r1, [r3, #76]	; 0x4c
 800522c:	fb84 1a0a 	smull	r1, sl, r4, sl
 8005230:	4649      	mov	r1, r9
 8005232:	9d02      	ldr	r5, [sp, #8]
 8005234:	fb85 b101 	smull	fp, r1, r5, r1
		x[-3] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8005238:	ebaa 0101 	sub.w	r1, sl, r1
 800523c:	0049      	lsls	r1, r1, #1
 800523e:	63d9      	str	r1, [r3, #60]	; 0x3c
 8005240:	fb84 1909 	smull	r1, r9, r4, r9
 8005244:	fb85 1202 	smull	r1, r2, r5, r2
		x[2] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8005248:	eb09 0102 	add.w	r1, r9, r2
		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 800524c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800524e:	f8d3 9054 	ldr.w	r9, [r3, #84]	; 0x54
		x[2] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8005252:	0049      	lsls	r1, r1, #1
 8005254:	4692      	mov	sl, r2
 8005256:	9803      	ldr	r0, [sp, #12]
 8005258:	6519      	str	r1, [r3, #80]	; 0x50
 800525a:	fb80 1a0a 	smull	r1, sl, r0, sl
 800525e:	4649      	mov	r1, r9
 8005260:	9d04      	ldr	r5, [sp, #16]
 8005262:	fb85 b101 	smull	fp, r1, r5, r1
		x[-4] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8005266:	ebaa 0101 	sub.w	r1, sl, r1
 800526a:	0049      	lsls	r1, r1, #1
 800526c:	6399      	str	r1, [r3, #56]	; 0x38
 800526e:	fb80 1909 	smull	r1, r9, r0, r9
 8005272:	fb85 1202 	smull	r1, r2, r5, r2
		x[3] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8005276:	eb09 0102 	add.w	r1, r9, r2
		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 800527a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800527c:	f8d3 9058 	ldr.w	r9, [r3, #88]	; 0x58
		x[3] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8005280:	0049      	lsls	r1, r1, #1
 8005282:	4692      	mov	sl, r2
 8005284:	9805      	ldr	r0, [sp, #20]
 8005286:	6559      	str	r1, [r3, #84]	; 0x54
 8005288:	fb80 1a0a 	smull	r1, sl, r0, sl
 800528c:	4649      	mov	r1, r9
 800528e:	9c06      	ldr	r4, [sp, #24]
 8005290:	fb84 b101 	smull	fp, r1, r4, r1
		x[-5] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8005294:	ebaa 0101 	sub.w	r1, sl, r1
 8005298:	0049      	lsls	r1, r1, #1
 800529a:	6359      	str	r1, [r3, #52]	; 0x34
 800529c:	fb80 1909 	smull	r1, r9, r0, r9
 80052a0:	fb84 1202 	smull	r1, r2, r4, r2
		x[4] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 80052a4:	eb09 0102 	add.w	r1, r9, r2
		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 80052a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052aa:	f8d3 905c 	ldr.w	r9, [r3, #92]	; 0x5c
		x[4] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 80052ae:	0049      	lsls	r1, r1, #1
 80052b0:	4692      	mov	sl, r2
 80052b2:	9807      	ldr	r0, [sp, #28]
 80052b4:	6599      	str	r1, [r3, #88]	; 0x58
 80052b6:	fb80 1a0a 	smull	r1, sl, r0, sl
 80052ba:	4649      	mov	r1, r9
 80052bc:	9c08      	ldr	r4, [sp, #32]
 80052be:	fb84 b101 	smull	fp, r1, r4, r1
		x[-6] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 80052c2:	ebaa 0101 	sub.w	r1, sl, r1
 80052c6:	0049      	lsls	r1, r1, #1
 80052c8:	6319      	str	r1, [r3, #48]	; 0x30
 80052ca:	fb80 1909 	smull	r1, r9, r0, r9
 80052ce:	fb84 1202 	smull	r1, r2, r4, r2
		x[5] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 80052d2:	eb09 0102 	add.w	r1, r9, r2
		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 80052d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d8:	f8d3 9060 	ldr.w	r9, [r3, #96]	; 0x60
		x[5] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 80052dc:	0049      	lsls	r1, r1, #1
 80052de:	4692      	mov	sl, r2
 80052e0:	65d9      	str	r1, [r3, #92]	; 0x5c
 80052e2:	fb86 1a0a 	smull	r1, sl, r6, sl
 80052e6:	4649      	mov	r1, r9
 80052e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80052ea:	fb80 b101 	smull	fp, r1, r0, r1
		x[-7] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 80052ee:	ebaa 0101 	sub.w	r1, sl, r1
 80052f2:	0049      	lsls	r1, r1, #1
 80052f4:	62d9      	str	r1, [r3, #44]	; 0x2c
 80052f6:	fb86 1909 	smull	r1, r9, r6, r9
 80052fa:	fb80 1202 	smull	r1, r2, r0, r2
		x[6] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 80052fe:	eb09 0102 	add.w	r1, r9, r2
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 8005302:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8005306:	6e5a      	ldr	r2, [r3, #100]	; 0x64
		x[6] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8005308:	0049      	lsls	r1, r1, #1
 800530a:	46ca      	mov	sl, r9
 800530c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800530e:	6619      	str	r1, [r3, #96]	; 0x60
 8005310:	fb85 1a0a 	smull	r1, sl, r5, sl
 8005314:	4611      	mov	r1, r2
 8005316:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005318:	fb80 b101 	smull	fp, r1, r0, r1
		x[-8] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800531c:	ebaa 0101 	sub.w	r1, sl, r1
 8005320:	0049      	lsls	r1, r1, #1
 8005322:	6299      	str	r1, [r3, #40]	; 0x28
 8005324:	fb85 1202 	smull	r1, r2, r5, r2
 8005328:	fb80 1909 	smull	r1, r9, r0, r9
		x[7] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800532c:	444a      	add	r2, r9
 800532e:	3348      	adds	r3, #72	; 0x48
 8005330:	0052      	lsls	r2, r2, #1
 8005332:	61da      	str	r2, [r3, #28]
	for (k = nBfly; k > 0; k--) {
 8005334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005336:	4293      	cmp	r3, r2
 8005338:	f47f af4a 	bne.w	80051d0 <xmp3fixpt_IMDCT+0xec>
 800533c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800533e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005340:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005342:	189a      	adds	r2, r3, r2
 8005344:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8005346:	0112      	lsls	r2, r2, #4
 8005348:	440b      	add	r3, r1
 800534a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800534e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8005350:	4413      	add	r3, r2
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	932b      	str	r3, [sp, #172]	; 0xac
 8005356:	460b      	mov	r3, r1
	bc.prevType = mi->prevType[ch];
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
	bc.gbIn = hi->gb[ch];

	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 8005358:	9935      	ldr	r1, [sp, #212]	; 0xd4
 800535a:	009a      	lsls	r2, r3, #2
 800535c:	9812      	ldr	r0, [sp, #72]	; 0x48
	bc.gbIn = hi->gb[ch];
 800535e:	f241 2c08 	movw	ip, #4616	; 0x1208
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 8005362:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005364:	4606      	mov	r6, r0
 8005366:	9339      	str	r3, [sp, #228]	; 0xe4
 8005368:	9810      	ldr	r0, [sp, #64]	; 0x40
 800536a:	18cb      	adds	r3, r1, r3
 800536c:	18a7      	adds	r7, r4, r2
 800536e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005370:	4426      	add	r6, r4
 8005372:	4410      	add	r0, r2
 8005374:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
 8005378:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800537a:	9538      	str	r5, [sp, #224]	; 0xe0
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	442a      	add	r2, r5
 8005380:	f504 5490 	add.w	r4, r4, #4608	; 0x1200
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 8005384:	f500 5590 	add.w	r5, r0, #4608	; 0x1200
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 8005388:	9631      	str	r6, [sp, #196]	; 0xc4
 800538a:	942c      	str	r4, [sp, #176]	; 0xb0
 800538c:	3328      	adds	r3, #40	; 0x28
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800538e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8005390:	682c      	ldr	r4, [r5, #0]
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 8005392:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 8005396:	9a2b      	ldr	r2, [sp, #172]	; 0xac
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 8005398:	42a6      	cmp	r6, r4
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 800539a:	4926      	ldr	r1, [pc, #152]	; (8005434 <xmp3fixpt_IMDCT+0x350>)
 800539c:	9737      	str	r7, [sp, #220]	; 0xdc
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800539e:	bfb8      	it	lt
 80053a0:	4626      	movlt	r6, r4
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 80053a2:	2a00      	cmp	r2, #0
 80053a4:	9c2b      	ldr	r4, [sp, #172]	; 0xac
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 80053a6:	f106 0211 	add.w	r2, r6, #17
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 80053aa:	602e      	str	r6, [r5, #0]
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 80053ac:	f507 55d8 	add.w	r5, r7, #6912	; 0x1b00
	bc.gbIn = hi->gb[ch];
 80053b0:	f850 000c 	ldr.w	r0, [r0, ip]
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 80053b4:	fb81 6102 	smull	r6, r1, r1, r2
 80053b8:	ea4f 72e2 	mov.w	r2, r2, asr #31
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 80053bc:	9536      	str	r5, [sp, #216]	; 0xd8
	bc.prevType = mi->prevType[ch];
 80053be:	f641 3508 	movw	r5, #6920	; 0x1b08
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 80053c2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 80053c6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80053c8:	bf08      	it	eq
 80053ca:	4626      	moveq	r6, r4
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
 80053cc:	f641 3410 	movw	r4, #6928	; 0x1b10
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 80053d0:	9204      	str	r2, [sp, #16]
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 80053d2:	9a33      	ldr	r2, [sp, #204]	; 0xcc
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 80053d4:	962b      	str	r6, [sp, #172]	; 0xac
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 80053d6:	441a      	add	r2, r3
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 80053d8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
	bc.gbIn = hi->gb[ch];
 80053da:	9005      	str	r0, [sp, #20]
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 80053dc:	681b      	ldr	r3, [r3, #0]
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 80053de:	9217      	str	r2, [sp, #92]	; 0x5c
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 80053e0:	932a      	str	r3, [sp, #168]	; 0xa8
	for(i = 0; i < bc->nBlocksLong; i++) {
 80053e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
	bc.prevType = mi->prevType[ch];
 80053e4:	597b      	ldr	r3, [r7, r5]
	for(i = 0; i < bc->nBlocksLong; i++) {
 80053e6:	2a00      	cmp	r2, #0
	bc.prevType = mi->prevType[ch];
 80053e8:	9309      	str	r3, [sp, #36]	; 0x24
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
 80053ea:	593b      	ldr	r3, [r7, r4]
 80053ec:	9332      	str	r3, [sp, #200]	; 0xc8
	for(i = 0; i < bc->nBlocksLong; i++) {
 80053ee:	f342 86c2 	ble.w	8008176 <xmp3fixpt_IMDCT+0x3092>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f300 85df 	bgt.w	8005fb6 <xmp3fixpt_IMDCT+0xed2>
 80053f8:	2200      	movs	r2, #0
 80053fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80053fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80053fe:	9202      	str	r2, [sp, #8]
 8005400:	9120      	str	r1, [sp, #128]	; 0x80
 8005402:	9203      	str	r2, [sp, #12]
		wpLo = imdctWin[btPrev] + 18;
 8005404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005406:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800540a:	f8df a02c 	ldr.w	sl, [pc, #44]	; 8005438 <xmp3fixpt_IMDCT+0x354>
 800540e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8005412:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005414:	468b      	mov	fp, r1
 8005416:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 800541a:	f103 0848 	add.w	r8, r3, #72	; 0x48
 800541e:	eb0a 1302 	add.w	r3, sl, r2, lsl #4
 8005422:	9a03      	ldr	r2, [sp, #12]
 8005424:	9322      	str	r3, [sp, #136]	; 0x88
 8005426:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8005428:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	e313      	b.n	8005a58 <xmp3fixpt_IMDCT+0x974>
 8005430:	08023874 	.word	0x08023874
 8005434:	38e38e39 	.word	0x38e38e39
 8005438:	080238b4 	.word	0x080238b4
			acc1 = (*xCurr--) - acc1;
 800543c:	1aca      	subs	r2, r1, r3
		es = 0;
 800543e:	2100      	movs	r1, #0
			acc1 = (*xCurr--) - acc1;
 8005440:	f858 5c2c 	ldr.w	r5, [r8, #-44]
			acc1 = (*xCurr--) - acc1;
 8005444:	920b      	str	r2, [sp, #44]	; 0x2c
		es = 0;
 8005446:	911a      	str	r1, [sp, #104]	; 0x68
			acc1 = (*xCurr--) - acc1;
 8005448:	e958 7404 	ldrd	r7, r4, [r8, #-16]
			acc1 = (*xCurr--) - acc1;
 800544c:	1aa4      	subs	r4, r4, r2
			acc1 = (*xCurr--) - acc1;
 800544e:	e958 6206 	ldrd	r6, r2, [r8, #-24]
 8005452:	1b38      	subs	r0, r7, r4
			acc2 = acc1 - acc2;
 8005454:	1ae3      	subs	r3, r4, r3
			acc1 = (*xCurr--) - acc1;
 8005456:	1a12      	subs	r2, r2, r0
			acc2 = acc1 - acc2;
 8005458:	930a      	str	r3, [sp, #40]	; 0x28
			acc1 = (*xCurr--) - acc1;
 800545a:	9008      	str	r0, [sp, #32]
 800545c:	1ab6      	subs	r6, r6, r2
			acc2 = acc1 - acc2;
 800545e:	980a      	ldr	r0, [sp, #40]	; 0x28
			acc1 = (*xCurr--) - acc1;
 8005460:	e958 7108 	ldrd	r7, r1, [r8, #-32]
 8005464:	e958 430a 	ldrd	r4, r3, [r8, #-40]	; 0x28
			acc1 = (*xCurr--) - acc1;
 8005468:	1b89      	subs	r1, r1, r6
			acc2 = acc1 - acc2;
 800546a:	1a10      	subs	r0, r2, r0
			acc1 = (*xCurr--) - acc1;
 800546c:	f858 2c38 	ldr.w	r2, [r8, #-56]
 8005470:	eba7 0e01 	sub.w	lr, r7, r1
			acc2 = acc1 - acc2;
 8005474:	9010      	str	r0, [sp, #64]	; 0x40
 8005476:	1a08      	subs	r0, r1, r0
			acc1 = (*xCurr--) - acc1;
 8005478:	f858 1c3c 	ldr.w	r1, [r8, #-60]
 800547c:	eba3 0c0e 	sub.w	ip, r3, lr
			acc1 = (*xCurr--) - acc1;
 8005480:	960e      	str	r6, [sp, #56]	; 0x38
			acc2 = acc1 - acc2;
 8005482:	900f      	str	r0, [sp, #60]	; 0x3c
			acc1 = (*xCurr--) - acc1;
 8005484:	eba4 030c 	sub.w	r3, r4, ip
			acc2 = acc1 - acc2;
 8005488:	ebac 0400 	sub.w	r4, ip, r0
			acc1 = (*xCurr--) - acc1;
 800548c:	f858 0c48 	ldr.w	r0, [r8, #-72]
 8005490:	469a      	mov	sl, r3
			acc1 = (*xCurr--) - acc1;
 8005492:	1aeb      	subs	r3, r5, r3
			acc1 = (*xCurr--) - acc1;
 8005494:	f858 5c30 	ldr.w	r5, [r8, #-48]
			acc2 = acc1 - acc2;
 8005498:	941c      	str	r4, [sp, #112]	; 0x70
 800549a:	1b1c      	subs	r4, r3, r4
			acc1 = (*xCurr--) - acc1;
 800549c:	eba5 0903 	sub.w	r9, r5, r3
			acc1 = (*xCurr--) - acc1;
 80054a0:	f858 3c34 	ldr.w	r3, [r8, #-52]
			acc2 = acc1 - acc2;
 80054a4:	940c      	str	r4, [sp, #48]	; 0x30
			acc1 = (*xCurr--) - acc1;
 80054a6:	eba3 0309 	sub.w	r3, r3, r9
			acc1 = (*xCurr--) - acc1;
 80054aa:	1ad2      	subs	r2, r2, r3
			acc2 = acc1 - acc2;
 80054ac:	1b1b      	subs	r3, r3, r4
			acc1 = (*xCurr--) - acc1;
 80054ae:	1a89      	subs	r1, r1, r2
			acc2 = acc1 - acc2;
 80054b0:	9311      	str	r3, [sp, #68]	; 0x44
			acc1 = (*xCurr--) - acc1;
 80054b2:	e958 6711 	ldrd	r6, r7, [r8, #-68]	; 0x44
			acc2 = acc1 - acc2;
 80054b6:	1acb      	subs	r3, r1, r3
			acc1 = (*xCurr--) - acc1;
 80054b8:	1a7f      	subs	r7, r7, r1
			acc2 = acc1 - acc2;
 80054ba:	9307      	str	r3, [sp, #28]
			acc1 = (*xCurr--) - acc1;
 80054bc:	1bf6      	subs	r6, r6, r7
			acc2 = acc1 - acc2;
 80054be:	1af1      	subs	r1, r6, r3
			acc1 = (*xCurr--) - acc1;
 80054c0:	1b86      	subs	r6, r0, r6
	a5 = x2 + x4;
 80054c2:	4654      	mov	r4, sl
	xBuf[9] >>= 1;
 80054c4:	1049      	asrs	r1, r1, #1
	a5 = x2 + x4;
 80054c6:	4492      	add	sl, r2
	xBuf[0] >>= 1;
 80054c8:	1076      	asrs	r6, r6, #1
	a4 = x2 - x4;
 80054ca:	eba2 0c04 	sub.w	ip, r2, r4
	a6 = x2 + x8;
 80054ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	a7 = x1 + x7;
 80054d0:	9808      	ldr	r0, [sp, #32]
	a3 = x1 + x5;
 80054d2:	eb0e 0307 	add.w	r3, lr, r7
	a6 = x2 + x8;
 80054d6:	18a5      	adds	r5, r4, r2
	xBuf[9] >>= 1;
 80054d8:	9112      	str	r1, [sp, #72]	; 0x48
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 80054da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	a7 = x1 + x7;
 80054dc:	4438      	add	r0, r7
	a1 = x0 - x6;
 80054de:	990e      	ldr	r1, [sp, #56]	; 0x38
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 80054e0:	ebac 0202 	sub.w	r2, ip, r2
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 80054e4:	9319      	str	r3, [sp, #100]	; 0x64
	a1 = x0 - x6;
 80054e6:	1a71      	subs	r1, r6, r1
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 80054e8:	1a1c      	subs	r4, r3, r0
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 80054ea:	9213      	str	r2, [sp, #76]	; 0x4c
	a1 = x0 - x6;
 80054ec:	910d      	str	r1, [sp, #52]	; 0x34
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 80054ee:	eba5 010a 	sub.w	r1, r5, sl
 80054f2:	4bd3      	ldr	r3, [pc, #844]	; (8005840 <xmp3fixpt_IMDCT+0x75c>)
 80054f4:	fb83 2909 	smull	r2, r9, r3, r9
	a2 = x1 - x5;
 80054f8:	eba7 070e 	sub.w	r7, r7, lr
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 80054fc:	9a08      	ldr	r2, [sp, #32]
 80054fe:	1abf      	subs	r7, r7, r2
 8005500:	46bc      	mov	ip, r7
 8005502:	fb83 2c0c 	smull	r2, ip, r3, ip
 8005506:	4fcf      	ldr	r7, [pc, #828]	; (8005844 <xmp3fixpt_IMDCT+0x760>)
 8005508:	46d6      	mov	lr, sl
 800550a:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800550e:	fb87 2e0e 	smull	r2, lr, r7, lr
 8005512:	4bcd      	ldr	r3, [pc, #820]	; (8005848 <xmp3fixpt_IMDCT+0x764>)
 8005514:	462a      	mov	r2, r5
 8005516:	fb83 5202 	smull	r5, r2, r3, r2
 800551a:	921e      	str	r2, [sp, #120]	; 0x78
 800551c:	468c      	mov	ip, r1
 800551e:	fb87 1c0c 	smull	r1, ip, r7, ip
 8005522:	4657      	mov	r7, sl
 8005524:	fb83 1707 	smull	r1, r7, r3, r7
 8005528:	f103 5570 	add.w	r5, r3, #1006632960	; 0x3c000000
 800552c:	46a2      	mov	sl, r4
 800552e:	f505 254c 	add.w	r5, r5, #835584	; 0xcc000
 8005532:	f205 25cb 	addw	r5, r5, #715	; 0x2cb
 8005536:	fb85 1a0a 	smull	r1, sl, r5, sl
 800553a:	4bc4      	ldr	r3, [pc, #784]	; (800584c <xmp3fixpt_IMDCT+0x768>)
 800553c:	fb83 1000 	smull	r1, r0, r3, r0
 8005540:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005542:	460a      	mov	r2, r1
 8005544:	fb85 1202 	smull	r1, r2, r5, r2
 8005548:	9219      	str	r2, [sp, #100]	; 0x64
 800554a:	fb83 1404 	smull	r1, r4, r3, r4
	a3 = x1 + x5;
 800554e:	9b07      	ldr	r3, [sp, #28]
	a16 = ( m5 << 1) + (m6 << 1);
 8005550:	ea4f 054e 	mov.w	r5, lr, lsl #1
	a3 = x1 + x5;
 8005554:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	a20 = (m11 << 1) - (m12 << 1);
 8005556:	0064      	lsls	r4, r4, #1
	a13 = a12  +  (  m1 << 1);
 8005558:	ea4f 0949 	mov.w	r9, r9, lsl #1
	a3 = x1 + x5;
 800555c:	18d1      	adds	r1, r2, r3
 800555e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	a19 = ( m9 << 1) + (m10 << 1);
 8005560:	0040      	lsls	r0, r0, #1
	a3 = x1 + x5;
 8005562:	910b      	str	r1, [sp, #44]	; 0x2c
	a17 = ( m7 << 1) - (m8 << 1);
 8005564:	0079      	lsls	r1, r7, #1
 8005566:	9208      	str	r2, [sp, #32]
	a19 = ( m9 << 1) + (m10 << 1);
 8005568:	eb00 004a 	add.w	r0, r0, sl, lsl #1
	a16 = ( m5 << 1) + (m6 << 1);
 800556c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
	a17 = ( m7 << 1) - (m8 << 1);
 800556e:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
	a7 = x1 + x7;
 8005572:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	a16 = ( m5 << 1) + (m6 << 1);
 8005574:	eb05 0542 	add.w	r5, r5, r2, lsl #1
	a7 = x1 + x7;
 8005578:	18fa      	adds	r2, r7, r3
	a5 = x2 + x4;
 800557a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800557c:	9f11      	ldr	r7, [sp, #68]	; 0x44
	a18 = a16 + a17;
 800557e:	eb05 0e01 	add.w	lr, r5, r1
	a7 = x1 + x7;
 8005582:	920c      	str	r2, [sp, #48]	; 0x30
	a5 = x2 + x4;
 8005584:	461a      	mov	r2, r3
	a4 = x2 - x4;
 8005586:	469c      	mov	ip, r3
 8005588:	9b11      	ldr	r3, [sp, #68]	; 0x44
	a5 = x2 + x4;
 800558a:	443a      	add	r2, r7
	a12 = x[0] +  (x[6] >> 1);
 800558c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	a20 = (m11 << 1) - (m12 << 1);
 800558e:	940e      	str	r4, [sp, #56]	; 0x38
	a4 = x2 - x4;
 8005590:	eba3 0c0c 	sub.w	ip, r3, ip
	a20 = (m11 << 1) - (m12 << 1);
 8005594:	9c19      	ldr	r4, [sp, #100]	; 0x64
	a12 = x[0] +  (x[6] >> 1);
 8005596:	eb06 0667 	add.w	r6, r6, r7, asr #1
	a6 = x2 + x8;
 800559a:	9f06      	ldr	r7, [sp, #24]
 800559c:	443b      	add	r3, r7
	a14 = a12  -  (  m1 << 1);
 800559e:	eba6 0709 	sub.w	r7, r6, r9
	a13 = a12  +  (  m1 << 1);
 80055a2:	444e      	add	r6, r9
	a20 = (m11 << 1) - (m12 << 1);
 80055a4:	46a1      	mov	r9, r4
 80055a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80055a8:	ebc4 0449 	rsb	r4, r4, r9, lsl #1
	a26 = a14 - a18;
 80055ac:	eba7 090e 	sub.w	r9, r7, lr
	a27 = a13 - a18;
 80055b0:	eba6 0e0e 	sub.w	lr, r6, lr
	a20 = (m11 << 1) - (m12 << 1);
 80055b4:	940e      	str	r4, [sp, #56]	; 0x38
	x1 = a15 + (m3 << 1);	x[1] = x1;
 80055b6:	9c1d      	ldr	r4, [sp, #116]	; 0x74
	a26 = a14 - a18;
 80055b8:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
	x1 = a15 + (m3 << 1);	x[1] = x1;
 80055bc:	ea4f 0a44 	mov.w	sl, r4, lsl #1
	a21 = a20 - a19;
 80055c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80055c2:	eba4 0900 	sub.w	r9, r4, r0
	a22 = a13 + a16;
 80055c6:	19ac      	adds	r4, r5, r6
	a25 = a13 + a17;
 80055c8:	440e      	add	r6, r1
	a23 = a14 + a16;
 80055ca:	443d      	add	r5, r7
	a24 = a14 + a17;
 80055cc:	4439      	add	r1, r7
	a15 = a1   +  ( a11 >> 1);
 80055ce:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	a22 = a13 + a16;
 80055d0:	9411      	str	r4, [sp, #68]	; 0x44
	x5 = a27 + a21;			x[5] = x5;
 80055d2:	44ce      	add	lr, r9
	a15 = a1   +  ( a11 >> 1);
 80055d4:	463c      	mov	r4, r7
 80055d6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
	x5 = a27 + a21;			x[5] = x5;
 80055d8:	f8cd e080 	str.w	lr, [sp, #128]	; 0x80
	x8 = a23 - a19;			x[8] = x8;
 80055dc:	1a2d      	subs	r5, r5, r0
	a15 = a1   +  ( a11 >> 1);
 80055de:	eb04 0767 	add.w	r7, r4, r7, asr #1
	x3 = a26 - a21;			x[3] = x3;
 80055e2:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80055e4:	eba4 0409 	sub.w	r4, r4, r9
	x1 = a15 + (m3 << 1);	x[1] = x1;
 80055e8:	eb07 0e0a 	add.w	lr, r7, sl
	x3 = a26 - a21;			x[3] = x3;
 80055ec:	9419      	str	r4, [sp, #100]	; 0x64
	x0 = a22 + a19;			x[0] = x0;
 80055ee:	9c11      	ldr	r4, [sp, #68]	; 0x44
	x8 = a23 - a19;			x[8] = x8;
 80055f0:	9511      	str	r5, [sp, #68]	; 0x44
	x0 = a22 + a19;			x[0] = x0;
 80055f2:	4404      	add	r4, r0
 80055f4:	941e      	str	r4, [sp, #120]	; 0x78
	x6 = a25 - a20;			x[6] = x6;
 80055f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80055f8:	1b36      	subs	r6, r6, r4
	x2 = a24 + a20;			x[2] = x2;
 80055fa:	4421      	add	r1, r4
	x6 = a25 - a20;			x[6] = x6;
 80055fc:	961f      	str	r6, [sp, #124]	; 0x7c
	x2 = a24 + a20;			x[2] = x2;
 80055fe:	911c      	str	r1, [sp, #112]	; 0x70
	x1 = a15 + (m3 << 1);	x[1] = x1;
 8005600:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
	x7 = a15 - (m3 << 1);	x[7] = x7;
 8005604:	eba7 0e0a 	sub.w	lr, r7, sl
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 8005608:	9e06      	ldr	r6, [sp, #24]
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800560a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800560e:	ebac 0c06 	sub.w	ip, ip, r6
	a1 = x0 - x6;
 8005612:	9e12      	ldr	r6, [sp, #72]	; 0x48
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 8005614:	e9dd 140b 	ldrd	r1, r4, [sp, #44]	; 0x2c
 8005618:	1b0d      	subs	r5, r1, r4
	a1 = x0 - x6;
 800561a:	9c10      	ldr	r4, [sp, #64]	; 0x40
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 800561c:	1a99      	subs	r1, r3, r2
	a1 = x0 - x6;
 800561e:	1b36      	subs	r6, r6, r4
 8005620:	9606      	str	r6, [sp, #24]
 8005622:	9e08      	ldr	r6, [sp, #32]
 8005624:	46b1      	mov	r9, r6
 8005626:	4e86      	ldr	r6, [pc, #536]	; (8005840 <xmp3fixpt_IMDCT+0x75c>)
 8005628:	fb86 4909 	smull	r4, r9, r6, r9
	a2 = x1 - x5;
 800562c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800562e:	9c07      	ldr	r4, [sp, #28]
 8005630:	f8cd 9020 	str.w	r9, [sp, #32]
 8005634:	1a24      	subs	r4, r4, r0
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 8005636:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005638:	1a24      	subs	r4, r4, r0
 800563a:	4620      	mov	r0, r4
 800563c:	fb86 4000 	smull	r4, r0, r6, r0
 8005640:	4f80      	ldr	r7, [pc, #512]	; (8005844 <xmp3fixpt_IMDCT+0x760>)
 8005642:	4616      	mov	r6, r2
 8005644:	9007      	str	r0, [sp, #28]
 8005646:	fb87 4606 	smull	r4, r6, r7, r6
 800564a:	487f      	ldr	r0, [pc, #508]	; (8005848 <xmp3fixpt_IMDCT+0x764>)
 800564c:	469a      	mov	sl, r3
 800564e:	fb80 4a0a 	smull	r4, sl, r0, sl
 8005652:	fb87 4101 	smull	r4, r1, r7, r1
 8005656:	fb80 4202 	smull	r4, r2, r0, r2
 800565a:	f100 5070 	add.w	r0, r0, #1006632960	; 0x3c000000
 800565e:	462f      	mov	r7, r5
 8005660:	f500 204c 	add.w	r0, r0, #835584	; 0xcc000
 8005664:	f200 20cb 	addw	r0, r0, #715	; 0x2cb
 8005668:	fb80 4707 	smull	r4, r7, r0, r7
 800566c:	4b77      	ldr	r3, [pc, #476]	; (800584c <xmp3fixpt_IMDCT+0x768>)
 800566e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005670:	fb83 e404 	smull	lr, r4, r3, r4
 8005674:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8005678:	fb80 9e0e 	smull	r9, lr, r0, lr
 800567c:	fb83 9505 	smull	r9, r5, r3, r5
	x4 = a1 - a11;			x[4] = x4;
 8005680:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	a17 = ( m7 << 1) - (m8 << 1);
 8005682:	0052      	lsls	r2, r2, #1
	x4 = a1 - a11;			x[4] = x4;
 8005684:	9813      	ldr	r0, [sp, #76]	; 0x4c
	a16 = ( m5 << 1) + (m6 << 1);
 8005686:	0076      	lsls	r6, r6, #1
	a17 = ( m7 << 1) - (m8 << 1);
 8005688:	ebc2 0141 	rsb	r1, r2, r1, lsl #1
	a12 = x[0] +  (x[6] >> 1);
 800568c:	9a12      	ldr	r2, [sp, #72]	; 0x48
	x4 = a1 - a11;			x[4] = x4;
 800568e:	1a18      	subs	r0, r3, r0
	a12 = x[0] +  (x[6] >> 1);
 8005690:	9b10      	ldr	r3, [sp, #64]	; 0x40
	a16 = ( m5 << 1) + (m6 << 1);
 8005692:	eb06 064a 	add.w	r6, r6, sl, lsl #1
	x4 = a1 - a11;			x[4] = x4;
 8005696:	900a      	str	r0, [sp, #40]	; 0x28
	a20 = (m11 << 1) - (m12 << 1);
 8005698:	006d      	lsls	r5, r5, #1
	x4 = a1 - a11;			x[4] = x4;
 800569a:	9806      	ldr	r0, [sp, #24]
	a18 = a16 + a17;
 800569c:	eb06 0a01 	add.w	sl, r6, r1
	a20 = (m11 << 1) - (m12 << 1);
 80056a0:	ebc5 054e 	rsb	r5, r5, lr, lsl #1
	x4 = a1 - a11;			x[4] = x4;
 80056a4:	eba0 090c 	sub.w	r9, r0, ip
	a15 = a1   +  ( a11 >> 1);
 80056a8:	eb00 0c6c 	add.w	ip, r0, ip, asr #1
 80056ac:	980a      	ldr	r0, [sp, #40]	; 0x28
	x4 = a1 - a11;			x[4] = x4;
 80056ae:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
	a12 = x[0] +  (x[6] >> 1);
 80056b2:	eb02 0963 	add.w	r9, r2, r3, asr #1
	a13 = a12  +  (  m1 << 1);
 80056b6:	9a08      	ldr	r2, [sp, #32]
 80056b8:	1080      	asrs	r0, r0, #2
	a12 = x[0] +  (x[6] >> 1);
 80056ba:	464b      	mov	r3, r9
	a13 = a12  +  (  m1 << 1);
 80056bc:	ea4f 0942 	mov.w	r9, r2, lsl #1
 80056c0:	900b      	str	r0, [sp, #44]	; 0x2c
	a19 = ( m9 << 1) + (m10 << 1);
 80056c2:	0062      	lsls	r2, r4, #1
	a14 = a12  -  (  m1 << 1);
 80056c4:	461c      	mov	r4, r3
 80056c6:	eba3 0309 	sub.w	r3, r3, r9
	a19 = ( m9 << 1) + (m10 << 1);
 80056ca:	eb02 0247 	add.w	r2, r2, r7, lsl #1
	a13 = a12  +  (  m1 << 1);
 80056ce:	44a1      	add	r9, r4
	a26 = a14 - a18;
 80056d0:	eba3 070a 	sub.w	r7, r3, sl
	x1 = a15 + (m3 << 1);	x[1] = x1;
 80056d4:	9c07      	ldr	r4, [sp, #28]
	a27 = a13 - a18;
 80056d6:	eba9 0a0a 	sub.w	sl, r9, sl
	a22 = a13 + a16;
 80056da:	eb09 0e06 	add.w	lr, r9, r6
	a26 = a14 - a18;
 80056de:	9706      	str	r7, [sp, #24]
	a21 = a20 - a19;
 80056e0:	1aaf      	subs	r7, r5, r2
	x3 = a26 - a21;			x[3] = x3;
 80056e2:	9806      	ldr	r0, [sp, #24]
	x1 = a15 + (m3 << 1);	x[1] = x1;
 80056e4:	0064      	lsls	r4, r4, #1
	a25 = a13 + a17;
 80056e6:	4489      	add	r9, r1
	x5 = a27 + a21;			x[5] = x5;
 80056e8:	44ba      	add	sl, r7
	a24 = a14 + a17;
 80056ea:	4419      	add	r1, r3
	x3 = a26 - a21;			x[3] = x3;
 80056ec:	1bc0      	subs	r0, r0, r7
	a23 = a14 + a16;
 80056ee:	4433      	add	r3, r6
	x0 = a22 + a19;			x[0] = x0;
 80056f0:	eb0e 0702 	add.w	r7, lr, r2
	x6 = a25 - a20;			x[6] = x6;
 80056f4:	eba9 0905 	sub.w	r9, r9, r5
	x2 = a24 + a20;			x[2] = x2;
 80056f8:	194d      	adds	r5, r1, r5
	x0 = a22 + a19;			x[0] = x0;
 80056fa:	9706      	str	r7, [sp, #24]
	x8 = a23 - a19;			x[8] = x8;
 80056fc:	1a9b      	subs	r3, r3, r2
	if (btPrev == 0 && btCurr == 0) {
 80056fe:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
	x1 = a15 + (m3 << 1);	x[1] = x1;
 8005700:	eb04 020c 	add.w	r2, r4, ip
	x3 = a26 - a21;			x[3] = x3;
 8005704:	900a      	str	r0, [sp, #40]	; 0x28
	x7 = a15 - (m3 << 1);	x[7] = x7;
 8005706:	ebac 0404 	sub.w	r4, ip, r4
	x2 = a24 + a20;			x[2] = x2;
 800570a:	9508      	str	r5, [sp, #32]
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800570c:	9207      	str	r2, [sp, #28]
	if (btPrev == 0 && btCurr == 0) {
 800570e:	2f00      	cmp	r7, #0
 8005710:	f040 8288 	bne.w	8005c24 <xmp3fixpt_IMDCT+0xb40>
 8005714:	4a4e      	ldr	r2, [pc, #312]	; (8005850 <xmp3fixpt_IMDCT+0x76c>)
 8005716:	fb82 1303 	smull	r1, r3, r2, r3
			xe >>= 2;
 800571a:	9d11      	ldr	r5, [sp, #68]	; 0x44
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800571c:	f85b 7c24 	ldr.w	r7, [fp, #-36]
			xe >>= 2;
 8005720:	10ad      	asrs	r5, r5, #2
 8005722:	4a4c      	ldr	r2, [pc, #304]	; (8005854 <xmp3fixpt_IMDCT+0x770>)
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 8005724:	4279      	negs	r1, r7
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005726:	18e8      	adds	r0, r5, r3
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 8005728:	1b5b      	subs	r3, r3, r5
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800572a:	f84b 0c24 	str.w	r0, [fp, #-36]
			t = s - d;
 800572e:	1ac9      	subs	r1, r1, r3
 8005730:	fb81 0202 	smull	r0, r2, r1, r2
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 8005734:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005738:	4a47      	ldr	r2, [pc, #284]	; (8005858 <xmp3fixpt_IMDCT+0x774>)
 800573a:	fb81 0202 	smull	r0, r2, r1, r2
 800573e:	ebc7 0282 	rsb	r2, r7, r2, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 8005742:	9e01      	ldr	r6, [sp, #4]
	sign = x >> (sizeof(int) * 8 - 1);
 8005744:	17d9      	asrs	r1, r3, #31
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005746:	4d45      	ldr	r5, [pc, #276]	; (800585c <xmp3fixpt_IMDCT+0x778>)
	sign = x >> (sizeof(int) * 8 - 1);
 8005748:	17d0      	asrs	r0, r2, #31
 800574a:	6033      	str	r3, [r6, #0]
			y[(17-i)*NBANDS] =  yHi;
 800574c:	f8c6 2880 	str.w	r2, [r6, #2176]	; 0x880
	x ^= sign;
 8005750:	404b      	eors	r3, r1
 8005752:	4042      	eors	r2, r0
			y[(i)*NBANDS]    = 	yLo;
 8005754:	46b4      	mov	ip, r6
	x -= sign;
 8005756:	1a5b      	subs	r3, r3, r1
 8005758:	1a12      	subs	r2, r2, r0
			mOut |= FASTABS(yHi);
 800575a:	ea42 0103 	orr.w	r1, r2, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800575e:	fb85 3404 	smull	r3, r4, r5, r4
			xe >>= 2;
 8005762:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005764:	f105 5518 	add.w	r5, r5, #637534208	; 0x26000000
 8005768:	1097      	asrs	r7, r2, #2
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800576a:	f85b 2c20 	ldr.w	r2, [fp, #-32]
 800576e:	f505 1581 	add.w	r5, r5, #1056768	; 0x102000
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005772:	193b      	adds	r3, r7, r4
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 8005774:	4250      	negs	r0, r2
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 8005776:	1be4      	subs	r4, r4, r7
 8005778:	35a5      	adds	r5, #165	; 0xa5
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800577a:	f84b 3c20 	str.w	r3, [fp, #-32]
			t = s - d;
 800577e:	1b00      	subs	r0, r0, r4
 8005780:	fb80 3505 	smull	r3, r5, r0, r5
 8005784:	4b36      	ldr	r3, [pc, #216]	; (8005860 <xmp3fixpt_IMDCT+0x77c>)
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 8005786:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800578a:	fb80 5303 	smull	r5, r3, r0, r3
 800578e:	ebc2 0383 	rsb	r3, r2, r3, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 8005792:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
	sign = x >> (sizeof(int) * 8 - 1);
 8005796:	17e0      	asrs	r0, r4, #31
 8005798:	17dd      	asrs	r5, r3, #31
			y[(17-i)*NBANDS] =  yHi;
 800579a:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
	x ^= sign;
 800579e:	4044      	eors	r4, r0
 80057a0:	406b      	eors	r3, r5
	x -= sign;
 80057a2:	1a24      	subs	r4, r4, r0
 80057a4:	1b5b      	subs	r3, r3, r5
			mOut |= FASTABS(yLo);
 80057a6:	430c      	orrs	r4, r1
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80057a8:	492e      	ldr	r1, [pc, #184]	; (8005864 <xmp3fixpt_IMDCT+0x780>)
			mOut |= FASTABS(yHi);
 80057aa:	ea43 0204 	orr.w	r2, r3, r4
 80057ae:	fb81 3909 	smull	r3, r9, r1, r9
			xe >>= 2;
 80057b2:	991f      	ldr	r1, [sp, #124]	; 0x7c
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80057b4:	f85b 0c1c 	ldr.w	r0, [fp, #-28]
			xe >>= 2;
 80057b8:	108b      	asrs	r3, r1, #2
 80057ba:	4c2b      	ldr	r4, [pc, #172]	; (8005868 <xmp3fixpt_IMDCT+0x784>)
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80057bc:	4245      	negs	r5, r0
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80057be:	eb03 0109 	add.w	r1, r3, r9
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 80057c2:	eba9 0903 	sub.w	r9, r9, r3
 80057c6:	4623      	mov	r3, r4
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80057c8:	f84b 1c1c 	str.w	r1, [fp, #-28]
			t = s - d;
 80057cc:	eba5 0509 	sub.w	r5, r5, r9
 80057d0:	fb85 1303 	smull	r1, r3, r5, r3
 80057d4:	4925      	ldr	r1, [pc, #148]	; (800586c <xmp3fixpt_IMDCT+0x788>)
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 80057d6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80057da:	fb85 6101 	smull	r6, r1, r5, r1
 80057de:	ebc0 0181 	rsb	r1, r0, r1, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 80057e2:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
 80057e6:	46e1      	mov	r9, ip
	sign = x >> (sizeof(int) * 8 - 1);
 80057e8:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 80057ec:	17ce      	asrs	r6, r1, #31
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80057ee:	4657      	mov	r7, sl
	x ^= sign;
 80057f0:	ea8c 0303 	eor.w	r3, ip, r3
			y[(17-i)*NBANDS] =  yHi;
 80057f4:	f8c9 1780 	str.w	r1, [r9, #1920]	; 0x780
 80057f8:	4071      	eors	r1, r6
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80057fa:	4d1d      	ldr	r5, [pc, #116]	; (8005870 <xmp3fixpt_IMDCT+0x78c>)
	x -= sign;
 80057fc:	eba3 030c 	sub.w	r3, r3, ip
 8005800:	1b89      	subs	r1, r1, r6
			mOut |= FASTABS(yLo);
 8005802:	4313      	orrs	r3, r2
			mOut |= FASTABS(yHi);
 8005804:	ea41 0003 	orr.w	r0, r1, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005808:	fb85 3707 	smull	r3, r7, r5, r7
			xe >>= 2;
 800580c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800580e:	f105 7549 	add.w	r5, r5, #52690944	; 0x3240000
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 8005812:	f85b 3c18 	ldr.w	r3, [fp, #-24]
			xe >>= 2;
 8005816:	1092      	asrs	r2, r2, #2
 8005818:	f505 3511 	add.w	r5, r5, #148480	; 0x24400
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800581c:	425e      	negs	r6, r3
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800581e:	19d1      	adds	r1, r2, r7
 8005820:	f205 356f 	addw	r5, r5, #879	; 0x36f
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 8005824:	1aba      	subs	r2, r7, r2
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005826:	f84b 1c18 	str.w	r1, [fp, #-24]
 800582a:	462f      	mov	r7, r5
			t = s - d;
 800582c:	1ab6      	subs	r6, r6, r2
 800582e:	fb86 1707 	smull	r1, r7, r6, r7
 8005832:	4910      	ldr	r1, [pc, #64]	; (8005874 <xmp3fixpt_IMDCT+0x790>)
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 8005834:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8005838:	fb86 7101 	smull	r7, r1, r6, r1
 800583c:	e01c      	b.n	8005878 <xmp3fixpt_IMDCT+0x794>
 800583e:	bf00      	nop
 8005840:	6ed9eba1 	.word	0x6ed9eba1
 8005844:	620dbe8b 	.word	0x620dbe8b
 8005848:	163a1a7e 	.word	0x163a1a7e
 800584c:	7e0e2e32 	.word	0x7e0e2e32
 8005850:	0b27eb5c 	.word	0x0b27eb5c
 8005854:	42aace8b 	.word	0x42aace8b
 8005858:	c2e92724 	.word	0xc2e92724
 800585c:	2120fb83 	.word	0x2120fb83
 8005860:	c95f619a 	.word	0xc95f619a
 8005864:	36185aee 	.word	0x36185aee
 8005868:	4a868feb 	.word	0x4a868feb
 800586c:	d0859d8c 	.word	0xd0859d8c
 8005870:	496af3e2 	.word	0x496af3e2
 8005874:	d8243ea0 	.word	0xd8243ea0
 8005878:	ebc3 0181 	rsb	r1, r3, r1, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 800587c:	f8c9 2180 	str.w	r2, [r9, #384]	; 0x180
	sign = x >> (sizeof(int) * 8 - 1);
 8005880:	ea4f 7ce2 	mov.w	ip, r2, asr #31
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	sign = x >> (sizeof(int) * 8 - 1);
 8005886:	17cf      	asrs	r7, r1, #31
			y[(17-i)*NBANDS] =  yHi;
 8005888:	f8c9 1700 	str.w	r1, [r9, #1792]	; 0x700
	x ^= sign;
 800588c:	ea8c 0202 	eor.w	r2, ip, r2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005890:	4ed8      	ldr	r6, [pc, #864]	; (8005bf4 <xmp3fixpt_IMDCT+0xb10>)
	x ^= sign;
 8005892:	4079      	eors	r1, r7
	x -= sign;
 8005894:	eba2 020c 	sub.w	r2, r2, ip
 8005898:	1bc9      	subs	r1, r1, r7
			mOut |= FASTABS(yLo);
 800589a:	4302      	orrs	r2, r0
			mOut |= FASTABS(yHi);
 800589c:	4311      	orrs	r1, r2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800589e:	fb86 2303 	smull	r2, r3, r6, r3
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80058a2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80058a4:	f85b 0c14 	ldr.w	r0, [fp, #-20]
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80058a8:	18fa      	adds	r2, r7, r3
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 80058aa:	eba3 0c07 	sub.w	ip, r3, r7
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80058ae:	4246      	negs	r6, r0
 80058b0:	4fd1      	ldr	r7, [pc, #836]	; (8005bf8 <xmp3fixpt_IMDCT+0xb14>)
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80058b2:	f84b 2c14 	str.w	r2, [fp, #-20]
			t = s - d;
 80058b6:	eba6 060c 	sub.w	r6, r6, ip
 80058ba:	fb86 3707 	smull	r3, r7, r6, r7
 80058be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 80058c2:	eb0c 0387 	add.w	r3, ip, r7, lsl #2
 80058c6:	fb86 7202 	smull	r7, r2, r6, r2
 80058ca:	ebc0 0282 	rsb	r2, r0, r2, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 80058ce:	f8c9 3200 	str.w	r3, [r9, #512]	; 0x200
	sign = x >> (sizeof(int) * 8 - 1);
 80058d2:	17df      	asrs	r7, r3, #31
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80058d4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
	sign = x >> (sizeof(int) * 8 - 1);
 80058d8:	17d6      	asrs	r6, r2, #31
			y[(17-i)*NBANDS] =  yHi;
 80058da:	f8c9 2680 	str.w	r2, [r9, #1664]	; 0x680
	x ^= sign;
 80058de:	407b      	eors	r3, r7
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80058e0:	48c6      	ldr	r0, [pc, #792]	; (8005bfc <xmp3fixpt_IMDCT+0xb18>)
	x ^= sign;
 80058e2:	4072      	eors	r2, r6
	x -= sign;
 80058e4:	1bdb      	subs	r3, r3, r7
 80058e6:	1b92      	subs	r2, r2, r6
			mOut |= FASTABS(yLo);
 80058e8:	430b      	orrs	r3, r1
			mOut |= FASTABS(yHi);
 80058ea:	431a      	orrs	r2, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80058ec:	fb80 3c0c 	smull	r3, ip, r0, ip
			xe >>= 2;
 80058f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80058f2:	f85b 6c10 	ldr.w	r6, [fp, #-16]
			xe >>= 2;
 80058f6:	109b      	asrs	r3, r3, #2
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80058f8:	4271      	negs	r1, r6
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80058fa:	eb03 000c 	add.w	r0, r3, ip
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 80058fe:	ebac 0303 	sub.w	r3, ip, r3
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005902:	f84b 0c10 	str.w	r0, [fp, #-16]
			t = s - d;
 8005906:	1ac9      	subs	r1, r1, r3
 8005908:	fb81 0505 	smull	r0, r5, r1, r5
 800590c:	48bc      	ldr	r0, [pc, #752]	; (8005c00 <xmp3fixpt_IMDCT+0xb1c>)
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 800590e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8005912:	fb81 5000 	smull	r5, r0, r1, r0
 8005916:	ebc6 0080 	rsb	r0, r6, r0, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 800591a:	f8c9 3280 	str.w	r3, [r9, #640]	; 0x280
	sign = x >> (sizeof(int) * 8 - 1);
 800591e:	17df      	asrs	r7, r3, #31
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005920:	9d08      	ldr	r5, [sp, #32]
	sign = x >> (sizeof(int) * 8 - 1);
 8005922:	17c6      	asrs	r6, r0, #31
			y[(17-i)*NBANDS] =  yHi;
 8005924:	f8c9 0600 	str.w	r0, [r9, #1536]	; 0x600
	x ^= sign;
 8005928:	407b      	eors	r3, r7
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800592a:	49b6      	ldr	r1, [pc, #728]	; (8005c04 <xmp3fixpt_IMDCT+0xb20>)
	x ^= sign;
 800592c:	4070      	eors	r0, r6
	x -= sign;
 800592e:	1bdb      	subs	r3, r3, r7
 8005930:	1b80      	subs	r0, r0, r6
			mOut |= FASTABS(yLo);
 8005932:	4313      	orrs	r3, r2
			mOut |= FASTABS(yHi);
 8005934:	4318      	orrs	r0, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005936:	fb81 3505 	smull	r3, r5, r1, r5
			xe >>= 2;
 800593a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800593c:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
			xe >>= 2;
 8005940:	1099      	asrs	r1, r3, #2
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 8005942:	4256      	negs	r6, r2
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005944:	194b      	adds	r3, r1, r5
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 8005946:	1a69      	subs	r1, r5, r1
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005948:	f84b 3c0c 	str.w	r3, [fp, #-12]
			t = s - d;
 800594c:	1a76      	subs	r6, r6, r1
 800594e:	fb86 3404 	smull	r3, r4, r6, r4
 8005952:	4bad      	ldr	r3, [pc, #692]	; (8005c08 <xmp3fixpt_IMDCT+0xb24>)
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 8005954:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8005958:	fb86 1303 	smull	r1, r3, r6, r3
 800595c:	ebc2 0383 	rsb	r3, r2, r3, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 8005960:	f8c9 4300 	str.w	r4, [r9, #768]	; 0x300
	sign = x >> (sizeof(int) * 8 - 1);
 8005964:	ea4f 7ce4 	mov.w	ip, r4, asr #31
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005968:	9e07      	ldr	r6, [sp, #28]
	sign = x >> (sizeof(int) * 8 - 1);
 800596a:	ea4f 7ee3 	mov.w	lr, r3, asr #31
			y[(17-i)*NBANDS] =  yHi;
 800596e:	f8c9 3580 	str.w	r3, [r9, #1408]	; 0x580
	x ^= sign;
 8005972:	ea84 040c 	eor.w	r4, r4, ip
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005976:	4fa5      	ldr	r7, [pc, #660]	; (8005c0c <xmp3fixpt_IMDCT+0xb28>)
	x ^= sign;
 8005978:	ea83 030e 	eor.w	r3, r3, lr
	x -= sign;
 800597c:	eba4 040c 	sub.w	r4, r4, ip
 8005980:	eba3 030e 	sub.w	r3, r3, lr
			mOut |= FASTABS(yLo);
 8005984:	4304      	orrs	r4, r0
			mOut |= FASTABS(yHi);
 8005986:	ea43 0204 	orr.w	r2, r3, r4
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800598a:	fb87 3606 	smull	r3, r6, r7, r6
			xe >>= 2;
 800598e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 8005990:	f85b 0c08 	ldr.w	r0, [fp, #-8]
			xe >>= 2;
 8005994:	109b      	asrs	r3, r3, #2
 8005996:	4d9e      	ldr	r5, [pc, #632]	; (8005c10 <xmp3fixpt_IMDCT+0xb2c>)
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 8005998:	4244      	negs	r4, r0
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800599a:	1999      	adds	r1, r3, r6
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 800599c:	1af3      	subs	r3, r6, r3
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800599e:	f84b 1c08 	str.w	r1, [fp, #-8]
			t = s - d;
 80059a2:	1ae4      	subs	r4, r4, r3
 80059a4:	fb84 1505 	smull	r1, r5, r4, r5
 80059a8:	499a      	ldr	r1, [pc, #616]	; (8005c14 <xmp3fixpt_IMDCT+0xb30>)
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 80059aa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80059ae:	fb84 5101 	smull	r5, r1, r4, r1
 80059b2:	ebc0 0181 	rsb	r1, r0, r1, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 80059b6:	f8c9 3380 	str.w	r3, [r9, #896]	; 0x380
	sign = x >> (sizeof(int) * 8 - 1);
 80059ba:	17dd      	asrs	r5, r3, #31
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80059bc:	f8dd e018 	ldr.w	lr, [sp, #24]
	sign = x >> (sizeof(int) * 8 - 1);
 80059c0:	17cc      	asrs	r4, r1, #31
			y[(17-i)*NBANDS] =  yHi;
 80059c2:	f8c9 1500 	str.w	r1, [r9, #1280]	; 0x500
	x ^= sign;
 80059c6:	406b      	eors	r3, r5
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80059c8:	4893      	ldr	r0, [pc, #588]	; (8005c18 <xmp3fixpt_IMDCT+0xb34>)
	x ^= sign;
 80059ca:	4061      	eors	r1, r4
	x -= sign;
 80059cc:	1b5b      	subs	r3, r3, r5
 80059ce:	1b09      	subs	r1, r1, r4
			mOut |= FASTABS(yLo);
 80059d0:	4313      	orrs	r3, r2
			mOut |= FASTABS(yHi);
 80059d2:	4319      	orrs	r1, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80059d4:	fb80 3e0e 	smull	r3, lr, r0, lr
			xe >>= 2;
 80059d8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80059da:	f85b 2c04 	ldr.w	r2, [fp, #-4]
			xe >>= 2;
 80059de:	10a0      	asrs	r0, r4, #2
 80059e0:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8005c20 <xmp3fixpt_IMDCT+0xb3c>
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80059e4:	4254      	negs	r4, r2
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80059e6:	eb00 030e 	add.w	r3, r0, lr
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 80059ea:	ebae 0e00 	sub.w	lr, lr, r0
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80059ee:	f84b 3c04 	str.w	r3, [fp, #-4]
			t = s - d;
 80059f2:	eba4 040e 	sub.w	r4, r4, lr
 80059f6:	fb84 3a0a 	smull	r3, sl, r4, sl
 80059fa:	4b88      	ldr	r3, [pc, #544]	; (8005c1c <xmp3fixpt_IMDCT+0xb38>)
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 80059fc:	eb0e 008a 	add.w	r0, lr, sl, lsl #2
 8005a00:	fb84 5303 	smull	r5, r3, r4, r3
 8005a04:	ebc2 0383 	rsb	r3, r2, r3, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 8005a08:	f8c9 0400 	str.w	r0, [r9, #1024]	; 0x400
	sign = x >> (sizeof(int) * 8 - 1);
 8005a0c:	17c6      	asrs	r6, r0, #31
 8005a0e:	17dd      	asrs	r5, r3, #31
			y[(17-i)*NBANDS] =  yHi;
 8005a10:	f8c9 3480 	str.w	r3, [r9, #1152]	; 0x480
	x ^= sign;
 8005a14:	ea86 0a00 	eor.w	sl, r6, r0
 8005a18:	406b      	eors	r3, r5
	x -= sign;
 8005a1a:	ebaa 0606 	sub.w	r6, sl, r6
 8005a1e:	1b5b      	subs	r3, r3, r5
			mOut |= FASTABS(yLo);
 8005a20:	4331      	orrs	r1, r6
 8005a22:	9e01      	ldr	r6, [sp, #4]
			mOut |= FASTABS(yHi);
 8005a24:	ea43 0401 	orr.w	r4, r3, r1
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8005a28:	9d03      	ldr	r5, [sp, #12]
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005a2e:	f10b 0b24 	add.w	fp, fp, #36	; 0x24
 8005a32:	462a      	mov	r2, r5
	for(i = 0; i < bc->nBlocksLong; i++) {
 8005a34:	3501      	adds	r5, #1
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8005a36:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005a38:	f108 0848 	add.w	r8, r8, #72	; 0x48
	for(i = 0; i < bc->nBlocksLong; i++) {
 8005a3c:	9503      	str	r5, [sp, #12]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8005a3e:	f7ff f8e9 	bl	8004c14 <FreqInvertRescale>
 8005a42:	4633      	mov	r3, r6
 8005a44:	4320      	orrs	r0, r4
 8005a46:	3304      	adds	r3, #4
 8005a48:	9301      	str	r3, [sp, #4]
		mOut |= IMDCT36(xCurr, xPrev, &(y[0][i]), currWinIdx, prevWinIdx, i, bc->gbIn);
 8005a4a:	9b02      	ldr	r3, [sp, #8]
 8005a4c:	4303      	orrs	r3, r0
 8005a4e:	9302      	str	r3, [sp, #8]
	for(i = 0; i < bc->nBlocksLong; i++) {
 8005a50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005a52:	42ab      	cmp	r3, r5
 8005a54:	f341 8070 	ble.w	8006b38 <xmp3fixpt_IMDCT+0x1a54>
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 8005a58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005a5a:	f1ab 0124 	sub.w	r1, fp, #36	; 0x24
 8005a5e:	6993      	ldr	r3, [r2, #24]
		currWinIdx = sis->blockType;
 8005a60:	6952      	ldr	r2, [r2, #20]
 8005a62:	9115      	str	r1, [sp, #84]	; 0x54
 8005a64:	9214      	str	r2, [sp, #80]	; 0x50
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 8005a66:	b12b      	cbz	r3, 8005a74 <xmp3fixpt_IMDCT+0x990>
			currWinIdx = 0;
 8005a68:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8005a6a:	9903      	ldr	r1, [sp, #12]
 8005a6c:	428b      	cmp	r3, r1
 8005a6e:	bfc8      	it	gt
 8005a70:	2200      	movgt	r2, #0
 8005a72:	9214      	str	r2, [sp, #80]	; 0x50
 8005a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a76:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005a7a:	4313      	orrs	r3, r2
	if (gb < 7) {
 8005a7c:	9a05      	ldr	r2, [sp, #20]
 8005a7e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a80:	2a06      	cmp	r2, #6
 8005a82:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8005a86:	9306      	str	r3, [sp, #24]
 8005a88:	f73f acd8 	bgt.w	800543c <xmp3fixpt_IMDCT+0x358>
		es = 7 - gb;
 8005a8c:	f1c2 0407 	rsb	r4, r2, #7
			acc1 = ((*xCurr--) >> es) - acc1;
 8005a90:	9d06      	ldr	r5, [sp, #24]
			xPrev[i] >>= es;
 8005a92:	e95b 3202 	ldrd	r3, r2, [fp, #-8]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005a96:	4125      	asrs	r5, r4
			acc1 = ((*xCurr--) >> es) - acc1;
 8005a98:	4121      	asrs	r1, r4
			xPrev[i] >>= es;
 8005a9a:	4122      	asrs	r2, r4
 8005a9c:	4123      	asrs	r3, r4
			acc1 = ((*xCurr--) >> es) - acc1;
 8005a9e:	1b49      	subs	r1, r1, r5
		es = 7 - gb;
 8005aa0:	941a      	str	r4, [sp, #104]	; 0x68
			xPrev[i] >>= es;
 8005aa2:	f84b 2c04 	str.w	r2, [fp, #-4]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005aa6:	f858 0c0c 	ldr.w	r0, [r8, #-12]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005aaa:	f858 7c10 	ldr.w	r7, [r8, #-16]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005aae:	4120      	asrs	r0, r4
			xPrev[i] >>= es;
 8005ab0:	f84b 3c08 	str.w	r3, [fp, #-8]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005ab4:	4127      	asrs	r7, r4
			acc1 = ((*xCurr--) >> es) - acc1;
 8005ab6:	f858 2c14 	ldr.w	r2, [r8, #-20]
 8005aba:	1a40      	subs	r0, r0, r1
			xPrev[i] >>= es;
 8005abc:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005ac0:	f858 6c18 	ldr.w	r6, [r8, #-24]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005ac4:	4122      	asrs	r2, r4
			xPrev[i] >>= es;
 8005ac6:	4123      	asrs	r3, r4
			acc1 = ((*xCurr--) >> es) - acc1;
 8005ac8:	910b      	str	r1, [sp, #44]	; 0x2c
 8005aca:	1a39      	subs	r1, r7, r0
 8005acc:	4126      	asrs	r6, r4
			xPrev[i] >>= es;
 8005ace:	4627      	mov	r7, r4
 8005ad0:	f84b 3c0c 	str.w	r3, [fp, #-12]
 8005ad4:	f85b 4c10 	ldr.w	r4, [fp, #-16]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005ad8:	1a52      	subs	r2, r2, r1
			acc1 = ((*xCurr--) >> es) - acc1;
 8005ada:	9108      	str	r1, [sp, #32]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005adc:	f858 1c1c 	ldr.w	r1, [r8, #-28]
			xPrev[i] >>= es;
 8005ae0:	fa44 f307 	asr.w	r3, r4, r7
			acc1 = ((*xCurr--) >> es) - acc1;
 8005ae4:	1ab6      	subs	r6, r6, r2
 8005ae6:	f858 4c20 	ldr.w	r4, [r8, #-32]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005aea:	4139      	asrs	r1, r7
			xPrev[i] >>= es;
 8005aec:	f84b 3c10 	str.w	r3, [fp, #-16]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005af0:	fa44 fe07 	asr.w	lr, r4, r7
			acc1 = ((*xCurr--) >> es) - acc1;
 8005af4:	f858 3c24 	ldr.w	r3, [r8, #-36]
 8005af8:	1b89      	subs	r1, r1, r6
			acc1 = ((*xCurr--) >> es) - acc1;
 8005afa:	f858 4c28 	ldr.w	r4, [r8, #-40]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005afe:	fa43 fc07 	asr.w	ip, r3, r7
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b02:	9506      	str	r5, [sp, #24]
 8005b04:	ebae 0e01 	sub.w	lr, lr, r1
			xPrev[i] >>= es;
 8005b08:	f85b 5c14 	ldr.w	r5, [fp, #-20]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b0c:	413c      	asrs	r4, r7
 8005b0e:	960e      	str	r6, [sp, #56]	; 0x38
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b10:	ebac 0c0e 	sub.w	ip, ip, lr
			xPrev[i] >>= es;
 8005b14:	413d      	asrs	r5, r7
 8005b16:	f85b 6c18 	ldr.w	r6, [fp, #-24]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b1a:	eba4 030c 	sub.w	r3, r4, ip
			xPrev[i] >>= es;
 8005b1e:	f84b 5c14 	str.w	r5, [fp, #-20]
			acc2 = acc1 - acc2;
 8005b22:	9c06      	ldr	r4, [sp, #24]
			xPrev[i] >>= es;
 8005b24:	413e      	asrs	r6, r7
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b26:	f858 5c2c 	ldr.w	r5, [r8, #-44]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b2a:	469a      	mov	sl, r3
 8005b2c:	f858 3c30 	ldr.w	r3, [r8, #-48]
			acc2 = acc1 - acc2;
 8005b30:	1b04      	subs	r4, r0, r4
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b32:	413d      	asrs	r5, r7
			xPrev[i] >>= es;
 8005b34:	f84b 6c18 	str.w	r6, [fp, #-24]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b38:	fa43 f907 	asr.w	r9, r3, r7
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b3c:	4653      	mov	r3, sl
			acc2 = acc1 - acc2;
 8005b3e:	940a      	str	r4, [sp, #40]	; 0x28
 8005b40:	1b14      	subs	r4, r2, r4
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b42:	1aed      	subs	r5, r5, r3
			xPrev[i] >>= es;
 8005b44:	f85b 0c1c 	ldr.w	r0, [fp, #-28]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b48:	f858 3c34 	ldr.w	r3, [r8, #-52]
 8005b4c:	463e      	mov	r6, r7
			acc2 = acc1 - acc2;
 8005b4e:	9410      	str	r4, [sp, #64]	; 0x40
			xPrev[i] >>= es;
 8005b50:	4138      	asrs	r0, r7
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b52:	f858 2c38 	ldr.w	r2, [r8, #-56]
			acc2 = acc1 - acc2;
 8005b56:	1b0c      	subs	r4, r1, r4
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b58:	eba9 0905 	sub.w	r9, r9, r5
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b5c:	413b      	asrs	r3, r7
			xPrev[i] >>= es;
 8005b5e:	f84b 0c1c 	str.w	r0, [fp, #-28]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b62:	413a      	asrs	r2, r7
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b64:	f858 0c3c 	ldr.w	r0, [r8, #-60]
 8005b68:	eba3 0309 	sub.w	r3, r3, r9
			xPrev[i] >>= es;
 8005b6c:	f85b 1c20 	ldr.w	r1, [fp, #-32]
			acc2 = acc1 - acc2;
 8005b70:	940f      	str	r4, [sp, #60]	; 0x3c
 8005b72:	ebac 0404 	sub.w	r4, ip, r4
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b76:	f858 7c40 	ldr.w	r7, [r8, #-64]
			xPrev[i] >>= es;
 8005b7a:	4131      	asrs	r1, r6
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b7c:	1ad2      	subs	r2, r2, r3
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b7e:	4130      	asrs	r0, r6
			acc2 = acc1 - acc2;
 8005b80:	941c      	str	r4, [sp, #112]	; 0x70
 8005b82:	1b2c      	subs	r4, r5, r4
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b84:	1a80      	subs	r0, r0, r2
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b86:	4635      	mov	r5, r6
			acc2 = acc1 - acc2;
 8005b88:	1b1b      	subs	r3, r3, r4
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b8a:	4137      	asrs	r7, r6
			xPrev[i] >>= es;
 8005b8c:	f84b 1c20 	str.w	r1, [fp, #-32]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b90:	f858 6c44 	ldr.w	r6, [r8, #-68]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b94:	1a3f      	subs	r7, r7, r0
 8005b96:	f858 1c48 	ldr.w	r1, [r8, #-72]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005b9a:	412e      	asrs	r6, r5
			acc2 = acc1 - acc2;
 8005b9c:	940c      	str	r4, [sp, #48]	; 0x30
 8005b9e:	9311      	str	r3, [sp, #68]	; 0x44
			acc1 = ((*xCurr--) >> es) - acc1;
 8005ba0:	462c      	mov	r4, r5
			acc2 = acc1 - acc2;
 8005ba2:	1ac3      	subs	r3, r0, r3
			xPrev[i] >>= es;
 8005ba4:	f85b 0c24 	ldr.w	r0, [fp, #-36]
			acc1 = ((*xCurr--) >> es) - acc1;
 8005ba8:	fa41 f505 	asr.w	r5, r1, r5
			acc1 = ((*xCurr--) >> es) - acc1;
 8005bac:	1bf6      	subs	r6, r6, r7
			xPrev[i] >>= es;
 8005bae:	4120      	asrs	r0, r4
			acc2 = acc1 - acc2;
 8005bb0:	9307      	str	r3, [sp, #28]
 8005bb2:	1af1      	subs	r1, r6, r3
			acc1 = ((*xCurr--) >> es) - acc1;
 8005bb4:	1bae      	subs	r6, r5, r6
			xPrev[i] >>= es;
 8005bb6:	f84b 0c24 	str.w	r0, [fp, #-36]
 8005bba:	e482      	b.n	80054c2 <xmp3fixpt_IMDCT+0x3de>
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 8005bbc:	3307      	adds	r3, #7
 8005bbe:	fb8c 2103 	smull	r2, r1, ip, r3
 8005bc2:	17db      	asrs	r3, r3, #31
 8005bc4:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8005bc8:	00d9      	lsls	r1, r3, #3
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	18cc      	adds	r4, r1, r3
 8005bce:	9216      	str	r2, [sp, #88]	; 0x58
 8005bd0:	0064      	lsls	r4, r4, #1
 8005bd2:	f104 0208 	add.w	r2, r4, #8
 8005bd6:	9213      	str	r2, [sp, #76]	; 0x4c
	for (k = nBfly; k > 0; k--) {
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f73f aad7 	bgt.w	800518c <xmp3fixpt_IMDCT+0xa8>
 8005bde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005be0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8005be2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005be4:	4413      	add	r3, r2
 8005be6:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	440a      	add	r2, r1
 8005bec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bf0:	f7ff bbad 	b.w	800534e <xmp3fixpt_IMDCT+0x26a>
 8005bf4:	5a82799a 	.word	0x5a82799a
 8005bf8:	4d413ccc 	.word	0x4d413ccc
 8005bfc:	68d9f964 	.word	0x68d9f964
 8005c00:	e7dbc161 	.word	0xe7dbc161
 8005c04:	7401e4c1 	.word	0x7401e4c1
 8005c08:	ef7a6275 	.word	0xef7a6275
 8005c0c:	7ba3751d 	.word	0x7ba3751d
 8005c10:	47311c28 	.word	0x47311c28
 8005c14:	f6a09e67 	.word	0xf6a09e67
 8005c18:	7f834ed0 	.word	0x7f834ed0
 8005c1c:	fd16d8dd 	.word	0xfd16d8dd
 8005c20:	42aace8b 	.word	0x42aace8b
	if (btPrev == 2) {
 8005c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c26:	2a02      	cmp	r2, #2
 8005c28:	f002 8285 	beq.w	8008136 <xmp3fixpt_IMDCT+0x3052>
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8005c2c:	9f22      	ldr	r7, [sp, #136]	; 0x88
 8005c2e:	f85b 1c24 	ldr.w	r1, [fp, #-36]
 8005c32:	f8d7 608c 	ldr.w	r6, [r7, #140]	; 0x8c
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005c36:	4608      	mov	r0, r1
 8005c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c3a:	fb82 5000 	smull	r5, r0, r2, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8005c3e:	903a      	str	r0, [sp, #232]	; 0xe8
 8005c40:	fb86 2101 	smull	r2, r1, r6, r1
			*xpwHi-- = MULSHIFT32(wHi, x);
 8005c44:	914b      	str	r1, [sp, #300]	; 0x12c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8005c46:	f85b 1c20 	ldr.w	r1, [fp, #-32]
 8005c4a:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 8005c4e:	4608      	mov	r0, r1
 8005c50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c52:	fb82 5000 	smull	r5, r0, r2, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8005c56:	903b      	str	r0, [sp, #236]	; 0xec
 8005c58:	fb86 2101 	smull	r2, r1, r6, r1
			*xpwHi-- = MULSHIFT32(wHi, x);
 8005c5c:	914a      	str	r1, [sp, #296]	; 0x128
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8005c5e:	f85b 1c1c 	ldr.w	r1, [fp, #-28]
 8005c62:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8005c66:	4608      	mov	r0, r1
 8005c68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c6a:	fb82 5000 	smull	r5, r0, r2, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8005c6e:	903c      	str	r0, [sp, #240]	; 0xf0
 8005c70:	fb86 2101 	smull	r2, r1, r6, r1
			*xpwHi-- = MULSHIFT32(wHi, x);
 8005c74:	9149      	str	r1, [sp, #292]	; 0x124
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8005c76:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 8005c7a:	f8d7 6080 	ldr.w	r6, [r7, #128]	; 0x80
 8005c7e:	4608      	mov	r0, r1
 8005c80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c82:	fb82 5000 	smull	r5, r0, r2, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8005c86:	903d      	str	r0, [sp, #244]	; 0xf4
 8005c88:	fb86 2101 	smull	r2, r1, r6, r1
			*xpwHi-- = MULSHIFT32(wHi, x);
 8005c8c:	9148      	str	r1, [sp, #288]	; 0x120
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8005c8e:	f85b 1c14 	ldr.w	r1, [fp, #-20]
 8005c92:	6ffe      	ldr	r6, [r7, #124]	; 0x7c
 8005c94:	4608      	mov	r0, r1
 8005c96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c98:	fb82 5000 	smull	r5, r0, r2, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8005c9c:	903e      	str	r0, [sp, #248]	; 0xf8
 8005c9e:	fb86 2101 	smull	r2, r1, r6, r1
			*xpwHi-- = MULSHIFT32(wHi, x);
 8005ca2:	9147      	str	r1, [sp, #284]	; 0x11c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8005ca4:	f85b 1c10 	ldr.w	r1, [fp, #-16]
 8005ca8:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8005caa:	4608      	mov	r0, r1
 8005cac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cae:	fb82 5000 	smull	r5, r0, r2, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8005cb2:	903f      	str	r0, [sp, #252]	; 0xfc
 8005cb4:	fb86 2101 	smull	r2, r1, r6, r1
			*xpwHi-- = MULSHIFT32(wHi, x);
 8005cb8:	9146      	str	r1, [sp, #280]	; 0x118
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8005cba:	f85b 1c0c 	ldr.w	r1, [fp, #-12]
 8005cbe:	6f7e      	ldr	r6, [r7, #116]	; 0x74
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cc4:	fb82 5000 	smull	r5, r0, r2, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8005cc8:	9040      	str	r0, [sp, #256]	; 0x100
 8005cca:	fb86 2101 	smull	r2, r1, r6, r1
			*xpwHi-- = MULSHIFT32(wHi, x);
 8005cce:	9145      	str	r1, [sp, #276]	; 0x114
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8005cd0:	f85b 1c08 	ldr.w	r1, [fp, #-8]
 8005cd4:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8005cd6:	4608      	mov	r0, r1
 8005cd8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005cda:	fb82 5000 	smull	r5, r0, r2, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8005cde:	9041      	str	r0, [sp, #260]	; 0x104
 8005ce0:	fb86 2101 	smull	r2, r1, r6, r1
			*xpwHi-- = MULSHIFT32(wHi, x);
 8005ce4:	9144      	str	r1, [sp, #272]	; 0x110
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8005ce6:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 8005cea:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 8005cec:	4608      	mov	r0, r1
 8005cee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005cf0:	fb82 5000 	smull	r5, r0, r2, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8005cf4:	9042      	str	r0, [sp, #264]	; 0x108
 8005cf6:	fb86 2101 	smull	r2, r1, r6, r1
			*xpwHi-- = MULSHIFT32(wHi, x);
 8005cfa:	9143      	str	r1, [sp, #268]	; 0x10c
		wp = imdctWin[btCurr];
 8005cfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005cfe:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8005d00:	eb02 0cc2 	add.w	ip, r2, r2, lsl #3
 8005d04:	4ab5      	ldr	r2, [pc, #724]	; (8005fdc <xmp3fixpt_IMDCT+0xef8>)
 8005d06:	4631      	mov	r1, r6
 8005d08:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8005d0c:	4461      	add	r1, ip
 8005d0e:	fb82 0303 	smull	r0, r3, r2, r3
			xe >>= 2;
 8005d12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d14:	1095      	asrs	r5, r2, #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005d16:	195a      	adds	r2, r3, r5
			d = xe - xo;
 8005d18:	1aeb      	subs	r3, r5, r3
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005d1a:	f84b 2c24 	str.w	r2, [fp, #-36]
 8005d1e:	f856 000c 	ldr.w	r0, [r6, ip]
 8005d22:	fb83 2000 	smull	r2, r0, r3, r0
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8005d26:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8005d28:	6c4d      	ldr	r5, [r1, #68]	; 0x44
 8005d2a:	4402      	add	r2, r0
 8005d2c:	0092      	lsls	r2, r2, #2
 8005d2e:	fb83 0505 	smull	r0, r5, r3, r5
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005d32:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
	sign = x >> (sizeof(int) * 8 - 1);
 8005d34:	17d6      	asrs	r6, r2, #31
			y[(i)*NBANDS]    = yLo;
 8005d36:	9801      	ldr	r0, [sp, #4]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005d38:	442b      	add	r3, r5
			y[(i)*NBANDS]    = yLo;
 8005d3a:	6002      	str	r2, [r0, #0]
	x ^= sign;
 8005d3c:	4072      	eors	r2, r6
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005d3e:	009b      	lsls	r3, r3, #2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005d40:	48a7      	ldr	r0, [pc, #668]	; (8005fe0 <xmp3fixpt_IMDCT+0xefc>)
	x -= sign;
 8005d42:	1b92      	subs	r2, r2, r6
			y[(17-i)*NBANDS] = yHi;
 8005d44:	9e01      	ldr	r6, [sp, #4]
	sign = x >> (sizeof(int) * 8 - 1);
 8005d46:	17df      	asrs	r7, r3, #31
 8005d48:	f8c6 3880 	str.w	r3, [r6, #2176]	; 0x880
	x ^= sign;
 8005d4c:	407b      	eors	r3, r7
	x -= sign;
 8005d4e:	1bdb      	subs	r3, r3, r7
			mOut |= FASTABS(yHi);
 8005d50:	431a      	orrs	r2, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005d52:	fb80 3404 	smull	r3, r4, r0, r4
			xe >>= 2;
 8005d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d58:	109f      	asrs	r7, r3, #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005d5a:	19e3      	adds	r3, r4, r7
			d = xe - xo;
 8005d5c:	1b3c      	subs	r4, r7, r4
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005d5e:	f84b 3c20 	str.w	r3, [fp, #-32]
 8005d62:	684b      	ldr	r3, [r1, #4]
 8005d64:	fb84 0303 	smull	r0, r3, r4, r3
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8005d68:	983b      	ldr	r0, [sp, #236]	; 0xec
 8005d6a:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 8005d6c:	4418      	add	r0, r3
 8005d6e:	0080      	lsls	r0, r0, #2
 8005d70:	fb84 3505 	smull	r3, r5, r4, r5
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005d74:	9b4a      	ldr	r3, [sp, #296]	; 0x128
	sign = x >> (sizeof(int) * 8 - 1);
 8005d76:	17c4      	asrs	r4, r0, #31
			y[(i)*NBANDS]    = yLo;
 8005d78:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
 8005d7c:	4637      	mov	r7, r6
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005d7e:	442b      	add	r3, r5
	x ^= sign;
 8005d80:	4060      	eors	r0, r4
 8005d82:	009b      	lsls	r3, r3, #2
	x -= sign;
 8005d84:	1b00      	subs	r0, r0, r4
	sign = x >> (sizeof(int) * 8 - 1);
 8005d86:	17de      	asrs	r6, r3, #31
			y[(17-i)*NBANDS] = yHi;
 8005d88:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
			mOut |= FASTABS(yLo);
 8005d8c:	4302      	orrs	r2, r0
	x ^= sign;
 8005d8e:	4073      	eors	r3, r6
	x -= sign;
 8005d90:	1b9b      	subs	r3, r3, r6
			mOut |= FASTABS(yHi);
 8005d92:	ea43 0002 	orr.w	r0, r3, r2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005d96:	4a93      	ldr	r2, [pc, #588]	; (8005fe4 <xmp3fixpt_IMDCT+0xf00>)
 8005d98:	fb82 3909 	smull	r3, r9, r2, r9
			xe >>= 2;
 8005d9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d9e:	109e      	asrs	r6, r3, #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005da0:	eb09 0306 	add.w	r3, r9, r6
			d = xe - xo;
 8005da4:	eba6 0909 	sub.w	r9, r6, r9
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005da8:	f84b 3c1c 	str.w	r3, [fp, #-28]
 8005dac:	688a      	ldr	r2, [r1, #8]
 8005dae:	fb89 3202 	smull	r3, r2, r9, r2
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8005db2:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8005db4:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8005db6:	4413      	add	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	fb89 2404 	smull	r2, r4, r9, r4
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005dbe:	9a49      	ldr	r2, [sp, #292]	; 0x124
	sign = x >> (sizeof(int) * 8 - 1);
 8005dc0:	17dd      	asrs	r5, r3, #31
			y[(i)*NBANDS]    = yLo;
 8005dc2:	9e01      	ldr	r6, [sp, #4]
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005dc4:	4657      	mov	r7, sl
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005dc6:	4422      	add	r2, r4
			y[(i)*NBANDS]    = yLo;
 8005dc8:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
	x ^= sign;
 8005dcc:	406b      	eors	r3, r5
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005dce:	0092      	lsls	r2, r2, #2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005dd0:	4e85      	ldr	r6, [pc, #532]	; (8005fe8 <xmp3fixpt_IMDCT+0xf04>)
	x -= sign;
 8005dd2:	1b5b      	subs	r3, r3, r5
	sign = x >> (sizeof(int) * 8 - 1);
 8005dd4:	ea4f 7ce2 	mov.w	ip, r2, asr #31
			mOut |= FASTABS(yLo);
 8005dd8:	4303      	orrs	r3, r0
			y[(17-i)*NBANDS] = yHi;
 8005dda:	9801      	ldr	r0, [sp, #4]
 8005ddc:	f8c0 2780 	str.w	r2, [r0, #1920]	; 0x780
	x ^= sign;
 8005de0:	ea82 020c 	eor.w	r2, r2, ip
	x -= sign;
 8005de4:	eba2 020c 	sub.w	r2, r2, ip
			mOut |= FASTABS(yHi);
 8005de8:	ea42 0003 	orr.w	r0, r2, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005dec:	fb86 3707 	smull	r3, r7, r6, r7
			xe >>= 2;
 8005df0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005df2:	109a      	asrs	r2, r3, #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005df4:	18bb      	adds	r3, r7, r2
			d = xe - xo;
 8005df6:	1bd7      	subs	r7, r2, r7
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005df8:	f84b 3c18 	str.w	r3, [fp, #-24]
 8005dfc:	68cb      	ldr	r3, [r1, #12]
 8005dfe:	fb87 2303 	smull	r2, r3, r7, r3
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8005e02:	9c3d      	ldr	r4, [sp, #244]	; 0xf4
 8005e04:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8005e06:	441c      	add	r4, r3
 8005e08:	00a4      	lsls	r4, r4, #2
 8005e0a:	fb87 3505 	smull	r3, r5, r7, r5
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005e0e:	9a48      	ldr	r2, [sp, #288]	; 0x120
	sign = x >> (sizeof(int) * 8 - 1);
 8005e10:	17e6      	asrs	r6, r4, #31
			y[(i)*NBANDS]    = yLo;
 8005e12:	9f01      	ldr	r7, [sp, #4]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005e14:	442a      	add	r2, r5
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			y[(i)*NBANDS]    = yLo;
 8005e18:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
	x ^= sign;
 8005e1c:	4074      	eors	r4, r6
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005e1e:	0092      	lsls	r2, r2, #2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005e20:	4f72      	ldr	r7, [pc, #456]	; (8005fec <xmp3fixpt_IMDCT+0xf08>)
	x -= sign;
 8005e22:	1ba4      	subs	r4, r4, r6
			y[(17-i)*NBANDS] = yHi;
 8005e24:	9e01      	ldr	r6, [sp, #4]
	sign = x >> (sizeof(int) * 8 - 1);
 8005e26:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8005e2a:	f8c6 2700 	str.w	r2, [r6, #1792]	; 0x700
			mOut |= FASTABS(yLo);
 8005e2e:	4304      	orrs	r4, r0
	x ^= sign;
 8005e30:	ea8c 0202 	eor.w	r2, ip, r2
	x -= sign;
 8005e34:	eba2 020c 	sub.w	r2, r2, ip
			mOut |= FASTABS(yHi);
 8005e38:	4314      	orrs	r4, r2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005e3a:	fb87 2303 	smull	r2, r3, r7, r3
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005e3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005e40:	181a      	adds	r2, r3, r0
			d = xe - xo;
 8005e42:	1ac0      	subs	r0, r0, r3
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005e44:	f84b 2c14 	str.w	r2, [fp, #-20]
 8005e48:	690b      	ldr	r3, [r1, #16]
 8005e4a:	fb80 2303 	smull	r2, r3, r0, r3
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8005e4e:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8005e50:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8005e52:	441d      	add	r5, r3
 8005e54:	00ad      	lsls	r5, r5, #2
 8005e56:	fb80 3202 	smull	r3, r2, r0, r2
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005e5a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
	sign = x >> (sizeof(int) * 8 - 1);
 8005e5c:	17e8      	asrs	r0, r5, #31
			y[(i)*NBANDS]    = yLo;
 8005e5e:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005e62:	4413      	add	r3, r2
	x ^= sign;
 8005e64:	4045      	eors	r5, r0
			y[(17-i)*NBANDS] = yHi;
 8005e66:	9a01      	ldr	r2, [sp, #4]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005e68:	009b      	lsls	r3, r3, #2
	x -= sign;
 8005e6a:	1a2d      	subs	r5, r5, r0
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005e6c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
	sign = x >> (sizeof(int) * 8 - 1);
 8005e70:	17df      	asrs	r7, r3, #31
			y[(17-i)*NBANDS] = yHi;
 8005e72:	f8c2 3680 	str.w	r3, [r2, #1664]	; 0x680
			mOut |= FASTABS(yLo);
 8005e76:	432c      	orrs	r4, r5
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005e78:	4e5d      	ldr	r6, [pc, #372]	; (8005ff0 <xmp3fixpt_IMDCT+0xf0c>)
	x ^= sign;
 8005e7a:	407b      	eors	r3, r7
	x -= sign;
 8005e7c:	1bdb      	subs	r3, r3, r7
			mOut |= FASTABS(yHi);
 8005e7e:	431c      	orrs	r4, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005e80:	fb86 3c0c 	smull	r3, ip, r6, ip
			xe >>= 2;
 8005e84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e86:	109b      	asrs	r3, r3, #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005e88:	eb0c 0203 	add.w	r2, ip, r3
			d = xe - xo;
 8005e8c:	eba3 050c 	sub.w	r5, r3, ip
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005e90:	f84b 2c10 	str.w	r2, [fp, #-16]
 8005e94:	694b      	ldr	r3, [r1, #20]
 8005e96:	fb85 2303 	smull	r2, r3, r5, r3
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8005e9a:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8005e9c:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8005e9e:	441a      	add	r2, r3
 8005ea0:	0092      	lsls	r2, r2, #2
 8005ea2:	fb85 3000 	smull	r3, r0, r5, r0
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005ea6:	9b46      	ldr	r3, [sp, #280]	; 0x118
	sign = x >> (sizeof(int) * 8 - 1);
 8005ea8:	17d6      	asrs	r6, r2, #31
			y[(i)*NBANDS]    = yLo;
 8005eaa:	9f01      	ldr	r7, [sp, #4]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005eac:	4403      	add	r3, r0
			y[(17-i)*NBANDS] = yHi;
 8005eae:	9801      	ldr	r0, [sp, #4]
			y[(i)*NBANDS]    = yLo;
 8005eb0:	f8c7 2280 	str.w	r2, [r7, #640]	; 0x280
	x ^= sign;
 8005eb4:	4072      	eors	r2, r6
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005eb6:	009b      	lsls	r3, r3, #2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005eb8:	9d08      	ldr	r5, [sp, #32]
	x -= sign;
 8005eba:	1b92      	subs	r2, r2, r6
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005ebc:	4f4d      	ldr	r7, [pc, #308]	; (8005ff4 <xmp3fixpt_IMDCT+0xf10>)
	sign = x >> (sizeof(int) * 8 - 1);
 8005ebe:	ea4f 7ce3 	mov.w	ip, r3, asr #31
			y[(17-i)*NBANDS] = yHi;
 8005ec2:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
			mOut |= FASTABS(yLo);
 8005ec6:	4314      	orrs	r4, r2
	x ^= sign;
 8005ec8:	ea8c 0303 	eor.w	r3, ip, r3
	x -= sign;
 8005ecc:	eba3 030c 	sub.w	r3, r3, ip
			mOut |= FASTABS(yHi);
 8005ed0:	ea43 0204 	orr.w	r2, r3, r4
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005ed4:	fb87 3505 	smull	r3, r5, r7, r5
			xe >>= 2;
 8005ed8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005eda:	109c      	asrs	r4, r3, #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005edc:	192b      	adds	r3, r5, r4
			d = xe - xo;
 8005ede:	1b65      	subs	r5, r4, r5
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005ee0:	f84b 3c0c 	str.w	r3, [fp, #-12]
 8005ee4:	6988      	ldr	r0, [r1, #24]
 8005ee6:	fb85 3000 	smull	r3, r0, r5, r0
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8005eea:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8005eec:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005eee:	4403      	add	r3, r0
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	fb85 0404 	smull	r0, r4, r5, r4
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005ef6:	9845      	ldr	r0, [sp, #276]	; 0x114
	sign = x >> (sizeof(int) * 8 - 1);
 8005ef8:	17dd      	asrs	r5, r3, #31
			y[(i)*NBANDS]    = yLo;
 8005efa:	9f01      	ldr	r7, [sp, #4]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005efc:	4420      	add	r0, r4
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005efe:	9e07      	ldr	r6, [sp, #28]
			y[(i)*NBANDS]    = yLo;
 8005f00:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
	x ^= sign;
 8005f04:	406b      	eors	r3, r5
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005f06:	0080      	lsls	r0, r0, #2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005f08:	4f3b      	ldr	r7, [pc, #236]	; (8005ff8 <xmp3fixpt_IMDCT+0xf14>)
	x -= sign;
 8005f0a:	1b5b      	subs	r3, r3, r5
	sign = x >> (sizeof(int) * 8 - 1);
 8005f0c:	ea4f 7ce0 	mov.w	ip, r0, asr #31
			mOut |= FASTABS(yLo);
 8005f10:	4313      	orrs	r3, r2
			y[(17-i)*NBANDS] = yHi;
 8005f12:	9a01      	ldr	r2, [sp, #4]
 8005f14:	f8c2 0580 	str.w	r0, [r2, #1408]	; 0x580
	x ^= sign;
 8005f18:	ea80 000c 	eor.w	r0, r0, ip
	x -= sign;
 8005f1c:	eba0 000c 	sub.w	r0, r0, ip
			mOut |= FASTABS(yHi);
 8005f20:	4318      	orrs	r0, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005f22:	fb87 3606 	smull	r3, r6, r7, r6
			xe >>= 2;
 8005f26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f28:	109b      	asrs	r3, r3, #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005f2a:	18f2      	adds	r2, r6, r3
			d = xe - xo;
 8005f2c:	1b9e      	subs	r6, r3, r6
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005f2e:	f84b 2c08 	str.w	r2, [fp, #-8]
 8005f32:	69ca      	ldr	r2, [r1, #28]
 8005f34:	fb86 3202 	smull	r3, r2, r6, r2
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8005f38:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f3a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8005f3c:	441a      	add	r2, r3
 8005f3e:	4623      	mov	r3, r4
 8005f40:	0092      	lsls	r2, r2, #2
 8005f42:	fb86 4303 	smull	r4, r3, r6, r3
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005f46:	9d44      	ldr	r5, [sp, #272]	; 0x110
	sign = x >> (sizeof(int) * 8 - 1);
 8005f48:	17d4      	asrs	r4, r2, #31
			y[(i)*NBANDS]    = yLo;
 8005f4a:	9f01      	ldr	r7, [sp, #4]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005f4c:	442b      	add	r3, r5
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005f4e:	f8dd e018 	ldr.w	lr, [sp, #24]
			y[(i)*NBANDS]    = yLo;
 8005f52:	f8c7 2380 	str.w	r2, [r7, #896]	; 0x380
	x ^= sign;
 8005f56:	4062      	eors	r2, r4
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005f58:	009b      	lsls	r3, r3, #2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005f5a:	4d28      	ldr	r5, [pc, #160]	; (8005ffc <xmp3fixpt_IMDCT+0xf18>)
	x -= sign;
 8005f5c:	1b12      	subs	r2, r2, r4
	sign = x >> (sizeof(int) * 8 - 1);
 8005f5e:	17de      	asrs	r6, r3, #31
			y[(17-i)*NBANDS] = yHi;
 8005f60:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
			mOut |= FASTABS(yLo);
 8005f64:	4302      	orrs	r2, r0
	x ^= sign;
 8005f66:	4073      	eors	r3, r6
	x -= sign;
 8005f68:	1b9b      	subs	r3, r3, r6
			mOut |= FASTABS(yHi);
 8005f6a:	431a      	orrs	r2, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005f6c:	fb85 3e0e 	smull	r3, lr, r5, lr
			xe >>= 2;
 8005f70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f72:	ea4f 0aa3 	mov.w	sl, r3, asr #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005f76:	eb0a 030e 	add.w	r3, sl, lr
			d = xe - xo;
 8005f7a:	ebaa 0e0e 	sub.w	lr, sl, lr
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8005f7e:	f84b 3c04 	str.w	r3, [fp, #-4]
 8005f82:	6a0b      	ldr	r3, [r1, #32]
 8005f84:	fb8e 0303 	smull	r0, r3, lr, r3
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8005f88:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8005f8a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8005f8c:	4423      	add	r3, r4
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	fb8e 1000 	smull	r1, r0, lr, r0
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005f94:	9943      	ldr	r1, [sp, #268]	; 0x10c
	sign = x >> (sizeof(int) * 8 - 1);
 8005f96:	17dd      	asrs	r5, r3, #31
			y[(i)*NBANDS]    = yLo;
 8005f98:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8005f9c:	4401      	add	r1, r0
	x ^= sign;
 8005f9e:	406b      	eors	r3, r5
 8005fa0:	0089      	lsls	r1, r1, #2
	x -= sign;
 8005fa2:	1b5b      	subs	r3, r3, r5
	sign = x >> (sizeof(int) * 8 - 1);
 8005fa4:	17ce      	asrs	r6, r1, #31
			y[(17-i)*NBANDS] = yHi;
 8005fa6:	f8c7 1480 	str.w	r1, [r7, #1152]	; 0x480
			mOut |= FASTABS(yLo);
 8005faa:	431a      	orrs	r2, r3
	x ^= sign;
 8005fac:	4071      	eors	r1, r6
	x -= sign;
 8005fae:	1b8c      	subs	r4, r1, r6
 8005fb0:	463e      	mov	r6, r7
			mOut |= FASTABS(yHi);
 8005fb2:	4314      	orrs	r4, r2
 8005fb4:	e538      	b.n	8005a28 <xmp3fixpt_IMDCT+0x944>
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	9916      	ldr	r1, [sp, #88]	; 0x58
	mOut = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	428a      	cmp	r2, r1
 8005fbe:	9302      	str	r3, [sp, #8]
 8005fc0:	bfa8      	it	ge
 8005fc2:	460a      	movge	r2, r1
	for(i = 0; i < bc->nBlocksLong; i++) {
 8005fc4:	9303      	str	r3, [sp, #12]
 8005fc6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8005fc8:	9221      	str	r2, [sp, #132]	; 0x84
 8005fca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005fcc:	9301      	str	r3, [sp, #4]
 8005fce:	f102 0a48 	add.w	sl, r2, #72	; 0x48
 8005fd2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8005fd4:	3224      	adds	r2, #36	; 0x24
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8005fd6:	46d0      	mov	r8, sl
 8005fd8:	4693      	mov	fp, r2
 8005fda:	e303      	b.n	80065e4 <xmp3fixpt_IMDCT+0x1500>
 8005fdc:	0b27eb5c 	.word	0x0b27eb5c
 8005fe0:	2120fb83 	.word	0x2120fb83
 8005fe4:	36185aee 	.word	0x36185aee
 8005fe8:	496af3e2 	.word	0x496af3e2
 8005fec:	5a82799a 	.word	0x5a82799a
 8005ff0:	68d9f964 	.word	0x68d9f964
 8005ff4:	7401e4c1 	.word	0x7401e4c1
 8005ff8:	7ba3751d 	.word	0x7ba3751d
 8005ffc:	7f834ed0 	.word	0x7f834ed0
			acc1 = (*xCurr--) - acc1;
 8006000:	1afa      	subs	r2, r7, r3
		es = 0;
 8006002:	2100      	movs	r1, #0
			acc1 = (*xCurr--) - acc1;
 8006004:	f858 5c2c 	ldr.w	r5, [r8, #-44]
			acc1 = (*xCurr--) - acc1;
 8006008:	920d      	str	r2, [sp, #52]	; 0x34
		es = 0;
 800600a:	9119      	str	r1, [sp, #100]	; 0x64
			acc1 = (*xCurr--) - acc1;
 800600c:	e958 0704 	ldrd	r0, r7, [r8, #-16]
			acc1 = (*xCurr--) - acc1;
 8006010:	1abf      	subs	r7, r7, r2
			acc1 = (*xCurr--) - acc1;
 8006012:	e958 4206 	ldrd	r4, r2, [r8, #-24]
 8006016:	eba0 0a07 	sub.w	sl, r0, r7
			acc2 = acc1 - acc2;
 800601a:	1aff      	subs	r7, r7, r3
			acc1 = (*xCurr--) - acc1;
 800601c:	eba2 020a 	sub.w	r2, r2, sl
			acc2 = acc1 - acc2;
 8006020:	970a      	str	r7, [sp, #40]	; 0x28
			acc1 = (*xCurr--) - acc1;
 8006022:	1aa4      	subs	r4, r4, r2
			acc2 = acc1 - acc2;
 8006024:	1bd7      	subs	r7, r2, r7
			acc1 = (*xCurr--) - acc1;
 8006026:	f858 2c38 	ldr.w	r2, [r8, #-56]
 800602a:	9414      	str	r4, [sp, #80]	; 0x50
			acc2 = acc1 - acc2;
 800602c:	970c      	str	r7, [sp, #48]	; 0x30
			acc1 = (*xCurr--) - acc1;
 800602e:	e958 0108 	ldrd	r0, r1, [r8, #-32]
 8006032:	e958 630a 	ldrd	r6, r3, [r8, #-40]	; 0x28
			acc1 = (*xCurr--) - acc1;
 8006036:	1b09      	subs	r1, r1, r4
 8006038:	f858 4c3c 	ldr.w	r4, [r8, #-60]
			acc1 = (*xCurr--) - acc1;
 800603c:	eba0 0c01 	sub.w	ip, r0, r1
			acc2 = acc1 - acc2;
 8006040:	1bc9      	subs	r1, r1, r7
			acc1 = (*xCurr--) - acc1;
 8006042:	eba3 030c 	sub.w	r3, r3, ip
			acc2 = acc1 - acc2;
 8006046:	910b      	str	r1, [sp, #44]	; 0x2c
			acc1 = (*xCurr--) - acc1;
 8006048:	1af6      	subs	r6, r6, r3
			acc2 = acc1 - acc2;
 800604a:	1a5b      	subs	r3, r3, r1
			acc1 = (*xCurr--) - acc1;
 800604c:	f858 1c48 	ldr.w	r1, [r8, #-72]
			acc2 = acc1 - acc2;
 8006050:	9310      	str	r3, [sp, #64]	; 0x40
			acc1 = (*xCurr--) - acc1;
 8006052:	1bab      	subs	r3, r5, r6
			acc1 = (*xCurr--) - acc1;
 8006054:	9608      	str	r6, [sp, #32]
			acc2 = acc1 - acc2;
 8006056:	9d10      	ldr	r5, [sp, #64]	; 0x40
			acc1 = (*xCurr--) - acc1;
 8006058:	f858 6c30 	ldr.w	r6, [r8, #-48]
			acc2 = acc1 - acc2;
 800605c:	1b5d      	subs	r5, r3, r5
			acc1 = (*xCurr--) - acc1;
 800605e:	eba6 0903 	sub.w	r9, r6, r3
			acc1 = (*xCurr--) - acc1;
 8006062:	f858 3c34 	ldr.w	r3, [r8, #-52]
			acc2 = acc1 - acc2;
 8006066:	9511      	str	r5, [sp, #68]	; 0x44
			acc1 = (*xCurr--) - acc1;
 8006068:	eba3 0309 	sub.w	r3, r3, r9
			acc1 = (*xCurr--) - acc1;
 800606c:	1ad2      	subs	r2, r2, r3
			acc2 = acc1 - acc2;
 800606e:	1b5b      	subs	r3, r3, r5
			acc1 = (*xCurr--) - acc1;
 8006070:	1aa4      	subs	r4, r4, r2
			acc2 = acc1 - acc2;
 8006072:	931a      	str	r3, [sp, #104]	; 0x68
			acc1 = (*xCurr--) - acc1;
 8006074:	e958 7011 	ldrd	r7, r0, [r8, #-68]	; 0x44
			acc2 = acc1 - acc2;
 8006078:	1ae3      	subs	r3, r4, r3
			acc1 = (*xCurr--) - acc1;
 800607a:	1b00      	subs	r0, r0, r4
			acc2 = acc1 - acc2;
 800607c:	9307      	str	r3, [sp, #28]
			acc1 = (*xCurr--) - acc1;
 800607e:	1a3f      	subs	r7, r7, r0
			acc2 = acc1 - acc2;
 8006080:	1afc      	subs	r4, r7, r3
			acc1 = (*xCurr--) - acc1;
 8006082:	1bc9      	subs	r1, r1, r7
	xBuf[0] >>= 1;
 8006084:	104f      	asrs	r7, r1, #1
	a5 = x2 + x4;
 8006086:	9b08      	ldr	r3, [sp, #32]
	xBuf[9] >>= 1;
 8006088:	1064      	asrs	r4, r4, #1
	a1 = x0 - x6;
 800608a:	9e14      	ldr	r6, [sp, #80]	; 0x50
	xBuf[0] >>= 1;
 800608c:	970e      	str	r7, [sp, #56]	; 0x38
	a5 = x2 + x4;
 800608e:	eb03 0e02 	add.w	lr, r3, r2
	a4 = x2 - x4;
 8006092:	1ad7      	subs	r7, r2, r3
	a6 = x2 + x8;
 8006094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	xBuf[9] >>= 1;
 8006096:	940d      	str	r4, [sp, #52]	; 0x34
	a3 = x1 + x5;
 8006098:	eb0c 0100 	add.w	r1, ip, r0
	a1 = x0 - x6;
 800609c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	a7 = x1 + x7;
 800609e:	eb0a 0500 	add.w	r5, sl, r0
	a6 = x2 + x8;
 80060a2:	441a      	add	r2, r3
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 80060a4:	1aff      	subs	r7, r7, r3
	a1 = x0 - x6;
 80060a6:	1ba6      	subs	r6, r4, r6
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 80060a8:	9108      	str	r1, [sp, #32]
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 80060aa:	9713      	str	r7, [sp, #76]	; 0x4c
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 80060ac:	eba2 040e 	sub.w	r4, r2, lr
	a1 = x0 - x6;
 80060b0:	9612      	str	r6, [sp, #72]	; 0x48
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 80060b2:	1b4e      	subs	r6, r1, r5
 80060b4:	49d2      	ldr	r1, [pc, #840]	; (8006400 <xmp3fixpt_IMDCT+0x131c>)
 80060b6:	fb81 7909 	smull	r7, r9, r1, r9
	a2 = x1 - x5;
 80060ba:	eba0 000c 	sub.w	r0, r0, ip
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 80060be:	eba0 000a 	sub.w	r0, r0, sl
 80060c2:	4682      	mov	sl, r0
 80060c4:	fb81 0a0a 	smull	r0, sl, r1, sl
 80060c8:	4fce      	ldr	r7, [pc, #824]	; (8006404 <xmp3fixpt_IMDCT+0x1320>)
 80060ca:	46f4      	mov	ip, lr
 80060cc:	4639      	mov	r1, r7
 80060ce:	fb87 0c0c 	smull	r0, ip, r7, ip
 80060d2:	4fcd      	ldr	r7, [pc, #820]	; (8006408 <xmp3fixpt_IMDCT+0x1324>)
 80060d4:	463b      	mov	r3, r7
 80060d6:	fb87 0202 	smull	r0, r2, r7, r2
 80060da:	920f      	str	r2, [sp, #60]	; 0x3c
 80060dc:	4627      	mov	r7, r4
 80060de:	fb81 0707 	smull	r0, r7, r1, r7
 80060e2:	4670      	mov	r0, lr
 80060e4:	4619      	mov	r1, r3
 80060e6:	fb83 4000 	smull	r4, r0, r3, r0
 80060ea:	f101 5170 	add.w	r1, r1, #1006632960	; 0x3c000000
 80060ee:	4633      	mov	r3, r6
 80060f0:	f501 214c 	add.w	r1, r1, #835584	; 0xcc000
 80060f4:	f201 21cb 	addw	r1, r1, #715	; 0x2cb
 80060f8:	fb81 4303 	smull	r4, r3, r1, r3
 80060fc:	4ac3      	ldr	r2, [pc, #780]	; (800640c <xmp3fixpt_IMDCT+0x1328>)
 80060fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8006100:	fb82 4505 	smull	r4, r5, r2, r5
 8006104:	f8dd e020 	ldr.w	lr, [sp, #32]
 8006108:	fb81 4e0e 	smull	r4, lr, r1, lr
 800610c:	fb82 4606 	smull	r4, r6, r2, r6
	a16 = ( m5 << 1) + (m6 << 1);
 8006110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	a20 = (m11 << 1) - (m12 << 1);
 8006112:	0076      	lsls	r6, r6, #1
	a3 = x1 + x5;
 8006114:	9907      	ldr	r1, [sp, #28]
	a19 = ( m9 << 1) + (m10 << 1);
 8006116:	006d      	lsls	r5, r5, #1
	a16 = ( m5 << 1) + (m6 << 1);
 8006118:	005a      	lsls	r2, r3, #1
	a3 = x1 + x5;
 800611a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800611c:	460c      	mov	r4, r1
	a13 = a12  +  (  m1 << 1);
 800611e:	ea4f 0949 	mov.w	r9, r9, lsl #1
	a16 = ( m5 << 1) + (m6 << 1);
 8006122:	eb02 024c 	add.w	r2, r2, ip, lsl #1
	a3 = x1 + x5;
 8006126:	441c      	add	r4, r3
	a7 = x1 + x7;
 8006128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800612a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
	a3 = x1 + x5;
 800612e:	940f      	str	r4, [sp, #60]	; 0x3c
	a17 = ( m7 << 1) - (m8 << 1);
 8006130:	0044      	lsls	r4, r0, #1
 8006132:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006134:	ebc4 0447 	rsb	r4, r4, r7, lsl #1
	a12 = x[0] +  (x[6] >> 1);
 8006138:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800613a:	9008      	str	r0, [sp, #32]
	a7 = x1 + x7;
 800613c:	1858      	adds	r0, r3, r1
	a5 = x2 + x4;
 800613e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	a12 = x[0] +  (x[6] >> 1);
 8006140:	46bc      	mov	ip, r7
	a7 = x1 + x7;
 8006142:	9011      	str	r0, [sp, #68]	; 0x44
	a5 = x2 + x4;
 8006144:	981a      	ldr	r0, [sp, #104]	; 0x68
	a12 = x[0] +  (x[6] >> 1);
 8006146:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	a5 = x2 + x4;
 8006148:	1819      	adds	r1, r3, r0
 800614a:	9110      	str	r1, [sp, #64]	; 0x40
	a12 = x[0] +  (x[6] >> 1);
 800614c:	eb07 016c 	add.w	r1, r7, ip, asr #1
	a4 = x2 - x4;
 8006150:	469c      	mov	ip, r3
	a6 = x2 + x8;
 8006152:	9b06      	ldr	r3, [sp, #24]
	a14 = a12  -  (  m1 << 1);
 8006154:	eba1 0709 	sub.w	r7, r1, r9
	a13 = a12  +  (  m1 << 1);
 8006158:	4449      	add	r1, r9
	a4 = x2 - x4;
 800615a:	eba0 0c0c 	sub.w	ip, r0, ip
	a6 = x2 + x8;
 800615e:	4418      	add	r0, r3
 8006160:	4603      	mov	r3, r0
	a19 = ( m9 << 1) + (m10 << 1);
 8006162:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006164:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	a20 = (m11 << 1) - (m12 << 1);
 8006168:	ebc6 004e 	rsb	r0, r6, lr, lsl #1
	a26 = a14 - a18;
 800616c:	1916      	adds	r6, r2, r4
	a20 = (m11 << 1) - (m12 << 1);
 800616e:	900e      	str	r0, [sp, #56]	; 0x38
	a27 = a13 - a18;
 8006170:	eba1 0e06 	sub.w	lr, r1, r6
	a26 = a14 - a18;
 8006174:	1bb8      	subs	r0, r7, r6
	a21 = a20 - a19;
 8006176:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006178:	eba6 0905 	sub.w	r9, r6, r5
	a22 = a13 + a16;
 800617c:	188e      	adds	r6, r1, r2
	a25 = a13 + a17;
 800617e:	4421      	add	r1, r4
	a23 = a14 + a16;
 8006180:	443a      	add	r2, r7
	a24 = a14 + a17;
 8006182:	443c      	add	r4, r7
	a15 = a1   +  ( a11 >> 1);
 8006184:	9f12      	ldr	r7, [sp, #72]	; 0x48
	a22 = a13 + a16;
 8006186:	9614      	str	r6, [sp, #80]	; 0x50
	x5 = a27 + a21;			x[5] = x5;
 8006188:	44ce      	add	lr, r9
	a15 = a1   +  ( a11 >> 1);
 800618a:	463e      	mov	r6, r7
 800618c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
	x5 = a27 + a21;			x[5] = x5;
 800618e:	f8cd e070 	str.w	lr, [sp, #112]	; 0x70
	x8 = a23 - a19;			x[8] = x8;
 8006192:	1b52      	subs	r2, r2, r5
	a15 = a1   +  ( a11 >> 1);
 8006194:	eb06 0767 	add.w	r7, r6, r7, asr #1
	x3 = a26 - a21;			x[3] = x3;
 8006198:	eba0 0609 	sub.w	r6, r0, r9
	x0 = a22 + a19;			x[0] = x0;
 800619c:	9814      	ldr	r0, [sp, #80]	; 0x50
	x3 = a26 - a21;			x[3] = x3;
 800619e:	961b      	str	r6, [sp, #108]	; 0x6c
	x1 = a15 + (m3 << 1);	x[1] = x1;
 80061a0:	eb07 0e0a 	add.w	lr, r7, sl
	x0 = a22 + a19;			x[0] = x0;
 80061a4:	1946      	adds	r6, r0, r5
	x6 = a25 - a20;			x[6] = x6;
 80061a6:	980e      	ldr	r0, [sp, #56]	; 0x38
	x8 = a23 - a19;			x[8] = x8;
 80061a8:	921f      	str	r2, [sp, #124]	; 0x7c
	x0 = a22 + a19;			x[0] = x0;
 80061aa:	9614      	str	r6, [sp, #80]	; 0x50
	x6 = a25 - a20;			x[6] = x6;
 80061ac:	1a0e      	subs	r6, r1, r0
	x1 = a15 + (m3 << 1);	x[1] = x1;
 80061ae:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
	x2 = a24 + a20;			x[2] = x2;
 80061b2:	4420      	add	r0, r4
	x6 = a25 - a20;			x[6] = x6;
 80061b4:	961d      	str	r6, [sp, #116]	; 0x74
	x7 = a15 - (m3 << 1);	x[7] = x7;
 80061b6:	eba7 0e0a 	sub.w	lr, r7, sl
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 80061ba:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80061bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
	x2 = a24 + a20;			x[2] = x2;
 80061be:	901a      	str	r0, [sp, #104]	; 0x68
	x7 = a15 - (m3 << 1);	x[7] = x7;
 80061c0:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 80061c4:	1ab1      	subs	r1, r6, r2
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 80061c6:	9e06      	ldr	r6, [sp, #24]
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 80061c8:	9810      	ldr	r0, [sp, #64]	; 0x40
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 80061ca:	ebac 0c06 	sub.w	ip, ip, r6
 80061ce:	4c8c      	ldr	r4, [pc, #560]	; (8006400 <xmp3fixpt_IMDCT+0x131c>)
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 80061d0:	1a1e      	subs	r6, r3, r0
 80061d2:	9808      	ldr	r0, [sp, #32]
	a1 = x0 - x6;
 80061d4:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
 80061d8:	1bed      	subs	r5, r5, r7
 80061da:	9506      	str	r5, [sp, #24]
 80061dc:	fb84 2000 	smull	r2, r0, r4, r0
	a2 = x1 - x5;
 80061e0:	9d07      	ldr	r5, [sp, #28]
 80061e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061e4:	9008      	str	r0, [sp, #32]
 80061e6:	1aaf      	subs	r7, r5, r2
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 80061e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061ea:	1abf      	subs	r7, r7, r2
 80061ec:	463d      	mov	r5, r7
 80061ee:	fb84 2505 	smull	r2, r5, r4, r5
 80061f2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80061f4:	9507      	str	r5, [sp, #28]
 80061f6:	4682      	mov	sl, r0
 80061f8:	4f82      	ldr	r7, [pc, #520]	; (8006404 <xmp3fixpt_IMDCT+0x1320>)
 80061fa:	fb87 2a0a 	smull	r2, sl, r7, sl
 80061fe:	4c82      	ldr	r4, [pc, #520]	; (8006408 <xmp3fixpt_IMDCT+0x1324>)
 8006200:	fb84 2303 	smull	r2, r3, r4, r3
 8006204:	fb87 2606 	smull	r2, r6, r7, r6
 8006208:	fb84 2000 	smull	r2, r0, r4, r0
 800620c:	f104 5470 	add.w	r4, r4, #1006632960	; 0x3c000000
 8006210:	468e      	mov	lr, r1
 8006212:	f504 244c 	add.w	r4, r4, #835584	; 0xcc000
 8006216:	f204 24cb 	addw	r4, r4, #715	; 0x2cb
 800621a:	fb84 2e0e 	smull	r2, lr, r4, lr
 800621e:	4d7b      	ldr	r5, [pc, #492]	; (800640c <xmp3fixpt_IMDCT+0x1328>)
 8006220:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006222:	fb85 7202 	smull	r7, r2, r5, r2
 8006226:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006228:	fb84 9707 	smull	r9, r7, r4, r7
 800622c:	fb85 9101 	smull	r9, r1, r5, r1
	x4 = a1 - a11;			x[4] = x4;
 8006230:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
	a16 = ( m5 << 1) + (m6 << 1);
 8006234:	005b      	lsls	r3, r3, #1
	x4 = a1 - a11;			x[4] = x4;
 8006236:	1b64      	subs	r4, r4, r5
	a17 = ( m7 << 1) - (m8 << 1);
 8006238:	0040      	lsls	r0, r0, #1
	a12 = x[0] +  (x[6] >> 1);
 800623a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
	a20 = (m11 << 1) - (m12 << 1);
 800623c:	0049      	lsls	r1, r1, #1
	x4 = a1 - a11;			x[4] = x4;
 800623e:	940b      	str	r4, [sp, #44]	; 0x2c
	a17 = ( m7 << 1) - (m8 << 1);
 8006240:	ebc0 0046 	rsb	r0, r0, r6, lsl #1
	x4 = a1 - a11;			x[4] = x4;
 8006244:	9c06      	ldr	r4, [sp, #24]
	a20 = (m11 << 1) - (m12 << 1);
 8006246:	ebc1 0147 	rsb	r1, r1, r7, lsl #1
	a12 = x[0] +  (x[6] >> 1);
 800624a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	a19 = ( m9 << 1) + (m10 << 1);
 800624c:	0052      	lsls	r2, r2, #1
	x4 = a1 - a11;			x[4] = x4;
 800624e:	eba4 090c 	sub.w	r9, r4, ip
	a16 = ( m5 << 1) + (m6 << 1);
 8006252:	eb03 044a 	add.w	r4, r3, sl, lsl #1
	a13 = a12  +  (  m1 << 1);
 8006256:	9b08      	ldr	r3, [sp, #32]
	a12 = x[0] +  (x[6] >> 1);
 8006258:	eb05 0a66 	add.w	sl, r5, r6, asr #1
	x4 = a1 - a11;			x[4] = x4;
 800625c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
	a18 = a16 + a17;
 8006260:	eb04 0900 	add.w	r9, r4, r0
	a13 = a12  +  (  m1 << 1);
 8006264:	005e      	lsls	r6, r3, #1
	x1 = a15 + (m3 << 1);	x[1] = x1;
 8006266:	9d07      	ldr	r5, [sp, #28]
	a19 = ( m9 << 1) + (m10 << 1);
 8006268:	eb02 024e 	add.w	r2, r2, lr, lsl #1
	a14 = a12  -  (  m1 << 1);
 800626c:	ebaa 0306 	sub.w	r3, sl, r6
	a13 = a12  +  (  m1 << 1);
 8006270:	4456      	add	r6, sl
	x1 = a15 + (m3 << 1);	x[1] = x1;
 8006272:	006f      	lsls	r7, r5, #1
	a21 = a20 - a19;
 8006274:	eba1 0e02 	sub.w	lr, r1, r2
	a26 = a14 - a18;
 8006278:	eba3 0a09 	sub.w	sl, r3, r9
	a22 = a13 + a16;
 800627c:	1935      	adds	r5, r6, r4
	a27 = a13 - a18;
 800627e:	eba6 0909 	sub.w	r9, r6, r9
	a25 = a13 + a17;
 8006282:	4406      	add	r6, r0
	a24 = a14 + a17;
 8006284:	4418      	add	r0, r3
	a23 = a14 + a16;
 8006286:	4423      	add	r3, r4
	a15 = a1   +  ( a11 >> 1);
 8006288:	9c06      	ldr	r4, [sp, #24]
	x3 = a26 - a21;			x[3] = x3;
 800628a:	ebaa 0a0e 	sub.w	sl, sl, lr
	x5 = a27 + a21;			x[5] = x5;
 800628e:	44f1      	add	r9, lr
	x8 = a23 - a19;			x[8] = x8;
 8006290:	1a9b      	subs	r3, r3, r2
	a15 = a1   +  ( a11 >> 1);
 8006292:	eb04 0c6c 	add.w	ip, r4, ip, asr #1
 8006296:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	x0 = a22 + a19;			x[0] = x0;
 8006298:	eb05 0e02 	add.w	lr, r5, r2
 800629c:	10a4      	asrs	r4, r4, #2
 800629e:	940b      	str	r4, [sp, #44]	; 0x2c
	x6 = a25 - a20;			x[6] = x6;
 80062a0:	1a74      	subs	r4, r6, r1
	x2 = a24 + a20;			x[2] = x2;
 80062a2:	1841      	adds	r1, r0, r1
	x1 = a15 + (m3 << 1);	x[1] = x1;
 80062a4:	eb0c 0007 	add.w	r0, ip, r7
	x7 = a15 - (m3 << 1);	x[7] = x7;
 80062a8:	ebac 0c07 	sub.w	ip, ip, r7
	if (btPrev == 0 && btCurr == 0) {
 80062ac:	9f15      	ldr	r7, [sp, #84]	; 0x54
	x6 = a25 - a20;			x[6] = x6;
 80062ae:	9408      	str	r4, [sp, #32]
	x2 = a24 + a20;			x[2] = x2;
 80062b0:	9107      	str	r1, [sp, #28]
	x1 = a15 + (m3 << 1);	x[1] = x1;
 80062b2:	9006      	str	r0, [sp, #24]
	if (btPrev == 0 && btCurr == 0) {
 80062b4:	2f00      	cmp	r7, #0
 80062b6:	f040 8263 	bne.w	8006780 <xmp3fixpt_IMDCT+0x169c>
 80062ba:	4a55      	ldr	r2, [pc, #340]	; (8006410 <xmp3fixpt_IMDCT+0x132c>)
 80062bc:	fb82 1303 	smull	r1, r3, r2, r3
			xe >>= 2;
 80062c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80062c2:	f85b 0c24 	ldr.w	r0, [fp, #-36]
			xe >>= 2;
 80062c6:	1092      	asrs	r2, r2, #2
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80062c8:	4241      	negs	r1, r0
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80062ca:	189e      	adds	r6, r3, r2
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	4a51      	ldr	r2, [pc, #324]	; (8006414 <xmp3fixpt_IMDCT+0x1330>)
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80062d0:	f84b 6c24 	str.w	r6, [fp, #-36]
			t = s - d;
 80062d4:	1ac9      	subs	r1, r1, r3
 80062d6:	fb81 4202 	smull	r4, r2, r1, r2
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 80062da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80062de:	4a4e      	ldr	r2, [pc, #312]	; (8006418 <xmp3fixpt_IMDCT+0x1334>)
 80062e0:	fb81 4202 	smull	r4, r2, r1, r2
 80062e4:	ebc0 0282 	rsb	r2, r0, r2, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 80062e8:	9f01      	ldr	r7, [sp, #4]
	sign = x >> (sizeof(int) * 8 - 1);
 80062ea:	17d9      	asrs	r1, r3, #31
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80062ec:	4c4b      	ldr	r4, [pc, #300]	; (800641c <xmp3fixpt_IMDCT+0x1338>)
	sign = x >> (sizeof(int) * 8 - 1);
 80062ee:	17d0      	asrs	r0, r2, #31
 80062f0:	603b      	str	r3, [r7, #0]
			y[(17-i)*NBANDS] =  yHi;
 80062f2:	f8c7 2880 	str.w	r2, [r7, #2176]	; 0x880
	x ^= sign;
 80062f6:	404b      	eors	r3, r1
 80062f8:	4042      	eors	r2, r0
	x -= sign;
 80062fa:	1a5b      	subs	r3, r3, r1
 80062fc:	1a12      	subs	r2, r2, r0
			mOut |= FASTABS(yHi);
 80062fe:	4313      	orrs	r3, r2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006300:	fb84 2c0c 	smull	r2, ip, r4, ip
			xe >>= 2;
 8006304:	9a1e      	ldr	r2, [sp, #120]	; 0x78
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 8006306:	f85b 1c20 	ldr.w	r1, [fp, #-32]
			xe >>= 2;
 800630a:	1092      	asrs	r2, r2, #2
 800630c:	4d44      	ldr	r5, [pc, #272]	; (8006420 <xmp3fixpt_IMDCT+0x133c>)
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800630e:	424c      	negs	r4, r1
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006310:	eb0c 0002 	add.w	r0, ip, r2
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 8006314:	ebac 0c02 	sub.w	ip, ip, r2
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006318:	f84b 0c20 	str.w	r0, [fp, #-32]
			t = s - d;
 800631c:	eba4 040c 	sub.w	r4, r4, ip
 8006320:	fb84 2505 	smull	r2, r5, r4, r5
 8006324:	483f      	ldr	r0, [pc, #252]	; (8006424 <xmp3fixpt_IMDCT+0x1340>)
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 8006326:	eb0c 0285 	add.w	r2, ip, r5, lsl #2
 800632a:	fb84 5000 	smull	r5, r0, r4, r0
 800632e:	ebc1 0080 	rsb	r0, r1, r0, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 8006332:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
	sign = x >> (sizeof(int) * 8 - 1);
 8006336:	17d4      	asrs	r4, r2, #31
 8006338:	46bc      	mov	ip, r7
 800633a:	17c5      	asrs	r5, r0, #31
			y[(17-i)*NBANDS] =  yHi;
 800633c:	f8c7 0800 	str.w	r0, [r7, #2048]	; 0x800
	x ^= sign;
 8006340:	4062      	eors	r2, r4
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006342:	9e08      	ldr	r6, [sp, #32]
	x ^= sign;
 8006344:	4068      	eors	r0, r5
	x -= sign;
 8006346:	1b12      	subs	r2, r2, r4
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006348:	4c37      	ldr	r4, [pc, #220]	; (8006428 <xmp3fixpt_IMDCT+0x1344>)
	x -= sign;
 800634a:	1b40      	subs	r0, r0, r5
			mOut |= FASTABS(yLo);
 800634c:	431a      	orrs	r2, r3
			mOut |= FASTABS(yHi);
 800634e:	4302      	orrs	r2, r0
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006350:	fb84 3606 	smull	r3, r6, r4, r6
			xe >>= 2;
 8006354:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006356:	4c35      	ldr	r4, [pc, #212]	; (800642c <xmp3fixpt_IMDCT+0x1348>)
 8006358:	1083      	asrs	r3, r0, #2
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800635a:	f85b 0c1c 	ldr.w	r0, [fp, #-28]
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800635e:	18f1      	adds	r1, r6, r3
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 8006360:	4245      	negs	r5, r0
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 8006362:	1af6      	subs	r6, r6, r3
 8006364:	4623      	mov	r3, r4
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006366:	f84b 1c1c 	str.w	r1, [fp, #-28]
			t = s - d;
 800636a:	1bad      	subs	r5, r5, r6
 800636c:	fb85 1303 	smull	r1, r3, r5, r3
 8006370:	492f      	ldr	r1, [pc, #188]	; (8006430 <xmp3fixpt_IMDCT+0x134c>)
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 8006372:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006376:	fb85 6101 	smull	r6, r1, r5, r1
 800637a:	ebc0 0181 	rsb	r1, r0, r1, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 800637e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	sign = x >> (sizeof(int) * 8 - 1);
 8006382:	17de      	asrs	r6, r3, #31
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006384:	4d2b      	ldr	r5, [pc, #172]	; (8006434 <xmp3fixpt_IMDCT+0x1350>)
	sign = x >> (sizeof(int) * 8 - 1);
 8006386:	17cf      	asrs	r7, r1, #31
			y[(17-i)*NBANDS] =  yHi;
 8006388:	f8cc 1780 	str.w	r1, [ip, #1920]	; 0x780
	x ^= sign;
 800638c:	4073      	eors	r3, r6
 800638e:	4079      	eors	r1, r7
	x -= sign;
 8006390:	1b9b      	subs	r3, r3, r6
 8006392:	1bc9      	subs	r1, r1, r7
			mOut |= FASTABS(yLo);
 8006394:	4313      	orrs	r3, r2
			mOut |= FASTABS(yHi);
 8006396:	ea41 0003 	orr.w	r0, r1, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800639a:	fb85 3909 	smull	r3, r9, r5, r9
			xe >>= 2;
 800639e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80063a0:	f85b 3c18 	ldr.w	r3, [fp, #-24]
			xe >>= 2;
 80063a4:	10aa      	asrs	r2, r5, #2
 80063a6:	4d24      	ldr	r5, [pc, #144]	; (8006438 <xmp3fixpt_IMDCT+0x1354>)
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80063a8:	425e      	negs	r6, r3
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80063aa:	eb09 0102 	add.w	r1, r9, r2
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 80063ae:	eba9 0902 	sub.w	r9, r9, r2
 80063b2:	462a      	mov	r2, r5
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80063b4:	f84b 1c18 	str.w	r1, [fp, #-24]
			t = s - d;
 80063b8:	eba6 0609 	sub.w	r6, r6, r9
 80063bc:	fb86 1202 	smull	r1, r2, r6, r2
 80063c0:	491e      	ldr	r1, [pc, #120]	; (800643c <xmp3fixpt_IMDCT+0x1358>)
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 80063c2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80063c6:	fb86 7101 	smull	r7, r1, r6, r1
 80063ca:	ebc3 0181 	rsb	r1, r3, r1, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 80063ce:	4666      	mov	r6, ip
 80063d0:	f8cc 2180 	str.w	r2, [ip, #384]	; 0x180
	sign = x >> (sizeof(int) * 8 - 1);
 80063d4:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 80063d8:	17cf      	asrs	r7, r1, #31
			y[(17-i)*NBANDS] =  yHi;
 80063da:	f8c6 1700 	str.w	r1, [r6, #1792]	; 0x700
	x ^= sign;
 80063de:	ea82 020c 	eor.w	r2, r2, ip
 80063e2:	46b1      	mov	r9, r6
 80063e4:	4079      	eors	r1, r7
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80063e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	x -= sign;
 80063e8:	eba2 020c 	sub.w	r2, r2, ip
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80063ec:	4e14      	ldr	r6, [pc, #80]	; (8006440 <xmp3fixpt_IMDCT+0x135c>)
	x -= sign;
 80063ee:	1bc9      	subs	r1, r1, r7
			mOut |= FASTABS(yLo);
 80063f0:	4302      	orrs	r2, r0
			mOut |= FASTABS(yHi);
 80063f2:	4311      	orrs	r1, r2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80063f4:	fb86 2303 	smull	r2, r3, r6, r3
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80063f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80063fa:	f85b 0c14 	ldr.w	r0, [fp, #-20]
 80063fe:	e021      	b.n	8006444 <xmp3fixpt_IMDCT+0x1360>
 8006400:	6ed9eba1 	.word	0x6ed9eba1
 8006404:	620dbe8b 	.word	0x620dbe8b
 8006408:	163a1a7e 	.word	0x163a1a7e
 800640c:	7e0e2e32 	.word	0x7e0e2e32
 8006410:	0b27eb5c 	.word	0x0b27eb5c
 8006414:	42aace8b 	.word	0x42aace8b
 8006418:	c2e92724 	.word	0xc2e92724
 800641c:	2120fb83 	.word	0x2120fb83
 8006420:	47311c28 	.word	0x47311c28
 8006424:	c95f619a 	.word	0xc95f619a
 8006428:	36185aee 	.word	0x36185aee
 800642c:	4a868feb 	.word	0x4a868feb
 8006430:	d0859d8c 	.word	0xd0859d8c
 8006434:	496af3e2 	.word	0x496af3e2
 8006438:	4c913b51 	.word	0x4c913b51
 800643c:	d8243ea0 	.word	0xd8243ea0
 8006440:	5a82799a 	.word	0x5a82799a
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006444:	18fa      	adds	r2, r7, r3
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 8006446:	eba3 0c07 	sub.w	ip, r3, r7
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800644a:	4246      	negs	r6, r0
 800644c:	4fc1      	ldr	r7, [pc, #772]	; (8006754 <xmp3fixpt_IMDCT+0x1670>)
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800644e:	f84b 2c14 	str.w	r2, [fp, #-20]
			t = s - d;
 8006452:	eba6 060c 	sub.w	r6, r6, ip
 8006456:	fb86 3707 	smull	r3, r7, r6, r7
 800645a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 800645e:	eb0c 0387 	add.w	r3, ip, r7, lsl #2
 8006462:	fb86 7202 	smull	r7, r2, r6, r2
 8006466:	ebc0 0282 	rsb	r2, r0, r2, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 800646a:	f8c9 3200 	str.w	r3, [r9, #512]	; 0x200
	sign = x >> (sizeof(int) * 8 - 1);
 800646e:	17df      	asrs	r7, r3, #31
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006470:	48b9      	ldr	r0, [pc, #740]	; (8006758 <xmp3fixpt_IMDCT+0x1674>)
	sign = x >> (sizeof(int) * 8 - 1);
 8006472:	17d6      	asrs	r6, r2, #31
			y[(17-i)*NBANDS] =  yHi;
 8006474:	f8c9 2680 	str.w	r2, [r9, #1664]	; 0x680
	x ^= sign;
 8006478:	407b      	eors	r3, r7
 800647a:	4072      	eors	r2, r6
	x -= sign;
 800647c:	1bdb      	subs	r3, r3, r7
 800647e:	1b92      	subs	r2, r2, r6
			mOut |= FASTABS(yLo);
 8006480:	430b      	orrs	r3, r1
			mOut |= FASTABS(yHi);
 8006482:	431a      	orrs	r2, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006484:	fb80 3a0a 	smull	r3, sl, r0, sl
			xe >>= 2;
 8006488:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800648a:	f85b 3c10 	ldr.w	r3, [fp, #-16]
			xe >>= 2;
 800648e:	10b0      	asrs	r0, r6, #2
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 8006490:	425e      	negs	r6, r3
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006492:	eb0a 0100 	add.w	r1, sl, r0
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 8006496:	ebaa 0a00 	sub.w	sl, sl, r0
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800649a:	f84b 1c10 	str.w	r1, [fp, #-16]
			t = s - d;
 800649e:	eba6 060a 	sub.w	r6, r6, sl
 80064a2:	fb86 1505 	smull	r1, r5, r6, r5
 80064a6:	49ad      	ldr	r1, [pc, #692]	; (800675c <xmp3fixpt_IMDCT+0x1678>)
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 80064a8:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 80064ac:	fb86 0101 	smull	r0, r1, r6, r1
 80064b0:	ebc3 0381 	rsb	r3, r3, r1, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 80064b4:	f8c9 5280 	str.w	r5, [r9, #640]	; 0x280
	sign = x >> (sizeof(int) * 8 - 1);
 80064b8:	17e8      	asrs	r0, r5, #31
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80064ba:	9907      	ldr	r1, [sp, #28]
	sign = x >> (sizeof(int) * 8 - 1);
 80064bc:	17de      	asrs	r6, r3, #31
			y[(17-i)*NBANDS] =  yHi;
 80064be:	f8c9 3600 	str.w	r3, [r9, #1536]	; 0x600
	x ^= sign;
 80064c2:	4045      	eors	r5, r0
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80064c4:	4fa6      	ldr	r7, [pc, #664]	; (8006760 <xmp3fixpt_IMDCT+0x167c>)
	x ^= sign;
 80064c6:	4073      	eors	r3, r6
	x -= sign;
 80064c8:	1a2d      	subs	r5, r5, r0
 80064ca:	1b9b      	subs	r3, r3, r6
			mOut |= FASTABS(yLo);
 80064cc:	432a      	orrs	r2, r5
			mOut |= FASTABS(yHi);
 80064ce:	4313      	orrs	r3, r2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80064d0:	fb87 2101 	smull	r2, r1, r7, r1
			xe >>= 2;
 80064d4:	981a      	ldr	r0, [sp, #104]	; 0x68
 80064d6:	1086      	asrs	r6, r0, #2
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80064d8:	f85b 0c0c 	ldr.w	r0, [fp, #-12]
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80064dc:	198a      	adds	r2, r1, r6
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 80064de:	4245      	negs	r5, r0
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 80064e0:	1b89      	subs	r1, r1, r6
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80064e2:	f84b 2c0c 	str.w	r2, [fp, #-12]
			t = s - d;
 80064e6:	1a6d      	subs	r5, r5, r1
 80064e8:	fb85 2404 	smull	r2, r4, r5, r4
 80064ec:	4a9d      	ldr	r2, [pc, #628]	; (8006764 <xmp3fixpt_IMDCT+0x1680>)
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 80064ee:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80064f2:	fb85 4202 	smull	r4, r2, r5, r2
 80064f6:	ebc0 0482 	rsb	r4, r0, r2, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 80064fa:	f8c9 1300 	str.w	r1, [r9, #768]	; 0x300
	sign = x >> (sizeof(int) * 8 - 1);
 80064fe:	17c8      	asrs	r0, r1, #31
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006500:	9a06      	ldr	r2, [sp, #24]
	sign = x >> (sizeof(int) * 8 - 1);
 8006502:	17e5      	asrs	r5, r4, #31
			y[(17-i)*NBANDS] =  yHi;
 8006504:	f8c9 4580 	str.w	r4, [r9, #1408]	; 0x580
	x ^= sign;
 8006508:	4041      	eors	r1, r0
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800650a:	4e97      	ldr	r6, [pc, #604]	; (8006768 <xmp3fixpt_IMDCT+0x1684>)
	x ^= sign;
 800650c:	406c      	eors	r4, r5
	x -= sign;
 800650e:	1a09      	subs	r1, r1, r0
 8006510:	1b64      	subs	r4, r4, r5
			mOut |= FASTABS(yLo);
 8006512:	430b      	orrs	r3, r1
			mOut |= FASTABS(yHi);
 8006514:	4323      	orrs	r3, r4
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006516:	fb86 1202 	smull	r1, r2, r6, r2
			xe >>= 2;
 800651a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800651c:	f85b 0c08 	ldr.w	r0, [fp, #-8]
			xe >>= 2;
 8006520:	10ac      	asrs	r4, r5, #2
 8006522:	4d92      	ldr	r5, [pc, #584]	; (800676c <xmp3fixpt_IMDCT+0x1688>)
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006524:	1911      	adds	r1, r2, r4
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 8006526:	1b12      	subs	r2, r2, r4
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 8006528:	4244      	negs	r4, r0
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800652a:	f84b 1c08 	str.w	r1, [fp, #-8]
			t = s - d;
 800652e:	1aa4      	subs	r4, r4, r2
 8006530:	fb84 1505 	smull	r1, r5, r4, r5
 8006534:	498e      	ldr	r1, [pc, #568]	; (8006770 <xmp3fixpt_IMDCT+0x168c>)
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 8006536:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800653a:	fb84 5101 	smull	r5, r1, r4, r1
 800653e:	ebc0 0181 	rsb	r1, r0, r1, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 8006542:	f8c9 2380 	str.w	r2, [r9, #896]	; 0x380
	sign = x >> (sizeof(int) * 8 - 1);
 8006546:	17d4      	asrs	r4, r2, #31
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006548:	4670      	mov	r0, lr
	sign = x >> (sizeof(int) * 8 - 1);
 800654a:	17cd      	asrs	r5, r1, #31
			y[(17-i)*NBANDS] =  yHi;
 800654c:	f8c9 1500 	str.w	r1, [r9, #1280]	; 0x500
	x ^= sign;
 8006550:	4062      	eors	r2, r4
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006552:	4e88      	ldr	r6, [pc, #544]	; (8006774 <xmp3fixpt_IMDCT+0x1690>)
	x ^= sign;
 8006554:	4069      	eors	r1, r5
	x -= sign;
 8006556:	1b12      	subs	r2, r2, r4
 8006558:	1b49      	subs	r1, r1, r5
			mOut |= FASTABS(yLo);
 800655a:	431a      	orrs	r2, r3
			mOut |= FASTABS(yHi);
 800655c:	4311      	orrs	r1, r2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800655e:	fb86 3000 	smull	r3, r0, r6, r0
			xe >>= 2;
 8006562:	9e14      	ldr	r6, [sp, #80]	; 0x50
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 8006564:	f85b 2c04 	ldr.w	r2, [fp, #-4]
			xe >>= 2;
 8006568:	ea4f 0aa6 	mov.w	sl, r6, asr #2
 800656c:	4d82      	ldr	r5, [pc, #520]	; (8006778 <xmp3fixpt_IMDCT+0x1694>)
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800656e:	4254      	negs	r4, r2
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006570:	eb00 030a 	add.w	r3, r0, sl
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 8006574:	eba0 0a0a 	sub.w	sl, r0, sl
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006578:	f84b 3c04 	str.w	r3, [fp, #-4]
			t = s - d;
 800657c:	eba4 040a 	sub.w	r4, r4, sl
 8006580:	fb84 3505 	smull	r3, r5, r4, r5
 8006584:	4b7d      	ldr	r3, [pc, #500]	; (800677c <xmp3fixpt_IMDCT+0x1698>)
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 8006586:	eb0a 0085 	add.w	r0, sl, r5, lsl #2
 800658a:	fb84 5303 	smull	r5, r3, r4, r3
 800658e:	ebc2 0383 	rsb	r3, r2, r3, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 8006592:	f8c9 0400 	str.w	r0, [r9, #1024]	; 0x400
	sign = x >> (sizeof(int) * 8 - 1);
 8006596:	17c6      	asrs	r6, r0, #31
 8006598:	17dd      	asrs	r5, r3, #31
			y[(17-i)*NBANDS] =  yHi;
 800659a:	f8c9 3480 	str.w	r3, [r9, #1152]	; 0x480
	x ^= sign;
 800659e:	ea80 0206 	eor.w	r2, r0, r6
 80065a2:	406b      	eors	r3, r5
	x -= sign;
 80065a4:	1b96      	subs	r6, r2, r6
 80065a6:	1b5b      	subs	r3, r3, r5
			mOut |= FASTABS(yLo);
 80065a8:	4331      	orrs	r1, r6
 80065aa:	9e01      	ldr	r6, [sp, #4]
			mOut |= FASTABS(yHi);
 80065ac:	ea43 0401 	orr.w	r4, r3, r1
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 80065b0:	9d03      	ldr	r5, [sp, #12]
 80065b2:	f1ab 0124 	sub.w	r1, fp, #36	; 0x24
 80065b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065b8:	4630      	mov	r0, r6
 80065ba:	462a      	mov	r2, r5
	for(i = 0; i < bc->nBlocksLong; i++) {
 80065bc:	3501      	adds	r5, #1
 80065be:	f108 0848 	add.w	r8, r8, #72	; 0x48
 80065c2:	9503      	str	r5, [sp, #12]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 80065c4:	f7fe fb26 	bl	8004c14 <FreqInvertRescale>
 80065c8:	4632      	mov	r2, r6
 80065ca:	4320      	orrs	r0, r4
		xPrev += 9;
 80065cc:	465b      	mov	r3, fp
 80065ce:	f10b 0b24 	add.w	fp, fp, #36	; 0x24
 80065d2:	3204      	adds	r2, #4
 80065d4:	9201      	str	r2, [sp, #4]
		mOut |= IMDCT36(xCurr, xPrev, &(y[0][i]), currWinIdx, prevWinIdx, i, bc->gbIn);
 80065d6:	9a02      	ldr	r2, [sp, #8]
 80065d8:	4302      	orrs	r2, r0
 80065da:	9202      	str	r2, [sp, #8]
	for(i = 0; i < bc->nBlocksLong; i++) {
 80065dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065de:	4295      	cmp	r5, r2
 80065e0:	f280 82a5 	bge.w	8006b2e <xmp3fixpt_IMDCT+0x1a4a>
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 80065e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80065e6:	6993      	ldr	r3, [r2, #24]
		currWinIdx = sis->blockType;
 80065e8:	6952      	ldr	r2, [r2, #20]
 80065ea:	9215      	str	r2, [sp, #84]	; 0x54
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 80065ec:	b12b      	cbz	r3, 80065fa <xmp3fixpt_IMDCT+0x1516>
			currWinIdx = 0;
 80065ee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80065f0:	9903      	ldr	r1, [sp, #12]
 80065f2:	428b      	cmp	r3, r1
 80065f4:	bfc8      	it	gt
 80065f6:	2200      	movgt	r2, #0
 80065f8:	9215      	str	r2, [sp, #84]	; 0x54
	if (gb < 7) {
 80065fa:	9a05      	ldr	r2, [sp, #20]
 80065fc:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8006600:	2a06      	cmp	r2, #6
 8006602:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
 8006606:	9306      	str	r3, [sp, #24]
 8006608:	f858 7c08 	ldr.w	r7, [r8, #-8]
 800660c:	f73f acf8 	bgt.w	8006000 <xmp3fixpt_IMDCT+0xf1c>
		es = 7 - gb;
 8006610:	f1c2 0007 	rsb	r0, r2, #7
			acc1 = ((*xCurr--) >> es) - acc1;
 8006614:	9d06      	ldr	r5, [sp, #24]
			xPrev[i] >>= es;
 8006616:	e95b 3202 	ldrd	r3, r2, [fp, #-8]
			acc1 = ((*xCurr--) >> es) - acc1;
 800661a:	4105      	asrs	r5, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800661c:	fa47 f100 	asr.w	r1, r7, r0
			xPrev[i] >>= es;
 8006620:	4102      	asrs	r2, r0
 8006622:	4103      	asrs	r3, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 8006624:	1b49      	subs	r1, r1, r5
		es = 7 - gb;
 8006626:	4606      	mov	r6, r0
			xPrev[i] >>= es;
 8006628:	f84b 2c04 	str.w	r2, [fp, #-4]
			acc1 = ((*xCurr--) >> es) - acc1;
 800662c:	f858 4c0c 	ldr.w	r4, [r8, #-12]
			acc1 = ((*xCurr--) >> es) - acc1;
 8006630:	f858 2c10 	ldr.w	r2, [r8, #-16]
			acc1 = ((*xCurr--) >> es) - acc1;
 8006634:	4104      	asrs	r4, r0
			xPrev[i] >>= es;
 8006636:	f84b 3c08 	str.w	r3, [fp, #-8]
			acc1 = ((*xCurr--) >> es) - acc1;
 800663a:	fa42 fa00 	asr.w	sl, r2, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800663e:	f858 2c14 	ldr.w	r2, [r8, #-20]
 8006642:	1a64      	subs	r4, r4, r1
			xPrev[i] >>= es;
 8006644:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
			acc1 = ((*xCurr--) >> es) - acc1;
 8006648:	910d      	str	r1, [sp, #52]	; 0x34
			acc1 = ((*xCurr--) >> es) - acc1;
 800664a:	4102      	asrs	r2, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800664c:	f858 1c18 	ldr.w	r1, [r8, #-24]
 8006650:	ebaa 0a04 	sub.w	sl, sl, r4
			xPrev[i] >>= es;
 8006654:	4103      	asrs	r3, r0
		es = 7 - gb;
 8006656:	9019      	str	r0, [sp, #100]	; 0x64
			acc1 = ((*xCurr--) >> es) - acc1;
 8006658:	eba2 020a 	sub.w	r2, r2, sl
			acc1 = ((*xCurr--) >> es) - acc1;
 800665c:	4101      	asrs	r1, r0
			xPrev[i] >>= es;
 800665e:	f84b 3c0c 	str.w	r3, [fp, #-12]
			acc1 = ((*xCurr--) >> es) - acc1;
 8006662:	1a89      	subs	r1, r1, r2
			acc1 = ((*xCurr--) >> es) - acc1;
 8006664:	f858 3c1c 	ldr.w	r3, [r8, #-28]
			xPrev[i] >>= es;
 8006668:	f85b 0c10 	ldr.w	r0, [fp, #-16]
			acc1 = ((*xCurr--) >> es) - acc1;
 800666c:	9506      	str	r5, [sp, #24]
 800666e:	460f      	mov	r7, r1
 8006670:	f858 5c20 	ldr.w	r5, [r8, #-32]
			xPrev[i] >>= es;
 8006674:	4130      	asrs	r0, r6
			acc1 = ((*xCurr--) >> es) - acc1;
 8006676:	9114      	str	r1, [sp, #80]	; 0x50
			acc1 = ((*xCurr--) >> es) - acc1;
 8006678:	fa43 f106 	asr.w	r1, r3, r6
			xPrev[i] >>= es;
 800667c:	f84b 0c10 	str.w	r0, [fp, #-16]
			acc1 = ((*xCurr--) >> es) - acc1;
 8006680:	fa45 fc06 	asr.w	ip, r5, r6
			acc1 = ((*xCurr--) >> es) - acc1;
 8006684:	f858 3c24 	ldr.w	r3, [r8, #-36]
 8006688:	1bc9      	subs	r1, r1, r7
			xPrev[i] >>= es;
 800668a:	f85b 0c14 	ldr.w	r0, [fp, #-20]
			acc1 = ((*xCurr--) >> es) - acc1;
 800668e:	4637      	mov	r7, r6
 8006690:	fa43 f506 	asr.w	r5, r3, r6
			acc1 = ((*xCurr--) >> es) - acc1;
 8006694:	ebac 0c01 	sub.w	ip, ip, r1
 8006698:	f858 6c28 	ldr.w	r6, [r8, #-40]
			xPrev[i] >>= es;
 800669c:	fa40 f307 	asr.w	r3, r0, r7
			acc1 = ((*xCurr--) >> es) - acc1;
 80066a0:	eba5 0e0c 	sub.w	lr, r5, ip
			xPrev[i] >>= es;
 80066a4:	f85b 0c18 	ldr.w	r0, [fp, #-24]
 80066a8:	f84b 3c14 	str.w	r3, [fp, #-20]
			acc1 = ((*xCurr--) >> es) - acc1;
 80066ac:	413e      	asrs	r6, r7
			acc1 = ((*xCurr--) >> es) - acc1;
 80066ae:	f858 5c2c 	ldr.w	r5, [r8, #-44]
			xPrev[i] >>= es;
 80066b2:	4138      	asrs	r0, r7
			acc1 = ((*xCurr--) >> es) - acc1;
 80066b4:	eba6 030e 	sub.w	r3, r6, lr
			acc1 = ((*xCurr--) >> es) - acc1;
 80066b8:	463e      	mov	r6, r7
 80066ba:	413d      	asrs	r5, r7
			acc2 = acc1 - acc2;
 80066bc:	9f06      	ldr	r7, [sp, #24]
			acc1 = ((*xCurr--) >> es) - acc1;
 80066be:	9308      	str	r3, [sp, #32]
			acc2 = acc1 - acc2;
 80066c0:	1be4      	subs	r4, r4, r7
			acc1 = ((*xCurr--) >> es) - acc1;
 80066c2:	f858 3c30 	ldr.w	r3, [r8, #-48]
			xPrev[i] >>= es;
 80066c6:	f84b 0c18 	str.w	r0, [fp, #-24]
			acc2 = acc1 - acc2;
 80066ca:	1b17      	subs	r7, r2, r4
			acc1 = ((*xCurr--) >> es) - acc1;
 80066cc:	fa43 f906 	asr.w	r9, r3, r6
			acc1 = ((*xCurr--) >> es) - acc1;
 80066d0:	9b08      	ldr	r3, [sp, #32]
			acc2 = acc1 - acc2;
 80066d2:	1bc9      	subs	r1, r1, r7
 80066d4:	940a      	str	r4, [sp, #40]	; 0x28
			acc1 = ((*xCurr--) >> es) - acc1;
 80066d6:	1aed      	subs	r5, r5, r3
 80066d8:	f858 3c34 	ldr.w	r3, [r8, #-52]
			xPrev[i] >>= es;
 80066dc:	f85b 0c1c 	ldr.w	r0, [fp, #-28]
			acc1 = ((*xCurr--) >> es) - acc1;
 80066e0:	4634      	mov	r4, r6
			acc1 = ((*xCurr--) >> es) - acc1;
 80066e2:	f858 2c38 	ldr.w	r2, [r8, #-56]
 80066e6:	eba9 0905 	sub.w	r9, r9, r5
			xPrev[i] >>= es;
 80066ea:	4130      	asrs	r0, r6
			acc1 = ((*xCurr--) >> es) - acc1;
 80066ec:	4133      	asrs	r3, r6
			acc2 = acc1 - acc2;
 80066ee:	460e      	mov	r6, r1
			acc1 = ((*xCurr--) >> es) - acc1;
 80066f0:	4122      	asrs	r2, r4
			xPrev[i] >>= es;
 80066f2:	f84b 0c1c 	str.w	r0, [fp, #-28]
			acc1 = ((*xCurr--) >> es) - acc1;
 80066f6:	eba3 0309 	sub.w	r3, r3, r9
			acc2 = acc1 - acc2;
 80066fa:	ebae 0006 	sub.w	r0, lr, r6
 80066fe:	970c      	str	r7, [sp, #48]	; 0x30
 8006700:	910b      	str	r1, [sp, #44]	; 0x2c
			acc1 = ((*xCurr--) >> es) - acc1;
 8006702:	4627      	mov	r7, r4
			xPrev[i] >>= es;
 8006704:	f85b 1c20 	ldr.w	r1, [fp, #-32]
			acc2 = acc1 - acc2;
 8006708:	4606      	mov	r6, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800670a:	f858 4c3c 	ldr.w	r4, [r8, #-60]
			acc1 = ((*xCurr--) >> es) - acc1;
 800670e:	1ad2      	subs	r2, r2, r3
			xPrev[i] >>= es;
 8006710:	4139      	asrs	r1, r7
			acc2 = acc1 - acc2;
 8006712:	9010      	str	r0, [sp, #64]	; 0x40
			acc1 = ((*xCurr--) >> es) - acc1;
 8006714:	413c      	asrs	r4, r7
			acc1 = ((*xCurr--) >> es) - acc1;
 8006716:	f858 0c40 	ldr.w	r0, [r8, #-64]
			acc2 = acc1 - acc2;
 800671a:	1bae      	subs	r6, r5, r6
			xPrev[i] >>= es;
 800671c:	f84b 1c20 	str.w	r1, [fp, #-32]
			acc1 = ((*xCurr--) >> es) - acc1;
 8006720:	463d      	mov	r5, r7
			acc1 = ((*xCurr--) >> es) - acc1;
 8006722:	1aa4      	subs	r4, r4, r2
			acc1 = ((*xCurr--) >> es) - acc1;
 8006724:	4138      	asrs	r0, r7
 8006726:	f858 1c48 	ldr.w	r1, [r8, #-72]
			acc1 = ((*xCurr--) >> es) - acc1;
 800672a:	f858 7c44 	ldr.w	r7, [r8, #-68]
			acc2 = acc1 - acc2;
 800672e:	1b9b      	subs	r3, r3, r6
			acc1 = ((*xCurr--) >> es) - acc1;
 8006730:	1b00      	subs	r0, r0, r4
 8006732:	4129      	asrs	r1, r5
			acc1 = ((*xCurr--) >> es) - acc1;
 8006734:	412f      	asrs	r7, r5
			acc2 = acc1 - acc2;
 8006736:	9611      	str	r6, [sp, #68]	; 0x44
			acc1 = ((*xCurr--) >> es) - acc1;
 8006738:	462e      	mov	r6, r5
			xPrev[i] >>= es;
 800673a:	f85b 5c24 	ldr.w	r5, [fp, #-36]
			acc1 = ((*xCurr--) >> es) - acc1;
 800673e:	1a3f      	subs	r7, r7, r0
			acc2 = acc1 - acc2;
 8006740:	931a      	str	r3, [sp, #104]	; 0x68
			xPrev[i] >>= es;
 8006742:	4135      	asrs	r5, r6
			acc2 = acc1 - acc2;
 8006744:	1ae3      	subs	r3, r4, r3
			acc1 = ((*xCurr--) >> es) - acc1;
 8006746:	1bc9      	subs	r1, r1, r7
			acc2 = acc1 - acc2;
 8006748:	9307      	str	r3, [sp, #28]
 800674a:	1afc      	subs	r4, r7, r3
			xPrev[i] >>= es;
 800674c:	f84b 5c24 	str.w	r5, [fp, #-36]
 8006750:	e498      	b.n	8006084 <xmp3fixpt_IMDCT+0xfa0>
 8006752:	bf00      	nop
 8006754:	4d413ccc 	.word	0x4d413ccc
 8006758:	68d9f964 	.word	0x68d9f964
 800675c:	e7dbc161 	.word	0xe7dbc161
 8006760:	7401e4c1 	.word	0x7401e4c1
 8006764:	ef7a6275 	.word	0xef7a6275
 8006768:	7ba3751d 	.word	0x7ba3751d
 800676c:	47311c28 	.word	0x47311c28
 8006770:	f6a09e67 	.word	0xf6a09e67
 8006774:	7f834ed0 	.word	0x7f834ed0
 8006778:	42aace8b 	.word	0x42aace8b
 800677c:	fd16d8dd 	.word	0xfd16d8dd
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8006780:	49ca      	ldr	r1, [pc, #808]	; (8006aac <xmp3fixpt_IMDCT+0x19c8>)
 8006782:	f85b 4c24 	ldr.w	r4, [fp, #-36]
 8006786:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800678a:	4625      	mov	r5, r4
 800678c:	6c88      	ldr	r0, [r1, #72]	; 0x48
 800678e:	fb80 6505 	smull	r6, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8006792:	953a      	str	r5, [sp, #232]	; 0xe8
 8006794:	fb82 0404 	smull	r0, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 8006798:	944b      	str	r4, [sp, #300]	; 0x12c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800679a:	f85b 4c20 	ldr.w	r4, [fp, #-32]
 800679e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80067a2:	4625      	mov	r5, r4
 80067a4:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80067a6:	fb80 6505 	smull	r6, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 80067aa:	953b      	str	r5, [sp, #236]	; 0xec
 80067ac:	fb82 0404 	smull	r0, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 80067b0:	944a      	str	r4, [sp, #296]	; 0x128
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80067b2:	f85b 4c1c 	ldr.w	r4, [fp, #-28]
 80067b6:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
 80067ba:	4625      	mov	r5, r4
 80067bc:	6d08      	ldr	r0, [r1, #80]	; 0x50
 80067be:	fb80 6505 	smull	r6, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 80067c2:	953c      	str	r5, [sp, #240]	; 0xf0
 80067c4:	fb82 0404 	smull	r0, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 80067c8:	9449      	str	r4, [sp, #292]	; 0x124
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80067ca:	f85b 4c18 	ldr.w	r4, [fp, #-24]
 80067ce:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 80067d2:	4625      	mov	r5, r4
 80067d4:	6d48      	ldr	r0, [r1, #84]	; 0x54
 80067d6:	fb80 6505 	smull	r6, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 80067da:	953d      	str	r5, [sp, #244]	; 0xf4
 80067dc:	fb82 0404 	smull	r0, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 80067e0:	9448      	str	r4, [sp, #288]	; 0x120
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80067e2:	f85b 4c14 	ldr.w	r4, [fp, #-20]
 80067e6:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 80067e8:	4625      	mov	r5, r4
 80067ea:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80067ec:	fb80 6505 	smull	r6, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 80067f0:	953e      	str	r5, [sp, #248]	; 0xf8
 80067f2:	fb82 0404 	smull	r0, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 80067f6:	9447      	str	r4, [sp, #284]	; 0x11c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80067f8:	f85b 4c10 	ldr.w	r4, [fp, #-16]
 80067fc:	6f8a      	ldr	r2, [r1, #120]	; 0x78
 80067fe:	4625      	mov	r5, r4
 8006800:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
 8006802:	fb80 6505 	smull	r6, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8006806:	953f      	str	r5, [sp, #252]	; 0xfc
 8006808:	fb82 0404 	smull	r0, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 800680c:	9446      	str	r4, [sp, #280]	; 0x118
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800680e:	f85b 4c0c 	ldr.w	r4, [fp, #-12]
 8006812:	6f4a      	ldr	r2, [r1, #116]	; 0x74
 8006814:	4625      	mov	r5, r4
 8006816:	6e08      	ldr	r0, [r1, #96]	; 0x60
 8006818:	fb80 6505 	smull	r6, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 800681c:	9540      	str	r5, [sp, #256]	; 0x100
 800681e:	fb82 0404 	smull	r0, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 8006822:	9445      	str	r4, [sp, #276]	; 0x114
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8006824:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 8006828:	6f0a      	ldr	r2, [r1, #112]	; 0x70
 800682a:	4625      	mov	r5, r4
 800682c:	6e48      	ldr	r0, [r1, #100]	; 0x64
 800682e:	fb80 6505 	smull	r6, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8006832:	9541      	str	r5, [sp, #260]	; 0x104
 8006834:	fb82 0404 	smull	r0, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 8006838:	9444      	str	r4, [sp, #272]	; 0x110
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800683a:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 800683e:	6eca      	ldr	r2, [r1, #108]	; 0x6c
 8006840:	4625      	mov	r5, r4
 8006842:	6e88      	ldr	r0, [r1, #104]	; 0x68
 8006844:	fb80 6505 	smull	r6, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8006848:	9542      	str	r5, [sp, #264]	; 0x108
 800684a:	fb82 0404 	smull	r0, r4, r2, r4
		wp = imdctWin[btCurr];
 800684e:	9a15      	ldr	r2, [sp, #84]	; 0x54
			*xpwHi-- = MULSHIFT32(wHi, x);
 8006850:	9443      	str	r4, [sp, #268]	; 0x10c
		wp = imdctWin[btCurr];
 8006852:	eb02 06c2 	add.w	r6, r2, r2, lsl #3
 8006856:	4a96      	ldr	r2, [pc, #600]	; (8006ab0 <xmp3fixpt_IMDCT+0x19cc>)
 8006858:	0136      	lsls	r6, r6, #4
 800685a:	1988      	adds	r0, r1, r6
 800685c:	fb82 4303 	smull	r4, r3, r2, r3
			xe >>= 2;
 8006860:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006862:	1092      	asrs	r2, r2, #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006864:	189c      	adds	r4, r3, r2
			d = xe - xo;
 8006866:	1ad2      	subs	r2, r2, r3
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006868:	f84b 4c24 	str.w	r4, [fp, #-36]
 800686c:	5989      	ldr	r1, [r1, r6]
 800686e:	fb82 3101 	smull	r3, r1, r2, r1
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8006872:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8006874:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006876:	440b      	add	r3, r1
 8006878:	4621      	mov	r1, r4
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	fb82 4101 	smull	r4, r1, r2, r1
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006880:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
	sign = x >> (sizeof(int) * 8 - 1);
 8006882:	17dc      	asrs	r4, r3, #31
			y[(i)*NBANDS]    = yLo;
 8006884:	9f01      	ldr	r7, [sp, #4]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006886:	440a      	add	r2, r1
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006888:	4d8a      	ldr	r5, [pc, #552]	; (8006ab4 <xmp3fixpt_IMDCT+0x19d0>)
			y[(i)*NBANDS]    = yLo;
 800688a:	603b      	str	r3, [r7, #0]
	x ^= sign;
 800688c:	4063      	eors	r3, r4
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 800688e:	0092      	lsls	r2, r2, #2
	x -= sign;
 8006890:	1b1b      	subs	r3, r3, r4
	sign = x >> (sizeof(int) * 8 - 1);
 8006892:	17d6      	asrs	r6, r2, #31
			y[(17-i)*NBANDS] = yHi;
 8006894:	f8c7 2880 	str.w	r2, [r7, #2176]	; 0x880
	x ^= sign;
 8006898:	4072      	eors	r2, r6
	x -= sign;
 800689a:	1b92      	subs	r2, r2, r6
			mOut |= FASTABS(yHi);
 800689c:	ea43 0402 	orr.w	r4, r3, r2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80068a0:	fb85 3c0c 	smull	r3, ip, r5, ip
			xe >>= 2;
 80068a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80068a6:	109f      	asrs	r7, r3, #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80068a8:	eb0c 0307 	add.w	r3, ip, r7
			d = xe - xo;
 80068ac:	eba7 0c0c 	sub.w	ip, r7, ip
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80068b0:	f84b 3c20 	str.w	r3, [fp, #-32]
 80068b4:	6842      	ldr	r2, [r0, #4]
 80068b6:	fb8c 3202 	smull	r3, r2, ip, r2
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 80068ba:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80068bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	fb8c 2101 	smull	r2, r1, ip, r1
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 80068c6:	9a4a      	ldr	r2, [sp, #296]	; 0x128
	sign = x >> (sizeof(int) * 8 - 1);
 80068c8:	17dd      	asrs	r5, r3, #31
			y[(i)*NBANDS]    = yLo;
 80068ca:	9f01      	ldr	r7, [sp, #4]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 80068cc:	440a      	add	r2, r1
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80068ce:	9e08      	ldr	r6, [sp, #32]
			y[(i)*NBANDS]    = yLo;
 80068d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	x ^= sign;
 80068d4:	406b      	eors	r3, r5
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 80068d6:	0092      	lsls	r2, r2, #2
	x -= sign;
 80068d8:	1b5b      	subs	r3, r3, r5
	sign = x >> (sizeof(int) * 8 - 1);
 80068da:	17d7      	asrs	r7, r2, #31
			mOut |= FASTABS(yLo);
 80068dc:	4323      	orrs	r3, r4
			y[(17-i)*NBANDS] = yHi;
 80068de:	9c01      	ldr	r4, [sp, #4]
 80068e0:	f8c4 2800 	str.w	r2, [r4, #2048]	; 0x800
	x ^= sign;
 80068e4:	407a      	eors	r2, r7
	x -= sign;
 80068e6:	1bd2      	subs	r2, r2, r7
			mOut |= FASTABS(yHi);
 80068e8:	ea42 0403 	orr.w	r4, r2, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80068ec:	4a72      	ldr	r2, [pc, #456]	; (8006ab8 <xmp3fixpt_IMDCT+0x19d4>)
 80068ee:	fb82 3606 	smull	r3, r6, r2, r6
			xe >>= 2;
 80068f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068f4:	1099      	asrs	r1, r3, #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80068f6:	1873      	adds	r3, r6, r1
			d = xe - xo;
 80068f8:	1b8e      	subs	r6, r1, r6
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80068fa:	f84b 3c1c 	str.w	r3, [fp, #-28]
 80068fe:	6882      	ldr	r2, [r0, #8]
 8006900:	fb86 3202 	smull	r3, r2, r6, r2
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8006904:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8006906:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006908:	4413      	add	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	fb86 2101 	smull	r2, r1, r6, r1
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006910:	9a49      	ldr	r2, [sp, #292]	; 0x124
	sign = x >> (sizeof(int) * 8 - 1);
 8006912:	17dd      	asrs	r5, r3, #31
			y[(i)*NBANDS]    = yLo;
 8006914:	9e01      	ldr	r6, [sp, #4]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006916:	440a      	add	r2, r1
			y[(17-i)*NBANDS] = yHi;
 8006918:	9901      	ldr	r1, [sp, #4]
			y[(i)*NBANDS]    = yLo;
 800691a:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
	x ^= sign;
 800691e:	406b      	eors	r3, r5
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006920:	0092      	lsls	r2, r2, #2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006922:	4e66      	ldr	r6, [pc, #408]	; (8006abc <xmp3fixpt_IMDCT+0x19d8>)
	x -= sign;
 8006924:	1b5b      	subs	r3, r3, r5
	sign = x >> (sizeof(int) * 8 - 1);
 8006926:	17d7      	asrs	r7, r2, #31
			y[(17-i)*NBANDS] = yHi;
 8006928:	f8c1 2780 	str.w	r2, [r1, #1920]	; 0x780
			mOut |= FASTABS(yLo);
 800692c:	4323      	orrs	r3, r4
	x ^= sign;
 800692e:	407a      	eors	r2, r7
	x -= sign;
 8006930:	1bd2      	subs	r2, r2, r7
			mOut |= FASTABS(yHi);
 8006932:	ea42 0403 	orr.w	r4, r2, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006936:	fb86 3909 	smull	r3, r9, r6, r9
			xe >>= 2;
 800693a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800693c:	109a      	asrs	r2, r3, #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800693e:	eb09 0302 	add.w	r3, r9, r2
			d = xe - xo;
 8006942:	eba2 0909 	sub.w	r9, r2, r9
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006946:	f84b 3c18 	str.w	r3, [fp, #-24]
 800694a:	68c2      	ldr	r2, [r0, #12]
 800694c:	fb89 3202 	smull	r3, r2, r9, r2
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8006950:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8006952:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8006954:	441a      	add	r2, r3
 8006956:	0092      	lsls	r2, r2, #2
 8006958:	fb89 3505 	smull	r3, r5, r9, r5
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 800695c:	9948      	ldr	r1, [sp, #288]	; 0x120
	sign = x >> (sizeof(int) * 8 - 1);
 800695e:	17d6      	asrs	r6, r2, #31
			y[(i)*NBANDS]    = yLo;
 8006960:	9f01      	ldr	r7, [sp, #4]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006962:	4429      	add	r1, r5
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			y[(i)*NBANDS]    = yLo;
 8006966:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
	x ^= sign;
 800696a:	4072      	eors	r2, r6
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 800696c:	0089      	lsls	r1, r1, #2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800696e:	4f54      	ldr	r7, [pc, #336]	; (8006ac0 <xmp3fixpt_IMDCT+0x19dc>)
	x -= sign;
 8006970:	1b92      	subs	r2, r2, r6
			y[(17-i)*NBANDS] = yHi;
 8006972:	9e01      	ldr	r6, [sp, #4]
	sign = x >> (sizeof(int) * 8 - 1);
 8006974:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8006978:	f8c6 1700 	str.w	r1, [r6, #1792]	; 0x700
			mOut |= FASTABS(yLo);
 800697c:	4322      	orrs	r2, r4
	x ^= sign;
 800697e:	ea81 010c 	eor.w	r1, r1, ip
	x -= sign;
 8006982:	eba1 010c 	sub.w	r1, r1, ip
			mOut |= FASTABS(yHi);
 8006986:	ea41 0402 	orr.w	r4, r1, r2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800698a:	fb87 2303 	smull	r2, r3, r7, r3
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800698e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006990:	18ca      	adds	r2, r1, r3
			d = xe - xo;
 8006992:	1acd      	subs	r5, r1, r3
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006994:	f84b 2c14 	str.w	r2, [fp, #-20]
 8006998:	6903      	ldr	r3, [r0, #16]
 800699a:	fb85 2303 	smull	r2, r3, r5, r3
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 800699e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80069a0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80069a2:	441a      	add	r2, r3
 80069a4:	0092      	lsls	r2, r2, #2
 80069a6:	fb85 3101 	smull	r3, r1, r5, r1
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 80069aa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
	sign = x >> (sizeof(int) * 8 - 1);
 80069ac:	17d5      	asrs	r5, r2, #31
			y[(i)*NBANDS]    = yLo;
 80069ae:	f8c6 2200 	str.w	r2, [r6, #512]	; 0x200
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 80069b2:	440b      	add	r3, r1
	x ^= sign;
 80069b4:	406a      	eors	r2, r5
			y[(17-i)*NBANDS] = yHi;
 80069b6:	9901      	ldr	r1, [sp, #4]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 80069b8:	009b      	lsls	r3, r3, #2
	x -= sign;
 80069ba:	1b52      	subs	r2, r2, r5
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80069bc:	4e41      	ldr	r6, [pc, #260]	; (8006ac4 <xmp3fixpt_IMDCT+0x19e0>)
	sign = x >> (sizeof(int) * 8 - 1);
 80069be:	17df      	asrs	r7, r3, #31
			y[(17-i)*NBANDS] = yHi;
 80069c0:	f8c1 3680 	str.w	r3, [r1, #1664]	; 0x680
			mOut |= FASTABS(yLo);
 80069c4:	4322      	orrs	r2, r4
	x ^= sign;
 80069c6:	407b      	eors	r3, r7
	x -= sign;
 80069c8:	1bdb      	subs	r3, r3, r7
			mOut |= FASTABS(yHi);
 80069ca:	431a      	orrs	r2, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80069cc:	fb86 3a0a 	smull	r3, sl, r6, sl
			xe >>= 2;
 80069d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069d2:	1099      	asrs	r1, r3, #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80069d4:	eb0a 0301 	add.w	r3, sl, r1
			d = xe - xo;
 80069d8:	eba1 0a0a 	sub.w	sl, r1, sl
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80069dc:	f84b 3c10 	str.w	r3, [fp, #-16]
 80069e0:	6941      	ldr	r1, [r0, #20]
 80069e2:	fb8a 3101 	smull	r3, r1, sl, r1
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 80069e6:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80069e8:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80069ea:	440b      	add	r3, r1
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	fb8a 1505 	smull	r1, r5, sl, r5
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 80069f2:	9c46      	ldr	r4, [sp, #280]	; 0x118
	sign = x >> (sizeof(int) * 8 - 1);
 80069f4:	17de      	asrs	r6, r3, #31
			y[(i)*NBANDS]    = yLo;
 80069f6:	9f01      	ldr	r7, [sp, #4]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 80069f8:	442c      	add	r4, r5
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80069fa:	9907      	ldr	r1, [sp, #28]
			y[(i)*NBANDS]    = yLo;
 80069fc:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
	x ^= sign;
 8006a00:	4073      	eors	r3, r6
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006a02:	00a4      	lsls	r4, r4, #2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006a04:	4f30      	ldr	r7, [pc, #192]	; (8006ac8 <xmp3fixpt_IMDCT+0x19e4>)
	x -= sign;
 8006a06:	1b9b      	subs	r3, r3, r6
	sign = x >> (sizeof(int) * 8 - 1);
 8006a08:	ea4f 7ce4 	mov.w	ip, r4, asr #31
			mOut |= FASTABS(yLo);
 8006a0c:	431a      	orrs	r2, r3
			y[(17-i)*NBANDS] = yHi;
 8006a0e:	9b01      	ldr	r3, [sp, #4]
 8006a10:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	x ^= sign;
 8006a14:	ea84 040c 	eor.w	r4, r4, ip
	x -= sign;
 8006a18:	eba4 040c 	sub.w	r4, r4, ip
			mOut |= FASTABS(yHi);
 8006a1c:	4322      	orrs	r2, r4
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006a1e:	fb87 3101 	smull	r3, r1, r7, r1
			xe >>= 2;
 8006a22:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8006a24:	10a4      	asrs	r4, r4, #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006a26:	190b      	adds	r3, r1, r4
			d = xe - xo;
 8006a28:	1a61      	subs	r1, r4, r1
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006a2a:	f84b 3c0c 	str.w	r3, [fp, #-12]
 8006a2e:	6983      	ldr	r3, [r0, #24]
 8006a30:	fb81 4303 	smull	r4, r3, r1, r3
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8006a34:	9d40      	ldr	r5, [sp, #256]	; 0x100
 8006a36:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006a38:	441d      	add	r5, r3
 8006a3a:	00ad      	lsls	r5, r5, #2
 8006a3c:	fb81 3404 	smull	r3, r4, r1, r4
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006a40:	9b45      	ldr	r3, [sp, #276]	; 0x114
	sign = x >> (sizeof(int) * 8 - 1);
 8006a42:	17e9      	asrs	r1, r5, #31
			y[(i)*NBANDS]    = yLo;
 8006a44:	9f01      	ldr	r7, [sp, #4]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006a46:	4423      	add	r3, r4
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006a48:	9e06      	ldr	r6, [sp, #24]
			y[(i)*NBANDS]    = yLo;
 8006a4a:	f8c7 5300 	str.w	r5, [r7, #768]	; 0x300
	x ^= sign;
 8006a4e:	404d      	eors	r5, r1
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006a50:	009b      	lsls	r3, r3, #2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006a52:	4f1e      	ldr	r7, [pc, #120]	; (8006acc <xmp3fixpt_IMDCT+0x19e8>)
	x -= sign;
 8006a54:	1a6d      	subs	r5, r5, r1
			y[(17-i)*NBANDS] = yHi;
 8006a56:	9901      	ldr	r1, [sp, #4]
	sign = x >> (sizeof(int) * 8 - 1);
 8006a58:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 8006a5c:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
			mOut |= FASTABS(yLo);
 8006a60:	432a      	orrs	r2, r5
	x ^= sign;
 8006a62:	ea83 030c 	eor.w	r3, r3, ip
	x -= sign;
 8006a66:	eba3 030c 	sub.w	r3, r3, ip
			mOut |= FASTABS(yHi);
 8006a6a:	431a      	orrs	r2, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006a6c:	fb87 3606 	smull	r3, r6, r7, r6
			xe >>= 2;
 8006a70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a72:	1099      	asrs	r1, r3, #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006a74:	1873      	adds	r3, r6, r1
			d = xe - xo;
 8006a76:	1b8e      	subs	r6, r1, r6
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006a78:	f84b 3c08 	str.w	r3, [fp, #-8]
 8006a7c:	69c3      	ldr	r3, [r0, #28]
 8006a7e:	fb86 1303 	smull	r1, r3, r6, r3
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8006a82:	9941      	ldr	r1, [sp, #260]	; 0x104
 8006a84:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006a86:	4419      	add	r1, r3
 8006a88:	0089      	lsls	r1, r1, #2
 8006a8a:	fb86 3404 	smull	r3, r4, r6, r4
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006a8e:	9b44      	ldr	r3, [sp, #272]	; 0x110
	sign = x >> (sizeof(int) * 8 - 1);
 8006a90:	17cd      	asrs	r5, r1, #31
			y[(i)*NBANDS]    = yLo;
 8006a92:	9e01      	ldr	r6, [sp, #4]
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006a94:	46f4      	mov	ip, lr
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006a96:	4423      	add	r3, r4
			y[(i)*NBANDS]    = yLo;
 8006a98:	f8c6 1380 	str.w	r1, [r6, #896]	; 0x380
	x ^= sign;
 8006a9c:	4069      	eors	r1, r5
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006a9e:	009b      	lsls	r3, r3, #2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006aa0:	4e0b      	ldr	r6, [pc, #44]	; (8006ad0 <xmp3fixpt_IMDCT+0x19ec>)
	x -= sign;
 8006aa2:	1b49      	subs	r1, r1, r5
	sign = x >> (sizeof(int) * 8 - 1);
 8006aa4:	17df      	asrs	r7, r3, #31
			mOut |= FASTABS(yLo);
 8006aa6:	430a      	orrs	r2, r1
			y[(17-i)*NBANDS] = yHi;
 8006aa8:	9901      	ldr	r1, [sp, #4]
 8006aaa:	e013      	b.n	8006ad4 <xmp3fixpt_IMDCT+0x19f0>
 8006aac:	080238b4 	.word	0x080238b4
 8006ab0:	0b27eb5c 	.word	0x0b27eb5c
 8006ab4:	2120fb83 	.word	0x2120fb83
 8006ab8:	36185aee 	.word	0x36185aee
 8006abc:	496af3e2 	.word	0x496af3e2
 8006ac0:	5a82799a 	.word	0x5a82799a
 8006ac4:	68d9f964 	.word	0x68d9f964
 8006ac8:	7401e4c1 	.word	0x7401e4c1
 8006acc:	7ba3751d 	.word	0x7ba3751d
 8006ad0:	7f834ed0 	.word	0x7f834ed0
 8006ad4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
	x ^= sign;
 8006ad8:	407b      	eors	r3, r7
	x -= sign;
 8006ada:	1bdb      	subs	r3, r3, r7
			mOut |= FASTABS(yHi);
 8006adc:	431a      	orrs	r2, r3
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006ade:	fb86 3c0c 	smull	r3, ip, r6, ip
			xe >>= 2;
 8006ae2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ae4:	ea4f 0aa3 	mov.w	sl, r3, asr #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006ae8:	eb0c 030a 	add.w	r3, ip, sl
			d = xe - xo;
 8006aec:	ebaa 050c 	sub.w	r5, sl, ip
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8006af0:	f84b 3c04 	str.w	r3, [fp, #-4]
 8006af4:	6a03      	ldr	r3, [r0, #32]
 8006af6:	461c      	mov	r4, r3
 8006af8:	fb85 3404 	smull	r3, r4, r5, r4
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8006afc:	9942      	ldr	r1, [sp, #264]	; 0x108
 8006afe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b00:	4421      	add	r1, r4
 8006b02:	0089      	lsls	r1, r1, #2
 8006b04:	fb85 0303 	smull	r0, r3, r5, r3
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006b08:	9843      	ldr	r0, [sp, #268]	; 0x10c
	sign = x >> (sizeof(int) * 8 - 1);
 8006b0a:	17cc      	asrs	r4, r1, #31
			y[(i)*NBANDS]    = yLo;
 8006b0c:	9d01      	ldr	r5, [sp, #4]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006b0e:	4403      	add	r3, r0
			y[(i)*NBANDS]    = yLo;
 8006b10:	f8c5 1400 	str.w	r1, [r5, #1024]	; 0x400
	x ^= sign;
 8006b14:	4061      	eors	r1, r4
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8006b16:	009b      	lsls	r3, r3, #2
			y[(i)*NBANDS]    = yLo;
 8006b18:	462e      	mov	r6, r5
	x -= sign;
 8006b1a:	1b0c      	subs	r4, r1, r4
	sign = x >> (sizeof(int) * 8 - 1);
 8006b1c:	17d9      	asrs	r1, r3, #31
			y[(17-i)*NBANDS] = yHi;
 8006b1e:	f8c5 3480 	str.w	r3, [r5, #1152]	; 0x480
			mOut |= FASTABS(yLo);
 8006b22:	4322      	orrs	r2, r4
	x ^= sign;
 8006b24:	ea83 0401 	eor.w	r4, r3, r1
	x -= sign;
 8006b28:	1a64      	subs	r4, r4, r1
			mOut |= FASTABS(yHi);
 8006b2a:	4314      	orrs	r4, r2
 8006b2c:	e540      	b.n	80065b0 <xmp3fixpt_IMDCT+0x14cc>
 8006b2e:	9a03      	ldr	r2, [sp, #12]
 8006b30:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006b32:	428a      	cmp	r2, r1
 8006b34:	f6fe ac66 	blt.w	8005404 <xmp3fixpt_IMDCT+0x320>
 8006b38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006b3c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8006b40:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006b44:	9218      	str	r2, [sp, #96]	; 0x60
 8006b46:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8006b48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b4c:	932c      	str	r3, [sp, #176]	; 0xb0
	for (   ; i < bc->nBlocksTotal; i++) {
 8006b4e:	9b04      	ldr	r3, [sp, #16]
 8006b50:	4619      	mov	r1, r3
 8006b52:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b54:	4299      	cmp	r1, r3
 8006b56:	f341 830b 	ble.w	8008170 <xmp3fixpt_IMDCT+0x308c>
 8006b5a:	9a05      	ldr	r2, [sp, #20]
 8006b5c:	2a06      	cmp	r2, #6
		es = 7 - gb;
 8006b5e:	f1c2 0207 	rsb	r2, r2, #7
 8006b62:	922d      	str	r2, [sp, #180]	; 0xb4
 8006b64:	bfc8      	it	gt
 8006b66:	2200      	movgt	r2, #0
 8006b68:	9213      	str	r2, [sp, #76]	; 0x4c
 8006b6a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	f300 8337 	bgt.w	80071e0 <xmp3fixpt_IMDCT+0x20fc>
 8006b72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8006b74:	f8df a664 	ldr.w	sl, [pc, #1636]	; 80071dc <xmp3fixpt_IMDCT+0x20f8>
 8006b78:	4619      	mov	r1, r3
 8006b7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006b80:	f101 0b24 	add.w	fp, r1, #36	; 0x24
		wpLo = imdctWin[btPrev] + 18;
 8006b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006b86:	46d1      	mov	r9, sl
 8006b88:	f102 0848 	add.w	r8, r2, #72	; 0x48
 8006b8c:	9901      	ldr	r1, [sp, #4]
 8006b8e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8006b92:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8006b94:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
 8006b98:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006b9c:	9325      	str	r3, [sp, #148]	; 0x94
 8006b9e:	4692      	mov	sl, r2
 8006ba0:	e1c5      	b.n	8006f2e <xmp3fixpt_IMDCT+0x1e4a>
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8006ba2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8006ba4:	f85b 0c24 	ldr.w	r0, [fp, #-36]
 8006ba8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006bac:	4603      	mov	r3, r0
 8006bae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006bb0:	fb81 5303 	smull	r5, r3, r1, r3
			*xpwLo++ = MULSHIFT32(wLo, x);
 8006bb4:	933a      	str	r3, [sp, #232]	; 0xe8
 8006bb6:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 8006bba:	904b      	str	r0, [sp, #300]	; 0x12c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8006bbc:	f85b 0c20 	ldr.w	r0, [fp, #-32]
 8006bc0:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006bc8:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8006bcc:	953b      	str	r5, [sp, #236]	; 0xec
 8006bce:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 8006bd2:	904a      	str	r0, [sp, #296]	; 0x128
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8006bd4:	f85b 0c1c 	ldr.w	r0, [fp, #-28]
 8006bd8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006bdc:	4605      	mov	r5, r0
 8006bde:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006be0:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8006be4:	953c      	str	r5, [sp, #240]	; 0xf0
 8006be6:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 8006bea:	9049      	str	r0, [sp, #292]	; 0x124
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8006bec:	f85b 0c18 	ldr.w	r0, [fp, #-24]
 8006bf0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006bf8:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8006bfc:	953d      	str	r5, [sp, #244]	; 0xf4
 8006bfe:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 8006c02:	9048      	str	r0, [sp, #288]	; 0x120
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8006c04:	f85b 0c14 	ldr.w	r0, [fp, #-20]
 8006c08:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006c0a:	4605      	mov	r5, r0
 8006c0c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006c0e:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8006c12:	953e      	str	r5, [sp, #248]	; 0xf8
 8006c14:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 8006c18:	9047      	str	r0, [sp, #284]	; 0x11c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8006c1a:	f85b 0c10 	ldr.w	r0, [fp, #-16]
 8006c1e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006c20:	4605      	mov	r5, r0
 8006c22:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006c24:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8006c28:	953f      	str	r5, [sp, #252]	; 0xfc
 8006c2a:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 8006c2e:	9046      	str	r0, [sp, #280]	; 0x118
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8006c30:	f85b 0c0c 	ldr.w	r0, [fp, #-12]
 8006c34:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006c36:	4605      	mov	r5, r0
 8006c38:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8006c3a:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8006c3e:	9540      	str	r5, [sp, #256]	; 0x100
 8006c40:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 8006c44:	9045      	str	r0, [sp, #276]	; 0x114
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8006c46:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 8006c4a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006c50:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8006c54:	9541      	str	r5, [sp, #260]	; 0x104
 8006c56:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 8006c5a:	9044      	str	r0, [sp, #272]	; 0x110
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8006c5c:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 8006c60:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006c62:	4605      	mov	r5, r0
 8006c64:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8006c66:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8006c6a:	9542      	str	r5, [sp, #264]	; 0x108
 8006c6c:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 8006c70:	9043      	str	r0, [sp, #268]	; 0x10c
		yLo = (xPrevWin[ 0+i] << 2);
 8006c72:	009b      	lsls	r3, r3, #2
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8006c74:	f8d9 5120 	ldr.w	r5, [r9, #288]	; 0x120
 8006c78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 8006c7a:	f84a 3b04 	str.w	r3, [sl], #4
	sign = x >> (sizeof(int) * 8 - 1);
 8006c7e:	17d8      	asrs	r0, r3, #31
		yLo = (xPrevWin[ 3+i] << 2);
 8006c80:	993d      	ldr	r1, [sp, #244]	; 0xf4
	x ^= sign;
 8006c82:	4043      	eors	r3, r0
 8006c84:	0089      	lsls	r1, r1, #2
	x -= sign;
 8006c86:	1a1b      	subs	r3, r3, r0
	sign = x >> (sizeof(int) * 8 - 1);
 8006c88:	17cf      	asrs	r7, r1, #31
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 8006c8a:	f8ca 117c 	str.w	r1, [sl, #380]	; 0x17c
	x -= sign;
 8006c8e:	9312      	str	r3, [sp, #72]	; 0x48
	x ^= sign;
 8006c90:	4079      	eors	r1, r7
 8006c92:	9114      	str	r1, [sp, #80]	; 0x50
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006c94:	fb85 3202 	smull	r3, r2, r5, r2
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8006c98:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8006c9a:	9803      	ldr	r0, [sp, #12]
 8006c9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8006ca0:	f8d9 112c 	ldr.w	r1, [r9, #300]	; 0x12c
	sign = x >> (sizeof(int) * 8 - 1);
 8006ca4:	17de      	asrs	r6, r3, #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 8006ca6:	f8ca 32fc 	str.w	r3, [sl, #764]	; 0x2fc
	x ^= sign;
 8006caa:	4073      	eors	r3, r6
	x -= sign;
 8006cac:	1b9a      	subs	r2, r3, r6
 8006cae:	9210      	str	r2, [sp, #64]	; 0x40
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006cb0:	fb81 3000 	smull	r3, r0, r1, r0
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8006cb4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8006cb6:	9e07      	ldr	r6, [sp, #28]
 8006cb8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006cbc:	f8d9 3138 	ldr.w	r3, [r9, #312]	; 0x138
	sign = x >> (sizeof(int) * 8 - 1);
 8006cc0:	ea4f 7ce2 	mov.w	ip, r2, asr #31
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 8006cc4:	f8ca 247c 	str.w	r2, [sl, #1148]	; 0x47c
	x ^= sign;
 8006cc8:	ea8c 0202 	eor.w	r2, ip, r2
	x -= sign;
 8006ccc:	eba2 000c 	sub.w	r0, r2, ip
 8006cd0:	9024      	str	r0, [sp, #144]	; 0x90
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006cd2:	fb83 2606 	smull	r2, r6, r3, r6
 8006cd6:	9b06      	ldr	r3, [sp, #24]
 8006cd8:	fb85 2303 	smull	r2, r3, r5, r3
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 8006cdc:	441e      	add	r6, r3
 8006cde:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8006ce0:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
 8006ce4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006ce8:	980a      	ldr	r0, [sp, #40]	; 0x28
	sign = x >> (sizeof(int) * 8 - 1);
 8006cea:	17d5      	asrs	r5, r2, #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 8006cec:	f8ca 25fc 	str.w	r2, [sl, #1532]	; 0x5fc
	x ^= sign;
 8006cf0:	406a      	eors	r2, r5
	x -= sign;
 8006cf2:	1b56      	subs	r6, r2, r5
 8006cf4:	9623      	str	r6, [sp, #140]	; 0x8c
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006cf6:	fb83 2000 	smull	r2, r0, r3, r0
 8006cfa:	9a08      	ldr	r2, [sp, #32]
 8006cfc:	fb81 3202 	smull	r3, r2, r1, r2
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 8006d00:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8006d02:	4402      	add	r2, r0
 8006d04:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8006d08:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8006d0c:	f8d9 4124 	ldr.w	r4, [r9, #292]	; 0x124
 8006d10:	4665      	mov	r5, ip
	sign = x >> (sizeof(int) * 8 - 1);
 8006d12:	17d1      	asrs	r1, r2, #31
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 8006d14:	f8ca 277c 	str.w	r2, [sl, #1916]	; 0x77c
		yLo = (xPrevWin[ 0+i] << 2);
 8006d18:	9b3b      	ldr	r3, [sp, #236]	; 0xec
	x ^= sign;
 8006d1a:	404a      	eors	r2, r1
 8006d1c:	009b      	lsls	r3, r3, #2
	x -= sign;
 8006d1e:	1a51      	subs	r1, r2, r1
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 8006d20:	f8ca 307c 	str.w	r3, [sl, #124]	; 0x7c
 8006d24:	9122      	str	r1, [sp, #136]	; 0x88
	sign = x >> (sizeof(int) * 8 - 1);
 8006d26:	17d9      	asrs	r1, r3, #31
 8006d28:	460e      	mov	r6, r1
		yLo = (xPrevWin[ 3+i] << 2);
 8006d2a:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8006d2c:	0089      	lsls	r1, r1, #2
	x ^= sign;
 8006d2e:	9611      	str	r6, [sp, #68]	; 0x44
 8006d30:	4073      	eors	r3, r6
	sign = x >> (sizeof(int) * 8 - 1);
 8006d32:	ea4f 7ee1 	mov.w	lr, r1, asr #31
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 8006d36:	f8ca 11fc 	str.w	r1, [sl, #508]	; 0x1fc
	x ^= sign;
 8006d3a:	ea8e 0101 	eor.w	r1, lr, r1
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006d3e:	fb84 2505 	smull	r2, r5, r4, r5
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8006d42:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006d44:	4662      	mov	r2, ip
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8006d46:	f8d9 6130 	ldr.w	r6, [r9, #304]	; 0x130
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8006d4a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8006d4e:	960e      	str	r6, [sp, #56]	; 0x38
	sign = x >> (sizeof(int) * 8 - 1);
 8006d50:	17c6      	asrs	r6, r0, #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 8006d52:	f8ca 037c 	str.w	r0, [sl, #892]	; 0x37c
	x ^= sign;
 8006d56:	4070      	eors	r0, r6
	x -= sign;
 8006d58:	1b85      	subs	r5, r0, r6
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006d5a:	980e      	ldr	r0, [sp, #56]	; 0x38
	x -= sign;
 8006d5c:	9518      	str	r5, [sp, #96]	; 0x60
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006d5e:	4684      	mov	ip, r0
 8006d60:	fb8c 0202 	smull	r0, r2, ip, r2
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8006d64:	9d44      	ldr	r5, [sp, #272]	; 0x110
 8006d66:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8006d6a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8006d6e:	f8d9 013c 	ldr.w	r0, [r9, #316]	; 0x13c
	sign = x >> (sizeof(int) * 8 - 1);
 8006d72:	17d6      	asrs	r6, r2, #31
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 8006d74:	f8ca 24fc 	str.w	r2, [sl, #1276]	; 0x4fc
	x ^= sign;
 8006d78:	4072      	eors	r2, r6
	x -= sign;
 8006d7a:	1b92      	subs	r2, r2, r6
 8006d7c:	9217      	str	r2, [sp, #92]	; 0x5c
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006d7e:	fb80 2c0c 	smull	r2, ip, r0, ip
 8006d82:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006d84:	fb84 2000 	smull	r2, r0, r4, r0
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 8006d88:	9e47      	ldr	r6, [sp, #284]	; 0x11c
 8006d8a:	4460      	add	r0, ip
 8006d8c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006d8e:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8006d92:	f8d9 2148 	ldr.w	r2, [r9, #328]	; 0x148
	sign = x >> (sizeof(int) * 8 - 1);
 8006d96:	17c6      	asrs	r6, r0, #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 8006d98:	f8ca 067c 	str.w	r0, [sl, #1660]	; 0x67c
	x ^= sign;
 8006d9c:	4070      	eors	r0, r6
	x -= sign;
 8006d9e:	1b84      	subs	r4, r0, r6
 8006da0:	940d      	str	r4, [sp, #52]	; 0x34
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006da2:	fb82 0505 	smull	r0, r5, r2, r5
 8006da6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006da8:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8006dac:	4614      	mov	r4, r2
 8006dae:	fb84 2c0c 	smull	r2, ip, r4, ip
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 8006db2:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8006db4:	4465      	add	r5, ip
	x -= sign;
 8006db6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006db8:	eba1 0e0e 	sub.w	lr, r1, lr
 8006dbc:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8006dc0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8006dc2:	1b9b      	subs	r3, r3, r6
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8006dc4:	f8d9 2128 	ldr.w	r2, [r9, #296]	; 0x128
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 8006dc8:	f8ca 57fc 	str.w	r5, [sl, #2044]	; 0x7fc
 8006dcc:	1be7      	subs	r7, r4, r7
		yLo = (xPrevWin[ 0+i] << 2);
 8006dce:	993c      	ldr	r1, [sp, #240]	; 0xf0
	sign = x >> (sizeof(int) * 8 - 1);
 8006dd0:	17e8      	asrs	r0, r5, #31
 8006dd2:	433b      	orrs	r3, r7
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006dd4:	9f03      	ldr	r7, [sp, #12]
 8006dd6:	0089      	lsls	r1, r1, #2
	x ^= sign;
 8006dd8:	4045      	eors	r5, r0
 8006dda:	ea43 0e0e 	orr.w	lr, r3, lr
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 8006dde:	f8ca 10fc 	str.w	r1, [sl, #252]	; 0xfc
	x -= sign;
 8006de2:	1a2c      	subs	r4, r5, r0
		yLo = (xPrevWin[ 3+i] << 2);
 8006de4:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
	sign = x >> (sizeof(int) * 8 - 1);
 8006de6:	17c8      	asrs	r0, r1, #31
	x -= sign;
 8006de8:	940c      	str	r4, [sp, #48]	; 0x30
 8006dea:	009b      	lsls	r3, r3, #2
	x ^= sign;
 8006dec:	4041      	eors	r1, r0
	sign = x >> (sizeof(int) * 8 - 1);
 8006dee:	17dd      	asrs	r5, r3, #31
	x -= sign;
 8006df0:	1a09      	subs	r1, r1, r0
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 8006df2:	f8ca 327c 	str.w	r3, [sl, #636]	; 0x27c
	x ^= sign;
 8006df6:	406b      	eors	r3, r5
 8006df8:	ea4e 0e01 	orr.w	lr, lr, r1
	x -= sign;
 8006dfc:	1b5b      	subs	r3, r3, r5
 8006dfe:	ea4e 0603 	orr.w	r6, lr, r3
 8006e02:	960e      	str	r6, [sp, #56]	; 0x38
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006e04:	fb82 3707 	smull	r3, r7, r2, r7
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8006e08:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8006e0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006e0c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8006e10:	f8d9 1134 	ldr.w	r1, [r9, #308]	; 0x134
	sign = x >> (sizeof(int) * 8 - 1);
 8006e14:	17fd      	asrs	r5, r7, #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 8006e16:	f8ca 73fc 	str.w	r7, [sl, #1020]	; 0x3fc
	x ^= sign;
 8006e1a:	406f      	eors	r7, r5
	x -= sign;
 8006e1c:	1b7f      	subs	r7, r7, r5
 8006e1e:	9703      	str	r7, [sp, #12]
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006e20:	fb81 3000 	smull	r3, r0, r1, r0
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8006e24:	9e45      	ldr	r6, [sp, #276]	; 0x114
 8006e26:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006e28:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8006e2c:	f8d9 7140 	ldr.w	r7, [r9, #320]	; 0x140
	sign = x >> (sizeof(int) * 8 - 1);
 8006e30:	17c3      	asrs	r3, r0, #31
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 8006e32:	f8ca 057c 	str.w	r0, [sl, #1404]	; 0x57c
	x ^= sign;
 8006e36:	4058      	eors	r0, r3
	x -= sign;
 8006e38:	1ac0      	subs	r0, r0, r3
 8006e3a:	900a      	str	r0, [sp, #40]	; 0x28
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006e3c:	fb87 0505 	smull	r0, r5, r7, r5
 8006e40:	9808      	ldr	r0, [sp, #32]
 8006e42:	fb82 3000 	smull	r3, r0, r2, r0
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 8006e46:	4428      	add	r0, r5
 8006e48:	9d48      	ldr	r5, [sp, #288]	; 0x120
 8006e4a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8006e4e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8006e52:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
	sign = x >> (sizeof(int) * 8 - 1);
 8006e56:	17c2      	asrs	r2, r0, #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 8006e58:	f8ca 06fc 	str.w	r0, [sl, #1788]	; 0x6fc
	x ^= sign;
 8006e5c:	4050      	eors	r0, r2
	x -= sign;
 8006e5e:	1a86      	subs	r6, r0, r2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8006e60:	fb83 2c0c 	smull	r2, ip, r3, ip
 8006e64:	9d06      	ldr	r5, [sp, #24]
 8006e66:	fb81 3505 	smull	r3, r5, r1, r5
		*xPrev++ = xBuf[i] >> 2;
 8006e6a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 8006e6c:	4465      	add	r5, ip
 8006e6e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8006e70:	f108 0848 	add.w	r8, r8, #72	; 0x48
		*xPrev++ = xBuf[i] >> 2;
 8006e74:	10a4      	asrs	r4, r4, #2
 8006e76:	991b      	ldr	r1, [sp, #108]	; 0x6c
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 8006e78:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		*xPrev++ = xBuf[i] >> 2;
 8006e7c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e7e:	9406      	str	r4, [sp, #24]
 8006e80:	ea4f 0ca1 	mov.w	ip, r1, asr #2
		*xPrev++ = xBuf[i] >> 2;
 8006e84:	9c1c      	ldr	r4, [sp, #112]	; 0x70
		*xPrev++ = xBuf[i] >> 2;
 8006e86:	1092      	asrs	r2, r2, #2
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 8006e88:	f8ca 587c 	str.w	r5, [sl, #2172]	; 0x87c
	sign = x >> (sizeof(int) * 8 - 1);
 8006e8c:	17ef      	asrs	r7, r5, #31
		*xPrev++ = xBuf[i] >> 2;
 8006e8e:	ea4f 0ea4 	mov.w	lr, r4, asr #2
 8006e92:	9c1d      	ldr	r4, [sp, #116]	; 0x74
		*xPrev++ = xBuf[i] >> 2;
 8006e94:	f84b cc24 	str.w	ip, [fp, #-36]
	x ^= sign;
 8006e98:	407d      	eors	r5, r7
		*xPrev++ = xBuf[i] >> 2;
 8006e9a:	ea4f 0ca4 	mov.w	ip, r4, asr #2
		*xPrev++ = xBuf[i] >> 2;
 8006e9e:	9c06      	ldr	r4, [sp, #24]
 8006ea0:	f84b 2c1c 	str.w	r2, [fp, #-28]
	x -= sign;
 8006ea4:	1bed      	subs	r5, r5, r7
 8006ea6:	f84b 4c20 	str.w	r4, [fp, #-32]
 8006eaa:	f10b 0b24 	add.w	fp, fp, #36	; 0x24
		*xPrev++ = xBuf[i] >> 2;
 8006eae:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8006eb0:	f84b ec3c 	str.w	lr, [fp, #-60]
 8006eb4:	10a4      	asrs	r4, r4, #2
 8006eb6:	f84b cc38 	str.w	ip, [fp, #-56]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8006eba:	990f      	ldr	r1, [sp, #60]	; 0x3c
		*xPrev++ = xBuf[i] >> 2;
 8006ebc:	f84b 4c34 	str.w	r4, [fp, #-52]
 8006ec0:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8006ec2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		*xPrev++ = xBuf[i] >> 2;
 8006ec4:	10a2      	asrs	r2, r4, #2
 8006ec6:	9c20      	ldr	r4, [sp, #128]	; 0x80
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8006ec8:	9815      	ldr	r0, [sp, #84]	; 0x54
		*xPrev++ = xBuf[i] >> 2;
 8006eca:	ea4f 0ea4 	mov.w	lr, r4, asr #2
 8006ece:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006ed0:	f84b 2c30 	str.w	r2, [fp, #-48]
 8006ed4:	ea4f 0ca4 	mov.w	ip, r4, asr #2
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8006ed8:	9c01      	ldr	r4, [sp, #4]
		*xPrev++ = xBuf[i] >> 2;
 8006eda:	f84b ec2c 	str.w	lr, [fp, #-44]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8006ede:	4622      	mov	r2, r4
	for (   ; i < bc->nBlocksTotal; i++) {
 8006ee0:	3401      	adds	r4, #1
		*xPrev++ = xBuf[i] >> 2;
 8006ee2:	f84b cc28 	str.w	ip, [fp, #-40]
	for (   ; i < bc->nBlocksTotal; i++) {
 8006ee6:	9401      	str	r4, [sp, #4]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8006ee8:	f7fd fe94 	bl	8004c14 <FreqInvertRescale>
 8006eec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006eee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ef0:	4338      	orrs	r0, r7
 8006ef2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ef4:	9f03      	ldr	r7, [sp, #12]
 8006ef6:	4318      	orrs	r0, r3
 8006ef8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006efa:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006efc:	4310      	orrs	r0, r2
 8006efe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f00:	4318      	orrs	r0, r3
 8006f02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f04:	4310      	orrs	r0, r2
 8006f06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f08:	4310      	orrs	r0, r2
 8006f0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f0c:	4338      	orrs	r0, r7
 8006f0e:	4310      	orrs	r0, r2
 8006f10:	4318      	orrs	r0, r3
 8006f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f14:	4308      	orrs	r0, r1
 8006f16:	4318      	orrs	r0, r3
 8006f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f1a:	4318      	orrs	r0, r3
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 8006f1c:	9b02      	ldr	r3, [sp, #8]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8006f1e:	4306      	orrs	r6, r0
 8006f20:	4335      	orrs	r5, r6
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 8006f22:	432b      	orrs	r3, r5
 8006f24:	9302      	str	r3, [sp, #8]
	for (   ; i < bc->nBlocksTotal; i++) {
 8006f26:	9b04      	ldr	r3, [sp, #16]
 8006f28:	42a3      	cmp	r3, r4
 8006f2a:	f340 84ba 	ble.w	80078a2 <xmp3fixpt_IMDCT+0x27be>
 8006f2e:	f1ab 0324 	sub.w	r3, fp, #36	; 0x24
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 8006f32:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8006f36:	930f      	str	r3, [sp, #60]	; 0x3c
	if (gb < 7) {
 8006f38:	9b05      	ldr	r3, [sp, #20]
 8006f3a:	2b06      	cmp	r3, #6
 8006f3c:	e958 6512 	ldrd	r6, r5, [r8, #-72]	; 0x48
 8006f40:	dc63      	bgt.n	800700a <xmp3fixpt_IMDCT+0x1f26>
			xCurr[i+0] >>= es;
 8006f42:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8006f44:	410e      	asrs	r6, r1
			xCurr[i+1] >>= es;
 8006f46:	410d      	asrs	r5, r1
 8006f48:	e948 6512 	strd	r6, r5, [r8, #-72]	; 0x48
			*xPrev++ >>= es;
 8006f4c:	f85b 3c24 	ldr.w	r3, [fp, #-36]
 8006f50:	410b      	asrs	r3, r1
 8006f52:	f84b 3c24 	str.w	r3, [fp, #-36]
			xCurr[i+1] >>= es;
 8006f56:	e958 2310 	ldrd	r2, r3, [r8, #-64]	; 0x40
			xCurr[i+0] >>= es;
 8006f5a:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 8006f5c:	410b      	asrs	r3, r1
 8006f5e:	e948 2310 	strd	r2, r3, [r8, #-64]	; 0x40
			*xPrev++ >>= es;
 8006f62:	f85b 3c20 	ldr.w	r3, [fp, #-32]
 8006f66:	410b      	asrs	r3, r1
 8006f68:	f84b 3c20 	str.w	r3, [fp, #-32]
			xCurr[i+1] >>= es;
 8006f6c:	e958 230e 	ldrd	r2, r3, [r8, #-56]	; 0x38
			xCurr[i+0] >>= es;
 8006f70:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 8006f72:	410b      	asrs	r3, r1
 8006f74:	e948 230e 	strd	r2, r3, [r8, #-56]	; 0x38
			*xPrev++ >>= es;
 8006f78:	f85b 3c1c 	ldr.w	r3, [fp, #-28]
 8006f7c:	410b      	asrs	r3, r1
 8006f7e:	f84b 3c1c 	str.w	r3, [fp, #-28]
			xCurr[i+1] >>= es;
 8006f82:	e958 230c 	ldrd	r2, r3, [r8, #-48]	; 0x30
			xCurr[i+0] >>= es;
 8006f86:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 8006f88:	410b      	asrs	r3, r1
 8006f8a:	e948 230c 	strd	r2, r3, [r8, #-48]	; 0x30
			*xPrev++ >>= es;
 8006f8e:	f85b 3c18 	ldr.w	r3, [fp, #-24]
 8006f92:	410b      	asrs	r3, r1
 8006f94:	f84b 3c18 	str.w	r3, [fp, #-24]
			xCurr[i+1] >>= es;
 8006f98:	e958 230a 	ldrd	r2, r3, [r8, #-40]	; 0x28
			xCurr[i+0] >>= es;
 8006f9c:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 8006f9e:	410b      	asrs	r3, r1
 8006fa0:	e948 230a 	strd	r2, r3, [r8, #-40]	; 0x28
			*xPrev++ >>= es;
 8006fa4:	f85b 3c14 	ldr.w	r3, [fp, #-20]
 8006fa8:	410b      	asrs	r3, r1
 8006faa:	f84b 3c14 	str.w	r3, [fp, #-20]
			xCurr[i+1] >>= es;
 8006fae:	e958 2308 	ldrd	r2, r3, [r8, #-32]
			xCurr[i+0] >>= es;
 8006fb2:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 8006fb4:	410b      	asrs	r3, r1
 8006fb6:	e948 2308 	strd	r2, r3, [r8, #-32]
			*xPrev++ >>= es;
 8006fba:	f85b 3c10 	ldr.w	r3, [fp, #-16]
 8006fbe:	410b      	asrs	r3, r1
 8006fc0:	f84b 3c10 	str.w	r3, [fp, #-16]
			xCurr[i+1] >>= es;
 8006fc4:	e958 2306 	ldrd	r2, r3, [r8, #-24]
			xCurr[i+0] >>= es;
 8006fc8:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 8006fca:	410b      	asrs	r3, r1
 8006fcc:	e948 2306 	strd	r2, r3, [r8, #-24]
			*xPrev++ >>= es;
 8006fd0:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
 8006fd4:	410b      	asrs	r3, r1
 8006fd6:	f84b 3c0c 	str.w	r3, [fp, #-12]
			xCurr[i+1] >>= es;
 8006fda:	e958 2304 	ldrd	r2, r3, [r8, #-16]
			xCurr[i+0] >>= es;
 8006fde:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 8006fe0:	410b      	asrs	r3, r1
 8006fe2:	e948 2304 	strd	r2, r3, [r8, #-16]
			*xPrev++ >>= es;
 8006fe6:	f85b 3c08 	ldr.w	r3, [fp, #-8]
 8006fea:	410b      	asrs	r3, r1
 8006fec:	f84b 3c08 	str.w	r3, [fp, #-8]
			xCurr[i+1] >>= es;
 8006ff0:	e958 2302 	ldrd	r2, r3, [r8, #-8]
 8006ff4:	410b      	asrs	r3, r1
			xCurr[i+0] >>= es;
 8006ff6:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 8006ff8:	e948 2302 	strd	r2, r3, [r8, #-8]
			*xPrev++ >>= es;
 8006ffc:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8007000:	410b      	asrs	r3, r1
 8007002:	f84b 3c04 	str.w	r3, [fp, #-4]
 8007006:	e958 6512 	ldrd	r6, r5, [r8, #-72]	; 0x48
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800700a:	f858 3c18 	ldr.w	r3, [r8, #-24]
 800700e:	f858 2c0c 	ldr.w	r2, [r8, #-12]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 8007012:	f858 1c24 	ldr.w	r1, [r8, #-36]
	x4 -= x5;
 8007016:	eba3 0c02 	sub.w	ip, r3, r2
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800701a:	f858 3c30 	ldr.w	r3, [r8, #-48]
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800701e:	f858 7c3c 	ldr.w	r7, [r8, #-60]
	x3 -= x4;
 8007022:	eba1 010c 	sub.w	r1, r1, ip
	x2 -= x3;
 8007026:	eba3 0e01 	sub.w	lr, r3, r1
	x3 -= x5;
 800702a:	1a89      	subs	r1, r1, r2
	x1 -= x2;
 800702c:	eba7 070e 	sub.w	r7, r7, lr
	x0 -= x1;
 8007030:	1bf6      	subs	r6, r6, r7
	x1 -= x3;
 8007032:	1a7f      	subs	r7, r7, r1
	x0 >>= 1;
 8007034:	1076      	asrs	r6, r6, #1
	x1 >>= 1;
 8007036:	107b      	asrs	r3, r7, #1
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8007038:	4f64      	ldr	r7, [pc, #400]	; (80071cc <xmp3fixpt_IMDCT+0x20e8>)
 800703a:	fb87 0e0e 	smull	r0, lr, r7, lr
	a0 = MULSHIFT32(c3_0, x2) << 1;
 800703e:	ea4f 004e 	mov.w	r0, lr, lsl #1
	a1 = x0 + (x4 >> 1);
 8007042:	eb06 0e6c 	add.w	lr, r6, ip, asr #1
	a2 = x0 - x4;
 8007046:	eba6 060c 	sub.w	r6, r6, ip
	x0 = a1 + a0;
 800704a:	eb0e 0400 	add.w	r4, lr, r0
	x4 = a1 - a0;
 800704e:	ebae 0e00 	sub.w	lr, lr, r0
	x0 = a1 + a0;
 8007052:	9403      	str	r4, [sp, #12]
 8007054:	fb87 0101 	smull	r0, r1, r7, r1
	a0 = MULSHIFT32(c3_0, x3) << 1;
 8007058:	0049      	lsls	r1, r1, #1
 800705a:	4c5d      	ldr	r4, [pc, #372]	; (80071d0 <xmp3fixpt_IMDCT+0x20ec>)
	a1 = x1 + (x5 >> 1);
 800705c:	eb03 0062 	add.w	r0, r3, r2, asr #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 8007060:	1847      	adds	r7, r0, r1
 8007062:	fb84 c707 	smull	ip, r7, r4, r7
 8007066:	4c5b      	ldr	r4, [pc, #364]	; (80071d4 <xmp3fixpt_IMDCT+0x20f0>)
	a2 = x1 - x5;
 8007068:	1a9a      	subs	r2, r3, r2
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800706a:	00bf      	lsls	r7, r7, #2
 800706c:	fb84 3202 	smull	r3, r2, r4, r2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8007070:	1a40      	subs	r0, r0, r1
	x3 = MULSHIFT32(c6[1], a2) << 2;
 8007072:	0092      	lsls	r2, r2, #2
 8007074:	4958      	ldr	r1, [pc, #352]	; (80071d8 <xmp3fixpt_IMDCT+0x20f4>)
 8007076:	fb81 3000 	smull	r3, r0, r1, r0
	*out = x0 + x1;	out++;
 800707a:	9c03      	ldr	r4, [sp, #12]
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800707c:	0080      	lsls	r0, r0, #2
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800707e:	f858 3c14 	ldr.w	r3, [r8, #-20]
	*out = x0 + x1;	out++;
 8007082:	1939      	adds	r1, r7, r4
	*out = x0 - x1;
 8007084:	1be7      	subs	r7, r4, r7
	*out = x0 + x1;	out++;
 8007086:	910a      	str	r1, [sp, #40]	; 0x28
	*out = x4 + x5;	out++;
 8007088:	eb00 010e 	add.w	r1, r0, lr
	*out = x4 - x5;	out++;
 800708c:	ebae 0000 	sub.w	r0, lr, r0
	*out = x0 - x1;
 8007090:	9703      	str	r7, [sp, #12]
	*out = x4 + x5;	out++;
 8007092:	9107      	str	r1, [sp, #28]
	*out = x2 + x3;	out++;
 8007094:	1997      	adds	r7, r2, r6
	x4 -= x5;
 8007096:	f858 1c08 	ldr.w	r1, [r8, #-8]
	*out = x2 - x3;	out++;
 800709a:	1ab2      	subs	r2, r6, r2
	*out = x4 - x5;	out++;
 800709c:	900b      	str	r0, [sp, #44]	; 0x2c
	x4 -= x5;
 800709e:	eba3 0c01 	sub.w	ip, r3, r1
	x3 -= x4;
 80070a2:	f858 0c20 	ldr.w	r0, [r8, #-32]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 80070a6:	f858 1c2c 	ldr.w	r1, [r8, #-44]
	x3 -= x4;
 80070aa:	eba0 000c 	sub.w	r0, r0, ip
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 80070ae:	f858 3c38 	ldr.w	r3, [r8, #-56]
	*out = x2 - x3;	out++;
 80070b2:	920e      	str	r2, [sp, #56]	; 0x38
	x2 -= x3;
 80070b4:	1a09      	subs	r1, r1, r0
	x3 -= x5;
 80070b6:	f858 2c08 	ldr.w	r2, [r8, #-8]
	*out = x2 + x3;	out++;
 80070ba:	970d      	str	r7, [sp, #52]	; 0x34
	x1 -= x2;
 80070bc:	1a5b      	subs	r3, r3, r1
	x3 -= x5;
 80070be:	1a80      	subs	r0, r0, r2
 80070c0:	4f42      	ldr	r7, [pc, #264]	; (80071cc <xmp3fixpt_IMDCT+0x20e8>)
	x0 -= x1;
 80070c2:	1aed      	subs	r5, r5, r3
	x1 -= x3;
 80070c4:	1a1b      	subs	r3, r3, r0
 80070c6:	463c      	mov	r4, r7
	x0 >>= 1;
 80070c8:	106e      	asrs	r6, r5, #1
	x1 >>= 1;
 80070ca:	105b      	asrs	r3, r3, #1
 80070cc:	fb87 2101 	smull	r2, r1, r7, r1
	a1 = x0 + (x4 >> 1);
 80070d0:	eb06 056c 	add.w	r5, r6, ip, asr #1
	a2 = x0 - x4;
 80070d4:	eba6 0c0c 	sub.w	ip, r6, ip
	a0 = MULSHIFT32(c3_0, x2) << 1;
 80070d8:	0049      	lsls	r1, r1, #1
	x0 = a1 + a0;
 80070da:	186f      	adds	r7, r5, r1
	x4 = a1 - a0;
 80070dc:	1a6d      	subs	r5, r5, r1
 80070de:	fb84 2000 	smull	r2, r0, r4, r0
	a0 = MULSHIFT32(c3_0, x3) << 1;
 80070e2:	0042      	lsls	r2, r0, #1
	a1 = x1 + (x5 >> 1);
 80070e4:	f858 0c08 	ldr.w	r0, [r8, #-8]
 80070e8:	4c39      	ldr	r4, [pc, #228]	; (80071d0 <xmp3fixpt_IMDCT+0x20ec>)
 80070ea:	eb03 0160 	add.w	r1, r3, r0, asr #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 80070ee:	1888      	adds	r0, r1, r2
 80070f0:	fb84 6000 	smull	r6, r0, r4, r0
	a2 = x1 - x5;
 80070f4:	f858 6c08 	ldr.w	r6, [r8, #-8]
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 80070f8:	0080      	lsls	r0, r0, #2
 80070fa:	4c36      	ldr	r4, [pc, #216]	; (80071d4 <xmp3fixpt_IMDCT+0x20f0>)
	a2 = x1 - x5;
 80070fc:	1b9b      	subs	r3, r3, r6
 80070fe:	fb84 6303 	smull	r6, r3, r4, r3
 8007102:	4e35      	ldr	r6, [pc, #212]	; (80071d8 <xmp3fixpt_IMDCT+0x20f4>)
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8007104:	1a8a      	subs	r2, r1, r2
	x3 = MULSHIFT32(c6[1], a2) << 2;
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	fb86 1202 	smull	r1, r2, r6, r2
	*out = x0 + x1;	out++;
 800710c:	19c4      	adds	r4, r0, r7
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800710e:	0092      	lsls	r2, r2, #2
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 8007110:	f858 6c04 	ldr.w	r6, [r8, #-4]
	*out = x0 - x1;
 8007114:	1a38      	subs	r0, r7, r0
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 8007116:	f858 1c10 	ldr.w	r1, [r8, #-16]
	*out = x0 + x1;	out++;
 800711a:	941b      	str	r4, [sp, #108]	; 0x6c
	*out = x4 + x5;	out++;
 800711c:	1954      	adds	r4, r2, r5
	*out = x4 - x5;	out++;
 800711e:	1aaa      	subs	r2, r5, r2
	x4 -= x5;
 8007120:	1b89      	subs	r1, r1, r6
	*out = x0 - x1;
 8007122:	9008      	str	r0, [sp, #32]
	*out = x2 + x3;	out++;
 8007124:	eb03 000c 	add.w	r0, r3, ip
	*out = x4 - x5;	out++;
 8007128:	9206      	str	r2, [sp, #24]
	*out = x2 - x3;	out++;
 800712a:	ebac 0303 	sub.w	r3, ip, r3
	x3 -= x4;
 800712e:	f858 2c1c 	ldr.w	r2, [r8, #-28]
	*out = x2 + x3;	out++;
 8007132:	901a      	str	r0, [sp, #104]	; 0x68
	x3 -= x4;
 8007134:	1a52      	subs	r2, r2, r1
	x2 -= x3;
 8007136:	f858 0c28 	ldr.w	r0, [r8, #-40]
	*out = x2 - x3;	out++;
 800713a:	930c      	str	r3, [sp, #48]	; 0x30
	x2 -= x3;
 800713c:	1a85      	subs	r5, r0, r2
	x1 -= x2;
 800713e:	f858 3c34 	ldr.w	r3, [r8, #-52]
	x3 -= x5;
 8007142:	1b92      	subs	r2, r2, r6
	x0 -= x1;
 8007144:	f858 0c40 	ldr.w	r0, [r8, #-64]
	x1 -= x2;
 8007148:	1b5b      	subs	r3, r3, r5
	*out = x4 + x5;	out++;
 800714a:	9419      	str	r4, [sp, #100]	; 0x64
 800714c:	4f1f      	ldr	r7, [pc, #124]	; (80071cc <xmp3fixpt_IMDCT+0x20e8>)
	x0 -= x1;
 800714e:	eba0 0e03 	sub.w	lr, r0, r3
	x1 -= x3;
 8007152:	1a9b      	subs	r3, r3, r2
	x0 >>= 1;
 8007154:	ea4f 0e6e 	mov.w	lr, lr, asr #1
	x1 >>= 1;
 8007158:	105b      	asrs	r3, r3, #1
 800715a:	fb87 0505 	smull	r0, r5, r7, r5
	a0 = MULSHIFT32(c3_0, x2) << 1;
 800715e:	0068      	lsls	r0, r5, #1
	a1 = x0 + (x4 >> 1);
 8007160:	eb0e 0561 	add.w	r5, lr, r1, asr #1
	a2 = x0 - x4;
 8007164:	ebae 0e01 	sub.w	lr, lr, r1
	x0 = a1 + a0;
 8007168:	eb05 0c00 	add.w	ip, r5, r0
	x4 = a1 - a0;
 800716c:	1a2d      	subs	r5, r5, r0
 800716e:	fb87 1202 	smull	r1, r2, r7, r2
	a0 = MULSHIFT32(c3_0, x3) << 1;
 8007172:	0052      	lsls	r2, r2, #1
 8007174:	4c16      	ldr	r4, [pc, #88]	; (80071d0 <xmp3fixpt_IMDCT+0x20ec>)
	a1 = x1 + (x5 >> 1);
 8007176:	eb03 0166 	add.w	r1, r3, r6, asr #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800717a:	1888      	adds	r0, r1, r2
 800717c:	fb84 7000 	smull	r7, r0, r4, r0
 8007180:	4c14      	ldr	r4, [pc, #80]	; (80071d4 <xmp3fixpt_IMDCT+0x20f0>)
	a2 = x1 - x5;
 8007182:	1b9b      	subs	r3, r3, r6
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 8007184:	0080      	lsls	r0, r0, #2
 8007186:	fb84 6303 	smull	r6, r3, r4, r3
 800718a:	4e13      	ldr	r6, [pc, #76]	; (80071d8 <xmp3fixpt_IMDCT+0x20f4>)
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800718c:	1a8a      	subs	r2, r1, r2
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	fb86 1202 	smull	r1, r2, r6, r2
	*out = x0 + x1;	out++;
 8007194:	eb0c 0100 	add.w	r1, ip, r0
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8007198:	0092      	lsls	r2, r2, #2
	*out = x0 + x1;	out++;
 800719a:	911c      	str	r1, [sp, #112]	; 0x70
	*out = x0 - x1;
 800719c:	ebac 0100 	sub.w	r1, ip, r0
 80071a0:	9121      	str	r1, [sp, #132]	; 0x84
	*out = x2 + x3;	out++;
 80071a2:	eb0e 0103 	add.w	r1, lr, r3
	*out = x2 - x3;	out++;
 80071a6:	ebae 0303 	sub.w	r3, lr, r3
	*out = x2 + x3;	out++;
 80071aa:	911d      	str	r1, [sp, #116]	; 0x74
	*out = x4 + x5;	out++;
 80071ac:	1951      	adds	r1, r2, r5
	*out = x2 - x3;	out++;
 80071ae:	9320      	str	r3, [sp, #128]	; 0x80
	*out = x4 - x5;	out++;
 80071b0:	1aaa      	subs	r2, r5, r2
	if (btPrev == 2) {
 80071b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
	*out = x4 + x5;	out++;
 80071b4:	911e      	str	r1, [sp, #120]	; 0x78
	if (btPrev == 2) {
 80071b6:	2b02      	cmp	r3, #2
	*out = x4 - x5;	out++;
 80071b8:	921f      	str	r2, [sp, #124]	; 0x7c
	if (btPrev == 2) {
 80071ba:	f47f acf2 	bne.w	8006ba2 <xmp3fixpt_IMDCT+0x1abe>
 80071be:	a93a      	add	r1, sp, #232	; 0xe8
 80071c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80071c2:	f7fd fcb9 	bl	8004b38 <WinPrevious.part.0>
 80071c6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80071c8:	e553      	b.n	8006c72 <xmp3fixpt_IMDCT+0x1b8e>
 80071ca:	bf00      	nop
 80071cc:	6ed9eba1 	.word	0x6ed9eba1
 80071d0:	7ba3751d 	.word	0x7ba3751d
 80071d4:	5a82799a 	.word	0x5a82799a
 80071d8:	2120fb83 	.word	0x2120fb83
 80071dc:	080238b4 	.word	0x080238b4
 80071e0:	4291      	cmp	r1, r2
 80071e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80071e4:	f8df a49c 	ldr.w	sl, [pc, #1180]	; 8007684 <xmp3fixpt_IMDCT+0x25a0>
 80071e8:	f103 0b48 	add.w	fp, r3, #72	; 0x48
 80071ec:	460b      	mov	r3, r1
 80071ee:	bfa8      	it	ge
 80071f0:	4613      	movge	r3, r2
 80071f2:	932e      	str	r3, [sp, #184]	; 0xb8
 80071f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80071f6:	f103 0c24 	add.w	ip, r3, #36	; 0x24
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80071fa:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
 80071fe:	932f      	str	r3, [sp, #188]	; 0xbc
 8007200:	46e0      	mov	r8, ip
 8007202:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8007204:	4619      	mov	r1, r3
 8007206:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007208:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800720c:	f8da 1048 	ldr.w	r1, [sl, #72]	; 0x48
		es = 7 - gb;
 8007210:	9301      	str	r3, [sp, #4]
 8007212:	4691      	mov	r9, r2
 8007214:	9130      	str	r1, [sp, #192]	; 0xc0
 8007216:	f1a8 0324 	sub.w	r3, r8, #36	; 0x24
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 800721a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800721e:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
 8007222:	9329      	str	r3, [sp, #164]	; 0xa4
	if (gb < 7) {
 8007224:	9b05      	ldr	r3, [sp, #20]
 8007226:	2b06      	cmp	r3, #6
 8007228:	e95b 4612 	ldrd	r4, r6, [fp, #-72]	; 0x48
 800722c:	dc63      	bgt.n	80072f6 <xmp3fixpt_IMDCT+0x2212>
			xCurr[i+0] >>= es;
 800722e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8007230:	410c      	asrs	r4, r1
			xCurr[i+1] >>= es;
 8007232:	410e      	asrs	r6, r1
 8007234:	e94b 4612 	strd	r4, r6, [fp, #-72]	; 0x48
			*xPrev++ >>= es;
 8007238:	f858 3c24 	ldr.w	r3, [r8, #-36]
 800723c:	410b      	asrs	r3, r1
 800723e:	f848 3c24 	str.w	r3, [r8, #-36]
			xCurr[i+1] >>= es;
 8007242:	e95b 2310 	ldrd	r2, r3, [fp, #-64]	; 0x40
			xCurr[i+0] >>= es;
 8007246:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 8007248:	410b      	asrs	r3, r1
 800724a:	e94b 2310 	strd	r2, r3, [fp, #-64]	; 0x40
			*xPrev++ >>= es;
 800724e:	f858 3c20 	ldr.w	r3, [r8, #-32]
 8007252:	410b      	asrs	r3, r1
 8007254:	f848 3c20 	str.w	r3, [r8, #-32]
			xCurr[i+1] >>= es;
 8007258:	e95b 230e 	ldrd	r2, r3, [fp, #-56]	; 0x38
			xCurr[i+0] >>= es;
 800725c:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 800725e:	410b      	asrs	r3, r1
 8007260:	e94b 230e 	strd	r2, r3, [fp, #-56]	; 0x38
			*xPrev++ >>= es;
 8007264:	f858 3c1c 	ldr.w	r3, [r8, #-28]
 8007268:	410b      	asrs	r3, r1
 800726a:	f848 3c1c 	str.w	r3, [r8, #-28]
			xCurr[i+1] >>= es;
 800726e:	e95b 230c 	ldrd	r2, r3, [fp, #-48]	; 0x30
			xCurr[i+0] >>= es;
 8007272:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 8007274:	410b      	asrs	r3, r1
 8007276:	e94b 230c 	strd	r2, r3, [fp, #-48]	; 0x30
			*xPrev++ >>= es;
 800727a:	f858 3c18 	ldr.w	r3, [r8, #-24]
 800727e:	410b      	asrs	r3, r1
 8007280:	f848 3c18 	str.w	r3, [r8, #-24]
			xCurr[i+1] >>= es;
 8007284:	e95b 230a 	ldrd	r2, r3, [fp, #-40]	; 0x28
			xCurr[i+0] >>= es;
 8007288:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 800728a:	410b      	asrs	r3, r1
 800728c:	e94b 230a 	strd	r2, r3, [fp, #-40]	; 0x28
			*xPrev++ >>= es;
 8007290:	f858 3c14 	ldr.w	r3, [r8, #-20]
 8007294:	410b      	asrs	r3, r1
 8007296:	f848 3c14 	str.w	r3, [r8, #-20]
			xCurr[i+1] >>= es;
 800729a:	e95b 2308 	ldrd	r2, r3, [fp, #-32]
			xCurr[i+0] >>= es;
 800729e:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 80072a0:	410b      	asrs	r3, r1
 80072a2:	e94b 2308 	strd	r2, r3, [fp, #-32]
			*xPrev++ >>= es;
 80072a6:	f858 3c10 	ldr.w	r3, [r8, #-16]
 80072aa:	410b      	asrs	r3, r1
 80072ac:	f848 3c10 	str.w	r3, [r8, #-16]
			xCurr[i+1] >>= es;
 80072b0:	e95b 2306 	ldrd	r2, r3, [fp, #-24]
			xCurr[i+0] >>= es;
 80072b4:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 80072b6:	410b      	asrs	r3, r1
 80072b8:	e94b 2306 	strd	r2, r3, [fp, #-24]
			*xPrev++ >>= es;
 80072bc:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 80072c0:	410b      	asrs	r3, r1
 80072c2:	f848 3c0c 	str.w	r3, [r8, #-12]
			xCurr[i+1] >>= es;
 80072c6:	e95b 2304 	ldrd	r2, r3, [fp, #-16]
			xCurr[i+0] >>= es;
 80072ca:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 80072cc:	410b      	asrs	r3, r1
 80072ce:	e94b 2304 	strd	r2, r3, [fp, #-16]
			*xPrev++ >>= es;
 80072d2:	f858 3c08 	ldr.w	r3, [r8, #-8]
 80072d6:	410b      	asrs	r3, r1
 80072d8:	f848 3c08 	str.w	r3, [r8, #-8]
			xCurr[i+1] >>= es;
 80072dc:	e95b 2302 	ldrd	r2, r3, [fp, #-8]
 80072e0:	410b      	asrs	r3, r1
			xCurr[i+0] >>= es;
 80072e2:	410a      	asrs	r2, r1
			xCurr[i+1] >>= es;
 80072e4:	e94b 2302 	strd	r2, r3, [fp, #-8]
			*xPrev++ >>= es;
 80072e8:	f858 3c04 	ldr.w	r3, [r8, #-4]
 80072ec:	410b      	asrs	r3, r1
 80072ee:	f848 3c04 	str.w	r3, [r8, #-4]
 80072f2:	e95b 4612 	ldrd	r4, r6, [fp, #-72]	; 0x48
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 80072f6:	f85b 7c0c 	ldr.w	r7, [fp, #-12]
 80072fa:	f85b 5c18 	ldr.w	r5, [fp, #-24]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 80072fe:	f85b 1c24 	ldr.w	r1, [fp, #-36]
	x4 -= x5;
 8007302:	1bed      	subs	r5, r5, r7
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 8007304:	f85b 3c30 	ldr.w	r3, [fp, #-48]
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 8007308:	f85b 2c3c 	ldr.w	r2, [fp, #-60]
	x3 -= x4;
 800730c:	1b49      	subs	r1, r1, r5
	x2 -= x3;
 800730e:	1a5b      	subs	r3, r3, r1
	x3 -= x5;
 8007310:	1bc9      	subs	r1, r1, r7
	x1 -= x2;
 8007312:	1ad2      	subs	r2, r2, r3
	x0 -= x1;
 8007314:	1aa4      	subs	r4, r4, r2
	x1 -= x3;
 8007316:	1a52      	subs	r2, r2, r1
	x1 >>= 1;
 8007318:	1052      	asrs	r2, r2, #1
	x0 >>= 1;
 800731a:	1064      	asrs	r4, r4, #1
	x1 >>= 1;
 800731c:	9203      	str	r2, [sp, #12]
 800731e:	4ad5      	ldr	r2, [pc, #852]	; (8007674 <xmp3fixpt_IMDCT+0x2590>)
 8007320:	fb82 0303 	smull	r0, r3, r2, r3
	a1 = x0 + (x4 >> 1);
 8007324:	eb04 0c65 	add.w	ip, r4, r5, asr #1
	a2 = x0 - x4;
 8007328:	1b64      	subs	r4, r4, r5
	a0 = MULSHIFT32(c3_0, x2) << 1;
 800732a:	0058      	lsls	r0, r3, #1
	x0 = a1 + a0;
 800732c:	eb00 0e0c 	add.w	lr, r0, ip
	x4 = a1 - a0;
 8007330:	ebac 0c00 	sub.w	ip, ip, r0
 8007334:	fb82 3101 	smull	r3, r1, r2, r1
	a1 = x1 + (x5 >> 1);
 8007338:	9a03      	ldr	r2, [sp, #12]
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800733a:	0049      	lsls	r1, r1, #1
	a1 = x1 + (x5 >> 1);
 800733c:	eb02 0067 	add.w	r0, r2, r7, asr #1
 8007340:	4acd      	ldr	r2, [pc, #820]	; (8007678 <xmp3fixpt_IMDCT+0x2594>)
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 8007342:	180d      	adds	r5, r1, r0
 8007344:	fb82 3505 	smull	r3, r5, r2, r5
	a2 = x1 - x5;
 8007348:	9b03      	ldr	r3, [sp, #12]
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800734a:	00ad      	lsls	r5, r5, #2
	a2 = x1 - x5;
 800734c:	1bda      	subs	r2, r3, r7
 800734e:	4fcb      	ldr	r7, [pc, #812]	; (800767c <xmp3fixpt_IMDCT+0x2598>)
 8007350:	fb87 3202 	smull	r3, r2, r7, r2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8007354:	1a40      	subs	r0, r0, r1
	x3 = MULSHIFT32(c6[1], a2) << 2;
 8007356:	0093      	lsls	r3, r2, #2
 8007358:	49c9      	ldr	r1, [pc, #804]	; (8007680 <xmp3fixpt_IMDCT+0x259c>)
 800735a:	fb81 2000 	smull	r2, r0, r1, r0
	*out = x0 + x1;	out++;
 800735e:	eb0e 0105 	add.w	r1, lr, r5
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8007362:	0080      	lsls	r0, r0, #2
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 8007364:	f85b 7c14 	ldr.w	r7, [fp, #-20]
	*out = x0 - x1;
 8007368:	ebae 0505 	sub.w	r5, lr, r5
	*out = x4 + x5;	out++;
 800736c:	eb0c 0200 	add.w	r2, ip, r0
	*out = x0 + x1;	out++;
 8007370:	910d      	str	r1, [sp, #52]	; 0x34
	*out = x4 - x5;	out++;
 8007372:	ebac 0000 	sub.w	r0, ip, r0
	x4 -= x5;
 8007376:	f85b 1c08 	ldr.w	r1, [fp, #-8]
	*out = x0 - x1;
 800737a:	9511      	str	r5, [sp, #68]	; 0x44
	*out = x2 + x3;	out++;
 800737c:	18e5      	adds	r5, r4, r3
	x4 -= x5;
 800737e:	1a7f      	subs	r7, r7, r1
	*out = x4 - x5;	out++;
 8007380:	9010      	str	r0, [sp, #64]	; 0x40
	x3 -= x4;
 8007382:	f85b 0c20 	ldr.w	r0, [fp, #-32]
	*out = x2 - x3;	out++;
 8007386:	1ae3      	subs	r3, r4, r3
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 8007388:	f85b 1c2c 	ldr.w	r1, [fp, #-44]
	x3 -= x4;
 800738c:	1bc0      	subs	r0, r0, r7
	*out = x4 + x5;	out++;
 800738e:	920f      	str	r2, [sp, #60]	; 0x3c
	*out = x2 - x3;	out++;
 8007390:	9312      	str	r3, [sp, #72]	; 0x48
	x2 -= x3;
 8007392:	1a09      	subs	r1, r1, r0
	x3 -= x5;
 8007394:	f85b 3c08 	ldr.w	r3, [fp, #-8]
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 8007398:	f85b 2c38 	ldr.w	r2, [fp, #-56]
	x3 -= x5;
 800739c:	1ac0      	subs	r0, r0, r3
	*out = x2 + x3;	out++;
 800739e:	950e      	str	r5, [sp, #56]	; 0x38
	x1 -= x2;
 80073a0:	1a52      	subs	r2, r2, r1
 80073a2:	4cb4      	ldr	r4, [pc, #720]	; (8007674 <xmp3fixpt_IMDCT+0x2590>)
	x0 -= x1;
 80073a4:	1ab6      	subs	r6, r6, r2
	x1 -= x3;
 80073a6:	1a12      	subs	r2, r2, r0
	x0 >>= 1;
 80073a8:	1076      	asrs	r6, r6, #1
	x1 >>= 1;
 80073aa:	1053      	asrs	r3, r2, #1
 80073ac:	fb84 2101 	smull	r2, r1, r4, r1
	a1 = x0 + (x4 >> 1);
 80073b0:	eb06 0267 	add.w	r2, r6, r7, asr #1
	a2 = x0 - x4;
 80073b4:	1bf6      	subs	r6, r6, r7
	a0 = MULSHIFT32(c3_0, x2) << 1;
 80073b6:	0049      	lsls	r1, r1, #1
	a2 = x0 - x4;
 80073b8:	9603      	str	r6, [sp, #12]
 80073ba:	4626      	mov	r6, r4
	x0 = a1 + a0;
 80073bc:	188d      	adds	r5, r1, r2
	x4 = a1 - a0;
 80073be:	1a52      	subs	r2, r2, r1
	x0 = a1 + a0;
 80073c0:	9506      	str	r5, [sp, #24]
	x4 = a1 - a0;
 80073c2:	9207      	str	r2, [sp, #28]
 80073c4:	fb84 2000 	smull	r2, r0, r4, r0
	a1 = x1 + (x5 >> 1);
 80073c8:	f85b 4c08 	ldr.w	r4, [fp, #-8]
	a0 = MULSHIFT32(c3_0, x3) << 1;
 80073cc:	0040      	lsls	r0, r0, #1
 80073ce:	4daa      	ldr	r5, [pc, #680]	; (8007678 <xmp3fixpt_IMDCT+0x2594>)
	a1 = x1 + (x5 >> 1);
 80073d0:	eb03 0164 	add.w	r1, r3, r4, asr #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 80073d4:	1844      	adds	r4, r0, r1
 80073d6:	fb85 2404 	smull	r2, r4, r5, r4
	a2 = x1 - x5;
 80073da:	f85b 7c08 	ldr.w	r7, [fp, #-8]
 80073de:	eba3 0e07 	sub.w	lr, r3, r7
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 80073e2:	00a3      	lsls	r3, r4, #2
 80073e4:	4fa5      	ldr	r7, [pc, #660]	; (800767c <xmp3fixpt_IMDCT+0x2598>)
 80073e6:	9308      	str	r3, [sp, #32]
 80073e8:	fb87 3e0e 	smull	r3, lr, r7, lr
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 80073ec:	1a08      	subs	r0, r1, r0
	x3 = MULSHIFT32(c6[1], a2) << 2;
 80073ee:	ea4f 048e 	mov.w	r4, lr, lsl #2
 80073f2:	49a3      	ldr	r1, [pc, #652]	; (8007680 <xmp3fixpt_IMDCT+0x259c>)
 80073f4:	fb81 3000 	smull	r3, r0, r1, r0
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 80073f8:	0080      	lsls	r0, r0, #2
	*out = x2 - x3;	out++;
 80073fa:	9b03      	ldr	r3, [sp, #12]
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 80073fc:	f85b 5c10 	ldr.w	r5, [fp, #-16]
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8007400:	4601      	mov	r1, r0
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 8007402:	f85b 0c04 	ldr.w	r0, [fp, #-4]
	*out = x2 - x3;	out++;
 8007406:	1b1f      	subs	r7, r3, r4
 8007408:	941d      	str	r4, [sp, #116]	; 0x74
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800740a:	f85b 2c1c 	ldr.w	r2, [fp, #-28]
	x4 -= x5;
 800740e:	1a2d      	subs	r5, r5, r0
	*out = x4 - x5;	out++;
 8007410:	9c07      	ldr	r4, [sp, #28]
	x3 -= x4;
 8007412:	1b52      	subs	r2, r2, r5
	*out = x2 - x3;	out++;
 8007414:	970b      	str	r7, [sp, #44]	; 0x2c
	*out = x4 - x5;	out++;
 8007416:	1a63      	subs	r3, r4, r1
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 8007418:	f85b 4c28 	ldr.w	r4, [fp, #-40]
	*out = x4 - x5;	out++;
 800741c:	911e      	str	r1, [sp, #120]	; 0x78
	x2 -= x3;
 800741e:	1aa4      	subs	r4, r4, r2
	*out = x0 - x1;
 8007420:	9906      	ldr	r1, [sp, #24]
	*out = x4 - x5;	out++;
 8007422:	930a      	str	r3, [sp, #40]	; 0x28
	x3 -= x5;
 8007424:	1a12      	subs	r2, r2, r0
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 8007426:	f85b 3c34 	ldr.w	r3, [fp, #-52]
	*out = x0 - x1;
 800742a:	9f08      	ldr	r7, [sp, #32]
	x1 -= x2;
 800742c:	1b1b      	subs	r3, r3, r4
	*out = x0 - x1;
 800742e:	1bcf      	subs	r7, r1, r7
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 8007430:	f85b 1c40 	ldr.w	r1, [fp, #-64]
	x0 -= x1;
 8007434:	1ac9      	subs	r1, r1, r3
	x1 -= x3;
 8007436:	1a9b      	subs	r3, r3, r2
	*out = x0 - x1;
 8007438:	970c      	str	r7, [sp, #48]	; 0x30
 800743a:	4637      	mov	r7, r6
	x0 >>= 1;
 800743c:	1049      	asrs	r1, r1, #1
	x1 >>= 1;
 800743e:	105b      	asrs	r3, r3, #1
 8007440:	fb87 6404 	smull	r6, r4, r7, r4
	a1 = x0 + (x4 >> 1);
 8007444:	eb01 0665 	add.w	r6, r1, r5, asr #1
	a2 = x0 - x4;
 8007448:	1b4d      	subs	r5, r1, r5
	a0 = MULSHIFT32(c3_0, x2) << 1;
 800744a:	0064      	lsls	r4, r4, #1
	a2 = x0 - x4;
 800744c:	9515      	str	r5, [sp, #84]	; 0x54
	x0 = a1 + a0;
 800744e:	19a5      	adds	r5, r4, r6
	x4 = a1 - a0;
 8007450:	1b36      	subs	r6, r6, r4
	x0 = a1 + a0;
 8007452:	9517      	str	r5, [sp, #92]	; 0x5c
	x4 = a1 - a0;
 8007454:	9619      	str	r6, [sp, #100]	; 0x64
 8007456:	fb87 1202 	smull	r1, r2, r7, r2
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800745a:	0052      	lsls	r2, r2, #1
 800745c:	4d86      	ldr	r5, [pc, #536]	; (8007678 <xmp3fixpt_IMDCT+0x2594>)
	a1 = x1 + (x5 >> 1);
 800745e:	eb03 0160 	add.w	r1, r3, r0, asr #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 8007462:	1857      	adds	r7, r2, r1
 8007464:	fb85 4707 	smull	r4, r7, r5, r7
	a2 = x1 - x5;
 8007468:	1a1b      	subs	r3, r3, r0
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800746a:	00b8      	lsls	r0, r7, #2
 800746c:	4f83      	ldr	r7, [pc, #524]	; (800767c <xmp3fixpt_IMDCT+0x2598>)
 800746e:	901a      	str	r0, [sp, #104]	; 0x68
 8007470:	fb87 0303 	smull	r0, r3, r7, r3
	x3 = MULSHIFT32(c6[1], a2) << 2;
 8007474:	009b      	lsls	r3, r3, #2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8007476:	1a89      	subs	r1, r1, r2
 8007478:	4a81      	ldr	r2, [pc, #516]	; (8007680 <xmp3fixpt_IMDCT+0x259c>)
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800747a:	931b      	str	r3, [sp, #108]	; 0x6c
 800747c:	fb82 3101 	smull	r3, r1, r2, r1
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8007480:	008e      	lsls	r6, r1, #2
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007482:	f858 2c24 	ldr.w	r2, [r8, #-36]
 8007486:	4647      	mov	r7, r8
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8007488:	961c      	str	r6, [sp, #112]	; 0x70
 800748a:	4613      	mov	r3, r2
 800748c:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 800748e:	fb86 1303 	smull	r1, r3, r6, r3
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007492:	933a      	str	r3, [sp, #232]	; 0xe8
 8007494:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 8007496:	fb86 1202 	smull	r1, r2, r6, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 800749a:	924b      	str	r2, [sp, #300]	; 0x12c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800749c:	f858 0c20 	ldr.w	r0, [r8, #-32]
 80074a0:	f8da 2088 	ldr.w	r2, [sl, #136]	; 0x88
 80074a4:	4604      	mov	r4, r0
 80074a6:	f8da 104c 	ldr.w	r1, [sl, #76]	; 0x4c
 80074aa:	fb81 5404 	smull	r5, r4, r1, r4
			*xpwLo++ = MULSHIFT32(wLo, x);
 80074ae:	943b      	str	r4, [sp, #236]	; 0xec
 80074b0:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 80074b4:	904a      	str	r0, [sp, #296]	; 0x128
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80074b6:	f858 0c1c 	ldr.w	r0, [r8, #-28]
 80074ba:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
 80074be:	4604      	mov	r4, r0
 80074c0:	f8da 1050 	ldr.w	r1, [sl, #80]	; 0x50
 80074c4:	fb81 5404 	smull	r5, r4, r1, r4
			*xpwLo++ = MULSHIFT32(wLo, x);
 80074c8:	943c      	str	r4, [sp, #240]	; 0xf0
 80074ca:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 80074ce:	9049      	str	r0, [sp, #292]	; 0x124
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80074d0:	f858 0c18 	ldr.w	r0, [r8, #-24]
 80074d4:	f8da 2080 	ldr.w	r2, [sl, #128]	; 0x80
 80074d8:	4604      	mov	r4, r0
 80074da:	f8da 1054 	ldr.w	r1, [sl, #84]	; 0x54
 80074de:	fb81 5404 	smull	r5, r4, r1, r4
			*xpwLo++ = MULSHIFT32(wLo, x);
 80074e2:	943d      	str	r4, [sp, #244]	; 0xf4
 80074e4:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 80074e8:	9048      	str	r0, [sp, #288]	; 0x120
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80074ea:	f858 0c14 	ldr.w	r0, [r8, #-20]
 80074ee:	f8da 207c 	ldr.w	r2, [sl, #124]	; 0x7c
 80074f2:	4604      	mov	r4, r0
 80074f4:	f8da 1058 	ldr.w	r1, [sl, #88]	; 0x58
 80074f8:	fb81 5404 	smull	r5, r4, r1, r4
			*xpwLo++ = MULSHIFT32(wLo, x);
 80074fc:	943e      	str	r4, [sp, #248]	; 0xf8
 80074fe:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007502:	9047      	str	r0, [sp, #284]	; 0x11c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007504:	f858 0c10 	ldr.w	r0, [r8, #-16]
 8007508:	f8da 2078 	ldr.w	r2, [sl, #120]	; 0x78
 800750c:	4604      	mov	r4, r0
 800750e:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
 8007512:	fb81 5404 	smull	r5, r4, r1, r4
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007516:	943f      	str	r4, [sp, #252]	; 0xfc
 8007518:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 800751c:	9046      	str	r0, [sp, #280]	; 0x118
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800751e:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 8007522:	f8da 2074 	ldr.w	r2, [sl, #116]	; 0x74
 8007526:	4604      	mov	r4, r0
 8007528:	f8da 1060 	ldr.w	r1, [sl, #96]	; 0x60
 800752c:	fb81 5404 	smull	r5, r4, r1, r4
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007530:	9440      	str	r4, [sp, #256]	; 0x100
 8007532:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007536:	9045      	str	r0, [sp, #276]	; 0x114
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007538:	f858 0c08 	ldr.w	r0, [r8, #-8]
 800753c:	f8da 2070 	ldr.w	r2, [sl, #112]	; 0x70
 8007540:	4604      	mov	r4, r0
 8007542:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
 8007546:	fb81 5404 	smull	r5, r4, r1, r4
			*xpwLo++ = MULSHIFT32(wLo, x);
 800754a:	9441      	str	r4, [sp, #260]	; 0x104
 800754c:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007550:	9044      	str	r0, [sp, #272]	; 0x110
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007552:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8007556:	f8da 206c 	ldr.w	r2, [sl, #108]	; 0x6c
 800755a:	4604      	mov	r4, r0
 800755c:	f8da 1068 	ldr.w	r1, [sl, #104]	; 0x68
 8007560:	fb81 5404 	smull	r5, r4, r1, r4
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007564:	9442      	str	r4, [sp, #264]	; 0x108
 8007566:	fb82 1000 	smull	r1, r0, r2, r0
		yLo = (xPrevWin[ 0+i] << 2);
 800756a:	009b      	lsls	r3, r3, #2
			*xpwHi-- = MULSHIFT32(wHi, x);
 800756c:	9043      	str	r0, [sp, #268]	; 0x10c
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 800756e:	f8da 4120 	ldr.w	r4, [sl, #288]	; 0x120
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 8007572:	f849 3b04 	str.w	r3, [r9], #4
	sign = x >> (sizeof(int) * 8 - 1);
 8007576:	17d8      	asrs	r0, r3, #31
		yLo = (xPrevWin[ 3+i] << 2);
 8007578:	993d      	ldr	r1, [sp, #244]	; 0xf4
	x ^= sign;
 800757a:	4043      	eors	r3, r0
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800757c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800757e:	0089      	lsls	r1, r1, #2
	x -= sign;
 8007580:	1a1e      	subs	r6, r3, r0
	sign = x >> (sizeof(int) * 8 - 1);
 8007582:	ea4f 7ce1 	mov.w	ip, r1, asr #31
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 8007586:	f8c9 117c 	str.w	r1, [r9, #380]	; 0x17c
	x -= sign;
 800758a:	961f      	str	r6, [sp, #124]	; 0x7c
	x ^= sign;
 800758c:	ea81 0e0c 	eor.w	lr, r1, ip
 8007590:	f8cd e080 	str.w	lr, [sp, #128]	; 0x80
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8007594:	fb84 3202 	smull	r3, r2, r4, r2
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8007598:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800759a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800759c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 80075a0:	f8da 112c 	ldr.w	r1, [sl, #300]	; 0x12c
	sign = x >> (sizeof(int) * 8 - 1);
 80075a4:	17dd      	asrs	r5, r3, #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 80075a6:	f8c9 32fc 	str.w	r3, [r9, #764]	; 0x2fc
	x ^= sign;
 80075aa:	406b      	eors	r3, r5
	x -= sign;
 80075ac:	1b5a      	subs	r2, r3, r5
 80075ae:	9221      	str	r2, [sp, #132]	; 0x84
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80075b0:	fb81 3000 	smull	r3, r0, r1, r0
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 80075b4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80075b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80075b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80075bc:	f8da 3138 	ldr.w	r3, [sl, #312]	; 0x138
	sign = x >> (sizeof(int) * 8 - 1);
 80075c0:	17d6      	asrs	r6, r2, #31
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 80075c2:	f8c9 247c 	str.w	r2, [r9, #1148]	; 0x47c
	x ^= sign;
 80075c6:	4072      	eors	r2, r6
	x -= sign;
 80075c8:	1b92      	subs	r2, r2, r6
 80075ca:	9222      	str	r2, [sp, #136]	; 0x88
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80075cc:	fb83 2505 	smull	r2, r5, r3, r5
 80075d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d2:	fb84 2303 	smull	r2, r3, r4, r3
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 80075d6:	441d      	add	r5, r3
 80075d8:	9a46      	ldr	r2, [sp, #280]	; 0x118
 80075da:	f8da 3144 	ldr.w	r3, [sl, #324]	; 0x144
 80075de:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80075e2:	980d      	ldr	r0, [sp, #52]	; 0x34
	sign = x >> (sizeof(int) * 8 - 1);
 80075e4:	17d4      	asrs	r4, r2, #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 80075e6:	f8c9 25fc 	str.w	r2, [r9, #1532]	; 0x5fc
	x ^= sign;
 80075ea:	4062      	eors	r2, r4
	x -= sign;
 80075ec:	1b16      	subs	r6, r2, r4
 80075ee:	9623      	str	r6, [sp, #140]	; 0x8c
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80075f0:	fb83 2000 	smull	r2, r0, r3, r0
 80075f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075f6:	fb81 2303 	smull	r2, r3, r1, r3
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 80075fa:	4418      	add	r0, r3
 80075fc:	9b49      	ldr	r3, [sp, #292]	; 0x124
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 80075fe:	f8da 6124 	ldr.w	r6, [sl, #292]	; 0x124
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 8007602:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007606:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 800760a:	4635      	mov	r5, r6
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 800760c:	f8c9 377c 	str.w	r3, [r9, #1916]	; 0x77c
	sign = x >> (sizeof(int) * 8 - 1);
 8007610:	17da      	asrs	r2, r3, #31
		yLo = (xPrevWin[ 0+i] << 2);
 8007612:	993b      	ldr	r1, [sp, #236]	; 0xec
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8007614:	4674      	mov	r4, lr
	x ^= sign;
 8007616:	4053      	eors	r3, r2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8007618:	9526      	str	r5, [sp, #152]	; 0x98
 800761a:	0089      	lsls	r1, r1, #2
	x -= sign;
 800761c:	1a98      	subs	r0, r3, r2
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 800761e:	f8c9 107c 	str.w	r1, [r9, #124]	; 0x7c
	sign = x >> (sizeof(int) * 8 - 1);
 8007622:	17ce      	asrs	r6, r1, #31
		yLo = (xPrevWin[ 3+i] << 2);
 8007624:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
	x ^= sign;
 8007626:	9625      	str	r6, [sp, #148]	; 0x94
 8007628:	4071      	eors	r1, r6
 800762a:	0092      	lsls	r2, r2, #2
	x -= sign;
 800762c:	9024      	str	r0, [sp, #144]	; 0x90
	sign = x >> (sizeof(int) * 8 - 1);
 800762e:	17d6      	asrs	r6, r2, #31
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 8007630:	f8c9 21fc 	str.w	r2, [r9, #508]	; 0x1fc
	x ^= sign;
 8007634:	4072      	eors	r2, r6
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8007636:	fb85 3404 	smull	r3, r4, r5, r4
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 800763a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800763c:	4673      	mov	r3, lr
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 800763e:	f8da 5130 	ldr.w	r5, [sl, #304]	; 0x130
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8007642:	eb04 0080 	add.w	r0, r4, r0, lsl #2
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8007646:	9512      	str	r5, [sp, #72]	; 0x48
	sign = x >> (sizeof(int) * 8 - 1);
 8007648:	17c5      	asrs	r5, r0, #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 800764a:	f8c9 037c 	str.w	r0, [r9, #892]	; 0x37c
	x ^= sign;
 800764e:	4068      	eors	r0, r5
	x -= sign;
 8007650:	1b44      	subs	r4, r0, r5
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8007652:	9812      	ldr	r0, [sp, #72]	; 0x48
	x -= sign;
 8007654:	9427      	str	r4, [sp, #156]	; 0x9c
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8007656:	4686      	mov	lr, r0
 8007658:	fb8e 0303 	smull	r0, r3, lr, r3
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 800765c:	9d44      	ldr	r5, [sp, #272]	; 0x110
 800765e:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8007662:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007666:	f8da 013c 	ldr.w	r0, [sl, #316]	; 0x13c
	sign = x >> (sizeof(int) * 8 - 1);
 800766a:	17dc      	asrs	r4, r3, #31
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 800766c:	f8c9 34fc 	str.w	r3, [r9, #1276]	; 0x4fc
 8007670:	e00a      	b.n	8007688 <xmp3fixpt_IMDCT+0x25a4>
 8007672:	bf00      	nop
 8007674:	6ed9eba1 	.word	0x6ed9eba1
 8007678:	7ba3751d 	.word	0x7ba3751d
 800767c:	5a82799a 	.word	0x5a82799a
 8007680:	2120fb83 	.word	0x2120fb83
 8007684:	080238b4 	.word	0x080238b4
	x ^= sign;
 8007688:	4063      	eors	r3, r4
	x -= sign;
 800768a:	1b1b      	subs	r3, r3, r4
 800768c:	9328      	str	r3, [sp, #160]	; 0xa0
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800768e:	fb80 3e0e 	smull	r3, lr, r0, lr
 8007692:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007694:	9826      	ldr	r0, [sp, #152]	; 0x98
 8007696:	fb80 3404 	smull	r3, r4, r0, r4
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 800769a:	9d47      	ldr	r5, [sp, #284]	; 0x11c
 800769c:	4474      	add	r4, lr
 800769e:	980e      	ldr	r0, [sp, #56]	; 0x38
 80076a0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80076a4:	f8da 3148 	ldr.w	r3, [sl, #328]	; 0x148
	sign = x >> (sizeof(int) * 8 - 1);
 80076a8:	17e5      	asrs	r5, r4, #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 80076aa:	f8c9 467c 	str.w	r4, [r9, #1660]	; 0x67c
	x ^= sign;
 80076ae:	406c      	eors	r4, r5
	x -= sign;
 80076b0:	1b65      	subs	r5, r4, r5
 80076b2:	950e      	str	r5, [sp, #56]	; 0x38
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80076b4:	fb83 4000 	smull	r4, r0, r3, r0
 80076b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80076ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076bc:	46a6      	mov	lr, r4
 80076be:	fb8e 4303 	smull	r4, r3, lr, r3
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 80076c2:	4418      	add	r0, r3
 80076c4:	9b4a      	ldr	r3, [sp, #296]	; 0x128
	x -= sign;
 80076c6:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80076c8:	1b92      	subs	r2, r2, r6
 80076ca:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80076cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80076d0:	eba4 0c0c 	sub.w	ip, r4, ip
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 80076d4:	f8da 6128 	ldr.w	r6, [sl, #296]	; 0x128
 80076d8:	1b49      	subs	r1, r1, r5
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 80076da:	f8c9 37fc 	str.w	r3, [r9, #2044]	; 0x7fc
	sign = x >> (sizeof(int) * 8 - 1);
 80076de:	17dc      	asrs	r4, r3, #31
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 80076e0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80076e2:	ea4c 0c01 	orr.w	ip, ip, r1
		yLo = (xPrevWin[ 0+i] << 2);
 80076e6:	993c      	ldr	r1, [sp, #240]	; 0xf0
	x ^= sign;
 80076e8:	4063      	eors	r3, r4
 80076ea:	0089      	lsls	r1, r1, #2
 80076ec:	ea4c 0202 	orr.w	r2, ip, r2
	x -= sign;
 80076f0:	1b1b      	subs	r3, r3, r4
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 80076f2:	f8c9 10fc 	str.w	r1, [r9, #252]	; 0xfc
	sign = x >> (sizeof(int) * 8 - 1);
 80076f6:	17c8      	asrs	r0, r1, #31
	x -= sign;
 80076f8:	930b      	str	r3, [sp, #44]	; 0x2c
		yLo = (xPrevWin[ 3+i] << 2);
 80076fa:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
	x ^= sign;
 80076fc:	4041      	eors	r1, r0
 80076fe:	009b      	lsls	r3, r3, #2
	x -= sign;
 8007700:	1a09      	subs	r1, r1, r0
	sign = x >> (sizeof(int) * 8 - 1);
 8007702:	17dc      	asrs	r4, r3, #31
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 8007704:	f8c9 327c 	str.w	r3, [r9, #636]	; 0x27c
 8007708:	4311      	orrs	r1, r2
	x ^= sign;
 800770a:	4063      	eors	r3, r4
	x -= sign;
 800770c:	1b1b      	subs	r3, r3, r4
 800770e:	ea41 0c03 	orr.w	ip, r1, r3
 8007712:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8007716:	fb86 3505 	smull	r3, r5, r6, r5
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 800771a:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800771c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800771e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8007722:	f8da 4134 	ldr.w	r4, [sl, #308]	; 0x134
	sign = x >> (sizeof(int) * 8 - 1);
 8007726:	17ea      	asrs	r2, r5, #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 8007728:	f8c9 53fc 	str.w	r5, [r9, #1020]	; 0x3fc
	x ^= sign;
 800772c:	4055      	eors	r5, r2
	x -= sign;
 800772e:	1aab      	subs	r3, r5, r2
 8007730:	9310      	str	r3, [sp, #64]	; 0x40
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8007732:	fb84 3000 	smull	r3, r0, r4, r0
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8007736:	9945      	ldr	r1, [sp, #276]	; 0x114
 8007738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800773a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800773e:	f8da 2140 	ldr.w	r2, [sl, #320]	; 0x140
	sign = x >> (sizeof(int) * 8 - 1);
 8007742:	17c1      	asrs	r1, r0, #31
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 8007744:	f8c9 057c 	str.w	r0, [r9, #1404]	; 0x57c
	x ^= sign;
 8007748:	4048      	eors	r0, r1
	x -= sign;
 800774a:	1a40      	subs	r0, r0, r1
 800774c:	900d      	str	r0, [sp, #52]	; 0x34
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800774e:	fb82 1303 	smull	r1, r3, r2, r3
 8007752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007754:	fb86 1202 	smull	r1, r2, r6, r2
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 8007758:	441a      	add	r2, r3
 800775a:	9b48      	ldr	r3, [sp, #288]	; 0x120
 800775c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800775e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007762:	f8da 014c 	ldr.w	r0, [sl, #332]	; 0x14c
	sign = x >> (sizeof(int) * 8 - 1);
 8007766:	17d5      	asrs	r5, r2, #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 8007768:	f8c9 26fc 	str.w	r2, [r9, #1788]	; 0x6fc
	x ^= sign;
 800776c:	406a      	eors	r2, r5
	x -= sign;
 800776e:	1b56      	subs	r6, r2, r5
 8007770:	960c      	str	r6, [sp, #48]	; 0x30
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8007772:	fb80 3101 	smull	r3, r1, r0, r1
 8007776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007778:	fb84 2303 	smull	r2, r3, r4, r3
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 800777c:	440b      	add	r3, r1
 800777e:	994b      	ldr	r1, [sp, #300]	; 0x12c
	*out = x0 + x1;	out++;
 8007780:	9d08      	ldr	r5, [sp, #32]
 8007782:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 8007786:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	*out = x0 + x1;	out++;
 800778a:	9806      	ldr	r0, [sp, #24]
	*out = x4 + x5;	out++;
 800778c:	9c07      	ldr	r4, [sp, #28]
 800778e:	f108 0824 	add.w	r8, r8, #36	; 0x24
 8007792:	991e      	ldr	r1, [sp, #120]	; 0x78
	*out = x0 + x1;	out++;
 8007794:	4428      	add	r0, r5
	*out = x2 + x3;	out++;
 8007796:	9a03      	ldr	r2, [sp, #12]
	sign = x >> (sizeof(int) * 8 - 1);
 8007798:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 800779c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
	*out = x4 + x5;	out++;
 800779e:	440c      	add	r4, r1
		*xPrev++ = xBuf[i] >> 2;
 80077a0:	1080      	asrs	r0, r0, #2
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 80077a2:	f8c9 387c 	str.w	r3, [r9, #2172]	; 0x87c
	*out = x4 + x5;	out++;
 80077a6:	9407      	str	r4, [sp, #28]
	*out = x2 + x3;	out++;
 80077a8:	442a      	add	r2, r5
	*out = x0 + x1;	out++;
 80077aa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80077ac:	9d1a      	ldr	r5, [sp, #104]	; 0x68
		*xPrev++ = xBuf[i] >> 2;
 80077ae:	1092      	asrs	r2, r2, #2
 80077b0:	9006      	str	r0, [sp, #24]
	*out = x0 + x1;	out++;
 80077b2:	1961      	adds	r1, r4, r5
	*out = x0 - x1;
 80077b4:	1b65      	subs	r5, r4, r5
	*out = x2 + x3;	out++;
 80077b6:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
	*out = x0 + x1;	out++;
 80077b8:	9108      	str	r1, [sp, #32]
	*out = x2 + x3;	out++;
 80077ba:	9915      	ldr	r1, [sp, #84]	; 0x54
	*out = x0 - x1;
 80077bc:	9512      	str	r5, [sp, #72]	; 0x48
	*out = x2 + x3;	out++;
 80077be:	190e      	adds	r6, r1, r4
	*out = x2 - x3;	out++;
 80077c0:	1b09      	subs	r1, r1, r4
	*out = x4 + x5;	out++;
 80077c2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
	*out = x2 - x3;	out++;
 80077c4:	910f      	str	r1, [sp, #60]	; 0x3c
		*xPrev++ = xBuf[i] >> 2;
 80077c6:	10b6      	asrs	r6, r6, #2
	*out = x4 + x5;	out++;
 80077c8:	9919      	ldr	r1, [sp, #100]	; 0x64
		*xPrev++ = xBuf[i] >> 2;
 80077ca:	f848 2c44 	str.w	r2, [r8, #-68]
	*out = x4 - x5;	out++;
 80077ce:	468c      	mov	ip, r1
	*out = x4 + x5;	out++;
 80077d0:	190d      	adds	r5, r1, r4
		*xPrev++ = xBuf[i] >> 2;
 80077d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	*out = x4 - x5;	out++;
 80077d4:	ebac 0c04 	sub.w	ip, ip, r4
	x ^= sign;
 80077d8:	ea83 040e 	eor.w	r4, r3, lr
	*out = x4 + x5;	out++;
 80077dc:	950a      	str	r5, [sp, #40]	; 0x28
 80077de:	9403      	str	r4, [sp, #12]
		*xPrev++ = xBuf[i] >> 2;
 80077e0:	ea4f 0cac 	mov.w	ip, ip, asr #2
		*xPrev++ = xBuf[i] >> 2;
 80077e4:	9c07      	ldr	r4, [sp, #28]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 80077e6:	9929      	ldr	r1, [sp, #164]	; 0xa4
		*xPrev++ = xBuf[i] >> 2;
 80077e8:	10a4      	asrs	r4, r4, #2
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 80077ea:	9814      	ldr	r0, [sp, #80]	; 0x50
		*xPrev++ = xBuf[i] >> 2;
 80077ec:	4625      	mov	r5, r4
		*xPrev++ = xBuf[i] >> 2;
 80077ee:	9c08      	ldr	r4, [sp, #32]
 80077f0:	10a3      	asrs	r3, r4, #2
		*xPrev++ = xBuf[i] >> 2;
 80077f2:	9c06      	ldr	r4, [sp, #24]
 80077f4:	f848 4c48 	str.w	r4, [r8, #-72]
		*xPrev++ = xBuf[i] >> 2;
 80077f8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80077fa:	10a4      	asrs	r4, r4, #2
 80077fc:	f848 4c28 	str.w	r4, [r8, #-40]
		*xPrev++ = xBuf[i] >> 2;
 8007800:	f847 5c1c 	str.w	r5, [r7, #-28]
		*xPrev++ = xBuf[i] >> 2;
 8007804:	1095      	asrs	r5, r2, #2
 8007806:	f848 3c3c 	str.w	r3, [r8, #-60]
 800780a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800780c:	f848 5c2c 	str.w	r5, [r8, #-44]
 8007810:	109c      	asrs	r4, r3, #2
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8007812:	9d01      	ldr	r5, [sp, #4]
		*xPrev++ = xBuf[i] >> 2;
 8007814:	f848 6c38 	str.w	r6, [r8, #-56]
 8007818:	f848 4c34 	str.w	r4, [r8, #-52]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800781c:	462a      	mov	r2, r5
	x -= sign;
 800781e:	9c03      	ldr	r4, [sp, #12]
 8007820:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		*xPrev++ = xBuf[i] >> 2;
 8007822:	f848 cc30 	str.w	ip, [r8, #-48]
 8007826:	eba4 040e 	sub.w	r4, r4, lr
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800782a:	f7fd f9f3 	bl	8004c14 <FreqInvertRescale>
 800782e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007830:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
	for (   ; i < bc->nBlocksTotal; i++) {
 8007832:	462b      	mov	r3, r5
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8007834:	ea40 0e01 	orr.w	lr, r0, r1
 8007838:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800783a:	9910      	ldr	r1, [sp, #64]	; 0x40
	for (   ; i < bc->nBlocksTotal; i++) {
 800783c:	3301      	adds	r3, #1
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800783e:	ea4e 0e06 	orr.w	lr, lr, r6
 8007842:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8007844:	9824      	ldr	r0, [sp, #144]	; 0x90
 8007846:	ea4e 0e02 	orr.w	lr, lr, r2
 800784a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800784c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800784e:	ea4e 0e02 	orr.w	lr, lr, r2
 8007852:	9a27      	ldr	r2, [sp, #156]	; 0x9c
	for (   ; i < bc->nBlocksTotal; i++) {
 8007854:	9301      	str	r3, [sp, #4]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8007856:	ea4e 0e02 	orr.w	lr, lr, r2
 800785a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800785c:	ea4e 0e02 	orr.w	lr, lr, r2
 8007860:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007862:	ea4e 0e01 	orr.w	lr, lr, r1
 8007866:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007868:	ea4e 0e01 	orr.w	lr, lr, r1
 800786c:	ea4e 0e06 	orr.w	lr, lr, r6
 8007870:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007872:	ea4e 0e00 	orr.w	lr, lr, r0
 8007876:	ea4e 0e05 	orr.w	lr, lr, r5
 800787a:	ea4e 0e02 	orr.w	lr, lr, r2
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 800787e:	9a02      	ldr	r2, [sp, #8]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8007880:	ea4e 0e06 	orr.w	lr, lr, r6
 8007884:	ea4e 0e04 	orr.w	lr, lr, r4
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 8007888:	ea42 020e 	orr.w	r2, r2, lr
 800788c:	9202      	str	r2, [sp, #8]
	for (   ; i < bc->nBlocksTotal; i++) {
 800788e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8007890:	4293      	cmp	r3, r2
 8007892:	f6ff acc0 	blt.w	8007216 <xmp3fixpt_IMDCT+0x2132>
 8007896:	461a      	mov	r2, r3
 8007898:	9b04      	ldr	r3, [sp, #16]
 800789a:	4639      	mov	r1, r7
 800789c:	4293      	cmp	r3, r2
 800789e:	f73f a96e 	bgt.w	8006b7e <xmp3fixpt_IMDCT+0x1a9a>
 80078a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80078a4:	1a9b      	subs	r3, r3, r2
 80078a6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80078a8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80078ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078b0:	932c      	str	r3, [sp, #176]	; 0xb0
	for (   ; i < bc->nBlocksPrev; i++) {
 80078b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80078b4:	4619      	mov	r1, r3
 80078b6:	9b04      	ldr	r3, [sp, #16]
 80078b8:	4299      	cmp	r1, r3
 80078ba:	f340 8457 	ble.w	800816c <xmp3fixpt_IMDCT+0x3088>
 80078be:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80078c0:	429a      	cmp	r2, r3
 80078c2:	f300 81d4 	bgt.w	8007c6e <xmp3fixpt_IMDCT+0x2b8a>
 80078c6:	f8df a8c0 	ldr.w	sl, [pc, #2240]	; 8008188 <xmp3fixpt_IMDCT+0x30a4>
 80078ca:	9303      	str	r3, [sp, #12]
 80078cc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80078ce:	9803      	ldr	r0, [sp, #12]
 80078d0:	461a      	mov	r2, r3
 80078d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80078d6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80078da:	3324      	adds	r3, #36	; 0x24
 80078dc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80078e0:	1f15      	subs	r5, r2, #4
 80078e2:	07c2      	lsls	r2, r0, #31
 80078e4:	eb0a 1801 	add.w	r8, sl, r1, lsl #4
			xPrev[j] = 0;
 80078e8:	461c      	mov	r4, r3
 80078ea:	9208      	str	r2, [sp, #32]
 80078ec:	46ab      	mov	fp, r5
 80078ee:	e142      	b.n	8007b76 <xmp3fixpt_IMDCT+0x2a92>
 80078f0:	a93a      	add	r1, sp, #232	; 0xe8
 80078f2:	f7fd f921 	bl	8004b38 <WinPrevious.part.0>
 80078f6:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 80078fa:	9e08      	ldr	r6, [sp, #32]
			xPrev[j] = 0;
 80078fc:	f04f 0c00 	mov.w	ip, #0
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007900:	9903      	ldr	r1, [sp, #12]
 8007902:	3424      	adds	r4, #36	; 0x24
 8007904:	17f0      	asrs	r0, r6, #31
 8007906:	f001 0501 	and.w	r5, r1, #1
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 800790a:	0091      	lsls	r1, r2, #2
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 800790c:	ea80 0383 	eor.w	r3, r0, r3, lsl #2
 8007910:	f106 4200 	add.w	r2, r6, #2147483648	; 0x80000000
			xPrev[j] = 0;
 8007914:	2600      	movs	r6, #0
			y[2*j+0][i] = xp;
 8007916:	f84b 1f04 	str.w	r1, [fp, #4]!
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 800791a:	18eb      	adds	r3, r5, r3
 800791c:	9208      	str	r2, [sp, #32]
	sign = x >> (sizeof(int) * 8 - 1);
 800791e:	17ca      	asrs	r2, r1, #31
	x ^= sign;
 8007920:	910a      	str	r1, [sp, #40]	; 0x28
			y[2*j+1][i] = xp;
 8007922:	f8cb 3080 	str.w	r3, [fp, #128]	; 0x80
			xPrev[j] = 0;
 8007926:	f844 6c48 	str.w	r6, [r4, #-72]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 800792a:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
			y[2*j+1][i] = xp;
 800792c:	9307      	str	r3, [sp, #28]
 800792e:	ea82 0301 	eor.w	r3, r2, r1
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007932:	00b6      	lsls	r6, r6, #2
	x -= sign;
 8007934:	1a9a      	subs	r2, r3, r2
			y[2*j+0][i] = xp;
 8007936:	f8cb 6100 	str.w	r6, [fp, #256]	; 0x100
	sign = x >> (sizeof(int) * 8 - 1);
 800793a:	17f7      	asrs	r7, r6, #31
			xp = xPrevWin[2*j+1] << 2;
 800793c:	993d      	ldr	r1, [sp, #244]	; 0xf4
	x -= sign;
 800793e:	9212      	str	r2, [sp, #72]	; 0x48
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007940:	ea80 0181 	eor.w	r1, r0, r1, lsl #2
 8007944:	194a      	adds	r2, r1, r5
			y[2*j+1][i] = xp;
 8007946:	f8cb 2180 	str.w	r2, [fp, #384]	; 0x180
			xPrev[j] = 0;
 800794a:	f844 cc44 	str.w	ip, [r4, #-68]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 800794e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
			y[2*j+1][i] = xp;
 8007950:	9206      	str	r2, [sp, #24]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007952:	009b      	lsls	r3, r3, #2
			y[2*j+0][i] = xp;
 8007954:	f8cb 3200 	str.w	r3, [fp, #512]	; 0x200
			nonZero |= xp;
 8007958:	ea43 0106 	orr.w	r1, r3, r6
			xp = xPrevWin[2*j+1] << 2;
 800795c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
	x ^= sign;
 800795e:	407e      	eors	r6, r7
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007960:	ea80 0282 	eor.w	r2, r0, r2, lsl #2
	x -= sign;
 8007964:	1bf7      	subs	r7, r6, r7
 8007966:	1956      	adds	r6, r2, r5
 8007968:	4632      	mov	r2, r6
	sign = x >> (sizeof(int) * 8 - 1);
 800796a:	17de      	asrs	r6, r3, #31
			y[2*j+1][i] = xp;
 800796c:	f8cb 2280 	str.w	r2, [fp, #640]	; 0x280
	x ^= sign;
 8007970:	4073      	eors	r3, r6
			xPrev[j] = 0;
 8007972:	f844 cc40 	str.w	ip, [r4, #-64]
			y[2*j+1][i] = xp;
 8007976:	9205      	str	r2, [sp, #20]
	x -= sign;
 8007978:	1b9b      	subs	r3, r3, r6
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 800797a:	9a40      	ldr	r2, [sp, #256]	; 0x100
	sign = x >> (sizeof(int) * 8 - 1);
 800797c:	9e06      	ldr	r6, [sp, #24]
			mOut |= FASTABS(xp);
 800797e:	431f      	orrs	r7, r3
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007980:	0092      	lsls	r2, r2, #2
 8007982:	ea4f 7ae6 	mov.w	sl, r6, asr #31
 8007986:	17d6      	asrs	r6, r2, #31
			y[2*j+0][i] = xp;
 8007988:	f8cb 2300 	str.w	r2, [fp, #768]	; 0x300
			nonZero |= xp;
 800798c:	4311      	orrs	r1, r2
			xp = xPrevWin[2*j+1] << 2;
 800798e:	9b41      	ldr	r3, [sp, #260]	; 0x104
	x ^= sign;
 8007990:	4072      	eors	r2, r6
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007992:	ea80 0383 	eor.w	r3, r0, r3, lsl #2
	x -= sign;
 8007996:	1b92      	subs	r2, r2, r6
	sign = x >> (sizeof(int) * 8 - 1);
 8007998:	9e05      	ldr	r6, [sp, #20]
 800799a:	442b      	add	r3, r5
			mOut |= FASTABS(xp);
 800799c:	4317      	orrs	r7, r2
	x ^= sign;
 800799e:	9a06      	ldr	r2, [sp, #24]
			y[2*j+1][i] = xp;
 80079a0:	f8cb 3380 	str.w	r3, [fp, #896]	; 0x380
	sign = x >> (sizeof(int) * 8 - 1);
 80079a4:	ea4f 7ee6 	mov.w	lr, r6, asr #31
	x ^= sign;
 80079a8:	ea8a 0202 	eor.w	r2, sl, r2
			xPrev[j] = 0;
 80079ac:	f844 cc3c 	str.w	ip, [r4, #-60]
			y[2*j+1][i] = xp;
 80079b0:	9301      	str	r3, [sp, #4]
	x -= sign;
 80079b2:	eba2 0c0a 	sub.w	ip, r2, sl
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 80079b6:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80079b8:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
	sign = x >> (sizeof(int) * 8 - 1);
 80079bc:	9e01      	ldr	r6, [sp, #4]
	x ^= sign;
 80079be:	9a05      	ldr	r2, [sp, #20]
	sign = x >> (sizeof(int) * 8 - 1);
 80079c0:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 80079c4:	009e      	lsls	r6, r3, #2
	x ^= sign;
 80079c6:	ea8e 0302 	eor.w	r3, lr, r2
	x -= sign;
 80079ca:	eba3 0e0e 	sub.w	lr, r3, lr
	x ^= sign;
 80079ce:	9b01      	ldr	r3, [sp, #4]
			y[2*j+0][i] = xp;
 80079d0:	f8cb 6400 	str.w	r6, [fp, #1024]	; 0x400
			nonZero |= xp;
 80079d4:	4331      	orrs	r1, r6
			xp = xPrevWin[2*j+1] << 2;
 80079d6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80079d8:	ea8c 0a03 	eor.w	sl, ip, r3
	x -= sign;
 80079dc:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 80079e0:	ea80 0282 	eor.w	r2, r0, r2, lsl #2
 80079e4:	ebaa 0c0c 	sub.w	ip, sl, ip
 80079e8:	eb02 0e05 	add.w	lr, r2, r5
 80079ec:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
			xPrev[j] = 0;
 80079f0:	f04f 0c00 	mov.w	ip, #0
	sign = x >> (sizeof(int) * 8 - 1);
 80079f4:	17f2      	asrs	r2, r6, #31
			y[2*j+1][i] = xp;
 80079f6:	f8cb e480 	str.w	lr, [fp, #1152]	; 0x480
			xPrev[j] = 0;
 80079fa:	f844 cc38 	str.w	ip, [r4, #-56]
	x ^= sign;
 80079fe:	4056      	eors	r6, r2
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007a00:	9b44      	ldr	r3, [sp, #272]	; 0x110
	x -= sign;
 8007a02:	1ab2      	subs	r2, r6, r2
 8007a04:	009b      	lsls	r3, r3, #2
			mOut |= FASTABS(xp);
 8007a06:	433a      	orrs	r2, r7
			y[2*j+0][i] = xp;
 8007a08:	f8cb 3500 	str.w	r3, [fp, #1280]	; 0x500
	sign = x >> (sizeof(int) * 8 - 1);
 8007a0c:	17df      	asrs	r7, r3, #31
			xp = xPrevWin[2*j+1] << 2;
 8007a0e:	9e45      	ldr	r6, [sp, #276]	; 0x114
			nonZero |= xp;
 8007a10:	4319      	orrs	r1, r3
	x ^= sign;
 8007a12:	407b      	eors	r3, r7
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007a14:	ea80 0686 	eor.w	r6, r0, r6, lsl #2
	x -= sign;
 8007a18:	1bdb      	subs	r3, r3, r7
			xPrev[j] = 0;
 8007a1a:	2700      	movs	r7, #0
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007a1c:	eb06 0c05 	add.w	ip, r6, r5
	sign = x >> (sizeof(int) * 8 - 1);
 8007a20:	ea4f 76ee 	mov.w	r6, lr, asr #31
			mOut |= FASTABS(xp);
 8007a24:	431a      	orrs	r2, r3
			y[2*j+1][i] = xp;
 8007a26:	f8cb c580 	str.w	ip, [fp, #1408]	; 0x580
			xPrev[j] = 0;
 8007a2a:	f844 7c34 	str.w	r7, [r4, #-52]
	x ^= sign;
 8007a2e:	ea86 070e 	eor.w	r7, r6, lr
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007a32:	9b46      	ldr	r3, [sp, #280]	; 0x118
	x -= sign;
 8007a34:	1bbf      	subs	r7, r7, r6
	sign = x >> (sizeof(int) * 8 - 1);
 8007a36:	ea4f 76ec 	mov.w	r6, ip, asr #31
 8007a3a:	009b      	lsls	r3, r3, #2
	x -= sign;
 8007a3c:	970f      	str	r7, [sp, #60]	; 0x3c
			y[2*j+0][i] = xp;
 8007a3e:	f8cb 3600 	str.w	r3, [fp, #1536]	; 0x600
	sign = x >> (sizeof(int) * 8 - 1);
 8007a42:	ea4f 79e3 	mov.w	r9, r3, asr #31
			xp = xPrevWin[2*j+1] << 2;
 8007a46:	9f47      	ldr	r7, [sp, #284]	; 0x11c
			nonZero |= xp;
 8007a48:	4319      	orrs	r1, r3
	x ^= sign;
 8007a4a:	ea89 0303 	eor.w	r3, r9, r3
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007a4e:	ea80 0787 	eor.w	r7, r0, r7, lsl #2
	x -= sign;
 8007a52:	eba3 0309 	sub.w	r3, r3, r9
			xPrev[j] = 0;
 8007a56:	f04f 0900 	mov.w	r9, #0
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007a5a:	442f      	add	r7, r5
			mOut |= FASTABS(xp);
 8007a5c:	431a      	orrs	r2, r3
			y[2*j+1][i] = xp;
 8007a5e:	f8cb 7680 	str.w	r7, [fp, #1664]	; 0x680
			xPrev[j] = 0;
 8007a62:	f844 9c30 	str.w	r9, [r4, #-48]
	x ^= sign;
 8007a66:	ea86 090c 	eor.w	r9, r6, ip
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007a6a:	9b48      	ldr	r3, [sp, #288]	; 0x120
	x -= sign;
 8007a6c:	eba9 0906 	sub.w	r9, r9, r6
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
	sign = x >> (sizeof(int) * 8 - 1);
 8007a76:	ea4f 79e7 	mov.w	r9, r7, asr #31
			y[2*j+0][i] = xp;
 8007a7a:	f8cb 3700 	str.w	r3, [fp, #1792]	; 0x700
 8007a7e:	ea4f 7ae3 	mov.w	sl, r3, asr #31
			xp = xPrevWin[2*j+1] << 2;
 8007a82:	9e49      	ldr	r6, [sp, #292]	; 0x124
			nonZero |= xp;
 8007a84:	4319      	orrs	r1, r3
	x ^= sign;
 8007a86:	ea8a 0303 	eor.w	r3, sl, r3
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007a8a:	ea80 0686 	eor.w	r6, r0, r6, lsl #2
	x -= sign;
 8007a8e:	eba3 030a 	sub.w	r3, r3, sl
			xPrev[j] = 0;
 8007a92:	f04f 0a00 	mov.w	sl, #0
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007a96:	442e      	add	r6, r5
			mOut |= FASTABS(xp);
 8007a98:	431a      	orrs	r2, r3
			y[2*j+1][i] = xp;
 8007a9a:	f8cb 6780 	str.w	r6, [fp, #1920]	; 0x780
			xPrev[j] = 0;
 8007a9e:	f844 ac2c 	str.w	sl, [r4, #-44]
	x ^= sign;
 8007aa2:	ea89 0a07 	eor.w	sl, r9, r7
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007aa6:	9b4a      	ldr	r3, [sp, #296]	; 0x128
	x -= sign;
 8007aa8:	ebaa 0909 	sub.w	r9, sl, r9
			mOut |= FASTABS(xp);
 8007aac:	920b      	str	r2, [sp, #44]	; 0x2c
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007aae:	009b      	lsls	r3, r3, #2
			nonZero |= xp;
 8007ab0:	9a06      	ldr	r2, [sp, #24]
 8007ab2:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
	sign = x >> (sizeof(int) * 8 - 1);
 8007ab6:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8007aba:	ea4f 7ae3 	mov.w	sl, r3, asr #31
 8007abe:	4319      	orrs	r1, r3
			y[2*j+0][i] = xp;
 8007ac0:	f8cb 3800 	str.w	r3, [fp, #2048]	; 0x800
			nonZero |= xp;
 8007ac4:	4311      	orrs	r1, r2
	x ^= sign;
 8007ac6:	ea8a 0303 	eor.w	r3, sl, r3
 8007aca:	9a05      	ldr	r2, [sp, #20]
	x -= sign;
 8007acc:	eba3 0a0a 	sub.w	sl, r3, sl
	x ^= sign;
 8007ad0:	ea89 0306 	eor.w	r3, r9, r6
 8007ad4:	4311      	orrs	r1, r2
			mOut |= FASTABS(xp);
 8007ad6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	x -= sign;
 8007ad8:	eba3 0909 	sub.w	r9, r3, r9
 8007adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ade:	ea42 0a0a 	orr.w	sl, r2, sl
			nonZero |= xp;
 8007ae2:	9a01      	ldr	r2, [sp, #4]
 8007ae4:	4311      	orrs	r1, r2
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007ae6:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
 8007ae8:	ea80 0082 	eor.w	r0, r0, r2, lsl #2
			mOut |= FASTABS(xp);
 8007aec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			nonZero |= xp;
 8007aee:	ea41 010e 	orr.w	r1, r1, lr
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007af2:	4428      	add	r0, r5
	sign = x >> (sizeof(int) * 8 - 1);
 8007af4:	9d07      	ldr	r5, [sp, #28]
			mOut |= FASTABS(xp);
 8007af6:	ea4a 0a02 	orr.w	sl, sl, r2
			nonZero |= xp;
 8007afa:	ea41 010c 	orr.w	r1, r1, ip
 8007afe:	17ea      	asrs	r2, r5, #31
			y[2*j+1][i] = xp;
 8007b00:	f8cb 0880 	str.w	r0, [fp, #2176]	; 0x880
			mOut |= FASTABS(xp);
 8007b04:	ea4a 0a03 	orr.w	sl, sl, r3
			nonZero |= xp;
 8007b08:	4339      	orrs	r1, r7
	x ^= sign;
 8007b0a:	4055      	eors	r5, r2
 8007b0c:	9201      	str	r2, [sp, #4]
			mOut |= FASTABS(xp);
 8007b0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	sign = x >> (sizeof(int) * 8 - 1);
 8007b10:	17c3      	asrs	r3, r0, #31
 8007b12:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
			nonZero |= xp;
 8007b14:	4331      	orrs	r1, r6
			mOut |= FASTABS(xp);
 8007b16:	ea4a 0a02 	orr.w	sl, sl, r2
 8007b1a:	9e10      	ldr	r6, [sp, #64]	; 0x40
	x ^= sign;
 8007b1c:	ea83 0e00 	eor.w	lr, r3, r0
			nonZero |= xp;
 8007b20:	4301      	orrs	r1, r0
			mOut |= FASTABS(xp);
 8007b22:	ea4a 0a07 	orr.w	sl, sl, r7
 8007b26:	9811      	ldr	r0, [sp, #68]	; 0x44
	x -= sign;
 8007b28:	9a01      	ldr	r2, [sp, #4]
 8007b2a:	ebae 0303 	sub.w	r3, lr, r3
 8007b2e:	ea4a 0a06 	orr.w	sl, sl, r6
			xPrev[j] = 0;
 8007b32:	2600      	movs	r6, #0
 8007b34:	1aaa      	subs	r2, r5, r2
		if (nonZero)
 8007b36:	9d07      	ldr	r5, [sp, #28]
			mOut |= FASTABS(xp);
 8007b38:	ea4a 0a00 	orr.w	sl, sl, r0
			nonZero |= xp;
 8007b3c:	980a      	ldr	r0, [sp, #40]	; 0x28
			xPrev[j] = 0;
 8007b3e:	f844 6c28 	str.w	r6, [r4, #-40]
			nonZero |= xp;
 8007b42:	4301      	orrs	r1, r0
			mOut |= FASTABS(xp);
 8007b44:	ea4a 0a09 	orr.w	sl, sl, r9
		if (nonZero)
 8007b48:	ea51 0005 	orrs.w	r0, r1, r5
			mOut |= FASTABS(xp);
 8007b4c:	ea4a 0a03 	orr.w	sl, sl, r3
 8007b50:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007b52:	ea4a 0501 	orr.w	r5, sl, r1
 8007b56:	9902      	ldr	r1, [sp, #8]
		if (nonZero)
 8007b58:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
			mOut |= FASTABS(xp);
 8007b5c:	ea42 0205 	orr.w	r2, r2, r5
		if (nonZero)
 8007b60:	bf18      	it	ne
 8007b62:	4618      	movne	r0, r3
	for (   ; i < bc->nBlocksPrev; i++) {
 8007b64:	3301      	adds	r3, #1
			mOut |= FASTABS(xp);
 8007b66:	4311      	orrs	r1, r2
	for (   ; i < bc->nBlocksPrev; i++) {
 8007b68:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
		if (nonZero)
 8007b6a:	9004      	str	r0, [sp, #16]
	for (   ; i < bc->nBlocksPrev; i++) {
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	9303      	str	r3, [sp, #12]
			mOut |= FASTABS(xp);
 8007b70:	9102      	str	r1, [sp, #8]
	for (   ; i < bc->nBlocksPrev; i++) {
 8007b72:	f340 82de 	ble.w	8008132 <xmp3fixpt_IMDCT+0x304e>
	if (btPrev == 2) {
 8007b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b78:	f1a4 0024 	sub.w	r0, r4, #36	; 0x24
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	f43f aeb7 	beq.w	80078f0 <xmp3fixpt_IMDCT+0x280c>
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007b82:	f854 1c24 	ldr.w	r1, [r4, #-36]
 8007b86:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 8007b8a:	460a      	mov	r2, r1
 8007b8c:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 8007b90:	fb80 5202 	smull	r5, r2, r0, r2
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007b94:	923a      	str	r2, [sp, #232]	; 0xe8
 8007b96:	fb83 0101 	smull	r0, r1, r3, r1
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007b9a:	914b      	str	r1, [sp, #300]	; 0x12c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007b9c:	f854 5c20 	ldr.w	r5, [r4, #-32]
 8007ba0:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
 8007ba4:	462b      	mov	r3, r5
 8007ba6:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 8007baa:	fb80 6303 	smull	r6, r3, r0, r3
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007bae:	933b      	str	r3, [sp, #236]	; 0xec
 8007bb0:	fb81 0505 	smull	r0, r5, r1, r5
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007bb4:	954a      	str	r5, [sp, #296]	; 0x128
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007bb6:	f854 5c1c 	ldr.w	r5, [r4, #-28]
 8007bba:	f8d8 1084 	ldr.w	r1, [r8, #132]	; 0x84
 8007bbe:	462e      	mov	r6, r5
 8007bc0:	f8d8 0050 	ldr.w	r0, [r8, #80]	; 0x50
 8007bc4:	fb80 7606 	smull	r7, r6, r0, r6
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007bc8:	963c      	str	r6, [sp, #240]	; 0xf0
 8007bca:	fb81 0505 	smull	r0, r5, r1, r5
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007bce:	9549      	str	r5, [sp, #292]	; 0x124
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007bd0:	f854 5c18 	ldr.w	r5, [r4, #-24]
 8007bd4:	f8d8 1080 	ldr.w	r1, [r8, #128]	; 0x80
 8007bd8:	462e      	mov	r6, r5
 8007bda:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 8007bde:	fb80 7606 	smull	r7, r6, r0, r6
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007be2:	963d      	str	r6, [sp, #244]	; 0xf4
 8007be4:	fb81 0505 	smull	r0, r5, r1, r5
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007be8:	9548      	str	r5, [sp, #288]	; 0x120
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007bea:	f854 5c14 	ldr.w	r5, [r4, #-20]
 8007bee:	f8d8 107c 	ldr.w	r1, [r8, #124]	; 0x7c
 8007bf2:	462e      	mov	r6, r5
 8007bf4:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8007bf8:	fb80 7606 	smull	r7, r6, r0, r6
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007bfc:	963e      	str	r6, [sp, #248]	; 0xf8
 8007bfe:	fb81 0505 	smull	r0, r5, r1, r5
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007c02:	9547      	str	r5, [sp, #284]	; 0x11c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007c04:	f854 5c10 	ldr.w	r5, [r4, #-16]
 8007c08:	f8d8 1078 	ldr.w	r1, [r8, #120]	; 0x78
 8007c0c:	462e      	mov	r6, r5
 8007c0e:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
 8007c12:	fb80 7606 	smull	r7, r6, r0, r6
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007c16:	963f      	str	r6, [sp, #252]	; 0xfc
 8007c18:	fb81 0505 	smull	r0, r5, r1, r5
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007c1c:	9546      	str	r5, [sp, #280]	; 0x118
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007c1e:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 8007c22:	f8d8 1074 	ldr.w	r1, [r8, #116]	; 0x74
 8007c26:	462e      	mov	r6, r5
 8007c28:	f8d8 0060 	ldr.w	r0, [r8, #96]	; 0x60
 8007c2c:	fb80 7606 	smull	r7, r6, r0, r6
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007c30:	9640      	str	r6, [sp, #256]	; 0x100
 8007c32:	fb81 0505 	smull	r0, r5, r1, r5
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007c36:	9545      	str	r5, [sp, #276]	; 0x114
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007c38:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8007c3c:	f8d8 1070 	ldr.w	r1, [r8, #112]	; 0x70
 8007c40:	462e      	mov	r6, r5
 8007c42:	f8d8 0064 	ldr.w	r0, [r8, #100]	; 0x64
 8007c46:	fb80 7606 	smull	r7, r6, r0, r6
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007c4a:	9641      	str	r6, [sp, #260]	; 0x104
 8007c4c:	fb81 0505 	smull	r0, r5, r1, r5
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007c50:	9544      	str	r5, [sp, #272]	; 0x110
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007c52:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8007c56:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
 8007c5a:	462e      	mov	r6, r5
 8007c5c:	f8d8 0068 	ldr.w	r0, [r8, #104]	; 0x68
 8007c60:	fb80 7606 	smull	r7, r6, r0, r6
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007c64:	9642      	str	r6, [sp, #264]	; 0x108
 8007c66:	fb81 0505 	smull	r0, r5, r1, r5
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007c6a:	9543      	str	r5, [sp, #268]	; 0x10c
 8007c6c:	e645      	b.n	80078fa <xmp3fixpt_IMDCT+0x2816>
 8007c6e:	4619      	mov	r1, r3
 8007c70:	9b31      	ldr	r3, [sp, #196]	; 0xc4
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007c72:	f8df a514 	ldr.w	sl, [pc, #1300]	; 8008188 <xmp3fixpt_IMDCT+0x30a4>
 8007c76:	461a      	mov	r2, r3
 8007c78:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8007c7a:	9103      	str	r1, [sp, #12]
 8007c7c:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 8007c80:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8007c82:	f1a3 0b04 	sub.w	fp, r3, #4
 8007c86:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8007c8a:	4282      	cmp	r2, r0
 8007c8c:	9315      	str	r3, [sp, #84]	; 0x54
 8007c8e:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
 8007c92:	bfa8      	it	ge
 8007c94:	4602      	movge	r2, r0
 8007c96:	9316      	str	r3, [sp, #88]	; 0x58
 8007c98:	07cb      	lsls	r3, r1, #31
 8007c9a:	9227      	str	r2, [sp, #156]	; 0x9c
 8007c9c:	9307      	str	r3, [sp, #28]
 8007c9e:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8007ca2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007ca4:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ca6:	f8da 3088 	ldr.w	r3, [sl, #136]	; 0x88
 8007caa:	3224      	adds	r2, #36	; 0x24
 8007cac:	9318      	str	r3, [sp, #96]	; 0x60
 8007cae:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8007cb2:	9319      	str	r3, [sp, #100]	; 0x64
 8007cb4:	f8da 3084 	ldr.w	r3, [sl, #132]	; 0x84
 8007cb8:	931a      	str	r3, [sp, #104]	; 0x68
 8007cba:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 8007cbe:	931b      	str	r3, [sp, #108]	; 0x6c
 8007cc0:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
 8007cc4:	931c      	str	r3, [sp, #112]	; 0x70
 8007cc6:	f8da 3058 	ldr.w	r3, [sl, #88]	; 0x58
 8007cca:	931d      	str	r3, [sp, #116]	; 0x74
 8007ccc:	f8da 307c 	ldr.w	r3, [sl, #124]	; 0x7c
 8007cd0:	931e      	str	r3, [sp, #120]	; 0x78
 8007cd2:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
 8007cd6:	931f      	str	r3, [sp, #124]	; 0x7c
 8007cd8:	f8da 3078 	ldr.w	r3, [sl, #120]	; 0x78
 8007cdc:	9320      	str	r3, [sp, #128]	; 0x80
 8007cde:	f8da 3060 	ldr.w	r3, [sl, #96]	; 0x60
 8007ce2:	9321      	str	r3, [sp, #132]	; 0x84
 8007ce4:	f8da 3074 	ldr.w	r3, [sl, #116]	; 0x74
 8007ce8:	f8cd a0a0 	str.w	sl, [sp, #160]	; 0xa0
 8007cec:	9322      	str	r3, [sp, #136]	; 0x88
 8007cee:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 8007cf2:	9323      	str	r3, [sp, #140]	; 0x8c
 8007cf4:	f8da 3070 	ldr.w	r3, [sl, #112]	; 0x70
 8007cf8:	9324      	str	r3, [sp, #144]	; 0x90
 8007cfa:	f8da 3068 	ldr.w	r3, [sl, #104]	; 0x68
 8007cfe:	9325      	str	r3, [sp, #148]	; 0x94
 8007d00:	f8da 306c 	ldr.w	r3, [sl, #108]	; 0x6c
 8007d04:	9326      	str	r3, [sp, #152]	; 0x98
 8007d06:	f852 3c24 	ldr.w	r3, [r2, #-36]
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d0e:	461c      	mov	r4, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	fb80 2404 	smull	r2, r4, r0, r4
 8007d16:	9a16      	ldr	r2, [sp, #88]	; 0x58
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007d18:	943a      	str	r4, [sp, #232]	; 0xe8
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	fb80 2303 	smull	r2, r3, r0, r3
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007d20:	934b      	str	r3, [sp, #300]	; 0x12c
 8007d22:	9817      	ldr	r0, [sp, #92]	; 0x5c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007d24:	f851 2c20 	ldr.w	r2, [r1, #-32]
 8007d28:	4605      	mov	r5, r0
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	fb85 0303 	smull	r0, r3, r5, r3
 8007d30:	9818      	ldr	r0, [sp, #96]	; 0x60
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007d32:	933b      	str	r3, [sp, #236]	; 0xec
 8007d34:	4605      	mov	r5, r0
 8007d36:	fb85 0202 	smull	r0, r2, r5, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007d3a:	924a      	str	r2, [sp, #296]	; 0x128
 8007d3c:	9d19      	ldr	r5, [sp, #100]	; 0x64
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007d3e:	f851 2c1c 	ldr.w	r2, [r1, #-28]
 8007d42:	462e      	mov	r6, r5
 8007d44:	4610      	mov	r0, r2
 8007d46:	fb86 5000 	smull	r5, r0, r6, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007d4a:	903c      	str	r0, [sp, #240]	; 0xf0
 8007d4c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8007d4e:	4605      	mov	r5, r0
 8007d50:	fb85 0202 	smull	r0, r2, r5, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007d54:	9249      	str	r2, [sp, #292]	; 0x124
 8007d56:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007d58:	f851 2c18 	ldr.w	r2, [r1, #-24]
 8007d5c:	462e      	mov	r6, r5
 8007d5e:	4610      	mov	r0, r2
 8007d60:	fb86 5000 	smull	r5, r0, r6, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007d64:	903d      	str	r0, [sp, #244]	; 0xf4
 8007d66:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007d68:	4605      	mov	r5, r0
 8007d6a:	fb85 0202 	smull	r0, r2, r5, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007d6e:	9248      	str	r2, [sp, #288]	; 0x120
 8007d70:	9d1d      	ldr	r5, [sp, #116]	; 0x74
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007d72:	f851 2c14 	ldr.w	r2, [r1, #-20]
 8007d76:	462e      	mov	r6, r5
 8007d78:	4610      	mov	r0, r2
 8007d7a:	fb86 5000 	smull	r5, r0, r6, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007d7e:	903e      	str	r0, [sp, #248]	; 0xf8
 8007d80:	981e      	ldr	r0, [sp, #120]	; 0x78
 8007d82:	4605      	mov	r5, r0
 8007d84:	fb85 0202 	smull	r0, r2, r5, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007d88:	9247      	str	r2, [sp, #284]	; 0x11c
 8007d8a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007d8c:	f851 2c10 	ldr.w	r2, [r1, #-16]
 8007d90:	462e      	mov	r6, r5
 8007d92:	4610      	mov	r0, r2
 8007d94:	fb86 5000 	smull	r5, r0, r6, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007d98:	903f      	str	r0, [sp, #252]	; 0xfc
 8007d9a:	9820      	ldr	r0, [sp, #128]	; 0x80
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	fb85 0202 	smull	r0, r2, r5, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007da2:	9246      	str	r2, [sp, #280]	; 0x118
 8007da4:	9d21      	ldr	r5, [sp, #132]	; 0x84
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007da6:	f851 2c0c 	ldr.w	r2, [r1, #-12]
 8007daa:	462e      	mov	r6, r5
 8007dac:	4610      	mov	r0, r2
 8007dae:	fb86 5000 	smull	r5, r0, r6, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007db2:	9040      	str	r0, [sp, #256]	; 0x100
 8007db4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007db6:	4605      	mov	r5, r0
 8007db8:	fb85 0202 	smull	r0, r2, r5, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007dbc:	9245      	str	r2, [sp, #276]	; 0x114
 8007dbe:	9d23      	ldr	r5, [sp, #140]	; 0x8c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007dc0:	f851 2c08 	ldr.w	r2, [r1, #-8]
 8007dc4:	462e      	mov	r6, r5
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	fb86 5000 	smull	r5, r0, r6, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007dcc:	9041      	str	r0, [sp, #260]	; 0x104
 8007dce:	9824      	ldr	r0, [sp, #144]	; 0x90
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	fb85 0202 	smull	r0, r2, r5, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007dd6:	9244      	str	r2, [sp, #272]	; 0x110
 8007dd8:	9d25      	ldr	r5, [sp, #148]	; 0x94
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8007dda:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8007dde:	462e      	mov	r6, r5
 8007de0:	4610      	mov	r0, r2
 8007de2:	fb86 5000 	smull	r5, r0, r6, r0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8007de6:	9042      	str	r0, [sp, #264]	; 0x108
 8007de8:	9826      	ldr	r0, [sp, #152]	; 0x98
 8007dea:	4605      	mov	r5, r0
 8007dec:	fb85 0202 	smull	r0, r2, r5, r2
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007df0:	9f07      	ldr	r7, [sp, #28]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007df2:	00a6      	lsls	r6, r4, #2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8007df4:	9243      	str	r2, [sp, #268]	; 0x10c
			xPrev[j] = 0;
 8007df6:	f04f 0c00 	mov.w	ip, #0
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007dfa:	17f8      	asrs	r0, r7, #31
			y[2*j+0][i] = xp;
 8007dfc:	f84b 6f04 	str.w	r6, [fp, #4]!
	sign = x >> (sizeof(int) * 8 - 1);
 8007e00:	17f4      	asrs	r4, r6, #31
	x ^= sign;
 8007e02:	9608      	str	r6, [sp, #32]
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007e04:	9001      	str	r0, [sp, #4]
			xPrev[j] = 0;
 8007e06:	f04f 0e00 	mov.w	lr, #0
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007e0a:	9a01      	ldr	r2, [sp, #4]
			xPrev[j] = 0;
 8007e0c:	f04f 0800 	mov.w	r8, #0
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007e10:	9803      	ldr	r0, [sp, #12]
 8007e12:	ea82 0383 	eor.w	r3, r2, r3, lsl #2
 8007e16:	f107 4200 	add.w	r2, r7, #2147483648	; 0x80000000
 8007e1a:	f000 0001 	and.w	r0, r0, #1
 8007e1e:	9207      	str	r2, [sp, #28]
			xPrev[j] = 0;
 8007e20:	2200      	movs	r2, #0
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007e22:	181f      	adds	r7, r3, r0
 8007e24:	ea86 0304 	eor.w	r3, r6, r4
			y[2*j+1][i] = xp;
 8007e28:	f8cb 7080 	str.w	r7, [fp, #128]	; 0x80
	x -= sign;
 8007e2c:	1b1c      	subs	r4, r3, r4
			xPrev[j] = 0;
 8007e2e:	f841 2c24 	str.w	r2, [r1, #-36]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007e32:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8007e34:	9414      	str	r4, [sp, #80]	; 0x50
 8007e36:	0092      	lsls	r2, r2, #2
			y[2*j+1][i] = xp;
 8007e38:	970a      	str	r7, [sp, #40]	; 0x28
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007e3a:	4607      	mov	r7, r0
			y[2*j+0][i] = xp;
 8007e3c:	f8cb 2100 	str.w	r2, [fp, #256]	; 0x100
	sign = x >> (sizeof(int) * 8 - 1);
 8007e40:	17d4      	asrs	r4, r2, #31
			xp = xPrevWin[2*j+1] << 2;
 8007e42:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8007e44:	9206      	str	r2, [sp, #24]
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007e46:	9a01      	ldr	r2, [sp, #4]
 8007e48:	940b      	str	r4, [sp, #44]	; 0x2c
 8007e4a:	ea82 0383 	eor.w	r3, r2, r3, lsl #2
			xPrev[j] = 0;
 8007e4e:	2200      	movs	r2, #0
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007e50:	18c4      	adds	r4, r0, r3
			y[2*j+1][i] = xp;
 8007e52:	f8cb 4180 	str.w	r4, [fp, #384]	; 0x180
			xPrev[j] = 0;
 8007e56:	f841 2c20 	str.w	r2, [r1, #-32]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007e5a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007e5c:	9a01      	ldr	r2, [sp, #4]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007e5e:	009b      	lsls	r3, r3, #2
			y[2*j+1][i] = xp;
 8007e60:	940c      	str	r4, [sp, #48]	; 0x30
			y[2*j+0][i] = xp;
 8007e62:	f8cb 3200 	str.w	r3, [fp, #512]	; 0x200
 8007e66:	17de      	asrs	r6, r3, #31
			xp = xPrevWin[2*j+1] << 2;
 8007e68:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8007e6a:	4635      	mov	r5, r6
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007e6c:	ea82 0484 	eor.w	r4, r2, r4, lsl #2
			xPrev[j] = 0;
 8007e70:	2200      	movs	r2, #0
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007e72:	1906      	adds	r6, r0, r4
			y[2*j+1][i] = xp;
 8007e74:	f8cb 6280 	str.w	r6, [fp, #640]	; 0x280
			xPrev[j] = 0;
 8007e78:	f841 2c1c 	str.w	r2, [r1, #-28]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007e7c:	9c40      	ldr	r4, [sp, #256]	; 0x100
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007e7e:	9a01      	ldr	r2, [sp, #4]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007e80:	00a4      	lsls	r4, r4, #2
			y[2*j+1][i] = xp;
 8007e82:	960d      	str	r6, [sp, #52]	; 0x34
			y[2*j+0][i] = xp;
 8007e84:	f8cb 4300 	str.w	r4, [fp, #768]	; 0x300
			xp = xPrevWin[2*j+1] << 2;
 8007e88:	9e41      	ldr	r6, [sp, #260]	; 0x104
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007e8a:	ea82 0686 	eor.w	r6, r2, r6, lsl #2
 8007e8e:	463a      	mov	r2, r7
 8007e90:	443e      	add	r6, r7
			y[2*j+1][i] = xp;
 8007e92:	960e      	str	r6, [sp, #56]	; 0x38
 8007e94:	f8cb 6380 	str.w	r6, [fp, #896]	; 0x380
			xPrev[j] = 0;
 8007e98:	f841 cc18 	str.w	ip, [r1, #-24]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007e9c:	9f42      	ldr	r7, [sp, #264]	; 0x108
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007e9e:	9801      	ldr	r0, [sp, #4]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007ea0:	00bf      	lsls	r7, r7, #2
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007ea2:	9205      	str	r2, [sp, #20]
			y[2*j+0][i] = xp;
 8007ea4:	f8cb 7400 	str.w	r7, [fp, #1024]	; 0x400
 8007ea8:	ea4f 7ce7 	mov.w	ip, r7, asr #31
			xp = xPrevWin[2*j+1] << 2;
 8007eac:	9e43      	ldr	r6, [sp, #268]	; 0x10c
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007eae:	ea80 0686 	eor.w	r6, r0, r6, lsl #2
 8007eb2:	9801      	ldr	r0, [sp, #4]
 8007eb4:	4416      	add	r6, r2
			y[2*j+1][i] = xp;
 8007eb6:	f8cb 6480 	str.w	r6, [fp, #1152]	; 0x480
			xPrev[j] = 0;
 8007eba:	f841 ec14 	str.w	lr, [r1, #-20]
			y[2*j+1][i] = xp;
 8007ebe:	960f      	str	r6, [sp, #60]	; 0x3c
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007ec0:	9e44      	ldr	r6, [sp, #272]	; 0x110
 8007ec2:	ea4f 0e86 	mov.w	lr, r6, lsl #2
			y[2*j+0][i] = xp;
 8007ec6:	f8cb e500 	str.w	lr, [fp, #1280]	; 0x500
 8007eca:	ea4f 79ee 	mov.w	r9, lr, asr #31
			xp = xPrevWin[2*j+1] << 2;
 8007ece:	9e45      	ldr	r6, [sp, #276]	; 0x114
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007ed0:	ea80 0686 	eor.w	r6, r0, r6, lsl #2
 8007ed4:	9801      	ldr	r0, [sp, #4]
 8007ed6:	4416      	add	r6, r2
			y[2*j+1][i] = xp;
 8007ed8:	f8cb 6580 	str.w	r6, [fp, #1408]	; 0x580
			xPrev[j] = 0;
 8007edc:	f841 8c10 	str.w	r8, [r1, #-16]
			y[2*j+1][i] = xp;
 8007ee0:	9610      	str	r6, [sp, #64]	; 0x40
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007ee2:	9e46      	ldr	r6, [sp, #280]	; 0x118
 8007ee4:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8007ee8:	ea4f 76e8 	mov.w	r6, r8, asr #31
			y[2*j+0][i] = xp;
 8007eec:	f8cb 8600 	str.w	r8, [fp, #1536]	; 0x600
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007ef0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
	x ^= sign;
 8007ef2:	ea88 0a06 	eor.w	sl, r8, r6
 8007ef6:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8007efa:	ea80 0a82 	eor.w	sl, r0, r2, lsl #2
	x -= sign;
 8007efe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007f00:	1b82      	subs	r2, r0, r6
 8007f02:	9805      	ldr	r0, [sp, #20]
	x ^= sign;
 8007f04:	ea8e 0609 	eor.w	r6, lr, r9
 8007f08:	4482      	add	sl, r0
	x -= sign;
 8007f0a:	9213      	str	r2, [sp, #76]	; 0x4c
	x ^= sign;
 8007f0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007f0e:	462a      	mov	r2, r5
			y[2*j+1][i] = xp;
 8007f10:	f8cb a680 	str.w	sl, [fp, #1664]	; 0x680
	x -= sign;
 8007f14:	eba6 0909 	sub.w	r9, r6, r9
 8007f18:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
			xPrev[j] = 0;
 8007f1c:	f04f 0a00 	mov.w	sl, #0
 8007f20:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	x ^= sign;
 8007f24:	ea87 090c 	eor.w	r9, r7, ip
 8007f28:	f841 ac0c 	str.w	sl, [r1, #-12]
 8007f2c:	ea83 0a05 	eor.w	sl, r3, r5
			nonZero |= xp;
 8007f30:	9d06      	ldr	r5, [sp, #24]
	x -= sign;
 8007f32:	eba9 0c0c 	sub.w	ip, r9, ip
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007f36:	9e48      	ldr	r6, [sp, #288]	; 0x120
 8007f38:	ebaa 0a02 	sub.w	sl, sl, r2
			nonZero |= xp;
 8007f3c:	432b      	orrs	r3, r5
	x ^= sign;
 8007f3e:	4045      	eors	r5, r0
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007f40:	00b6      	lsls	r6, r6, #2
 8007f42:	9506      	str	r5, [sp, #24]
 8007f44:	17e5      	asrs	r5, r4, #31
	x -= sign;
 8007f46:	9a06      	ldr	r2, [sp, #24]
			nonZero |= xp;
 8007f48:	4323      	orrs	r3, r4
			y[2*j+0][i] = xp;
 8007f4a:	f8cb 6700 	str.w	r6, [fp, #1792]	; 0x700
	x ^= sign;
 8007f4e:	406c      	eors	r4, r5
	x -= sign;
 8007f50:	1a12      	subs	r2, r2, r0
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007f52:	9849      	ldr	r0, [sp, #292]	; 0x124
 8007f54:	1b64      	subs	r4, r4, r5
			nonZero |= xp;
 8007f56:	433b      	orrs	r3, r7
			mOut |= FASTABS(xp);
 8007f58:	ea42 020a 	orr.w	r2, r2, sl
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007f5c:	4681      	mov	r9, r0
 8007f5e:	9801      	ldr	r0, [sp, #4]
			nonZero |= xp;
 8007f60:	ea43 030e 	orr.w	r3, r3, lr
			mOut |= FASTABS(xp);
 8007f64:	4314      	orrs	r4, r2
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007f66:	9a05      	ldr	r2, [sp, #20]
 8007f68:	ea80 0789 	eor.w	r7, r0, r9, lsl #2
			nonZero |= xp;
 8007f6c:	ea43 0308 	orr.w	r3, r3, r8
			mOut |= FASTABS(xp);
 8007f70:	ea44 040c 	orr.w	r4, r4, ip
			xPrev[j] = 0;
 8007f74:	f04f 0c00 	mov.w	ip, #0
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8007f78:	18b8      	adds	r0, r7, r2
			mOut |= FASTABS(xp);
 8007f7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
	sign = x >> (sizeof(int) * 8 - 1);
 8007f7c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007f7e:	ea4f 7ae6 	mov.w	sl, r6, asr #31
			y[2*j+1][i] = xp;
 8007f82:	f8cb 0780 	str.w	r0, [fp, #1920]	; 0x780
			nonZero |= xp;
 8007f86:	4333      	orrs	r3, r6
			xPrev[j] = 0;
 8007f88:	f841 cc08 	str.w	ip, [r1, #-8]
			mOut |= FASTABS(xp);
 8007f8c:	ea44 0c02 	orr.w	ip, r4, r2
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007f90:	9c4a      	ldr	r4, [sp, #296]	; 0x128
	x ^= sign;
 8007f92:	ea86 090a 	eor.w	r9, r6, sl
			y[2*j+1][i] = xp;
 8007f96:	9006      	str	r0, [sp, #24]
	sign = x >> (sizeof(int) * 8 - 1);
 8007f98:	ea4f 7ee7 	mov.w	lr, r7, asr #31
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8007f9c:	00a0      	lsls	r0, r4, #2
			mOut |= FASTABS(xp);
 8007f9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	x -= sign;
 8007fa0:	eba9 0a0a 	sub.w	sl, r9, sl
	x ^= sign;
 8007fa4:	463c      	mov	r4, r7
 8007fa6:	ea87 080e 	eor.w	r8, r7, lr
 8007faa:	ea4c 0202 	orr.w	r2, ip, r2
			nonZero |= xp;
 8007fae:	9f08      	ldr	r7, [sp, #32]
 8007fb0:	4303      	orrs	r3, r0
			mOut |= FASTABS(xp);
 8007fb2:	ea42 020a 	orr.w	r2, r2, sl
	sign = x >> (sizeof(int) * 8 - 1);
 8007fb6:	ea4f 7ae0 	mov.w	sl, r0, asr #31
			nonZero |= xp;
 8007fba:	433b      	orrs	r3, r7
 8007fbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	x ^= sign;
 8007fbe:	ea80 060a 	eor.w	r6, r0, sl
	x -= sign;
 8007fc2:	eba8 0e0e 	sub.w	lr, r8, lr
 8007fc6:	4323      	orrs	r3, r4
	sign = x >> (sizeof(int) * 8 - 1);
 8007fc8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	x -= sign;
 8007fca:	eba6 060a 	sub.w	r6, r6, sl
	sign = x >> (sizeof(int) * 8 - 1);
 8007fce:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 8007fd2:	ea4f 78e4 	mov.w	r8, r4, asr #31
	x ^= sign;
 8007fd6:	4627      	mov	r7, r4
			mOut |= FASTABS(xp);
 8007fd8:	4332      	orrs	r2, r6
 8007fda:	ea85 090c 	eor.w	r9, r5, ip
 8007fde:	ea84 0608 	eor.w	r6, r4, r8
 8007fe2:	9c14      	ldr	r4, [sp, #80]	; 0x50
			nonZero |= xp;
 8007fe4:	432b      	orrs	r3, r5
	sign = x >> (sizeof(int) * 8 - 1);
 8007fe6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
			mOut |= FASTABS(xp);
 8007fe8:	4322      	orrs	r2, r4
	x -= sign;
 8007fea:	eba6 0608 	sub.w	r6, r6, r8
	sign = x >> (sizeof(int) * 8 - 1);
 8007fee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	x -= sign;
 8007ff0:	eba9 0c0c 	sub.w	ip, r9, ip
			nonZero |= xp;
 8007ff4:	433b      	orrs	r3, r7
	sign = x >> (sizeof(int) * 8 - 1);
 8007ff6:	ea4f 79e5 	mov.w	r9, r5, asr #31
			mOut |= FASTABS(xp);
 8007ffa:	ea42 020e 	orr.w	r2, r2, lr
	x -= sign;
 8007ffe:	9608      	str	r6, [sp, #32]
	sign = x >> (sizeof(int) * 8 - 1);
 8008000:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 8008004:	9e10      	ldr	r6, [sp, #64]	; 0x40
	x ^= sign;
 8008006:	4627      	mov	r7, r4
 8008008:	ea85 0a09 	eor.w	sl, r5, r9
			nonZero |= xp;
 800800c:	432b      	orrs	r3, r5
			mOut |= FASTABS(xp);
 800800e:	ea42 020c 	orr.w	r2, r2, ip
 8008012:	9d08      	ldr	r5, [sp, #32]
 8008014:	ea84 040e 	eor.w	r4, r4, lr
			nonZero |= xp;
 8008018:	433b      	orrs	r3, r7
	x -= sign;
 800801a:	ebaa 0909 	sub.w	r9, sl, r9
	x ^= sign;
 800801e:	4637      	mov	r7, r6
			mOut |= FASTABS(xp);
 8008020:	432a      	orrs	r2, r5
			y[2*j+0][i] = xp;
 8008022:	f8cb 0800 	str.w	r0, [fp, #2048]	; 0x800
	sign = x >> (sizeof(int) * 8 - 1);
 8008026:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800802a:	9811      	ldr	r0, [sp, #68]	; 0x44
	x -= sign;
 800802c:	eba4 040e 	sub.w	r4, r4, lr
			nonZero |= xp;
 8008030:	433b      	orrs	r3, r7
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8008032:	9d01      	ldr	r5, [sp, #4]
 8008034:	9f4b      	ldr	r7, [sp, #300]	; 0x12c
			mOut |= FASTABS(xp);
 8008036:	ea42 0209 	orr.w	r2, r2, r9
	x ^= sign;
 800803a:	ea86 0c08 	eor.w	ip, r6, r8
	sign = x >> (sizeof(int) * 8 - 1);
 800803e:	17c6      	asrs	r6, r0, #31
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8008040:	ea85 0587 	eor.w	r5, r5, r7, lsl #2
			mOut |= FASTABS(xp);
 8008044:	4322      	orrs	r2, r4
 8008046:	9f06      	ldr	r7, [sp, #24]
	x ^= sign;
 8008048:	4604      	mov	r4, r0
	x -= sign;
 800804a:	ebac 0808 	sub.w	r8, ip, r8
			nonZero |= xp;
 800804e:	4303      	orrs	r3, r0
	sign = x >> (sizeof(int) * 8 - 1);
 8008050:	ea4f 7ee7 	mov.w	lr, r7, asr #31
	x ^= sign;
 8008054:	4074      	eors	r4, r6
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8008056:	9f05      	ldr	r7, [sp, #20]
			mOut |= FASTABS(xp);
 8008058:	ea42 0208 	orr.w	r2, r2, r8
	x -= sign;
 800805c:	1ba6      	subs	r6, r4, r6
	x ^= sign;
 800805e:	9c06      	ldr	r4, [sp, #24]
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8008060:	443d      	add	r5, r7
 8008062:	ea84 000e 	eor.w	r0, r4, lr
			nonZero |= xp;
 8008066:	4323      	orrs	r3, r4
	sign = x >> (sizeof(int) * 8 - 1);
 8008068:	ea4f 7ce5 	mov.w	ip, r5, asr #31
			mOut |= FASTABS(xp);
 800806c:	4332      	orrs	r2, r6
	x -= sign;
 800806e:	eba0 0e0e 	sub.w	lr, r0, lr
		if (nonZero)
 8008072:	ea53 0405 	orrs.w	r4, r3, r5
	x ^= sign;
 8008076:	ea85 070c 	eor.w	r7, r5, ip
			xPrev[j] = 0;
 800807a:	f04f 0000 	mov.w	r0, #0
			mOut |= FASTABS(xp);
 800807e:	ea42 020e 	orr.w	r2, r2, lr
			y[2*j+1][i] = xp;
 8008082:	f8cb 5880 	str.w	r5, [fp, #2176]	; 0x880
	x -= sign;
 8008086:	eba7 0c0c 	sub.w	ip, r7, ip
		if (nonZero)
 800808a:	e9dd 3403 	ldrd	r3, r4, [sp, #12]
			mOut |= FASTABS(xp);
 800808e:	ea42 0e0c 	orr.w	lr, r2, ip
 8008092:	f101 0224 	add.w	r2, r1, #36	; 0x24
		if (nonZero)
 8008096:	bf18      	it	ne
 8008098:	461c      	movne	r4, r3
	for (   ; i < bc->nBlocksPrev; i++) {
 800809a:	3301      	adds	r3, #1
		if (nonZero)
 800809c:	9404      	str	r4, [sp, #16]
	for (   ; i < bc->nBlocksPrev; i++) {
 800809e:	9303      	str	r3, [sp, #12]
			xPrev[j] = 0;
 80080a0:	f841 0c04 	str.w	r0, [r1, #-4]
			mOut |= FASTABS(xp);
 80080a4:	9802      	ldr	r0, [sp, #8]
 80080a6:	ea40 000e 	orr.w	r0, r0, lr
 80080aa:	9002      	str	r0, [sp, #8]
	for (   ; i < bc->nBlocksPrev; i++) {
 80080ac:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80080ae:	4283      	cmp	r3, r0
 80080b0:	f6ff ae29 	blt.w	8007d06 <xmp3fixpt_IMDCT+0x2c22>
 80080b4:	461a      	mov	r2, r3
 80080b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80080b8:	912c      	str	r1, [sp, #176]	; 0xb0
 80080ba:	4293      	cmp	r3, r2
 80080bc:	f8dd a0a0 	ldr.w	sl, [sp, #160]	; 0xa0
 80080c0:	f73f ac04 	bgt.w	80078cc <xmp3fixpt_IMDCT+0x27e8>
	for (   ; i < 32; i++) {
 80080c4:	2b1f      	cmp	r3, #31
 80080c6:	dc10      	bgt.n	80080ea <xmp3fixpt_IMDCT+0x3006>
 80080c8:	461c      	mov	r4, r3
 80080ca:	9b31      	ldr	r3, [sp, #196]	; 0xc4
			y[j][i] = 0;
 80080cc:	2100      	movs	r1, #0
 80080ce:	461a      	mov	r2, r3
 80080d0:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 80080d4:	f500 6210 	add.w	r2, r0, #2304	; 0x900
	for (   ; i < bc->nBlocksPrev; i++) {
 80080d8:	4603      	mov	r3, r0
			y[j][i] = 0;
 80080da:	f843 1b80 	str.w	r1, [r3], #128
		for (j = 0; j < 18; j++) 
 80080de:	4293      	cmp	r3, r2
 80080e0:	d1fb      	bne.n	80080da <xmp3fixpt_IMDCT+0x2ff6>
	for (   ; i < 32; i++) {
 80080e2:	3401      	adds	r4, #1
 80080e4:	3004      	adds	r0, #4
 80080e6:	2c20      	cmp	r4, #32
 80080e8:	d1f4      	bne.n	80080d4 <xmp3fixpt_IMDCT+0x2ff0>
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 80080ea:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80080ec:	f641 3408 	movw	r4, #6920	; 0x1b08
 80080f0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
	mi->prevWinSwitch[ch] = bc.currWinSwitch;		/* 0 means not a mixed block (either all short or all long) */
	mi->gb[ch] = bc.gbOut;
 80080f2:	f641 3518 	movw	r5, #6936	; 0x1b18
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 80080f6:	9839      	ldr	r0, [sp, #228]	; 0xe4
 80080f8:	4413      	add	r3, r2
 80080fa:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80080fc:	4402      	add	r2, r0
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 80080fe:	9836      	ldr	r0, [sp, #216]	; 0xd8
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 8008100:	011b      	lsls	r3, r3, #4
 8008102:	4611      	mov	r1, r2
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 8008104:	4606      	mov	r6, r0
 8008106:	9804      	ldr	r0, [sp, #16]
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 8008108:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
	__asm__ ("clz %0, %1" : "=r" (numZeros) : "r" (x) : "cc");
 800810c:	9a02      	ldr	r2, [sp, #8]
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800810e:	6030      	str	r0, [r6, #0]
	mi->prevWinSwitch[ch] = bc.currWinSwitch;		/* 0 means not a mixed block (either all short or all long) */
 8008110:	f641 3110 	movw	r1, #6928	; 0x1b10
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 8008114:	9e33      	ldr	r6, [sp, #204]	; 0xcc

	ASSERT(mi->numPrevIMDCT[ch] <= NBANDS);

	/* output has gained 2 int bits */
	return 0;
 8008116:	2000      	movs	r0, #0
 8008118:	fab2 f282 	clz	r2, r2
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 800811c:	441e      	add	r6, r3
	bc->gbOut = CLZ(mOut) - 1;
 800811e:	3a01      	subs	r2, #1
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 8008120:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
	mi->gb[ch] = bc.gbOut;
 8008122:	9e37      	ldr	r6, [sp, #220]	; 0xdc
 8008124:	5172      	str	r2, [r6, r5]
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 8008126:	5133      	str	r3, [r6, r4]
	mi->prevWinSwitch[ch] = bc.currWinSwitch;		/* 0 means not a mixed block (either all short or all long) */
 8008128:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800812a:	5073      	str	r3, [r6, r1]
}
 800812c:	b04d      	add	sp, #308	; 0x134
 800812e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008132:	4613      	mov	r3, r2
 8008134:	e7c6      	b.n	80080c4 <xmp3fixpt_IMDCT+0x2fe0>
 8008136:	a93a      	add	r1, sp, #232	; 0xe8
 8008138:	9815      	ldr	r0, [sp, #84]	; 0x54
 800813a:	930d      	str	r3, [sp, #52]	; 0x34
 800813c:	f7fc fcfc 	bl	8004b38 <WinPrevious.part.0>
 8008140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008142:	f7fd bddb 	b.w	8005cfc <xmp3fixpt_IMDCT+0xc18>
	} else if (si->sis[gr][ch].blockType == 2 && si->sis[gr][ch].mixedBlock) {
 8008146:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008148:	932b      	str	r3, [sp, #172]	; 0xac
 800814a:	b14b      	cbz	r3, 8008160 <xmp3fixpt_IMDCT+0x307c>
		nBfly = bc.nBlocksLong - 1;
 800814c:	1e4b      	subs	r3, r1, #1
		bc.nBlocksLong = blockCutoff;	
 800814e:	9116      	str	r1, [sp, #88]	; 0x58
 8008150:	00d9      	lsls	r1, r3, #3
 8008152:	18cc      	adds	r4, r1, r3
 8008154:	0064      	lsls	r4, r4, #1
 8008156:	f104 0208 	add.w	r2, r4, #8
 800815a:	9213      	str	r2, [sp, #76]	; 0x4c
		nBfly = bc.nBlocksLong - 1;
 800815c:	f7fd bd3c 	b.w	8005bd8 <xmp3fixpt_IMDCT+0xaf4>
		bc.nBlocksLong = 0;
 8008160:	9316      	str	r3, [sp, #88]	; 0x58
 8008162:	2308      	movs	r3, #8
 8008164:	9313      	str	r3, [sp, #76]	; 0x4c
 8008166:	463b      	mov	r3, r7
 8008168:	f7fd b8f6 	b.w	8005358 <xmp3fixpt_IMDCT+0x274>
	for (   ; i < bc->nBlocksPrev; i++) {
 800816c:	932a      	str	r3, [sp, #168]	; 0xa8
 800816e:	e7a9      	b.n	80080c4 <xmp3fixpt_IMDCT+0x2fe0>
	for (   ; i < bc->nBlocksTotal; i++) {
 8008170:	9304      	str	r3, [sp, #16]
 8008172:	f7ff bb9e 	b.w	80078b2 <xmp3fixpt_IMDCT+0x27ce>
	mOut = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	9316      	str	r3, [sp, #88]	; 0x58
	for(i = 0; i < bc->nBlocksLong; i++) {
 800817a:	9302      	str	r3, [sp, #8]
 800817c:	f7fe bce7 	b.w	8006b4e <xmp3fixpt_IMDCT+0x1a6a>
		return -1;
 8008180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008184:	e7d2      	b.n	800812c <xmp3fixpt_IMDCT+0x3048>
 8008186:	bf00      	nop
 8008188:	080238b4 	.word	0x080238b4

0800818c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800818c:	b508      	push	{r3, lr}
  /* init code for FATFS */
  MX_FATFS_Init();
 800818e:	f7fb fc79 	bl	8003a84 <MX_FATFS_Init>
 8008192:	4d0f      	ldr	r5, [pc, #60]	; (80081d0 <StartDefaultTask+0x44>)

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8008194:	f004 f88a 	bl	800c2ac <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */

  vTaskDelay(1000);
 8008198:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800819c:	f016 fd08 	bl	801ebb0 <vTaskDelay>

  xprintf("waiting for USB mass storage\n");
 80081a0:	480c      	ldr	r0, [pc, #48]	; (80081d4 <StartDefaultTask+0x48>)

  do
  {
	  xprintf(".");
 80081a2:	4c0d      	ldr	r4, [pc, #52]	; (80081d8 <StartDefaultTask+0x4c>)
  xprintf("waiting for USB mass storage\n");
 80081a4:	f003 fef6 	bl	800bf94 <xprintf>
	  xprintf(".");
 80081a8:	4620      	mov	r0, r4
 80081aa:	f003 fef3 	bl	800bf94 <xprintf>
	  vTaskDelay(250);
 80081ae:	20fa      	movs	r0, #250	; 0xfa
 80081b0:	f016 fcfe 	bl	801ebb0 <vTaskDelay>
  } while(Appli_state != APPLICATION_READY);
 80081b4:	782b      	ldrb	r3, [r5, #0]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d1f6      	bne.n	80081a8 <StartDefaultTask+0x1c>


  ////////////////////////////
  ////////////////////////////

  xprintf("Starting player...\n");
 80081ba:	4808      	ldr	r0, [pc, #32]	; (80081dc <StartDefaultTask+0x50>)
 80081bc:	f003 feea 	bl	800bf94 <xprintf>
  mp3_player_main("1:/");
 80081c0:	4807      	ldr	r0, [pc, #28]	; (80081e0 <StartDefaultTask+0x54>)
 80081c2:	f001 f845 	bl	8009250 <mp3_player_main>
  xprintf("Player finished\n");
 80081c6:	4807      	ldr	r0, [pc, #28]	; (80081e4 <StartDefaultTask+0x58>)
 80081c8:	f003 fee4 	bl	800bf94 <xprintf>
 80081cc:	e7fe      	b.n	80081cc <StartDefaultTask+0x40>
 80081ce:	bf00      	nop
 80081d0:	20005eb8 	.word	0x20005eb8
 80081d4:	08023044 	.word	0x08023044
 80081d8:	08025d84 	.word	0x08025d84
 80081dc:	08023064 	.word	0x08023064
 80081e0:	08023078 	.word	0x08023078
 80081e4:	0802307c 	.word	0x0802307c

080081e8 <__io_putchar>:
		while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE) == RESET) { ; }
 80081e8:	4b04      	ldr	r3, [pc, #16]	; (80081fc <__io_putchar+0x14>)
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	69d3      	ldr	r3, [r2, #28]
 80081ee:	061b      	lsls	r3, r3, #24
 80081f0:	d5fc      	bpl.n	80081ec <__io_putchar+0x4>
		huart1.Instance->TDR = (uint16_t)data;
 80081f2:	b2c3      	uxtb	r3, r0
}
 80081f4:	2000      	movs	r0, #0
		huart1.Instance->TDR = (uint16_t)data;
 80081f6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	2000f1a0 	.word	0x2000f1a0

08008200 <SystemClock_Config>:
  __HAL_RCC_PWR_CLK_ENABLE();
 8008200:	4a3f      	ldr	r2, [pc, #252]	; (8008300 <SystemClock_Config+0x100>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008202:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008206:	4b3f      	ldr	r3, [pc, #252]	; (8008304 <SystemClock_Config+0x104>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8008208:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800820a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 800820e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8008212:	6411      	str	r1, [r2, #64]	; 0x40
{
 8008214:	b0b4      	sub	sp, #208	; 0xd0
  __HAL_RCC_PWR_CLK_ENABLE();
 8008216:	6c12      	ldr	r2, [r2, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008218:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800821a:	2609      	movs	r6, #9
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800821c:	2501      	movs	r5, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800821e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008222:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
 8008226:	2719      	movs	r7, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 8008228:	9200      	str	r2, [sp, #0]
 800822a:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008232:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLN = 400;
 8008234:	f44f 72c8 	mov.w	r2, #400	; 0x190
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008238:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800823a:	9008      	str	r0, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800823c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8008240:	9607      	str	r6, [sp, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008242:	950c      	str	r5, [sp, #48]	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008244:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8008246:	2308      	movs	r3, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008248:	9801      	ldr	r0, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800824a:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800824c:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800824e:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 400;
 8008250:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8008252:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 25;
 8008254:	e9cd 170e 	strd	r1, r7, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008258:	f009 fc80 	bl	8011b5c <HAL_RCC_OscConfig>
 800825c:	b100      	cbz	r0, 8008260 <SystemClock_Config+0x60>
 800825e:	e7fe      	b.n	800825e <SystemClock_Config+0x5e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008260:	f009 fbd4 	bl	8011a0c <HAL_PWREx_EnableOverDrive>
 8008264:	b100      	cbz	r0, 8008268 <SystemClock_Config+0x68>
 8008266:	e7fe      	b.n	8008266 <SystemClock_Config+0x66>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008268:	270f      	movs	r7, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800826a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800826e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8008272:	2106      	movs	r1, #6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008274:	9702      	str	r7, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008276:	e9cd 4003 	strd	r4, r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800827a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800827c:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8008280:	f009 fe38 	bl	8011ef4 <HAL_RCC_ClockConfig>
 8008284:	b100      	cbz	r0, 8008288 <SystemClock_Config+0x88>
 8008286:	e7fe      	b.n	8008286 <SystemClock_Config+0x86>
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8008288:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800828c:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8008290:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008294:	f44f 7200 	mov.w	r2, #512	; 0x200
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8008298:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800829c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8008308 <SystemClock_Config+0x108>
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80082a0:	2604      	movs	r6, #4
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80082a2:	9029      	str	r0, [sp, #164]	; 0xa4
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80082a4:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80082a6:	902e      	str	r0, [sp, #184]	; 0xb8
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80082a8:	9033      	str	r0, [sp, #204]	; 0xcc
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80082aa:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80082ac:	9415      	str	r4, [sp, #84]	; 0x54
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80082ae:	9416      	str	r4, [sp, #88]	; 0x58
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80082b0:	951d      	str	r5, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80082b2:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80082b6:	9332      	str	r3, [sp, #200]	; 0xc8
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80082b8:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80082bc:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80082be:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80082c2:	e9cd 8e13 	strd	r8, lr, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4;
 80082c6:	e9cd 6619 	strd	r6, r6, [sp, #100]	; 0x64
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80082ca:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80082ce:	f009 ff57 	bl	8012180 <HAL_RCCEx_PeriphCLKConfig>
 80082d2:	4604      	mov	r4, r0
 80082d4:	b100      	cbz	r0, 80082d8 <SystemClock_Config+0xd8>
 80082d6:	e7fe      	b.n	80082d6 <SystemClock_Config+0xd6>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80082d8:	f009 ff0a 	bl	80120f0 <HAL_RCC_GetHCLKFreq>
 80082dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80082e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80082e4:	f007 f8de 	bl	800f4a4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80082e8:	4630      	mov	r0, r6
 80082ea:	f007 f8f3 	bl	800f4d4 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80082ee:	4622      	mov	r2, r4
 80082f0:	4639      	mov	r1, r7
 80082f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082f6:	f007 f891 	bl	800f41c <HAL_NVIC_SetPriority>
}
 80082fa:	b034      	add	sp, #208	; 0xd0
 80082fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008300:	40023800 	.word	0x40023800
 8008304:	40007000 	.word	0x40007000
 8008308:	01b14868 	.word	0x01b14868

0800830c <main>:
{
 800830c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8008310:	b0a9      	sub	sp, #164	; 0xa4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008312:	2502      	movs	r5, #2
  HAL_Init();
 8008314:	f006 fed4 	bl	800f0c0 <HAL_Init>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8008318:	2708      	movs	r7, #8
  SystemClock_Config();
 800831a:	f7ff ff71 	bl	8008200 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800831e:	4bc9      	ldr	r3, [pc, #804]	; (8008644 <main+0x338>)
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008320:	2201      	movs	r2, #1
 8008322:	2120      	movs	r1, #32
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008324:	6b1c      	ldr	r4, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008326:	2600      	movs	r6, #0
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008328:	48c7      	ldr	r0, [pc, #796]	; (8008648 <main+0x33c>)
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800832a:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800832e:	f044 0410 	orr.w	r4, r4, #16
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8008332:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8008336:	f04f 080a 	mov.w	r8, #10
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800833a:	f04f 0910 	mov.w	r9, #16
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800833e:	631c      	str	r4, [r3, #48]	; 0x30
 8008340:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8008342:	f004 0e10 	and.w	lr, r4, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008346:	4614      	mov	r4, r2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008348:	f8cd e000 	str.w	lr, [sp]
 800834c:	f8dd e000 	ldr.w	lr, [sp]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008350:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 8008354:	f04e 0e40 	orr.w	lr, lr, #64	; 0x40
 8008358:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
 800835c:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 8008360:	f00e 0e40 	and.w	lr, lr, #64	; 0x40
 8008364:	f8cd e004 	str.w	lr, [sp, #4]
 8008368:	f8dd e004 	ldr.w	lr, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800836c:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 8008370:	ea4e 0e05 	orr.w	lr, lr, r5
 8008374:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
 8008378:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 800837c:	ea0e 0e05 	and.w	lr, lr, r5
 8008380:	f8cd e008 	str.w	lr, [sp, #8]
 8008384:	f8dd e008 	ldr.w	lr, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008388:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 800838c:	ea4e 0e07 	orr.w	lr, lr, r7
 8008390:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
 8008394:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 8008398:	ea0e 0e07 	and.w	lr, lr, r7
 800839c:	f8cd e00c 	str.w	lr, [sp, #12]
 80083a0:	f8dd e00c 	ldr.w	lr, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80083a4:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 80083a8:	f04e 0e04 	orr.w	lr, lr, #4
 80083ac:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
 80083b0:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 80083b4:	f00e 0e04 	and.w	lr, lr, #4
 80083b8:	f8cd e010 	str.w	lr, [sp, #16]
 80083bc:	f8dd e010 	ldr.w	lr, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80083c0:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 80083c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80083c8:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
 80083cc:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 80083d0:	ea0e 0e02 	and.w	lr, lr, r2
 80083d4:	f8cd e014 	str.w	lr, [sp, #20]
 80083d8:	f8dd e014 	ldr.w	lr, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80083dc:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 80083e0:	f44e 7e00 	orr.w	lr, lr, #512	; 0x200
 80083e4:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
 80083e8:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 80083ec:	f40e 7e00 	and.w	lr, lr, #512	; 0x200
 80083f0:	f8cd e018 	str.w	lr, [sp, #24]
 80083f4:	f8dd e018 	ldr.w	lr, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80083f8:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 80083fc:	f44e 7e80 	orr.w	lr, lr, #256	; 0x100
 8008400:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
 8008404:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 8008408:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 800840c:	f8cd e01c 	str.w	lr, [sp, #28]
 8008410:	f8dd e01c 	ldr.w	lr, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8008414:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 8008418:	f44e 6e80 	orr.w	lr, lr, #1024	; 0x400
 800841c:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
 8008420:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 8008424:	f40e 6e80 	and.w	lr, lr, #1024	; 0x400
 8008428:	f8cd e020 	str.w	lr, [sp, #32]
 800842c:	f8dd e020 	ldr.w	lr, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008430:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 8008434:	ea4e 0e01 	orr.w	lr, lr, r1
 8008438:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
 800843c:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 8008440:	ea0e 0e01 	and.w	lr, lr, r1
 8008444:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8008448:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800844c:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 8008450:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
 8008454:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
 8008458:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800845c:	f00c 0c80 	and.w	ip, ip, #128	; 0x80
 8008460:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8008464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008466:	f007 ff2f 	bl	80102c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800846a:	4632      	mov	r2, r6
 800846c:	210c      	movs	r1, #12
 800846e:	4877      	ldr	r0, [pc, #476]	; (800864c <main+0x340>)
 8008470:	f007 ff2a 	bl	80102c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8008474:	4639      	mov	r1, r7
 8008476:	4622      	mov	r2, r4
 8008478:	4875      	ldr	r0, [pc, #468]	; (8008650 <main+0x344>)
 800847a:	f007 ff25 	bl	80102c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800847e:	4622      	mov	r2, r4
 8008480:	4659      	mov	r1, fp
 8008482:	4872      	ldr	r0, [pc, #456]	; (800864c <main+0x340>)
 8008484:	f007 ff20 	bl	80102c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8008488:	4651      	mov	r1, sl
 800848a:	4632      	mov	r2, r6
 800848c:	4871      	ldr	r0, [pc, #452]	; (8008654 <main+0x348>)
 800848e:	f007 ff1b 	bl	80102c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8008492:	4632      	mov	r2, r6
 8008494:	21c8      	movs	r1, #200	; 0xc8
 8008496:	4870      	ldr	r0, [pc, #448]	; (8008658 <main+0x34c>)
 8008498:	f007 ff16 	bl	80102c8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800849c:	a91a      	add	r1, sp, #104	; 0x68
 800849e:	486f      	ldr	r0, [pc, #444]	; (800865c <main+0x350>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084a0:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084a2:	e9cd 761a 	strd	r7, r6, [sp, #104]	; 0x68
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80084a6:	f007 fd27 	bl	800fef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80084aa:	f643 4223 	movw	r2, #15395	; 0x3c23
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084ae:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084b0:	a91a      	add	r1, sp, #104	; 0x68
 80084b2:	486b      	ldr	r0, [pc, #428]	; (8008660 <main+0x354>)
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80084b4:	921a      	str	r2, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084b6:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084b8:	951b      	str	r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80084ba:	e9cd 381d 	strd	r3, r8, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084be:	f007 fd1b 	bl	800fef8 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80084c2:	a91a      	add	r1, sp, #104	; 0x68
 80084c4:	4867      	ldr	r0, [pc, #412]	; (8008664 <main+0x358>)
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80084c6:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ca:	e9cd 661b 	strd	r6, r6, [sp, #108]	; 0x6c
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80084ce:	f007 fd13 	bl	800fef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80084d2:	4b65      	ldr	r3, [pc, #404]	; (8008668 <main+0x35c>)
 80084d4:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80084d6:	a91a      	add	r1, sp, #104	; 0x68
 80084d8:	485b      	ldr	r0, [pc, #364]	; (8008648 <main+0x33c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084da:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80084dc:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80084e0:	f007 fd0a 	bl	800fef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80084e4:	2220      	movs	r2, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80084e6:	a91a      	add	r1, sp, #104	; 0x68
 80084e8:	4857      	ldr	r0, [pc, #348]	; (8008648 <main+0x33c>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80084ea:	921a      	str	r2, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80084ec:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084ee:	e9cd 661c 	strd	r6, r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80084f2:	f007 fd01 	bl	800fef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80084f6:	f241 020c 	movw	r2, #4108	; 0x100c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80084fa:	a91a      	add	r1, sp, #104	; 0x68
 80084fc:	4853      	ldr	r0, [pc, #332]	; (800864c <main+0x340>)
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80084fe:	921a      	str	r2, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008500:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008502:	e9cd 461b 	strd	r4, r6, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008506:	f007 fcf7 	bl	800fef8 <HAL_GPIO_Init>
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800850a:	a91a      	add	r1, sp, #104	; 0x68
 800850c:	4857      	ldr	r0, [pc, #348]	; (800866c <main+0x360>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800850e:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008512:	e9cd 661b 	strd	r6, r6, [sp, #108]	; 0x6c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8008516:	f007 fcef 	bl	800fef8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800851a:	a91a      	add	r1, sp, #104	; 0x68
 800851c:	484c      	ldr	r0, [pc, #304]	; (8008650 <main+0x344>)
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800851e:	971a      	str	r7, [sp, #104]	; 0x68
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8008520:	2704      	movs	r7, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008522:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008524:	e9cd 461b 	strd	r4, r6, [sp, #108]	; 0x6c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8008528:	f007 fce6 	bl	800fef8 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800852c:	a91a      	add	r1, sp, #104	; 0x68
 800852e:	4846      	ldr	r0, [pc, #280]	; (8008648 <main+0x33c>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008530:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008534:	e9cd 661b 	strd	r6, r6, [sp, #108]	; 0x6c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008538:	f007 fcde 	bl	800fef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800853c:	f248 0204 	movw	r2, #32772	; 0x8004
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008540:	a91a      	add	r1, sp, #104	; 0x68
 8008542:	4844      	ldr	r0, [pc, #272]	; (8008654 <main+0x348>)
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8008544:	921a      	str	r2, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008546:	e9cd 661b 	strd	r6, r6, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800854a:	f007 fcd5 	bl	800fef8 <HAL_GPIO_Init>
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800854e:	a91a      	add	r1, sp, #104	; 0x68
 8008550:	4840      	ldr	r0, [pc, #256]	; (8008654 <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008552:	e9cd a41a 	strd	sl, r4, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008556:	e9cd 661c 	strd	r6, r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800855a:	f007 fccd 	bl	800fef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800855e:	4b42      	ldr	r3, [pc, #264]	; (8008668 <main+0x35c>)
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8008560:	a91a      	add	r1, sp, #104	; 0x68
 8008562:	483a      	ldr	r0, [pc, #232]	; (800864c <main+0x340>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008564:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8008566:	e9cd a31a 	strd	sl, r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800856a:	f007 fcc5 	bl	800fef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800856e:	2303      	movs	r3, #3
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8008570:	a91a      	add	r1, sp, #104	; 0x68
 8008572:	4838      	ldr	r0, [pc, #224]	; (8008654 <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008574:	961c      	str	r6, [sp, #112]	; 0x70
  hadc3.Instance = ADC3;
 8008576:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8008684 <main+0x378>
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800857a:	e9cd 381d 	strd	r3, r8, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800857e:	e9cd 951a 	strd	r9, r5, [sp, #104]	; 0x68
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8008582:	f007 fcb9 	bl	800fef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8008586:	22c8      	movs	r2, #200	; 0xc8
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008588:	a91a      	add	r1, sp, #104	; 0x68
 800858a:	4833      	ldr	r0, [pc, #204]	; (8008658 <main+0x34c>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800858c:	921a      	str	r2, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800858e:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008590:	e9cd 461b 	strd	r4, r6, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008594:	f007 fcb0 	bl	800fef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8008598:	2205      	movs	r2, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800859a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800859c:	a91a      	add	r1, sp, #104	; 0x68
 800859e:	4833      	ldr	r0, [pc, #204]	; (800866c <main+0x360>)
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80085a0:	921a      	str	r2, [sp, #104]	; 0x68
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80085a2:	e9cd 381d 	strd	r3, r8, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a6:	e9cd 561b 	strd	r5, r6, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085aa:	f007 fca5 	bl	800fef8 <HAL_GPIO_Init>
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80085ae:	a91a      	add	r1, sp, #104	; 0x68
 80085b0:	4829      	ldr	r0, [pc, #164]	; (8008658 <main+0x34c>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80085b2:	971a      	str	r7, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085b4:	e9cd 661b 	strd	r6, r6, [sp, #108]	; 0x6c
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80085b8:	f007 fc9e 	bl	800fef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80085bc:	2228      	movs	r2, #40	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085be:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085c0:	a91a      	add	r1, sp, #104	; 0x68
 80085c2:	482b      	ldr	r0, [pc, #172]	; (8008670 <main+0x364>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085c4:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80085c6:	921a      	str	r2, [sp, #104]	; 0x68
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80085c8:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085cc:	e9cd 561b 	strd	r5, r6, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085d0:	f007 fc92 	bl	800fef8 <HAL_GPIO_Init>
  hadc3.Instance = ADC3;
 80085d4:	4b27      	ldr	r3, [pc, #156]	; (8008674 <main+0x368>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80085d6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80085da:	4a27      	ldr	r2, [pc, #156]	; (8008678 <main+0x36c>)
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80085dc:	4650      	mov	r0, sl
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80085de:	f8ca 6008 	str.w	r6, [sl, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80085e2:	f8ca 6010 	str.w	r6, [sl, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80085e6:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80085ea:	f88a 6020 	strb.w	r6, [sl, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80085ee:	f8ca 602c 	str.w	r6, [sl, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80085f2:	f8ca 600c 	str.w	r6, [sl, #12]
  hadc3.Init.NbrOfConversion = 1;
 80085f6:	f8ca 401c 	str.w	r4, [sl, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80085fa:	f88a 6030 	strb.w	r6, [sl, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80085fe:	f8ca 4014 	str.w	r4, [sl, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008602:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008606:	e9ca 3100 	strd	r3, r1, [sl]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800860a:	f006 fd89 	bl	800f120 <HAL_ADC_Init>
 800860e:	b100      	cbz	r0, 8008612 <main+0x306>
 8008610:	e7fe      	b.n	8008610 <main+0x304>
 8008612:	4603      	mov	r3, r0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008614:	a91a      	add	r1, sp, #104	; 0x68
 8008616:	4650      	mov	r0, sl
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8008618:	931c      	str	r3, [sp, #112]	; 0x70
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800861a:	e9cd 741a 	strd	r7, r4, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800861e:	f006 fe35 	bl	800f28c <HAL_ADC_ConfigChannel>
 8008622:	4602      	mov	r2, r0
 8008624:	b100      	cbz	r0, 8008628 <main+0x31c>
 8008626:	e7fe      	b.n	8008626 <main+0x31a>
  hcrc.Instance = CRC;
 8008628:	4b14      	ldr	r3, [pc, #80]	; (800867c <main+0x370>)
 800862a:	4915      	ldr	r1, [pc, #84]	; (8008680 <main+0x374>)
 800862c:	8098      	strh	r0, [r3, #4]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800862e:	4618      	mov	r0, r3
  hcrc.Instance = CRC;
 8008630:	6019      	str	r1, [r3, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008632:	621c      	str	r4, [r3, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8008634:	e9c3 2205 	strd	r2, r2, [r3, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008638:	f006 ff58 	bl	800f4ec <HAL_CRC_Init>
 800863c:	4602      	mov	r2, r0
 800863e:	b318      	cbz	r0, 8008688 <main+0x37c>
 8008640:	e7fe      	b.n	8008640 <main+0x334>
 8008642:	bf00      	nop
 8008644:	40023800 	.word	0x40023800
 8008648:	40020c00 	.word	0x40020c00
 800864c:	40022000 	.word	0x40022000
 8008650:	40022800 	.word	0x40022800
 8008654:	40021c00 	.word	0x40021c00
 8008658:	40021800 	.word	0x40021800
 800865c:	40021000 	.word	0x40021000
 8008660:	40020400 	.word	0x40020400
 8008664:	40022400 	.word	0x40022400
 8008668:	10120000 	.word	0x10120000
 800866c:	40020800 	.word	0x40020800
 8008670:	40020000 	.word	0x40020000
 8008674:	40012200 	.word	0x40012200
 8008678:	0f000001 	.word	0x0f000001
 800867c:	2000ef38 	.word	0x2000ef38
 8008680:	40023000 	.word	0x40023000
 8008684:	2000f108 	.word	0x2000f108
  hdcmi.Instance = DCMI;
 8008688:	4ba5      	ldr	r3, [pc, #660]	; (8008920 <main+0x614>)
 800868a:	49a6      	ldr	r1, [pc, #664]	; (8008924 <main+0x618>)
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800868c:	6058      	str	r0, [r3, #4]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800868e:	4618      	mov	r0, r3
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8008690:	619a      	str	r2, [r3, #24]
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8008692:	631a      	str	r2, [r3, #48]	; 0x30
  hdcmi.Instance = DCMI;
 8008694:	6019      	str	r1, [r3, #0]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8008696:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800869a:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800869e:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80086a2:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80086a6:	f006 ff99 	bl	800f5dc <HAL_DCMI_Init>
 80086aa:	4603      	mov	r3, r0
 80086ac:	b100      	cbz	r0, 80086b0 <main+0x3a4>
 80086ae:	e7fe      	b.n	80086ae <main+0x3a2>
  hdma2d.Instance = DMA2D;
 80086b0:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 8008964 <main+0x658>
 80086b4:	4a9c      	ldr	r2, [pc, #624]	; (8008928 <main+0x61c>)
  hdma2d.Init.Mode = DMA2D_M2M;
 80086b6:	f8c8 0004 	str.w	r0, [r8, #4]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80086ba:	4640      	mov	r0, r8
  hdma2d.Instance = DMA2D;
 80086bc:	f8c8 2000 	str.w	r2, [r8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80086c0:	e9c8 330a 	strd	r3, r3, [r8, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80086c4:	e9c8 330c 	strd	r3, r3, [r8, #48]	; 0x30
  hdma2d.Init.OutputOffset = 0;
 80086c8:	e9c8 3302 	strd	r3, r3, [r8, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80086cc:	f007 fa16 	bl	800fafc <HAL_DMA2D_Init>
 80086d0:	b100      	cbz	r0, 80086d4 <main+0x3c8>
 80086d2:	e7fe      	b.n	80086d2 <main+0x3c6>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80086d4:	4640      	mov	r0, r8
 80086d6:	4621      	mov	r1, r4
 80086d8:	f007 fbbc 	bl	800fe54 <HAL_DMA2D_ConfigLayer>
 80086dc:	4602      	mov	r2, r0
 80086de:	b100      	cbz	r0, 80086e2 <main+0x3d6>
 80086e0:	e7fe      	b.n	80086e0 <main+0x3d4>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80086e2:	4b92      	ldr	r3, [pc, #584]	; (800892c <main+0x620>)
  SdramTiming.WriteRecoveryTime = 3;
 80086e4:	2103      	movs	r1, #3
  SdramTiming.LoadToActiveDelay = 2;
 80086e6:	951a      	str	r5, [sp, #104]	; 0x68
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80086e8:	f44f 7ec0 	mov.w	lr, #384	; 0x180
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80086ec:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  SdramTiming.ExitSelfRefreshDelay = 7;
 80086f0:	2607      	movs	r6, #7
  SdramTiming.WriteRecoveryTime = 3;
 80086f2:	911e      	str	r1, [sp, #120]	; 0x78
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80086f4:	a91a      	add	r1, sp, #104	; 0x68
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80086f6:	60df      	str	r7, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80086f8:	f8c3 9010 	str.w	r9, [r3, #16]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80086fc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80086fe:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8008702:	629a      	str	r2, [r3, #40]	; 0x28
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8008704:	f8c3 e018 	str.w	lr, [r3, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8008708:	f8c3 c020 	str.w	ip, [r3, #32]
  SdramTiming.SelfRefreshTime = 4;
 800870c:	971c      	str	r7, [sp, #112]	; 0x70
  SdramTiming.ExitSelfRefreshDelay = 7;
 800870e:	961b      	str	r6, [sp, #108]	; 0x6c
  SdramTiming.RowCycleDelay = 7;
 8008710:	961d      	str	r6, [sp, #116]	; 0x74
  SdramTiming.RCDDelay = 2;
 8008712:	e9cd 551f 	strd	r5, r5, [sp, #124]	; 0x7c
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008716:	2540      	movs	r5, #64	; 0x40
 8008718:	615d      	str	r5, [r3, #20]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800871a:	4d85      	ldr	r5, [pc, #532]	; (8008930 <main+0x624>)
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800871c:	e9c3 0001 	strd	r0, r0, [r3, #4]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8008720:	4618      	mov	r0, r3
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8008722:	601d      	str	r5, [r3, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8008724:	f00b fb0e 	bl	8013d44 <HAL_SDRAM_Init>
 8008728:	4603      	mov	r3, r0
 800872a:	b100      	cbz	r0, 800872e <main+0x422>
 800872c:	e7fe      	b.n	800872c <main+0x420>
  hi2c1.Instance = I2C1;
 800872e:	4d81      	ldr	r5, [pc, #516]	; (8008934 <main+0x628>)
 8008730:	4981      	ldr	r1, [pc, #516]	; (8008938 <main+0x62c>)
  hi2c1.Init.Timing = 0x00C0EAFF;
 8008732:	4a82      	ldr	r2, [pc, #520]	; (800893c <main+0x630>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008734:	4628      	mov	r0, r5
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008736:	622b      	str	r3, [r5, #32]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8008738:	e9c5 1200 	strd	r1, r2, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800873c:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8008740:	e9c5 3304 	strd	r3, r3, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008744:	e9c5 3306 	strd	r3, r3, [r5, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008748:	f008 fb7e 	bl	8010e48 <HAL_I2C_Init>
 800874c:	4601      	mov	r1, r0
 800874e:	b100      	cbz	r0, 8008752 <main+0x446>
 8008750:	e7fe      	b.n	8008750 <main+0x444>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008752:	4628      	mov	r0, r5
 8008754:	f008 fe56 	bl	8011404 <HAL_I2CEx_ConfigAnalogFilter>
 8008758:	4601      	mov	r1, r0
 800875a:	b100      	cbz	r0, 800875e <main+0x452>
 800875c:	e7fe      	b.n	800875c <main+0x450>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800875e:	4628      	mov	r0, r5
 8008760:	f008 fe7a 	bl	8011458 <HAL_I2CEx_ConfigDigitalFilter>
 8008764:	b100      	cbz	r0, 8008768 <main+0x45c>
 8008766:	e7fe      	b.n	8008766 <main+0x45a>
  hi2c3.Instance = I2C3;
 8008768:	4c75      	ldr	r4, [pc, #468]	; (8008940 <main+0x634>)
  hi2c3.Init.OwnAddress1 = 0;
 800876a:	2300      	movs	r3, #0
  hi2c3.Instance = I2C3;
 800876c:	4975      	ldr	r1, [pc, #468]	; (8008944 <main+0x638>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800876e:	2601      	movs	r6, #1
  hi2c3.Init.Timing = 0x00C0EAFF;
 8008770:	4a72      	ldr	r2, [pc, #456]	; (800893c <main+0x630>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8008772:	4620      	mov	r0, r4
  hi2c3.Init.OwnAddress1 = 0;
 8008774:	60a3      	str	r3, [r4, #8]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008776:	6223      	str	r3, [r4, #32]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008778:	60e6      	str	r6, [r4, #12]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800877a:	e9c4 1200 	strd	r1, r2, [r4]
  hi2c3.Init.OwnAddress2 = 0;
 800877e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008782:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8008786:	f008 fb5f 	bl	8010e48 <HAL_I2C_Init>
 800878a:	4601      	mov	r1, r0
 800878c:	b100      	cbz	r0, 8008790 <main+0x484>
 800878e:	e7fe      	b.n	800878e <main+0x482>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008790:	4620      	mov	r0, r4
 8008792:	f008 fe37 	bl	8011404 <HAL_I2CEx_ConfigAnalogFilter>
 8008796:	4601      	mov	r1, r0
 8008798:	b100      	cbz	r0, 800879c <main+0x490>
 800879a:	e7fe      	b.n	800879a <main+0x48e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800879c:	4620      	mov	r0, r4
 800879e:	f008 fe5b 	bl	8011458 <HAL_I2CEx_ConfigDigitalFilter>
 80087a2:	b100      	cbz	r0, 80087a6 <main+0x49a>
 80087a4:	e7fe      	b.n	80087a4 <main+0x498>
  hltdc.Instance = LTDC;
 80087a6:	4c68      	ldr	r4, [pc, #416]	; (8008948 <main+0x63c>)
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80087a8:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.HorizontalSync = 40;
 80087aa:	2209      	movs	r2, #9
  hltdc.Init.VerticalSync = 9;
 80087ac:	2335      	movs	r3, #53	; 0x35
  hltdc.Instance = LTDC;
 80087ae:	6060      	str	r0, [r4, #4]
  hltdc.Init.AccumulatedHBP = 53;
 80087b0:	250b      	movs	r5, #11
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80087b2:	6120      	str	r0, [r4, #16]
  hltdc.Init.TotalHeigh = 285;
 80087b4:	86a0      	strh	r0, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80087b6:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80087ba:	6161      	str	r1, [r4, #20]
  hltdc.Init.AccumulatedActiveW = 533;
 80087bc:	f240 111b 	movw	r1, #283	; 0x11b
  hltdc.Init.HorizontalSync = 40;
 80087c0:	61a2      	str	r2, [r4, #24]
  hltdc.Init.AccumulatedActiveH = 283;
 80087c2:	f240 2235 	movw	r2, #565	; 0x235
  hltdc.Init.VerticalSync = 9;
 80087c6:	61e3      	str	r3, [r4, #28]
  hltdc.Init.TotalWidth = 565;
 80087c8:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Instance = LTDC;
 80087cc:	4f5f      	ldr	r7, [pc, #380]	; (800894c <main+0x640>)
  hltdc.Init.TotalWidth = 565;
 80087ce:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Instance = LTDC;
 80087d0:	6027      	str	r7, [r4, #0]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80087d2:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hltdc.Init.AccumulatedVBP = 11;
 80087d6:	f240 2015 	movw	r0, #533	; 0x215
  hltdc.Init.AccumulatedActiveH = 283;
 80087da:	e9c4 120a 	strd	r1, r2, [r4, #40]	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 80087de:	e9c4 5008 	strd	r5, r0, [r4, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80087e2:	4620      	mov	r0, r4
 80087e4:	f008 fe62 	bl	80114ac <HAL_LTDC_Init>
 80087e8:	4602      	mov	r2, r0
 80087ea:	b100      	cbz	r0, 80087ee <main+0x4e2>
 80087ec:	e7fe      	b.n	80087ec <main+0x4e0>
  pLayerCfg.WindowX0 = 0;
 80087ee:	f04f 0800 	mov.w	r8, #0
 80087f2:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80087f6:	4620      	mov	r0, r4
  pLayerCfg.WindowX0 = 0;
 80087f8:	f44f 7588 	mov.w	r5, #272	; 0x110
 80087fc:	2400      	movs	r4, #0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80087fe:	a91a      	add	r1, sp, #104	; 0x68
  pLayerCfg.Backcolor.Blue = 0;
 8008800:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  pLayerCfg.Backcolor.Green = 0;
 8008804:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
  pLayerCfg.Backcolor.Red = 0;
 8008808:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
  pLayerCfg.WindowX0 = 0;
 800880c:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 8008810:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 8008814:	f04f 0800 	mov.w	r8, #0
 8008818:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800881c:	2400      	movs	r4, #0
 800881e:	f44f 65c0 	mov.w	r5, #1536	; 0x600
 8008822:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8008826:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 800882a:	f04f 0807 	mov.w	r8, #7
 800882e:	f04f 4940 	mov.w	r9, #3221225472	; 0xc0000000
 8008832:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
 8008836:	f44f 7588 	mov.w	r5, #272	; 0x110
 800883a:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 800883e:	e9cd 4524 	strd	r4, r5, [sp, #144]	; 0x90
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8008842:	f008 ff0f 	bl	8011664 <HAL_LTDC_ConfigLayer>
 8008846:	4602      	mov	r2, r0
 8008848:	b100      	cbz	r0, 800884c <main+0x540>
 800884a:	e7fe      	b.n	800884a <main+0x53e>
  hqspi.Instance = QUADSPI;
 800884c:	4b40      	ldr	r3, [pc, #256]	; (8008950 <main+0x644>)
  hqspi.Init.ClockPrescaler = 255;
 800884e:	24ff      	movs	r4, #255	; 0xff
  hqspi.Instance = QUADSPI;
 8008850:	4940      	ldr	r1, [pc, #256]	; (8008954 <main+0x648>)
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8008852:	4618      	mov	r0, r3
  hqspi.Init.FifoThreshold = 1;
 8008854:	609e      	str	r6, [r3, #8]
  hqspi.Init.FlashSize = 1;
 8008856:	e9c3 2603 	strd	r2, r6, [r3, #12]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800885a:	e9c3 2205 	strd	r2, r2, [r3, #20]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800885e:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hqspi.Init.ClockPrescaler = 255;
 8008862:	e9c3 1400 	strd	r1, r4, [r3]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8008866:	f009 f90d 	bl	8011a84 <HAL_QSPI_Init>
 800886a:	4603      	mov	r3, r0
 800886c:	b100      	cbz	r0, 8008870 <main+0x564>
 800886e:	e7fe      	b.n	800886e <main+0x562>
  hrtc.Instance = RTC;
 8008870:	4d39      	ldr	r5, [pc, #228]	; (8008958 <main+0x64c>)
  hrtc.Init.AsynchPrediv = 127;
 8008872:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 8008874:	4939      	ldr	r1, [pc, #228]	; (800895c <main+0x650>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008876:	6068      	str	r0, [r5, #4]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008878:	4628      	mov	r0, r5
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800887a:	61ab      	str	r3, [r5, #24]
  hrtc.Init.SynchPrediv = 255;
 800887c:	60ec      	str	r4, [r5, #12]
  hrtc.Instance = RTC;
 800887e:	6029      	str	r1, [r5, #0]
  hrtc.Init.AsynchPrediv = 127;
 8008880:	60aa      	str	r2, [r5, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008882:	e9c5 3304 	strd	r3, r3, [r5, #16]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008886:	f00a f833 	bl	80128f0 <HAL_RTC_Init>
 800888a:	4603      	mov	r3, r0
 800888c:	b100      	cbz	r0, 8008890 <main+0x584>
 800888e:	e7fe      	b.n	800888e <main+0x582>
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008890:	f04f 0800 	mov.w	r8, #0
 8008894:	f04f 0900 	mov.w	r9, #0
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8008898:	4632      	mov	r2, r6
 800889a:	4628      	mov	r0, r5
 800889c:	a912      	add	r1, sp, #72	; 0x48
  sTime.Hours = 0x0;
 800889e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
  sTime.Minutes = 0x0;
 80088a2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80088a6:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80088aa:	f00a f87b 	bl	80129a4 <HAL_RTC_SetTime>
 80088ae:	b100      	cbz	r0, 80088b2 <main+0x5a6>
 80088b0:	e7fe      	b.n	80088b0 <main+0x5a4>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80088b2:	4b2b      	ldr	r3, [pc, #172]	; (8008960 <main+0x654>)
 80088b4:	ac28      	add	r4, sp, #160	; 0xa0
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80088b6:	4632      	mov	r2, r6
 80088b8:	4628      	mov	r0, r5
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80088ba:	f844 3d68 	str.w	r3, [r4, #-104]!
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80088be:	4621      	mov	r1, r4
 80088c0:	f00a f924 	bl	8012b0c <HAL_RTC_SetDate>
 80088c4:	4603      	mov	r3, r0
 80088c6:	b100      	cbz	r0, 80088ca <main+0x5be>
 80088c8:	e7fe      	b.n	80088c8 <main+0x5bc>
  sAlarm.Alarm = RTC_ALARM_A;
 80088ca:	f44f 7780 	mov.w	r7, #256	; 0x100
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80088ce:	4628      	mov	r0, r5
 80088d0:	4632      	mov	r2, r6
 80088d2:	a91a      	add	r1, sp, #104	; 0x68
  sAlarm.AlarmTime.Hours = 0x0;
 80088d4:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
  sAlarm.AlarmTime.Minutes = 0x0;
 80088d8:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80088dc:	931b      	str	r3, [sp, #108]	; 0x6c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80088de:	9322      	str	r3, [sp, #136]	; 0x88
  sAlarm.AlarmDateWeekDay = 0x1;
 80088e0:	f88d 608c 	strb.w	r6, [sp, #140]	; 0x8c
  sAlarm.Alarm = RTC_ALARM_A;
 80088e4:	9724      	str	r7, [sp, #144]	; 0x90
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80088e6:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 80088ea:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80088ee:	f00a f9a7 	bl	8012c40 <HAL_RTC_SetAlarm>
 80088f2:	b100      	cbz	r0, 80088f6 <main+0x5ea>
 80088f4:	e7fe      	b.n	80088f4 <main+0x5e8>
  sAlarm.AlarmDateWeekDay = 0x1;
 80088f6:	2701      	movs	r7, #1
  sAlarm.Alarm = RTC_ALARM_B;
 80088f8:	f44f 7600 	mov.w	r6, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80088fc:	a91a      	add	r1, sp, #104	; 0x68
 80088fe:	4816      	ldr	r0, [pc, #88]	; (8008958 <main+0x64c>)
 8008900:	463a      	mov	r2, r7
  sAlarm.AlarmDateWeekDay = 0x1;
 8008902:	f88d 708c 	strb.w	r7, [sp, #140]	; 0x8c
  sAlarm.Alarm = RTC_ALARM_B;
 8008906:	9624      	str	r6, [sp, #144]	; 0x90
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8008908:	f00a f99a 	bl	8012c40 <HAL_RTC_SetAlarm>
 800890c:	4601      	mov	r1, r0
 800890e:	b100      	cbz	r0, 8008912 <main+0x606>
 8008910:	e7fe      	b.n	8008910 <main+0x604>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8008912:	2202      	movs	r2, #2
 8008914:	4810      	ldr	r0, [pc, #64]	; (8008958 <main+0x64c>)
 8008916:	f00a fa75 	bl	8012e04 <HAL_RTCEx_SetTimeStamp>
 800891a:	b328      	cbz	r0, 8008968 <main+0x65c>
 800891c:	e7fe      	b.n	800891c <main+0x610>
 800891e:	bf00      	nop
 8008920:	2000f150 	.word	0x2000f150
 8008924:	50050000 	.word	0x50050000
 8008928:	4002b000 	.word	0x4002b000
 800892c:	2000f3c0 	.word	0x2000f3c0
 8008930:	a0000140 	.word	0xa0000140
 8008934:	2000eeec 	.word	0x2000eeec
 8008938:	40005400 	.word	0x40005400
 800893c:	00c0eaff 	.word	0x00c0eaff
 8008940:	2000ed2c 	.word	0x2000ed2c
 8008944:	40005c00 	.word	0x40005c00
 8008948:	2000f060 	.word	0x2000f060
 800894c:	40016800 	.word	0x40016800
 8008950:	2000f434 	.word	0x2000f434
 8008954:	a0001000 	.word	0xa0001000
 8008958:	2000f220 	.word	0x2000f220
 800895c:	40002800 	.word	0x40002800
 8008960:	00010101 	.word	0x00010101
 8008964:	2000f300 	.word	0x2000f300
  hsai_BlockA2.Instance = SAI2_Block_A;
 8008968:	4ba6      	ldr	r3, [pc, #664]	; (8008c04 <main+0x8f8>)
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_24;
 800896a:	f04f 08c0 	mov.w	r8, #192	; 0xc0
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800896e:	4aa6      	ldr	r2, [pc, #664]	; (8008c08 <main+0x8fc>)
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8008970:	2508      	movs	r5, #8
  hsai_BlockA2.Instance = SAI2_Block_A;
 8008972:	49a6      	ldr	r1, [pc, #664]	; (8008c0c <main+0x900>)
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8008974:	6318      	str	r0, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8008976:	6058      	str	r0, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8008978:	6098      	str	r0, [r3, #8]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800897a:	6198      	str	r0, [r3, #24]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800897c:	60d8      	str	r0, [r3, #12]
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800897e:	62d8      	str	r0, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8008980:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Instance = SAI2_Block_A;
 8008982:	6019      	str	r1, [r3, #0]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_24;
 8008984:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8008988:	641d      	str	r5, [r3, #64]	; 0x40
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800898a:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800898e:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8008992:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8008996:	e9c3 7011 	strd	r7, r0, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800899a:	e9c3 0013 	strd	r0, r0, [r3, #76]	; 0x4c
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800899e:	e9c3 0015 	strd	r0, r0, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80089a2:	e9c3 7017 	strd	r7, r0, [r3, #92]	; 0x5c
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80089a6:	4618      	mov	r0, r3
 80089a8:	f00a fa56 	bl	8012e58 <HAL_SAI_Init>
 80089ac:	4602      	mov	r2, r0
 80089ae:	b100      	cbz	r0, 80089b2 <main+0x6a6>
 80089b0:	e7fe      	b.n	80089b0 <main+0x6a4>
  hsai_BlockB2.Instance = SAI2_Block_B;
 80089b2:	4b97      	ldr	r3, [pc, #604]	; (8008c10 <main+0x904>)
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80089b4:	2103      	movs	r1, #3
  hsai_BlockB2.Instance = SAI2_Block_B;
 80089b6:	f8df c288 	ldr.w	ip, [pc, #648]	; 8008c40 <main+0x934>
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80089ba:	609f      	str	r7, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80089bc:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80089be:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80089c0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80089c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80089c4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_24;
 80089c6:	e9c3 080c 	strd	r0, r8, [r3, #48]	; 0x30
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80089ca:	4618      	mov	r0, r3
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80089cc:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80089d0:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80089d4:	e9c3 5710 	strd	r5, r7, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80089d8:	e9c3 2212 	strd	r2, r2, [r3, #72]	; 0x48
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80089dc:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80089e0:	e9c3 2716 	strd	r2, r7, [r3, #88]	; 0x58
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80089e4:	e9c3 c100 	strd	ip, r1, [r3]
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80089e8:	f00a fa36 	bl	8012e58 <HAL_SAI_Init>
 80089ec:	4603      	mov	r3, r0
 80089ee:	b100      	cbz	r0, 80089f2 <main+0x6e6>
 80089f0:	e7fe      	b.n	80089f0 <main+0x6e4>
  hspdif.Instance = SPDIFRX;
 80089f2:	4a88      	ldr	r2, [pc, #544]	; (8008c14 <main+0x908>)
 80089f4:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
  hsd1.Instance = SDMMC1;
 80089f8:	4987      	ldr	r1, [pc, #540]	; (8008c18 <main+0x90c>)
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80089fa:	6050      	str	r0, [r2, #4]
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80089fc:	4610      	mov	r0, r2
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80089fe:	6293      	str	r3, [r2, #40]	; 0x28
  hspdif.Instance = SPDIFRX;
 8008a00:	6017      	str	r7, [r2, #0]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8008a02:	e9c2 3302 	strd	r3, r3, [r2, #8]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8008a06:	e9c2 3304 	strd	r3, r3, [r2, #16]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8008a0a:	e9c2 3306 	strd	r3, r3, [r2, #24]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8008a0e:	e9c2 3308 	strd	r3, r3, [r2, #32]
  hsd1.Instance = SDMMC1;
 8008a12:	4a82      	ldr	r2, [pc, #520]	; (8008c1c <main+0x910>)
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8008a14:	e9c1 3301 	strd	r3, r3, [r1, #4]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8008a18:	e9c1 3303 	strd	r3, r3, [r1, #12]
  hsd1.Init.ClockDiv = 0;
 8008a1c:	e9c1 3305 	strd	r3, r3, [r1, #20]
  hsd1.Instance = SDMMC1;
 8008a20:	600a      	str	r2, [r1, #0]
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8008a22:	f00b f9df 	bl	8013de4 <HAL_SPDIFRX_Init>
 8008a26:	b100      	cbz	r0, 8008a2a <main+0x71e>
 8008a28:	e7fe      	b.n	8008a28 <main+0x71c>
  hspi2.Instance = SPI2;
 8008a2a:	4b7d      	ldr	r3, [pc, #500]	; (8008c20 <main+0x914>)
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8008a2c:	f44f 7140 	mov.w	r1, #768	; 0x300
  hspi2.Instance = SPI2;
 8008a30:	f8df c210 	ldr.w	ip, [pc, #528]	; 8008c44 <main+0x938>
  hspi2.Init.CRCPolynomial = 7;
 8008a34:	2207      	movs	r2, #7
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008a36:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008a3a:	6098      	str	r0, [r3, #8]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008a3c:	619e      	str	r6, [r3, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8008a3e:	60d9      	str	r1, [r3, #12]
  hspi2.Init.CRCPolynomial = 7;
 8008a40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008a42:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008a46:	e9c3 0007 	strd	r0, r0, [r3, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a4a:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008a4e:	e9c3 050c 	strd	r0, r5, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008a52:	4618      	mov	r0, r3
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008a54:	e9c3 c700 	strd	ip, r7, [r3]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008a58:	f00b f9fe 	bl	8013e58 <HAL_SPI_Init>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	b100      	cbz	r0, 8008a62 <main+0x756>
 8008a60:	e7fe      	b.n	8008a60 <main+0x754>
  htim1.Instance = TIM1;
 8008a62:	4d70      	ldr	r5, [pc, #448]	; (8008c24 <main+0x918>)
 8008a64:	4a70      	ldr	r2, [pc, #448]	; (8008c28 <main+0x91c>)
  htim1.Init.Prescaler = 0;
 8008a66:	6068      	str	r0, [r5, #4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008a68:	4628      	mov	r0, r5
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a6a:	61ab      	str	r3, [r5, #24]
  htim1.Instance = TIM1;
 8008a6c:	602a      	str	r2, [r5, #0]
  htim1.Init.Period = 0;
 8008a6e:	e9c5 3302 	strd	r3, r3, [r5, #8]
  htim1.Init.RepetitionCounter = 0;
 8008a72:	e9c5 3304 	strd	r3, r3, [r5, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008a76:	f00b fa51 	bl	8013f1c <HAL_TIM_Base_Init>
 8008a7a:	b100      	cbz	r0, 8008a7e <main+0x772>
 8008a7c:	e7fe      	b.n	8008a7c <main+0x770>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008a82:	4621      	mov	r1, r4
 8008a84:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a86:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008a88:	f00b fcf4 	bl	8014474 <HAL_TIM_ConfigClockSource>
 8008a8c:	b100      	cbz	r0, 8008a90 <main+0x784>
 8008a8e:	e7fe      	b.n	8008a8e <main+0x782>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008a90:	4628      	mov	r0, r5
 8008a92:	f00b fadd 	bl	8014050 <HAL_TIM_PWM_Init>
 8008a96:	4603      	mov	r3, r0
 8008a98:	b100      	cbz	r0, 8008a9c <main+0x790>
 8008a9a:	e7fe      	b.n	8008a9a <main+0x78e>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	a90b      	add	r1, sp, #44	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008aa0:	930d      	str	r3, [sp, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008aa2:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008aa6:	f00b fe4d 	bl	8014744 <HAL_TIMEx_MasterConfigSynchronization>
 8008aaa:	b100      	cbz	r0, 8008aae <main+0x7a2>
 8008aac:	e7fe      	b.n	8008aac <main+0x7a0>
  sConfigOC.Pulse = 0;
 8008aae:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008ab0:	2760      	movs	r7, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008ab2:	a912      	add	r1, sp, #72	; 0x48
 8008ab4:	485b      	ldr	r0, [pc, #364]	; (8008c24 <main+0x918>)
 8008ab6:	461a      	mov	r2, r3
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008ab8:	9712      	str	r7, [sp, #72]	; 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008aba:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008abe:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008ac2:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008ac6:	f00b fb47 	bl	8014158 <HAL_TIM_PWM_ConfigChannel>
 8008aca:	b100      	cbz	r0, 8008ace <main+0x7c2>
 8008acc:	e7fe      	b.n	8008acc <main+0x7c0>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008ad2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008ad6:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008ad8:	a91a      	add	r1, sp, #104	; 0x68
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008ada:	921f      	str	r2, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008adc:	9322      	str	r3, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008ade:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008ae2:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008ae6:	e9cd 0020 	strd	r0, r0, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008aea:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008aee:	484d      	ldr	r0, [pc, #308]	; (8008c24 <main+0x918>)
 8008af0:	f00b fe58 	bl	80147a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8008af4:	4606      	mov	r6, r0
 8008af6:	b100      	cbz	r0, 8008afa <main+0x7ee>
 8008af8:	e7fe      	b.n	8008af8 <main+0x7ec>
  htim2.Instance = TIM2;
 8008afa:	4d4c      	ldr	r5, [pc, #304]	; (8008c2c <main+0x920>)
  HAL_TIM_MspPostInit(&htim1);
 8008afc:	4849      	ldr	r0, [pc, #292]	; (8008c24 <main+0x918>)
 8008afe:	f002 fc3d 	bl	800b37c <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8008b02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008b06:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 0;
 8008b08:	606e      	str	r6, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b0a:	612e      	str	r6, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b0c:	61ae      	str	r6, [r5, #24]
  htim2.Instance = TIM2;
 8008b0e:	602b      	str	r3, [r5, #0]
  htim2.Init.Period = 0;
 8008b10:	e9c5 6602 	strd	r6, r6, [r5, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008b14:	f00b fa02 	bl	8013f1c <HAL_TIM_Base_Init>
 8008b18:	b100      	cbz	r0, 8008b1c <main+0x810>
 8008b1a:	e7fe      	b.n	8008b1a <main+0x80e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b1c:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008b20:	a912      	add	r1, sp, #72	; 0x48
 8008b22:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b24:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008b28:	f00b fca4 	bl	8014474 <HAL_TIM_ConfigClockSource>
 8008b2c:	b100      	cbz	r0, 8008b30 <main+0x824>
 8008b2e:	e7fe      	b.n	8008b2e <main+0x822>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008b30:	4628      	mov	r0, r5
 8008b32:	f00b fa8d 	bl	8014050 <HAL_TIM_PWM_Init>
 8008b36:	4603      	mov	r3, r0
 8008b38:	b100      	cbz	r0, 8008b3c <main+0x830>
 8008b3a:	e7fe      	b.n	8008b3a <main+0x82e>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b40:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b42:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008b44:	f00b fdfe 	bl	8014744 <HAL_TIMEx_MasterConfigSynchronization>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	b100      	cbz	r0, 8008b4e <main+0x842>
 8008b4c:	e7fe      	b.n	8008b4c <main+0x840>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008b4e:	4602      	mov	r2, r0
 8008b50:	a91a      	add	r1, sp, #104	; 0x68
 8008b52:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008b54:	971a      	str	r7, [sp, #104]	; 0x68
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008b56:	931e      	str	r3, [sp, #120]	; 0x78
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008b58:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008b5c:	f00b fafc 	bl	8014158 <HAL_TIM_PWM_ConfigChannel>
 8008b60:	4606      	mov	r6, r0
 8008b62:	b100      	cbz	r0, 8008b66 <main+0x85a>
 8008b64:	e7fe      	b.n	8008b64 <main+0x858>
  HAL_TIM_MspPostInit(&htim2);
 8008b66:	4628      	mov	r0, r5
  htim3.Instance = TIM3;
 8008b68:	4d31      	ldr	r5, [pc, #196]	; (8008c30 <main+0x924>)
  HAL_TIM_MspPostInit(&htim2);
 8008b6a:	f002 fc07 	bl	800b37c <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 8008b6e:	4b31      	ldr	r3, [pc, #196]	; (8008c34 <main+0x928>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008b70:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 0;
 8008b72:	606e      	str	r6, [r5, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b74:	612e      	str	r6, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b76:	61ae      	str	r6, [r5, #24]
  htim3.Instance = TIM3;
 8008b78:	602b      	str	r3, [r5, #0]
  htim3.Init.Period = 0;
 8008b7a:	e9c5 6602 	strd	r6, r6, [r5, #8]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008b7e:	f00b f9cd 	bl	8013f1c <HAL_TIM_Base_Init>
 8008b82:	b100      	cbz	r0, 8008b86 <main+0x87a>
 8008b84:	e7fe      	b.n	8008b84 <main+0x878>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008b86:	a912      	add	r1, sp, #72	; 0x48
 8008b88:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b8a:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008b8e:	f00b fc71 	bl	8014474 <HAL_TIM_ConfigClockSource>
 8008b92:	b100      	cbz	r0, 8008b96 <main+0x88a>
 8008b94:	e7fe      	b.n	8008b94 <main+0x888>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008b96:	4628      	mov	r0, r5
 8008b98:	f00b fa5a 	bl	8014050 <HAL_TIM_PWM_Init>
 8008b9c:	b100      	cbz	r0, 8008ba0 <main+0x894>
 8008b9e:	e7fe      	b.n	8008b9e <main+0x892>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008ba0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	4822      	ldr	r0, [pc, #136]	; (8008c30 <main+0x924>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008ba6:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ba8:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008baa:	f00b fdcb 	bl	8014744 <HAL_TIMEx_MasterConfigSynchronization>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	b100      	cbz	r0, 8008bb4 <main+0x8a8>
 8008bb2:	e7fe      	b.n	8008bb2 <main+0x8a6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008bb4:	f04f 0860 	mov.w	r8, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008bb8:	4602      	mov	r2, r0
 8008bba:	a91a      	add	r1, sp, #104	; 0x68
 8008bbc:	481c      	ldr	r0, [pc, #112]	; (8008c30 <main+0x924>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008bbe:	931e      	str	r3, [sp, #120]	; 0x78
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008bc0:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008bc4:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008bc8:	f00b fac6 	bl	8014158 <HAL_TIM_PWM_ConfigChannel>
 8008bcc:	4606      	mov	r6, r0
 8008bce:	b100      	cbz	r0, 8008bd2 <main+0x8c6>
 8008bd0:	e7fe      	b.n	8008bd0 <main+0x8c4>
  htim5.Instance = TIM5;
 8008bd2:	4d19      	ldr	r5, [pc, #100]	; (8008c38 <main+0x92c>)
  HAL_TIM_MspPostInit(&htim3);
 8008bd4:	4816      	ldr	r0, [pc, #88]	; (8008c30 <main+0x924>)
 8008bd6:	f002 fbd1 	bl	800b37c <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8008bda:	4b18      	ldr	r3, [pc, #96]	; (8008c3c <main+0x930>)
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008bdc:	4628      	mov	r0, r5
  htim5.Init.Prescaler = 0;
 8008bde:	606e      	str	r6, [r5, #4]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008be0:	612e      	str	r6, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008be2:	61ae      	str	r6, [r5, #24]
  htim5.Instance = TIM5;
 8008be4:	602b      	str	r3, [r5, #0]
  htim5.Init.Period = 0;
 8008be6:	e9c5 6602 	strd	r6, r6, [r5, #8]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008bea:	f00b f997 	bl	8013f1c <HAL_TIM_Base_Init>
 8008bee:	b100      	cbz	r0, 8008bf2 <main+0x8e6>
 8008bf0:	e7fe      	b.n	8008bf0 <main+0x8e4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008bf2:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008bf6:	a912      	add	r1, sp, #72	; 0x48
 8008bf8:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008bfa:	9712      	str	r7, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008bfc:	f00b fc3a 	bl	8014474 <HAL_TIM_ConfigClockSource>
 8008c00:	b310      	cbz	r0, 8008c48 <main+0x93c>
 8008c02:	e7fe      	b.n	8008c02 <main+0x8f6>
 8008c04:	2000ee68 	.word	0x2000ee68
 8008c08:	0002ee00 	.word	0x0002ee00
 8008c0c:	40015c04 	.word	0x40015c04
 8008c10:	2000eca4 	.word	0x2000eca4
 8008c14:	2000ee1c 	.word	0x2000ee1c
 8008c18:	2000ef5c 	.word	0x2000ef5c
 8008c1c:	40012c00 	.word	0x40012c00
 8008c20:	2000ed78 	.word	0x2000ed78
 8008c24:	2000f240 	.word	0x2000f240
 8008c28:	40010000 	.word	0x40010000
 8008c2c:	2000f340 	.word	0x2000f340
 8008c30:	2000f020 	.word	0x2000f020
 8008c34:	40000400 	.word	0x40000400
 8008c38:	2000efe0 	.word	0x2000efe0
 8008c3c:	40000c00 	.word	0x40000c00
 8008c40:	40015c24 	.word	0x40015c24
 8008c44:	40003800 	.word	0x40003800
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8008c48:	4628      	mov	r0, r5
 8008c4a:	f00b fa01 	bl	8014050 <HAL_TIM_PWM_Init>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	b100      	cbz	r0, 8008c54 <main+0x948>
 8008c52:	e7fe      	b.n	8008c52 <main+0x946>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008c54:	4621      	mov	r1, r4
 8008c56:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008c58:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c5a:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008c5c:	f00b fd72 	bl	8014744 <HAL_TIMEx_MasterConfigSynchronization>
 8008c60:	4603      	mov	r3, r0
 8008c62:	b100      	cbz	r0, 8008c66 <main+0x95a>
 8008c64:	e7fe      	b.n	8008c64 <main+0x958>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008c66:	220c      	movs	r2, #12
 8008c68:	a91a      	add	r1, sp, #104	; 0x68
 8008c6a:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008c6c:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008c70:	931e      	str	r3, [sp, #120]	; 0x78
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008c72:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008c76:	f00b fa6f 	bl	8014158 <HAL_TIM_PWM_ConfigChannel>
 8008c7a:	4606      	mov	r6, r0
 8008c7c:	b100      	cbz	r0, 8008c80 <main+0x974>
 8008c7e:	e7fe      	b.n	8008c7e <main+0x972>
  htim8.Instance = TIM8;
 8008c80:	4c4f      	ldr	r4, [pc, #316]	; (8008dc0 <main+0xab4>)
  HAL_TIM_MspPostInit(&htim5);
 8008c82:	4628      	mov	r0, r5
 8008c84:	f002 fb7a 	bl	800b37c <HAL_TIM_MspPostInit>
  htim8.Instance = TIM8;
 8008c88:	4b4e      	ldr	r3, [pc, #312]	; (8008dc4 <main+0xab8>)
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008c8a:	4620      	mov	r0, r4
  htim8.Init.Prescaler = 0;
 8008c8c:	6066      	str	r6, [r4, #4]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c8e:	61a6      	str	r6, [r4, #24]
  htim8.Instance = TIM8;
 8008c90:	6023      	str	r3, [r4, #0]
  htim8.Init.Period = 0;
 8008c92:	e9c4 6602 	strd	r6, r6, [r4, #8]
  htim8.Init.RepetitionCounter = 0;
 8008c96:	e9c4 6604 	strd	r6, r6, [r4, #16]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008c9a:	f00b f93f 	bl	8013f1c <HAL_TIM_Base_Init>
 8008c9e:	b100      	cbz	r0, 8008ca2 <main+0x996>
 8008ca0:	e7fe      	b.n	8008ca0 <main+0x994>
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008ca2:	a91a      	add	r1, sp, #104	; 0x68
 8008ca4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ca6:	971a      	str	r7, [sp, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008ca8:	f00b fbe4 	bl	8014474 <HAL_TIM_ConfigClockSource>
 8008cac:	4603      	mov	r3, r0
 8008cae:	b100      	cbz	r0, 8008cb2 <main+0x9a6>
 8008cb0:	e7fe      	b.n	8008cb0 <main+0x9a4>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008cb2:	a912      	add	r1, sp, #72	; 0x48
 8008cb4:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008cb6:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008cb8:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008cbc:	f00b fd42 	bl	8014744 <HAL_TIMEx_MasterConfigSynchronization>
 8008cc0:	b100      	cbz	r0, 8008cc4 <main+0x9b8>
 8008cc2:	e7fe      	b.n	8008cc2 <main+0x9b6>
  htim12.Instance = TIM12;
 8008cc4:	4c40      	ldr	r4, [pc, #256]	; (8008dc8 <main+0xabc>)
  htim12.Init.Prescaler = 0;
 8008cc6:	2300      	movs	r3, #0
  htim12.Instance = TIM12;
 8008cc8:	4a40      	ldr	r2, [pc, #256]	; (8008dcc <main+0xac0>)
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8008cca:	4620      	mov	r0, r4
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ccc:	6123      	str	r3, [r4, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cce:	61a3      	str	r3, [r4, #24]
  htim12.Instance = TIM12;
 8008cd0:	e9c4 2300 	strd	r2, r3, [r4]
  htim12.Init.Period = 0;
 8008cd4:	e9c4 3302 	strd	r3, r3, [r4, #8]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8008cd8:	f00b f9ba 	bl	8014050 <HAL_TIM_PWM_Init>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	b100      	cbz	r0, 8008ce2 <main+0x9d6>
 8008ce0:	e7fe      	b.n	8008ce0 <main+0x9d4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008ce2:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	a91a      	add	r1, sp, #104	; 0x68
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008ce8:	931e      	str	r3, [sp, #120]	; 0x78
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008cea:	951a      	str	r5, [sp, #104]	; 0x68
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008cec:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f00b fa31 	bl	8014158 <HAL_TIM_PWM_ConfigChannel>
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	b100      	cbz	r0, 8008cfc <main+0x9f0>
 8008cfa:	e7fe      	b.n	8008cfa <main+0x9ee>
  HAL_TIM_MspPostInit(&htim12);
 8008cfc:	4620      	mov	r0, r4
  huart1.Instance = USART1;
 8008cfe:	4c34      	ldr	r4, [pc, #208]	; (8008dd0 <main+0xac4>)
  HAL_TIM_MspPostInit(&htim12);
 8008d00:	f002 fb3c 	bl	800b37c <HAL_TIM_MspPostInit>
  huart1.Init.BaudRate = 115200;
 8008d04:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart1.Instance = USART1;
 8008d08:	4b32      	ldr	r3, [pc, #200]	; (8008dd4 <main+0xac8>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008d0a:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008d0c:	4620      	mov	r0, r4
  huart1.Init.Parity = UART_PARITY_NONE;
 8008d0e:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008d10:	6166      	str	r6, [r4, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008d12:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d16:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008d1a:	e9c4 5508 	strd	r5, r5, [r4, #32]
  huart1.Init.BaudRate = 115200;
 8008d1e:	e9c4 3700 	strd	r3, r7, [r4]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008d22:	f00b fde5 	bl	80148f0 <HAL_UART_Init>
 8008d26:	4602      	mov	r2, r0
 8008d28:	b100      	cbz	r0, 8008d2c <main+0xa20>
 8008d2a:	e7fe      	b.n	8008d2a <main+0xa1e>
  huart6.Instance = USART6;
 8008d2c:	4b2a      	ldr	r3, [pc, #168]	; (8008dd8 <main+0xacc>)
 8008d2e:	492b      	ldr	r1, [pc, #172]	; (8008ddc <main+0xad0>)
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008d30:	4618      	mov	r0, r3
  huart6.Init.BaudRate = 115200;
 8008d32:	605f      	str	r7, [r3, #4]
  huart6.Instance = USART6;
 8008d34:	6019      	str	r1, [r3, #0]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008d36:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008d3a:	e9c3 2604 	strd	r2, r6, [r3, #16]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d3e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008d42:	e9c3 2208 	strd	r2, r2, [r3, #32]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008d46:	f00b fdd3 	bl	80148f0 <HAL_UART_Init>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	b100      	cbz	r0, 8008d50 <main+0xa44>
 8008d4e:	e7fe      	b.n	8008d4e <main+0xa42>
  htim7.Instance = TIM7;
 8008d50:	4d23      	ldr	r5, [pc, #140]	; (8008de0 <main+0xad4>)
 8008d52:	4a24      	ldr	r2, [pc, #144]	; (8008de4 <main+0xad8>)
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8008d54:	4628      	mov	r0, r5
  htim7.Init.Period = 0;
 8008d56:	60eb      	str	r3, [r5, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008d58:	61ab      	str	r3, [r5, #24]
  htim7.Instance = TIM7;
 8008d5a:	602a      	str	r2, [r5, #0]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d5c:	e9c5 3301 	strd	r3, r3, [r5, #4]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8008d60:	f00b f8dc 	bl	8013f1c <HAL_TIM_Base_Init>
 8008d64:	4603      	mov	r3, r0
 8008d66:	b100      	cbz	r0, 8008d6a <main+0xa5e>
 8008d68:	e7fe      	b.n	8008d68 <main+0xa5c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	a91a      	add	r1, sp, #104	; 0x68
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008d6e:	931a      	str	r3, [sp, #104]	; 0x68
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d70:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8008d72:	f00b fce7 	bl	8014744 <HAL_TIMEx_MasterConfigSynchronization>
 8008d76:	b100      	cbz	r0, 8008d7a <main+0xa6e>
 8008d78:	e7fe      	b.n	8008d78 <main+0xa6c>
  debug_init(&huart1);
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f7f9 fde4 	bl	8002948 <debug_init>
  xprintf(ANSI_FG_GREEN "STM32F746 Discovery Project" ANSI_FG_DEFAULT "\n");
 8008d80:	4819      	ldr	r0, [pc, #100]	; (8008de8 <main+0xadc>)
 8008d82:	f003 f907 	bl	800bf94 <xprintf>
  printf("Regular printf\n");
 8008d86:	4819      	ldr	r0, [pc, #100]	; (8008dec <main+0xae0>)
 8008d88:	f016 fdfc 	bl	801f984 <puts>
  lcd_start();
 8008d8c:	f7fa fec4 	bl	8003b18 <lcd_start>
  draw_background();
 8008d90:	f7fb fb22 	bl	80043d8 <draw_background>
  if(initialize_touchscreen() == -1) {
 8008d94:	f7fa fef4 	bl	8003b80 <initialize_touchscreen>
 8008d98:	3001      	adds	r0, #1
 8008d9a:	d102      	bne.n	8008da2 <main+0xa96>
    xprintf("Error while initializing touchscreen!\n");
 8008d9c:	4814      	ldr	r0, [pc, #80]	; (8008df0 <main+0xae4>)
 8008d9e:	f003 f8f9 	bl	800bf94 <xprintf>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8008da2:	4d14      	ldr	r5, [pc, #80]	; (8008df4 <main+0xae8>)
 8008da4:	ac1a      	add	r4, sp, #104	; 0x68
 8008da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008da8:	682d      	ldr	r5, [r5, #0]
 8008daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008dac:	a81a      	add	r0, sp, #104	; 0x68
 8008dae:	2100      	movs	r1, #0
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8008db0:	6025      	str	r5, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008db2:	f014 facb 	bl	801d34c <osThreadCreate>
 8008db6:	4b10      	ldr	r3, [pc, #64]	; (8008df8 <main+0xaec>)
 8008db8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8008dba:	f014 fab1 	bl	801d320 <osKernelStart>
 8008dbe:	e7fe      	b.n	8008dbe <main+0xab2>
 8008dc0:	2000eddc 	.word	0x2000eddc
 8008dc4:	40010400 	.word	0x40010400
 8008dc8:	2000f380 	.word	0x2000f380
 8008dcc:	40001800 	.word	0x40001800
 8008dd0:	2000f1a0 	.word	0x2000f1a0
 8008dd4:	40011000 	.word	0x40011000
 8008dd8:	2000f280 	.word	0x2000f280
 8008ddc:	40011400 	.word	0x40011400
 8008de0:	2000f3f4 	.word	0x2000f3f4
 8008de4:	40001400 	.word	0x40001400
 8008de8:	08023090 	.word	0x08023090
 8008dec:	080230bc 	.word	0x080230bc
 8008df0:	080230cc 	.word	0x080230cc
 8008df4:	080209e4 	.word	0x080209e4
 8008df8:	2000ed28 	.word	0x2000ed28

08008dfc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8008dfc:	6802      	ldr	r2, [r0, #0]
 8008dfe:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d000      	beq.n	8008e06 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008e04:	4770      	bx	lr
    HAL_IncTick();
 8008e06:	f006 b967 	b.w	800f0d8 <HAL_IncTick>
 8008e0a:	bf00      	nop
 8008e0c:	40001000 	.word	0x40001000

08008e10 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8008e10:	e7fe      	b.n	8008e10 <_Error_Handler>
 8008e12:	bf00      	nop

08008e14 <mp3_player_process_frame>:

}

// Process next mp3 frame from the main file
int mp3_player_process_frame(void)
{
 8008e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	MP3FrameInfo mp3FrameInfo;

	if (current_ptr == NULL && fill_input_buffer() != 0) return EOF;
 8008e18:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8009060 <mp3_player_process_frame+0x24c>
{
 8008e1c:	b08d      	sub	sp, #52	; 0x34
 8008e1e:	4d85      	ldr	r5, [pc, #532]	; (8009034 <mp3_player_process_frame+0x220>)
	if (current_ptr == NULL && fill_input_buffer() != 0) return EOF;
 8008e20:	f8d8 0000 	ldr.w	r0, [r8]
 8008e24:	682c      	ldr	r4, [r5, #0]
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d07b      	beq.n	8008f22 <mp3_player_process_frame+0x10e>
 8008e2a:	f10d 0a14 	add.w	sl, sp, #20
 8008e2e:	4f82      	ldr	r7, [pc, #520]	; (8009038 <mp3_player_process_frame+0x224>)

	in_buf_offs = MP3FindSyncWord(current_ptr, buffer_leftover);
 8008e30:	4621      	mov	r1, r4
 8008e32:	f000 fba5 	bl	8009580 <MP3FindSyncWord>

	while(in_buf_offs < 0)
 8008e36:	2800      	cmp	r0, #0
	in_buf_offs = MP3FindSyncWord(current_ptr, buffer_leftover);
 8008e38:	6038      	str	r0, [r7, #0]
	while(in_buf_offs < 0)
 8008e3a:	da30      	bge.n	8008e9e <mp3_player_process_frame+0x8a>
 8008e3c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009058 <mp3_player_process_frame+0x244>
 8008e40:	4e7e      	ldr	r6, [pc, #504]	; (800903c <mp3_player_process_frame+0x228>)
// if there is some data left in the buffer copy it to the beginning
void copy_leftover() 
{
	if(buffer_leftover > 0)
	{
		memcpy(input_buffer, current_ptr, buffer_leftover);
 8008e42:	46cb      	mov	fp, r9
	if(buffer_leftover > 0)
 8008e44:	682b      	ldr	r3, [r5, #0]
	how_much_to_read = READ_BUFFER_SIZE - buffer_leftover;
 8008e46:	f640 7428 	movw	r4, #3880	; 0xf28
		memcpy(input_buffer, current_ptr, buffer_leftover);
 8008e4a:	4658      	mov	r0, fp
	if(buffer_leftover > 0)
 8008e4c:	2b00      	cmp	r3, #0
	how_much_to_read = READ_BUFFER_SIZE - buffer_leftover;
 8008e4e:	eba4 0403 	sub.w	r4, r4, r3
		memcpy(input_buffer, current_ptr, buffer_leftover);
 8008e52:	461a      	mov	r2, r3
	if(buffer_leftover > 0)
 8008e54:	dd05      	ble.n	8008e62 <mp3_player_process_frame+0x4e>
		memcpy(input_buffer, current_ptr, buffer_leftover);
 8008e56:	f8d8 1000 	ldr.w	r1, [r8]
 8008e5a:	9303      	str	r3, [sp, #12]
 8008e5c:	f016 fc36 	bl	801f6cc <memcpy>
 8008e60:	9b03      	ldr	r3, [sp, #12]
	f_read(&input_file, (BYTE *)input_buffer + buffer_leftover, how_much_to_read, &actually_read);
 8008e62:	eb09 0103 	add.w	r1, r9, r3
 8008e66:	4622      	mov	r2, r4
 8008e68:	4653      	mov	r3, sl
 8008e6a:	4875      	ldr	r0, [pc, #468]	; (8009040 <mp3_player_process_frame+0x22c>)
 8008e6c:	f013 fc16 	bl	801c69c <f_read>
	currentFileBytesRead += actually_read;
 8008e70:	9a05      	ldr	r2, [sp, #20]
 8008e72:	6833      	ldr	r3, [r6, #0]
			buffer_leftover--;
 8008e74:	f640 7c27 	movw	ip, #3879	; 0xf27
	if (actually_read == how_much_to_read)
 8008e78:	4294      	cmp	r4, r2
		in_buf_offs = 0;
 8008e7a:	f04f 0e00 	mov.w	lr, #0
	currentFileBytesRead += actually_read;
 8008e7e:	4413      	add	r3, r2
		in_buf_offs = MP3FindSyncWord(current_ptr, buffer_leftover);
 8008e80:	4661      	mov	r1, ip
 8008e82:	4870      	ldr	r0, [pc, #448]	; (8009044 <mp3_player_process_frame+0x230>)
	currentFileBytesRead += actually_read;
 8008e84:	6033      	str	r3, [r6, #0]
	if (actually_read == how_much_to_read)
 8008e86:	d16e      	bne.n	8008f66 <mp3_player_process_frame+0x152>
		in_buf_offs = 0;
 8008e88:	f8c7 e000 	str.w	lr, [r7]
			buffer_leftover--;
 8008e8c:	f8c5 c000 	str.w	ip, [r5]
			current_ptr++;
 8008e90:	f8c8 0000 	str.w	r0, [r8]
		in_buf_offs = MP3FindSyncWord(current_ptr, buffer_leftover);
 8008e94:	f000 fb74 	bl	8009580 <MP3FindSyncWord>
	while(in_buf_offs < 0)
 8008e98:	2800      	cmp	r0, #0
		in_buf_offs = MP3FindSyncWord(current_ptr, buffer_leftover);
 8008e9a:	6038      	str	r0, [r7, #0]
	while(in_buf_offs < 0)
 8008e9c:	dbd2      	blt.n	8008e44 <mp3_player_process_frame+0x30>
	current_ptr += in_buf_offs;
 8008e9e:	f8d8 3000 	ldr.w	r3, [r8]
	if(!(MP3GetNextFrameInfo(hMP3Decoder, &mp3FrameInfo, current_ptr) == 0 && mp3FrameInfo.nChans == 2 && mp3FrameInfo.version == 0)) 
 8008ea2:	4651      	mov	r1, sl
	buffer_leftover -= in_buf_offs;
 8008ea4:	682a      	ldr	r2, [r5, #0]
	current_ptr += in_buf_offs;
 8008ea6:	4403      	add	r3, r0
	if(!(MP3GetNextFrameInfo(hMP3Decoder, &mp3FrameInfo, current_ptr) == 0 && mp3FrameInfo.nChans == 2 && mp3FrameInfo.version == 0)) 
 8008ea8:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8009068 <mp3_player_process_frame+0x254>
	buffer_leftover -= in_buf_offs;
 8008eac:	1a14      	subs	r4, r2, r0
	if(!(MP3GetNextFrameInfo(hMP3Decoder, &mp3FrameInfo, current_ptr) == 0 && mp3FrameInfo.nChans == 2 && mp3FrameInfo.version == 0)) 
 8008eae:	461a      	mov	r2, r3
 8008eb0:	f8d9 0000 	ldr.w	r0, [r9]
	current_ptr += in_buf_offs;
 8008eb4:	f8c8 3000 	str.w	r3, [r8]
	buffer_leftover -= in_buf_offs;
 8008eb8:	602c      	str	r4, [r5, #0]
	if(!(MP3GetNextFrameInfo(hMP3Decoder, &mp3FrameInfo, current_ptr) == 0 && mp3FrameInfo.nChans == 2 && mp3FrameInfo.version == 0)) 
 8008eba:	f000 fb77 	bl	80095ac <MP3GetNextFrameInfo>
 8008ebe:	b170      	cbz	r0, 8008ede <mp3_player_process_frame+0xca>
 8008ec0:	682c      	ldr	r4, [r5, #0]
		if(buffer_leftover > 0)
 8008ec2:	2c00      	cmp	r4, #0
 8008ec4:	dd55      	ble.n	8008f72 <mp3_player_process_frame+0x15e>
			current_ptr++;
 8008ec6:	f8d8 3000 	ldr.w	r3, [r8]
			buffer_leftover--;
 8008eca:	3c01      	subs	r4, #1
		return 0;
 8008ecc:	2600      	movs	r6, #0
			current_ptr++;
 8008ece:	3301      	adds	r3, #1
			buffer_leftover--;
 8008ed0:	602c      	str	r4, [r5, #0]
			current_ptr++;
 8008ed2:	f8c8 3000 	str.w	r3, [r8]
}
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	b00d      	add	sp, #52	; 0x34
 8008eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(!(MP3GetNextFrameInfo(hMP3Decoder, &mp3FrameInfo, current_ptr) == 0 && mp3FrameInfo.nChans == 2 && mp3FrameInfo.version == 0)) 
 8008ede:	9b06      	ldr	r3, [sp, #24]
 8008ee0:	682c      	ldr	r4, [r5, #0]
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d1ed      	bne.n	8008ec2 <mp3_player_process_frame+0xae>
 8008ee6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008ee8:	2e00      	cmp	r6, #0
 8008eea:	d1ea      	bne.n	8008ec2 <mp3_player_process_frame+0xae>
	if (buffer_leftover < MAINBUF_SIZE && fill_input_buffer() != 0) return EOF;
 8008eec:	f240 7393 	movw	r3, #1939	; 0x793
	bitrate = mp3FrameInfo.bitrate;
 8008ef0:	4a55      	ldr	r2, [pc, #340]	; (8009048 <mp3_player_process_frame+0x234>)
 8008ef2:	9905      	ldr	r1, [sp, #20]
	if (buffer_leftover < MAINBUF_SIZE && fill_input_buffer() != 0) return EOF;
 8008ef4:	429c      	cmp	r4, r3
	bitrate = mp3FrameInfo.bitrate;
 8008ef6:	6011      	str	r1, [r2, #0]
	if (buffer_leftover < MAINBUF_SIZE && fill_input_buffer() != 0) return EOF;
 8008ef8:	dd46      	ble.n	8008f88 <mp3_player_process_frame+0x174>
	if(out_buf_offs == BUFFER_OFFSET_HALF)
 8008efa:	f8df a170 	ldr.w	sl, [pc, #368]	; 800906c <mp3_player_process_frame+0x258>
 8008efe:	f89a 3000 	ldrb.w	r3, [sl]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d073      	beq.n	8008fee <mp3_player_process_frame+0x1da>
	if(out_buf_offs == BUFFER_OFFSET_FULL)
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d060      	beq.n	8008fcc <mp3_player_process_frame+0x1b8>
 8008f0a:	4b50      	ldr	r3, [pc, #320]	; (800904c <mp3_player_process_frame+0x238>)
 8008f0c:	681c      	ldr	r4, [r3, #0]
	if(decode_result != ERR_MP3_NONE)
 8008f0e:	b384      	cbz	r4, 8008f72 <mp3_player_process_frame+0x15e>
		if(decode_result == ERR_MP3_INDATA_UNDERFLOW)
 8008f10:	1c63      	adds	r3, r4, #1
 8008f12:	d072      	beq.n	8008ffa <mp3_player_process_frame+0x1e6>
		else if(decode_result == ERR_UNKNOWN)
 8008f14:	4b4e      	ldr	r3, [pc, #312]	; (8009050 <mp3_player_process_frame+0x23c>)
 8008f16:	429c      	cmp	r4, r3
 8008f18:	d12b      	bne.n	8008f72 <mp3_player_process_frame+0x15e>
			xprintf("An unkown error has occured while decoding the frame\n");
 8008f1a:	484e      	ldr	r0, [pc, #312]	; (8009054 <mp3_player_process_frame+0x240>)
 8008f1c:	f003 f83a 	bl	800bf94 <xprintf>
 8008f20:	e7d9      	b.n	8008ed6 <mp3_player_process_frame+0xc2>
	if(buffer_leftover > 0)
 8008f22:	2c00      	cmp	r4, #0
 8008f24:	dc2a      	bgt.n	8008f7c <mp3_player_process_frame+0x168>
	how_much_to_read = READ_BUFFER_SIZE - buffer_leftover;
 8008f26:	f640 7b28 	movw	fp, #3880	; 0xf28
	f_read(&input_file, (BYTE *)input_buffer + buffer_leftover, how_much_to_read, &actually_read);
 8008f2a:	f10d 0a14 	add.w	sl, sp, #20
 8008f2e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009058 <mp3_player_process_frame+0x244>
	how_much_to_read = READ_BUFFER_SIZE - buffer_leftover;
 8008f32:	ebab 0704 	sub.w	r7, fp, r4
	currentFileBytesRead += actually_read;
 8008f36:	4e41      	ldr	r6, [pc, #260]	; (800903c <mp3_player_process_frame+0x228>)
	f_read(&input_file, (BYTE *)input_buffer + buffer_leftover, how_much_to_read, &actually_read);
 8008f38:	4653      	mov	r3, sl
 8008f3a:	eb09 0104 	add.w	r1, r9, r4
 8008f3e:	463a      	mov	r2, r7
 8008f40:	483f      	ldr	r0, [pc, #252]	; (8009040 <mp3_player_process_frame+0x22c>)
 8008f42:	f013 fbab 	bl	801c69c <f_read>
	currentFileBytesRead += actually_read;
 8008f46:	6833      	ldr	r3, [r6, #0]
 8008f48:	9a05      	ldr	r2, [sp, #20]
 8008f4a:	4413      	add	r3, r2
	if (actually_read == how_much_to_read)
 8008f4c:	4297      	cmp	r7, r2
	currentFileBytesRead += actually_read;
 8008f4e:	6033      	str	r3, [r6, #0]
	if (actually_read == how_much_to_read)
 8008f50:	d109      	bne.n	8008f66 <mp3_player_process_frame+0x152>
		in_buf_offs = 0;
 8008f52:	4f39      	ldr	r7, [pc, #228]	; (8009038 <mp3_player_process_frame+0x224>)
 8008f54:	2300      	movs	r3, #0
 8008f56:	4648      	mov	r0, r9
 8008f58:	465c      	mov	r4, fp
		current_ptr = input_buffer;
 8008f5a:	f8c8 9000 	str.w	r9, [r8]
		buffer_leftover = READ_BUFFER_SIZE;
 8008f5e:	f8c5 b000 	str.w	fp, [r5]
		in_buf_offs = 0;
 8008f62:	603b      	str	r3, [r7, #0]
 8008f64:	e764      	b.n	8008e30 <mp3_player_process_frame+0x1c>
	if (buffer_leftover < MAINBUF_SIZE && fill_input_buffer() != 0) return EOF;
 8008f66:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	b00d      	add	sp, #52	; 0x34
 8008f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 8008f72:	2600      	movs	r6, #0
}
 8008f74:	4630      	mov	r0, r6
 8008f76:	b00d      	add	sp, #52	; 0x34
 8008f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(input_buffer, current_ptr, buffer_leftover);
 8008f7c:	4601      	mov	r1, r0
 8008f7e:	4622      	mov	r2, r4
 8008f80:	4835      	ldr	r0, [pc, #212]	; (8009058 <mp3_player_process_frame+0x244>)
 8008f82:	f016 fba3 	bl	801f6cc <memcpy>
 8008f86:	e7ce      	b.n	8008f26 <mp3_player_process_frame+0x112>
	if(buffer_leftover > 0)
 8008f88:	2c00      	cmp	r4, #0
 8008f8a:	dd05      	ble.n	8008f98 <mp3_player_process_frame+0x184>
		memcpy(input_buffer, current_ptr, buffer_leftover);
 8008f8c:	4622      	mov	r2, r4
 8008f8e:	f8d8 1000 	ldr.w	r1, [r8]
 8008f92:	4831      	ldr	r0, [pc, #196]	; (8009058 <mp3_player_process_frame+0x244>)
 8008f94:	f016 fb9a 	bl	801f6cc <memcpy>
	how_much_to_read = READ_BUFFER_SIZE - buffer_leftover;
 8008f98:	f640 7a28 	movw	sl, #3880	; 0xf28
	f_read(&input_file, (BYTE *)input_buffer + buffer_leftover, how_much_to_read, &actually_read);
 8008f9c:	4a2e      	ldr	r2, [pc, #184]	; (8009058 <mp3_player_process_frame+0x244>)
 8008f9e:	ab04      	add	r3, sp, #16
 8008fa0:	4827      	ldr	r0, [pc, #156]	; (8009040 <mp3_player_process_frame+0x22c>)
	how_much_to_read = READ_BUFFER_SIZE - buffer_leftover;
 8008fa2:	ebaa 0b04 	sub.w	fp, sl, r4
	f_read(&input_file, (BYTE *)input_buffer + buffer_leftover, how_much_to_read, &actually_read);
 8008fa6:	1911      	adds	r1, r2, r4
 8008fa8:	465a      	mov	r2, fp
 8008faa:	f013 fb77 	bl	801c69c <f_read>
	currentFileBytesRead += actually_read;
 8008fae:	4923      	ldr	r1, [pc, #140]	; (800903c <mp3_player_process_frame+0x228>)
 8008fb0:	9a04      	ldr	r2, [sp, #16]
 8008fb2:	680b      	ldr	r3, [r1, #0]
	if (actually_read == how_much_to_read)
 8008fb4:	4593      	cmp	fp, r2
	currentFileBytesRead += actually_read;
 8008fb6:	4413      	add	r3, r2
 8008fb8:	600b      	str	r3, [r1, #0]
	if (actually_read == how_much_to_read)
 8008fba:	d1d4      	bne.n	8008f66 <mp3_player_process_frame+0x152>
		in_buf_offs = 0;
 8008fbc:	2300      	movs	r3, #0
		current_ptr = input_buffer;
 8008fbe:	4a26      	ldr	r2, [pc, #152]	; (8009058 <mp3_player_process_frame+0x244>)
		buffer_leftover = READ_BUFFER_SIZE;
 8008fc0:	f8c5 a000 	str.w	sl, [r5]
		current_ptr = input_buffer;
 8008fc4:	f8c8 2000 	str.w	r2, [r8]
		in_buf_offs = 0;
 8008fc8:	603b      	str	r3, [r7, #0]
 8008fca:	e796      	b.n	8008efa <mp3_player_process_frame+0xe6>
		decode_result = MP3Decode(hMP3Decoder, &current_ptr, &buffer_leftover, &output_buffer[DECODED_MP3_FRAME_SIZE], 0);
 8008fcc:	f8d9 0000 	ldr.w	r0, [r9]
 8008fd0:	f04f 0900 	mov.w	r9, #0
 8008fd4:	4b21      	ldr	r3, [pc, #132]	; (800905c <mp3_player_process_frame+0x248>)
 8008fd6:	f8cd 9000 	str.w	r9, [sp]
 8008fda:	4a16      	ldr	r2, [pc, #88]	; (8009034 <mp3_player_process_frame+0x220>)
 8008fdc:	4920      	ldr	r1, [pc, #128]	; (8009060 <mp3_player_process_frame+0x24c>)
 8008fde:	f000 fb15 	bl	800960c <MP3Decode>
 8008fe2:	4b1a      	ldr	r3, [pc, #104]	; (800904c <mp3_player_process_frame+0x238>)
 8008fe4:	4604      	mov	r4, r0
		out_buf_offs = BUFFER_OFFSET_NONE;
 8008fe6:	f88a 9000 	strb.w	r9, [sl]
		decode_result = MP3Decode(hMP3Decoder, &current_ptr, &buffer_leftover, &output_buffer[DECODED_MP3_FRAME_SIZE], 0);
 8008fea:	6018      	str	r0, [r3, #0]
 8008fec:	e78f      	b.n	8008f0e <mp3_player_process_frame+0xfa>
		decode_result = MP3Decode(hMP3Decoder, &current_ptr, &buffer_leftover, output_buffer, 0);
 8008fee:	f8d9 0000 	ldr.w	r0, [r9]
 8008ff2:	f04f 0900 	mov.w	r9, #0
 8008ff6:	4b1b      	ldr	r3, [pc, #108]	; (8009064 <mp3_player_process_frame+0x250>)
 8008ff8:	e7ed      	b.n	8008fd6 <mp3_player_process_frame+0x1c2>
	f_read(&input_file, (BYTE *)input_buffer + buffer_leftover, how_much_to_read, &actually_read);
 8008ffa:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8009058 <mp3_player_process_frame+0x244>
			buffer_leftover = 0;
 8008ffe:	f04f 0900 	mov.w	r9, #0
	f_read(&input_file, (BYTE *)input_buffer + buffer_leftover, how_much_to_read, &actually_read);
 8009002:	ab04      	add	r3, sp, #16
 8009004:	f640 7228 	movw	r2, #3880	; 0xf28
 8009008:	4651      	mov	r1, sl
 800900a:	480d      	ldr	r0, [pc, #52]	; (8009040 <mp3_player_process_frame+0x22c>)
			buffer_leftover = 0;
 800900c:	f8c5 9000 	str.w	r9, [r5]
	f_read(&input_file, (BYTE *)input_buffer + buffer_leftover, how_much_to_read, &actually_read);
 8009010:	f013 fb44 	bl	801c69c <f_read>
	currentFileBytesRead += actually_read;
 8009014:	4909      	ldr	r1, [pc, #36]	; (800903c <mp3_player_process_frame+0x228>)
	if (actually_read == how_much_to_read)
 8009016:	f640 7028 	movw	r0, #3880	; 0xf28
	currentFileBytesRead += actually_read;
 800901a:	9b04      	ldr	r3, [sp, #16]
 800901c:	680a      	ldr	r2, [r1, #0]
	if (actually_read == how_much_to_read)
 800901e:	4283      	cmp	r3, r0
	currentFileBytesRead += actually_read;
 8009020:	441a      	add	r2, r3
 8009022:	600a      	str	r2, [r1, #0]
	if (actually_read == how_much_to_read)
 8009024:	d19f      	bne.n	8008f66 <mp3_player_process_frame+0x152>
		current_ptr = input_buffer;
 8009026:	f8c8 a000 	str.w	sl, [r8]
		in_buf_offs = 0;
 800902a:	f8c7 9000 	str.w	r9, [r7]
		buffer_leftover = READ_BUFFER_SIZE;
 800902e:	602b      	str	r3, [r5, #0]
 8009030:	e751      	b.n	8008ed6 <mp3_player_process_frame+0xc2>
 8009032:	bf00      	nop
 8009034:	20005e80 	.word	0x20005e80
 8009038:	20005e9c 	.word	0x20005e9c
 800903c:	20005e88 	.word	0x20005e88
 8009040:	200127ac 	.word	0x200127ac
 8009044:	20011885 	.word	0x20011885
 8009048:	20005e7c 	.word	0x20005e7c
 800904c:	20005e90 	.word	0x20005e90
 8009050:	ffffd8f1 	.word	0xffffd8f1
 8009054:	080231a8 	.word	0x080231a8
 8009058:	20011884 	.word	0x20011884
 800905c:	20010684 	.word	0x20010684
 8009060:	20005e8c 	.word	0x20005e8c
 8009064:	2000f484 	.word	0x2000f484
 8009068:	20005e94 	.word	0x20005e94
 800906c:	20005ea4 	.word	0x20005ea4

08009070 <mp3_player_play>:
{
 8009070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hMP3Decoder = MP3InitDecoder();
 8009074:	f000 fa7e 	bl	8009574 <MP3InitDecoder>
 8009078:	4b65      	ldr	r3, [pc, #404]	; (8009210 <mp3_player_play+0x1a0>)
 800907a:	6018      	str	r0, [r3, #0]
	if(mp3_player_process_frame() == 0) {
 800907c:	f7ff feca 	bl	8008e14 <mp3_player_process_frame>
 8009080:	b168      	cbz	r0, 800909e <mp3_player_play+0x2e>
		state = NEXT;
 8009082:	4b64      	ldr	r3, [pc, #400]	; (8009214 <mp3_player_play+0x1a4>)
 8009084:	2203      	movs	r2, #3
 8009086:	701a      	strb	r2, [r3, #0]
	buffer_leftover = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	4963      	ldr	r1, [pc, #396]	; (8009218 <mp3_player_play+0x1a8>)
	current_ptr = NULL;
 800908c:	4a63      	ldr	r2, [pc, #396]	; (800921c <mp3_player_play+0x1ac>)
	MP3FreeDecoder(hMP3Decoder);
 800908e:	4860      	ldr	r0, [pc, #384]	; (8009210 <mp3_player_play+0x1a0>)
	buffer_leftover = 0;
 8009090:	600b      	str	r3, [r1, #0]
	current_ptr = NULL;
 8009092:	6013      	str	r3, [r2, #0]
	MP3FreeDecoder(hMP3Decoder);
 8009094:	6800      	ldr	r0, [r0, #0]
}
 8009096:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	MP3FreeDecoder(hMP3Decoder);
 800909a:	f000 ba6d 	b.w	8009578 <MP3FreeDecoder>
 800909e:	4603      	mov	r3, r0
		state = PLAY;
 80090a0:	4a5c      	ldr	r2, [pc, #368]	; (8009214 <mp3_player_play+0x1a4>)
		BSP_AUDIO_OUT_Play((uint16_t*)&output_buffer[0], AUDIO_OUT_BUFFER_SIZE * 2);
 80090a2:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80090a6:	485e      	ldr	r0, [pc, #376]	; (8009220 <mp3_player_play+0x1b0>)
		state = PLAY;
 80090a8:	7013      	strb	r3, [r2, #0]
		BSP_AUDIO_OUT_Play((uint16_t*)&output_buffer[0], AUDIO_OUT_BUFFER_SIZE * 2);
 80090aa:	f004 fbf1 	bl	800d890 <BSP_AUDIO_OUT_Play>
		show_full_time(currentFileBytes*8.0/bitrate);
 80090ae:	4b5d      	ldr	r3, [pc, #372]	; (8009224 <mp3_player_play+0x1b4>)
		int time = -1;
 80090b0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80090b4:	f8df b190 	ldr.w	fp, [pc, #400]	; 8009248 <mp3_player_play+0x1d8>
		show_full_time(currentFileBytes*8.0/bitrate);
 80090b8:	6818      	ldr	r0, [r3, #0]
 80090ba:	f7f7 fa53 	bl	8000564 <__aeabi_i2d>
 80090be:	2200      	movs	r2, #0
 80090c0:	4b59      	ldr	r3, [pc, #356]	; (8009228 <mp3_player_play+0x1b8>)
 80090c2:	f7f7 fab9 	bl	8000638 <__aeabi_dmul>
 80090c6:	4b59      	ldr	r3, [pc, #356]	; (800922c <mp3_player_play+0x1bc>)
 80090c8:	4604      	mov	r4, r0
 80090ca:	460d      	mov	r5, r1
 80090cc:	6818      	ldr	r0, [r3, #0]
 80090ce:	f7f7 fa49 	bl	8000564 <__aeabi_i2d>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	4620      	mov	r0, r4
 80090d8:	4629      	mov	r1, r5
 80090da:	4f55      	ldr	r7, [pc, #340]	; (8009230 <mp3_player_play+0x1c0>)
 80090dc:	f7f7 fbd6 	bl	800088c <__aeabi_ddiv>
				if (volume > 0) volume-=10;
 80090e0:	f8df a168 	ldr.w	sl, [pc, #360]	; 800924c <mp3_player_play+0x1dc>
		show_full_time(currentFileBytes*8.0/bitrate);
 80090e4:	f7f7 fd42 	bl	8000b6c <__aeabi_d2iz>
 80090e8:	f7fa ff3a 	bl	8003f60 <show_full_time>
		sprintf(gui_info_text, "%s", paths[currentFilePosition]);
 80090ec:	4a51      	ldr	r2, [pc, #324]	; (8009234 <mp3_player_play+0x1c4>)
 80090ee:	4b52      	ldr	r3, [pc, #328]	; (8009238 <mp3_player_play+0x1c8>)
 80090f0:	6812      	ldr	r2, [r2, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4851      	ldr	r0, [pc, #324]	; (800923c <mp3_player_play+0x1cc>)
 80090f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090fa:	f016 fc7b 	bl	801f9f4 <strcpy>
		refresh_screen(gui_info_text);
 80090fe:	484f      	ldr	r0, [pc, #316]	; (800923c <mp3_player_play+0x1cc>)
 8009100:	f7fb f84a 	bl	8004198 <refresh_screen>
			if (currentFileBytesRead*8.0/bitrate > time) {
 8009104:	f8db 0000 	ldr.w	r0, [fp]
 8009108:	f7f7 fa2c 	bl	8000564 <__aeabi_i2d>
 800910c:	2200      	movs	r2, #0
 800910e:	4b46      	ldr	r3, [pc, #280]	; (8009228 <mp3_player_play+0x1b8>)
 8009110:	4680      	mov	r8, r0
 8009112:	4689      	mov	r9, r1
 8009114:	f7f7 fa90 	bl	8000638 <__aeabi_dmul>
 8009118:	4b44      	ldr	r3, [pc, #272]	; (800922c <mp3_player_play+0x1bc>)
 800911a:	4604      	mov	r4, r0
 800911c:	460d      	mov	r5, r1
 800911e:	6818      	ldr	r0, [r3, #0]
 8009120:	f7f7 fa20 	bl	8000564 <__aeabi_i2d>
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	4620      	mov	r0, r4
 800912a:	4629      	mov	r1, r5
 800912c:	f7f7 fbae 	bl	800088c <__aeabi_ddiv>
 8009130:	4604      	mov	r4, r0
 8009132:	460d      	mov	r5, r1
 8009134:	4630      	mov	r0, r6
 8009136:	f7f7 fa15 	bl	8000564 <__aeabi_i2d>
 800913a:	4602      	mov	r2, r0
 800913c:	460b      	mov	r3, r1
 800913e:	4620      	mov	r0, r4
 8009140:	4629      	mov	r1, r5
 8009142:	f7f7 fd09 	bl	8000b58 <__aeabi_dcmpgt>
 8009146:	2800      	cmp	r0, #0
 8009148:	d13b      	bne.n	80091c2 <mp3_player_play+0x152>
			update_progress_bar(((double)currentFileBytesRead) / currentFileBytes);
 800914a:	4b36      	ldr	r3, [pc, #216]	; (8009224 <mp3_player_play+0x1b4>)
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	f7f7 fa09 	bl	8000564 <__aeabi_i2d>
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	4640      	mov	r0, r8
 8009158:	4649      	mov	r1, r9
 800915a:	f7f7 fb97 	bl	800088c <__aeabi_ddiv>
 800915e:	ec41 0b10 	vmov	d0, r0, r1
 8009162:	f7fa ff41 	bl	8003fe8 <update_progress_bar>
			Mp3_Player_State newState = check_touchscreen();
 8009166:	f7fa fd37 	bl	8003bd8 <check_touchscreen>
			if (newState == VOLUMEUP) {
 800916a:	2806      	cmp	r0, #6
			Mp3_Player_State newState = check_touchscreen();
 800916c:	4604      	mov	r4, r0
			if (newState == VOLUMEUP) {
 800916e:	d017      	beq.n	80091a0 <mp3_player_play+0x130>
			} else if (newState == VOLUMEDOWN) {
 8009170:	2807      	cmp	r0, #7
 8009172:	d032      	beq.n	80091da <mp3_player_play+0x16a>
				state = newState;
 8009174:	4b27      	ldr	r3, [pc, #156]	; (8009214 <mp3_player_play+0x1a4>)
			} else if (newState != EMPTY)
 8009176:	2808      	cmp	r0, #8
 8009178:	bf0c      	ite	eq
 800917a:	781c      	ldrbeq	r4, [r3, #0]
				state = newState;
 800917c:	701c      	strbne	r4, [r3, #0]
            if (!has_been_paused && state == PAUSE) {
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	b14b      	cbz	r3, 8009196 <mp3_player_play+0x126>
            } else if(has_been_paused && state == PLAY) {
 8009182:	b394      	cbz	r4, 80091ea <mp3_player_play+0x17a>
			} else if (has_been_paused && state == PAUSE) {
 8009184:	2c01      	cmp	r4, #1
 8009186:	d0bd      	beq.n	8009104 <mp3_player_play+0x94>
		BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8009188:	2002      	movs	r0, #2
 800918a:	f004 fbc7 	bl	800d91c <BSP_AUDIO_OUT_Stop>
		out_buf_offs = BUFFER_OFFSET_NONE;
 800918e:	4b2c      	ldr	r3, [pc, #176]	; (8009240 <mp3_player_play+0x1d0>)
 8009190:	2200      	movs	r2, #0
 8009192:	701a      	strb	r2, [r3, #0]
 8009194:	e778      	b.n	8009088 <mp3_player_play+0x18>
            if (!has_been_paused && state == PAUSE) {
 8009196:	2c01      	cmp	r4, #1
 8009198:	d02e      	beq.n	80091f8 <mp3_player_play+0x188>
			} else if (state != PLAY) {
 800919a:	2c00      	cmp	r4, #0
 800919c:	d0b2      	beq.n	8009104 <mp3_player_play+0x94>
 800919e:	e7f3      	b.n	8009188 <mp3_player_play+0x118>
				if (volume < 100) volume+=10;
 80091a0:	f8da 0000 	ldr.w	r0, [sl]
 80091a4:	2863      	cmp	r0, #99	; 0x63
 80091a6:	dc02      	bgt.n	80091ae <mp3_player_play+0x13e>
 80091a8:	300a      	adds	r0, #10
 80091aa:	f8ca 0000 	str.w	r0, [sl]
	BSP_AUDIO_OUT_SetVolume((uint8_t)volume);
 80091ae:	b2c0      	uxtb	r0, r0
 80091b0:	f004 fbd0 	bl	800d954 <BSP_AUDIO_OUT_SetVolume>
	update_volume_bar(volume);
 80091b4:	f8da 0000 	ldr.w	r0, [sl]
 80091b8:	f7fa ff4e 	bl	8004058 <update_volume_bar>
 80091bc:	4b15      	ldr	r3, [pc, #84]	; (8009214 <mp3_player_play+0x1a4>)
 80091be:	781c      	ldrb	r4, [r3, #0]
 80091c0:	e7dd      	b.n	800917e <mp3_player_play+0x10e>
				update_actual_time(time++);
 80091c2:	4630      	mov	r0, r6
 80091c4:	1c74      	adds	r4, r6, #1
 80091c6:	f7fa fe89 	bl	8003edc <update_actual_time>
 80091ca:	f8db 0000 	ldr.w	r0, [fp]
 80091ce:	f7f7 f9c9 	bl	8000564 <__aeabi_i2d>
 80091d2:	4626      	mov	r6, r4
 80091d4:	4680      	mov	r8, r0
 80091d6:	4689      	mov	r9, r1
 80091d8:	e7b7      	b.n	800914a <mp3_player_play+0xda>
				if (volume > 0) volume-=10;
 80091da:	f8da 0000 	ldr.w	r0, [sl]
 80091de:	2800      	cmp	r0, #0
 80091e0:	dde5      	ble.n	80091ae <mp3_player_play+0x13e>
 80091e2:	380a      	subs	r0, #10
 80091e4:	f8ca 0000 	str.w	r0, [sl]
 80091e8:	e7e1      	b.n	80091ae <mp3_player_play+0x13e>
            	update_play_pause_button();
 80091ea:	f7fa ff61 	bl	80040b0 <update_play_pause_button>
				if(BSP_AUDIO_OUT_Resume() != AUDIO_OK) {
 80091ee:	f004 fb81 	bl	800d8f4 <BSP_AUDIO_OUT_Resume>
 80091f2:	b938      	cbnz	r0, 8009204 <mp3_player_play+0x194>
				has_been_paused = 0;
 80091f4:	603c      	str	r4, [r7, #0]
            } else if(has_been_paused && state == PLAY) {
 80091f6:	e785      	b.n	8009104 <mp3_player_play+0x94>
            	update_play_pause_button();
 80091f8:	f7fa ff5a 	bl	80040b0 <update_play_pause_button>
				if(BSP_AUDIO_OUT_Pause() != AUDIO_OK) {
 80091fc:	f004 fb66 	bl	800d8cc <BSP_AUDIO_OUT_Pause>
 8009200:	2800      	cmp	r0, #0
 8009202:	d0f7      	beq.n	80091f4 <mp3_player_play+0x184>
					xprintf("Error while pausing stream\n");
 8009204:	480f      	ldr	r0, [pc, #60]	; (8009244 <mp3_player_play+0x1d4>)
}
 8009206:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
					xprintf("Error while pausing stream\n");
 800920a:	f002 bec3 	b.w	800bf94 <xprintf>
 800920e:	bf00      	nop
 8009210:	20005e94 	.word	0x20005e94
 8009214:	2000f480 	.word	0x2000f480
 8009218:	20005e80 	.word	0x20005e80
 800921c:	20005e8c 	.word	0x20005e8c
 8009220:	2000f484 	.word	0x2000f484
 8009224:	20005e84 	.word	0x20005e84
 8009228:	40200000 	.word	0x40200000
 800922c:	20005e7c 	.word	0x20005e7c
 8009230:	20005e98 	.word	0x20005e98
 8009234:	20000020 	.word	0x20000020
 8009238:	200129dc 	.word	0x200129dc
 800923c:	200129e0 	.word	0x200129e0
 8009240:	20005ea4 	.word	0x20005ea4
 8009244:	0802318c 	.word	0x0802318c
 8009248:	20005e88 	.word	0x20005e88
 800924c:	20000024 	.word	0x20000024

08009250 <mp3_player_main>:
{
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, 100, AUDIO_FREQUENCY_44K) == 0)
 8009254:	f64a 4244 	movw	r2, #44100	; 0xac44
{
 8009258:	4606      	mov	r6, r0
	if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, 100, AUDIO_FREQUENCY_44K) == 0)
 800925a:	2164      	movs	r1, #100	; 0x64
 800925c:	2003      	movs	r0, #3
{
 800925e:	ed2d 8b02 	vpush	{d8}
 8009262:	b0d5      	sub	sp, #340	; 0x154
	if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, 100, AUDIO_FREQUENCY_44K) == 0)
 8009264:	f004 fc72 	bl	800db4c <BSP_AUDIO_OUT_Init>
 8009268:	b380      	cbz	r0, 80092cc <mp3_player_main+0x7c>
		xprintf("Audio Init Error\n");
 800926a:	489b      	ldr	r0, [pc, #620]	; (80094d8 <mp3_player_main+0x288>)
 800926c:	f002 fe92 	bl	800bf94 <xprintf>
    state = NEXT;
 8009270:	2303      	movs	r3, #3
 8009272:	4d9a      	ldr	r5, [pc, #616]	; (80094dc <mp3_player_main+0x28c>)
	sprintf(gui_info_text, "Initializing...");
 8009274:	4f9a      	ldr	r7, [pc, #616]	; (80094e0 <mp3_player_main+0x290>)
 8009276:	4c9b      	ldr	r4, [pc, #620]	; (80094e4 <mp3_player_main+0x294>)
    state = NEXT;
 8009278:	702b      	strb	r3, [r5, #0]
    touchscreen_loop_init();
 800927a:	f7fa fc91 	bl	8003ba0 <touchscreen_loop_init>
	sprintf(gui_info_text, "Initializing...");
 800927e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009280:	6020      	str	r0, [r4, #0]
	refresh_screen(gui_info_text);
 8009282:	4620      	mov	r0, r4
	sprintf(gui_info_text, "Initializing...");
 8009284:	6061      	str	r1, [r4, #4]
 8009286:	60a2      	str	r2, [r4, #8]
 8009288:	60e3      	str	r3, [r4, #12]
	refresh_screen(gui_info_text);
 800928a:	f7fa ff85 	bl	8004198 <refresh_screen>
    if (f_opendir(&directory, path) != FR_OK) {
 800928e:	4668      	mov	r0, sp
 8009290:	4631      	mov	r1, r6
 8009292:	f013 fce3 	bl	801cc5c <f_opendir>
 8009296:	b9a0      	cbnz	r0, 80092c2 <mp3_player_main+0x72>
        if (strstr(info.fname, ".mp3"))
 8009298:	4f93      	ldr	r7, [pc, #588]	; (80094e8 <mp3_player_main+0x298>)
 800929a:	e008      	b.n	80092ae <mp3_player_main+0x5e>
        if (info.fname[0] == 0)
 800929c:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
        if (strstr(info.fname, ".mp3"))
 80092a0:	f10d 004e 	add.w	r0, sp, #78	; 0x4e
        if (info.fname[0] == 0)
 80092a4:	b1cb      	cbz	r3, 80092da <mp3_player_main+0x8a>
        if (strstr(info.fname, ".mp3"))
 80092a6:	f016 fbad 	bl	801fa04 <strstr>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d140      	bne.n	8009330 <mp3_player_main+0xe0>
        if (f_readdir(&directory, &info) != FR_OK) {
 80092ae:	a90e      	add	r1, sp, #56	; 0x38
 80092b0:	4668      	mov	r0, sp
 80092b2:	f013 fddd 	bl	801ce70 <f_readdir>
        if (strstr(info.fname, ".mp3"))
 80092b6:	4639      	mov	r1, r7
        if (f_readdir(&directory, &info) != FR_OK) {
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d0ef      	beq.n	800929c <mp3_player_main+0x4c>
            xprintf("Error reading from directory\n");
 80092bc:	488b      	ldr	r0, [pc, #556]	; (80094ec <mp3_player_main+0x29c>)
 80092be:	f002 fe69 	bl	800bf94 <xprintf>
}
 80092c2:	b055      	add	sp, #340	; 0x154
 80092c4:	ecbd 8b02 	vpop	{d8}
 80092c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 80092cc:	2005      	movs	r0, #5
 80092ce:	f004 fb4f 	bl	800d970 <BSP_AUDIO_OUT_SetAudioFrameSlot>
		xprintf("Audio Init Ok\n");
 80092d2:	4887      	ldr	r0, [pc, #540]	; (80094f0 <mp3_player_main+0x2a0>)
 80092d4:	f002 fe5e 	bl	800bf94 <xprintf>
 80092d8:	e7ca      	b.n	8009270 <mp3_player_main+0x20>
    paths = malloc(sizeof(char*) * mp3FilesCounter);
 80092da:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80094f4 <mp3_player_main+0x2a4>
    f_closedir(&directory);
 80092de:	4668      	mov	r0, sp
 80092e0:	f013 fd86 	bl	801cdf0 <f_closedir>
    paths = malloc(sizeof(char*) * mp3FilesCounter);
 80092e4:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8009518 <mp3_player_main+0x2c8>
 80092e8:	f8d9 0000 	ldr.w	r0, [r9]
 80092ec:	0080      	lsls	r0, r0, #2
 80092ee:	f016 f9dd 	bl	801f6ac <malloc>
 80092f2:	f8c8 0000 	str.w	r0, [r8]
    if (paths == NULL) {
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d0e3      	beq.n	80092c2 <mp3_player_main+0x72>
    if (f_opendir(&directory, path) != FR_OK) {
 80092fa:	4631      	mov	r1, r6
 80092fc:	4668      	mov	r0, sp
 80092fe:	f013 fcad 	bl	801cc5c <f_opendir>
 8009302:	2800      	cmp	r0, #0
 8009304:	d1dd      	bne.n	80092c2 <mp3_player_main+0x72>
    int i = 0;
 8009306:	4682      	mov	sl, r0
        if (strstr(info.fname, ".mp3")) {
 8009308:	4f77      	ldr	r7, [pc, #476]	; (80094e8 <mp3_player_main+0x298>)
 800930a:	e009      	b.n	8009320 <mp3_player_main+0xd0>
        if (info.fname[0] == 0)
 800930c:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
        if (strstr(info.fname, ".mp3")) {
 8009310:	f10d 004e 	add.w	r0, sp, #78	; 0x4e
        if (info.fname[0] == 0)
 8009314:	b18b      	cbz	r3, 800933a <mp3_player_main+0xea>
        if (strstr(info.fname, ".mp3")) {
 8009316:	f016 fb75 	bl	801fa04 <strstr>
 800931a:	2800      	cmp	r0, #0
 800931c:	f040 80be 	bne.w	800949c <mp3_player_main+0x24c>
        if (f_readdir(&directory, &info) != FR_OK) {
 8009320:	a90e      	add	r1, sp, #56	; 0x38
 8009322:	4668      	mov	r0, sp
 8009324:	f013 fda4 	bl	801ce70 <f_readdir>
        if (strstr(info.fname, ".mp3")) {
 8009328:	4639      	mov	r1, r7
        if (f_readdir(&directory, &info) != FR_OK) {
 800932a:	2800      	cmp	r0, #0
 800932c:	d0ee      	beq.n	800930c <mp3_player_main+0xbc>
 800932e:	e7c5      	b.n	80092bc <mp3_player_main+0x6c>
            mp3FilesCounter++;
 8009330:	4a70      	ldr	r2, [pc, #448]	; (80094f4 <mp3_player_main+0x2a4>)
 8009332:	6813      	ldr	r3, [r2, #0]
 8009334:	3301      	adds	r3, #1
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	e7b9      	b.n	80092ae <mp3_player_main+0x5e>
	BSP_AUDIO_OUT_SetVolume((uint8_t)volume);
 800933a:	4f6f      	ldr	r7, [pc, #444]	; (80094f8 <mp3_player_main+0x2a8>)
	f_closedir(&directory);
 800933c:	4668      	mov	r0, sp
 800933e:	f013 fd57 	bl	801cdf0 <f_closedir>
}

// reset all the used data structures
void reset_player_state() 
{
	buffer_leftover = 0;
 8009342:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 800951c <mp3_player_main+0x2cc>
	BSP_AUDIO_OUT_SetVolume((uint8_t)volume);
 8009346:	7838      	ldrb	r0, [r7, #0]
 8009348:	f004 fb04 	bl	800d954 <BSP_AUDIO_OUT_SetVolume>
	update_volume_bar(volume);
 800934c:	6838      	ldr	r0, [r7, #0]
 800934e:	f7fa fe83 	bl	8004058 <update_volume_bar>
    current_ptr = NULL;
 8009352:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 8009520 <mp3_player_main+0x2d0>
 8009356:	7828      	ldrb	r0, [r5, #0]
				update_progress_bar(0);
 8009358:	ed9f 8b5d 	vldr	d8, [pc, #372]	; 80094d0 <mp3_player_main+0x280>
		switch(state)
 800935c:	2804      	cmp	r0, #4
 800935e:	d8b0      	bhi.n	80092c2 <mp3_player_main+0x72>
 8009360:	a301      	add	r3, pc, #4	; (adr r3, 8009368 <mp3_player_main+0x118>)
 8009362:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8009366:	bf00      	nop
 8009368:	080093eb 	.word	0x080093eb
 800936c:	0800935d 	.word	0x0800935d
 8009370:	0800943d 	.word	0x0800943d
 8009374:	080093b5 	.word	0x080093b5
 8009378:	0800937d 	.word	0x0800937d
                if (currentFilePosition == 0)
 800937c:	4f5f      	ldr	r7, [pc, #380]	; (80094fc <mp3_player_main+0x2ac>)
	buffer_leftover = 0;
 800937e:	2200      	movs	r2, #0
    out_buf_offs = BUFFER_OFFSET_NONE;
 8009380:	495f      	ldr	r1, [pc, #380]	; (8009500 <mp3_player_main+0x2b0>)
                if (currentFilePosition == 0)
 8009382:	683b      	ldr	r3, [r7, #0]
	buffer_leftover = 0;
 8009384:	f8ca 2000 	str.w	r2, [sl]
    current_ptr = NULL;
 8009388:	f8cb 2000 	str.w	r2, [fp]
    out_buf_offs = BUFFER_OFFSET_NONE;
 800938c:	700a      	strb	r2, [r1, #0]
                if (currentFilePosition == 0)
 800938e:	2b00      	cmp	r3, #0
 8009390:	f040 8096 	bne.w	80094c0 <mp3_player_main+0x270>
                    currentFilePosition = mp3FilesCounter - 1;
 8009394:	f8d9 3000 	ldr.w	r3, [r9]
 8009398:	3b01      	subs	r3, #1
                if (f_open(&input_file, paths[currentFilePosition], FA_READ) != FR_OK) {
 800939a:	f8d8 1000 	ldr.w	r1, [r8]
 800939e:	2201      	movs	r2, #1
 80093a0:	4858      	ldr	r0, [pc, #352]	; (8009504 <mp3_player_main+0x2b4>)
 80093a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80093a6:	603b      	str	r3, [r7, #0]
 80093a8:	f012 ff40 	bl	801c22c <f_open>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d188      	bne.n	80092c2 <mp3_player_main+0x72>
 80093b0:	7828      	ldrb	r0, [r5, #0]
 80093b2:	e7d3      	b.n	800935c <mp3_player_main+0x10c>
			    if (currentFilePosition == mp3FilesCounter - 1)
 80093b4:	4f51      	ldr	r7, [pc, #324]	; (80094fc <mp3_player_main+0x2ac>)
	buffer_leftover = 0;
 80093b6:	2300      	movs	r3, #0
			    if (currentFilePosition == mp3FilesCounter - 1)
 80093b8:	f8d9 2000 	ldr.w	r2, [r9]
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	3a01      	subs	r2, #1
    out_buf_offs = BUFFER_OFFSET_NONE;
 80093c0:	484f      	ldr	r0, [pc, #316]	; (8009500 <mp3_player_main+0x2b0>)
	buffer_leftover = 0;
 80093c2:	f8ca 3000 	str.w	r3, [sl]
			    if (currentFilePosition == mp3FilesCounter - 1)
 80093c6:	428a      	cmp	r2, r1
    current_ptr = NULL;
 80093c8:	f8cb 3000 	str.w	r3, [fp]
    out_buf_offs = BUFFER_OFFSET_NONE;
 80093cc:	7003      	strb	r3, [r0, #0]
			    if (currentFilePosition == mp3FilesCounter - 1)
 80093ce:	d079      	beq.n	80094c4 <mp3_player_main+0x274>
                    currentFilePosition++;
 80093d0:	3101      	adds	r1, #1
 80093d2:	008b      	lsls	r3, r1, #2
                if (f_open(&input_file, paths[currentFilePosition], FA_READ) != FR_OK) {
 80093d4:	f8d8 0000 	ldr.w	r0, [r8]
 80093d8:	2201      	movs	r2, #1
 80093da:	6039      	str	r1, [r7, #0]
 80093dc:	58c1      	ldr	r1, [r0, r3]
 80093de:	4849      	ldr	r0, [pc, #292]	; (8009504 <mp3_player_main+0x2b4>)
 80093e0:	f012 ff24 	bl	801c22c <f_open>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d0e3      	beq.n	80093b0 <mp3_player_main+0x160>
 80093e8:	e76b      	b.n	80092c2 <mp3_player_main+0x72>
				if (f_findfirst(&directory, &info, path, paths[currentFilePosition]) != FR_OK) {
 80093ea:	4b44      	ldr	r3, [pc, #272]	; (80094fc <mp3_player_main+0x2ac>)
 80093ec:	4632      	mov	r2, r6
 80093ee:	f8d8 7000 	ldr.w	r7, [r8]
 80093f2:	a90e      	add	r1, sp, #56	; 0x38
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4668      	mov	r0, sp
 80093f8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80093fc:	f013 fe0a 	bl	801d014 <f_findfirst>
 8009400:	4607      	mov	r7, r0
 8009402:	2800      	cmp	r0, #0
 8009404:	d160      	bne.n	80094c8 <mp3_player_main+0x278>
				currentFileBytes = info.fsize;
 8009406:	4b40      	ldr	r3, [pc, #256]	; (8009508 <mp3_player_main+0x2b8>)
				f_closedir(&directory);
 8009408:	4668      	mov	r0, sp
				currentFileBytes = info.fsize;
 800940a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800940c:	601a      	str	r2, [r3, #0]
				f_closedir(&directory);
 800940e:	f013 fcef 	bl	801cdf0 <f_closedir>
				sprintf(gui_info_text, "%s", paths[currentFilePosition]);
 8009412:	4b3a      	ldr	r3, [pc, #232]	; (80094fc <mp3_player_main+0x2ac>)
 8009414:	4833      	ldr	r0, [pc, #204]	; (80094e4 <mp3_player_main+0x294>)
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	f8d8 3000 	ldr.w	r3, [r8]
 800941c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009420:	f016 fae8 	bl	801f9f4 <strcpy>
				refresh_screen(gui_info_text);
 8009424:	482f      	ldr	r0, [pc, #188]	; (80094e4 <mp3_player_main+0x294>)
 8009426:	f7fa feb7 	bl	8004198 <refresh_screen>
				mp3_player_play();
 800942a:	f7ff fe21 	bl	8009070 <mp3_player_play>
                f_close(&input_file);
 800942e:	4835      	ldr	r0, [pc, #212]	; (8009504 <mp3_player_main+0x2b4>)
 8009430:	f013 fb26 	bl	801ca80 <f_close>
				currentFileBytesRead = 0;
 8009434:	4b35      	ldr	r3, [pc, #212]	; (800950c <mp3_player_main+0x2bc>)
 8009436:	7828      	ldrb	r0, [r5, #0]
 8009438:	601f      	str	r7, [r3, #0]
				break;
 800943a:	e78f      	b.n	800935c <mp3_player_main+0x10c>
				update_progress_bar(0);
 800943c:	eeb0 0a48 	vmov.f32	s0, s16
 8009440:	eef0 0a68 	vmov.f32	s1, s17
                currentFilePosition = 0;
 8009444:	4f2d      	ldr	r7, [pc, #180]	; (80094fc <mp3_player_main+0x2ac>)
				update_progress_bar(0);
 8009446:	f7fa fdcf 	bl	8003fe8 <update_progress_bar>
				sprintf(gui_info_text, "STOP");
 800944a:	4a31      	ldr	r2, [pc, #196]	; (8009510 <mp3_player_main+0x2c0>)
	buffer_leftover = 0;
 800944c:	2300      	movs	r3, #0
				sprintf(gui_info_text, "STOP");
 800944e:	6810      	ldr	r0, [r2, #0]
 8009450:	7911      	ldrb	r1, [r2, #4]
    out_buf_offs = BUFFER_OFFSET_NONE;
 8009452:	4a2b      	ldr	r2, [pc, #172]	; (8009500 <mp3_player_main+0x2b0>)
				sprintf(gui_info_text, "STOP");
 8009454:	6020      	str	r0, [r4, #0]
				refresh_screen(gui_info_text);
 8009456:	4823      	ldr	r0, [pc, #140]	; (80094e4 <mp3_player_main+0x294>)
				sprintf(gui_info_text, "STOP");
 8009458:	7121      	strb	r1, [r4, #4]
	buffer_leftover = 0;
 800945a:	f8ca 3000 	str.w	r3, [sl]
    current_ptr = NULL;
 800945e:	f8cb 3000 	str.w	r3, [fp]
    out_buf_offs = BUFFER_OFFSET_NONE;
 8009462:	7013      	strb	r3, [r2, #0]
                currentFilePosition = 0;
 8009464:	603b      	str	r3, [r7, #0]
				refresh_screen(gui_info_text);
 8009466:	f7fa fe97 	bl	8004198 <refresh_screen>
 800946a:	7828      	ldrb	r0, [r5, #0]
                while(state == STOP) {
 800946c:	e005      	b.n	800947a <mp3_player_main+0x22a>
                    Mp3_Player_State newState = check_touchscreen();
 800946e:	f7fa fbb3 	bl	8003bd8 <check_touchscreen>
                    if (newState != EMPTY)
 8009472:	2808      	cmp	r0, #8
 8009474:	bf0c      	ite	eq
 8009476:	7828      	ldrbeq	r0, [r5, #0]
                        state = newState;
 8009478:	7028      	strbne	r0, [r5, #0]
                while(state == STOP) {
 800947a:	2802      	cmp	r0, #2
 800947c:	d0f7      	beq.n	800946e <mp3_player_main+0x21e>
                if (state == PLAY)
 800947e:	2800      	cmp	r0, #0
 8009480:	f47f af6c 	bne.w	800935c <mp3_player_main+0x10c>
                    if (f_open(&input_file, paths[currentFilePosition], FA_READ) != FR_OK) {
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	2201      	movs	r2, #1
 8009488:	f8d8 3000 	ldr.w	r3, [r8]
 800948c:	481d      	ldr	r0, [pc, #116]	; (8009504 <mp3_player_main+0x2b4>)
 800948e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009492:	f012 fecb 	bl	801c22c <f_open>
 8009496:	2800      	cmp	r0, #0
 8009498:	d08a      	beq.n	80093b0 <mp3_player_main+0x160>
 800949a:	e712      	b.n	80092c2 <mp3_player_main+0x72>
            paths[i] = malloc((strlen(info.fname) + 1) * sizeof(char));
 800949c:	f10d 004e 	add.w	r0, sp, #78	; 0x4e
 80094a0:	f7f6 feb6 	bl	8000210 <strlen>
 80094a4:	f8d8 b000 	ldr.w	fp, [r8]
 80094a8:	3001      	adds	r0, #1
 80094aa:	f016 f8ff 	bl	801f6ac <malloc>
			strcpy(paths[i], info.fname);
 80094ae:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
            paths[i] = malloc((strlen(info.fname) + 1) * sizeof(char));
 80094b2:	f84b 002a 	str.w	r0, [fp, sl, lsl #2]
            i++;
 80094b6:	f10a 0a01 	add.w	sl, sl, #1
			strcpy(paths[i], info.fname);
 80094ba:	f016 fa9b 	bl	801f9f4 <strcpy>
 80094be:	e72f      	b.n	8009320 <mp3_player_main+0xd0>
                    currentFilePosition--;
 80094c0:	3b01      	subs	r3, #1
 80094c2:	e76a      	b.n	800939a <mp3_player_main+0x14a>
                    currentFilePosition = 0;
 80094c4:	4619      	mov	r1, r3
 80094c6:	e785      	b.n	80093d4 <mp3_player_main+0x184>
            		xprintf("Error looking for first file occurence\n");
 80094c8:	4812      	ldr	r0, [pc, #72]	; (8009514 <mp3_player_main+0x2c4>)
 80094ca:	f002 fd63 	bl	800bf94 <xprintf>
            		return;
 80094ce:	e6f8      	b.n	80092c2 <mp3_player_main+0x72>
	...
 80094d8:	08023110 	.word	0x08023110
 80094dc:	2000f480 	.word	0x2000f480
 80094e0:	08023124 	.word	0x08023124
 80094e4:	200129e0 	.word	0x200129e0
 80094e8:	08023154 	.word	0x08023154
 80094ec:	08023134 	.word	0x08023134
 80094f0:	08023100 	.word	0x08023100
 80094f4:	20005ea0 	.word	0x20005ea0
 80094f8:	20000024 	.word	0x20000024
 80094fc:	20000020 	.word	0x20000020
 8009500:	20005ea4 	.word	0x20005ea4
 8009504:	200127ac 	.word	0x200127ac
 8009508:	20005e84 	.word	0x20005e84
 800950c:	20005e88 	.word	0x20005e88
 8009510:	08023184 	.word	0x08023184
 8009514:	0802315c 	.word	0x0802315c
 8009518:	200129dc 	.word	0x200129dc
 800951c:	20005e80 	.word	0x20005e80
 8009520:	20005e8c 	.word	0x20005e8c

08009524 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
{
 8009524:	b510      	push	{r4, lr}
    out_buf_offs = BUFFER_OFFSET_FULL;
 8009526:	4b07      	ldr	r3, [pc, #28]	; (8009544 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8009528:	2402      	movs	r4, #2
 800952a:	701c      	strb	r4, [r3, #0]
	if(mp3_player_process_frame() != 0)
 800952c:	f7ff fc72 	bl	8008e14 <mp3_player_process_frame>
 8009530:	b900      	cbnz	r0, 8009534 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>
}
 8009532:	bd10      	pop	{r4, pc}
		BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8009534:	4620      	mov	r0, r4
 8009536:	f004 f9f1 	bl	800d91c <BSP_AUDIO_OUT_Stop>
		state = NEXT;
 800953a:	4b03      	ldr	r3, [pc, #12]	; (8009548 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>)
 800953c:	2203      	movs	r2, #3
 800953e:	701a      	strb	r2, [r3, #0]
}
 8009540:	bd10      	pop	{r4, pc}
 8009542:	bf00      	nop
 8009544:	20005ea4 	.word	0x20005ea4
 8009548:	2000f480 	.word	0x2000f480

0800954c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
{
 800954c:	b508      	push	{r3, lr}
    out_buf_offs = BUFFER_OFFSET_HALF;
 800954e:	2201      	movs	r2, #1
 8009550:	4b06      	ldr	r3, [pc, #24]	; (800956c <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8009552:	701a      	strb	r2, [r3, #0]
	if(mp3_player_process_frame() != 0)
 8009554:	f7ff fc5e 	bl	8008e14 <mp3_player_process_frame>
 8009558:	b900      	cbnz	r0, 800955c <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x10>
}
 800955a:	bd08      	pop	{r3, pc}
		BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800955c:	2002      	movs	r0, #2
 800955e:	f004 f9dd 	bl	800d91c <BSP_AUDIO_OUT_Stop>
		state = NEXT;
 8009562:	4b03      	ldr	r3, [pc, #12]	; (8009570 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8009564:	2203      	movs	r2, #3
 8009566:	701a      	strb	r2, [r3, #0]
}
 8009568:	bd08      	pop	{r3, pc}
 800956a:	bf00      	nop
 800956c:	20005ea4 	.word	0x20005ea4
 8009570:	2000f480 	.word	0x2000f480

08009574 <MP3InitDecoder>:
 **************************************************************************************/
HMP3Decoder MP3InitDecoder(void)
{
	MP3DecInfo *mp3DecInfo;

	mp3DecInfo = AllocateBuffers();
 8009574:	f7f9 b996 	b.w	80028a4 <xmp3fixpt_AllocateBuffers>

08009578 <MP3FreeDecoder>:
 **************************************************************************************/
void MP3FreeDecoder(HMP3Decoder hMP3Decoder)
{
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;

	if (!mp3DecInfo)
 8009578:	b108      	cbz	r0, 800957e <MP3FreeDecoder+0x6>
		return;

	FreeBuffers(mp3DecInfo);
 800957a:	f7f9 b9e3 	b.w	8002944 <xmp3fixpt_FreeBuffers>
}
 800957e:	4770      	bx	lr

08009580 <MP3FindSyncWord>:
int MP3FindSyncWord(unsigned char *buf, int nBytes)
{
	int i;

	/* find byte-aligned syncword - need 12 (MPEG 1,2) or 11 (MPEG 2.5) matching bits */
	for (i = 0; i < nBytes - 1; i++) {
 8009580:	2901      	cmp	r1, #1
 8009582:	dd10      	ble.n	80095a6 <MP3FindSyncWord+0x26>
 8009584:	4603      	mov	r3, r0
 8009586:	3901      	subs	r1, #1
 8009588:	2000      	movs	r0, #0
 800958a:	e002      	b.n	8009592 <MP3FindSyncWord+0x12>
 800958c:	3001      	adds	r0, #1
 800958e:	4288      	cmp	r0, r1
 8009590:	d009      	beq.n	80095a6 <MP3FindSyncWord+0x26>
		if ( (buf[i+0] & SYNCWORDH) == SYNCWORDH && (buf[i+1] & SYNCWORDL) == SYNCWORDL )
 8009592:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009596:	2aff      	cmp	r2, #255	; 0xff
 8009598:	d1f8      	bne.n	800958c <MP3FindSyncWord+0xc>
 800959a:	781a      	ldrb	r2, [r3, #0]
 800959c:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 80095a0:	2ae0      	cmp	r2, #224	; 0xe0
 80095a2:	d1f3      	bne.n	800958c <MP3FindSyncWord+0xc>
			return i;
	}
	
	return -1;
}
 80095a4:	4770      	bx	lr
	return -1;
 80095a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80095aa:	4770      	bx	lr

080095ac <MP3GetNextFrameInfo>:
 **************************************************************************************/
int MP3GetNextFrameInfo(HMP3Decoder hMP3Decoder, MP3FrameInfo *mp3FrameInfo, unsigned char *buf)
{
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;

	if (!mp3DecInfo)
 80095ac:	b348      	cbz	r0, 8009602 <MP3GetNextFrameInfo+0x56>
{
 80095ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b0:	460d      	mov	r5, r1
		return ERR_MP3_NULL_POINTER;

	if (UnpackFrameHeader(mp3DecInfo, buf) == -1 || mp3DecInfo->layer != 3)
 80095b2:	4611      	mov	r1, r2
 80095b4:	4604      	mov	r4, r0
 80095b6:	f7f7 fd2d 	bl	8001014 <xmp3fixpt_UnpackFrameHeader>
 80095ba:	3001      	adds	r0, #1
 80095bc:	d01e      	beq.n	80095fc <MP3GetNextFrameInfo+0x50>
 80095be:	f8d4 37d0 	ldr.w	r3, [r4, #2000]	; 0x7d0
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d11a      	bne.n	80095fc <MP3GetNextFrameInfo+0x50>
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 80095c6:	f894 17d4 	ldrb.w	r1, [r4, #2004]	; 0x7d4
		mp3FrameInfo->bitsPerSample = 16;
 80095ca:	2610      	movs	r6, #16
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 80095cc:	4a0e      	ldr	r2, [pc, #56]	; (8009608 <MP3GetNextFrameInfo+0x5c>)
 80095ce:	eb01 0041 	add.w	r0, r1, r1, lsl #1
		mp3FrameInfo->nChans = mp3DecInfo->nChans;
 80095d2:	f8d4 77bc 	ldr.w	r7, [r4, #1980]	; 0x7bc
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 80095d6:	eb02 0240 	add.w	r2, r2, r0, lsl #1
		mp3FrameInfo->bitrate = mp3DecInfo->bitrate;
 80095da:	f8d4 07b8 	ldr.w	r0, [r4, #1976]	; 0x7b8
		mp3FrameInfo->samprate = mp3DecInfo->samprate;
 80095de:	f8d4 47c0 	ldr.w	r4, [r4, #1984]	; 0x7c0
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 80095e2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		mp3FrameInfo->bitrate = mp3DecInfo->bitrate;
 80095e6:	6028      	str	r0, [r5, #0]
		return ERR_MP3_INVALID_FRAMEHEADER;

	MP3GetLastFrameInfo(mp3DecInfo, mp3FrameInfo);

	return ERR_MP3_NONE;
 80095e8:	2000      	movs	r0, #0
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 80095ea:	fb07 f202 	mul.w	r2, r7, r2
		mp3FrameInfo->version = mp3DecInfo->version;
 80095ee:	61a9      	str	r1, [r5, #24]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 80095f0:	612a      	str	r2, [r5, #16]
		mp3FrameInfo->layer = mp3DecInfo->layer;
 80095f2:	616b      	str	r3, [r5, #20]
		mp3FrameInfo->bitsPerSample = 16;
 80095f4:	60ee      	str	r6, [r5, #12]
		mp3FrameInfo->samprate = mp3DecInfo->samprate;
 80095f6:	e9c5 7401 	strd	r7, r4, [r5, #4]
}
 80095fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_MP3_INVALID_FRAMEHEADER;
 80095fc:	f06f 0005 	mvn.w	r0, #5
}
 8009600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_MP3_NULL_POINTER;
 8009602:	f06f 0004 	mvn.w	r0, #4
}
 8009606:	4770      	bx	lr
 8009608:	08023314 	.word	0x08023314

0800960c <MP3Decode>:
	int prevBitOffset, sfBlockBits, huffBlockBits;
	unsigned char *mainPtr;
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
//	ULONG32 ulTime;
//	StartYield(&ulTime);
	if (!mp3DecInfo)
 800960c:	2800      	cmp	r0, #0
 800960e:	f000 81ba 	beq.w	8009986 <MP3Decode+0x37a>
{
 8009612:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009616:	b087      	sub	sp, #28
 8009618:	460e      	mov	r6, r1
		return ERR_MP3_NULL_POINTER;

	/* unpack frame header */
	fhBytes = UnpackFrameHeader(mp3DecInfo, *inbuf);
 800961a:	6809      	ldr	r1, [r1, #0]
 800961c:	4680      	mov	r8, r0
 800961e:	9303      	str	r3, [sp, #12]
 8009620:	4691      	mov	r9, r2
 8009622:	f7f7 fcf7 	bl	8001014 <xmp3fixpt_UnpackFrameHeader>
	if (fhBytes < 0)	
 8009626:	1e07      	subs	r7, r0, #0
 8009628:	f2c0 81aa 	blt.w	8009980 <MP3Decode+0x374>
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
	*inbuf += fhBytes;
 800962c:	6831      	ldr	r1, [r6, #0]
	
	/* unpack side info */
	siBytes = UnpackSideInfo(mp3DecInfo, *inbuf);
 800962e:	4640      	mov	r0, r8
	*inbuf += fhBytes;
 8009630:	4439      	add	r1, r7
 8009632:	6031      	str	r1, [r6, #0]
	siBytes = UnpackSideInfo(mp3DecInfo, *inbuf);
 8009634:	f7f7 fde2 	bl	80011fc <xmp3fixpt_UnpackSideInfo>
	if (siBytes < 0) {
 8009638:	2800      	cmp	r0, #0
 800963a:	f2c0 81f7 	blt.w	8009a2c <MP3Decode+0x420>
		MP3ClearBadFrame(mp3DecInfo, outbuf);
		return ERR_MP3_INVALID_SIDEINFO;
	}
	*inbuf += siBytes;
	*bytesLeft -= (fhBytes + siBytes);
 800963e:	f8d9 3000 	ldr.w	r3, [r9]
 8009642:	1839      	adds	r1, r7, r0
	*inbuf += siBytes;
 8009644:	6832      	ldr	r2, [r6, #0]
	*bytesLeft -= (fhBytes + siBytes);
 8009646:	1a59      	subs	r1, r3, r1
	*inbuf += siBytes;
 8009648:	eb02 0e00 	add.w	lr, r2, r0
 800964c:	f8c6 e000 	str.w	lr, [r6]
	*bytesLeft -= (fhBytes + siBytes);
 8009650:	f8c9 1000 	str.w	r1, [r9]
	
	/* if free mode, need to calculate bitrate and nSlots manually, based on frame size */
	if (mp3DecInfo->bitrate == 0 || mp3DecInfo->freeBitrateFlag) {
 8009654:	f8d8 37b8 	ldr.w	r3, [r8, #1976]	; 0x7b8
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 808d 	beq.w	8009778 <MP3Decode+0x16c>
 800965e:	f8d8 37b0 	ldr.w	r3, [r8, #1968]	; 0x7b0
 8009662:	b14b      	cbz	r3, 8009678 <MP3Decode+0x6c>
 8009664:	f8d8 47b4 	ldr.w	r4, [r8, #1972]	; 0x7b4
				return ERR_MP3_FREE_BITRATE_SYNC;
			}
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
		}
		mp3DecInfo->nSlots = mp3DecInfo->freeBitrateSlots + CheckPadBit(mp3DecInfo);	/* add pad byte, if required */
 8009668:	4640      	mov	r0, r8
 800966a:	f7f7 fcc7 	bl	8000ffc <xmp3fixpt_CheckPadBit>
 800966e:	4420      	add	r0, r4
 8009670:	f8c8 07cc 	str.w	r0, [r8, #1996]	; 0x7cc
 8009674:	f8d9 1000 	ldr.w	r1, [r9]
	 *  - calling function assembles "self-contained" MP3 frames by shifting any main_data 
	 *      from the bit reservoir (in previous frames) to AFTER the sync word and side info
	 *  - calling function should set mainDataBegin to 0, and tell us exactly how large this
	 *      frame is (in bytesLeft)
	 */
	if (useSize) {
 8009678:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 80e5 	beq.w	800984a <MP3Decode+0x23e>
		mp3DecInfo->nSlots = *bytesLeft;
		if (mp3DecInfo->mainDataBegin != 0 || mp3DecInfo->nSlots <= 0) {
 8009680:	f8d8 37d8 	ldr.w	r3, [r8, #2008]	; 0x7d8
		mp3DecInfo->nSlots = *bytesLeft;
 8009684:	f8c8 17cc 	str.w	r1, [r8, #1996]	; 0x7cc
		if (mp3DecInfo->mainDataBegin != 0 || mp3DecInfo->nSlots <= 0) {
 8009688:	2b00      	cmp	r3, #0
 800968a:	f040 8168 	bne.w	800995e <MP3Decode+0x352>
 800968e:	2900      	cmp	r1, #0
 8009690:	f340 8165 	ble.w	800995e <MP3Decode+0x352>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_FRAMEHEADER;
		}

		/* can operate in-place on reformatted frames */
		mp3DecInfo->mainDataBytes = mp3DecInfo->nSlots;
 8009694:	f8c8 17dc 	str.w	r1, [r8, #2012]	; 0x7dc
		mainPtr = *inbuf;
 8009698:	6837      	ldr	r7, [r6, #0]
		*inbuf += mp3DecInfo->nSlots;
		*bytesLeft -= (mp3DecInfo->nSlots);
 800969a:	f8d9 3000 	ldr.w	r3, [r9]
		*inbuf += mp3DecInfo->nSlots;
 800969e:	187a      	adds	r2, r7, r1
		*bytesLeft -= (mp3DecInfo->nSlots);
 80096a0:	1a5b      	subs	r3, r3, r1
		*inbuf += mp3DecInfo->nSlots;
 80096a2:	6032      	str	r2, [r6, #0]
		*bytesLeft -= (mp3DecInfo->nSlots);
 80096a4:	f8c9 3000 	str.w	r3, [r9]
			*bytesLeft -= (mp3DecInfo->nSlots);
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_MAINDATA_UNDERFLOW;
		}
	}
	bitOffset = 0;
 80096a8:	2000      	movs	r0, #0
	mainBits = mp3DecInfo->mainDataBytes * 8;

	/* decode one complete frame */
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 80096aa:	f8d8 27c4 	ldr.w	r2, [r8, #1988]	; 0x7c4
	mainBits = mp3DecInfo->mainDataBytes * 8;
 80096ae:	f8d8 57dc 	ldr.w	r5, [r8, #2012]	; 0x7dc
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 80096b2:	4282      	cmp	r2, r0
	bitOffset = 0;
 80096b4:	9005      	str	r0, [sp, #20]
	mainBits = mp3DecInfo->mainDataBytes * 8;
 80096b6:	ea4f 05c5 	mov.w	r5, r5, lsl #3
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 80096ba:	dd5a      	ble.n	8009772 <MP3Decode+0x166>
 80096bc:	4682      	mov	sl, r0
 80096be:	46c3      	mov	fp, r8
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 80096c0:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f340 80eb 	ble.w	80098a0 <MP3Decode+0x294>
 80096ca:	9c05      	ldr	r4, [sp, #20]
 80096cc:	f04f 0900 	mov.w	r9, #0
 80096d0:	e008      	b.n	80096e4 <MP3Decode+0xd8>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
				return ERR_MP3_INVALID_HUFFCODES;
			}

			mainPtr += offset;
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 80096d2:	9c05      	ldr	r4, [sp, #20]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 80096d4:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 80096d8:	4426      	add	r6, r4
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 80096da:	454b      	cmp	r3, r9
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 80096dc:	eba5 0506 	sub.w	r5, r5, r6
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 80096e0:	f340 80de 	ble.w	80098a0 <MP3Decode+0x294>
			offset = UnpackScaleFactors(mp3DecInfo, mainPtr, &bitOffset, mainBits, gr, ch);
 80096e4:	462b      	mov	r3, r5
 80096e6:	4639      	mov	r1, r7
 80096e8:	aa05      	add	r2, sp, #20
 80096ea:	f8cd 9004 	str.w	r9, [sp, #4]
 80096ee:	f8cd a000 	str.w	sl, [sp]
 80096f2:	4640      	mov	r0, r8
 80096f4:	f000 fdc4 	bl	800a280 <xmp3fixpt_UnpackScaleFactors>
			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
 80096f8:	9e05      	ldr	r6, [sp, #20]
 80096fa:	ebc4 04c0 	rsb	r4, r4, r0, lsl #3
			offset = UnpackScaleFactors(mp3DecInfo, mainPtr, &bitOffset, mainBits, gr, ch);
 80096fe:	4684      	mov	ip, r0
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
 8009700:	eb0b 0389 	add.w	r3, fp, r9, lsl #2
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 8009704:	aa05      	add	r2, sp, #20
			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
 8009706:	4434      	add	r4, r6
			mainPtr += offset;
 8009708:	4467      	add	r7, ip
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
 800970a:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
			if (offset < 0 || mainBits < huffBlockBits) {
 800970e:	f1bc 0f00 	cmp.w	ip, #0
			mainBits -= sfBlockBits;
 8009712:	eba5 0504 	sub.w	r5, r5, r4
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 8009716:	4640      	mov	r0, r8
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
 8009718:	eba3 0404 	sub.w	r4, r3, r4
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 800971c:	4639      	mov	r1, r7
 800971e:	4623      	mov	r3, r4
			if (offset < 0 || mainBits < huffBlockBits) {
 8009720:	f2c0 80ed 	blt.w	80098fe <MP3Decode+0x2f2>
 8009724:	42ac      	cmp	r4, r5
 8009726:	bfd4      	ite	le
 8009728:	2400      	movle	r4, #0
 800972a:	2401      	movgt	r4, #1
 800972c:	2c00      	cmp	r4, #0
 800972e:	f040 80e6 	bne.w	80098fe <MP3Decode+0x2f2>
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 8009732:	f8cd 9004 	str.w	r9, [sp, #4]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8009736:	f109 0901 	add.w	r9, r9, #1
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 800973a:	f8cd a000 	str.w	sl, [sp]
 800973e:	f7fa fe57 	bl	80043f0 <xmp3fixpt_DecodeHuffman>
			if (offset < 0) {
 8009742:	2800      	cmp	r0, #0
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 8009744:	ebc6 06c0 	rsb	r6, r6, r0, lsl #3
			mainPtr += offset;
 8009748:	4407      	add	r7, r0
			if (offset < 0) {
 800974a:	dac2      	bge.n	80096d2 <MP3Decode+0xc6>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800974c:	f8d8 17c8 	ldr.w	r1, [r8, #1992]	; 0x7c8
 8009750:	f8d8 37c4 	ldr.w	r3, [r8, #1988]	; 0x7c4
 8009754:	f8d8 27bc 	ldr.w	r2, [r8, #1980]	; 0x7bc
 8009758:	fb03 f301 	mul.w	r3, r3, r1
 800975c:	fb02 f203 	mul.w	r2, r2, r3
 8009760:	2a00      	cmp	r2, #0
 8009762:	dd04      	ble.n	800976e <MP3Decode+0x162>
 8009764:	0052      	lsls	r2, r2, #1
 8009766:	4621      	mov	r1, r4
 8009768:	9803      	ldr	r0, [sp, #12]
 800976a:	f015 ffd3 	bl	801f714 <memset>
				return ERR_MP3_INVALID_HUFFCODES;
 800976e:	f06f 0008 	mvn.w	r0, #8
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_SUBBAND;			
		}
	}
	return ERR_MP3_NONE;
}
 8009772:	b007      	add	sp, #28
 8009774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!mp3DecInfo->freeBitrateFlag) {
 8009778:	f8d8 37b0 	ldr.w	r3, [r8, #1968]	; 0x7b0
 800977c:	2b00      	cmp	r3, #0
 800977e:	f47f af71 	bne.w	8009664 <MP3Decode+0x58>
			mp3DecInfo->freeBitrateFlag = 1;
 8009782:	2301      	movs	r3, #1
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 8009784:	eba2 0c07 	sub.w	ip, r2, r7
	unsigned char *bufPtr = buf;
 8009788:	4674      	mov	r4, lr
			mp3DecInfo->freeBitrateFlag = 1;
 800978a:	f8c8 37b0 	str.w	r3, [r8, #1968]	; 0x7b0
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800978e:	f8d9 1000 	ldr.w	r1, [r9]
	for (i = 0; i < nBytes - 1; i++) {
 8009792:	2901      	cmp	r1, #1
 8009794:	dd19      	ble.n	80097ca <MP3Decode+0x1be>
 8009796:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 800979a:	2200      	movs	r2, #0
 800979c:	e002      	b.n	80097a4 <MP3Decode+0x198>
 800979e:	3201      	adds	r2, #1
 80097a0:	4552      	cmp	r2, sl
 80097a2:	d012      	beq.n	80097ca <MP3Decode+0x1be>
		if ( (buf[i+0] & SYNCWORDH) == SYNCWORDH && (buf[i+1] & SYNCWORDL) == SYNCWORDL )
 80097a4:	7825      	ldrb	r5, [r4, #0]
 80097a6:	4623      	mov	r3, r4
 80097a8:	3401      	adds	r4, #1
 80097aa:	2dff      	cmp	r5, #255	; 0xff
 80097ac:	d1f7      	bne.n	800979e <MP3Decode+0x192>
 80097ae:	785d      	ldrb	r5, [r3, #1]
 80097b0:	f005 05e0 	and.w	r5, r5, #224	; 0xe0
 80097b4:	2de0      	cmp	r5, #224	; 0xe0
 80097b6:	d1f2      	bne.n	800979e <MP3Decode+0x192>
		} else if ( (bufPtr[0] == firstFH[0]) && (bufPtr[1] == firstFH[1]) && ((bufPtr[2] & 0xfc) == (firstFH[2] & 0xfc)) ) {
 80097b8:	f89c 4000 	ldrb.w	r4, [ip]
 80097bc:	2cff      	cmp	r4, #255	; 0xff
 80097be:	d01c      	beq.n	80097fa <MP3Decode+0x1ee>
		nBytes -= (offset + 3);
 80097c0:	3203      	adds	r2, #3
		bufPtr += 3;
 80097c2:	1cdc      	adds	r4, r3, #3
		nBytes -= (offset + 3);
 80097c4:	1a89      	subs	r1, r1, r2
	for (i = 0; i < nBytes - 1; i++) {
 80097c6:	2901      	cmp	r1, #1
 80097c8:	dce5      	bgt.n	8009796 <MP3Decode+0x18a>
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 80097ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097ce:	f8d8 27c4 	ldr.w	r2, [r8, #1988]	; 0x7c4
 80097d2:	f8d8 17c8 	ldr.w	r1, [r8, #1992]	; 0x7c8
 80097d6:	f8c8 37b4 	str.w	r3, [r8, #1972]	; 0x7b4
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 80097da:	fb02 f201 	mul.w	r2, r2, r1
 80097de:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 80097e2:	fb03 f202 	mul.w	r2, r3, r2
 80097e6:	2a00      	cmp	r2, #0
 80097e8:	dd04      	ble.n	80097f4 <MP3Decode+0x1e8>
 80097ea:	0052      	lsls	r2, r2, #1
 80097ec:	9803      	ldr	r0, [sp, #12]
 80097ee:	2100      	movs	r1, #0
 80097f0:	f015 ff90 	bl	801f714 <memset>
				return ERR_MP3_FREE_BITRATE_SYNC;
 80097f4:	f06f 0002 	mvn.w	r0, #2
 80097f8:	e7bb      	b.n	8009772 <MP3Decode+0x166>
		} else if ( (bufPtr[0] == firstFH[0]) && (bufPtr[1] == firstFH[1]) && ((bufPtr[2] & 0xfc) == (firstFH[2] & 0xfc)) ) {
 80097fa:	785d      	ldrb	r5, [r3, #1]
 80097fc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009800:	42a5      	cmp	r5, r4
 8009802:	d1dd      	bne.n	80097c0 <MP3Decode+0x1b4>
 8009804:	f89c 4002 	ldrb.w	r4, [ip, #2]
 8009808:	789d      	ldrb	r5, [r3, #2]
 800980a:	4065      	eors	r5, r4
 800980c:	f015 0ffc 	tst.w	r5, #252	; 0xfc
 8009810:	d1d6      	bne.n	80097c0 <MP3Decode+0x1b4>
			if ((firstFH[2] >> 1) & 0x01)
 8009812:	07a2      	lsls	r2, r4, #30
 8009814:	f8d8 17c8 	ldr.w	r1, [r8, #1992]	; 0x7c8
 8009818:	f8d8 27c4 	ldr.w	r2, [r8, #1988]	; 0x7c4
				bufPtr--;
 800981c:	bf48      	it	mi
 800981e:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8009822:	fb01 f502 	mul.w	r5, r1, r2
			return bufPtr - buf;
 8009826:	eba3 040e 	sub.w	r4, r3, lr
			if (mp3DecInfo->freeBitrateSlots < 0) {
 800982a:	2c00      	cmp	r4, #0
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800982c:	f8c8 47b4 	str.w	r4, [r8, #1972]	; 0x7b4
			if (mp3DecInfo->freeBitrateSlots < 0) {
 8009830:	dbd3      	blt.n	80097da <MP3Decode+0x1ce>
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
 8009832:	4427      	add	r7, r4
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
 8009834:	f8d8 27c0 	ldr.w	r2, [r8, #1984]	; 0x7c0
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
 8009838:	4438      	add	r0, r7
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
 800983a:	fb02 f300 	mul.w	r3, r2, r0
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	fb93 f3f5 	sdiv	r3, r3, r5
 8009844:	f8c8 37b8 	str.w	r3, [r8, #1976]	; 0x7b8
 8009848:	e70e      	b.n	8009668 <MP3Decode+0x5c>
		if (mp3DecInfo->nSlots > *bytesLeft) {
 800984a:	f8d8 37cc 	ldr.w	r3, [r8, #1996]	; 0x7cc
 800984e:	428b      	cmp	r3, r1
 8009850:	f300 80d8 	bgt.w	8009a04 <MP3Decode+0x3f8>
		if (mp3DecInfo->mainDataBytes >= mp3DecInfo->mainDataBegin) {
 8009854:	f8d8 07dc 	ldr.w	r0, [r8, #2012]	; 0x7dc
 8009858:	f108 071c 	add.w	r7, r8, #28
 800985c:	f8d8 27d8 	ldr.w	r2, [r8, #2008]	; 0x7d8
 8009860:	4290      	cmp	r0, r2
 8009862:	f2c0 8093 	blt.w	800998c <MP3Decode+0x380>
			memmove(mp3DecInfo->mainBuf, mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes - mp3DecInfo->mainDataBegin, mp3DecInfo->mainDataBegin);
 8009866:	1a81      	subs	r1, r0, r2
 8009868:	4638      	mov	r0, r7
 800986a:	4439      	add	r1, r7
 800986c:	f015 ff39 	bl	801f6e2 <memmove>
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBegin, *inbuf, mp3DecInfo->nSlots);
 8009870:	f8d8 07d8 	ldr.w	r0, [r8, #2008]	; 0x7d8
 8009874:	f8d8 27cc 	ldr.w	r2, [r8, #1996]	; 0x7cc
 8009878:	6831      	ldr	r1, [r6, #0]
 800987a:	4438      	add	r0, r7
 800987c:	f015 ff26 	bl	801f6cc <memcpy>
			mp3DecInfo->mainDataBytes = mp3DecInfo->mainDataBegin + mp3DecInfo->nSlots;
 8009880:	f8d8 27cc 	ldr.w	r2, [r8, #1996]	; 0x7cc
 8009884:	f8d8 17d8 	ldr.w	r1, [r8, #2008]	; 0x7d8
			*inbuf += mp3DecInfo->nSlots;
 8009888:	6833      	ldr	r3, [r6, #0]
			mp3DecInfo->mainDataBytes = mp3DecInfo->mainDataBegin + mp3DecInfo->nSlots;
 800988a:	1888      	adds	r0, r1, r2
			*inbuf += mp3DecInfo->nSlots;
 800988c:	1899      	adds	r1, r3, r2
			mp3DecInfo->mainDataBytes = mp3DecInfo->mainDataBegin + mp3DecInfo->nSlots;
 800988e:	f8c8 07dc 	str.w	r0, [r8, #2012]	; 0x7dc
			*bytesLeft -= (mp3DecInfo->nSlots);
 8009892:	f8d9 3000 	ldr.w	r3, [r9]
			*inbuf += mp3DecInfo->nSlots;
 8009896:	6031      	str	r1, [r6, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 8009898:	1a9b      	subs	r3, r3, r2
 800989a:	f8c9 3000 	str.w	r3, [r9]
 800989e:	e703      	b.n	80096a8 <MP3Decode+0x9c>
		if (Dequantize(mp3DecInfo, gr) < 0) {
 80098a0:	4651      	mov	r1, sl
 80098a2:	4640      	mov	r0, r8
 80098a4:	f7f9 fd20 	bl	80032e8 <xmp3fixpt_Dequantize>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	f2c0 8097 	blt.w	80099dc <MP3Decode+0x3d0>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 80098ae:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	dd39      	ble.n	800992a <MP3Decode+0x31e>
 80098b6:	2400      	movs	r4, #0
 80098b8:	e003      	b.n	80098c2 <MP3Decode+0x2b6>
 80098ba:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 80098be:	42a3      	cmp	r3, r4
 80098c0:	dd33      	ble.n	800992a <MP3Decode+0x31e>
			if (IMDCT(mp3DecInfo, gr, ch) < 0) {
 80098c2:	4622      	mov	r2, r4
 80098c4:	4651      	mov	r1, sl
 80098c6:	4640      	mov	r0, r8
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 80098c8:	3401      	adds	r4, #1
			if (IMDCT(mp3DecInfo, gr, ch) < 0) {
 80098ca:	f7fb fc0b 	bl	80050e4 <xmp3fixpt_IMDCT>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	daf3      	bge.n	80098ba <MP3Decode+0x2ae>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 80098d2:	f8d8 17c8 	ldr.w	r1, [r8, #1992]	; 0x7c8
 80098d6:	f8d8 37c4 	ldr.w	r3, [r8, #1988]	; 0x7c4
 80098da:	f8d8 27bc 	ldr.w	r2, [r8, #1980]	; 0x7bc
 80098de:	fb03 f301 	mul.w	r3, r3, r1
 80098e2:	fb02 f203 	mul.w	r2, r2, r3
 80098e6:	2a00      	cmp	r2, #0
 80098e8:	dd04      	ble.n	80098f4 <MP3Decode+0x2e8>
 80098ea:	0052      	lsls	r2, r2, #1
 80098ec:	9803      	ldr	r0, [sp, #12]
 80098ee:	2100      	movs	r1, #0
 80098f0:	f015 ff10 	bl	801f714 <memset>
				return ERR_MP3_INVALID_IMDCT;
 80098f4:	f06f 000a 	mvn.w	r0, #10
}
 80098f8:	b007      	add	sp, #28
 80098fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 80098fe:	f8d8 17c4 	ldr.w	r1, [r8, #1988]	; 0x7c4
 8009902:	f8d8 37c8 	ldr.w	r3, [r8, #1992]	; 0x7c8
 8009906:	f8d8 27bc 	ldr.w	r2, [r8, #1980]	; 0x7bc
 800990a:	fb03 f301 	mul.w	r3, r3, r1
 800990e:	fb02 f203 	mul.w	r2, r2, r3
 8009912:	2a00      	cmp	r2, #0
 8009914:	dd04      	ble.n	8009920 <MP3Decode+0x314>
 8009916:	0052      	lsls	r2, r2, #1
 8009918:	9803      	ldr	r0, [sp, #12]
 800991a:	2100      	movs	r1, #0
 800991c:	f015 fefa 	bl	801f714 <memset>
				return ERR_MP3_INVALID_SCALEFACT;
 8009920:	f06f 0007 	mvn.w	r0, #7
}
 8009924:	b007      	add	sp, #28
 8009926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (Subband(mp3DecInfo, outbuf + gr*mp3DecInfo->nGranSamps*mp3DecInfo->nChans) < 0) {
 800992a:	f8d8 27c8 	ldr.w	r2, [r8, #1992]	; 0x7c8
 800992e:	4640      	mov	r0, r8
 8009930:	fb02 f20a 	mul.w	r2, r2, sl
 8009934:	fb03 f302 	mul.w	r3, r3, r2
 8009938:	9a03      	ldr	r2, [sp, #12]
 800993a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800993e:	f002 fa27 	bl	800bd90 <xmp3fixpt_Subband>
 8009942:	2800      	cmp	r0, #0
 8009944:	f2c0 8086 	blt.w	8009a54 <MP3Decode+0x448>
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 8009948:	f10a 0a01 	add.w	sl, sl, #1
 800994c:	f8d8 37c4 	ldr.w	r3, [r8, #1988]	; 0x7c4
 8009950:	f10b 0b08 	add.w	fp, fp, #8
 8009954:	4553      	cmp	r3, sl
 8009956:	f73f aeb3 	bgt.w	80096c0 <MP3Decode+0xb4>
	return ERR_MP3_NONE;
 800995a:	2000      	movs	r0, #0
 800995c:	e709      	b.n	8009772 <MP3Decode+0x166>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800995e:	f8d8 17c4 	ldr.w	r1, [r8, #1988]	; 0x7c4
 8009962:	f8d8 37c8 	ldr.w	r3, [r8, #1992]	; 0x7c8
 8009966:	f8d8 27bc 	ldr.w	r2, [r8, #1980]	; 0x7bc
 800996a:	fb03 f301 	mul.w	r3, r3, r1
 800996e:	fb02 f203 	mul.w	r2, r2, r3
 8009972:	2a00      	cmp	r2, #0
 8009974:	dd04      	ble.n	8009980 <MP3Decode+0x374>
 8009976:	0052      	lsls	r2, r2, #1
 8009978:	9803      	ldr	r0, [sp, #12]
 800997a:	2100      	movs	r1, #0
 800997c:	f015 feca 	bl	801f714 <memset>
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
 8009980:	f06f 0005 	mvn.w	r0, #5
 8009984:	e6f5      	b.n	8009772 <MP3Decode+0x166>
		return ERR_MP3_NULL_POINTER;
 8009986:	f06f 0004 	mvn.w	r0, #4
}
 800998a:	4770      	bx	lr
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes, *inbuf, mp3DecInfo->nSlots);
 800998c:	461a      	mov	r2, r3
 800998e:	6831      	ldr	r1, [r6, #0]
 8009990:	4438      	add	r0, r7
 8009992:	f015 fe9b 	bl	801f6cc <memcpy>
			mp3DecInfo->mainDataBytes += mp3DecInfo->nSlots;
 8009996:	f8d8 27cc 	ldr.w	r2, [r8, #1996]	; 0x7cc
 800999a:	f8d8 17dc 	ldr.w	r1, [r8, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 800999e:	6833      	ldr	r3, [r6, #0]
			mp3DecInfo->mainDataBytes += mp3DecInfo->nSlots;
 80099a0:	1888      	adds	r0, r1, r2
			*inbuf += mp3DecInfo->nSlots;
 80099a2:	1899      	adds	r1, r3, r2
			mp3DecInfo->mainDataBytes += mp3DecInfo->nSlots;
 80099a4:	f8c8 07dc 	str.w	r0, [r8, #2012]	; 0x7dc
			*bytesLeft -= (mp3DecInfo->nSlots);
 80099a8:	f8d9 3000 	ldr.w	r3, [r9]
			*inbuf += mp3DecInfo->nSlots;
 80099ac:	6031      	str	r1, [r6, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 80099ae:	1a9b      	subs	r3, r3, r2
 80099b0:	f8c9 3000 	str.w	r3, [r9]
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 80099b4:	f8d8 17c4 	ldr.w	r1, [r8, #1988]	; 0x7c4
 80099b8:	f8d8 37c8 	ldr.w	r3, [r8, #1992]	; 0x7c8
 80099bc:	f8d8 27bc 	ldr.w	r2, [r8, #1980]	; 0x7bc
 80099c0:	fb03 f301 	mul.w	r3, r3, r1
 80099c4:	fb02 f203 	mul.w	r2, r2, r3
 80099c8:	2a00      	cmp	r2, #0
 80099ca:	dd04      	ble.n	80099d6 <MP3Decode+0x3ca>
 80099cc:	0052      	lsls	r2, r2, #1
 80099ce:	9803      	ldr	r0, [sp, #12]
 80099d0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80099d2:	f015 fe9f 	bl	801f714 <memset>
			return ERR_MP3_MAINDATA_UNDERFLOW;
 80099d6:	f06f 0001 	mvn.w	r0, #1
 80099da:	e6ca      	b.n	8009772 <MP3Decode+0x166>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 80099dc:	f8d8 17c4 	ldr.w	r1, [r8, #1988]	; 0x7c4
 80099e0:	f8d8 37c8 	ldr.w	r3, [r8, #1992]	; 0x7c8
 80099e4:	f8d8 27bc 	ldr.w	r2, [r8, #1980]	; 0x7bc
 80099e8:	fb03 f301 	mul.w	r3, r3, r1
 80099ec:	fb02 f203 	mul.w	r2, r2, r3
 80099f0:	2a00      	cmp	r2, #0
 80099f2:	dd04      	ble.n	80099fe <MP3Decode+0x3f2>
 80099f4:	0052      	lsls	r2, r2, #1
 80099f6:	9803      	ldr	r0, [sp, #12]
 80099f8:	2100      	movs	r1, #0
 80099fa:	f015 fe8b 	bl	801f714 <memset>
			return ERR_MP3_INVALID_DEQUANTIZE;			
 80099fe:	f06f 0009 	mvn.w	r0, #9
 8009a02:	e6b6      	b.n	8009772 <MP3Decode+0x166>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 8009a04:	f8d8 17c4 	ldr.w	r1, [r8, #1988]	; 0x7c4
 8009a08:	f8d8 37c8 	ldr.w	r3, [r8, #1992]	; 0x7c8
 8009a0c:	f8d8 27bc 	ldr.w	r2, [r8, #1980]	; 0x7bc
 8009a10:	fb03 f301 	mul.w	r3, r3, r1
 8009a14:	fb02 f203 	mul.w	r2, r2, r3
 8009a18:	2a00      	cmp	r2, #0
 8009a1a:	dd04      	ble.n	8009a26 <MP3Decode+0x41a>
 8009a1c:	0052      	lsls	r2, r2, #1
 8009a1e:	9803      	ldr	r0, [sp, #12]
 8009a20:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009a22:	f015 fe77 	bl	801f714 <memset>
			return ERR_MP3_INDATA_UNDERFLOW;	
 8009a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a2a:	e6a2      	b.n	8009772 <MP3Decode+0x166>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 8009a2c:	f8d8 17c4 	ldr.w	r1, [r8, #1988]	; 0x7c4
 8009a30:	f8d8 37c8 	ldr.w	r3, [r8, #1992]	; 0x7c8
 8009a34:	f8d8 27bc 	ldr.w	r2, [r8, #1980]	; 0x7bc
 8009a38:	fb03 f301 	mul.w	r3, r3, r1
 8009a3c:	fb02 f203 	mul.w	r2, r2, r3
 8009a40:	2a00      	cmp	r2, #0
 8009a42:	dd04      	ble.n	8009a4e <MP3Decode+0x442>
 8009a44:	0052      	lsls	r2, r2, #1
 8009a46:	9803      	ldr	r0, [sp, #12]
 8009a48:	2100      	movs	r1, #0
 8009a4a:	f015 fe63 	bl	801f714 <memset>
		return ERR_MP3_INVALID_SIDEINFO;
 8009a4e:	f06f 0006 	mvn.w	r0, #6
 8009a52:	e68e      	b.n	8009772 <MP3Decode+0x166>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 8009a54:	f8d8 17c8 	ldr.w	r1, [r8, #1992]	; 0x7c8
 8009a58:	f8d8 37c4 	ldr.w	r3, [r8, #1988]	; 0x7c4
 8009a5c:	f8d8 27bc 	ldr.w	r2, [r8, #1980]	; 0x7bc
 8009a60:	fb03 f301 	mul.w	r3, r3, r1
 8009a64:	fb02 f203 	mul.w	r2, r2, r3
 8009a68:	2a00      	cmp	r2, #0
 8009a6a:	dd04      	ble.n	8009a76 <MP3Decode+0x46a>
 8009a6c:	0052      	lsls	r2, r2, #1
 8009a6e:	9803      	ldr	r0, [sp, #12]
 8009a70:	2100      	movs	r1, #0
 8009a72:	f015 fe4f 	bl	801f714 <memset>
			return ERR_MP3_INVALID_SUBBAND;			
 8009a76:	f06f 000b 	mvn.w	r0, #11
 8009a7a:	e67a      	b.n	8009772 <MP3Decode+0x166>

08009a7c <xmp3fixpt_PolyphaseMono>:
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 *                (note max filter gain - see polyCoef[] comments)
 **************************************************************************************/
void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
{	
 8009a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static __inline Word64 MADD64(Word64 sum64, int x, int y)
{
	U64 u;
	u.w64 = sum64;

	__asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 8009a80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a84:	4682      	mov	sl, r0
 8009a86:	b083      	sub	sp, #12
 8009a88:	2400      	movs	r4, #0
	/* special case, output sample 0 */
	coef = coefBase;
	vb1 = vbuf;
	sum1L = rndVal;

	MC0M(0)
 8009a8a:	6dce      	ldr	r6, [r1, #92]	; 0x5c
 8009a8c:	6808      	ldr	r0, [r1, #0]
 8009a8e:	e9d2 7500 	ldrd	r7, r5, [r2]
 8009a92:	fbc0 3407 	smlal	r3, r4, r0, r7
 8009a96:	426d      	negs	r5, r5
 8009a98:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(1)
 8009a9c:	68d5      	ldr	r5, [r2, #12]
 8009a9e:	684f      	ldr	r7, [r1, #4]
 8009aa0:	6d8e      	ldr	r6, [r1, #88]	; 0x58
 8009aa2:	6890      	ldr	r0, [r2, #8]
 8009aa4:	fbc7 3400 	smlal	r3, r4, r7, r0
 8009aa8:	426d      	negs	r5, r5
 8009aaa:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(2)
 8009aae:	6955      	ldr	r5, [r2, #20]
 8009ab0:	688f      	ldr	r7, [r1, #8]
 8009ab2:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8009ab4:	6910      	ldr	r0, [r2, #16]
 8009ab6:	fbc7 3400 	smlal	r3, r4, r7, r0
 8009aba:	426d      	negs	r5, r5
 8009abc:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(3)
 8009ac0:	69d5      	ldr	r5, [r2, #28]
 8009ac2:	68cf      	ldr	r7, [r1, #12]
 8009ac4:	6d0e      	ldr	r6, [r1, #80]	; 0x50
 8009ac6:	6990      	ldr	r0, [r2, #24]
 8009ac8:	fbc7 3400 	smlal	r3, r4, r7, r0
 8009acc:	426d      	negs	r5, r5
 8009ace:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(4)
 8009ad2:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8009ad4:	690f      	ldr	r7, [r1, #16]
 8009ad6:	6cce      	ldr	r6, [r1, #76]	; 0x4c
 8009ad8:	6a10      	ldr	r0, [r2, #32]
 8009ada:	fbc7 3400 	smlal	r3, r4, r7, r0
 8009ade:	426d      	negs	r5, r5
 8009ae0:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(5)
 8009ae4:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8009ae6:	694f      	ldr	r7, [r1, #20]
 8009ae8:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 8009aea:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8009aec:	fbc7 3400 	smlal	r3, r4, r7, r0
 8009af0:	426d      	negs	r5, r5
 8009af2:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(6)
 8009af6:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8009af8:	698f      	ldr	r7, [r1, #24]
 8009afa:	6c4e      	ldr	r6, [r1, #68]	; 0x44
 8009afc:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8009afe:	fbc7 3400 	smlal	r3, r4, r7, r0
 8009b02:	426d      	negs	r5, r5
 8009b04:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(7)
 8009b08:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8009b0a:	69cf      	ldr	r7, [r1, #28]
 8009b0c:	6c0e      	ldr	r6, [r1, #64]	; 0x40
 8009b0e:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8009b10:	fbc7 3400 	smlal	r3, r4, r7, r0
 8009b14:	426d      	negs	r5, r5
 8009b16:	fbc6 3405 	smlal	r3, r4, r6, r5

	return u.w64;
}
static __inline Word64 SAR64(Word64 x, int n)
{
	return x >> n;
 8009b1a:	0d1b      	lsrs	r3, r3, #20
 8009b1c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
	sign = x >> 31;
 8009b20:	17dc      	asrs	r4, r3, #31
	if (sign != (x >> 15))
 8009b22:	ebb4 5f63 	cmp.w	r4, r3, asr #21
 8009b26:	f000 8108 	beq.w	8009d3a <xmp3fixpt_PolyphaseMono+0x2be>
		x = sign ^ ((1 << 15) - 1);
 8009b2a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009b2e:	4063      	eors	r3, r4
	/* special case, output sample 16 */
	coef = coefBase + 256;
	vb1 = vbuf + 64*16;
	sum1L = rndVal;

	MC1M(0)
 8009b30:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	__asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 8009b34:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8009b38:	2500      	movs	r5, #0
	return (short)x;
 8009b3a:	f8aa 3000 	strh.w	r3, [sl]
	MC1M(0)
 8009b3e:	6836      	ldr	r6, [r6, #0]
 8009b40:	4623      	mov	r3, r4
 8009b42:	462c      	mov	r4, r5
 8009b44:	f8d2 5400 	ldr.w	r5, [r2, #1024]	; 0x400
 8009b48:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC1M(1)
 8009b4c:	f241 0504 	movw	r5, #4100	; 0x1004
 8009b50:	f8d2 6404 	ldr.w	r6, [r2, #1028]	; 0x404
 8009b54:	594d      	ldr	r5, [r1, r5]
 8009b56:	fbc5 3406 	smlal	r3, r4, r5, r6
	MC1M(2)
 8009b5a:	f241 0508 	movw	r5, #4104	; 0x1008
 8009b5e:	f8d2 6408 	ldr.w	r6, [r2, #1032]	; 0x408
 8009b62:	594d      	ldr	r5, [r1, r5]
 8009b64:	fbc5 3406 	smlal	r3, r4, r5, r6
	MC1M(3)
 8009b68:	f241 050c 	movw	r5, #4108	; 0x100c
 8009b6c:	f8d2 640c 	ldr.w	r6, [r2, #1036]	; 0x40c
 8009b70:	594d      	ldr	r5, [r1, r5]
 8009b72:	fbc5 3406 	smlal	r3, r4, r5, r6
	MC1M(4)
 8009b76:	f241 0510 	movw	r5, #4112	; 0x1010
 8009b7a:	f8d2 6410 	ldr.w	r6, [r2, #1040]	; 0x410
 8009b7e:	594d      	ldr	r5, [r1, r5]
 8009b80:	fbc5 3406 	smlal	r3, r4, r5, r6
	MC1M(5)
 8009b84:	f241 0514 	movw	r5, #4116	; 0x1014
 8009b88:	f8d2 6414 	ldr.w	r6, [r2, #1044]	; 0x414
 8009b8c:	594d      	ldr	r5, [r1, r5]
 8009b8e:	fbc5 3406 	smlal	r3, r4, r5, r6
	MC1M(6)
 8009b92:	f241 0518 	movw	r5, #4120	; 0x1018
 8009b96:	f8d2 6418 	ldr.w	r6, [r2, #1048]	; 0x418
 8009b9a:	594d      	ldr	r5, [r1, r5]
 8009b9c:	fbc5 3406 	smlal	r3, r4, r5, r6
	MC1M(7)
 8009ba0:	f241 051c 	movw	r5, #4124	; 0x101c
 8009ba4:	f8d2 641c 	ldr.w	r6, [r2, #1052]	; 0x41c
 8009ba8:	594d      	ldr	r5, [r1, r5]
 8009baa:	fbc5 3406 	smlal	r3, r4, r5, r6
	return x >> n;
 8009bae:	0d1b      	lsrs	r3, r3, #20
 8009bb0:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
	sign = x >> 31;
 8009bb4:	17dc      	asrs	r4, r3, #31
	if (sign != (x >> 15))
 8009bb6:	ebb4 5f63 	cmp.w	r4, r3, asr #21
 8009bba:	f000 80c0 	beq.w	8009d3e <xmp3fixpt_PolyphaseMono+0x2c2>
		x = sign ^ ((1 << 15) - 1);
 8009bbe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009bc2:	4063      	eors	r3, r4
 8009bc4:	f102 0580 	add.w	r5, r2, #128	; 0x80
 8009bc8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009bcc:	f10a 0940 	add.w	r9, sl, #64	; 0x40
 8009bd0:	46d0      	mov	r8, sl
 8009bd2:	9201      	str	r2, [sp, #4]
	__asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 8009bd4:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
 8009bd8:	f04f 0c00 	mov.w	ip, #0
	return (short)x;
 8009bdc:	f8aa 3020 	strh.w	r3, [sl, #32]
 8009be0:	e019      	b.n	8009c16 <xmp3fixpt_PolyphaseMono+0x19a>
		x = sign ^ ((1 << 15) - 1);
 8009be2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009be6:	4062      	eors	r2, r4
	return x >> n;
 8009be8:	0d1b      	lsrs	r3, r3, #20
	return (short)x;
 8009bea:	f828 2f02 	strh.w	r2, [r8, #2]!
 8009bee:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
	sign = x >> 31;
 8009bf2:	17da      	asrs	r2, r3, #31
	if (sign != (x >> 15))
 8009bf4:	ebb2 5f63 	cmp.w	r2, r3, asr #21
 8009bf8:	f000 809a 	beq.w	8009d30 <xmp3fixpt_PolyphaseMono+0x2b4>
		x = sign ^ ((1 << 15) - 1);
 8009bfc:	f482 42ff 	eor.w	r2, r2, #32640	; 0x7f80
 8009c00:	f082 027f 	eor.w	r2, r2, #127	; 0x7f
 8009c04:	3540      	adds	r5, #64	; 0x40
	coef = coefBase + 16;
	vb1 = vbuf + 64;
	pcm++;

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 8009c06:	9b01      	ldr	r3, [sp, #4]
	return (short)x;
 8009c08:	f829 2d02 	strh.w	r2, [r9, #-2]!
 8009c0c:	f501 7180 	add.w	r1, r1, #256	; 0x100
	for (i = 15; i > 0; i--) {
 8009c10:	429d      	cmp	r5, r3
 8009c12:	f000 808f 	beq.w	8009d34 <xmp3fixpt_PolyphaseMono+0x2b8>
		sum1L = sum2L = rndVal;

		MC2M(0)
 8009c16:	f855 ac40 	ldr.w	sl, [r5, #-64]
	__asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 8009c1a:	4672      	mov	r2, lr
 8009c1c:	f855 bc3c 	ldr.w	fp, [r5, #-60]
 8009c20:	4664      	mov	r4, ip
 8009c22:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
 8009c26:	f8d1 715c 	ldr.w	r7, [r1, #348]	; 0x15c
 8009c2a:	fbc6 240a 	smlal	r2, r4, r6, sl
 8009c2e:	4673      	mov	r3, lr
 8009c30:	4660      	mov	r0, ip
 8009c32:	fbc6 300b 	smlal	r3, r0, r6, fp
 8009c36:	f1cb 0600 	rsb	r6, fp, #0
 8009c3a:	fbc7 2406 	smlal	r2, r4, r7, r6
 8009c3e:	fbc7 300a 	smlal	r3, r0, r7, sl
		MC2M(1)
 8009c42:	e955 7a0e 	ldrd	r7, sl, [r5, #-56]	; 0x38
 8009c46:	f8d1 b104 	ldr.w	fp, [r1, #260]	; 0x104
 8009c4a:	f8d1 6158 	ldr.w	r6, [r1, #344]	; 0x158
 8009c4e:	fbcb 2407 	smlal	r2, r4, fp, r7
 8009c52:	fbcb 300a 	smlal	r3, r0, fp, sl
 8009c56:	f1ca 0a00 	rsb	sl, sl, #0
 8009c5a:	fbc6 240a 	smlal	r2, r4, r6, sl
 8009c5e:	fbc6 3007 	smlal	r3, r0, r6, r7
		MC2M(2)
 8009c62:	e955 7a0c 	ldrd	r7, sl, [r5, #-48]	; 0x30
 8009c66:	f8d1 b108 	ldr.w	fp, [r1, #264]	; 0x108
 8009c6a:	f8d1 6154 	ldr.w	r6, [r1, #340]	; 0x154
 8009c6e:	fbcb 2407 	smlal	r2, r4, fp, r7
 8009c72:	fbcb 300a 	smlal	r3, r0, fp, sl
 8009c76:	f1ca 0a00 	rsb	sl, sl, #0
 8009c7a:	fbc6 240a 	smlal	r2, r4, r6, sl
 8009c7e:	fbc6 3007 	smlal	r3, r0, r6, r7
		MC2M(3)
 8009c82:	e955 7a0a 	ldrd	r7, sl, [r5, #-40]	; 0x28
 8009c86:	f8d1 b10c 	ldr.w	fp, [r1, #268]	; 0x10c
 8009c8a:	f8d1 6150 	ldr.w	r6, [r1, #336]	; 0x150
 8009c8e:	fbcb 2407 	smlal	r2, r4, fp, r7
 8009c92:	fbcb 300a 	smlal	r3, r0, fp, sl
 8009c96:	f1ca 0a00 	rsb	sl, sl, #0
 8009c9a:	fbc6 240a 	smlal	r2, r4, r6, sl
 8009c9e:	fbc6 3007 	smlal	r3, r0, r6, r7
		MC2M(4)
 8009ca2:	e955 7a08 	ldrd	r7, sl, [r5, #-32]
 8009ca6:	f8d1 b110 	ldr.w	fp, [r1, #272]	; 0x110
 8009caa:	f8d1 614c 	ldr.w	r6, [r1, #332]	; 0x14c
 8009cae:	fbcb 2407 	smlal	r2, r4, fp, r7
 8009cb2:	fbcb 300a 	smlal	r3, r0, fp, sl
 8009cb6:	f1ca 0a00 	rsb	sl, sl, #0
 8009cba:	fbc6 240a 	smlal	r2, r4, r6, sl
 8009cbe:	fbc6 3007 	smlal	r3, r0, r6, r7
		MC2M(5)
 8009cc2:	e955 a606 	ldrd	sl, r6, [r5, #-24]
 8009cc6:	f8d1 b114 	ldr.w	fp, [r1, #276]	; 0x114
 8009cca:	f8d1 7148 	ldr.w	r7, [r1, #328]	; 0x148
 8009cce:	fbcb 240a 	smlal	r2, r4, fp, sl
 8009cd2:	fbcb 3006 	smlal	r3, r0, fp, r6
 8009cd6:	4276      	negs	r6, r6
 8009cd8:	fbc7 2406 	smlal	r2, r4, r7, r6
 8009cdc:	fbc7 300a 	smlal	r3, r0, r7, sl
		MC2M(6)
 8009ce0:	e955 a604 	ldrd	sl, r6, [r5, #-16]
 8009ce4:	f8d1 b118 	ldr.w	fp, [r1, #280]	; 0x118
 8009ce8:	f8d1 7144 	ldr.w	r7, [r1, #324]	; 0x144
 8009cec:	fbcb 240a 	smlal	r2, r4, fp, sl
 8009cf0:	fbcb 3006 	smlal	r3, r0, fp, r6
 8009cf4:	4276      	negs	r6, r6
 8009cf6:	fbc7 2406 	smlal	r2, r4, r7, r6
 8009cfa:	fbc7 300a 	smlal	r3, r0, r7, sl
		MC2M(7)
 8009cfe:	e955 a602 	ldrd	sl, r6, [r5, #-8]
 8009d02:	f8d1 b11c 	ldr.w	fp, [r1, #284]	; 0x11c
 8009d06:	f8d1 7140 	ldr.w	r7, [r1, #320]	; 0x140
 8009d0a:	fbcb 240a 	smlal	r2, r4, fp, sl
 8009d0e:	fbcb 3006 	smlal	r3, r0, fp, r6
 8009d12:	4276      	negs	r6, r6
 8009d14:	fbc7 2406 	smlal	r2, r4, r7, r6
 8009d18:	fbc7 300a 	smlal	r3, r0, r7, sl
	return x >> n;
 8009d1c:	0d12      	lsrs	r2, r2, #20
 8009d1e:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
	sign = x >> 31;
 8009d22:	17d4      	asrs	r4, r2, #31
	if (sign != (x >> 15))
 8009d24:	ebb4 5f62 	cmp.w	r4, r2, asr #21
 8009d28:	f47f af5b 	bne.w	8009be2 <xmp3fixpt_PolyphaseMono+0x166>
	x >>= fracBits;
 8009d2c:	1192      	asrs	r2, r2, #6
 8009d2e:	e75b      	b.n	8009be8 <xmp3fixpt_PolyphaseMono+0x16c>
 8009d30:	119a      	asrs	r2, r3, #6
 8009d32:	e767      	b.n	8009c04 <xmp3fixpt_PolyphaseMono+0x188>
		vb1 += 64;
		*(pcm)       = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*i) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
		pcm++;
	}
}
 8009d34:	b003      	add	sp, #12
 8009d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	x >>= fracBits;
 8009d3a:	119b      	asrs	r3, r3, #6
 8009d3c:	e6f8      	b.n	8009b30 <xmp3fixpt_PolyphaseMono+0xb4>
 8009d3e:	119b      	asrs	r3, r3, #6
 8009d40:	e740      	b.n	8009bc4 <xmp3fixpt_PolyphaseMono+0x148>
 8009d42:	bf00      	nop

08009d44 <xmp3fixpt_PolyphaseStereo>:
 * Notes:       interleaves PCM samples LRLRLR...
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 **************************************************************************************/
void PolyphaseStereo(short *pcm, int *vbuf, const int *coefBase)
{
 8009d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 8009d48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d4c:	2500      	movs	r5, #0
 8009d4e:	b085      	sub	sp, #20
	/* special case, output sample 0 */
	coef = coefBase;
	vb1 = vbuf;
	sum1L = sum1R = rndVal;

	MC0S(0)
 8009d50:	6816      	ldr	r6, [r2, #0]
 8009d52:	461c      	mov	r4, r3
 8009d54:	680f      	ldr	r7, [r1, #0]
 8009d56:	46ac      	mov	ip, r5
 8009d58:	fbc7 4c06 	smlal	r4, ip, r7, r6
 8009d5c:	6857      	ldr	r7, [r2, #4]
 8009d5e:	f1c7 0e00 	rsb	lr, r7, #0
 8009d62:	6dcf      	ldr	r7, [r1, #92]	; 0x5c
 8009d64:	fbc7 4c0e 	smlal	r4, ip, r7, lr
 8009d68:	f8d1 7080 	ldr.w	r7, [r1, #128]	; 0x80
 8009d6c:	fbc7 3506 	smlal	r3, r5, r7, r6
 8009d70:	f8d1 60dc 	ldr.w	r6, [r1, #220]	; 0xdc
 8009d74:	fbc6 350e 	smlal	r3, r5, r6, lr
	MC0S(1)
 8009d78:	6896      	ldr	r6, [r2, #8]
 8009d7a:	684f      	ldr	r7, [r1, #4]
 8009d7c:	fbc7 4c06 	smlal	r4, ip, r7, r6
 8009d80:	68d7      	ldr	r7, [r2, #12]
 8009d82:	f1c7 0e00 	rsb	lr, r7, #0
 8009d86:	6d8f      	ldr	r7, [r1, #88]	; 0x58
 8009d88:	fbc7 4c0e 	smlal	r4, ip, r7, lr
 8009d8c:	f8d1 7084 	ldr.w	r7, [r1, #132]	; 0x84
 8009d90:	fbc7 3506 	smlal	r3, r5, r7, r6
 8009d94:	f8d1 60d8 	ldr.w	r6, [r1, #216]	; 0xd8
 8009d98:	fbc6 350e 	smlal	r3, r5, r6, lr
	MC0S(2)
 8009d9c:	6916      	ldr	r6, [r2, #16]
 8009d9e:	688f      	ldr	r7, [r1, #8]
 8009da0:	fbc7 4c06 	smlal	r4, ip, r7, r6
 8009da4:	6957      	ldr	r7, [r2, #20]
 8009da6:	f1c7 0e00 	rsb	lr, r7, #0
 8009daa:	6d4f      	ldr	r7, [r1, #84]	; 0x54
 8009dac:	fbc7 4c0e 	smlal	r4, ip, r7, lr
 8009db0:	f8d1 7088 	ldr.w	r7, [r1, #136]	; 0x88
 8009db4:	fbc7 3506 	smlal	r3, r5, r7, r6
 8009db8:	f8d1 60d4 	ldr.w	r6, [r1, #212]	; 0xd4
 8009dbc:	fbc6 350e 	smlal	r3, r5, r6, lr
	MC0S(3)
 8009dc0:	6996      	ldr	r6, [r2, #24]
 8009dc2:	68cf      	ldr	r7, [r1, #12]
 8009dc4:	fbc7 4c06 	smlal	r4, ip, r7, r6
 8009dc8:	69d7      	ldr	r7, [r2, #28]
 8009dca:	f1c7 0e00 	rsb	lr, r7, #0
 8009dce:	6d0f      	ldr	r7, [r1, #80]	; 0x50
 8009dd0:	fbc7 4c0e 	smlal	r4, ip, r7, lr
 8009dd4:	f8d1 708c 	ldr.w	r7, [r1, #140]	; 0x8c
 8009dd8:	fbc7 3506 	smlal	r3, r5, r7, r6
 8009ddc:	f8d1 60d0 	ldr.w	r6, [r1, #208]	; 0xd0
 8009de0:	fbc6 350e 	smlal	r3, r5, r6, lr
	MC0S(4)
 8009de4:	6a16      	ldr	r6, [r2, #32]
 8009de6:	690f      	ldr	r7, [r1, #16]
 8009de8:	fbc7 4c06 	smlal	r4, ip, r7, r6
 8009dec:	6a57      	ldr	r7, [r2, #36]	; 0x24
 8009dee:	f1c7 0e00 	rsb	lr, r7, #0
 8009df2:	6ccf      	ldr	r7, [r1, #76]	; 0x4c
 8009df4:	fbc7 4c0e 	smlal	r4, ip, r7, lr
 8009df8:	f8d1 7090 	ldr.w	r7, [r1, #144]	; 0x90
 8009dfc:	fbc7 3506 	smlal	r3, r5, r7, r6
 8009e00:	f8d1 60cc 	ldr.w	r6, [r1, #204]	; 0xcc
 8009e04:	fbc6 350e 	smlal	r3, r5, r6, lr
	MC0S(5)
 8009e08:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8009e0a:	694f      	ldr	r7, [r1, #20]
 8009e0c:	fbc7 4c06 	smlal	r4, ip, r7, r6
 8009e10:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
 8009e12:	f1c7 0e00 	rsb	lr, r7, #0
 8009e16:	6c8f      	ldr	r7, [r1, #72]	; 0x48
 8009e18:	fbc7 4c0e 	smlal	r4, ip, r7, lr
 8009e1c:	f8d1 7094 	ldr.w	r7, [r1, #148]	; 0x94
 8009e20:	fbc7 3506 	smlal	r3, r5, r7, r6
 8009e24:	f8d1 60c8 	ldr.w	r6, [r1, #200]	; 0xc8
 8009e28:	fbc6 350e 	smlal	r3, r5, r6, lr
	MC0S(6)
 8009e2c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8009e2e:	698f      	ldr	r7, [r1, #24]
 8009e30:	fbc7 4c06 	smlal	r4, ip, r7, r6
 8009e34:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8009e36:	f1c7 0e00 	rsb	lr, r7, #0
 8009e3a:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 8009e3c:	fbc7 4c0e 	smlal	r4, ip, r7, lr
 8009e40:	f8d1 7098 	ldr.w	r7, [r1, #152]	; 0x98
 8009e44:	fbc7 3506 	smlal	r3, r5, r7, r6
 8009e48:	f8d1 60c4 	ldr.w	r6, [r1, #196]	; 0xc4
 8009e4c:	fbc6 350e 	smlal	r3, r5, r6, lr
	MC0S(7)
 8009e50:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8009e52:	69cf      	ldr	r7, [r1, #28]
 8009e54:	fbc7 4c06 	smlal	r4, ip, r7, r6
 8009e58:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
 8009e5a:	f1c7 0e00 	rsb	lr, r7, #0
 8009e5e:	6c0f      	ldr	r7, [r1, #64]	; 0x40
 8009e60:	fbc7 4c0e 	smlal	r4, ip, r7, lr
 8009e64:	f8d1 709c 	ldr.w	r7, [r1, #156]	; 0x9c
 8009e68:	fbc7 3506 	smlal	r3, r5, r7, r6
 8009e6c:	f8d1 60c0 	ldr.w	r6, [r1, #192]	; 0xc0
 8009e70:	fbc6 350e 	smlal	r3, r5, r6, lr
	return x >> n;
 8009e74:	0d24      	lsrs	r4, r4, #20
 8009e76:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
	sign = x >> 31;
 8009e7a:	17e6      	asrs	r6, r4, #31
	if (sign != (x >> 15))
 8009e7c:	ebb6 5f64 	cmp.w	r6, r4, asr #21
 8009e80:	f000 81f6 	beq.w	800a270 <xmp3fixpt_PolyphaseStereo+0x52c>
		x = sign ^ ((1 << 15) - 1);
 8009e84:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8009e88:	4074      	eors	r4, r6
 8009e8a:	0d1b      	lsrs	r3, r3, #20
	return (short)x;
 8009e8c:	8004      	strh	r4, [r0, #0]
 8009e8e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
	sign = x >> 31;
 8009e92:	17dc      	asrs	r4, r3, #31
	if (sign != (x >> 15))
 8009e94:	ebb4 5f63 	cmp.w	r4, r3, asr #21
 8009e98:	f000 81f0 	beq.w	800a27c <xmp3fixpt_PolyphaseStereo+0x538>
		x = sign ^ ((1 << 15) - 1);
 8009e9c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009ea0:	4063      	eors	r3, r4
	/* special case, output sample 16 */
	coef = coefBase + 256;
	vb1 = vbuf + 64*16;
	sum1L = sum1R = rndVal;

	MC1S(0)
 8009ea2:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	__asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 8009ea6:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
 8009eaa:	2600      	movs	r6, #0
	return (short)x;
 8009eac:	8043      	strh	r3, [r0, #2]
	MC1S(0)
 8009eae:	6825      	ldr	r5, [r4, #0]
 8009eb0:	4664      	mov	r4, ip
 8009eb2:	4633      	mov	r3, r6
 8009eb4:	f8d2 7400 	ldr.w	r7, [r2, #1024]	; 0x400
 8009eb8:	fbc5 4307 	smlal	r4, r3, r5, r7
 8009ebc:	f501 5584 	add.w	r5, r1, #4224	; 0x1080
 8009ec0:	682d      	ldr	r5, [r5, #0]
 8009ec2:	fbc5 c607 	smlal	ip, r6, r5, r7
	MC1S(1)
 8009ec6:	f241 0704 	movw	r7, #4100	; 0x1004
 8009eca:	f8d2 5404 	ldr.w	r5, [r2, #1028]	; 0x404
 8009ece:	59cf      	ldr	r7, [r1, r7]
 8009ed0:	fbc7 4305 	smlal	r4, r3, r7, r5
 8009ed4:	f241 0784 	movw	r7, #4228	; 0x1084
 8009ed8:	59cf      	ldr	r7, [r1, r7]
 8009eda:	fbc7 c605 	smlal	ip, r6, r7, r5
	MC1S(2)
 8009ede:	f241 0708 	movw	r7, #4104	; 0x1008
 8009ee2:	f8d2 5408 	ldr.w	r5, [r2, #1032]	; 0x408
 8009ee6:	59cf      	ldr	r7, [r1, r7]
 8009ee8:	fbc7 4305 	smlal	r4, r3, r7, r5
 8009eec:	f241 0788 	movw	r7, #4232	; 0x1088
 8009ef0:	59cf      	ldr	r7, [r1, r7]
 8009ef2:	fbc7 c605 	smlal	ip, r6, r7, r5
	MC1S(3)
 8009ef6:	f241 050c 	movw	r5, #4108	; 0x100c
 8009efa:	f8d2 740c 	ldr.w	r7, [r2, #1036]	; 0x40c
 8009efe:	594d      	ldr	r5, [r1, r5]
 8009f00:	fbc5 4307 	smlal	r4, r3, r5, r7
 8009f04:	f241 0e8c 	movw	lr, #4236	; 0x108c
 8009f08:	4665      	mov	r5, ip
 8009f0a:	f851 c00e 	ldr.w	ip, [r1, lr]
 8009f0e:	fbcc 5607 	smlal	r5, r6, ip, r7
	MC1S(4)
 8009f12:	f241 0c10 	movw	ip, #4112	; 0x1010
 8009f16:	f8d2 7410 	ldr.w	r7, [r2, #1040]	; 0x410
 8009f1a:	f851 c00c 	ldr.w	ip, [r1, ip]
 8009f1e:	fbcc 4307 	smlal	r4, r3, ip, r7
 8009f22:	f241 0c90 	movw	ip, #4240	; 0x1090
 8009f26:	f851 c00c 	ldr.w	ip, [r1, ip]
 8009f2a:	fbcc 5607 	smlal	r5, r6, ip, r7
	MC1S(5)
 8009f2e:	f241 0c14 	movw	ip, #4116	; 0x1014
 8009f32:	f8d2 7414 	ldr.w	r7, [r2, #1044]	; 0x414
 8009f36:	f851 c00c 	ldr.w	ip, [r1, ip]
 8009f3a:	fbcc 4307 	smlal	r4, r3, ip, r7
 8009f3e:	f241 0c94 	movw	ip, #4244	; 0x1094
 8009f42:	f851 c00c 	ldr.w	ip, [r1, ip]
 8009f46:	fbcc 5607 	smlal	r5, r6, ip, r7
	MC1S(6)
 8009f4a:	f241 0c18 	movw	ip, #4120	; 0x1018
 8009f4e:	f8d2 7418 	ldr.w	r7, [r2, #1048]	; 0x418
 8009f52:	f851 c00c 	ldr.w	ip, [r1, ip]
 8009f56:	fbcc 4307 	smlal	r4, r3, ip, r7
 8009f5a:	f241 0c98 	movw	ip, #4248	; 0x1098
 8009f5e:	f851 c00c 	ldr.w	ip, [r1, ip]
 8009f62:	fbcc 5607 	smlal	r5, r6, ip, r7
	MC1S(7)
 8009f66:	f241 0c1c 	movw	ip, #4124	; 0x101c
 8009f6a:	f8d2 741c 	ldr.w	r7, [r2, #1052]	; 0x41c
 8009f6e:	f851 c00c 	ldr.w	ip, [r1, ip]
 8009f72:	fbcc 4307 	smlal	r4, r3, ip, r7
 8009f76:	f241 0c9c 	movw	ip, #4252	; 0x109c
 8009f7a:	f851 c00c 	ldr.w	ip, [r1, ip]
 8009f7e:	fbcc 5607 	smlal	r5, r6, ip, r7
	return x >> n;
 8009f82:	0d24      	lsrs	r4, r4, #20
 8009f84:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
	sign = x >> 31;
 8009f88:	17e3      	asrs	r3, r4, #31
	if (sign != (x >> 15))
 8009f8a:	ebb3 5f64 	cmp.w	r3, r4, asr #21
 8009f8e:	f000 8173 	beq.w	800a278 <xmp3fixpt_PolyphaseStereo+0x534>
		x = sign ^ ((1 << 15) - 1);
 8009f92:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8009f96:	405c      	eors	r4, r3
 8009f98:	0d2b      	lsrs	r3, r5, #20
	return (short)x;
 8009f9a:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8009f9e:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
	sign = x >> 31;
 8009fa2:	17dc      	asrs	r4, r3, #31
	if (sign != (x >> 15))
 8009fa4:	ebb4 5f63 	cmp.w	r4, r3, asr #21
 8009fa8:	f000 8164 	beq.w	800a274 <xmp3fixpt_PolyphaseStereo+0x530>
		x = sign ^ ((1 << 15) - 1);
 8009fac:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009fb0:	4063      	eors	r3, r4
 8009fb2:	f102 0b80 	add.w	fp, r2, #128	; 0x80
 8009fb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
	return (short)x;
 8009fba:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
 8009fbe:	9203      	str	r2, [sp, #12]
 8009fc0:	f100 0208 	add.w	r2, r0, #8
 8009fc4:	e9cd 2000 	strd	r2, r0, [sp]
 8009fc8:	e03e      	b.n	800a048 <xmp3fixpt_PolyphaseStereo+0x304>
		x = sign ^ ((1 << 15) - 1);
 8009fca:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8009fce:	ea8c 0404 	eor.w	r4, ip, r4
 8009fd2:	0d00      	lsrs	r0, r0, #20
	return (short)x;
 8009fd4:	9a00      	ldr	r2, [sp, #0]
 8009fd6:	ea40 3007 	orr.w	r0, r0, r7, lsl #12
 8009fda:	f822 4c04 	strh.w	r4, [r2, #-4]
	sign = x >> 31;
 8009fde:	17c4      	asrs	r4, r0, #31
	if (sign != (x >> 15))
 8009fe0:	ebb4 5f60 	cmp.w	r4, r0, asr #21
 8009fe4:	f000 813e 	beq.w	800a264 <xmp3fixpt_PolyphaseStereo+0x520>
		x = sign ^ ((1 << 15) - 1);
 8009fe8:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8009fec:	4060      	eors	r0, r4
 8009fee:	4614      	mov	r4, r2
 8009ff0:	9a02      	ldr	r2, [sp, #8]
	return (short)x;
 8009ff2:	f824 0c02 	strh.w	r0, [r4, #-2]
 8009ff6:	0d12      	lsrs	r2, r2, #20
 8009ff8:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
	sign = x >> 31;
 8009ffc:	17d0      	asrs	r0, r2, #31
	if (sign != (x >> 15))
 8009ffe:	ebb0 5f62 	cmp.w	r0, r2, asr #21
 800a002:	f000 812d 	beq.w	800a260 <xmp3fixpt_PolyphaseStereo+0x51c>
		x = sign ^ ((1 << 15) - 1);
 800a006:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a00a:	4042      	eors	r2, r0
 800a00c:	0d1b      	lsrs	r3, r3, #20
	return (short)x;
 800a00e:	9801      	ldr	r0, [sp, #4]
 800a010:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 800a014:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
	sign = x >> 31;
 800a018:	17da      	asrs	r2, r3, #31
	if (sign != (x >> 15))
 800a01a:	ebb2 5f63 	cmp.w	r2, r3, asr #21
 800a01e:	f000 811c 	beq.w	800a25a <xmp3fixpt_PolyphaseStereo+0x516>
		x = sign ^ ((1 << 15) - 1);
 800a022:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800a026:	4053      	eors	r3, r2
 800a028:	4602      	mov	r2, r0
	return (short)x;
 800a02a:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
 800a02e:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 800a032:	9b00      	ldr	r3, [sp, #0]
 800a034:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800a038:	3304      	adds	r3, #4
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	1f13      	subs	r3, r2, #4
 800a03e:	9301      	str	r3, [sp, #4]
	coef = coefBase + 16;
	vb1 = vbuf + 64;
	pcm += 2;

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 800a040:	9b03      	ldr	r3, [sp, #12]
 800a042:	459b      	cmp	fp, r3
 800a044:	f000 8111 	beq.w	800a26a <xmp3fixpt_PolyphaseStereo+0x526>
		sum1L = sum2L = rndVal;
		sum1R = sum2R = rndVal;

		MC2S(0)
 800a048:	f85b ec40 	ldr.w	lr, [fp, #-64]
	__asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 800a04c:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800a050:	f85b 8c3c 	ldr.w	r8, [fp, #-60]
 800a054:	f04f 0c00 	mov.w	ip, #0
 800a058:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
 800a05c:	f8d1 315c 	ldr.w	r3, [r1, #348]	; 0x15c
 800a060:	fbc0 4c0e 	smlal	r4, ip, r0, lr
 800a064:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a068:	2600      	movs	r6, #0
 800a06a:	fbc0 2608 	smlal	r2, r6, r0, r8
 800a06e:	f1c8 0900 	rsb	r9, r8, #0
 800a072:	fbc3 4c09 	smlal	r4, ip, r3, r9
 800a076:	fbc3 260e 	smlal	r2, r6, r3, lr
 800a07a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800a07e:	9202      	str	r2, [sp, #8]
 800a080:	f8d1 a180 	ldr.w	sl, [r1, #384]	; 0x180
 800a084:	2700      	movs	r7, #0
 800a086:	fbca 070e 	smlal	r0, r7, sl, lr
 800a08a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a08e:	2500      	movs	r5, #0
 800a090:	fbca 3508 	smlal	r3, r5, sl, r8
 800a094:	f8d1 21dc 	ldr.w	r2, [r1, #476]	; 0x1dc
 800a098:	fbc2 0709 	smlal	r0, r7, r2, r9
 800a09c:	fbc2 350e 	smlal	r3, r5, r2, lr
		MC2S(1)
 800a0a0:	e95b ae0e 	ldrd	sl, lr, [fp, #-56]	; 0x38
 800a0a4:	f8d1 9104 	ldr.w	r9, [r1, #260]	; 0x104
 800a0a8:	f8d1 8158 	ldr.w	r8, [r1, #344]	; 0x158
 800a0ac:	fbc9 4c0a 	smlal	r4, ip, r9, sl
 800a0b0:	9a02      	ldr	r2, [sp, #8]
 800a0b2:	fbc9 260e 	smlal	r2, r6, r9, lr
 800a0b6:	f1ce 0900 	rsb	r9, lr, #0
 800a0ba:	fbc8 4c09 	smlal	r4, ip, r8, r9
 800a0be:	fbc8 260a 	smlal	r2, r6, r8, sl
 800a0c2:	9202      	str	r2, [sp, #8]
 800a0c4:	f8d1 81d8 	ldr.w	r8, [r1, #472]	; 0x1d8
 800a0c8:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
 800a0cc:	fbc2 070a 	smlal	r0, r7, r2, sl
 800a0d0:	fbc2 350e 	smlal	r3, r5, r2, lr
 800a0d4:	fbc8 0709 	smlal	r0, r7, r8, r9
 800a0d8:	fbc8 350a 	smlal	r3, r5, r8, sl
		MC2S(2)
 800a0dc:	e95b ae0c 	ldrd	sl, lr, [fp, #-48]	; 0x30
 800a0e0:	f8d1 9108 	ldr.w	r9, [r1, #264]	; 0x108
 800a0e4:	f8d1 8154 	ldr.w	r8, [r1, #340]	; 0x154
 800a0e8:	fbc9 4c0a 	smlal	r4, ip, r9, sl
 800a0ec:	9a02      	ldr	r2, [sp, #8]
 800a0ee:	fbc9 260e 	smlal	r2, r6, r9, lr
 800a0f2:	f1ce 0900 	rsb	r9, lr, #0
 800a0f6:	fbc8 4c09 	smlal	r4, ip, r8, r9
 800a0fa:	fbc8 260a 	smlal	r2, r6, r8, sl
 800a0fe:	9202      	str	r2, [sp, #8]
 800a100:	f8d1 81d4 	ldr.w	r8, [r1, #468]	; 0x1d4
 800a104:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
 800a108:	fbc2 070a 	smlal	r0, r7, r2, sl
 800a10c:	fbc2 350e 	smlal	r3, r5, r2, lr
 800a110:	fbc8 0709 	smlal	r0, r7, r8, r9
 800a114:	fbc8 350a 	smlal	r3, r5, r8, sl
		MC2S(3)
 800a118:	e95b ae0a 	ldrd	sl, lr, [fp, #-40]	; 0x28
 800a11c:	f8d1 910c 	ldr.w	r9, [r1, #268]	; 0x10c
 800a120:	f8d1 8150 	ldr.w	r8, [r1, #336]	; 0x150
 800a124:	fbc9 4c0a 	smlal	r4, ip, r9, sl
 800a128:	9a02      	ldr	r2, [sp, #8]
 800a12a:	fbc9 260e 	smlal	r2, r6, r9, lr
 800a12e:	f1ce 0900 	rsb	r9, lr, #0
 800a132:	fbc8 4c09 	smlal	r4, ip, r8, r9
 800a136:	fbc8 260a 	smlal	r2, r6, r8, sl
 800a13a:	9202      	str	r2, [sp, #8]
 800a13c:	f8d1 81d0 	ldr.w	r8, [r1, #464]	; 0x1d0
 800a140:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
 800a144:	fbc2 070a 	smlal	r0, r7, r2, sl
 800a148:	fbc2 350e 	smlal	r3, r5, r2, lr
 800a14c:	fbc8 0709 	smlal	r0, r7, r8, r9
 800a150:	fbc8 350a 	smlal	r3, r5, r8, sl
		MC2S(4)
 800a154:	e95b ae08 	ldrd	sl, lr, [fp, #-32]
 800a158:	f8d1 9110 	ldr.w	r9, [r1, #272]	; 0x110
 800a15c:	f8d1 814c 	ldr.w	r8, [r1, #332]	; 0x14c
 800a160:	fbc9 4c0a 	smlal	r4, ip, r9, sl
 800a164:	9a02      	ldr	r2, [sp, #8]
 800a166:	fbc9 260e 	smlal	r2, r6, r9, lr
 800a16a:	f1ce 0900 	rsb	r9, lr, #0
 800a16e:	fbc8 4c09 	smlal	r4, ip, r8, r9
 800a172:	fbc8 260a 	smlal	r2, r6, r8, sl
 800a176:	9202      	str	r2, [sp, #8]
 800a178:	f8d1 81cc 	ldr.w	r8, [r1, #460]	; 0x1cc
 800a17c:	f8d1 2190 	ldr.w	r2, [r1, #400]	; 0x190
 800a180:	fbc2 070a 	smlal	r0, r7, r2, sl
 800a184:	fbc2 350e 	smlal	r3, r5, r2, lr
 800a188:	fbc8 0709 	smlal	r0, r7, r8, r9
 800a18c:	fbc8 350a 	smlal	r3, r5, r8, sl
		MC2S(5)
 800a190:	e95b ae06 	ldrd	sl, lr, [fp, #-24]
 800a194:	f8d1 9114 	ldr.w	r9, [r1, #276]	; 0x114
 800a198:	f8d1 8148 	ldr.w	r8, [r1, #328]	; 0x148
 800a19c:	fbc9 4c0a 	smlal	r4, ip, r9, sl
 800a1a0:	9a02      	ldr	r2, [sp, #8]
 800a1a2:	fbc9 260e 	smlal	r2, r6, r9, lr
 800a1a6:	f1ce 0900 	rsb	r9, lr, #0
 800a1aa:	fbc8 4c09 	smlal	r4, ip, r8, r9
 800a1ae:	fbc8 260a 	smlal	r2, r6, r8, sl
 800a1b2:	9202      	str	r2, [sp, #8]
 800a1b4:	f8d1 81c8 	ldr.w	r8, [r1, #456]	; 0x1c8
 800a1b8:	f8d1 2194 	ldr.w	r2, [r1, #404]	; 0x194
 800a1bc:	fbc2 070a 	smlal	r0, r7, r2, sl
 800a1c0:	fbc2 350e 	smlal	r3, r5, r2, lr
 800a1c4:	fbc8 0709 	smlal	r0, r7, r8, r9
 800a1c8:	fbc8 350a 	smlal	r3, r5, r8, sl
		MC2S(6)
 800a1cc:	e95b ae04 	ldrd	sl, lr, [fp, #-16]
 800a1d0:	f8d1 9118 	ldr.w	r9, [r1, #280]	; 0x118
 800a1d4:	f8d1 8144 	ldr.w	r8, [r1, #324]	; 0x144
 800a1d8:	fbc9 4c0a 	smlal	r4, ip, r9, sl
 800a1dc:	9a02      	ldr	r2, [sp, #8]
 800a1de:	fbc9 260e 	smlal	r2, r6, r9, lr
 800a1e2:	f1ce 0900 	rsb	r9, lr, #0
 800a1e6:	fbc8 4c09 	smlal	r4, ip, r8, r9
 800a1ea:	fbc8 260a 	smlal	r2, r6, r8, sl
 800a1ee:	9202      	str	r2, [sp, #8]
 800a1f0:	f8d1 81c4 	ldr.w	r8, [r1, #452]	; 0x1c4
 800a1f4:	f8d1 2198 	ldr.w	r2, [r1, #408]	; 0x198
 800a1f8:	fbc2 070a 	smlal	r0, r7, r2, sl
 800a1fc:	fbc2 350e 	smlal	r3, r5, r2, lr
 800a200:	fbc8 0709 	smlal	r0, r7, r8, r9
 800a204:	fbc8 350a 	smlal	r3, r5, r8, sl
		MC2S(7)
 800a208:	e95b ae02 	ldrd	sl, lr, [fp, #-8]
 800a20c:	f8d1 911c 	ldr.w	r9, [r1, #284]	; 0x11c
 800a210:	f8d1 8140 	ldr.w	r8, [r1, #320]	; 0x140
 800a214:	fbc9 4c0a 	smlal	r4, ip, r9, sl
 800a218:	9a02      	ldr	r2, [sp, #8]
 800a21a:	fbc9 260e 	smlal	r2, r6, r9, lr
 800a21e:	f1ce 0900 	rsb	r9, lr, #0
 800a222:	fbc8 4c09 	smlal	r4, ip, r8, r9
 800a226:	fbc8 260a 	smlal	r2, r6, r8, sl
 800a22a:	9202      	str	r2, [sp, #8]
 800a22c:	f8d1 81c0 	ldr.w	r8, [r1, #448]	; 0x1c0
 800a230:	f8d1 219c 	ldr.w	r2, [r1, #412]	; 0x19c
 800a234:	fbc2 070a 	smlal	r0, r7, r2, sl
 800a238:	fbc2 350e 	smlal	r3, r5, r2, lr
 800a23c:	fbc8 0709 	smlal	r0, r7, r8, r9
 800a240:	fbc8 350a 	smlal	r3, r5, r8, sl
	return x >> n;
 800a244:	0d24      	lsrs	r4, r4, #20
 800a246:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
	sign = x >> 31;
 800a24a:	ea4f 7ce4 	mov.w	ip, r4, asr #31
	if (sign != (x >> 15))
 800a24e:	ebbc 5f64 	cmp.w	ip, r4, asr #21
 800a252:	f47f aeba 	bne.w	8009fca <xmp3fixpt_PolyphaseStereo+0x286>
	x >>= fracBits;
 800a256:	11a4      	asrs	r4, r4, #6
 800a258:	e6bb      	b.n	8009fd2 <xmp3fixpt_PolyphaseStereo+0x28e>
 800a25a:	119b      	asrs	r3, r3, #6
 800a25c:	4602      	mov	r2, r0
 800a25e:	e6e4      	b.n	800a02a <xmp3fixpt_PolyphaseStereo+0x2e6>
 800a260:	1192      	asrs	r2, r2, #6
 800a262:	e6d3      	b.n	800a00c <xmp3fixpt_PolyphaseStereo+0x2c8>
 800a264:	1180      	asrs	r0, r0, #6
 800a266:	4614      	mov	r4, r2
 800a268:	e6c2      	b.n	8009ff0 <xmp3fixpt_PolyphaseStereo+0x2ac>
		*(pcm + 1)         = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 1) = ClipToShort((int)SAR64(sum2R, (32-CSHIFT)), DEF_NFRACBITS);
		pcm += 2;
	}
}
 800a26a:	b005      	add	sp, #20
 800a26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	x >>= fracBits;
 800a270:	11a4      	asrs	r4, r4, #6
 800a272:	e60a      	b.n	8009e8a <xmp3fixpt_PolyphaseStereo+0x146>
 800a274:	119b      	asrs	r3, r3, #6
 800a276:	e69c      	b.n	8009fb2 <xmp3fixpt_PolyphaseStereo+0x26e>
 800a278:	11a4      	asrs	r4, r4, #6
 800a27a:	e68d      	b.n	8009f98 <xmp3fixpt_PolyphaseStereo+0x254>
 800a27c:	119b      	asrs	r3, r3, #6
 800a27e:	e610      	b.n	8009ea2 <xmp3fixpt_PolyphaseStereo+0x15e>

0800a280 <xmp3fixpt_UnpackScaleFactors>:
 *              updated bitOffset
 *
 * Return:      length (in bytes) of scale factor data, -1 if null input pointers
 **************************************************************************************/
int UnpackScaleFactors(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int bitsAvail, int gr, int ch)
{
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	b09b      	sub	sp, #108	; 0x6c
 800a286:	e9dd ba24 	ldrd	fp, sl, [sp, #144]	; 0x90
	FrameHeader *fh;
	SideInfo *si;
	ScaleFactorInfo *sfi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS)
 800a28a:	2800      	cmp	r0, #0
 800a28c:	f000 8441 	beq.w	800ab12 <xmp3fixpt_UnpackScaleFactors+0x892>
 800a290:	6805      	ldr	r5, [r0, #0]
 800a292:	2d00      	cmp	r5, #0
 800a294:	f000 843d 	beq.w	800ab12 <xmp3fixpt_UnpackScaleFactors+0x892>
 800a298:	6844      	ldr	r4, [r0, #4]
 800a29a:	9401      	str	r4, [sp, #4]
 800a29c:	2c00      	cmp	r4, #0
 800a29e:	f000 8438 	beq.w	800ab12 <xmp3fixpt_UnpackScaleFactors+0x892>
 800a2a2:	6884      	ldr	r4, [r0, #8]
 800a2a4:	2c00      	cmp	r4, #0
 800a2a6:	f000 8434 	beq.w	800ab12 <xmp3fixpt_UnpackScaleFactors+0x892>
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));

	/* init GetBits reader */
	startBuf = buf;
	bsi = &bitStreamInfo;
	SetBitstreamPointer(bsi, (bitsAvail + *bitOffset + 7) / 8, buf);
 800a2aa:	6816      	ldr	r6, [r2, #0]
 800a2ac:	4617      	mov	r7, r2
 800a2ae:	9008      	str	r0, [sp, #32]
 800a2b0:	a80e      	add	r0, sp, #56	; 0x38
 800a2b2:	4433      	add	r3, r6
 800a2b4:	9207      	str	r2, [sp, #28]
 800a2b6:	9106      	str	r1, [sp, #24]
 800a2b8:	460a      	mov	r2, r1
 800a2ba:	1dde      	adds	r6, r3, #7
 800a2bc:	bf48      	it	mi
 800a2be:	f103 060e 	addmi.w	r6, r3, #14
 800a2c2:	10f1      	asrs	r1, r6, #3
 800a2c4:	f7f6 fe1a 	bl	8000efc <xmp3fixpt_SetBitstreamPointer>
	if (*bitOffset)
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	2900      	cmp	r1, #0
 800a2cc:	f040 80fd 	bne.w	800a4ca <xmp3fixpt_UnpackScaleFactors+0x24a>
 800a2d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
		GetBits(bsi, *bitOffset);

	if (fh->ver == MPEG1) 
 800a2d4:	782a      	ldrb	r2, [r5, #0]
 800a2d6:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 800a2da:	9305      	str	r3, [sp, #20]
 800a2dc:	445b      	add	r3, fp
 800a2de:	9104      	str	r1, [sp, #16]
 800a2e0:	4451      	add	r1, sl
 800a2e2:	011b      	lsls	r3, r3, #4
 800a2e4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a2e8:	9901      	ldr	r1, [sp, #4]
 800a2ea:	440b      	add	r3, r1
 800a2ec:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
 800a2f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a2f2:	bb62      	cbnz	r2, 800a34e <xmp3fixpt_UnpackScaleFactors+0xce>
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 800a2f4:	4abb      	ldr	r2, [pc, #748]	; (800a5e4 <xmp3fixpt_UnpackScaleFactors+0x364>)
	if (sis->blockType == 2) {
 800a2f6:	f1be 0f02 	cmp.w	lr, #2
	slen1 = (int)SFLenTab[sis->sfCompress][1];
 800a2fa:	eb02 0140 	add.w	r1, r2, r0, lsl #1
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 800a2fe:	f812 5010 	ldrb.w	r5, [r2, r0, lsl #1]
	slen1 = (int)SFLenTab[sis->sfCompress][1];
 800a302:	784f      	ldrb	r7, [r1, #1]
	if (sis->blockType == 2) {
 800a304:	f000 823a 	beq.w	800a77c <xmp3fixpt_UnpackScaleFactors+0x4fc>
		if(gr == 0) {
 800a308:	f1bb 0f00 	cmp.w	fp, #0
 800a30c:	f040 811a 	bne.w	800a544 <xmp3fixpt_UnpackScaleFactors+0x2c4>
 800a310:	ebca 164a 	rsb	r6, sl, sl, lsl #5
 800a314:	0076      	lsls	r6, r6, #1
 800a316:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 800a31a:	f106 080a 	add.w	r8, r6, #10
 800a31e:	44a1      	add	r9, r4
 800a320:	44a0      	add	r8, r4
				sfis->l[sfb] = (char)GetBits(bsi, slen0);
 800a322:	4629      	mov	r1, r5
 800a324:	a80e      	add	r0, sp, #56	; 0x38
 800a326:	f7f6 fdef 	bl	8000f08 <xmp3fixpt_GetBits>
 800a32a:	f809 0f01 	strb.w	r0, [r9, #1]!
			for (sfb = 0;  sfb < 11; sfb++) 
 800a32e:	45c1      	cmp	r9, r8
 800a330:	d1f7      	bne.n	800a322 <xmp3fixpt_UnpackScaleFactors+0xa2>
 800a332:	f106 050b 	add.w	r5, r6, #11
 800a336:	3615      	adds	r6, #21
 800a338:	4425      	add	r5, r4
 800a33a:	4434      	add	r4, r6
				sfis->l[sfb] = (char)GetBits(bsi, slen1);
 800a33c:	4639      	mov	r1, r7
 800a33e:	a80e      	add	r0, sp, #56	; 0x38
 800a340:	f7f6 fde2 	bl	8000f08 <xmp3fixpt_GetBits>
 800a344:	f805 0b01 	strb.w	r0, [r5], #1
			for (sfb = 11; sfb < 21; sfb++) 
 800a348:	42ac      	cmp	r4, r5
 800a34a:	d1f7      	bne.n	800a33c <xmp3fixpt_UnpackScaleFactors+0xbc>
 800a34c:	e09b      	b.n	800a486 <xmp3fixpt_UnpackScaleFactors+0x206>
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
	else 
		UnpackSFMPEG2(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], gr, ch, fh->modeExt, &sfi->sfjs);
 800a34e:	f8d5 c020 	ldr.w	ip, [r5, #32]
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
 800a352:	f01c 0f01 	tst.w	ip, #1
 800a356:	d006      	beq.n	800a366 <xmp3fixpt_UnpackScaleFactors+0xe6>
 800a358:	f11a 35ff 	adds.w	r5, sl, #4294967295	; 0xffffffff
 800a35c:	bf18      	it	ne
 800a35e:	2501      	movne	r5, #1
 800a360:	2d00      	cmp	r5, #0
 800a362:	f000 811c 	beq.w	800a59e <xmp3fixpt_UnpackScaleFactors+0x31e>
		if (sfCompress < 400) {
 800a366:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 800a36a:	f2c0 80b2 	blt.w	800a4d2 <xmp3fixpt_UnpackScaleFactors+0x252>
		} else if (sfCompress < 500) {
 800a36e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800a372:	f280 82c1 	bge.w	800a8f8 <xmp3fixpt_UnpackScaleFactors+0x678>
			sfCompress -= 400;
 800a376:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
			slen[0] = (sfCompress >> 2) / 5;
 800a37a:	4e9b      	ldr	r6, [pc, #620]	; (800a5e8 <xmp3fixpt_UnpackScaleFactors+0x368>)
			slen[3]= 0;
 800a37c:	2303      	movs	r3, #3
 800a37e:	2100      	movs	r1, #0
			slen[0] = (sfCompress >> 2) / 5;
 800a380:	1087      	asrs	r7, r0, #2
			slen[3]= 0;
 800a382:	2204      	movs	r2, #4
			slen[2]= (sfCompress & 0x03);
 800a384:	4018      	ands	r0, r3
	intensityScale = 0;
 800a386:	4688      	mov	r8, r1
			slen[0] = (sfCompress >> 2) / 5;
 800a388:	fba6 5607 	umull	r5, r6, r6, r7
			slen[3]= 0;
 800a38c:	4699      	mov	r9, r3
			slen[2]= (sfCompress & 0x03);
 800a38e:	9014      	str	r0, [sp, #80]	; 0x50
			slen[3]= 0;
 800a390:	2506      	movs	r5, #6
			slen[0] = (sfCompress >> 2) / 5;
 800a392:	08b6      	lsrs	r6, r6, #2
	intensityScale = 0;
 800a394:	9103      	str	r1, [sp, #12]
			slen[3]= 0;
 800a396:	9115      	str	r1, [sp, #84]	; 0x54
 800a398:	2107      	movs	r1, #7
			slen[1]= (sfCompress >> 2) % 5;
 800a39a:	eb06 0086 	add.w	r0, r6, r6, lsl #2
			slen[0] = (sfCompress >> 2) / 5;
 800a39e:	9612      	str	r6, [sp, #72]	; 0x48
			slen[3]= 0;
 800a3a0:	9209      	str	r2, [sp, #36]	; 0x24
			slen[1]= (sfCompress >> 2) % 5;
 800a3a2:	1a3f      	subs	r7, r7, r0
			slen[3]= 0;
 800a3a4:	2005      	movs	r0, #5
 800a3a6:	9002      	str	r0, [sp, #8]
 800a3a8:	2002      	movs	r0, #2
			slen[1]= (sfCompress >> 2) % 5;
 800a3aa:	9713      	str	r7, [sp, #76]	; 0x4c
			slen[3]= 0;
 800a3ac:	900a      	str	r0, [sp, #40]	; 0x28
 800a3ae:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
	if (sis->blockType == 2) 
 800a3b2:	f1be 0f02 	cmp.w	lr, #2
 800a3b6:	f000 80b2 	beq.w	800a51e <xmp3fixpt_UnpackScaleFactors+0x29e>
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 800a3ba:	9a02      	ldr	r2, [sp, #8]
	if( (modeExt & 0x01) && (ch == 1) ) {
 800a3bc:	f1ba 0f01 	cmp.w	sl, #1
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 800a3c0:	9516      	str	r5, [sp, #88]	; 0x58
 800a3c2:	9319      	str	r3, [sp, #100]	; 0x64
 800a3c4:	e9cd 2117 	strd	r2, r1, [sp, #92]	; 0x5c
	if( (modeExt & 0x01) && (ch == 1) ) {
 800a3c8:	d103      	bne.n	800a3d2 <xmp3fixpt_UnpackScaleFactors+0x152>
 800a3ca:	f01c 0f01 	tst.w	ip, #1
 800a3ce:	f040 82e3 	bne.w	800a998 <xmp3fixpt_UnpackScaleFactors+0x718>
 800a3d2:	ab12      	add	r3, sp, #72	; 0x48
 800a3d4:	930c      	str	r3, [sp, #48]	; 0x30
 800a3d6:	ab16      	add	r3, sp, #88	; 0x58
 800a3d8:	9309      	str	r3, [sp, #36]	; 0x24
	sis->preFlag = preFlag;
 800a3da:	9b05      	ldr	r3, [sp, #20]
	if(sis->blockType == 2) {
 800a3dc:	f1be 0f02 	cmp.w	lr, #2
	sis->preFlag = preFlag;
 800a3e0:	eb03 020b 	add.w	r2, r3, fp
 800a3e4:	9b04      	ldr	r3, [sp, #16]
 800a3e6:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800a3ea:	4453      	add	r3, sl
 800a3ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a3f0:	9a01      	ldr	r2, [sp, #4]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f8c3 8064 	str.w	r8, [r3, #100]	; 0x64
	if(sis->blockType == 2) {
 800a3f8:	f000 821b 	beq.w	800a832 <xmp3fixpt_UnpackScaleFactors+0x5b2>
 800a3fc:	ea4f 134b 	mov.w	r3, fp, lsl #5
		sfb = 0;
 800a400:	f04f 0800 	mov.w	r8, #0
 800a404:	ea4f 114a 	mov.w	r1, sl, lsl #5
 800a408:	46a1      	mov	r9, r4
 800a40a:	eba3 020b 	sub.w	r2, r3, fp
 800a40e:	9302      	str	r3, [sp, #8]
 800a410:	eba1 030a 	sub.w	r3, r1, sl
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 800a414:	4647      	mov	r7, r8
 800a416:	0092      	lsls	r2, r2, #2
 800a418:	9103      	str	r1, [sp, #12]
 800a41a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800a41e:	930a      	str	r3, [sp, #40]	; 0x28
 800a420:	18e3      	adds	r3, r4, r3
 800a422:	e9cd ba24 	strd	fp, sl, [sp, #144]	; 0x90
 800a426:	3b01      	subs	r3, #1
 800a428:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800a42c:	930b      	str	r3, [sp, #44]	; 0x2c
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 800a42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
			iipTest = (1 << slen[nrIdx]) - 1;
 800a430:	f85b 6027 	ldr.w	r6, [fp, r7, lsl #2]
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 800a434:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800a438:	2c00      	cmp	r4, #0
 800a43a:	dd11      	ble.n	800a460 <xmp3fixpt_UnpackScaleFactors+0x1e0>
 800a43c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a43e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a440:	4443      	add	r3, r8
 800a442:	eb02 0508 	add.w	r5, r2, r8
 800a446:	3b01      	subs	r3, #1
 800a448:	4425      	add	r5, r4
 800a44a:	eb09 0a03 	add.w	sl, r9, r3
				sfis->l[sfb] = (char)GetBits(bsi, slen[nrIdx]);
 800a44e:	4631      	mov	r1, r6
 800a450:	a80e      	add	r0, sp, #56	; 0x38
 800a452:	f7f6 fd59 	bl	8000f08 <xmp3fixpt_GetBits>
 800a456:	f80a 0f01 	strb.w	r0, [sl, #1]!
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 800a45a:	45aa      	cmp	sl, r5
 800a45c:	d1f7      	bne.n	800a44e <xmp3fixpt_UnpackScaleFactors+0x1ce>
 800a45e:	44a0      	add	r8, r4
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 800a460:	3701      	adds	r7, #1
 800a462:	2f04      	cmp	r7, #4
 800a464:	d1e3      	bne.n	800a42e <xmp3fixpt_UnpackScaleFactors+0x1ae>
		sfis->l[21] = sfis->l[22] = 0;
 800a466:	9b02      	ldr	r3, [sp, #8]
 800a468:	464c      	mov	r4, r9
 800a46a:	9a03      	ldr	r2, [sp, #12]
 800a46c:	2100      	movs	r1, #0
 800a46e:	e9dd ba24 	ldrd	fp, sl, [sp, #144]	; 0x90
 800a472:	eba3 030b 	sub.w	r3, r3, fp
 800a476:	eba2 020a 	sub.w	r2, r2, sl
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800a480:	441c      	add	r4, r3
 800a482:	75a1      	strb	r1, [r4, #22]
 800a484:	7561      	strb	r1, [r4, #21]

	mp3DecInfo->part23Length[gr][ch] = si->sis[gr][ch].part23Length;
 800a486:	9b05      	ldr	r3, [sp, #20]

	bitsUsed = CalcBitsUsed(bsi, buf, *bitOffset);
 800a488:	a80e      	add	r0, sp, #56	; 0x38
 800a48a:	9906      	ldr	r1, [sp, #24]
	mp3DecInfo->part23Length[gr][ch] = si->sis[gr][ch].part23Length;
 800a48c:	445b      	add	r3, fp
 800a48e:	461a      	mov	r2, r3
 800a490:	9b04      	ldr	r3, [sp, #16]
 800a492:	4453      	add	r3, sl
 800a494:	0112      	lsls	r2, r2, #4
 800a496:	461c      	mov	r4, r3
 800a498:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 800a49c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a4a0:	9c01      	ldr	r4, [sp, #4]
 800a4a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a4a6:	4414      	add	r4, r2
 800a4a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a4aa:	9c08      	ldr	r4, [sp, #32]
 800a4ac:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	bitsUsed = CalcBitsUsed(bsi, buf, *bitOffset);
 800a4b0:	9c07      	ldr	r4, [sp, #28]
 800a4b2:	6822      	ldr	r2, [r4, #0]
 800a4b4:	f7f6 fd9a 	bl	8000fec <xmp3fixpt_CalcBitsUsed>
	buf += (bitsUsed + *bitOffset) >> 3;
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	4418      	add	r0, r3
	*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 800a4bc:	f000 0307 	and.w	r3, r0, #7
	buf += (bitsUsed + *bitOffset) >> 3;
 800a4c0:	10c0      	asrs	r0, r0, #3
	*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 800a4c2:	6023      	str	r3, [r4, #0]

	return (buf - startBuf);
}
 800a4c4:	b01b      	add	sp, #108	; 0x6c
 800a4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		GetBits(bsi, *bitOffset);
 800a4ca:	a80e      	add	r0, sp, #56	; 0x38
 800a4cc:	f7f6 fd1c 	bl	8000f08 <xmp3fixpt_GetBits>
 800a4d0:	e6fe      	b.n	800a2d0 <xmp3fixpt_UnpackScaleFactors+0x50>
			slen[0] = (sfCompress >> 4) / 5;
 800a4d2:	1105      	asrs	r5, r0, #4
 800a4d4:	4e45      	ldr	r6, [pc, #276]	; (800a5ec <xmp3fixpt_UnpackScaleFactors+0x36c>)
 800a4d6:	17c7      	asrs	r7, r0, #31
			slen[2]= (sfCompress & 0x0f) >> 2;
 800a4d8:	f3c0 0181 	ubfx	r1, r0, #2, #2
			slen[0] = (sfCompress >> 4) / 5;
 800a4dc:	fb86 3605 	smull	r3, r6, r6, r5
			slen[3]= (sfCompress & 0x03);
 800a4e0:	2203      	movs	r2, #3
 800a4e2:	2305      	movs	r3, #5
 800a4e4:	f000 0003 	and.w	r0, r0, #3
			slen[0] = (sfCompress >> 4) / 5;
 800a4e8:	ebc7 0666 	rsb	r6, r7, r6, asr #1
	intensityScale = 0;
 800a4ec:	2700      	movs	r7, #0
	if (sis->blockType == 2) 
 800a4ee:	f1be 0f02 	cmp.w	lr, #2
			slen[2]= (sfCompress & 0x0f) >> 2;
 800a4f2:	9114      	str	r1, [sp, #80]	; 0x50
	intensityScale = 0;
 800a4f4:	9703      	str	r7, [sp, #12]
			slen[1]= (sfCompress >> 4) % 5;
 800a4f6:	eb06 0786 	add.w	r7, r6, r6, lsl #2
			slen[3]= (sfCompress & 0x03);
 800a4fa:	4619      	mov	r1, r3
			slen[0] = (sfCompress >> 4) / 5;
 800a4fc:	9612      	str	r6, [sp, #72]	; 0x48
			slen[1]= (sfCompress >> 4) % 5;
 800a4fe:	eba5 0507 	sub.w	r5, r5, r7
			slen[3]= (sfCompress & 0x03);
 800a502:	9015      	str	r0, [sp, #84]	; 0x54
 800a504:	9302      	str	r3, [sp, #8]
 800a506:	4691      	mov	r9, r2
			slen[1]= (sfCompress >> 4) % 5;
 800a508:	9513      	str	r5, [sp, #76]	; 0x4c
	preFlag = 0;
 800a50a:	f04f 0800 	mov.w	r8, #0
			slen[3]= (sfCompress & 0x03);
 800a50e:	f04f 0506 	mov.w	r5, #6
 800a512:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
 800a516:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	if (sis->blockType == 2) 
 800a51a:	f47f af4e 	bne.w	800a3ba <xmp3fixpt_UnpackScaleFactors+0x13a>
		btIdx = (sis->mixedBlock ? 2 : 1);
 800a51e:	9b05      	ldr	r3, [sp, #20]
 800a520:	9904      	ldr	r1, [sp, #16]
 800a522:	445b      	add	r3, fp
 800a524:	4451      	add	r1, sl
 800a526:	011b      	lsls	r3, r3, #4
 800a528:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a52c:	9901      	ldr	r1, [sp, #4]
 800a52e:	440b      	add	r3, r1
 800a530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a532:	2b00      	cmp	r3, #0
 800a534:	f000 824a 	beq.w	800a9cc <xmp3fixpt_UnpackScaleFactors+0x74c>
 800a538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a53a:	4611      	mov	r1, r2
 800a53c:	f8cd 9008 	str.w	r9, [sp, #8]
 800a540:	2506      	movs	r5, #6
 800a542:	e73a      	b.n	800a3ba <xmp3fixpt_UnpackScaleFactors+0x13a>
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
 800a544:	ea4f 180a 	mov.w	r8, sl, lsl #4
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800a548:	9a01      	ldr	r2, [sp, #4]
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
 800a54a:	f108 0808 	add.w	r8, r8, #8
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800a54e:	f852 3008 	ldr.w	r3, [r2, r8]
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
 800a552:	4490      	add	r8, r2
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800a554:	2b00      	cmp	r3, #0
 800a556:	f000 8271 	beq.w	800aa3c <xmp3fixpt_UnpackScaleFactors+0x7bc>
 800a55a:	ea4f 134a 	mov.w	r3, sl, lsl #5
 800a55e:	ea4f 114b 	mov.w	r1, fp, lsl #5
 800a562:	eba3 020a 	sub.w	r2, r3, sl
 800a566:	9303      	str	r3, [sp, #12]
 800a568:	eba1 030b 	sub.w	r3, r1, fp
 800a56c:	9102      	str	r1, [sp, #8]
 800a56e:	0052      	lsls	r2, r2, #1
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	1d11      	adds	r1, r2, #4
 800a574:	18d0      	adds	r0, r2, r3
 800a576:	440b      	add	r3, r1
 800a578:	4293      	cmp	r3, r2
 800a57a:	dd39      	ble.n	800a5f0 <xmp3fixpt_UnpackScaleFactors+0x370>
 800a57c:	4281      	cmp	r1, r0
 800a57e:	dd37      	ble.n	800a5f0 <xmp3fixpt_UnpackScaleFactors+0x370>
 800a580:	5ca1      	ldrb	r1, [r4, r2]
 800a582:	4422      	add	r2, r4
 800a584:	1823      	adds	r3, r4, r0
 800a586:	5421      	strb	r1, [r4, r0]
 800a588:	7851      	ldrb	r1, [r2, #1]
 800a58a:	7059      	strb	r1, [r3, #1]
 800a58c:	7891      	ldrb	r1, [r2, #2]
 800a58e:	7099      	strb	r1, [r3, #2]
 800a590:	78d1      	ldrb	r1, [r2, #3]
 800a592:	70d9      	strb	r1, [r3, #3]
 800a594:	7911      	ldrb	r1, [r2, #4]
 800a596:	7119      	strb	r1, [r3, #4]
 800a598:	7952      	ldrb	r2, [r2, #5]
 800a59a:	715a      	strb	r2, [r3, #5]
 800a59c:	e039      	b.n	800a612 <xmp3fixpt_UnpackScaleFactors+0x392>
		sfCompress >>= 1;
 800a59e:	1047      	asrs	r7, r0, #1
		intensityScale = sfCompress & 0x01;
 800a5a0:	f000 0301 	and.w	r3, r0, #1
		if (sfCompress < 180) {
 800a5a4:	2fb3      	cmp	r7, #179	; 0xb3
		intensityScale = sfCompress & 0x01;
 800a5a6:	9303      	str	r3, [sp, #12]
		if (sfCompress < 180) {
 800a5a8:	f340 828d 	ble.w	800aac6 <xmp3fixpt_UnpackScaleFactors+0x846>
		} else if (sfCompress < 244) {
 800a5ac:	2ff3      	cmp	r7, #243	; 0xf3
 800a5ae:	f300 82b3 	bgt.w	800ab18 <xmp3fixpt_UnpackScaleFactors+0x898>
			slen[3] = 0;
 800a5b2:	2303      	movs	r3, #3
 800a5b4:	2004      	movs	r0, #4
			sfCompress -= 180;
 800a5b6:	3fb4      	subs	r7, #180	; 0xb4
			slen[3] = 0;
 800a5b8:	2106      	movs	r1, #6
 800a5ba:	4681      	mov	r9, r0
 800a5bc:	900c      	str	r0, [sp, #48]	; 0x30
			slen[0] = (sfCompress & 0x3f) >> 4;
 800a5be:	fa47 f600 	asr.w	r6, r7, r0
			slen[1] = (sfCompress & 0x0f) >> 2;
 800a5c2:	f3c7 0281 	ubfx	r2, r7, #2, #2
			slen[3] = 0;
 800a5c6:	2002      	movs	r0, #2
			slen[2] = (sfCompress & 0x03);
 800a5c8:	401f      	ands	r7, r3
			slen[3] = 0;
 800a5ca:	9515      	str	r5, [sp, #84]	; 0x54
	preFlag = 0;
 800a5cc:	46a8      	mov	r8, r5
			slen[2] = (sfCompress & 0x03);
 800a5ce:	9714      	str	r7, [sp, #80]	; 0x50
			slen[3] = 0;
 800a5d0:	460d      	mov	r5, r1
 800a5d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5d6:	9102      	str	r1, [sp, #8]
 800a5d8:	900a      	str	r0, [sp, #40]	; 0x28
			slen[1] = (sfCompress & 0x0f) >> 2;
 800a5da:	e9cd 6212 	strd	r6, r2, [sp, #72]	; 0x48
			slen[3] = 0;
 800a5de:	461a      	mov	r2, r3
 800a5e0:	e6e7      	b.n	800a3b2 <xmp3fixpt_UnpackScaleFactors+0x132>
 800a5e2:	bf00      	nop
 800a5e4:	080236e0 	.word	0x080236e0
 800a5e8:	cccccccd 	.word	0xcccccccd
 800a5ec:	66666667 	.word	0x66666667
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800a5f0:	9b03      	ldr	r3, [sp, #12]
 800a5f2:	58a6      	ldr	r6, [r4, r2]
 800a5f4:	eba3 010a 	sub.w	r1, r3, sl
 800a5f8:	9b02      	ldr	r3, [sp, #8]
 800a5fa:	5026      	str	r6, [r4, r0]
 800a5fc:	004a      	lsls	r2, r1, #1
 800a5fe:	eba3 030b 	sub.w	r3, r3, fp
 800a602:	18a1      	adds	r1, r4, r2
 800a604:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a608:	790a      	ldrb	r2, [r1, #4]
 800a60a:	4423      	add	r3, r4
 800a60c:	711a      	strb	r2, [r3, #4]
 800a60e:	794a      	ldrb	r2, [r1, #5]
 800a610:	715a      	strb	r2, [r3, #5]
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800a612:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f000 81f6 	beq.w	800aa08 <xmp3fixpt_UnpackScaleFactors+0x788>
 800a61c:	9b03      	ldr	r3, [sp, #12]
 800a61e:	eba3 000a 	sub.w	r0, r3, sl
 800a622:	9b02      	ldr	r3, [sp, #8]
 800a624:	0040      	lsls	r0, r0, #1
 800a626:	eba3 030b 	sub.w	r3, r3, fp
 800a62a:	f100 020a 	add.w	r2, r0, #10
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	1d85      	adds	r5, r0, #6
 800a632:	18c1      	adds	r1, r0, r3
 800a634:	4413      	add	r3, r2
 800a636:	42ab      	cmp	r3, r5
 800a638:	dd0f      	ble.n	800a65a <xmp3fixpt_UnpackScaleFactors+0x3da>
 800a63a:	1d8b      	adds	r3, r1, #6
 800a63c:	429a      	cmp	r2, r3
 800a63e:	dd0c      	ble.n	800a65a <xmp3fixpt_UnpackScaleFactors+0x3da>
 800a640:	4420      	add	r0, r4
 800a642:	4421      	add	r1, r4
 800a644:	7983      	ldrb	r3, [r0, #6]
 800a646:	718b      	strb	r3, [r1, #6]
 800a648:	79c3      	ldrb	r3, [r0, #7]
 800a64a:	71cb      	strb	r3, [r1, #7]
 800a64c:	7a03      	ldrb	r3, [r0, #8]
 800a64e:	720b      	strb	r3, [r1, #8]
 800a650:	7a43      	ldrb	r3, [r0, #9]
 800a652:	724b      	strb	r3, [r1, #9]
 800a654:	7a83      	ldrb	r3, [r0, #10]
 800a656:	728b      	strb	r3, [r1, #10]
 800a658:	e012      	b.n	800a680 <xmp3fixpt_UnpackScaleFactors+0x400>
 800a65a:	9b03      	ldr	r3, [sp, #12]
 800a65c:	4420      	add	r0, r4
 800a65e:	4421      	add	r1, r4
 800a660:	eba3 020a 	sub.w	r2, r3, sl
 800a664:	9b02      	ldr	r3, [sp, #8]
 800a666:	f8d0 0006 	ldr.w	r0, [r0, #6]
 800a66a:	0052      	lsls	r2, r2, #1
 800a66c:	eba3 030b 	sub.w	r3, r3, fp
 800a670:	f8c1 0006 	str.w	r0, [r1, #6]
 800a674:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a678:	4422      	add	r2, r4
 800a67a:	4423      	add	r3, r4
 800a67c:	7a92      	ldrb	r2, [r2, #10]
 800a67e:	729a      	strb	r2, [r3, #10]
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800a680:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 81f6 	beq.w	800aa76 <xmp3fixpt_UnpackScaleFactors+0x7f6>
 800a68a:	9b03      	ldr	r3, [sp, #12]
 800a68c:	eba3 000a 	sub.w	r0, r3, sl
 800a690:	9b02      	ldr	r3, [sp, #8]
 800a692:	0040      	lsls	r0, r0, #1
 800a694:	eba3 030b 	sub.w	r3, r3, fp
 800a698:	f100 020f 	add.w	r2, r0, #15
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	f100 050b 	add.w	r5, r0, #11
 800a6a2:	1819      	adds	r1, r3, r0
 800a6a4:	4413      	add	r3, r2
 800a6a6:	429d      	cmp	r5, r3
 800a6a8:	da10      	bge.n	800a6cc <xmp3fixpt_UnpackScaleFactors+0x44c>
 800a6aa:	f101 030b 	add.w	r3, r1, #11
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	da0c      	bge.n	800a6cc <xmp3fixpt_UnpackScaleFactors+0x44c>
 800a6b2:	4420      	add	r0, r4
 800a6b4:	4421      	add	r1, r4
 800a6b6:	7ac3      	ldrb	r3, [r0, #11]
 800a6b8:	72cb      	strb	r3, [r1, #11]
 800a6ba:	7b03      	ldrb	r3, [r0, #12]
 800a6bc:	730b      	strb	r3, [r1, #12]
 800a6be:	7b43      	ldrb	r3, [r0, #13]
 800a6c0:	734b      	strb	r3, [r1, #13]
 800a6c2:	7b83      	ldrb	r3, [r0, #14]
 800a6c4:	738b      	strb	r3, [r1, #14]
 800a6c6:	7bc3      	ldrb	r3, [r0, #15]
 800a6c8:	73cb      	strb	r3, [r1, #15]
 800a6ca:	e012      	b.n	800a6f2 <xmp3fixpt_UnpackScaleFactors+0x472>
 800a6cc:	9b03      	ldr	r3, [sp, #12]
 800a6ce:	4420      	add	r0, r4
 800a6d0:	9a02      	ldr	r2, [sp, #8]
 800a6d2:	4421      	add	r1, r4
 800a6d4:	eba3 030a 	sub.w	r3, r3, sl
 800a6d8:	f8d0 000b 	ldr.w	r0, [r0, #11]
 800a6dc:	eba2 020b 	sub.w	r2, r2, fp
 800a6e0:	005b      	lsls	r3, r3, #1
 800a6e2:	f8c1 000b 	str.w	r0, [r1, #11]
 800a6e6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a6ea:	4423      	add	r3, r4
 800a6ec:	4422      	add	r2, r4
 800a6ee:	7bdb      	ldrb	r3, [r3, #15]
 800a6f0:	73d3      	strb	r3, [r2, #15]
			if(scfsi[3])  for(  ; sfb <21 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800a6f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 816e 	beq.w	800a9d8 <xmp3fixpt_UnpackScaleFactors+0x758>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	eba3 000a 	sub.w	r0, r3, sl
 800a702:	9b02      	ldr	r3, [sp, #8]
 800a704:	0040      	lsls	r0, r0, #1
 800a706:	eba3 030b 	sub.w	r3, r3, fp
 800a70a:	f100 0214 	add.w	r2, r0, #20
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	f100 0510 	add.w	r5, r0, #16
 800a714:	1819      	adds	r1, r3, r0
 800a716:	4413      	add	r3, r2
 800a718:	429d      	cmp	r5, r3
 800a71a:	da10      	bge.n	800a73e <xmp3fixpt_UnpackScaleFactors+0x4be>
 800a71c:	f101 0310 	add.w	r3, r1, #16
 800a720:	4293      	cmp	r3, r2
 800a722:	da0c      	bge.n	800a73e <xmp3fixpt_UnpackScaleFactors+0x4be>
 800a724:	4420      	add	r0, r4
 800a726:	4421      	add	r1, r4
 800a728:	7c03      	ldrb	r3, [r0, #16]
 800a72a:	740b      	strb	r3, [r1, #16]
 800a72c:	7c43      	ldrb	r3, [r0, #17]
 800a72e:	744b      	strb	r3, [r1, #17]
 800a730:	7c83      	ldrb	r3, [r0, #18]
 800a732:	748b      	strb	r3, [r1, #18]
 800a734:	7cc3      	ldrb	r3, [r0, #19]
 800a736:	74cb      	strb	r3, [r1, #19]
 800a738:	7d03      	ldrb	r3, [r0, #20]
 800a73a:	750b      	strb	r3, [r1, #20]
 800a73c:	e010      	b.n	800a760 <xmp3fixpt_UnpackScaleFactors+0x4e0>
 800a73e:	9b03      	ldr	r3, [sp, #12]
 800a740:	4420      	add	r0, r4
 800a742:	9a02      	ldr	r2, [sp, #8]
 800a744:	4421      	add	r1, r4
 800a746:	eba3 030a 	sub.w	r3, r3, sl
 800a74a:	6900      	ldr	r0, [r0, #16]
 800a74c:	eba2 020b 	sub.w	r2, r2, fp
 800a750:	005b      	lsls	r3, r3, #1
 800a752:	6108      	str	r0, [r1, #16]
 800a754:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a758:	4423      	add	r3, r4
 800a75a:	4422      	add	r2, r4
 800a75c:	7d1b      	ldrb	r3, [r3, #20]
 800a75e:	7513      	strb	r3, [r2, #20]
		sfis->l[21] = 0;
 800a760:	9b02      	ldr	r3, [sp, #8]
 800a762:	9a03      	ldr	r2, [sp, #12]
 800a764:	eba3 030b 	sub.w	r3, r3, fp
 800a768:	eba2 010a 	sub.w	r1, r2, sl
 800a76c:	2200      	movs	r2, #0
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a774:	441c      	add	r4, r3
 800a776:	7562      	strb	r2, [r4, #21]
		sfis->l[22] = 0;
 800a778:	75a2      	strb	r2, [r4, #22]
 800a77a:	e684      	b.n	800a486 <xmp3fixpt_UnpackScaleFactors+0x206>
		if (sis->mixedBlock) {          
 800a77c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a77e:	ea4f 134a 	mov.w	r3, sl, lsl #5
 800a782:	9303      	str	r3, [sp, #12]
 800a784:	2a00      	cmp	r2, #0
 800a786:	f040 80ec 	bne.w	800a962 <xmp3fixpt_UnpackScaleFactors+0x6e2>
 800a78a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800a78e:	9302      	str	r3, [sp, #8]
 800a790:	9b03      	ldr	r3, [sp, #12]
 800a792:	eb02 0942 	add.w	r9, r2, r2, lsl #1
 800a796:	eba3 060a 	sub.w	r6, r3, sl
 800a79a:	9b02      	ldr	r3, [sp, #8]
 800a79c:	eba3 030b 	sub.w	r3, r3, fp
 800a7a0:	0076      	lsls	r6, r6, #1
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	f106 0812 	add.w	r8, r6, #18
 800a7a8:	441e      	add	r6, r3
 800a7aa:	4498      	add	r8, r3
 800a7ac:	44b1      	add	r9, r6
 800a7ae:	44a0      	add	r8, r4
 800a7b0:	44a1      	add	r9, r4
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
 800a7b2:	4629      	mov	r1, r5
 800a7b4:	a80e      	add	r0, sp, #56	; 0x38
 800a7b6:	f7f6 fba7 	bl	8000f08 <xmp3fixpt_GetBits>
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 800a7ba:	4629      	mov	r1, r5
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
 800a7bc:	f889 0017 	strb.w	r0, [r9, #23]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 800a7c0:	a80e      	add	r0, sp, #56	; 0x38
 800a7c2:	f7f6 fba1 	bl	8000f08 <xmp3fixpt_GetBits>
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 800a7c6:	4629      	mov	r1, r5
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 800a7c8:	f889 0018 	strb.w	r0, [r9, #24]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 800a7cc:	a80e      	add	r0, sp, #56	; 0x38
 800a7ce:	f7f6 fb9b 	bl	8000f08 <xmp3fixpt_GetBits>
 800a7d2:	f109 0903 	add.w	r9, r9, #3
 800a7d6:	f889 0016 	strb.w	r0, [r9, #22]
		for (      ; sfb < 6; sfb++) {
 800a7da:	45c1      	cmp	r9, r8
 800a7dc:	d1e9      	bne.n	800a7b2 <xmp3fixpt_UnpackScaleFactors+0x532>
 800a7de:	4426      	add	r6, r4
 800a7e0:	2506      	movs	r5, #6
			sfis->s[sfb][0] = (char)GetBits(bsi, slen1);
 800a7e2:	4639      	mov	r1, r7
 800a7e4:	a80e      	add	r0, sp, #56	; 0x38
 800a7e6:	f7f6 fb8f 	bl	8000f08 <xmp3fixpt_GetBits>
		for (      ; sfb < 12; sfb++) {
 800a7ea:	3501      	adds	r5, #1
			sfis->s[sfb][0] = (char)GetBits(bsi, slen1);
 800a7ec:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	a80e      	add	r0, sp, #56	; 0x38
 800a7f4:	3603      	adds	r6, #3
 800a7f6:	f7f6 fb87 	bl	8000f08 <xmp3fixpt_GetBits>
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 800a7fa:	4639      	mov	r1, r7
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 800a7fc:	f886 0027 	strb.w	r0, [r6, #39]	; 0x27
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 800a800:	a80e      	add	r0, sp, #56	; 0x38
 800a802:	f7f6 fb81 	bl	8000f08 <xmp3fixpt_GetBits>
		for (      ; sfb < 12; sfb++) {
 800a806:	2d0c      	cmp	r5, #12
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 800a808:	f886 0028 	strb.w	r0, [r6, #40]	; 0x28
		for (      ; sfb < 12; sfb++) {
 800a80c:	d1e9      	bne.n	800a7e2 <xmp3fixpt_UnpackScaleFactors+0x562>
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 800a80e:	9b02      	ldr	r3, [sp, #8]
 800a810:	9a03      	ldr	r2, [sp, #12]
 800a812:	eba3 030b 	sub.w	r3, r3, fp
 800a816:	eba2 010a 	sub.w	r1, r2, sl
 800a81a:	2200      	movs	r2, #0
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a822:	441c      	add	r4, r3
 800a824:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800a828:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 800a82c:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
 800a830:	e629      	b.n	800a486 <xmp3fixpt_UnpackScaleFactors+0x206>
		if(sis->mixedBlock) {
 800a832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a834:	2a00      	cmp	r2, #0
 800a836:	f000 808c 	beq.w	800a952 <xmp3fixpt_UnpackScaleFactors+0x6d2>
 800a83a:	ea4f 134a 	mov.w	r3, sl, lsl #5
 800a83e:	ea4f 124b 	mov.w	r2, fp, lsl #5
 800a842:	9303      	str	r3, [sp, #12]
 800a844:	eba3 030a 	sub.w	r3, r3, sl
 800a848:	9202      	str	r2, [sp, #8]
 800a84a:	eba2 020b 	sub.w	r2, r2, fp
 800a84e:	005b      	lsls	r3, r3, #1
 800a850:	0092      	lsls	r2, r2, #2
 800a852:	1d5d      	adds	r5, r3, #5
 800a854:	189f      	adds	r7, r3, r2
 800a856:	442a      	add	r2, r5
 800a858:	3f01      	subs	r7, #1
 800a85a:	18a5      	adds	r5, r4, r2
 800a85c:	4427      	add	r7, r4
				sfis->l[sfb] = (char)GetBits(bsi, slen[0]);
 800a85e:	4631      	mov	r1, r6
 800a860:	a80e      	add	r0, sp, #56	; 0x38
 800a862:	f7f6 fb51 	bl	8000f08 <xmp3fixpt_GetBits>
 800a866:	f807 0f01 	strb.w	r0, [r7, #1]!
			for (sfb=0; sfb < 6; sfb++) {
 800a86a:	42af      	cmp	r7, r5
 800a86c:	d1f7      	bne.n	800a85e <xmp3fixpt_UnpackScaleFactors+0x5de>
			sfb = 3;  /* start sfb for short */
 800a86e:	2303      	movs	r3, #3
			nrIdx = 1;
 800a870:	2201      	movs	r2, #1
 800a872:	9902      	ldr	r1, [sp, #8]
 800a874:	eba1 000b 	sub.w	r0, r1, fp
 800a878:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800a87c:	9903      	ldr	r1, [sp, #12]
 800a87e:	0082      	lsls	r2, r0, #2
 800a880:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a882:	eba1 010a 	sub.w	r1, r1, sl
 800a886:	4440      	add	r0, r8
 800a888:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800a88c:	4681      	mov	r9, r0
 800a88e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a890:	9209      	str	r2, [sp, #36]	; 0x24
 800a892:	18a2      	adds	r2, r4, r2
 800a894:	4440      	add	r0, r8
 800a896:	e9cd ba24 	strd	fp, sl, [sp, #144]	; 0x90
 800a89a:	4680      	mov	r8, r0
 800a89c:	4693      	mov	fp, r2
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 800a89e:	f858 7b04 	ldr.w	r7, [r8], #4
			iipTest = (1 << slen[nrIdx]) - 1;
 800a8a2:	f859 5b04 	ldr.w	r5, [r9], #4
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 800a8a6:	2f00      	cmp	r7, #0
 800a8a8:	dd20      	ble.n	800a8ec <xmp3fixpt_UnpackScaleFactors+0x66c>
 800a8aa:	441f      	add	r7, r3
 800a8ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a8b2:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800a8b6:	4413      	add	r3, r2
 800a8b8:	445e      	add	r6, fp
 800a8ba:	eb04 0a03 	add.w	sl, r4, r3
				sfis->s[sfb][0] = (char)GetBits(bsi, slen[nrIdx]);
 800a8be:	4629      	mov	r1, r5
 800a8c0:	a80e      	add	r0, sp, #56	; 0x38
 800a8c2:	f7f6 fb21 	bl	8000f08 <xmp3fixpt_GetBits>
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 800a8c6:	4629      	mov	r1, r5
				sfis->s[sfb][0] = (char)GetBits(bsi, slen[nrIdx]);
 800a8c8:	f88a 0017 	strb.w	r0, [sl, #23]
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 800a8cc:	a80e      	add	r0, sp, #56	; 0x38
 800a8ce:	f7f6 fb1b 	bl	8000f08 <xmp3fixpt_GetBits>
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 800a8d2:	4629      	mov	r1, r5
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 800a8d4:	f88a 0018 	strb.w	r0, [sl, #24]
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 800a8d8:	a80e      	add	r0, sp, #56	; 0x38
 800a8da:	f7f6 fb15 	bl	8000f08 <xmp3fixpt_GetBits>
 800a8de:	f10a 0a03 	add.w	sl, sl, #3
 800a8e2:	f88a 0016 	strb.w	r0, [sl, #22]
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 800a8e6:	45b2      	cmp	sl, r6
 800a8e8:	d1e9      	bne.n	800a8be <xmp3fixpt_UnpackScaleFactors+0x63e>
 800a8ea:	463b      	mov	r3, r7
		for (    ; nrIdx <= 3; nrIdx++) {
 800a8ec:	aa16      	add	r2, sp, #88	; 0x58
 800a8ee:	4591      	cmp	r9, r2
 800a8f0:	d1d5      	bne.n	800a89e <xmp3fixpt_UnpackScaleFactors+0x61e>
 800a8f2:	e9dd ba24 	ldrd	fp, sl, [sp, #144]	; 0x90
 800a8f6:	e78a      	b.n	800a80e <xmp3fixpt_UnpackScaleFactors+0x58e>
			if (sis->mixedBlock) {
 800a8f8:	9b05      	ldr	r3, [sp, #20]
			sfCompress -= 500;
 800a8fa:	f5a0 70fa 	sub.w	r0, r0, #500	; 0x1f4
			slen[0] = sfCompress / 3;
 800a8fe:	4e94      	ldr	r6, [pc, #592]	; (800ab50 <xmp3fixpt_UnpackScaleFactors+0x8d0>)
			if (sis->mixedBlock) {
 800a900:	445b      	add	r3, fp
 800a902:	9a04      	ldr	r2, [sp, #16]
			slen[0] = sfCompress / 3;
 800a904:	fba6 1600 	umull	r1, r6, r6, r0
			if (sis->mixedBlock) {
 800a908:	9d01      	ldr	r5, [sp, #4]
 800a90a:	011b      	lsls	r3, r3, #4
 800a90c:	4452      	add	r2, sl
			slen[0] = sfCompress / 3;
 800a90e:	0876      	lsrs	r6, r6, #1
			if (sis->mixedBlock) {
 800a910:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
			slen[2] = slen[3] = 0;
 800a914:	2300      	movs	r3, #0
			slen[1] = sfCompress % 3;
 800a916:	eb06 0146 	add.w	r1, r6, r6, lsl #1
			slen[0] = sfCompress / 3;
 800a91a:	9612      	str	r6, [sp, #72]	; 0x48
			if (sis->mixedBlock) {
 800a91c:	442a      	add	r2, r5
			slen[2] = slen[3] = 0;
 800a91e:	9315      	str	r3, [sp, #84]	; 0x54
			slen[1] = sfCompress % 3;
 800a920:	1a41      	subs	r1, r0, r1
			slen[2] = slen[3] = 0;
 800a922:	9314      	str	r3, [sp, #80]	; 0x50
			if (sis->mixedBlock) {
 800a924:	6c12      	ldr	r2, [r2, #64]	; 0x40
			slen[1] = sfCompress % 3;
 800a926:	9113      	str	r1, [sp, #76]	; 0x4c
			if (sis->mixedBlock) {
 800a928:	9209      	str	r2, [sp, #36]	; 0x24
 800a92a:	2a00      	cmp	r2, #0
 800a92c:	f000 80bb 	beq.w	800aaa6 <xmp3fixpt_UnpackScaleFactors+0x826>
				slen[1] = slen[0];
 800a930:	2206      	movs	r2, #6
				slen[2] = slen[1];  
 800a932:	9114      	str	r1, [sp, #80]	; 0x50
				slen[1] = slen[0];
 800a934:	2003      	movs	r0, #3
 800a936:	210a      	movs	r1, #10
 800a938:	9613      	str	r6, [sp, #76]	; 0x4c
 800a93a:	250b      	movs	r5, #11
 800a93c:	9102      	str	r1, [sp, #8]
 800a93e:	4681      	mov	r9, r0
 800a940:	4619      	mov	r1, r3
	intensityScale = 0;
 800a942:	9303      	str	r3, [sp, #12]
			preFlag = 1;
 800a944:	f04f 0801 	mov.w	r8, #1
				slen[1] = slen[0];
 800a948:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800a94c:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
 800a950:	e52f      	b.n	800a3b2 <xmp3fixpt_UnpackScaleFactors+0x132>
 800a952:	ea4f 114a 	mov.w	r1, sl, lsl #5
			sfb = 0;
 800a956:	4613      	mov	r3, r2
 800a958:	9103      	str	r1, [sp, #12]
 800a95a:	ea4f 114b 	mov.w	r1, fp, lsl #5
 800a95e:	9102      	str	r1, [sp, #8]
 800a960:	e788      	b.n	800a874 <xmp3fixpt_UnpackScaleFactors+0x5f4>
 800a962:	ea4f 124b 	mov.w	r2, fp, lsl #5
 800a966:	eba3 030a 	sub.w	r3, r3, sl
 800a96a:	9202      	str	r2, [sp, #8]
 800a96c:	eba2 020b 	sub.w	r2, r2, fp
 800a970:	005b      	lsls	r3, r3, #1
 800a972:	0092      	lsls	r2, r2, #2
 800a974:	1dde      	adds	r6, r3, #7
 800a976:	eb03 0802 	add.w	r8, r3, r2
 800a97a:	4432      	add	r2, r6
 800a97c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a980:	18a6      	adds	r6, r4, r2
 800a982:	44a0      	add	r8, r4
				sfis->l[sfb] =    (char)GetBits(bsi, slen0);
 800a984:	4629      	mov	r1, r5
 800a986:	a80e      	add	r0, sp, #56	; 0x38
 800a988:	f7f6 fabe 	bl	8000f08 <xmp3fixpt_GetBits>
 800a98c:	f808 0f01 	strb.w	r0, [r8, #1]!
			for (sfb = 0; sfb < 8; sfb++)
 800a990:	45b0      	cmp	r8, r6
 800a992:	d1f7      	bne.n	800a984 <xmp3fixpt_UnpackScaleFactors+0x704>
			sfb = 3;
 800a994:	2203      	movs	r2, #3
 800a996:	e6fb      	b.n	800a790 <xmp3fixpt_UnpackScaleFactors+0x510>
 800a998:	af12      	add	r7, sp, #72	; 0x48
 800a99a:	ad16      	add	r5, sp, #88	; 0x58
 800a99c:	970c      	str	r7, [sp, #48]	; 0x30
 800a99e:	9509      	str	r5, [sp, #36]	; 0x24
 800a9a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a9a2:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
 800a9a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a9aa:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 800a9ae:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 800a9b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9b4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sfjs->intensityScale = intensityScale;
 800a9b8:	9b03      	ldr	r3, [sp, #12]
 800a9ba:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
 800a9be:	f8c4 1110 	str.w	r1, [r4, #272]	; 0x110
 800a9c2:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 800a9c6:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 800a9ca:	e506      	b.n	800a3da <xmp3fixpt_UnpackScaleFactors+0x15a>
		btIdx = (sis->mixedBlock ? 2 : 1);
 800a9cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9d0:	9202      	str	r2, [sp, #8]
 800a9d2:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 800a9d6:	e4f0      	b.n	800a3ba <xmp3fixpt_UnpackScaleFactors+0x13a>
 800a9d8:	9b03      	ldr	r3, [sp, #12]
 800a9da:	9a02      	ldr	r2, [sp, #8]
 800a9dc:	eba3 030a 	sub.w	r3, r3, sl
 800a9e0:	eba2 020b 	sub.w	r2, r2, fp
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	0092      	lsls	r2, r2, #2
 800a9e8:	f103 0514 	add.w	r5, r3, #20
 800a9ec:	189e      	adds	r6, r3, r2
 800a9ee:	442a      	add	r2, r5
 800a9f0:	360f      	adds	r6, #15
 800a9f2:	18a5      	adds	r5, r4, r2
 800a9f4:	4426      	add	r6, r4
			else          for(  ; sfb <21 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 800a9f6:	4639      	mov	r1, r7
 800a9f8:	a80e      	add	r0, sp, #56	; 0x38
 800a9fa:	f7f6 fa85 	bl	8000f08 <xmp3fixpt_GetBits>
 800a9fe:	f806 0f01 	strb.w	r0, [r6, #1]!
 800aa02:	42ae      	cmp	r6, r5
 800aa04:	d1f7      	bne.n	800a9f6 <xmp3fixpt_UnpackScaleFactors+0x776>
 800aa06:	e6ab      	b.n	800a760 <xmp3fixpt_UnpackScaleFactors+0x4e0>
 800aa08:	9b03      	ldr	r3, [sp, #12]
 800aa0a:	9a02      	ldr	r2, [sp, #8]
 800aa0c:	eba3 030a 	sub.w	r3, r3, sl
 800aa10:	eba2 020b 	sub.w	r2, r2, fp
 800aa14:	005b      	lsls	r3, r3, #1
 800aa16:	0092      	lsls	r2, r2, #2
 800aa18:	f103 060a 	add.w	r6, r3, #10
 800aa1c:	eb03 0902 	add.w	r9, r3, r2
 800aa20:	4432      	add	r2, r6
 800aa22:	f109 0905 	add.w	r9, r9, #5
 800aa26:	18a6      	adds	r6, r4, r2
 800aa28:	44a1      	add	r9, r4
			else          for(  ; sfb <11 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	a80e      	add	r0, sp, #56	; 0x38
 800aa2e:	f7f6 fa6b 	bl	8000f08 <xmp3fixpt_GetBits>
 800aa32:	f809 0f01 	strb.w	r0, [r9, #1]!
 800aa36:	45b1      	cmp	r9, r6
 800aa38:	d1f7      	bne.n	800aa2a <xmp3fixpt_UnpackScaleFactors+0x7aa>
 800aa3a:	e621      	b.n	800a680 <xmp3fixpt_UnpackScaleFactors+0x400>
 800aa3c:	ea4f 134a 	mov.w	r3, sl, lsl #5
 800aa40:	ea4f 124b 	mov.w	r2, fp, lsl #5
 800aa44:	9303      	str	r3, [sp, #12]
 800aa46:	eba3 030a 	sub.w	r3, r3, sl
 800aa4a:	9202      	str	r2, [sp, #8]
 800aa4c:	eba2 020b 	sub.w	r2, r2, fp
 800aa50:	005b      	lsls	r3, r3, #1
 800aa52:	0092      	lsls	r2, r2, #2
 800aa54:	1d5e      	adds	r6, r3, #5
 800aa56:	eb03 0902 	add.w	r9, r3, r2
 800aa5a:	4432      	add	r2, r6
 800aa5c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800aa60:	18a6      	adds	r6, r4, r2
 800aa62:	44a1      	add	r9, r4
			else          for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 800aa64:	4629      	mov	r1, r5
 800aa66:	a80e      	add	r0, sp, #56	; 0x38
 800aa68:	f7f6 fa4e 	bl	8000f08 <xmp3fixpt_GetBits>
 800aa6c:	f809 0f01 	strb.w	r0, [r9, #1]!
 800aa70:	45b1      	cmp	r9, r6
 800aa72:	d1f7      	bne.n	800aa64 <xmp3fixpt_UnpackScaleFactors+0x7e4>
 800aa74:	e5cd      	b.n	800a612 <xmp3fixpt_UnpackScaleFactors+0x392>
 800aa76:	9b03      	ldr	r3, [sp, #12]
 800aa78:	9a02      	ldr	r2, [sp, #8]
 800aa7a:	eba3 030a 	sub.w	r3, r3, sl
 800aa7e:	eba2 020b 	sub.w	r2, r2, fp
 800aa82:	005b      	lsls	r3, r3, #1
 800aa84:	0092      	lsls	r2, r2, #2
 800aa86:	f103 050f 	add.w	r5, r3, #15
 800aa8a:	189e      	adds	r6, r3, r2
 800aa8c:	442a      	add	r2, r5
 800aa8e:	360a      	adds	r6, #10
 800aa90:	18a5      	adds	r5, r4, r2
 800aa92:	4426      	add	r6, r4
			else          for(  ; sfb <16 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 800aa94:	4639      	mov	r1, r7
 800aa96:	a80e      	add	r0, sp, #56	; 0x38
 800aa98:	f7f6 fa36 	bl	8000f08 <xmp3fixpt_GetBits>
 800aa9c:	f806 0f01 	strb.w	r0, [r6, #1]!
 800aaa0:	42ae      	cmp	r6, r5
 800aaa2:	d1f7      	bne.n	800aa94 <xmp3fixpt_UnpackScaleFactors+0x814>
 800aaa4:	e625      	b.n	800a6f2 <xmp3fixpt_UnpackScaleFactors+0x472>
 800aaa6:	4610      	mov	r0, r2
			if (sis->mixedBlock) {
 800aaa8:	2206      	movs	r2, #6
 800aaaa:	250b      	movs	r5, #11
			preFlag = 1;
 800aaac:	f04f 0801 	mov.w	r8, #1
			if (sis->mixedBlock) {
 800aab0:	4603      	mov	r3, r0
 800aab2:	4601      	mov	r1, r0
	intensityScale = 0;
 800aab4:	9003      	str	r0, [sp, #12]
			if (sis->mixedBlock) {
 800aab6:	920c      	str	r2, [sp, #48]	; 0x30
 800aab8:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
 800aabc:	200a      	movs	r0, #10
 800aabe:	9002      	str	r0, [sp, #8]
 800aac0:	2003      	movs	r0, #3
 800aac2:	4681      	mov	r9, r0
 800aac4:	e475      	b.n	800a3b2 <xmp3fixpt_UnpackScaleFactors+0x132>
			slen[0] = (sfCompress / 36);
 800aac6:	4e23      	ldr	r6, [pc, #140]	; (800ab54 <xmp3fixpt_UnpackScaleFactors+0x8d4>)
 800aac8:	17c0      	asrs	r0, r0, #31
			slen[3] = 0;
 800aaca:	2107      	movs	r1, #7
 800aacc:	462b      	mov	r3, r5
			slen[0] = (sfCompress / 36);
 800aace:	fb86 2607 	smull	r2, r6, r6, r7
			slen[3] = 0;
 800aad2:	2204      	movs	r2, #4
 800aad4:	9515      	str	r5, [sp, #84]	; 0x54
	preFlag = 0;
 800aad6:	46a8      	mov	r8, r5
			slen[0] = (sfCompress / 36);
 800aad8:	ebc0 06e6 	rsb	r6, r0, r6, asr #3
			slen[3] = 0;
 800aadc:	950a      	str	r5, [sp, #40]	; 0x28
 800aade:	9102      	str	r1, [sp, #8]
 800aae0:	460d      	mov	r5, r1
			slen[1] = (sfCompress % 36) / 6;
 800aae2:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
			slen[0] = (sfCompress / 36);
 800aae6:	9612      	str	r6, [sp, #72]	; 0x48
			slen[3] = 0;
 800aae8:	9209      	str	r2, [sp, #36]	; 0x24
			slen[1] = (sfCompress % 36) / 6;
 800aaea:	eba7 0780 	sub.w	r7, r7, r0, lsl #2
 800aaee:	481a      	ldr	r0, [pc, #104]	; (800ab58 <xmp3fixpt_UnpackScaleFactors+0x8d8>)
 800aaf0:	fb80 9007 	smull	r9, r0, r0, r7
 800aaf4:	900d      	str	r0, [sp, #52]	; 0x34
			slen[3] = 0;
 800aaf6:	2005      	movs	r0, #5
 800aaf8:	4681      	mov	r9, r0
			slen[1] = (sfCompress % 36) / 6;
 800aafa:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aafc:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
 800ab00:	9013      	str	r0, [sp, #76]	; 0x4c
			slen[2] = (sfCompress % 36) % 6;
 800ab02:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ab06:	eba7 0740 	sub.w	r7, r7, r0, lsl #1
			slen[3] = 0;
 800ab0a:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
			slen[2] = (sfCompress % 36) % 6;
 800ab0e:	9714      	str	r7, [sp, #80]	; 0x50
 800ab10:	e44f      	b.n	800a3b2 <xmp3fixpt_UnpackScaleFactors+0x132>
		return -1;
 800ab12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab16:	e4d5      	b.n	800a4c4 <xmp3fixpt_UnpackScaleFactors+0x244>
			sfCompress -= 244;
 800ab18:	3ff4      	subs	r7, #244	; 0xf4
			slen[0] = (sfCompress / 3);
 800ab1a:	4e0d      	ldr	r6, [pc, #52]	; (800ab50 <xmp3fixpt_UnpackScaleFactors+0x8d0>)
			slen[2] = slen[3] = 0;
 800ab1c:	2105      	movs	r1, #5
 800ab1e:	462b      	mov	r3, r5
			slen[0] = (sfCompress / 3);
 800ab20:	fba6 2607 	umull	r2, r6, r6, r7
			slen[2] = slen[3] = 0;
 800ab24:	2208      	movs	r2, #8
 800ab26:	9515      	str	r5, [sp, #84]	; 0x54
	preFlag = 0;
 800ab28:	46a8      	mov	r8, r5
			slen[0] = (sfCompress / 3);
 800ab2a:	0876      	lsrs	r6, r6, #1
			slen[2] = slen[3] = 0;
 800ab2c:	9202      	str	r2, [sp, #8]
 800ab2e:	2203      	movs	r2, #3
 800ab30:	9514      	str	r5, [sp, #80]	; 0x50
			slen[1] = (sfCompress % 3);
 800ab32:	eb06 0046 	add.w	r0, r6, r6, lsl #1
			slen[2] = slen[3] = 0;
 800ab36:	950a      	str	r5, [sp, #40]	; 0x28
			slen[0] = (sfCompress / 3);
 800ab38:	9612      	str	r6, [sp, #72]	; 0x48
			slen[2] = slen[3] = 0;
 800ab3a:	2508      	movs	r5, #8
			slen[1] = (sfCompress % 3);
 800ab3c:	1a3f      	subs	r7, r7, r0
			slen[2] = slen[3] = 0;
 800ab3e:	2006      	movs	r0, #6
 800ab40:	910c      	str	r1, [sp, #48]	; 0x30
 800ab42:	4681      	mov	r9, r0
 800ab44:	2004      	movs	r0, #4
 800ab46:	9209      	str	r2, [sp, #36]	; 0x24
 800ab48:	900b      	str	r0, [sp, #44]	; 0x2c
			slen[1] = (sfCompress % 3);
 800ab4a:	9713      	str	r7, [sp, #76]	; 0x4c
 800ab4c:	e431      	b.n	800a3b2 <xmp3fixpt_UnpackScaleFactors+0x132>
 800ab4e:	bf00      	nop
 800ab50:	aaaaaaab 	.word	0xaaaaaaab
 800ab54:	38e38e39 	.word	0x38e38e39
 800ab58:	2aaaaaab 	.word	0x2aaaaaab

0800ab5c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ab5c:	b530      	push	{r4, r5, lr}
  Stat = STA_NOINIT;
 800ab5e:	4c15      	ldr	r4, [pc, #84]	; (800abb4 <SD_initialize+0x58>)
 800ab60:	2501      	movs	r5, #1
{
 800ab62:	b083      	sub	sp, #12
  Stat = STA_NOINIT;
 800ab64:	7025      	strb	r5, [r4, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 800ab66:	f012 fbe1 	bl	801d32c <osKernelRunning>
 800ab6a:	b910      	cbnz	r0, 800ab72 <SD_initialize+0x16>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
    }
  }
  return Stat;
 800ab6c:	7820      	ldrb	r0, [r4, #0]
}
 800ab6e:	b003      	add	sp, #12
 800ab70:	bd30      	pop	{r4, r5, pc}
    if(BSP_SD_Init() == MSD_OK)
 800ab72:	f7f7 fe43 	bl	80027fc <BSP_SD_Init>
 800ab76:	b188      	cbz	r0, 800ab9c <SD_initialize+0x40>
    if (Stat != STA_NOINIT)
 800ab78:	7823      	ldrb	r3, [r4, #0]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d0f6      	beq.n	800ab6c <SD_initialize+0x10>
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ab7e:	4a0e      	ldr	r2, [pc, #56]	; (800abb8 <SD_initialize+0x5c>)
 800ab80:	466b      	mov	r3, sp
 800ab82:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ab86:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	f012 fc67 	bl	801d460 <osMessageCreate>
 800ab92:	4b0a      	ldr	r3, [pc, #40]	; (800abbc <SD_initialize+0x60>)
 800ab94:	6018      	str	r0, [r3, #0]
  return Stat;
 800ab96:	7820      	ldrb	r0, [r4, #0]
}
 800ab98:	b003      	add	sp, #12
 800ab9a:	bd30      	pop	{r4, r5, pc}
  Stat = STA_NOINIT;
 800ab9c:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800ab9e:	f7f7 fe6d 	bl	800287c <BSP_SD_GetCardState>
 800aba2:	b918      	cbnz	r0, 800abac <SD_initialize+0x50>
    Stat &= ~STA_NOINIT;
 800aba4:	7823      	ldrb	r3, [r4, #0]
 800aba6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800abaa:	7023      	strb	r3, [r4, #0]
  return Stat;
 800abac:	7823      	ldrb	r3, [r4, #0]
 800abae:	b2db      	uxtb	r3, r3
      Stat = SD_CheckStatus(lun);
 800abb0:	7023      	strb	r3, [r4, #0]
 800abb2:	e7e1      	b.n	800ab78 <SD_initialize+0x1c>
 800abb4:	20000028 	.word	0x20000028
 800abb8:	080209f8 	.word	0x080209f8
 800abbc:	20005ea8 	.word	0x20005ea8

0800abc0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800abc0:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800abc2:	2301      	movs	r3, #1
 800abc4:	4c05      	ldr	r4, [pc, #20]	; (800abdc <SD_status+0x1c>)
 800abc6:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800abc8:	f7f7 fe58 	bl	800287c <BSP_SD_GetCardState>
 800abcc:	b918      	cbnz	r0, 800abd6 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800abce:	7823      	ldrb	r3, [r4, #0]
 800abd0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800abd4:	7023      	strb	r3, [r4, #0]
  return Stat;
 800abd6:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800abd8:	bd10      	pop	{r4, pc}
 800abda:	bf00      	nop
 800abdc:	20000028 	.word	0x20000028

0800abe0 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800abe0:	b510      	push	{r4, lr}
 800abe2:	4608      	mov	r0, r1
 800abe4:	b084      	sub	sp, #16
 800abe6:	4611      	mov	r1, r2
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800abe8:	461a      	mov	r2, r3
 800abea:	f7f7 fe39 	bl	8002860 <BSP_SD_WriteBlocks_DMA>
 800abee:	b110      	cbz	r0, 800abf6 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800abf0:	2001      	movs	r0, #1
      }
    }
  }

  return res;
}
 800abf2:	b004      	add	sp, #16
 800abf4:	bd10      	pop	{r4, pc}
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800abf6:	4b0e      	ldr	r3, [pc, #56]	; (800ac30 <SD_write+0x50>)
 800abf8:	f247 5230 	movw	r2, #30000	; 0x7530
 800abfc:	a801      	add	r0, sp, #4
 800abfe:	6819      	ldr	r1, [r3, #0]
 800ac00:	f012 fc60 	bl	801d4c4 <osMessageGet>
    if (event.status == osEventMessage)
 800ac04:	9b01      	ldr	r3, [sp, #4]
 800ac06:	2b10      	cmp	r3, #16
 800ac08:	d1f2      	bne.n	800abf0 <SD_write+0x10>
      if (event.value.v == WRITE_CPLT_MSG)
 800ac0a:	9b02      	ldr	r3, [sp, #8]
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d1ef      	bne.n	800abf0 <SD_write+0x10>
        timer = osKernelSysTick() + SD_TIMEOUT;
 800ac10:	f247 5430 	movw	r4, #30000	; 0x7530
 800ac14:	f012 fb92 	bl	801d33c <osKernelSysTick>
 800ac18:	4404      	add	r4, r0
 800ac1a:	e003      	b.n	800ac24 <SD_write+0x44>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ac1c:	f7f7 fe2e 	bl	800287c <BSP_SD_GetCardState>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d0e6      	beq.n	800abf2 <SD_write+0x12>
        while(timer > osKernelSysTick())
 800ac24:	f012 fb8a 	bl	801d33c <osKernelSysTick>
 800ac28:	4284      	cmp	r4, r0
 800ac2a:	d8f7      	bhi.n	800ac1c <SD_write+0x3c>
 800ac2c:	e7e0      	b.n	800abf0 <SD_write+0x10>
 800ac2e:	bf00      	nop
 800ac30:	20005ea8 	.word	0x20005ea8

0800ac34 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ac34:	4b16      	ldr	r3, [pc, #88]	; (800ac90 <SD_ioctl+0x5c>)
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	07db      	lsls	r3, r3, #31
 800ac3a:	d408      	bmi.n	800ac4e <SD_ioctl+0x1a>
{
 800ac3c:	b510      	push	{r4, lr}
 800ac3e:	4614      	mov	r4, r2
 800ac40:	b088      	sub	sp, #32

  switch (cmd)
 800ac42:	2903      	cmp	r1, #3
 800ac44:	d821      	bhi.n	800ac8a <SD_ioctl+0x56>
 800ac46:	e8df f001 	tbb	[pc, r1]
 800ac4a:	0704      	.short	0x0704
 800ac4c:	170f      	.short	0x170f
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ac4e:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800ac50:	4770      	bx	lr
    res = RES_OK;
 800ac52:	2000      	movs	r0, #0
}
 800ac54:	b008      	add	sp, #32
 800ac56:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800ac58:	4668      	mov	r0, sp
 800ac5a:	f7f7 fe19 	bl	8002890 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ac5e:	9b06      	ldr	r3, [sp, #24]
    res = RES_OK;
 800ac60:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ac62:	6023      	str	r3, [r4, #0]
}
 800ac64:	b008      	add	sp, #32
 800ac66:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800ac68:	4668      	mov	r0, sp
 800ac6a:	f7f7 fe11 	bl	8002890 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ac6e:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 800ac70:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ac72:	8023      	strh	r3, [r4, #0]
}
 800ac74:	b008      	add	sp, #32
 800ac76:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800ac78:	4668      	mov	r0, sp
 800ac7a:	f7f7 fe09 	bl	8002890 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ac7e:	9b07      	ldr	r3, [sp, #28]
 800ac80:	2000      	movs	r0, #0
 800ac82:	0a5b      	lsrs	r3, r3, #9
 800ac84:	6023      	str	r3, [r4, #0]
}
 800ac86:	b008      	add	sp, #32
 800ac88:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 800ac8a:	2004      	movs	r0, #4
}
 800ac8c:	b008      	add	sp, #32
 800ac8e:	bd10      	pop	{r4, pc}
 800ac90:	20000028 	.word	0x20000028

0800ac94 <SD_read>:
{
 800ac94:	b510      	push	{r4, lr}
 800ac96:	4608      	mov	r0, r1
 800ac98:	b084      	sub	sp, #16
 800ac9a:	4611      	mov	r1, r2
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	f7f7 fdd1 	bl	8002844 <BSP_SD_ReadBlocks_DMA>
 800aca2:	b110      	cbz	r0, 800acaa <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800aca4:	2001      	movs	r0, #1
}
 800aca6:	b004      	add	sp, #16
 800aca8:	bd10      	pop	{r4, pc}
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800acaa:	4b0e      	ldr	r3, [pc, #56]	; (800ace4 <SD_read+0x50>)
 800acac:	f247 5230 	movw	r2, #30000	; 0x7530
 800acb0:	a801      	add	r0, sp, #4
 800acb2:	6819      	ldr	r1, [r3, #0]
 800acb4:	f012 fc06 	bl	801d4c4 <osMessageGet>
    if (event.status == osEventMessage)
 800acb8:	9b01      	ldr	r3, [sp, #4]
 800acba:	2b10      	cmp	r3, #16
 800acbc:	d1f2      	bne.n	800aca4 <SD_read+0x10>
      if (event.value.v == READ_CPLT_MSG)
 800acbe:	9b02      	ldr	r3, [sp, #8]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d1ef      	bne.n	800aca4 <SD_read+0x10>
        timer = osKernelSysTick() + SD_TIMEOUT;
 800acc4:	f247 5430 	movw	r4, #30000	; 0x7530
 800acc8:	f012 fb38 	bl	801d33c <osKernelSysTick>
 800accc:	4404      	add	r4, r0
 800acce:	e003      	b.n	800acd8 <SD_read+0x44>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800acd0:	f7f7 fdd4 	bl	800287c <BSP_SD_GetCardState>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d0e6      	beq.n	800aca6 <SD_read+0x12>
        while(timer > osKernelSysTick())
 800acd8:	f012 fb30 	bl	801d33c <osKernelSysTick>
 800acdc:	4284      	cmp	r4, r0
 800acde:	d8f7      	bhi.n	800acd0 <SD_read+0x3c>
 800ace0:	e7e0      	b.n	800aca4 <SD_read+0x10>
 800ace2:	bf00      	nop
 800ace4:	20005ea8 	.word	0x20005ea8

0800ace8 <BSP_SD_ReadCpltCallback>:
{
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 800ace8:	4b03      	ldr	r3, [pc, #12]	; (800acf8 <BSP_SD_ReadCpltCallback+0x10>)
 800acea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800acee:	2101      	movs	r1, #1
 800acf0:	6818      	ldr	r0, [r3, #0]
 800acf2:	f012 bbbb 	b.w	801d46c <osMessagePut>
 800acf6:	bf00      	nop
 800acf8:	20005ea8 	.word	0x20005ea8

0800acfc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800acfc:	4b22      	ldr	r3, [pc, #136]	; (800ad88 <HAL_MspInit+0x8c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800acfe:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800ad06:	b500      	push	{lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad08:	641a      	str	r2, [r3, #64]	; 0x40
{
 800ad0a:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad0e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800ad12:	9200      	str	r2, [sp, #0]
 800ad14:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad1c:	645a      	str	r2, [r3, #68]	; 0x44
 800ad1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ad28:	f004 fb64 	bl	800f3f4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f06f 000b 	mvn.w	r0, #11
 800ad32:	4611      	mov	r1, r2
 800ad34:	f004 fb72 	bl	800f41c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f06f 000a 	mvn.w	r0, #10
 800ad3e:	4611      	mov	r1, r2
 800ad40:	f004 fb6c 	bl	800f41c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800ad44:	2200      	movs	r2, #0
 800ad46:	f06f 0009 	mvn.w	r0, #9
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	f004 fb66 	bl	800f41c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800ad50:	2200      	movs	r2, #0
 800ad52:	f06f 0004 	mvn.w	r0, #4
 800ad56:	4611      	mov	r1, r2
 800ad58:	f004 fb60 	bl	800f41c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f06f 0003 	mvn.w	r0, #3
 800ad62:	4611      	mov	r1, r2
 800ad64:	f004 fb5a 	bl	800f41c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ad68:	2200      	movs	r2, #0
 800ad6a:	210f      	movs	r1, #15
 800ad6c:	f06f 0001 	mvn.w	r0, #1
 800ad70:	f004 fb54 	bl	800f41c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800ad74:	2200      	movs	r2, #0
 800ad76:	210f      	movs	r1, #15
 800ad78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ad7c:	b003      	add	sp, #12
 800ad7e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800ad82:	f004 bb4b 	b.w	800f41c <HAL_NVIC_SetPriority>
 800ad86:	bf00      	nop
 800ad88:	40023800 	.word	0x40023800

0800ad8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 800ad8c:	6802      	ldr	r2, [r0, #0]
 800ad8e:	4b13      	ldr	r3, [pc, #76]	; (800addc <HAL_ADC_MspInit+0x50>)
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d000      	beq.n	800ad96 <HAL_ADC_MspInit+0xa>
 800ad94:	4770      	bx	lr
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800ad96:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800ad9a:	f44f 60f8 	mov.w	r0, #1984	; 0x7c0
    __HAL_RCC_ADC3_CLK_ENABLE();
 800ad9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ada0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
{
 800ada4:	b530      	push	{r4, r5, lr}
    __HAL_RCC_ADC3_CLK_ENABLE();
 800ada6:	645a      	str	r2, [r3, #68]	; 0x44
{
 800ada8:	b087      	sub	sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 800adaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800adac:	2503      	movs	r5, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adae:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800adb0:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC3_CLK_ENABLE();
 800adb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800adb6:	9001      	str	r0, [sp, #4]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800adb8:	4809      	ldr	r0, [pc, #36]	; (800ade0 <HAL_ADC_MspInit+0x54>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 800adba:	9300      	str	r3, [sp, #0]
 800adbc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800adbe:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adc0:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800adc2:	f005 f899 	bl	800fef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800adc6:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800adc8:	a901      	add	r1, sp, #4
 800adca:	4806      	ldr	r0, [pc, #24]	; (800ade4 <HAL_ADC_MspInit+0x58>)
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800adcc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adce:	e9cd 5402 	strd	r5, r4, [sp, #8]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800add2:	f005 f891 	bl	800fef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800add6:	b007      	add	sp, #28
 800add8:	bd30      	pop	{r4, r5, pc}
 800adda:	bf00      	nop
 800addc:	40012200 	.word	0x40012200
 800ade0:	40021400 	.word	0x40021400
 800ade4:	40020000 	.word	0x40020000

0800ade8 <HAL_CRC_MspInit>:
}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{

  if(hcrc->Instance==CRC)
 800ade8:	6802      	ldr	r2, [r0, #0]
 800adea:	4b09      	ldr	r3, [pc, #36]	; (800ae10 <HAL_CRC_MspInit+0x28>)
 800adec:	429a      	cmp	r2, r3
 800adee:	d000      	beq.n	800adf2 <HAL_CRC_MspInit+0xa>
 800adf0:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800adf2:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800adf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 800adfa:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 800adfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ae00:	631a      	str	r2, [r3, #48]	; 0x30
 800ae02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae08:	9301      	str	r3, [sp, #4]
 800ae0a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800ae0c:	b002      	add	sp, #8
 800ae0e:	4770      	bx	lr
 800ae10:	40023000 	.word	0x40023000

0800ae14 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdcmi->Instance==DCMI)
 800ae14:	6802      	ldr	r2, [r0, #0]
 800ae16:	4b24      	ldr	r3, [pc, #144]	; (800aea8 <HAL_DCMI_MspInit+0x94>)
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d000      	beq.n	800ae1e <HAL_DCMI_MspInit+0xa>
 800ae1c:	4770      	bx	lr
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800ae1e:	4b23      	ldr	r3, [pc, #140]	; (800aeac <HAL_DCMI_MspInit+0x98>)
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800ae20:	2060      	movs	r0, #96	; 0x60
    __HAL_RCC_DCMI_CLK_ENABLE();
 800ae22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae24:	f042 0201 	orr.w	r2, r2, #1
{
 800ae28:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_DCMI_CLK_ENABLE();
 800ae2a:	635a      	str	r2, [r3, #52]	; 0x34
{
 800ae2c:	b086      	sub	sp, #24
    __HAL_RCC_DCMI_CLK_ENABLE();
 800ae2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae30:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae32:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ae34:	250d      	movs	r5, #13
    __HAL_RCC_DCMI_CLK_ENABLE();
 800ae36:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ae3a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800ae3c:	9001      	str	r0, [sp, #4]
    __HAL_RCC_DCMI_CLK_ENABLE();
 800ae3e:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ae40:	481b      	ldr	r0, [pc, #108]	; (800aeb0 <HAL_DCMI_MspInit+0x9c>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 800ae42:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae44:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ae46:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae48:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ae4c:	f005 f854 	bl	800fef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800ae50:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800ae52:	a901      	add	r1, sp, #4
 800ae54:	4817      	ldr	r0, [pc, #92]	; (800aeb4 <HAL_DCMI_MspInit+0xa0>)
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800ae56:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae58:	e9cd 6402 	strd	r6, r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ae5c:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800ae60:	f005 f84a 	bl	800fef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800ae64:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800ae68:	a901      	add	r1, sp, #4
 800ae6a:	4813      	ldr	r0, [pc, #76]	; (800aeb8 <HAL_DCMI_MspInit+0xa4>)
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800ae6c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae6e:	e9cd 6402 	strd	r6, r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ae72:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800ae76:	f005 f83f 	bl	800fef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800ae7a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ae7e:	a901      	add	r1, sp, #4
 800ae80:	480e      	ldr	r0, [pc, #56]	; (800aebc <HAL_DCMI_MspInit+0xa8>)
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800ae82:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae84:	e9cd 6402 	strd	r6, r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ae88:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ae8c:	f005 f834 	bl	800fef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800ae90:	2350      	movs	r3, #80	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae92:	a901      	add	r1, sp, #4
 800ae94:	480a      	ldr	r0, [pc, #40]	; (800aec0 <HAL_DCMI_MspInit+0xac>)
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800ae96:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae98:	e9cd 6402 	strd	r6, r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ae9c:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aea0:	f005 f82a 	bl	800fef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800aea4:	b006      	add	sp, #24
 800aea6:	bd70      	pop	{r4, r5, r6, pc}
 800aea8:	50050000 	.word	0x50050000
 800aeac:	40023800 	.word	0x40023800
 800aeb0:	40021000 	.word	0x40021000
 800aeb4:	40020c00 	.word	0x40020c00
 800aeb8:	40021800 	.word	0x40021800
 800aebc:	40021c00 	.word	0x40021c00
 800aec0:	40020000 	.word	0x40020000

0800aec4 <HAL_DMA2D_MspInit>:
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{

  if(hdma2d->Instance==DMA2D)
 800aec4:	6802      	ldr	r2, [r0, #0]
 800aec6:	4b0e      	ldr	r3, [pc, #56]	; (800af00 <HAL_DMA2D_MspInit+0x3c>)
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d000      	beq.n	800aece <HAL_DMA2D_MspInit+0xa>
 800aecc:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800aece:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800aed2:	2200      	movs	r2, #0
 800aed4:	2105      	movs	r1, #5
 800aed6:	205a      	movs	r0, #90	; 0x5a
{
 800aed8:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800aeda:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 800aedc:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800aede:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800aee2:	631c      	str	r4, [r3, #48]	; 0x30
 800aee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aeea:	9301      	str	r3, [sp, #4]
 800aeec:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800aeee:	f004 fa95 	bl	800f41c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800aef2:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800aef4:	b002      	add	sp, #8
 800aef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800aefa:	f004 bac5 	b.w	800f488 <HAL_NVIC_EnableIRQ>
 800aefe:	bf00      	nop
 800af00:	4002b000 	.word	0x4002b000

0800af04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800af04:	6803      	ldr	r3, [r0, #0]
 800af06:	4a20      	ldr	r2, [pc, #128]	; (800af88 <HAL_I2C_MspInit+0x84>)
 800af08:	4293      	cmp	r3, r2
{
 800af0a:	b530      	push	{r4, r5, lr}
 800af0c:	b089      	sub	sp, #36	; 0x24
  if(hi2c->Instance==I2C1)
 800af0e:	d01f      	beq.n	800af50 <HAL_I2C_MspInit+0x4c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 800af10:	4a1e      	ldr	r2, [pc, #120]	; (800af8c <HAL_I2C_MspInit+0x88>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d001      	beq.n	800af1a <HAL_I2C_MspInit+0x16>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800af16:	b009      	add	sp, #36	; 0x24
 800af18:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800af1a:	f44f 70c0 	mov.w	r0, #384	; 0x180
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af1e:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800af20:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800af22:	2512      	movs	r5, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800af24:	2401      	movs	r4, #1
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800af26:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800af28:	a903      	add	r1, sp, #12
 800af2a:	4819      	ldr	r0, [pc, #100]	; (800af90 <HAL_I2C_MspInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800af2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800af30:	e9cd 5404 	strd	r5, r4, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800af34:	f004 ffe0 	bl	800fef8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800af38:	4b16      	ldr	r3, [pc, #88]	; (800af94 <HAL_I2C_MspInit+0x90>)
 800af3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800af40:	641a      	str	r2, [r3, #64]	; 0x40
 800af42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af48:	9302      	str	r3, [sp, #8]
 800af4a:	9b02      	ldr	r3, [sp, #8]
}
 800af4c:	b009      	add	sp, #36	; 0x24
 800af4e:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800af50:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af54:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800af56:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800af58:	2512      	movs	r5, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800af5a:	2401      	movs	r4, #1
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800af5c:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af5e:	a903      	add	r1, sp, #12
 800af60:	480d      	ldr	r0, [pc, #52]	; (800af98 <HAL_I2C_MspInit+0x94>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800af62:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800af66:	e9cd 5404 	strd	r5, r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af6a:	f004 ffc5 	bl	800fef8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800af6e:	4b09      	ldr	r3, [pc, #36]	; (800af94 <HAL_I2C_MspInit+0x90>)
 800af70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af72:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800af76:	641a      	str	r2, [r3, #64]	; 0x40
 800af78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af7e:	9301      	str	r3, [sp, #4]
 800af80:	9b01      	ldr	r3, [sp, #4]
}
 800af82:	b009      	add	sp, #36	; 0x24
 800af84:	bd30      	pop	{r4, r5, pc}
 800af86:	bf00      	nop
 800af88:	40005400 	.word	0x40005400
 800af8c:	40005c00 	.word	0x40005c00
 800af90:	40021c00 	.word	0x40021c00
 800af94:	40023800 	.word	0x40023800
 800af98:	40020400 	.word	0x40020400

0800af9c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{

  if(hi2c->Instance==I2C1)
 800af9c:	6803      	ldr	r3, [r0, #0]
 800af9e:	4a0e      	ldr	r2, [pc, #56]	; (800afd8 <HAL_I2C_MspDeInit+0x3c>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d00e      	beq.n	800afc2 <HAL_I2C_MspDeInit+0x26>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 800afa4:	4a0d      	ldr	r2, [pc, #52]	; (800afdc <HAL_I2C_MspDeInit+0x40>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d000      	beq.n	800afac <HAL_I2C_MspDeInit+0x10>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800afaa:	4770      	bx	lr
    __HAL_RCC_I2C3_CLK_DISABLE();
 800afac:	f502 32ee 	add.w	r2, r2, #121856	; 0x1dc00
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 800afb0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800afb4:	480a      	ldr	r0, [pc, #40]	; (800afe0 <HAL_I2C_MspDeInit+0x44>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 800afb6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800afb8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800afbc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 800afbe:	f005 b8b9 	b.w	8010134 <HAL_GPIO_DeInit>
    __HAL_RCC_I2C1_CLK_DISABLE();
 800afc2:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 800afc6:	f44f 7140 	mov.w	r1, #768	; 0x300
 800afca:	4806      	ldr	r0, [pc, #24]	; (800afe4 <HAL_I2C_MspDeInit+0x48>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 800afcc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800afce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800afd2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 800afd4:	f005 b8ae 	b.w	8010134 <HAL_GPIO_DeInit>
 800afd8:	40005400 	.word	0x40005400
 800afdc:	40005c00 	.word	0x40005c00
 800afe0:	40021c00 	.word	0x40021c00
 800afe4:	40020400 	.word	0x40020400

0800afe8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 800afe8:	6802      	ldr	r2, [r0, #0]
 800afea:	4b2a      	ldr	r3, [pc, #168]	; (800b094 <HAL_LTDC_MspInit+0xac>)
 800afec:	429a      	cmp	r2, r3
 800afee:	d000      	beq.n	800aff2 <HAL_LTDC_MspInit+0xa>
 800aff0:	4770      	bx	lr
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800aff2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800aff6:	2010      	movs	r0, #16
    __HAL_RCC_LTDC_CLK_ENABLE();
 800aff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800affa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 800affe:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_LTDC_CLK_ENABLE();
 800b000:	645a      	str	r2, [r3, #68]	; 0x44
{
 800b002:	b086      	sub	sp, #24
    __HAL_RCC_LTDC_CLK_ENABLE();
 800b004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b006:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b008:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b00a:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 800b00c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800b010:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800b012:	9001      	str	r0, [sp, #4]
    __HAL_RCC_LTDC_CLK_ENABLE();
 800b014:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800b016:	4820      	ldr	r0, [pc, #128]	; (800b098 <HAL_LTDC_MspInit+0xb0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800b018:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b01a:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b01c:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b01e:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800b022:	f004 ff69 	bl	800fef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800b026:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800b02a:	a901      	add	r1, sp, #4
 800b02c:	481b      	ldr	r0, [pc, #108]	; (800b09c <HAL_LTDC_MspInit+0xb4>)
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800b02e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b030:	e9cd 5402 	strd	r5, r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b034:	e9cd 4604 	strd	r4, r6, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800b038:	f004 ff5e 	bl	800fef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800b03c:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800b03e:	a901      	add	r1, sp, #4
 800b040:	4817      	ldr	r0, [pc, #92]	; (800b0a0 <HAL_LTDC_MspInit+0xb8>)
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800b042:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b044:	e9cd 5402 	strd	r5, r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b048:	e9cd 4604 	strd	r4, r6, [sp, #16]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800b04c:	f004 ff54 	bl	800fef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800b050:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800b054:	2309      	movs	r3, #9
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800b056:	a901      	add	r1, sp, #4
 800b058:	4812      	ldr	r0, [pc, #72]	; (800b0a4 <HAL_LTDC_MspInit+0xbc>)
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800b05a:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800b05c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b05e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b060:	e9cd 5402 	strd	r5, r4, [sp, #8]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800b064:	f004 ff48 	bl	800fef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800b068:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b06c:	a901      	add	r1, sp, #4
 800b06e:	480e      	ldr	r0, [pc, #56]	; (800b0a8 <HAL_LTDC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800b070:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b072:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b074:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b076:	e9cd 5402 	strd	r5, r4, [sp, #8]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b07a:	f004 ff3d 	bl	800fef8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800b07e:	4622      	mov	r2, r4
 800b080:	2105      	movs	r1, #5
 800b082:	2058      	movs	r0, #88	; 0x58
 800b084:	f004 f9ca 	bl	800f41c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800b088:	2058      	movs	r0, #88	; 0x58
 800b08a:	f004 f9fd 	bl	800f488 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800b08e:	b006      	add	sp, #24
 800b090:	bd70      	pop	{r4, r5, r6, pc}
 800b092:	bf00      	nop
 800b094:	40016800 	.word	0x40016800
 800b098:	40021000 	.word	0x40021000
 800b09c:	40022400 	.word	0x40022400
 800b0a0:	40022800 	.word	0x40022800
 800b0a4:	40021800 	.word	0x40021800
 800b0a8:	40022000 	.word	0x40022000

0800b0ac <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hqspi->Instance==QUADSPI)
 800b0ac:	6802      	ldr	r2, [r0, #0]
 800b0ae:	4b22      	ldr	r3, [pc, #136]	; (800b138 <HAL_QSPI_MspInit+0x8c>)
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d000      	beq.n	800b0b6 <HAL_QSPI_MspInit+0xa>
 800b0b4:	4770      	bx	lr
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800b0b6:	4b21      	ldr	r3, [pc, #132]	; (800b13c <HAL_QSPI_MspInit+0x90>)
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800b0b8:	4821      	ldr	r0, [pc, #132]	; (800b140 <HAL_QSPI_MspInit+0x94>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800b0ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
 800b0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0c0:	2602      	movs	r6, #2
{
 800b0c2:	b086      	sub	sp, #24
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800b0c4:	f04f 0804 	mov.w	r8, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0c8:	2500      	movs	r5, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 800b0ca:	4332      	orrs	r2, r6
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0cc:	2403      	movs	r4, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800b0ce:	2709      	movs	r7, #9
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800b0d0:	eb0d 0108 	add.w	r1, sp, r8
    __HAL_RCC_QSPI_CLK_ENABLE();
 800b0d4:	639a      	str	r2, [r3, #56]	; 0x38
 800b0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800b0d8:	f8cd 8004 	str.w	r8, [sp, #4]
    __HAL_RCC_QSPI_CLK_ENABLE();
 800b0dc:	4033      	ands	r3, r6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0de:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800b0e0:	9705      	str	r7, [sp, #20]
    __HAL_RCC_QSPI_CLK_ENABLE();
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0e6:	e9cd 5403 	strd	r5, r4, [sp, #12]
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800b0ea:	f004 ff05 	bl	800fef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800b0ee:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800b0f0:	230a      	movs	r3, #10
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800b0f2:	eb0d 0108 	add.w	r1, sp, r8
 800b0f6:	4813      	ldr	r0, [pc, #76]	; (800b144 <HAL_QSPI_MspInit+0x98>)
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800b0f8:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800b0fa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0fc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0fe:	e9cd 6502 	strd	r6, r5, [sp, #8]
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800b102:	f004 fef9 	bl	800fef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b106:	eb0d 0108 	add.w	r1, sp, r8
 800b10a:	480e      	ldr	r0, [pc, #56]	; (800b144 <HAL_QSPI_MspInit+0x98>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800b10c:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b10e:	e9cd 8601 	strd	r8, r6, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b112:	e9cd 5403 	strd	r5, r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b116:	f004 feef 	bl	800fef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800b11a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b11e:	eb0d 0108 	add.w	r1, sp, r8
 800b122:	4809      	ldr	r0, [pc, #36]	; (800b148 <HAL_QSPI_MspInit+0x9c>)
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800b124:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b126:	e9cd 6502 	strd	r6, r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800b12a:	e9cd 4704 	strd	r4, r7, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b12e:	f004 fee3 	bl	800fef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800b132:	b006      	add	sp, #24
 800b134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b138:	a0001000 	.word	0xa0001000
 800b13c:	40023800 	.word	0x40023800
 800b140:	40021000 	.word	0x40021000
 800b144:	40020400 	.word	0x40020400
 800b148:	40020c00 	.word	0x40020c00

0800b14c <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 800b14c:	6802      	ldr	r2, [r0, #0]
 800b14e:	4b04      	ldr	r3, [pc, #16]	; (800b160 <HAL_RTC_MspInit+0x14>)
 800b150:	429a      	cmp	r2, r3
 800b152:	d104      	bne.n	800b15e <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b154:	4a03      	ldr	r2, [pc, #12]	; (800b164 <HAL_RTC_MspInit+0x18>)
 800b156:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b15c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b15e:	4770      	bx	lr
 800b160:	40002800 	.word	0x40002800
 800b164:	40023800 	.word	0x40023800

0800b168 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 800b168:	6802      	ldr	r2, [r0, #0]
 800b16a:	4b16      	ldr	r3, [pc, #88]	; (800b1c4 <HAL_SD_MspInit+0x5c>)
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d000      	beq.n	800b172 <HAL_SD_MspInit+0xa>
 800b170:	4770      	bx	lr
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b172:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 800b176:	f44f 50f8 	mov.w	r0, #7936	; 0x1f00
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b17a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b17c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
{
 800b180:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b182:	645a      	str	r2, [r3, #68]	; 0x44
{
 800b184:	b087      	sub	sp, #28
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b188:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b18a:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b18c:	2503      	movs	r5, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b18e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800b192:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b194:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 800b196:	9001      	str	r0, [sp, #4]
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b198:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b19a:	480b      	ldr	r0, [pc, #44]	; (800b1c8 <HAL_SD_MspInit+0x60>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b19c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b19e:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800b1a0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1a2:	e9cd 6503 	strd	r6, r5, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b1a6:	f004 fea7 	bl	800fef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800b1aa:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800b1ac:	4807      	ldr	r0, [pc, #28]	; (800b1cc <HAL_SD_MspInit+0x64>)
 800b1ae:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800b1b2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1b4:	e9cd 7602 	strd	r7, r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800b1b8:	e9cd 5404 	strd	r5, r4, [sp, #16]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800b1bc:	f004 fe9c 	bl	800fef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800b1c0:	b007      	add	sp, #28
 800b1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1c4:	40012c00 	.word	0x40012c00
 800b1c8:	40020800 	.word	0x40020800
 800b1cc:	40020c00 	.word	0x40020c00

0800b1d0 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspdifrx->Instance==SPDIFRX)
 800b1d0:	6803      	ldr	r3, [r0, #0]
 800b1d2:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800b1d6:	d000      	beq.n	800b1da <HAL_SPDIFRX_MspInit+0xa>
 800b1d8:	4770      	bx	lr
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800b1da:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
  
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800b1de:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800b1e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
{
 800b1e6:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800b1e8:	641a      	str	r2, [r3, #64]	; 0x40
{
 800b1ea:	b086      	sub	sp, #24
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800b1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1ee:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800b1f0:	9001      	str	r0, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1f2:	2400      	movs	r4, #0
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800b1f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800b1f8:	2508      	movs	r5, #8
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800b1fa:	a901      	add	r1, sp, #4
 800b1fc:	4805      	ldr	r0, [pc, #20]	; (800b214 <HAL_SPDIFRX_MspInit+0x44>)
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b202:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800b204:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b206:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800b20a:	f004 fe75 	bl	800fef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800b20e:	b006      	add	sp, #24
 800b210:	bd70      	pop	{r4, r5, r6, pc}
 800b212:	bf00      	nop
 800b214:	40020c00 	.word	0x40020c00

0800b218 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 800b218:	6802      	ldr	r2, [r0, #0]
 800b21a:	4b15      	ldr	r3, [pc, #84]	; (800b270 <HAL_SPI_MspInit+0x58>)
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d000      	beq.n	800b222 <HAL_SPI_MspInit+0xa>
 800b220:	4770      	bx	lr
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b222:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800b226:	4813      	ldr	r0, [pc, #76]	; (800b274 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b22a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
{
 800b22e:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b230:	641a      	str	r2, [r3, #64]	; 0x40
{
 800b232:	b086      	sub	sp, #24
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b236:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800b238:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b23a:	2605      	movs	r6, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b23c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800b240:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800b242:	9501      	str	r5, [sp, #4]
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b248:	e9cd 5402 	strd	r5, r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b24c:	e9cd 4604 	strd	r4, r6, [sp, #16]
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800b250:	f004 fe52 	bl	800fef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800b254:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b258:	a901      	add	r1, sp, #4
 800b25a:	4807      	ldr	r0, [pc, #28]	; (800b278 <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800b25c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b25e:	e9cd 5402 	strd	r5, r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b262:	e9cd 4604 	strd	r4, r6, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b266:	f004 fe47 	bl	800fef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800b26a:	b006      	add	sp, #24
 800b26c:	bd70      	pop	{r4, r5, r6, pc}
 800b26e:	bf00      	nop
 800b270:	40003800 	.word	0x40003800
 800b274:	40022000 	.word	0x40022000
 800b278:	40020400 	.word	0x40020400

0800b27c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 800b27c:	6803      	ldr	r3, [r0, #0]
{
 800b27e:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 800b280:	4a2d      	ldr	r2, [pc, #180]	; (800b338 <HAL_TIM_Base_MspInit+0xbc>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d010      	beq.n	800b2a8 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800b286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b28a:	d030      	beq.n	800b2ee <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800b28c:	4a2b      	ldr	r2, [pc, #172]	; (800b33c <HAL_TIM_Base_MspInit+0xc0>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d016      	beq.n	800b2c0 <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 800b292:	4a2b      	ldr	r2, [pc, #172]	; (800b340 <HAL_TIM_Base_MspInit+0xc4>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d037      	beq.n	800b308 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 800b298:	4a2a      	ldr	r2, [pc, #168]	; (800b344 <HAL_TIM_Base_MspInit+0xc8>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d040      	beq.n	800b320 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 800b29e:	4a2a      	ldr	r2, [pc, #168]	; (800b348 <HAL_TIM_Base_MspInit+0xcc>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d019      	beq.n	800b2d8 <HAL_TIM_Base_MspInit+0x5c>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800b2a4:	b006      	add	sp, #24
 800b2a6:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b2a8:	4b28      	ldr	r3, [pc, #160]	; (800b34c <HAL_TIM_Base_MspInit+0xd0>)
 800b2aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2ac:	f042 0201 	orr.w	r2, r2, #1
 800b2b0:	645a      	str	r2, [r3, #68]	; 0x44
 800b2b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2b4:	f003 0301 	and.w	r3, r3, #1
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	9b00      	ldr	r3, [sp, #0]
}
 800b2bc:	b006      	add	sp, #24
 800b2be:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b2c0:	4b22      	ldr	r3, [pc, #136]	; (800b34c <HAL_TIM_Base_MspInit+0xd0>)
 800b2c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2c4:	f042 0202 	orr.w	r2, r2, #2
 800b2c8:	641a      	str	r2, [r3, #64]	; 0x40
 800b2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2cc:	f003 0302 	and.w	r3, r3, #2
 800b2d0:	9302      	str	r3, [sp, #8]
 800b2d2:	9b02      	ldr	r3, [sp, #8]
}
 800b2d4:	b006      	add	sp, #24
 800b2d6:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_ENABLE();
 800b2d8:	4b1c      	ldr	r3, [pc, #112]	; (800b34c <HAL_TIM_Base_MspInit+0xd0>)
 800b2da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2dc:	f042 0202 	orr.w	r2, r2, #2
 800b2e0:	645a      	str	r2, [r3, #68]	; 0x44
 800b2e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2e4:	f003 0302 	and.w	r3, r3, #2
 800b2e8:	9305      	str	r3, [sp, #20]
 800b2ea:	9b05      	ldr	r3, [sp, #20]
}
 800b2ec:	e7da      	b.n	800b2a4 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b2ee:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800b2f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2f4:	f042 0201 	orr.w	r2, r2, #1
 800b2f8:	641a      	str	r2, [r3, #64]	; 0x40
 800b2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fc:	f003 0301 	and.w	r3, r3, #1
 800b300:	9301      	str	r3, [sp, #4]
 800b302:	9b01      	ldr	r3, [sp, #4]
}
 800b304:	b006      	add	sp, #24
 800b306:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 800b308:	4b10      	ldr	r3, [pc, #64]	; (800b34c <HAL_TIM_Base_MspInit+0xd0>)
 800b30a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b30c:	f042 0208 	orr.w	r2, r2, #8
 800b310:	641a      	str	r2, [r3, #64]	; 0x40
 800b312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b314:	f003 0308 	and.w	r3, r3, #8
 800b318:	9303      	str	r3, [sp, #12]
 800b31a:	9b03      	ldr	r3, [sp, #12]
}
 800b31c:	b006      	add	sp, #24
 800b31e:	4770      	bx	lr
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b320:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <HAL_TIM_Base_MspInit+0xd0>)
 800b322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b324:	f042 0220 	orr.w	r2, r2, #32
 800b328:	641a      	str	r2, [r3, #64]	; 0x40
 800b32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32c:	f003 0320 	and.w	r3, r3, #32
 800b330:	9304      	str	r3, [sp, #16]
 800b332:	9b04      	ldr	r3, [sp, #16]
 800b334:	e7b6      	b.n	800b2a4 <HAL_TIM_Base_MspInit+0x28>
 800b336:	bf00      	nop
 800b338:	40010000 	.word	0x40010000
 800b33c:	40000400 	.word	0x40000400
 800b340:	40000c00 	.word	0x40000c00
 800b344:	40001400 	.word	0x40001400
 800b348:	40010400 	.word	0x40010400
 800b34c:	40023800 	.word	0x40023800

0800b350 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM12)
 800b350:	6802      	ldr	r2, [r0, #0]
 800b352:	4b09      	ldr	r3, [pc, #36]	; (800b378 <HAL_TIM_PWM_MspInit+0x28>)
 800b354:	429a      	cmp	r2, r3
 800b356:	d000      	beq.n	800b35a <HAL_TIM_PWM_MspInit+0xa>
 800b358:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800b35a:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
{
 800b35e:	b082      	sub	sp, #8
    __HAL_RCC_TIM12_CLK_ENABLE();
 800b360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b366:	641a      	str	r2, [r3, #64]	; 0x40
 800b368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b36e:	9301      	str	r3, [sp, #4]
 800b370:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800b372:	b002      	add	sp, #8
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	40001800 	.word	0x40001800

0800b37c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 800b37c:	6803      	ldr	r3, [r0, #0]
 800b37e:	4a20      	ldr	r2, [pc, #128]	; (800b400 <HAL_TIM_MspPostInit+0x84>)
 800b380:	4293      	cmp	r3, r2
{
 800b382:	b530      	push	{r4, r5, lr}
 800b384:	b087      	sub	sp, #28
  if(htim->Instance==TIM1)
 800b386:	d01c      	beq.n	800b3c2 <HAL_TIM_MspPostInit+0x46>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 800b388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b38c:	d021      	beq.n	800b3d2 <HAL_TIM_MspPostInit+0x56>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 800b38e:	4a1d      	ldr	r2, [pc, #116]	; (800b404 <HAL_TIM_MspPostInit+0x88>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d021      	beq.n	800b3d8 <HAL_TIM_MspPostInit+0x5c>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 800b394:	4a1c      	ldr	r2, [pc, #112]	; (800b408 <HAL_TIM_MspPostInit+0x8c>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d02c      	beq.n	800b3f4 <HAL_TIM_MspPostInit+0x78>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(htim->Instance==TIM12)
 800b39a:	4a1c      	ldr	r2, [pc, #112]	; (800b40c <HAL_TIM_MspPostInit+0x90>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d001      	beq.n	800b3a4 <HAL_TIM_MspPostInit+0x28>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800b3a0:	b007      	add	sp, #28
 800b3a2:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800b3a4:	2540      	movs	r5, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3a6:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3a8:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800b3aa:	2209      	movs	r2, #9
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800b3ac:	a901      	add	r1, sp, #4
 800b3ae:	4818      	ldr	r0, [pc, #96]	; (800b410 <HAL_TIM_MspPostInit+0x94>)
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800b3b0:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3b2:	e9cd 5401 	strd	r5, r4, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3b6:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800b3ba:	f004 fd9d 	bl	800fef8 <HAL_GPIO_Init>
}
 800b3be:	b007      	add	sp, #28
 800b3c0:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800b3c2:	f44f 7580 	mov.w	r5, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3c6:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3c8:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b3ca:	2201      	movs	r2, #1
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800b3cc:	a901      	add	r1, sp, #4
 800b3ce:	4811      	ldr	r0, [pc, #68]	; (800b414 <HAL_TIM_MspPostInit+0x98>)
 800b3d0:	e7ee      	b.n	800b3b0 <HAL_TIM_MspPostInit+0x34>
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800b3d2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 800b3d6:	e7f6      	b.n	800b3c6 <HAL_TIM_MspPostInit+0x4a>
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800b3d8:	2410      	movs	r4, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3da:	2202      	movs	r2, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3dc:	2300      	movs	r3, #0
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800b3de:	a901      	add	r1, sp, #4
 800b3e0:	480d      	ldr	r0, [pc, #52]	; (800b418 <HAL_TIM_MspPostInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800b3e2:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3e4:	e9cd 4201 	strd	r4, r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3e8:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800b3ec:	f004 fd84 	bl	800fef8 <HAL_GPIO_Init>
}
 800b3f0:	b007      	add	sp, #28
 800b3f2:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800b3f4:	2401      	movs	r4, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3f6:	2202      	movs	r2, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3f8:	2300      	movs	r3, #0
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800b3fa:	a901      	add	r1, sp, #4
 800b3fc:	4807      	ldr	r0, [pc, #28]	; (800b41c <HAL_TIM_MspPostInit+0xa0>)
 800b3fe:	e7f0      	b.n	800b3e2 <HAL_TIM_MspPostInit+0x66>
 800b400:	40010000 	.word	0x40010000
 800b404:	40000400 	.word	0x40000400
 800b408:	40000c00 	.word	0x40000c00
 800b40c:	40001800 	.word	0x40001800
 800b410:	40021c00 	.word	0x40021c00
 800b414:	40020000 	.word	0x40020000
 800b418:	40020400 	.word	0x40020400
 800b41c:	40022000 	.word	0x40022000

0800b420 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800b420:	6803      	ldr	r3, [r0, #0]
 800b422:	4a24      	ldr	r2, [pc, #144]	; (800b4b4 <HAL_UART_MspInit+0x94>)
 800b424:	4293      	cmp	r3, r2
{
 800b426:	b570      	push	{r4, r5, r6, lr}
 800b428:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 800b42a:	d01e      	beq.n	800b46a <HAL_UART_MspInit+0x4a>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 800b42c:	4a22      	ldr	r2, [pc, #136]	; (800b4b8 <HAL_UART_MspInit+0x98>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d001      	beq.n	800b436 <HAL_UART_MspInit+0x16>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800b432:	b008      	add	sp, #32
 800b434:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 800b436:	4b21      	ldr	r3, [pc, #132]	; (800b4bc <HAL_UART_MspInit+0x9c>)
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800b438:	21c0      	movs	r1, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b43a:	2002      	movs	r0, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b43c:	2600      	movs	r6, #0
    __HAL_RCC_USART6_CLK_ENABLE();
 800b43e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b440:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800b442:	2408      	movs	r4, #8
    __HAL_RCC_USART6_CLK_ENABLE();
 800b444:	f042 0220 	orr.w	r2, r2, #32
 800b448:	645a      	str	r2, [r3, #68]	; 0x44
 800b44a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800b44c:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b44e:	a903      	add	r1, sp, #12
    __HAL_RCC_USART6_CLK_ENABLE();
 800b450:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b454:	9004      	str	r0, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b456:	481a      	ldr	r0, [pc, #104]	; (800b4c0 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800b458:	9302      	str	r3, [sp, #8]
 800b45a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800b45c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b45e:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b462:	f004 fd49 	bl	800fef8 <HAL_GPIO_Init>
}
 800b466:	b008      	add	sp, #32
 800b468:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800b46a:	4b14      	ldr	r3, [pc, #80]	; (800b4bc <HAL_UART_MspInit+0x9c>)
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800b46c:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b46e:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b470:	2602      	movs	r6, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 800b472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b474:	2507      	movs	r5, #7
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800b476:	a903      	add	r1, sp, #12
    __HAL_RCC_USART1_CLK_ENABLE();
 800b478:	f042 0210 	orr.w	r2, r2, #16
 800b47c:	645a      	str	r2, [r3, #68]	; 0x44
 800b47e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800b480:	9003      	str	r0, [sp, #12]
    __HAL_RCC_USART1_CLK_ENABLE();
 800b482:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800b486:	480f      	ldr	r0, [pc, #60]	; (800b4c4 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b488:	9604      	str	r6, [sp, #16]
    __HAL_RCC_USART1_CLK_ENABLE();
 800b48a:	9301      	str	r3, [sp, #4]
 800b48c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b48e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b490:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800b494:	f004 fd30 	bl	800fef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800b498:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800b49c:	a903      	add	r1, sp, #12
 800b49e:	480a      	ldr	r0, [pc, #40]	; (800b4c8 <HAL_UART_MspInit+0xa8>)
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800b4a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4a2:	e9cd 6404 	strd	r6, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b4a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800b4aa:	f004 fd25 	bl	800fef8 <HAL_GPIO_Init>
}
 800b4ae:	b008      	add	sp, #32
 800b4b0:	bd70      	pop	{r4, r5, r6, pc}
 800b4b2:	bf00      	nop
 800b4b4:	40011000 	.word	0x40011000
 800b4b8:	40011400 	.word	0x40011400
 800b4bc:	40023800 	.word	0x40023800
 800b4c0:	40020800 	.word	0x40020800
 800b4c4:	40020400 	.word	0x40020400
 800b4c8:	40020000 	.word	0x40020000

0800b4cc <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800b4cc:	4b2b      	ldr	r3, [pc, #172]	; (800b57c <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800b4ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 800b4d0:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800b4d2:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 800b4d4:	b10c      	cbz	r4, 800b4da <HAL_SDRAM_MspInit+0xe>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800b4d6:	b007      	add	sp, #28
 800b4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_RCC_FMC_CLK_ENABLE();
 800b4da:	4a29      	ldr	r2, [pc, #164]	; (800b580 <HAL_SDRAM_MspInit+0xb4>)
  FMC_Initialized = 1;
 800b4dc:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800b4de:	f64f 7083 	movw	r0, #65411	; 0xff83
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4e2:	2702      	movs	r7, #2
  FMC_Initialized = 1;
 800b4e4:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4e6:	2603      	movs	r6, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 800b4e8:	6b93      	ldr	r3, [r2, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b4ea:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 800b4ec:	430b      	orrs	r3, r1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b4ee:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 800b4f0:	6393      	str	r3, [r2, #56]	; 0x38
 800b4f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800b4f4:	9001      	str	r0, [sp, #4]
  __HAL_RCC_FMC_CLK_ENABLE();
 800b4f6:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b4fa:	4822      	ldr	r0, [pc, #136]	; (800b584 <HAL_SDRAM_MspInit+0xb8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4fc:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b502:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b504:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b508:	f004 fcf6 	bl	800fef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800b50c:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b510:	a901      	add	r1, sp, #4
 800b512:	481d      	ldr	r0, [pc, #116]	; (800b588 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800b514:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b516:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b518:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b51a:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b51e:	f004 fceb 	bl	800fef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800b522:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b526:	a901      	add	r1, sp, #4
 800b528:	4818      	ldr	r0, [pc, #96]	; (800b58c <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800b52a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b52c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b52e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b530:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b534:	f004 fce0 	bl	800fef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800b538:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b53c:	a901      	add	r1, sp, #4
 800b53e:	4814      	ldr	r0, [pc, #80]	; (800b590 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800b540:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b542:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b544:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b546:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b54a:	f004 fcd5 	bl	800fef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800b54e:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b550:	a901      	add	r1, sp, #4
 800b552:	4810      	ldr	r0, [pc, #64]	; (800b594 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800b554:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b556:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b558:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b55a:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b55e:	f004 fccb 	bl	800fef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800b562:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800b564:	a901      	add	r1, sp, #4
 800b566:	480c      	ldr	r0, [pc, #48]	; (800b598 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b568:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b56a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800b56c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b56e:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800b572:	f004 fcc1 	bl	800fef8 <HAL_GPIO_Init>
}
 800b576:	b007      	add	sp, #28
 800b578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b57a:	bf00      	nop
 800b57c:	20005eac 	.word	0x20005eac
 800b580:	40023800 	.word	0x40023800
 800b584:	40021000 	.word	0x40021000
 800b588:	40021800 	.word	0x40021800
 800b58c:	40020c00 	.word	0x40020c00
 800b590:	40021400 	.word	0x40021400
 800b594:	40021c00 	.word	0x40021c00
 800b598:	40020800 	.word	0x40020800

0800b59c <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800b59c:	4a24      	ldr	r2, [pc, #144]	; (800b630 <HAL_SAI_MspInit+0x94>)
 800b59e:	6803      	ldr	r3, [r0, #0]
 800b5a0:	4293      	cmp	r3, r2
{
 800b5a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5a4:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI2_Block_A)
 800b5a6:	d023      	beq.n	800b5f0 <HAL_SAI_MspInit+0x54>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);

    }
    if(hsai->Instance==SAI2_Block_B)
 800b5a8:	4a22      	ldr	r2, [pc, #136]	; (800b634 <HAL_SAI_MspInit+0x98>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d001      	beq.n	800b5b2 <HAL_SAI_MspInit+0x16>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);

    }
}
 800b5ae:	b009      	add	sp, #36	; 0x24
 800b5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (SAI2_client == 0)
 800b5b2:	4b21      	ldr	r3, [pc, #132]	; (800b638 <HAL_SAI_MspInit+0x9c>)
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	b94a      	cbnz	r2, 800b5cc <HAL_SAI_MspInit+0x30>
       __HAL_RCC_SAI2_CLK_ENABLE();
 800b5b8:	4920      	ldr	r1, [pc, #128]	; (800b63c <HAL_SAI_MspInit+0xa0>)
 800b5ba:	6c48      	ldr	r0, [r1, #68]	; 0x44
 800b5bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800b5c0:	6448      	str	r0, [r1, #68]	; 0x44
 800b5c2:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800b5c4:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800b5c8:	9102      	str	r1, [sp, #8]
 800b5ca:	9902      	ldr	r1, [sp, #8]
    SAI2_client ++;
 800b5cc:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800b5ce:	f44f 6780 	mov.w	r7, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5d2:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5d4:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b5d6:	250a      	movs	r5, #10
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800b5d8:	a903      	add	r1, sp, #12
 800b5da:	4819      	ldr	r0, [pc, #100]	; (800b640 <HAL_SAI_MspInit+0xa4>)
    SAI2_client ++;
 800b5dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b5de:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5e0:	e9cd 7603 	strd	r7, r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5e4:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800b5e8:	f004 fc86 	bl	800fef8 <HAL_GPIO_Init>
}
 800b5ec:	b009      	add	sp, #36	; 0x24
 800b5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI2_client == 0)
 800b5f0:	4b11      	ldr	r3, [pc, #68]	; (800b638 <HAL_SAI_MspInit+0x9c>)
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	b94a      	cbnz	r2, 800b60c <HAL_SAI_MspInit+0x70>
       __HAL_RCC_SAI2_CLK_ENABLE();
 800b5f8:	4910      	ldr	r1, [pc, #64]	; (800b63c <HAL_SAI_MspInit+0xa0>)
 800b5fa:	6c48      	ldr	r0, [r1, #68]	; 0x44
 800b5fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800b600:	6448      	str	r0, [r1, #68]	; 0x44
 800b602:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800b604:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800b608:	9101      	str	r1, [sp, #4]
 800b60a:	9901      	ldr	r1, [sp, #4]
    SAI2_client ++;
 800b60c:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800b60e:	20f0      	movs	r0, #240	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b610:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b612:	2602      	movs	r6, #2
    SAI2_client ++;
 800b614:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b616:	230a      	movs	r3, #10
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800b618:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b61a:	a903      	add	r1, sp, #12
 800b61c:	4809      	ldr	r0, [pc, #36]	; (800b644 <HAL_SAI_MspInit+0xa8>)
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b61e:	e9cd 5306 	strd	r5, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b622:	e9cd 6504 	strd	r6, r5, [sp, #16]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b626:	f004 fc67 	bl	800fef8 <HAL_GPIO_Init>
 800b62a:	6823      	ldr	r3, [r4, #0]
 800b62c:	e7bc      	b.n	800b5a8 <HAL_SAI_MspInit+0xc>
 800b62e:	bf00      	nop
 800b630:	40015c04 	.word	0x40015c04
 800b634:	40015c24 	.word	0x40015c24
 800b638:	20005eb0 	.word	0x20005eb0
 800b63c:	40023800 	.word	0x40023800
 800b640:	40021800 	.word	0x40021800
 800b644:	40022000 	.word	0x40022000

0800b648 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{

/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800b648:	4a15      	ldr	r2, [pc, #84]	; (800b6a0 <HAL_SAI_MspDeInit+0x58>)
 800b64a:	6803      	ldr	r3, [r0, #0]
 800b64c:	4293      	cmp	r3, r2
{
 800b64e:	b510      	push	{r4, lr}
    if(hsai->Instance==SAI2_Block_A)
 800b650:	d014      	beq.n	800b67c <HAL_SAI_MspDeInit+0x34>
    PI6     ------> SAI2_SD_A 
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);

    }
    if(hsai->Instance==SAI2_Block_B)
 800b652:	4a14      	ldr	r2, [pc, #80]	; (800b6a4 <HAL_SAI_MspDeInit+0x5c>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d000      	beq.n	800b65a <HAL_SAI_MspDeInit+0x12>
    PG10     ------> SAI2_SD_B 
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);

    }
}
 800b658:	bd10      	pop	{r4, pc}
    SAI2_client --;
 800b65a:	4a13      	ldr	r2, [pc, #76]	; (800b6a8 <HAL_SAI_MspDeInit+0x60>)
 800b65c:	6813      	ldr	r3, [r2, #0]
 800b65e:	3b01      	subs	r3, #1
 800b660:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 800b662:	b923      	cbnz	r3, 800b66e <HAL_SAI_MspDeInit+0x26>
      __HAL_RCC_SAI2_CLK_DISABLE();
 800b664:	4a11      	ldr	r2, [pc, #68]	; (800b6ac <HAL_SAI_MspDeInit+0x64>)
 800b666:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800b668:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b66c:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 800b66e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b672:	480f      	ldr	r0, [pc, #60]	; (800b6b0 <HAL_SAI_MspDeInit+0x68>)
}
 800b674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 800b678:	f004 bd5c 	b.w	8010134 <HAL_GPIO_DeInit>
    SAI2_client --;
 800b67c:	4a0a      	ldr	r2, [pc, #40]	; (800b6a8 <HAL_SAI_MspDeInit+0x60>)
 800b67e:	6813      	ldr	r3, [r2, #0]
 800b680:	3b01      	subs	r3, #1
 800b682:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 800b684:	b923      	cbnz	r3, 800b690 <HAL_SAI_MspDeInit+0x48>
       __HAL_RCC_SAI2_CLK_DISABLE();
 800b686:	4a09      	ldr	r2, [pc, #36]	; (800b6ac <HAL_SAI_MspDeInit+0x64>)
 800b688:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800b68a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b68e:	6453      	str	r3, [r2, #68]	; 0x44
 800b690:	4604      	mov	r4, r0
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 800b692:	21f0      	movs	r1, #240	; 0xf0
 800b694:	4807      	ldr	r0, [pc, #28]	; (800b6b4 <HAL_SAI_MspDeInit+0x6c>)
 800b696:	f004 fd4d 	bl	8010134 <HAL_GPIO_DeInit>
 800b69a:	6823      	ldr	r3, [r4, #0]
 800b69c:	e7d9      	b.n	800b652 <HAL_SAI_MspDeInit+0xa>
 800b69e:	bf00      	nop
 800b6a0:	40015c04 	.word	0x40015c04
 800b6a4:	40015c24 	.word	0x40015c24
 800b6a8:	20005eb0 	.word	0x20005eb0
 800b6ac:	40023800 	.word	0x40023800
 800b6b0:	40021800 	.word	0x40021800
 800b6b4:	40022000 	.word	0x40022000

0800b6b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b6b8:	b570      	push	{r4, r5, r6, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800b6ba:	4601      	mov	r1, r0
{
 800b6bc:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800b6be:	2200      	movs	r2, #0
 800b6c0:	2036      	movs	r0, #54	; 0x36
 800b6c2:	f003 feab 	bl	800f41c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800b6c6:	2036      	movs	r0, #54	; 0x36
 800b6c8:	f003 fede 	bl	800f488 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b6cc:	4b15      	ldr	r3, [pc, #84]	; (800b724 <HAL_InitTick+0x6c>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b6ce:	a901      	add	r1, sp, #4
 800b6d0:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b6d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b6d4:	4e14      	ldr	r6, [pc, #80]	; (800b728 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b6d6:	f042 0210 	orr.w	r2, r2, #16
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b6da:	4c14      	ldr	r4, [pc, #80]	; (800b72c <HAL_InitTick+0x74>)
 800b6dc:	4d14      	ldr	r5, [pc, #80]	; (800b730 <HAL_InitTick+0x78>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b6de:	641a      	str	r2, [r3, #64]	; 0x40
 800b6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e2:	f003 0310 	and.w	r3, r3, #16
 800b6e6:	9302      	str	r3, [sp, #8]
 800b6e8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b6ea:	f006 fd27 	bl	801213c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b6ee:	f006 fd05 	bl	80120fc <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800b6f2:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b6f4:	0043      	lsls	r3, r0, #1
  htim6.Init.Period = (1000000 / 1000) - 1;
 800b6f6:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim6.Instance = TIM6;
 800b6fa:	6025      	str	r5, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b6fc:	fba6 0303 	umull	r0, r3, r6, r3
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b700:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b702:	0c9b      	lsrs	r3, r3, #18
 800b704:	3b01      	subs	r3, #1
  htim6.Init.ClockDivision = 0;
 800b706:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b70a:	e9c4 3201 	strd	r3, r2, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b70e:	f008 fc05 	bl	8013f1c <HAL_TIM_Base_Init>
 800b712:	b110      	cbz	r0, 800b71a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800b714:	2001      	movs	r0, #1
}
 800b716:	b008      	add	sp, #32
 800b718:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 800b71a:	4620      	mov	r0, r4
 800b71c:	f008 fc82 	bl	8014024 <HAL_TIM_Base_Start_IT>
}
 800b720:	b008      	add	sp, #32
 800b722:	bd70      	pop	{r4, r5, r6, pc}
 800b724:	40023800 	.word	0x40023800
 800b728:	431bde83 	.word	0x431bde83
 800b72c:	20012a44 	.word	0x20012a44
 800b730:	40001000 	.word	0x40001000

0800b734 <DMA2_Stream7_IRQHandler>:
  * @param None
  * @retval None
  */
void DMA2_Stream7_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800b734:	4b01      	ldr	r3, [pc, #4]	; (800b73c <DMA2_Stream7_IRQHandler+0x8>)
 800b736:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800b738:	f004 b908 	b.w	800f94c <HAL_DMA_IRQHandler>
 800b73c:	20005f14 	.word	0x20005f14

0800b740 <DMA2_Stream4_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream4_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800b740:	4b01      	ldr	r3, [pc, #4]	; (800b748 <DMA2_Stream4_IRQHandler+0x8>)
 800b742:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800b744:	f004 b902 	b.w	800f94c <HAL_DMA_IRQHandler>
 800b748:	20005f98 	.word	0x20005f98

0800b74c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop

0800b750 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800b750:	e7fe      	b.n	800b750 <HardFault_Handler>
 800b752:	bf00      	nop

0800b754 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800b754:	e7fe      	b.n	800b754 <MemManage_Handler>
 800b756:	bf00      	nop

0800b758 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800b758:	e7fe      	b.n	800b758 <BusFault_Handler>
 800b75a:	bf00      	nop

0800b75c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800b75c:	e7fe      	b.n	800b75c <UsageFault_Handler>
 800b75e:	bf00      	nop

0800b760 <DebugMon_Handler>:
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop

0800b764 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800b764:	f011 bef4 	b.w	801d550 <osSystickHandler>

0800b768 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b768:	4801      	ldr	r0, [pc, #4]	; (800b770 <TIM6_DAC_IRQHandler+0x8>)
 800b76a:	f008 bf33 	b.w	80145d4 <HAL_TIM_IRQHandler>
 800b76e:	bf00      	nop
 800b770:	20012a44 	.word	0x20012a44

0800b774 <ETH_IRQHandler>:
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop

0800b778 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800b778:	4801      	ldr	r0, [pc, #4]	; (800b780 <OTG_FS_IRQHandler+0x8>)
 800b77a:	f004 bea7 	b.w	80104cc <HAL_HCD_IRQHandler>
 800b77e:	bf00      	nop
 800b780:	20012e58 	.word	0x20012e58

0800b784 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800b784:	4801      	ldr	r0, [pc, #4]	; (800b78c <LTDC_IRQHandler+0x8>)
 800b786:	f005 bf0b 	b.w	80115a0 <HAL_LTDC_IRQHandler>
 800b78a:	bf00      	nop
 800b78c:	2000f060 	.word	0x2000f060

0800b790 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800b790:	4801      	ldr	r0, [pc, #4]	; (800b798 <DMA2D_IRQHandler+0x8>)
 800b792:	f004 bad1 	b.w	800fd38 <HAL_DMA2D_IRQHandler>
 800b796:	bf00      	nop
 800b798:	2000f300 	.word	0x2000f300

0800b79c <xmp3fixpt_MidSideProc>:
	
	/* L = (M+S)/sqrt(2), R = (M-S)/sqrt(2) 
	 * NOTE: 1/sqrt(2) done in DequantChannel() - see comments there
	 */
	mOutL = mOutR = 0;
	for(i = 0; i < nSamps; i++) {
 800b79c:	2900      	cmp	r1, #0
{
 800b79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mOutL = mOutR = 0;
 800b7a2:	f04f 0700 	mov.w	r7, #0
	for(i = 0; i < nSamps; i++) {
 800b7a6:	dd2a      	ble.n	800b7fe <xmp3fixpt_MidSideProc+0x62>
 800b7a8:	1f06      	subs	r6, r0, #4
	mOutL = mOutR = 0;
 800b7aa:	46bc      	mov	ip, r7
 800b7ac:	f600 00fc 	addw	r0, r0, #2300	; 0x8fc
	for(i = 0; i < nSamps; i++) {
 800b7b0:	463d      	mov	r5, r7
		xl = x[0][i];
		xr = x[1][i];
 800b7b2:	f850 ef04 	ldr.w	lr, [r0, #4]!
	for(i = 0; i < nSamps; i++) {
 800b7b6:	3501      	adds	r5, #1
		xl = x[0][i];
 800b7b8:	f856 3f04 	ldr.w	r3, [r6, #4]!
	for(i = 0; i < nSamps; i++) {
 800b7bc:	42a9      	cmp	r1, r5
		x[0][i] = xl + xr;
 800b7be:	eb03 040e 	add.w	r4, r3, lr
		x[1][i] = xl - xr;
 800b7c2:	eba3 030e 	sub.w	r3, r3, lr
	sign = x >> (sizeof(int) * 8 - 1);
 800b7c6:	ea4f 78e4 	mov.w	r8, r4, asr #31
		x[0][i] = xl + xr;
 800b7ca:	6034      	str	r4, [r6, #0]
 800b7cc:	ea4f 7ee3 	mov.w	lr, r3, asr #31
		x[1][i] = xl - xr;
 800b7d0:	6003      	str	r3, [r0, #0]
	x ^= sign;
 800b7d2:	ea84 0408 	eor.w	r4, r4, r8
 800b7d6:	ea83 030e 	eor.w	r3, r3, lr
	x -= sign;
 800b7da:	eba4 0408 	sub.w	r4, r4, r8
 800b7de:	eba3 030e 	sub.w	r3, r3, lr
		mOutL |= FASTABS(x[0][i]);
 800b7e2:	ea4c 0c04 	orr.w	ip, ip, r4
		mOutR |= FASTABS(x[1][i]);
 800b7e6:	ea47 0703 	orr.w	r7, r7, r3
	for(i = 0; i < nSamps; i++) {
 800b7ea:	d1e2      	bne.n	800b7b2 <xmp3fixpt_MidSideProc+0x16>
	}
	mOut[0] |= mOutL;
	mOut[1] |= mOutR;
 800b7ec:	e9d2 1300 	ldrd	r1, r3, [r2]
	mOut[0] |= mOutL;
 800b7f0:	ea41 010c 	orr.w	r1, r1, ip
	mOut[1] |= mOutR;
 800b7f4:	431f      	orrs	r7, r3
 800b7f6:	e9c2 1700 	strd	r1, r7, [r2]
}
 800b7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mOutL = mOutR = 0;
 800b7fe:	46bc      	mov	ip, r7
 800b800:	e7f4      	b.n	800b7ec <xmp3fixpt_MidSideProc+0x50>
 800b802:	bf00      	nop

0800b804 <xmp3fixpt_IntensityProcMPEG1>:
 * TODO:        combine MPEG1/2 into one function (maybe)
 *              make sure all the mixed-block and IIP logic is right
 **************************************************************************************/
void IntensityProcMPEG1(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, int midSideFlag, int mixFlag, int mOut[2])
{
 800b804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b808:	b093      	sub	sp, #76	; 0x4c
 800b80a:	468a      	mov	sl, r1
 800b80c:	4611      	mov	r1, r2
 800b80e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b810:	920d      	str	r2, [sp, #52]	; 0x34
	 *  short block section (i.e. on or after sample 36 = sfBand->l[8] = 3*sfBand->s[3]
	 * is this a safe assumption?
	 * TODO - intensity + mixed not quite right (diff = 11 on he_mode)
	 *  figure out correct implementation (spec ambiguous about when to do short block reorder)
	 */
	if (cbi[1].cbType == 0) {
 800b812:	69a2      	ldr	r2, [r4, #24]
{
 800b814:	900f      	str	r0, [sp, #60]	; 0x3c
 800b816:	9302      	str	r3, [sp, #8]
	if (cbi[1].cbType == 0) {
 800b818:	2a00      	cmp	r2, #0
 800b81a:	f040 8159 	bne.w	800bad0 <xmp3fixpt_IntensityProcMPEG1+0x2cc>
		/* long block */
		cbStartL = cbi[1].cbEndL + 1;
 800b81e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		cbEndL =   cbi[0].cbEndL + 1;
		cbStartS = cbEndS = 0;
		i = fh->sfBand->l[cbStartL];
 800b820:	6b49      	ldr	r1, [r1, #52]	; 0x34
		cbStartL = cbi[1].cbEndL + 1;
 800b822:	3301      	adds	r3, #1
		cbEndL =   cbi[0].cbEndL + 1;
 800b824:	6960      	ldr	r0, [r4, #20]
		cbStartS = cbEndS = 0;
 800b826:	9210      	str	r2, [sp, #64]	; 0x40
		i = fh->sfBand->l[cbStartL];
 800b828:	f931 8013 	ldrsh.w	r8, [r1, r3, lsl #1]
		cbEndL =   cbi[0].cbEndL + 1;
 800b82c:	1c41      	adds	r1, r0, #1
 800b82e:	ebaa 0a08 	sub.w	sl, sl, r8
 800b832:	9100      	str	r1, [sp, #0]
		cbStartL = cbEndL = 0;
		i = 3 * fh->sfBand->s[cbStartS];
	}

	sampsLeft = nSamps - i;		/* process to length of left */
	isfTab = (int *)ISFMpeg1[midSideFlag];
 800b834:	991d      	ldr	r1, [sp, #116]	; 0x74
 800b836:	1e5c      	subs	r4, r3, #1
	/* long blocks */
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
		isf = sfis->l[cb];
		if (isf == 7) {
			fl = ISFIIP[midSideFlag][0];
			fr = ISFIIP[midSideFlag][1];
 800b838:	4eb3      	ldr	r6, [pc, #716]	; (800bb08 <xmp3fixpt_IntensityProcMPEG1+0x304>)
	mOutL = mOutR = 0;
 800b83a:	f04f 0900 	mov.w	r9, #0
	isfTab = (int *)ISFMpeg1[midSideFlag];
 800b83e:	00cd      	lsls	r5, r1, #3
 800b840:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b842:	49b2      	ldr	r1, [pc, #712]	; (800bb0c <xmp3fixpt_IntensityProcMPEG1+0x308>)
 800b844:	1a28      	subs	r0, r5, r0
 800b846:	9503      	str	r5, [sp, #12]
 800b848:	9204      	str	r2, [sp, #16]
			fr = ISFIIP[midSideFlag][1];
 800b84a:	1975      	adds	r5, r6, r5
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 800b84c:	9a00      	ldr	r2, [sp, #0]
	isfTab = (int *)ISFMpeg1[midSideFlag];
 800b84e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
			fr = ISFIIP[midSideFlag][1];
 800b852:	9501      	str	r5, [sp, #4]
	mOutL = mOutR = 0;
 800b854:	464e      	mov	r6, r9
 800b856:	9d02      	ldr	r5, [sp, #8]
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 800b858:	4293      	cmp	r3, r2
	isfTab = (int *)ISFMpeg1[midSideFlag];
 800b85a:	910c      	str	r1, [sp, #48]	; 0x30
 800b85c:	eb05 0b04 	add.w	fp, r5, r4
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 800b860:	da49      	bge.n	800b8f6 <xmp3fixpt_IntensityProcMPEG1+0xf2>
 800b862:	f1ba 0f00 	cmp.w	sl, #0
 800b866:	dd46      	ble.n	800b8f6 <xmp3fixpt_IntensityProcMPEG1+0xf2>
		isf = sfis->l[cb];
 800b868:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
		if (isf == 7) {
 800b86c:	2a07      	cmp	r2, #7
 800b86e:	f000 810d 	beq.w	800ba8c <xmp3fixpt_IntensityProcMPEG1+0x288>
		} else {
			fl = isfTab[isf];	
 800b872:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b874:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
			fr = isfTab[6] - isfTab[isf];
 800b878:	698c      	ldr	r4, [r1, #24]
 800b87a:	1b64      	subs	r4, r4, r5
 800b87c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		}

		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800b87e:	f103 0e01 	add.w	lr, r3, #1
 800b882:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b884:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800b888:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b88c:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 800b890:	1aff      	subs	r7, r7, r3
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 800b892:	2f00      	cmp	r7, #0
 800b894:	dd2b      	ble.n	800b8ee <xmp3fixpt_IntensityProcMPEG1+0xea>
 800b896:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b898:	46c4      	mov	ip, r8
 800b89a:	2000      	movs	r0, #0
 800b89c:	eb03 0188 	add.w	r1, r3, r8, lsl #2
 800b8a0:	3904      	subs	r1, #4
 800b8a2:	e002      	b.n	800b8aa <xmp3fixpt_IntensityProcMPEG1+0xa6>
 800b8a4:	f1ba 0f00 	cmp.w	sl, #0
 800b8a8:	dd21      	ble.n	800b8ee <xmp3fixpt_IntensityProcMPEG1+0xea>
			xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr; mOutR |= FASTABS(xr);
 800b8aa:	f851 3f04 	ldr.w	r3, [r1, #4]!
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	fb84 8202 	smull	r8, r2, r4, r2
 800b8b4:	0092      	lsls	r2, r2, #2
	sign = x >> (sizeof(int) * 8 - 1);
 800b8b6:	ea4f 78e2 	mov.w	r8, r2, asr #31
 800b8ba:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
	x ^= sign;
 800b8be:	ea88 0202 	eor.w	r2, r8, r2
	x -= sign;
 800b8c2:	eba2 0208 	sub.w	r2, r2, r8
 800b8c6:	ea49 0902 	orr.w	r9, r9, r2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800b8ca:	fb85 2303 	smull	r2, r3, r5, r3
			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
 800b8ce:	009b      	lsls	r3, r3, #2
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 800b8d0:	3001      	adds	r0, #1
			sampsLeft--;
 800b8d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	sign = x >> (sizeof(int) * 8 - 1);
 800b8d6:	17da      	asrs	r2, r3, #31
			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
 800b8d8:	600b      	str	r3, [r1, #0]
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 800b8da:	4287      	cmp	r7, r0
 800b8dc:	eb00 080c 	add.w	r8, r0, ip
	x ^= sign;
 800b8e0:	ea83 0302 	eor.w	r3, r3, r2
	x -= sign;
 800b8e4:	eba3 0302 	sub.w	r3, r3, r2
			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
 800b8e8:	ea46 0603 	orr.w	r6, r6, r3
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 800b8ec:	dcda      	bgt.n	800b8a4 <xmp3fixpt_IntensityProcMPEG1+0xa0>
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 800b8ee:	4673      	mov	r3, lr
 800b8f0:	9a00      	ldr	r2, [sp, #0]
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	dbb5      	blt.n	800b862 <xmp3fixpt_IntensityProcMPEG1+0x5e>
 800b8f6:	9a04      	ldr	r2, [sp, #16]
 800b8f8:	9902      	ldr	r1, [sp, #8]
 800b8fa:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800b8fe:	9601      	str	r6, [sp, #4]
 800b900:	f8cd 9008 	str.w	r9, [sp, #8]
 800b904:	4419      	add	r1, r3
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
		for (w = 0; w < 3; w++) {
			isf = sfis->s[cb][w];
			if (isf == 7) {
				fls[w] = ISFIIP[midSideFlag][0];
				frs[w] = ISFIIP[midSideFlag][1];
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	f8cd 8000 	str.w	r8, [sp]
 800b90c:	910b      	str	r1, [sp, #44]	; 0x2c
 800b90e:	4619      	mov	r1, r3
 800b910:	4b7d      	ldr	r3, [pc, #500]	; (800bb08 <xmp3fixpt_IntensityProcMPEG1+0x304>)
 800b912:	4419      	add	r1, r3
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 800b914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b916:	429a      	cmp	r2, r3
				frs[w] = ISFIIP[midSideFlag][1];
 800b918:	9111      	str	r1, [sp, #68]	; 0x44
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 800b91a:	f280 80ac 	bge.w	800ba76 <xmp3fixpt_IntensityProcMPEG1+0x272>
 800b91e:	f1ba 0f02 	cmp.w	sl, #2
 800b922:	f340 80a8 	ble.w	800ba76 <xmp3fixpt_IntensityProcMPEG1+0x272>
			isf = sfis->s[cb][w];
 800b926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b928:	7ddb      	ldrb	r3, [r3, #23]
			if (isf == 7) {
 800b92a:	2b07      	cmp	r3, #7
 800b92c:	f000 80c7 	beq.w	800babe <xmp3fixpt_IntensityProcMPEG1+0x2ba>
			} else {
				fls[w] = isfTab[isf];
 800b930:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b932:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
				frs[w] = isfTab[6] - isfTab[isf];
 800b936:	6983      	ldr	r3, [r0, #24]
				fls[w] = isfTab[isf];
 800b938:	9108      	str	r1, [sp, #32]
				frs[w] = isfTab[6] - isfTab[isf];
 800b93a:	1a5b      	subs	r3, r3, r1
 800b93c:	9309      	str	r3, [sp, #36]	; 0x24
			isf = sfis->s[cb][w];
 800b93e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b940:	7e1b      	ldrb	r3, [r3, #24]
			if (isf == 7) {
 800b942:	2b07      	cmp	r3, #7
 800b944:	f000 80b2 	beq.w	800baac <xmp3fixpt_IntensityProcMPEG1+0x2a8>
				fls[w] = isfTab[isf];
 800b948:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b94a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
				frs[w] = isfTab[6] - isfTab[isf];
 800b94e:	6989      	ldr	r1, [r1, #24]
				fls[w] = isfTab[isf];
 800b950:	9307      	str	r3, [sp, #28]
				frs[w] = isfTab[6] - isfTab[isf];
 800b952:	1acb      	subs	r3, r1, r3
 800b954:	930a      	str	r3, [sp, #40]	; 0x28
			isf = sfis->s[cb][w];
 800b956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b958:	7e5b      	ldrb	r3, [r3, #25]
			if (isf == 7) {
 800b95a:	2b07      	cmp	r3, #7
 800b95c:	f000 809d 	beq.w	800ba9a <xmp3fixpt_IntensityProcMPEG1+0x296>
				fls[w] = isfTab[isf];
 800b960:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b962:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
				frs[w] = isfTab[6] - isfTab[isf];
 800b966:	6989      	ldr	r1, [r1, #24]
				fls[w] = isfTab[isf];
 800b968:	9306      	str	r3, [sp, #24]
				frs[w] = isfTab[6] - isfTab[isf];
 800b96a:	1acb      	subs	r3, r1, r3
 800b96c:	9305      	str	r3, [sp, #20]
 800b96e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			}
		}

		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800b970:	1c51      	adds	r1, r2, #1
 800b972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b974:	910e      	str	r1, [sp, #56]	; 0x38
 800b976:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800b97a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b97e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b982:	1ad3      	subs	r3, r2, r3
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 800b984:	2b00      	cmp	r3, #0
		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800b986:	9304      	str	r3, [sp, #16]
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 800b988:	dd6d      	ble.n	800ba66 <xmp3fixpt_IntensityProcMPEG1+0x262>
 800b98a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b98c:	f04f 0900 	mov.w	r9, #0
 800b990:	9a00      	ldr	r2, [sp, #0]
 800b992:	eb03 0882 	add.w	r8, r3, r2, lsl #2
 800b996:	e002      	b.n	800b99e <xmp3fixpt_IntensityProcMPEG1+0x19a>
 800b998:	f1ba 0f02 	cmp.w	sl, #2
 800b99c:	dd63      	ble.n	800ba66 <xmp3fixpt_IntensityProcMPEG1+0x262>
			xr = MULSHIFT32(frs[0], x[0][i+0]) << 2;	x[1][i+0] = xr;	mOutR |= FASTABS(xr);
 800b99e:	f8d8 3000 	ldr.w	r3, [r8]
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800b9a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	4608      	mov	r0, r1
 800b9a8:	fb80 1202 	smull	r1, r2, r0, r2
 800b9ac:	0092      	lsls	r2, r2, #2
 800b9ae:	9908      	ldr	r1, [sp, #32]
	sign = x >> (sizeof(int) * 8 - 1);
 800b9b0:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800b9b4:	f8c8 2900 	str.w	r2, [r8, #2304]	; 0x900
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800b9b8:	4608      	mov	r0, r1
	x ^= sign;
 800b9ba:	ea82 020c 	eor.w	r2, r2, ip
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800b9be:	fb80 1303 	smull	r1, r3, r0, r3
			xl = MULSHIFT32(fls[0], x[0][i+0]) << 2;	x[0][i+0] = xl;	mOutL |= FASTABS(xl);
 800b9c2:	009b      	lsls	r3, r3, #2
			xr = MULSHIFT32(frs[1], x[0][i+1]) << 2;	x[1][i+1] = xr;	mOutR |= FASTABS(xr);
 800b9c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b9c8:	990a      	ldr	r1, [sp, #40]	; 0x28
	sign = x >> (sizeof(int) * 8 - 1);
 800b9ca:	17de      	asrs	r6, r3, #31
			xl = MULSHIFT32(fls[0], x[0][i+0]) << 2;	x[0][i+0] = xl;	mOutL |= FASTABS(xl);
 800b9cc:	f8c8 3000 	str.w	r3, [r8]
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800b9d0:	4605      	mov	r5, r0
	x ^= sign;
 800b9d2:	4073      	eors	r3, r6
 800b9d4:	9303      	str	r3, [sp, #12]
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	fb83 1505 	smull	r1, r5, r3, r5
			xr = MULSHIFT32(frs[1], x[0][i+1]) << 2;	x[1][i+1] = xr;	mOutR |= FASTABS(xr);
 800b9dc:	00ad      	lsls	r5, r5, #2
 800b9de:	9907      	ldr	r1, [sp, #28]
	sign = x >> (sizeof(int) * 8 - 1);
 800b9e0:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800b9e4:	f8c8 5904 	str.w	r5, [r8, #2308]	; 0x904
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800b9e8:	460b      	mov	r3, r1
	x ^= sign;
 800b9ea:	ea85 050e 	eor.w	r5, r5, lr
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800b9ee:	fb83 1000 	smull	r1, r0, r3, r0
			xl = MULSHIFT32(fls[1], x[0][i+1]) << 2;	x[0][i+1] = xl;	mOutL |= FASTABS(xl);
 800b9f2:	0080      	lsls	r0, r0, #2
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
 800b9f4:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800b9f8:	9b05      	ldr	r3, [sp, #20]
	sign = x >> (sizeof(int) * 8 - 1);
 800b9fa:	17c7      	asrs	r7, r0, #31
			xl = MULSHIFT32(fls[1], x[0][i+1]) << 2;	x[0][i+1] = xl;	mOutL |= FASTABS(xl);
 800b9fc:	f8c8 0004 	str.w	r0, [r8, #4]
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800ba00:	460c      	mov	r4, r1
	x ^= sign;
 800ba02:	4078      	eors	r0, r7
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800ba04:	fb83 b404 	smull	fp, r4, r3, r4
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
 800ba08:	00a4      	lsls	r4, r4, #2
	x -= sign;
 800ba0a:	eba2 020c 	sub.w	r2, r2, ip
 800ba0e:	eba5 050e 	sub.w	r5, r5, lr
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800ba12:	9b06      	ldr	r3, [sp, #24]
	sign = x >> (sizeof(int) * 8 - 1);
 800ba14:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800ba18:	f8c8 4908 	str.w	r4, [r8, #2312]	; 0x908
 800ba1c:	4315      	orrs	r5, r2
 800ba1e:	9a02      	ldr	r2, [sp, #8]
	x ^= sign;
 800ba20:	ea84 040b 	eor.w	r4, r4, fp
	x -= sign;
 800ba24:	eba4 040b 	sub.w	r4, r4, fp
 800ba28:	4325      	orrs	r5, r4
 800ba2a:	432a      	orrs	r2, r5
 800ba2c:	9202      	str	r2, [sp, #8]
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800ba2e:	fb83 2101 	smull	r2, r1, r3, r1
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 800ba32:	0089      	lsls	r1, r1, #2
	x -= sign;
 800ba34:	9b03      	ldr	r3, [sp, #12]
 800ba36:	1bc0      	subs	r0, r0, r7
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 800ba38:	f109 0901 	add.w	r9, r9, #1
 800ba3c:	1b9b      	subs	r3, r3, r6
	sign = x >> (sizeof(int) * 8 - 1);
 800ba3e:	17ca      	asrs	r2, r1, #31
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 800ba40:	f8c8 1008 	str.w	r1, [r8, #8]
			sampsLeft -= 3;
 800ba44:	f1aa 0a03 	sub.w	sl, sl, #3
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 800ba48:	4318      	orrs	r0, r3
	x ^= sign;
 800ba4a:	4051      	eors	r1, r2
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 800ba4c:	9b00      	ldr	r3, [sp, #0]
 800ba4e:	f108 080c 	add.w	r8, r8, #12
	x -= sign;
 800ba52:	1a89      	subs	r1, r1, r2
 800ba54:	3303      	adds	r3, #3
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 800ba56:	4308      	orrs	r0, r1
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 800ba58:	9300      	str	r3, [sp, #0]
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 800ba5a:	9b01      	ldr	r3, [sp, #4]
 800ba5c:	4303      	orrs	r3, r0
 800ba5e:	9301      	str	r3, [sp, #4]
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 800ba60:	9b04      	ldr	r3, [sp, #16]
 800ba62:	454b      	cmp	r3, r9
 800ba64:	dc98      	bgt.n	800b998 <xmp3fixpt_IntensityProcMPEG1+0x194>
 800ba66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 800ba68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba6a:	3303      	adds	r3, #3
 800ba6c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba70:	429a      	cmp	r2, r3
 800ba72:	f6ff af54 	blt.w	800b91e <xmp3fixpt_IntensityProcMPEG1+0x11a>
		}
	}
	mOut[0] = mOutL;
 800ba76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ba78:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	9b01      	ldr	r3, [sp, #4]
	mOut[1] = mOutR;
 800ba80:	f8c2 9004 	str.w	r9, [r2, #4]
	mOut[0] = mOutL;
 800ba84:	6013      	str	r3, [r2, #0]
	
	return;
}
 800ba86:	b013      	add	sp, #76	; 0x4c
 800ba88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fl = ISFIIP[midSideFlag][0];
 800ba8c:	4a1e      	ldr	r2, [pc, #120]	; (800bb08 <xmp3fixpt_IntensityProcMPEG1+0x304>)
 800ba8e:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ba90:	f852 5031 	ldr.w	r5, [r2, r1, lsl #3]
			fr = ISFIIP[midSideFlag][1];
 800ba94:	9a01      	ldr	r2, [sp, #4]
 800ba96:	6854      	ldr	r4, [r2, #4]
 800ba98:	e6f0      	b.n	800b87c <xmp3fixpt_IntensityProcMPEG1+0x78>
				fls[w] = ISFIIP[midSideFlag][0];
 800ba9a:	4b1b      	ldr	r3, [pc, #108]	; (800bb08 <xmp3fixpt_IntensityProcMPEG1+0x304>)
 800ba9c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ba9e:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800baa2:	9306      	str	r3, [sp, #24]
				frs[w] = ISFIIP[midSideFlag][1];
 800baa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	9305      	str	r3, [sp, #20]
 800baaa:	e760      	b.n	800b96e <xmp3fixpt_IntensityProcMPEG1+0x16a>
				fls[w] = ISFIIP[midSideFlag][0];
 800baac:	4b16      	ldr	r3, [pc, #88]	; (800bb08 <xmp3fixpt_IntensityProcMPEG1+0x304>)
 800baae:	991d      	ldr	r1, [sp, #116]	; 0x74
 800bab0:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800bab4:	9307      	str	r3, [sp, #28]
				frs[w] = ISFIIP[midSideFlag][1];
 800bab6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	930a      	str	r3, [sp, #40]	; 0x28
 800babc:	e74b      	b.n	800b956 <xmp3fixpt_IntensityProcMPEG1+0x152>
				fls[w] = ISFIIP[midSideFlag][0];
 800babe:	4b12      	ldr	r3, [pc, #72]	; (800bb08 <xmp3fixpt_IntensityProcMPEG1+0x304>)
 800bac0:	991d      	ldr	r1, [sp, #116]	; 0x74
 800bac2:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800bac6:	9308      	str	r3, [sp, #32]
				frs[w] = ISFIIP[midSideFlag][1];
 800bac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	9309      	str	r3, [sp, #36]	; 0x24
 800bace:	e736      	b.n	800b93e <xmp3fixpt_IntensityProcMPEG1+0x13a>
	} else if (cbi[1].cbType == 1 || cbi[1].cbType == 2) {
 800bad0:	3a01      	subs	r2, #1
 800bad2:	2a01      	cmp	r2, #1
 800bad4:	d905      	bls.n	800bae2 <xmp3fixpt_IntensityProcMPEG1+0x2de>
	int cbStartL=0, cbStartS=0, cbEndL=0, cbEndS=0;
 800bad6:	2300      	movs	r3, #0
 800bad8:	9310      	str	r3, [sp, #64]	; 0x40
 800bada:	461a      	mov	r2, r3
 800badc:	9300      	str	r3, [sp, #0]
 800bade:	4698      	mov	r8, r3
 800bae0:	e6a8      	b.n	800b834 <xmp3fixpt_IntensityProcMPEG1+0x30>
 800bae2:	460b      	mov	r3, r1
		cbStartS = cbi[1].cbEndSMax + 1;
 800bae4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		cbEndS =   cbi[0].cbEndSMax + 1;
 800bae6:	6920      	ldr	r0, [r4, #16]
		cbStartL = cbEndL = 0;
 800bae8:	2500      	movs	r5, #0
		i = 3 * fh->sfBand->s[cbStartS];
 800baea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		cbStartS = cbi[1].cbEndSMax + 1;
 800baec:	1c4a      	adds	r2, r1, #1
		cbEndS =   cbi[0].cbEndSMax + 1;
 800baee:	3001      	adds	r0, #1
		cbStartL = cbEndL = 0;
 800baf0:	9500      	str	r5, [sp, #0]
		i = 3 * fh->sfBand->s[cbStartS];
 800baf2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
		cbStartL = cbEndL = 0;
 800baf6:	462b      	mov	r3, r5
		cbEndS =   cbi[0].cbEndSMax + 1;
 800baf8:	9010      	str	r0, [sp, #64]	; 0x40
		i = 3 * fh->sfBand->s[cbStartS];
 800bafa:	f9b1 1030 	ldrsh.w	r1, [r1, #48]	; 0x30
 800bafe:	eb01 0841 	add.w	r8, r1, r1, lsl #1
 800bb02:	ebaa 0a08 	sub.w	sl, sl, r8
 800bb06:	e695      	b.n	800b834 <xmp3fixpt_IntensityProcMPEG1+0x30>
 800bb08:	0802372c 	.word	0x0802372c
 800bb0c:	0802373c 	.word	0x0802373c

0800bb10 <xmp3fixpt_IntensityProcMPEG2>:
 *              make sure all the mixed-block and IIP logic is right
 *                probably redo IIP logic to be simpler
 **************************************************************************************/
void IntensityProcMPEG2(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, ScaleFactorJS *sfjs, int midSideFlag, int mixFlag, int mOut[2])
{
 800bb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb14:	b0a1      	sub	sp, #132	; 0x84
	int sampsLeft;
	int isf, sfIdx, tmp, il[23];
	int *isfTab;
	int cbStartL, cbStartS, cbEndL, cbEndS;
	
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 800bb16:	4c9c      	ldr	r4, [pc, #624]	; (800bd88 <xmp3fixpt_IntensityProcMPEG2+0x278>)
	mOutL = mOutR = 0;

	/* fill buffer with illegal intensity positions (depending on slen) */
	for (k = r = 0; r < 4; r++) {
		tmp = (1 << sfjs->slen[r]) - 1;
 800bb18:	f04f 0801 	mov.w	r8, #1
{
 800bb1c:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 800bb1e:	9306      	str	r3, [sp, #24]
	for (k = r = 0; r < 4; r++) {
 800bb20:	2300      	movs	r3, #0
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 800bb22:	46b4      	mov	ip, r6
 800bb24:	f106 0e14 	add.w	lr, r6, #20
 800bb28:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800bb2a:	f85c 5b04 	ldr.w	r5, [ip], #4
{
 800bb2e:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 800bb30:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 800bb34:	eb04 1485 	add.w	r4, r4, r5, lsl #6
 800bb38:	9401      	str	r4, [sp, #4]
		tmp = (1 << sfjs->slen[r]) - 1;
 800bb3a:	f85c 4b04 	ldr.w	r4, [ip], #4
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 800bb3e:	f8dc 600c 	ldr.w	r6, [ip, #12]
		tmp = (1 << sfjs->slen[r]) - 1;
 800bb42:	fa08 f404 	lsl.w	r4, r8, r4
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 800bb46:	2e00      	cmp	r6, #0
		tmp = (1 << sfjs->slen[r]) - 1;
 800bb48:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 800bb4c:	dd0a      	ble.n	800bb64 <xmp3fixpt_IntensityProcMPEG2+0x54>
 800bb4e:	441e      	add	r6, r3
 800bb50:	ad09      	add	r5, sp, #36	; 0x24
 800bb52:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800bb56:	eb05 0586 	add.w	r5, r5, r6, lsl #2
			il[k] = tmp;
 800bb5a:	f843 4b04 	str.w	r4, [r3], #4
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 800bb5e:	42ab      	cmp	r3, r5
 800bb60:	d1fb      	bne.n	800bb5a <xmp3fixpt_IntensityProcMPEG2+0x4a>
 800bb62:	4633      	mov	r3, r6
	for (k = r = 0; r < 4; r++) {
 800bb64:	45f4      	cmp	ip, lr
 800bb66:	d1e8      	bne.n	800bb3a <xmp3fixpt_IntensityProcMPEG2+0x2a>
 800bb68:	6b54      	ldr	r4, [r2, #52]	; 0x34
	}

	if (cbi[1].cbType == 0) {
 800bb6a:	69be      	ldr	r6, [r7, #24]
 800bb6c:	9405      	str	r4, [sp, #20]
 800bb6e:	2e00      	cmp	r6, #0
 800bb70:	d174      	bne.n	800bc5c <xmp3fixpt_IntensityProcMPEG2+0x14c>
		/* long blocks */
		il[21] = il[22] = 1;
		cbStartL = cbi[1].cbEndL + 1;	/* start at end of right */
 800bb72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
		il[21] = il[22] = 1;
 800bb74:	2301      	movs	r3, #1
		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
 800bb76:	697d      	ldr	r5, [r7, #20]
		cbStartL = cbi[1].cbEndL + 1;	/* start at end of right */
 800bb78:	eb02 0a03 	add.w	sl, r2, r3
		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
 800bb7c:	9503      	str	r5, [sp, #12]
		i = fh->sfBand->l[cbStartL];
 800bb7e:	f934 901a 	ldrsh.w	r9, [r4, sl, lsl #1]
		sampsLeft = nSamps - i;

		for(cb = cbStartL; cb < cbEndL; cb++) {
 800bb82:	4555      	cmp	r5, sl
		sampsLeft = nSamps - i;
 800bb84:	eba1 0209 	sub.w	r2, r1, r9
		il[21] = il[22] = 1;
 800bb88:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
		sampsLeft = nSamps - i;
 800bb8c:	9200      	str	r2, [sp, #0]
		for(cb = cbStartL; cb < cbEndL; cb++) {
 800bb8e:	f2c0 80f9 	blt.w	800bd84 <xmp3fixpt_IntensityProcMPEG2+0x274>
 800bb92:	9a06      	ldr	r2, [sp, #24]
 800bb94:	eb04 034a 	add.w	r3, r4, sl, lsl #1
			sfIdx = sfis->l[cb];
			if (sfIdx == il[cb]) {
				fl = ISFIIP[midSideFlag][0];
				fr = ISFIIP[midSideFlag][1];
 800bb98:	992c      	ldr	r1, [sp, #176]	; 0xb0
	mOutL = mOutR = 0;
 800bb9a:	46b3      	mov	fp, r6
 800bb9c:	4452      	add	r2, sl
 800bb9e:	4698      	mov	r8, r3
 800bba0:	9004      	str	r0, [sp, #16]
 800bba2:	9202      	str	r2, [sp, #8]
				fr = ISFIIP[midSideFlag][1];
 800bba4:	4a79      	ldr	r2, [pc, #484]	; (800bd8c <xmp3fixpt_IntensityProcMPEG2+0x27c>)
 800bba6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bbaa:	9205      	str	r2, [sp, #20]
			sfIdx = sfis->l[cb];
 800bbac:	9b02      	ldr	r3, [sp, #8]
 800bbae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbb2:	9302      	str	r3, [sp, #8]
			if (sfIdx == il[cb]) {
 800bbb4:	ab09      	add	r3, sp, #36	; 0x24
 800bbb6:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	f000 80db 	beq.w	800bd76 <xmp3fixpt_IntensityProcMPEG2+0x266>
			} else {
				isf = (sfis->l[cb] + 1) >> 1;
 800bbc0:	1c53      	adds	r3, r2, #1
 800bbc2:	9901      	ldr	r1, [sp, #4]
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 800bbc4:	07d2      	lsls	r2, r2, #31
				isf = (sfis->l[cb] + 1) >> 1;
 800bbc6:	ea4f 0363 	mov.w	r3, r3, asr #1
 800bbca:	6808      	ldr	r0, [r1, #0]
 800bbcc:	f851 7023 	ldr.w	r7, [r1, r3, lsl #2]
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 800bbd0:	d402      	bmi.n	800bbd8 <xmp3fixpt_IntensityProcMPEG2+0xc8>
 800bbd2:	463b      	mov	r3, r7
 800bbd4:	4607      	mov	r7, r0
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	4643      	mov	r3, r8
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
			}
			n = MIN(fh->sfBand->l[cb + 1] - fh->sfBand->l[cb], sampsLeft);
 800bbda:	f9b8 c002 	ldrsh.w	ip, [r8, #2]
 800bbde:	f10a 0a01 	add.w	sl, sl, #1
 800bbe2:	f108 0802 	add.w	r8, r8, #2
 800bbe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbea:	ebac 0c03 	sub.w	ip, ip, r3
 800bbee:	9b00      	ldr	r3, [sp, #0]
 800bbf0:	459c      	cmp	ip, r3
 800bbf2:	bfa8      	it	ge
 800bbf4:	469c      	movge	ip, r3

			for(j = 0; j < n; j++, i++) {
 800bbf6:	f1bc 0f00 	cmp.w	ip, #0
 800bbfa:	dd25      	ble.n	800bc48 <xmp3fixpt_IntensityProcMPEG2+0x138>
 800bbfc:	ea4f 0489 	mov.w	r4, r9, lsl #2
 800bc00:	9b04      	ldr	r3, [sp, #16]
 800bc02:	44e1      	add	r9, ip
 800bc04:	f504 6510 	add.w	r5, r4, #2304	; 0x900
 800bc08:	441c      	add	r4, r3
 800bc0a:	eb03 0e89 	add.w	lr, r3, r9, lsl #2
 800bc0e:	441d      	add	r5, r3
				xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 800bc10:	6823      	ldr	r3, [r4, #0]
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800bc12:	fb80 2303 	smull	r2, r3, r0, r3
 800bc16:	009a      	lsls	r2, r3, #2
	sign = x >> (sizeof(int) * 8 - 1);
 800bc18:	17d1      	asrs	r1, r2, #31
 800bc1a:	f845 2b04 	str.w	r2, [r5], #4
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800bc1e:	f854 3b04 	ldr.w	r3, [r4], #4
	x ^= sign;
 800bc22:	404a      	eors	r2, r1
	x -= sign;
 800bc24:	1a52      	subs	r2, r2, r1
 800bc26:	ea4b 0b02 	orr.w	fp, fp, r2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800bc2a:	fb87 2303 	smull	r2, r3, r7, r3
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 800bc2e:	009b      	lsls	r3, r3, #2
			for(j = 0; j < n; j++, i++) {
 800bc30:	45a6      	cmp	lr, r4
	sign = x >> (sizeof(int) * 8 - 1);
 800bc32:	ea4f 72e3 	mov.w	r2, r3, asr #31
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 800bc36:	f844 3c04 	str.w	r3, [r4, #-4]
	x ^= sign;
 800bc3a:	ea83 0302 	eor.w	r3, r3, r2
	x -= sign;
 800bc3e:	eba3 0302 	sub.w	r3, r3, r2
 800bc42:	ea46 0603 	orr.w	r6, r6, r3
			for(j = 0; j < n; j++, i++) {
 800bc46:	d1e3      	bne.n	800bc10 <xmp3fixpt_IntensityProcMPEG2+0x100>
			}

			/* early exit once we've used all the non-zero samples */
			sampsLeft -= n;
			if (sampsLeft == 0)		
 800bc48:	9b00      	ldr	r3, [sp, #0]
 800bc4a:	ebb3 030c 	subs.w	r3, r3, ip
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	f000 8083 	beq.w	800bd5a <xmp3fixpt_IntensityProcMPEG2+0x24a>
		for(cb = cbStartL; cb < cbEndL; cb++) {
 800bc54:	9b03      	ldr	r3, [sp, #12]
 800bc56:	4553      	cmp	r3, sl
 800bc58:	daa8      	bge.n	800bbac <xmp3fixpt_IntensityProcMPEG2+0x9c>
 800bc5a:	e07e      	b.n	800bd5a <xmp3fixpt_IntensityProcMPEG2+0x24a>
			/* skip through sample array by 3, so early-exit logic would be more tricky */
			for(cb = cbStartS; cb < cbEndS; cb++) {
				sfIdx = sfis->s[cb][w];
				if (sfIdx == il[cb]) {
					fl = ISFIIP[midSideFlag][0];
					fr = ISFIIP[midSideFlag][1];
 800bc5c:	4a4b      	ldr	r2, [pc, #300]	; (800bd8c <xmp3fixpt_IntensityProcMPEG2+0x27c>)
	mOutL = mOutR = 0;
 800bc5e:	f04f 0b00 	mov.w	fp, #0
					fr = ISFIIP[midSideFlag][1];
 800bc62:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800bc64:	1d3b      	adds	r3, r7, #4
		il[12] = 1;
 800bc66:	46de      	mov	lr, fp
		for(w = 0; w < 3; w++) {
 800bc68:	f8cd b008 	str.w	fp, [sp, #8]
					fr = ISFIIP[midSideFlag][1];
 800bc6c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bc70:	9303      	str	r3, [sp, #12]
		il[12] = 1;
 800bc72:	2301      	movs	r3, #1
					fr = ISFIIP[midSideFlag][1];
 800bc74:	9204      	str	r2, [sp, #16]
 800bc76:	9a05      	ldr	r2, [sp, #20]
		il[12] = 1;
 800bc78:	9315      	str	r3, [sp, #84]	; 0x54
 800bc7a:	3230      	adds	r2, #48	; 0x30
 800bc7c:	9207      	str	r2, [sp, #28]
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 800bc7e:	9b03      	ldr	r3, [sp, #12]
			i = 3 * fh->sfBand->s[cbStartS] + w;
 800bc80:	9d05      	ldr	r5, [sp, #20]
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 800bc82:	4619      	mov	r1, r3
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 800bc84:	699a      	ldr	r2, [r3, #24]
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 800bc86:	f851 3b04 	ldr.w	r3, [r1], #4
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 800bc8a:	f102 0a01 	add.w	sl, r2, #1
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 800bc8e:	9103      	str	r1, [sp, #12]
			i = 3 * fh->sfBand->s[cbStartS] + w;
 800bc90:	eb05 0142 	add.w	r1, r5, r2, lsl #1
			for(cb = cbStartS; cb < cbEndS; cb++) {
 800bc94:	4553      	cmp	r3, sl
			i = 3 * fh->sfBand->s[cbStartS] + w;
 800bc96:	8e0c      	ldrh	r4, [r1, #48]	; 0x30
 800bc98:	f04f 0103 	mov.w	r1, #3
 800bc9c:	460f      	mov	r7, r1
 800bc9e:	9902      	ldr	r1, [sp, #8]
 800bca0:	fb14 1407 	smlabb	r4, r4, r7, r1
			for(cb = cbStartS; cb < cbEndS; cb++) {
 800bca4:	db53      	blt.n	800bd4e <xmp3fixpt_IntensityProcMPEG2+0x23e>
 800bca6:	eb02 0942 	add.w	r9, r2, r2, lsl #1
 800bcaa:	f102 0818 	add.w	r8, r2, #24
 800bcae:	aa09      	add	r2, sp, #36	; 0x24
 800bcb0:	4489      	add	r9, r1
 800bcb2:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 800bcb6:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800bcba:	9a07      	ldr	r2, [sp, #28]
 800bcbc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	9b06      	ldr	r3, [sp, #24]
 800bcc4:	4499      	add	r9, r3
				sfIdx = sfis->s[cb][w];
 800bcc6:	f899 301a 	ldrb.w	r3, [r9, #26]
				if (sfIdx == il[cb]) {
 800bcca:	f85a 2b04 	ldr.w	r2, [sl], #4
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d049      	beq.n	800bd66 <xmp3fixpt_IntensityProcMPEG2+0x256>
				} else {
					isf = (sfis->s[cb][w] + 1) >> 1;
 800bcd2:	1c5a      	adds	r2, r3, #1
 800bcd4:	9901      	ldr	r1, [sp, #4]
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 800bcd6:	07db      	lsls	r3, r3, #31
					isf = (sfis->s[cb][w] + 1) >> 1;
 800bcd8:	ea4f 0262 	mov.w	r2, r2, asr #1
 800bcdc:	f8d1 c000 	ldr.w	ip, [r1]
 800bce0:	f851 7022 	ldr.w	r7, [r1, r2, lsl #2]
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 800bce4:	d402      	bmi.n	800bcec <xmp3fixpt_IntensityProcMPEG2+0x1dc>
 800bce6:	463b      	mov	r3, r7
 800bce8:	4667      	mov	r7, ip
 800bcea:	469c      	mov	ip, r3
 800bcec:	4643      	mov	r3, r8
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
				}
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800bcee:	f9b8 6002 	ldrsh.w	r6, [r8, #2]
 800bcf2:	f108 0802 	add.w	r8, r8, #2
 800bcf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcfa:	1af6      	subs	r6, r6, r3

				for(j = 0; j < n; j++, i+=3) {
 800bcfc:	2e00      	cmp	r6, #0
 800bcfe:	dd21      	ble.n	800bd44 <xmp3fixpt_IntensityProcMPEG2+0x234>
 800bd00:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800bd04:	eb00 0584 	add.w	r5, r0, r4, lsl #2
 800bd08:	4426      	add	r6, r4
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800bd0a:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 800bd0e:	fb8c 2303 	smull	r2, r3, ip, r3
					xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 800bd12:	009a      	lsls	r2, r3, #2
	sign = x >> (sizeof(int) * 8 - 1);
 800bd14:	17d1      	asrs	r1, r2, #31
 800bd16:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800bd1a:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
	x ^= sign;
 800bd1e:	404a      	eors	r2, r1
	x -= sign;
 800bd20:	1a52      	subs	r2, r2, r1
 800bd22:	ea4b 0b02 	orr.w	fp, fp, r2
	__asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y) : "cc");
 800bd26:	fb87 2303 	smull	r2, r3, r7, r3
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	350c      	adds	r5, #12
	sign = x >> (sizeof(int) * 8 - 1);
 800bd2e:	17da      	asrs	r2, r3, #31
 800bd30:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
				for(j = 0; j < n; j++, i+=3) {
 800bd34:	3403      	adds	r4, #3
	x ^= sign;
 800bd36:	4053      	eors	r3, r2
 800bd38:	42b4      	cmp	r4, r6
	x -= sign;
 800bd3a:	eba3 0302 	sub.w	r3, r3, r2
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 800bd3e:	ea4e 0e03 	orr.w	lr, lr, r3
				for(j = 0; j < n; j++, i+=3) {
 800bd42:	d1e2      	bne.n	800bd0a <xmp3fixpt_IntensityProcMPEG2+0x1fa>
			for(cb = cbStartS; cb < cbEndS; cb++) {
 800bd44:	9b00      	ldr	r3, [sp, #0]
 800bd46:	f109 0903 	add.w	r9, r9, #3
 800bd4a:	4598      	cmp	r8, r3
 800bd4c:	d1bb      	bne.n	800bcc6 <xmp3fixpt_IntensityProcMPEG2+0x1b6>
		for(w = 0; w < 3; w++) {
 800bd4e:	9b02      	ldr	r3, [sp, #8]
 800bd50:	3301      	adds	r3, #1
 800bd52:	2b03      	cmp	r3, #3
 800bd54:	9302      	str	r3, [sp, #8]
 800bd56:	d192      	bne.n	800bc7e <xmp3fixpt_IntensityProcMPEG2+0x16e>
 800bd58:	4676      	mov	r6, lr
				}
			}
		}
	}
	mOut[0] = mOutL;
 800bd5a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
	mOut[1] = mOutR;
 800bd5c:	e9c3 6b00 	strd	r6, fp, [r3]

	return;
}
 800bd60:	b021      	add	sp, #132	; 0x84
 800bd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					fl = ISFIIP[midSideFlag][0];
 800bd66:	4b09      	ldr	r3, [pc, #36]	; (800bd8c <xmp3fixpt_IntensityProcMPEG2+0x27c>)
 800bd68:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800bd6a:	f853 7032 	ldr.w	r7, [r3, r2, lsl #3]
					fr = ISFIIP[midSideFlag][1];
 800bd6e:	9b04      	ldr	r3, [sp, #16]
 800bd70:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800bd74:	e7ba      	b.n	800bcec <xmp3fixpt_IntensityProcMPEG2+0x1dc>
				fl = ISFIIP[midSideFlag][0];
 800bd76:	4b05      	ldr	r3, [pc, #20]	; (800bd8c <xmp3fixpt_IntensityProcMPEG2+0x27c>)
 800bd78:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800bd7a:	f853 7032 	ldr.w	r7, [r3, r2, lsl #3]
				fr = ISFIIP[midSideFlag][1];
 800bd7e:	9b05      	ldr	r3, [sp, #20]
 800bd80:	6858      	ldr	r0, [r3, #4]
 800bd82:	e729      	b.n	800bbd8 <xmp3fixpt_IntensityProcMPEG2+0xc8>
	mOutL = mOutR = 0;
 800bd84:	46b3      	mov	fp, r6
 800bd86:	e7e8      	b.n	800bd5a <xmp3fixpt_IntensityProcMPEG2+0x24a>
 800bd88:	08023774 	.word	0x08023774
 800bd8c:	0802372c 	.word	0x0802372c

0800bd90 <xmp3fixpt_Subband>:
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	SubbandInfo *sbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 800bd90:	2800      	cmp	r0, #0
 800bd92:	f000 8086 	beq.w	800bea2 <xmp3fixpt_Subband+0x112>
 800bd96:	68c3      	ldr	r3, [r0, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f000 8082 	beq.w	800bea2 <xmp3fixpt_Subband+0x112>
{
 800bd9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 800bda2:	f8d0 9014 	ldr.w	r9, [r0, #20]
{
 800bda6:	b087      	sub	sp, #28
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 800bda8:	f1b9 0f00 	cmp.w	r9, #0
 800bdac:	d076      	beq.n	800be9c <xmp3fixpt_Subband+0x10c>
 800bdae:	6987      	ldr	r7, [r0, #24]
 800bdb0:	2f00      	cmp	r7, #0
 800bdb2:	d073      	beq.n	800be9c <xmp3fixpt_Subband+0x10c>

	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
	mi = (IMDCTInfo *)(mp3DecInfo->IMDCTInfoPS);
	sbi = (SubbandInfo*)(mp3DecInfo->SubbandInfoPS);

	if (mp3DecInfo->nChans == 2) {
 800bdb4:	f8d0 37bc 	ldr.w	r3, [r0, #1980]	; 0x7bc
 800bdb8:	f507 5508 	add.w	r5, r7, #8704	; 0x2200
 800bdbc:	460e      	mov	r6, r1
 800bdbe:	f641 3a18 	movw	sl, #6936	; 0x1b18
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	682a      	ldr	r2, [r5, #0]
 800bdc6:	d02a      	beq.n	800be1e <xmp3fixpt_Subband+0x8e>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
			pcmBuf += (2 * NBANDS);
		}
	} else {
		/* mono */
		for (b = 0; b < BLOCK_SIZE; b++) {
 800bdc8:	f04f 0b00 	mov.w	fp, #0
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 800bdcc:	4c36      	ldr	r4, [pc, #216]	; (800bea8 <xmp3fixpt_Subband+0x118>)
 800bdce:	44ca      	add	sl, r9
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 800bdd0:	f00b 0801 	and.w	r8, fp, #1
 800bdd4:	f8da 0000 	ldr.w	r0, [sl]
 800bdd8:	4639      	mov	r1, r7
 800bdda:	4643      	mov	r3, r8
 800bddc:	9000      	str	r0, [sp, #0]
 800bdde:	eb09 10cb 	add.w	r0, r9, fp, lsl #7
		for (b = 0; b < BLOCK_SIZE; b++) {
 800bde2:	f10b 0b01 	add.w	fp, fp, #1
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 800bde6:	f7f6 fdbf 	bl	8002968 <xmp3fixpt_FDCT32>
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 800bdea:	6829      	ldr	r1, [r5, #0]
 800bdec:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800bdf0:	4622      	mov	r2, r4
 800bdf2:	4630      	mov	r0, r6
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
			pcmBuf += NBANDS;
 800bdf4:	3640      	adds	r6, #64	; 0x40
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 800bdf6:	4443      	add	r3, r8
 800bdf8:	eb01 1183 	add.w	r1, r1, r3, lsl #6
 800bdfc:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800be00:	f7fd fe3c 	bl	8009a7c <xmp3fixpt_PolyphaseMono>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 800be04:	682a      	ldr	r2, [r5, #0]
		for (b = 0; b < BLOCK_SIZE; b++) {
 800be06:	f1bb 0f12 	cmp.w	fp, #18
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 800be0a:	eba2 0208 	sub.w	r2, r2, r8
 800be0e:	f002 0207 	and.w	r2, r2, #7
 800be12:	602a      	str	r2, [r5, #0]
		for (b = 0; b < BLOCK_SIZE; b++) {
 800be14:	d1dc      	bne.n	800bdd0 <xmp3fixpt_Subband+0x40>
		}
	}

	return 0;
 800be16:	2000      	movs	r0, #0
}
 800be18:	b007      	add	sp, #28
 800be1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1e:	f641 331c 	movw	r3, #6940	; 0x1b1c
 800be22:	f107 0180 	add.w	r1, r7, #128	; 0x80
		for (b = 0; b < BLOCK_SIZE; b++) {
 800be26:	f04f 0800 	mov.w	r8, #0
 800be2a:	44ca      	add	sl, r9
 800be2c:	444b      	add	r3, r9
 800be2e:	9103      	str	r1, [sp, #12]
 800be30:	f509 6110 	add.w	r1, r9, #2304	; 0x900
			PolyphaseStereo(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 800be34:	469b      	mov	fp, r3
 800be36:	e9cd 1904 	strd	r1, r9, [sp, #16]
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 800be3a:	f008 0401 	and.w	r4, r8, #1
 800be3e:	ea4f 19c8 	mov.w	r9, r8, lsl #7
 800be42:	f8da 1000 	ldr.w	r1, [sl]
		for (b = 0; b < BLOCK_SIZE; b++) {
 800be46:	f108 0801 	add.w	r8, r8, #1
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 800be4a:	9b05      	ldr	r3, [sp, #20]
 800be4c:	9100      	str	r1, [sp, #0]
 800be4e:	4639      	mov	r1, r7
 800be50:	eb03 0009 	add.w	r0, r3, r9
 800be54:	4623      	mov	r3, r4
 800be56:	f7f6 fd87 	bl	8002968 <xmp3fixpt_FDCT32>
			FDCT32(mi->outBuf[1][b], sbi->vbuf + 1*32, sbi->vindex, (b & 0x01), mi->gb[1]);
 800be5a:	f8db 1000 	ldr.w	r1, [fp]
 800be5e:	9b04      	ldr	r3, [sp, #16]
 800be60:	682a      	ldr	r2, [r5, #0]
 800be62:	eb03 0009 	add.w	r0, r3, r9
 800be66:	9100      	str	r1, [sp, #0]
 800be68:	4623      	mov	r3, r4
 800be6a:	9903      	ldr	r1, [sp, #12]
 800be6c:	f7f6 fd7c 	bl	8002968 <xmp3fixpt_FDCT32>
			PolyphaseStereo(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 800be70:	6829      	ldr	r1, [r5, #0]
 800be72:	0123      	lsls	r3, r4, #4
 800be74:	4a0c      	ldr	r2, [pc, #48]	; (800bea8 <xmp3fixpt_Subband+0x118>)
 800be76:	4630      	mov	r0, r6
			pcmBuf += (2 * NBANDS);
 800be78:	3680      	adds	r6, #128	; 0x80
			PolyphaseStereo(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 800be7a:	4423      	add	r3, r4
 800be7c:	eb01 1183 	add.w	r1, r1, r3, lsl #6
 800be80:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800be84:	f7fd ff5e 	bl	8009d44 <xmp3fixpt_PolyphaseStereo>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 800be88:	682a      	ldr	r2, [r5, #0]
		for (b = 0; b < BLOCK_SIZE; b++) {
 800be8a:	f1b8 0f12 	cmp.w	r8, #18
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 800be8e:	eba2 0204 	sub.w	r2, r2, r4
 800be92:	f002 0207 	and.w	r2, r2, #7
 800be96:	602a      	str	r2, [r5, #0]
		for (b = 0; b < BLOCK_SIZE; b++) {
 800be98:	d1cf      	bne.n	800be3a <xmp3fixpt_Subband+0xaa>
 800be9a:	e7bc      	b.n	800be16 <xmp3fixpt_Subband+0x86>
		return -1;
 800be9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bea0:	e7ba      	b.n	800be18 <xmp3fixpt_Subband+0x88>
 800bea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800bea6:	4770      	bx	lr
 800bea8:	08023af4 	.word	0x08023af4

0800beac <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 800beac:	490d      	ldr	r1, [pc, #52]	; (800bee4 <_sbrk+0x38>)
{
 800beae:	b508      	push	{r3, lr}
	if (heap_end == 0)
 800beb0:	680b      	ldr	r3, [r1, #0]
 800beb2:	b153      	cbz	r3, 800beca <_sbrk+0x1e>
		heap_end = &end;

	prev_heap_end = heap_end;

	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800beb4:	4a0c      	ldr	r2, [pc, #48]	; (800bee8 <_sbrk+0x3c>)
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 800beb6:	4418      	add	r0, r3
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800beb8:	6812      	ldr	r2, [r2, #0]
 800beba:	6812      	ldr	r2, [r2, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 800bebc:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 800bec0:	4290      	cmp	r0, r2
 800bec2:	d806      	bhi.n	800bed2 <_sbrk+0x26>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800bec4:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap_end;
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800beca:	4a08      	ldr	r2, [pc, #32]	; (800beec <_sbrk+0x40>)
 800becc:	4613      	mov	r3, r2
 800bece:	600a      	str	r2, [r1, #0]
 800bed0:	e7f0      	b.n	800beb4 <_sbrk+0x8>
		errno = ENOMEM;
 800bed2:	f013 fbc1 	bl	801f658 <__errno>
 800bed6:	220c      	movs	r2, #12
		return (caddr_t) -1;
 800bed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		errno = ENOMEM;
 800bedc:	6002      	str	r2, [r0, #0]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	bd08      	pop	{r3, pc}
 800bee2:	bf00      	nop
 800bee4:	20005eb4 	.word	0x20005eb4
 800bee8:	e000ed08 	.word	0xe000ed08
 800beec:	20013288 	.word	0x20013288

0800bef0 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 800bef0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bef2:	1e16      	subs	r6, r2, #0
 800bef4:	dd07      	ble.n	800bf06 <_write+0x16>
 800bef6:	460c      	mov	r4, r1
 800bef8:	198d      	adds	r5, r1, r6
	{
	   __io_putchar( *ptr++ );
 800befa:	f814 0b01 	ldrb.w	r0, [r4], #1
 800befe:	f7fc f973 	bl	80081e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bf02:	42ac      	cmp	r4, r5
 800bf04:	d1f9      	bne.n	800befa <_write+0xa>
	}
	return len;
}
 800bf06:	4630      	mov	r0, r6
 800bf08:	bd70      	pop	{r4, r5, r6, pc}
 800bf0a:	bf00      	nop

0800bf0c <_close>:

int _close(int file)
{
	return -1;
}
 800bf0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop

0800bf14 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800bf14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800bf18:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800bf1a:	604b      	str	r3, [r1, #4]
}
 800bf1c:	4770      	bx	lr
 800bf1e:	bf00      	nop

0800bf20 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800bf20:	2001      	movs	r0, #1
 800bf22:	4770      	bx	lr

0800bf24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800bf24:	2000      	movs	r0, #0
 800bf26:	4770      	bx	lr

0800bf28 <_read>:

int _read(int file, char *ptr, int len)
{
 800bf28:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bf2a:	1e16      	subs	r6, r2, #0
 800bf2c:	dd07      	ble.n	800bf3e <_read+0x16>
 800bf2e:	460c      	mov	r4, r1
 800bf30:	198d      	adds	r5, r1, r6
	{
	  *ptr++ = __io_getchar();
 800bf32:	f3af 8000 	nop.w
 800bf36:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bf3a:	42a5      	cmp	r5, r4
 800bf3c:	d1f9      	bne.n	800bf32 <_read+0xa>
	}

   return len;
}
 800bf3e:	4630      	mov	r0, r6
 800bf40:	bd70      	pop	{r4, r5, r6, pc}
 800bf42:	bf00      	nop

0800bf44 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bf44:	4a0f      	ldr	r2, [pc, #60]	; (800bf84 <SystemInit+0x40>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800bf46:	4b10      	ldr	r3, [pc, #64]	; (800bf88 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bf48:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800bf4c:	490f      	ldr	r1, [pc, #60]	; (800bf8c <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bf4e:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
{
 800bf52:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bf54:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 800bf58:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 800bf5a:	6818      	ldr	r0, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bf5c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 800bf60:	4e0b      	ldr	r6, [pc, #44]	; (800bf90 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800bf62:	f040 0001 	orr.w	r0, r0, #1
 800bf66:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 800bf68:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800bf6a:	6818      	ldr	r0, [r3, #0]
 800bf6c:	4001      	ands	r1, r0
 800bf6e:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 800bf70:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800bf72:	6819      	ldr	r1, [r3, #0]
 800bf74:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800bf78:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 800bf7a:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bf7c:	6095      	str	r5, [r2, #8]
#endif
}
 800bf7e:	bc70      	pop	{r4, r5, r6}
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	e000ed00 	.word	0xe000ed00
 800bf88:	40023800 	.word	0x40023800
 800bf8c:	fef6ffff 	.word	0xfef6ffff
 800bf90:	24003010 	.word	0x24003010

0800bf94 <xprintf>:
		xputc(s[--i]);
	while (i);
}

void xprintf (const char* str, ...)
{
 800bf94:	b40f      	push	{r0, r1, r2, r3}
 800bf96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9a:	b087      	sub	sp, #28
		c = (uint8_t)(v % r);
 800bf9c:	4db8      	ldr	r5, [pc, #736]	; (800c280 <xprintf+0x2ec>)
{
 800bf9e:	ab10      	add	r3, sp, #64	; 0x40
 800bfa0:	f853 4b04 	ldr.w	r4, [r3], #4
	va_list arp;
	int d, r, w, s, l;


	va_start(arp, str);
 800bfa4:	9300      	str	r3, [sp, #0]

	while ((d = *str++) != 0) {
 800bfa6:	7820      	ldrb	r0, [r4, #0]
 800bfa8:	b138      	cbz	r0, 800bfba <xprintf+0x26>
		if (d != '%') {
 800bfaa:	2825      	cmp	r0, #37	; 0x25
 800bfac:	d00a      	beq.n	800bfc4 <xprintf+0x30>
	while ((d = *str++) != 0) {
 800bfae:	3401      	adds	r4, #1
	debug_chr(c);
 800bfb0:	f7f6 fcd0 	bl	8002954 <debug_chr>
	while ((d = *str++) != 0) {
 800bfb4:	7820      	ldrb	r0, [r4, #0]
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d1f7      	bne.n	800bfaa <xprintf+0x16>
				xitoa((long)va_arg(arp, int), r, w);
		}
	}

	va_end(arp);
}
 800bfba:	b007      	add	sp, #28
 800bfbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc0:	b004      	add	sp, #16
 800bfc2:	4770      	bx	lr
		d = *str++; w = r = s = l = 0;
 800bfc4:	7861      	ldrb	r1, [r4, #1]
		if (d == '0') {
 800bfc6:	2930      	cmp	r1, #48	; 0x30
 800bfc8:	d06f      	beq.n	800c0aa <xprintf+0x116>
		d = *str++; w = r = s = l = 0;
 800bfca:	3402      	adds	r4, #2
 800bfcc:	2600      	movs	r6, #0
		while ((d >= '0')&&(d <= '9')) {
 800bfce:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	2809      	cmp	r0, #9
 800bfd6:	d80a      	bhi.n	800bfee <xprintf+0x5a>
			w += w * 10 + (d - '0');
 800bfd8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
			d = *str++;
 800bfdc:	f814 1b01 	ldrb.w	r1, [r4], #1
			w += w * 10 + (d - '0');
 800bfe0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
		while ((d >= '0')&&(d <= '9')) {
 800bfe4:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 800bfe8:	2809      	cmp	r0, #9
			w += w * 10 + (d - '0');
 800bfea:	4413      	add	r3, r2
		while ((d >= '0')&&(d <= '9')) {
 800bfec:	d9f4      	bls.n	800bfd8 <xprintf+0x44>
		if (s) w = -w;
 800bfee:	b106      	cbz	r6, 800bff2 <xprintf+0x5e>
 800bff0:	425b      	negs	r3, r3
		if (d == 'l') {
 800bff2:	296c      	cmp	r1, #108	; 0x6c
 800bff4:	d055      	beq.n	800c0a2 <xprintf+0x10e>
		d = *str++; w = r = s = l = 0;
 800bff6:	2700      	movs	r7, #0
		if (!d) break;
 800bff8:	2900      	cmp	r1, #0
 800bffa:	d0de      	beq.n	800bfba <xprintf+0x26>
		if (d == 's') {
 800bffc:	2973      	cmp	r1, #115	; 0x73
 800bffe:	f000 810e 	beq.w	800c21e <xprintf+0x28a>
		if (d == 'c') {
 800c002:	2963      	cmp	r1, #99	; 0x63
 800c004:	f000 811a 	beq.w	800c23c <xprintf+0x2a8>
		if (d == 'u') r = 10;
 800c008:	2975      	cmp	r1, #117	; 0x75
 800c00a:	d052      	beq.n	800c0b2 <xprintf+0x11e>
		if (d == 'd') r = -10;
 800c00c:	2964      	cmp	r1, #100	; 0x64
 800c00e:	f040 8097 	bne.w	800c140 <xprintf+0x1ac>
 800c012:	9900      	ldr	r1, [sp, #0]
 800c014:	f851 2b04 	ldr.w	r2, [r1], #4
		if (l) {
 800c018:	2f00      	cmp	r7, #0
 800c01a:	f040 8121 	bne.w	800c260 <xprintf+0x2cc>
		if (val < 0) {
 800c01e:	2a00      	cmp	r2, #0
				xitoa((long)va_arg(arp, int), r, w);
 800c020:	9100      	str	r1, [sp, #0]
		if (val < 0) {
 800c022:	f2c0 812a 	blt.w	800c27a <xprintf+0x2e6>
	if (len < 0) {
 800c026:	2b00      	cmp	r3, #0
 800c028:	f2c0 8123 	blt.w	800c272 <xprintf+0x2de>
	uint8_t c, r, sgn = 0, pad = ' ';
 800c02c:	f04f 0c20 	mov.w	ip, #32
	if (len > 20) return;
 800c030:	2b14      	cmp	r3, #20
 800c032:	dcb8      	bgt.n	800bfa6 <xprintf+0x12>
	v = val;
 800c034:	4611      	mov	r1, r2
	uint8_t s[20], i = 0;
 800c036:	f04f 0e00 	mov.w	lr, #0
 800c03a:	e000      	b.n	800c03e <xprintf+0xaa>
		s[i++] = c;
 800c03c:	46b6      	mov	lr, r6
		c = (uint8_t)(v % r);
 800c03e:	fba5 2001 	umull	r2, r0, r5, r1
		s[i++] = c;
 800c042:	f10e 0601 	add.w	r6, lr, #1
		c = (uint8_t)(v % r);
 800c046:	08c0      	lsrs	r0, r0, #3
		s[i++] = c;
 800c048:	b2f6      	uxtb	r6, r6
		c = (uint8_t)(v % r);
 800c04a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800c04e:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
	} while (v);
 800c052:	4601      	mov	r1, r0
		s[i++] = c;
 800c054:	a806      	add	r0, sp, #24
		c += '0';
 800c056:	3230      	adds	r2, #48	; 0x30
		s[i++] = c;
 800c058:	4470      	add	r0, lr
 800c05a:	f800 2c14 	strb.w	r2, [r0, #-20]
	} while (v);
 800c05e:	2900      	cmp	r1, #0
 800c060:	d1ec      	bne.n	800c03c <xprintf+0xa8>
 800c062:	4632      	mov	r2, r6
	if (sgn) s[i++] = sgn;
 800c064:	b17f      	cbz	r7, 800c086 <xprintf+0xf2>
 800c066:	f10e 0602 	add.w	r6, lr, #2
 800c06a:	a906      	add	r1, sp, #24
 800c06c:	b2f6      	uxtb	r6, r6
 800c06e:	440a      	add	r2, r1
 800c070:	f802 7c14 	strb.w	r7, [r2, #-20]
 800c074:	4632      	mov	r2, r6
 800c076:	e006      	b.n	800c086 <xprintf+0xf2>
		s[i++] = pad;
 800c078:	3601      	adds	r6, #1
 800c07a:	a906      	add	r1, sp, #24
 800c07c:	b2f6      	uxtb	r6, r6
 800c07e:	440a      	add	r2, r1
 800c080:	f802 cc14 	strb.w	ip, [r2, #-20]
	while (i < len)
 800c084:	4632      	mov	r2, r6
 800c086:	42b3      	cmp	r3, r6
 800c088:	dcf6      	bgt.n	800c078 <xprintf+0xe4>
 800c08a:	3e01      	subs	r6, #1
 800c08c:	af01      	add	r7, sp, #4
 800c08e:	b2f6      	uxtb	r6, r6
 800c090:	3601      	adds	r6, #1
 800c092:	443e      	add	r6, r7
	debug_chr(c);
 800c094:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 800c098:	f7f6 fc5c 	bl	8002954 <debug_chr>
	while (i);
 800c09c:	42be      	cmp	r6, r7
 800c09e:	d1f9      	bne.n	800c094 <xprintf+0x100>
 800c0a0:	e781      	b.n	800bfa6 <xprintf+0x12>
			l = 1;
 800c0a2:	2701      	movs	r7, #1
			d = *str++;
 800c0a4:	7821      	ldrb	r1, [r4, #0]
 800c0a6:	443c      	add	r4, r7
 800c0a8:	e7a6      	b.n	800bff8 <xprintf+0x64>
			d = *str++; s = 1;
 800c0aa:	78a1      	ldrb	r1, [r4, #2]
 800c0ac:	2601      	movs	r6, #1
 800c0ae:	3403      	adds	r4, #3
 800c0b0:	e78d      	b.n	800bfce <xprintf+0x3a>
 800c0b2:	9800      	ldr	r0, [sp, #0]
 800c0b4:	f850 2b04 	ldr.w	r2, [r0], #4
		if (l) {
 800c0b8:	2f00      	cmp	r7, #0
 800c0ba:	f040 80c6 	bne.w	800c24a <xprintf+0x2b6>
 800c0be:	f04f 0c0a 	mov.w	ip, #10
	if (len < 0) {
 800c0c2:	2b00      	cmp	r3, #0
				xitoa((unsigned long)va_arg(arp, int), r, w);
 800c0c4:	9000      	str	r0, [sp, #0]
	if (len < 0) {
 800c0c6:	db78      	blt.n	800c1ba <xprintf+0x226>
	uint8_t c, r, sgn = 0, pad = ' ';
 800c0c8:	2620      	movs	r6, #32
	if (len > 20) return;
 800c0ca:	2b14      	cmp	r3, #20
 800c0cc:	f73f af6b 	bgt.w	800bfa6 <xprintf+0x12>
	v = val;
 800c0d0:	4611      	mov	r1, r2
	uint8_t s[20], i = 0;
 800c0d2:	2200      	movs	r2, #0
		s[i++] = c;
 800c0d4:	a806      	add	r0, sp, #24
 800c0d6:	f102 0901 	add.w	r9, r2, #1
		c = (uint8_t)(v % r);
 800c0da:	fbb1 f7fc 	udiv	r7, r1, ip
 800c0de:	fb0c 1117 	mls	r1, ip, r7, r1
		s[i++] = c;
 800c0e2:	eb00 0802 	add.w	r8, r0, r2
 800c0e6:	46ce      	mov	lr, r9
 800c0e8:	fa5f f289 	uxtb.w	r2, r9
		c = (uint8_t)(v % r);
 800c0ec:	b2c8      	uxtb	r0, r1
		if (c >= 10) c += 7;
 800c0ee:	2909      	cmp	r1, #9
		c += '0';
 800c0f0:	f100 0937 	add.w	r9, r0, #55	; 0x37
 800c0f4:	f100 0030 	add.w	r0, r0, #48	; 0x30
		if (c >= 10) c += 7;
 800c0f8:	d91a      	bls.n	800c130 <xprintf+0x19c>
		s[i++] = c;
 800c0fa:	f808 9c14 	strb.w	r9, [r8, #-20]
	} while (v);
 800c0fe:	4639      	mov	r1, r7
 800c100:	2f00      	cmp	r7, #0
 800c102:	d1e7      	bne.n	800c0d4 <xprintf+0x140>
 800c104:	e005      	b.n	800c112 <xprintf+0x17e>
		s[i++] = pad;
 800c106:	3201      	adds	r2, #1
 800c108:	a806      	add	r0, sp, #24
 800c10a:	b2d2      	uxtb	r2, r2
 800c10c:	4401      	add	r1, r0
 800c10e:	f801 6c14 	strb.w	r6, [r1, #-20]
	while (i < len)
 800c112:	4293      	cmp	r3, r2
 800c114:	4611      	mov	r1, r2
 800c116:	dcf6      	bgt.n	800c106 <xprintf+0x172>
 800c118:	1e56      	subs	r6, r2, #1
 800c11a:	af01      	add	r7, sp, #4
 800c11c:	b2f6      	uxtb	r6, r6
 800c11e:	3601      	adds	r6, #1
 800c120:	443e      	add	r6, r7
	debug_chr(c);
 800c122:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 800c126:	f7f6 fc15 	bl	8002954 <debug_chr>
	while (i);
 800c12a:	42b7      	cmp	r7, r6
 800c12c:	d1f9      	bne.n	800c122 <xprintf+0x18e>
 800c12e:	e73a      	b.n	800bfa6 <xprintf+0x12>
		s[i++] = c;
 800c130:	fa5f f28e 	uxtb.w	r2, lr
 800c134:	f808 0c14 	strb.w	r0, [r8, #-20]
	} while (v);
 800c138:	4639      	mov	r1, r7
 800c13a:	2f00      	cmp	r7, #0
 800c13c:	d1ca      	bne.n	800c0d4 <xprintf+0x140>
 800c13e:	e7e8      	b.n	800c112 <xprintf+0x17e>
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
 800c140:	f021 0220 	bic.w	r2, r1, #32
 800c144:	2a58      	cmp	r2, #88	; 0x58
 800c146:	d02c      	beq.n	800c1a2 <xprintf+0x20e>
		if (d == 'b') r = 2;
 800c148:	2962      	cmp	r1, #98	; 0x62
 800c14a:	f47f af36 	bne.w	800bfba <xprintf+0x26>
 800c14e:	9800      	ldr	r0, [sp, #0]
		if (l) {
 800c150:	f04f 0c02 	mov.w	ip, #2
 800c154:	f850 2b04 	ldr.w	r2, [r0], #4
 800c158:	2f00      	cmp	r7, #0
 800c15a:	d0b2      	beq.n	800c0c2 <xprintf+0x12e>
	uint8_t c, r, sgn = 0, pad = ' ';
 800c15c:	f04f 0800 	mov.w	r8, #0
			xitoa((long)va_arg(arp, long), r, w);
 800c160:	9000      	str	r0, [sp, #0]
	if (len < 0) {
 800c162:	2b00      	cmp	r3, #0
 800c164:	db78      	blt.n	800c258 <xprintf+0x2c4>
	uint8_t c, r, sgn = 0, pad = ' ';
 800c166:	f04f 0e20 	mov.w	lr, #32
	if (len > 20) return;
 800c16a:	2b14      	cmp	r3, #20
 800c16c:	f73f af1b 	bgt.w	800bfa6 <xprintf+0x12>
	v = val;
 800c170:	4611      	mov	r1, r2
	uint8_t s[20], i = 0;
 800c172:	2200      	movs	r2, #0
		s[i++] = c;
 800c174:	a806      	add	r0, sp, #24
 800c176:	1c56      	adds	r6, r2, #1
		c = (uint8_t)(v % r);
 800c178:	fbb1 f7fc 	udiv	r7, r1, ip
 800c17c:	fb0c 1117 	mls	r1, ip, r7, r1
		s[i++] = c;
 800c180:	eb00 0a02 	add.w	sl, r0, r2
 800c184:	46b1      	mov	r9, r6
 800c186:	b2f6      	uxtb	r6, r6
		c = (uint8_t)(v % r);
 800c188:	b2c8      	uxtb	r0, r1
		if (c >= 10) c += 7;
 800c18a:	2909      	cmp	r1, #9
		c += '0';
 800c18c:	f100 0b37 	add.w	fp, r0, #55	; 0x37
 800c190:	f100 0030 	add.w	r0, r0, #48	; 0x30
		if (c >= 10) c += 7;
 800c194:	d914      	bls.n	800c1c0 <xprintf+0x22c>
		s[i++] = c;
 800c196:	f80a bc14 	strb.w	fp, [sl, #-20]
	} while (v);
 800c19a:	4639      	mov	r1, r7
 800c19c:	b1bf      	cbz	r7, 800c1ce <xprintf+0x23a>
		pad = '0';
 800c19e:	4632      	mov	r2, r6
 800c1a0:	e7e8      	b.n	800c174 <xprintf+0x1e0>
 800c1a2:	9800      	ldr	r0, [sp, #0]
		if (d == 'b') r = 2;
 800c1a4:	2962      	cmp	r1, #98	; 0x62
 800c1a6:	f850 2b04 	ldr.w	r2, [r0], #4
 800c1aa:	d132      	bne.n	800c212 <xprintf+0x27e>
		if (l) {
 800c1ac:	f04f 0c02 	mov.w	ip, #2
 800c1b0:	2f00      	cmp	r7, #0
 800c1b2:	d1d3      	bne.n	800c15c <xprintf+0x1c8>
	if (len < 0) {
 800c1b4:	2b00      	cmp	r3, #0
				xitoa((unsigned long)va_arg(arp, int), r, w);
 800c1b6:	9000      	str	r0, [sp, #0]
	if (len < 0) {
 800c1b8:	da86      	bge.n	800c0c8 <xprintf+0x134>
		len = -len;
 800c1ba:	425b      	negs	r3, r3
		pad = '0';
 800c1bc:	2630      	movs	r6, #48	; 0x30
 800c1be:	e784      	b.n	800c0ca <xprintf+0x136>
		s[i++] = c;
 800c1c0:	fa5f f689 	uxtb.w	r6, r9
 800c1c4:	f80a 0c14 	strb.w	r0, [sl, #-20]
	} while (v);
 800c1c8:	4639      	mov	r1, r7
 800c1ca:	2f00      	cmp	r7, #0
 800c1cc:	d1e7      	bne.n	800c19e <xprintf+0x20a>
 800c1ce:	4631      	mov	r1, r6
	if (sgn) s[i++] = sgn;
 800c1d0:	f1b8 0f00 	cmp.w	r8, #0
 800c1d4:	d00f      	beq.n	800c1f6 <xprintf+0x262>
 800c1d6:	1c96      	adds	r6, r2, #2
 800c1d8:	aa06      	add	r2, sp, #24
 800c1da:	b2f6      	uxtb	r6, r6
 800c1dc:	4411      	add	r1, r2
	while (i < len)
 800c1de:	42b3      	cmp	r3, r6
	if (sgn) s[i++] = sgn;
 800c1e0:	f801 8c14 	strb.w	r8, [r1, #-20]
 800c1e4:	4631      	mov	r1, r6
	while (i < len)
 800c1e6:	dd08      	ble.n	800c1fa <xprintf+0x266>
		s[i++] = pad;
 800c1e8:	3601      	adds	r6, #1
 800c1ea:	aa06      	add	r2, sp, #24
 800c1ec:	b2f6      	uxtb	r6, r6
 800c1ee:	4411      	add	r1, r2
 800c1f0:	f801 ec14 	strb.w	lr, [r1, #-20]
	while (i < len)
 800c1f4:	4631      	mov	r1, r6
 800c1f6:	42b3      	cmp	r3, r6
 800c1f8:	dcf6      	bgt.n	800c1e8 <xprintf+0x254>
 800c1fa:	3e01      	subs	r6, #1
 800c1fc:	af01      	add	r7, sp, #4
 800c1fe:	b2f6      	uxtb	r6, r6
 800c200:	3601      	adds	r6, #1
 800c202:	443e      	add	r6, r7
	debug_chr(c);
 800c204:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 800c208:	f7f6 fba4 	bl	8002954 <debug_chr>
	while (i);
 800c20c:	42b7      	cmp	r7, r6
 800c20e:	d1f9      	bne.n	800c204 <xprintf+0x270>
 800c210:	e6c9      	b.n	800bfa6 <xprintf+0x12>
		if (l) {
 800c212:	f04f 0c10 	mov.w	ip, #16
 800c216:	2f00      	cmp	r7, #0
 800c218:	f43f af53 	beq.w	800c0c2 <xprintf+0x12e>
 800c21c:	e79e      	b.n	800c15c <xprintf+0x1c8>
			xputs(va_arg(arp, char*));
 800c21e:	9b00      	ldr	r3, [sp, #0]
 800c220:	681e      	ldr	r6, [r3, #0]
 800c222:	3304      	adds	r3, #4
	while (*str)
 800c224:	7830      	ldrb	r0, [r6, #0]
			xputs(va_arg(arp, char*));
 800c226:	9300      	str	r3, [sp, #0]
	while (*str)
 800c228:	2800      	cmp	r0, #0
 800c22a:	f43f aebc 	beq.w	800bfa6 <xprintf+0x12>
	debug_chr(c);
 800c22e:	f7f6 fb91 	bl	8002954 <debug_chr>
	while (*str)
 800c232:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 800c236:	2800      	cmp	r0, #0
 800c238:	d1f9      	bne.n	800c22e <xprintf+0x29a>
 800c23a:	e6b4      	b.n	800bfa6 <xprintf+0x12>
			xputc((char)va_arg(arp, int));
 800c23c:	9b00      	ldr	r3, [sp, #0]
 800c23e:	1d1a      	adds	r2, r3, #4
	debug_chr(c);
 800c240:	7818      	ldrb	r0, [r3, #0]
			xputc((char)va_arg(arp, int));
 800c242:	9200      	str	r2, [sp, #0]
	debug_chr(c);
 800c244:	f7f6 fb86 	bl	8002954 <debug_chr>
			continue;
 800c248:	e6ad      	b.n	800bfa6 <xprintf+0x12>
			xitoa((long)va_arg(arp, long), r, w);
 800c24a:	9000      	str	r0, [sp, #0]
	if (len < 0) {
 800c24c:	2b00      	cmp	r3, #0
	uint8_t c, r, sgn = 0, pad = ' ';
 800c24e:	f04f 0800 	mov.w	r8, #0
		if (d == 'u') r = 10;
 800c252:	f04f 0c0a 	mov.w	ip, #10
	if (len < 0) {
 800c256:	da86      	bge.n	800c166 <xprintf+0x1d2>
		len = -len;
 800c258:	425b      	negs	r3, r3
		pad = '0';
 800c25a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800c25e:	e784      	b.n	800c16a <xprintf+0x1d6>
		if (val < 0) {
 800c260:	2a00      	cmp	r2, #0
			xitoa((long)va_arg(arp, long), r, w);
 800c262:	9100      	str	r1, [sp, #0]
		if (val < 0) {
 800c264:	daf2      	bge.n	800c24c <xprintf+0x2b8>
			val = -val;
 800c266:	4252      	negs	r2, r2
			sgn = '-';
 800c268:	f04f 082d 	mov.w	r8, #45	; 0x2d
		radix = -radix;
 800c26c:	f04f 0c0a 	mov.w	ip, #10
 800c270:	e777      	b.n	800c162 <xprintf+0x1ce>
		len = -len;
 800c272:	425b      	negs	r3, r3
		pad = '0';
 800c274:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800c278:	e6da      	b.n	800c030 <xprintf+0x9c>
			val = -val;
 800c27a:	4252      	negs	r2, r2
			sgn = '-';
 800c27c:	272d      	movs	r7, #45	; 0x2d
 800c27e:	e6d2      	b.n	800c026 <xprintf+0x92>
 800c280:	cccccccd 	.word	0xcccccccd

0800c284 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c284:	2904      	cmp	r1, #4
 800c286:	d00b      	beq.n	800c2a0 <USBH_UserProcess+0x1c>
 800c288:	2905      	cmp	r1, #5
 800c28a:	d005      	beq.n	800c298 <USBH_UserProcess+0x14>
 800c28c:	2902      	cmp	r1, #2
 800c28e:	d000      	beq.n	800c292 <USBH_UserProcess+0xe>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c290:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 800c292:	4b05      	ldr	r3, [pc, #20]	; (800c2a8 <USBH_UserProcess+0x24>)
 800c294:	7019      	strb	r1, [r3, #0]
  break;
 800c296:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800c298:	4b03      	ldr	r3, [pc, #12]	; (800c2a8 <USBH_UserProcess+0x24>)
 800c29a:	2203      	movs	r2, #3
 800c29c:	701a      	strb	r2, [r3, #0]
  break;
 800c29e:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 800c2a0:	4b01      	ldr	r3, [pc, #4]	; (800c2a8 <USBH_UserProcess+0x24>)
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	701a      	strb	r2, [r3, #0]
}
 800c2a6:	4770      	bx	lr
 800c2a8:	20005eb8 	.word	0x20005eb8

0800c2ac <MX_USB_HOST_Init>:
{
 800c2ac:	b510      	push	{r4, lr}
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 800c2ae:	4c07      	ldr	r4, [pc, #28]	; (800c2cc <MX_USB_HOST_Init+0x20>)
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	4907      	ldr	r1, [pc, #28]	; (800c2d0 <MX_USB_HOST_Init+0x24>)
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	f00a fe79 	bl	8016fac <USBH_Init>
  USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS);
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	4905      	ldr	r1, [pc, #20]	; (800c2d4 <MX_USB_HOST_Init+0x28>)
 800c2be:	f00a fecf 	bl	8017060 <USBH_RegisterClass>
  USBH_Start(&hUsbHostFS);
 800c2c2:	4620      	mov	r0, r4
}
 800c2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBH_Start(&hUsbHostFS);
 800c2c8:	f00a bf68 	b.w	801719c <USBH_Start>
 800c2cc:	20012a84 	.word	0x20012a84
 800c2d0:	0800c285 	.word	0x0800c285
 800c2d4:	20000098 	.word	0x20000098

0800c2d8 <HAL_HCD_MspInit>:
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 800c2d8:	6803      	ldr	r3, [r0, #0]
 800c2da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2de:	d000      	beq.n	800c2e2 <HAL_HCD_MspInit+0xa>
 800c2e0:	4770      	bx	lr
{
 800c2e2:	b530      	push	{r4, r5, lr}
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800c2e4:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
{
 800c2e8:	b089      	sub	sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2ea:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2ec:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c2ee:	230a      	movs	r3, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2f0:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2f2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800c2f4:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2f6:	4812      	ldr	r0, [pc, #72]	; (800c340 <HAL_HCD_MspInit+0x68>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c2f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2fc:	e9cd 5404 	strd	r5, r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c300:	f003 fdfa 	bl	800fef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c304:	4b0f      	ldr	r3, [pc, #60]	; (800c344 <HAL_HCD_MspInit+0x6c>)

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c306:	4622      	mov	r2, r4
 800c308:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c30a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c30c:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c30e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800c312:	635c      	str	r4, [r3, #52]	; 0x34
 800c314:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800c316:	f004 0480 	and.w	r4, r4, #128	; 0x80
 800c31a:	9401      	str	r4, [sp, #4]
 800c31c:	9c01      	ldr	r4, [sp, #4]
 800c31e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800c320:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800c324:	645c      	str	r4, [r3, #68]	; 0x44
 800c326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c32c:	9302      	str	r3, [sp, #8]
 800c32e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c330:	f003 f874 	bl	800f41c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c334:	2043      	movs	r0, #67	; 0x43
 800c336:	f003 f8a7 	bl	800f488 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c33a:	b009      	add	sp, #36	; 0x24
 800c33c:	bd30      	pop	{r4, r5, pc}
 800c33e:	bf00      	nop
 800c340:	40020000 	.word	0x40020000
 800c344:	40023800 	.word	0x40023800

0800c348 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 800c348:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800c34c:	f00b b9f6 	b.w	801773c <USBH_LL_IncTimer>

0800c350 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800c350:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800c354:	f00b ba0a 	b.w	801776c <USBH_LL_Connect>

0800c358 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800c358:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800c35c:	f00b ba22 	b.w	80177a4 <USBH_LL_Disconnect>

0800c360 <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c360:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800c364:	f00b ba48 	b.w	80177f8 <USBH_LL_NotifyURBChange>

0800c368 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 800c368:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800c36c:	f00b b9f6 	b.w	801775c <USBH_LL_PortEnabled>

0800c370 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 800c370:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800c374:	f00b b9f6 	b.w	8017764 <USBH_LL_PortDisabled>

0800c378 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c378:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d001      	beq.n	800c384 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 800c380:	2000      	movs	r0, #0
 800c382:	4770      	bx	lr
{
 800c384:	b570      	push	{r4, r5, r6, lr}
  hhcd_USB_OTG_FS.pData = phost;
 800c386:	4b12      	ldr	r3, [pc, #72]	; (800c3d0 <USBH_LL_Init+0x58>)
 800c388:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c38a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c38e:	2200      	movs	r2, #0
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c390:	2608      	movs	r6, #8
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c392:	2503      	movs	r5, #3
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c394:	2102      	movs	r1, #2
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c396:	6018      	str	r0, [r3, #0]
  phost->pData = &hhcd_USB_OTG_FS;
 800c398:	f8c4 33c4 	str.w	r3, [r4, #964]	; 0x3c4
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c39c:	4618      	mov	r0, r3
  hhcd_USB_OTG_FS.pData = phost;
 800c39e:	f8c3 42c0 	str.w	r4, [r3, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c3a2:	6199      	str	r1, [r3, #24]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c3a4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c3a6:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c3a8:	e9c3 6502 	strd	r6, r5, [r3, #8]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c3ac:	f003 ffdc 	bl	8010368 <HAL_HCD_Init>
 800c3b0:	b940      	cbnz	r0, 800c3c4 <USBH_LL_Init+0x4c>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c3b2:	4807      	ldr	r0, [pc, #28]	; (800c3d0 <USBH_LL_Init+0x58>)
 800c3b4:	f004 fc8e 	bl	8010cd4 <HAL_HCD_GetCurrentFrame>
 800c3b8:	4601      	mov	r1, r0
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f00b f9ba 	bl	8017734 <USBH_LL_SetTimer>
}
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}
    _Error_Handler(__FILE__, __LINE__);
 800c3c4:	21ee      	movs	r1, #238	; 0xee
 800c3c6:	4803      	ldr	r0, [pc, #12]	; (800c3d4 <USBH_LL_Init+0x5c>)
 800c3c8:	f7fc fd22 	bl	8008e10 <_Error_Handler>
 800c3cc:	e7f1      	b.n	800c3b2 <USBH_LL_Init+0x3a>
 800c3ce:	bf00      	nop
 800c3d0:	20012e58 	.word	0x20012e58
 800c3d4:	08023f1c 	.word	0x08023f1c

0800c3d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c3d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800c3da:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800c3de:	f004 fc3f 	bl	8010c60 <HAL_HCD_Start>
 800c3e2:	2803      	cmp	r0, #3
 800c3e4:	d802      	bhi.n	800c3ec <USBH_LL_Start+0x14>
 800c3e6:	4b02      	ldr	r3, [pc, #8]	; (800c3f0 <USBH_LL_Start+0x18>)
 800c3e8:	5c18      	ldrb	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800c3ea:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_Start(phost->pData);
 800c3ec:	2002      	movs	r0, #2
}
 800c3ee:	bd08      	pop	{r3, pc}
 800c3f0:	08023f14 	.word	0x08023f14

0800c3f4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c3f4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 800c3f6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800c3fa:	f004 fc47 	bl	8010c8c <HAL_HCD_Stop>
 800c3fe:	2803      	cmp	r0, #3
 800c400:	d802      	bhi.n	800c408 <USBH_LL_Stop+0x14>
 800c402:	4b02      	ldr	r3, [pc, #8]	; (800c40c <USBH_LL_Stop+0x18>)
 800c404:	5c18      	ldrb	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800c406:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_Stop(phost->pData);
 800c408:	2002      	movs	r0, #2
}
 800c40a:	bd08      	pop	{r3, pc}
 800c40c:	08023f14 	.word	0x08023f14

0800c410 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c410:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c412:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800c416:	f004 fc61 	bl	8010cdc <HAL_HCD_GetCurrentSpeed>
 800c41a:	2802      	cmp	r0, #2
 800c41c:	d802      	bhi.n	800c424 <USBH_LL_GetSpeed+0x14>
 800c41e:	4b02      	ldr	r3, [pc, #8]	; (800c428 <USBH_LL_GetSpeed+0x18>)
 800c420:	5c18      	ldrb	r0, [r3, r0]
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 800c422:	bd08      	pop	{r3, pc}
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c424:	2001      	movs	r0, #1
}
 800c426:	bd08      	pop	{r3, pc}
 800c428:	08023f18 	.word	0x08023f18

0800c42c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c42c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c42e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800c432:	f004 fc3d 	bl	8010cb0 <HAL_HCD_ResetPort>
 800c436:	2803      	cmp	r0, #3
 800c438:	d802      	bhi.n	800c440 <USBH_LL_ResetPort+0x14>
 800c43a:	4b02      	ldr	r3, [pc, #8]	; (800c444 <USBH_LL_ResetPort+0x18>)
 800c43c:	5c18      	ldrb	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800c43e:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c440:	2002      	movs	r0, #2
}
 800c442:	bd08      	pop	{r3, pc}
 800c444:	08023f14 	.word	0x08023f14

0800c448 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c448:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800c44c:	f004 bc3c 	b.w	8010cc8 <HAL_HCD_HC_GetXferCount>

0800c450 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c450:	b530      	push	{r4, r5, lr}
 800c452:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c454:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
{
 800c458:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800c45c:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c460:	9400      	str	r4, [sp, #0]
{
 800c462:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c466:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800c46a:	f003 ff31 	bl	80102d0 <HAL_HCD_HC_Init>
 800c46e:	2803      	cmp	r0, #3
 800c470:	d803      	bhi.n	800c47a <USBH_LL_OpenPipe+0x2a>
 800c472:	4b03      	ldr	r3, [pc, #12]	; (800c480 <USBH_LL_OpenPipe+0x30>)
 800c474:	5c18      	ldrb	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800c476:	b005      	add	sp, #20
 800c478:	bd30      	pop	{r4, r5, pc}
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c47a:	2002      	movs	r0, #2
}
 800c47c:	b005      	add	sp, #20
 800c47e:	bd30      	pop	{r4, r5, pc}
 800c480:	08023f14 	.word	0x08023f14

0800c484 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c484:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c486:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800c48a:	f003 ff5b 	bl	8010344 <HAL_HCD_HC_Halt>
 800c48e:	2803      	cmp	r0, #3
 800c490:	d802      	bhi.n	800c498 <USBH_LL_ClosePipe+0x14>
 800c492:	4b02      	ldr	r3, [pc, #8]	; (800c49c <USBH_LL_ClosePipe+0x18>)
 800c494:	5c18      	ldrb	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800c496:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c498:	2002      	movs	r0, #2
}
 800c49a:	bd08      	pop	{r3, pc}
 800c49c:	08023f14 	.word	0x08023f14

0800c4a0 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c4a0:	b530      	push	{r4, r5, lr}
 800c4a2:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c4a4:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
{
 800c4a8:	f89d 5020 	ldrb.w	r5, [sp, #32]
 800c4ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c4ae:	9500      	str	r5, [sp, #0]
 800c4b0:	9401      	str	r4, [sp, #4]
{
 800c4b2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 800c4b6:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c4ba:	e9cd 5402 	strd	r5, r4, [sp, #8]
 800c4be:	f003 ff9b 	bl	80103f8 <HAL_HCD_HC_SubmitRequest>
 800c4c2:	2803      	cmp	r0, #3
 800c4c4:	d803      	bhi.n	800c4ce <USBH_LL_SubmitURB+0x2e>
 800c4c6:	4b03      	ldr	r3, [pc, #12]	; (800c4d4 <USBH_LL_SubmitURB+0x34>)
 800c4c8:	5c18      	ldrb	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800c4ca:	b005      	add	sp, #20
 800c4cc:	bd30      	pop	{r4, r5, pc}
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c4ce:	2002      	movs	r0, #2
}
 800c4d0:	b005      	add	sp, #20
 800c4d2:	bd30      	pop	{r4, r5, pc}
 800c4d4:	08023f14 	.word	0x08023f14

0800c4d8 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c4d8:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800c4dc:	f004 bbec 	b.w	8010cb8 <HAL_HCD_HC_GetURBState>

0800c4e0 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c4e0:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800c4e2:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d004      	beq.n	800c4f4 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c4ea:	20c8      	movs	r0, #200	; 0xc8
 800c4ec:	f002 fe06 	bl	800f0fc <HAL_Delay>
  return USBH_OK;
}
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 800c4f4:	4608      	mov	r0, r1
 800c4f6:	f000 f8db 	bl	800c6b0 <MX_DriverVbusFS>
  HAL_Delay(200);
 800c4fa:	20c8      	movs	r0, #200	; 0xc8
 800c4fc:	f002 fdfe 	bl	800f0fc <HAL_Delay>
}
 800c500:	2000      	movs	r0, #0
 800c502:	bd08      	pop	{r3, pc}

0800c504 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c504:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 800c508:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c50c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c510:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800c514:	b91b      	cbnz	r3, 800c51e <USBH_LL_SetToggle+0x1a>
  {
    pHandle->hc[pipe].toggle_in = toggle;
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c516:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
  }

  return USBH_OK;
}
 800c51a:	2000      	movs	r0, #0
 800c51c:	4770      	bx	lr
    pHandle->hc[pipe].toggle_in = toggle;
 800c51e:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
}
 800c522:	2000      	movs	r0, #0
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop

0800c528 <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c528:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 800c52c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c530:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c534:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800c538:	b913      	cbnz	r3, 800c540 <USBH_LL_GetToggle+0x18>
  {
    toggle = pHandle->hc[pipe].toggle_in;
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800c53a:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle;
}
 800c53e:	4770      	bx	lr
    toggle = pHandle->hc[pipe].toggle_in;
 800c540:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop

0800c548 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800c548:	f002 bdd8 	b.w	800f0fc <HAL_Delay>

0800c54c <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 800c54c:	2000      	movs	r0, #0
 800c54e:	4770      	bx	lr

0800c550 <USBH_status>:
  */
DSTATUS USBH_status(BYTE lun)
{
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800c550:	4601      	mov	r1, r0
 800c552:	4804      	ldr	r0, [pc, #16]	; (800c564 <USBH_status+0x14>)
{
 800c554:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800c556:	f00a f82b 	bl	80165b0 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 800c55a:	fab0 f080 	clz	r0, r0
 800c55e:	0940      	lsrs	r0, r0, #5
 800c560:	bd08      	pop	{r3, pc}
 800c562:	bf00      	nop
 800c564:	20012a84 	.word	0x20012a84

0800c568 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c568:	b510      	push	{r4, lr}
 800c56a:	4614      	mov	r4, r2
 800c56c:	b08e      	sub	sp, #56	; 0x38
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 800c56e:	2903      	cmp	r1, #3
 800c570:	d82a      	bhi.n	800c5c8 <USBH_ioctl+0x60>
 800c572:	e8df f001 	tbb	[pc, r1]
 800c576:	1c02      	.short	0x1c02
 800c578:	0511      	.short	0x0511
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800c57a:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 800c57c:	b00e      	add	sp, #56	; 0x38
 800c57e:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800c580:	4601      	mov	r1, r0
 800c582:	aa01      	add	r2, sp, #4
 800c584:	4812      	ldr	r0, [pc, #72]	; (800c5d0 <USBH_ioctl+0x68>)
 800c586:	f00a f825 	bl	80165d4 <USBH_MSC_GetLUNInfo>
 800c58a:	b9d0      	cbnz	r0, 800c5c2 <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800c58c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c590:	0a5b      	lsrs	r3, r3, #9
 800c592:	6023      	str	r3, [r4, #0]
}
 800c594:	b00e      	add	sp, #56	; 0x38
 800c596:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800c598:	4601      	mov	r1, r0
 800c59a:	aa01      	add	r2, sp, #4
 800c59c:	480c      	ldr	r0, [pc, #48]	; (800c5d0 <USBH_ioctl+0x68>)
 800c59e:	f00a f819 	bl	80165d4 <USBH_MSC_GetLUNInfo>
 800c5a2:	b970      	cbnz	r0, 800c5c2 <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_size;
 800c5a4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c5a8:	6023      	str	r3, [r4, #0]
}
 800c5aa:	b00e      	add	sp, #56	; 0x38
 800c5ac:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800c5ae:	4601      	mov	r1, r0
 800c5b0:	aa01      	add	r2, sp, #4
 800c5b2:	4807      	ldr	r0, [pc, #28]	; (800c5d0 <USBH_ioctl+0x68>)
 800c5b4:	f00a f80e 	bl	80165d4 <USBH_MSC_GetLUNInfo>
 800c5b8:	b918      	cbnz	r0, 800c5c2 <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_nbr;
 800c5ba:	9b02      	ldr	r3, [sp, #8]
 800c5bc:	6023      	str	r3, [r4, #0]
}
 800c5be:	b00e      	add	sp, #56	; 0x38
 800c5c0:	bd10      	pop	{r4, pc}
      res = RES_ERROR;
 800c5c2:	2001      	movs	r0, #1
}
 800c5c4:	b00e      	add	sp, #56	; 0x38
 800c5c6:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 800c5c8:	2004      	movs	r0, #4
}
 800c5ca:	b00e      	add	sp, #56	; 0x38
 800c5cc:	bd10      	pop	{r4, pc}
 800c5ce:	bf00      	nop
 800c5d0:	20012a84 	.word	0x20012a84

0800c5d4 <USBH_read>:
{
 800c5d4:	b510      	push	{r4, lr}
 800c5d6:	4604      	mov	r4, r0
 800c5d8:	b090      	sub	sp, #64	; 0x40
  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800c5da:	4812      	ldr	r0, [pc, #72]	; (800c624 <USBH_read+0x50>)
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	460b      	mov	r3, r1
 800c5e0:	4621      	mov	r1, r4
 800c5e2:	f00a f81f 	bl	8016624 <USBH_MSC_Read>
 800c5e6:	b908      	cbnz	r0, 800c5ec <USBH_read+0x18>
}
 800c5e8:	b010      	add	sp, #64	; 0x40
 800c5ea:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	aa03      	add	r2, sp, #12
 800c5f0:	480c      	ldr	r0, [pc, #48]	; (800c624 <USBH_read+0x50>)
 800c5f2:	f009 ffef 	bl	80165d4 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 800c5f6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c5fa:	2b28      	cmp	r3, #40	; 0x28
 800c5fc:	d006      	beq.n	800c60c <USBH_read+0x38>
 800c5fe:	2b3a      	cmp	r3, #58	; 0x3a
 800c600:	d004      	beq.n	800c60c <USBH_read+0x38>
 800c602:	2b04      	cmp	r3, #4
 800c604:	d002      	beq.n	800c60c <USBH_read+0x38>
      res = RES_ERROR;
 800c606:	2001      	movs	r0, #1
}
 800c608:	b010      	add	sp, #64	; 0x40
 800c60a:	bd10      	pop	{r4, pc}
      USBH_ErrLog ("USB Disk is not ready!");
 800c60c:	4806      	ldr	r0, [pc, #24]	; (800c628 <USBH_read+0x54>)
 800c60e:	f013 f931 	bl	801f874 <iprintf>
 800c612:	4806      	ldr	r0, [pc, #24]	; (800c62c <USBH_read+0x58>)
 800c614:	f013 f92e 	bl	801f874 <iprintf>
 800c618:	200a      	movs	r0, #10
 800c61a:	f013 f943 	bl	801f8a4 <putchar>
 800c61e:	2003      	movs	r0, #3
 800c620:	e7e2      	b.n	800c5e8 <USBH_read+0x14>
 800c622:	bf00      	nop
 800c624:	20012a84 	.word	0x20012a84
 800c628:	08023f48 	.word	0x08023f48
 800c62c:	08023f50 	.word	0x08023f50

0800c630 <USBH_write>:
{
 800c630:	b510      	push	{r4, lr}
 800c632:	4604      	mov	r4, r0
 800c634:	b090      	sub	sp, #64	; 0x40
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800c636:	481a      	ldr	r0, [pc, #104]	; (800c6a0 <USBH_write+0x70>)
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	460b      	mov	r3, r1
 800c63c:	4621      	mov	r1, r4
 800c63e:	f00a f8d5 	bl	80167ec <USBH_MSC_Write>
 800c642:	b908      	cbnz	r0, 800c648 <USBH_write+0x18>
}
 800c644:	b010      	add	sp, #64	; 0x40
 800c646:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800c648:	4621      	mov	r1, r4
 800c64a:	aa03      	add	r2, sp, #12
 800c64c:	4814      	ldr	r0, [pc, #80]	; (800c6a0 <USBH_write+0x70>)
 800c64e:	f009 ffc1 	bl	80165d4 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 800c652:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c656:	2b27      	cmp	r3, #39	; 0x27
 800c658:	d015      	beq.n	800c686 <USBH_write+0x56>
 800c65a:	d906      	bls.n	800c66a <USBH_write+0x3a>
 800c65c:	2b28      	cmp	r3, #40	; 0x28
 800c65e:	d006      	beq.n	800c66e <USBH_write+0x3e>
 800c660:	2b3a      	cmp	r3, #58	; 0x3a
 800c662:	d004      	beq.n	800c66e <USBH_write+0x3e>
      res = RES_ERROR;
 800c664:	2001      	movs	r0, #1
}
 800c666:	b010      	add	sp, #64	; 0x40
 800c668:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
 800c66a:	2b04      	cmp	r3, #4
 800c66c:	d1fa      	bne.n	800c664 <USBH_write+0x34>
      USBH_ErrLog ("USB Disk is not ready!");
 800c66e:	480d      	ldr	r0, [pc, #52]	; (800c6a4 <USBH_write+0x74>)
 800c670:	f013 f900 	bl	801f874 <iprintf>
 800c674:	480c      	ldr	r0, [pc, #48]	; (800c6a8 <USBH_write+0x78>)
 800c676:	f013 f8fd 	bl	801f874 <iprintf>
 800c67a:	200a      	movs	r0, #10
 800c67c:	f013 f912 	bl	801f8a4 <putchar>
 800c680:	2003      	movs	r0, #3
}
 800c682:	b010      	add	sp, #64	; 0x40
 800c684:	bd10      	pop	{r4, pc}
      USBH_ErrLog("USB Disk is Write protected!");
 800c686:	4807      	ldr	r0, [pc, #28]	; (800c6a4 <USBH_write+0x74>)
 800c688:	f013 f8f4 	bl	801f874 <iprintf>
 800c68c:	4807      	ldr	r0, [pc, #28]	; (800c6ac <USBH_write+0x7c>)
 800c68e:	f013 f8f1 	bl	801f874 <iprintf>
 800c692:	200a      	movs	r0, #10
 800c694:	f013 f906 	bl	801f8a4 <putchar>
      res = RES_WRPRT;
 800c698:	2002      	movs	r0, #2
}
 800c69a:	b010      	add	sp, #64	; 0x40
 800c69c:	bd10      	pop	{r4, pc}
 800c69e:	bf00      	nop
 800c6a0:	20012a84 	.word	0x20012a84
 800c6a4:	08023f48 	.word	0x08023f48
 800c6a8:	08023f50 	.word	0x08023f50
 800c6ac:	08023f68 	.word	0x08023f68

0800c6b0 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 800c6b0:	fab0 f280 	clz	r2, r0
 800c6b4:	2120      	movs	r1, #32
 800c6b6:	4802      	ldr	r0, [pc, #8]	; (800c6c0 <MX_DriverVbusFS+0x10>)
 800c6b8:	0952      	lsrs	r2, r2, #5
 800c6ba:	f003 be05 	b.w	80102c8 <HAL_GPIO_WritePin>
 800c6be:	bf00      	nop
 800c6c0:	40020c00 	.word	0x40020c00

0800c6c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800c6c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c6fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c6c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c6ca:	e003      	b.n	800c6d4 <LoopCopyDataInit>

0800c6cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c6cc:	4b0c      	ldr	r3, [pc, #48]	; (800c700 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c6ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c6d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c6d2:	3104      	adds	r1, #4

0800c6d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c6d4:	480b      	ldr	r0, [pc, #44]	; (800c704 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c6d6:	4b0c      	ldr	r3, [pc, #48]	; (800c708 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c6d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c6da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c6dc:	d3f6      	bcc.n	800c6cc <CopyDataInit>
  ldr  r2, =_sbss
 800c6de:	4a0b      	ldr	r2, [pc, #44]	; (800c70c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c6e0:	e002      	b.n	800c6e8 <LoopFillZerobss>

0800c6e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c6e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c6e4:	f842 3b04 	str.w	r3, [r2], #4

0800c6e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c6e8:	4b09      	ldr	r3, [pc, #36]	; (800c710 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c6ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c6ec:	d3f9      	bcc.n	800c6e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800c6ee:	f7ff fc29 	bl	800bf44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c6f2:	f012 ffb7 	bl	801f664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c6f6:	f7fb fe09 	bl	800830c <main>
  bx  lr    
 800c6fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c6fc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800c700:	080263b8 	.word	0x080263b8
  ldr  r0, =_sdata
 800c704:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c708:	20000120 	.word	0x20000120
  ldr  r2, =_sbss
 800c70c:	20000120 	.word	0x20000120
  ldr  r3, = _ebss
 800c710:	20013284 	.word	0x20013284

0800c714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c714:	e7fe      	b.n	800c714 <ADC_IRQHandler>
	...

0800c718 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop

0800c71c <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 800c71c:	2000      	movs	r0, #0
 800c71e:	4770      	bx	lr

0800c720 <ft5336_Init>:
{
 800c720:	b510      	push	{r4, lr}
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 800c722:	4c06      	ldr	r4, [pc, #24]	; (800c73c <ft5336_Init+0x1c>)
  TS_IO_Delay(200);
 800c724:	20c8      	movs	r0, #200	; 0xc8
 800c726:	f001 f8b1 	bl	800d88c <TS_IO_Delay>
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800c72a:	7823      	ldrb	r3, [r4, #0]
 800c72c:	b103      	cbz	r3, 800c730 <ft5336_Init+0x10>
}
 800c72e:	bd10      	pop	{r4, pc}
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800c730:	f000 ffda 	bl	800d6e8 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800c734:	2301      	movs	r3, #1
 800c736:	7023      	strb	r3, [r4, #0]
}
 800c738:	bd10      	pop	{r4, pc}
 800c73a:	bf00      	nop
 800c73c:	20005ebc 	.word	0x20005ebc

0800c740 <ft5336_ReadID>:
{
 800c740:	b530      	push	{r4, r5, lr}
  return(ft5336_handle.i2cInitialized);
 800c742:	4c11      	ldr	r4, [pc, #68]	; (800c788 <ft5336_ReadID+0x48>)
{
 800c744:	b083      	sub	sp, #12
  volatile uint8_t ucReadId = 0;
 800c746:	2200      	movs	r2, #0
{
 800c748:	4605      	mov	r5, r0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800c74a:	7823      	ldrb	r3, [r4, #0]
  volatile uint8_t ucReadId = 0;
 800c74c:	f88d 2007 	strb.w	r2, [sp, #7]
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800c750:	b1ab      	cbz	r3, 800c77e <ft5336_ReadID+0x3e>
 800c752:	b2ed      	uxtb	r5, r5
{
 800c754:	2400      	movs	r4, #0
 800c756:	e001      	b.n	800c75c <ft5336_ReadID+0x1c>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800c758:	2b51      	cmp	r3, #81	; 0x51
 800c75a:	d00c      	beq.n	800c776 <ft5336_ReadID+0x36>
 800c75c:	3401      	adds	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800c75e:	21a8      	movs	r1, #168	; 0xa8
 800c760:	4628      	mov	r0, r5
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800c762:	b2e4      	uxtb	r4, r4
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800c764:	f001 f858 	bl	800d818 <TS_IO_Read>
 800c768:	f88d 0007 	strb.w	r0, [sp, #7]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800c76c:	2c02      	cmp	r4, #2
    if(ucReadId == FT5336_ID_VALUE)
 800c76e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c772:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800c774:	d9f0      	bls.n	800c758 <ft5336_ReadID+0x18>
  return (ucReadId);
 800c776:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800c77a:	b003      	add	sp, #12
 800c77c:	bd30      	pop	{r4, r5, pc}
    TS_IO_Init();
 800c77e:	f000 ffb3 	bl	800d6e8 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800c782:	2301      	movs	r3, #1
 800c784:	7023      	strb	r3, [r4, #0]
 800c786:	e7e4      	b.n	800c752 <ft5336_ReadID+0x12>
 800c788:	20005ebc 	.word	0x20005ebc

0800c78c <ft5336_TS_DetectTouch>:
{
 800c78c:	b510      	push	{r4, lr}
  volatile uint8_t nbTouch = 0;
 800c78e:	2400      	movs	r4, #0
{
 800c790:	b082      	sub	sp, #8
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800c792:	b2c0      	uxtb	r0, r0
 800c794:	2102      	movs	r1, #2
  volatile uint8_t nbTouch = 0;
 800c796:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800c79a:	f001 f83d 	bl	800d818 <TS_IO_Read>
 800c79e:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 800c7a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c7a6:	f003 030f 	and.w	r3, r3, #15
 800c7aa:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800c7ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c7b2:	2b05      	cmp	r3, #5
 800c7b4:	d901      	bls.n	800c7ba <ft5336_TS_DetectTouch+0x2e>
    nbTouch = 0;
 800c7b6:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 800c7ba:	f89d 1007 	ldrb.w	r1, [sp, #7]
  ft5336_handle.currActiveTouchIdx = 0;
 800c7be:	2200      	movs	r2, #0
  ft5336_handle.currActiveTouchNb = nbTouch;
 800c7c0:	4b03      	ldr	r3, [pc, #12]	; (800c7d0 <ft5336_TS_DetectTouch+0x44>)
  return(nbTouch);
 800c7c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 800c7c6:	7059      	strb	r1, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 800c7c8:	709a      	strb	r2, [r3, #2]
}
 800c7ca:	b002      	add	sp, #8
 800c7cc:	bd10      	pop	{r4, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20005ebc 	.word	0x20005ebc

0800c7d4 <ft5336_TS_GetXY>:
{
 800c7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800c7d8:	4e2c      	ldr	r6, [pc, #176]	; (800c88c <ft5336_TS_GetXY+0xb8>)
{
 800c7da:	b083      	sub	sp, #12
  volatile uint8_t ucReadData = 0;
 800c7dc:	f04f 0800 	mov.w	r8, #0
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800c7e0:	78b3      	ldrb	r3, [r6, #2]
 800c7e2:	7874      	ldrb	r4, [r6, #1]
  volatile uint8_t ucReadData = 0;
 800c7e4:	f88d 8007 	strb.w	r8, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800c7e8:	429c      	cmp	r4, r3
 800c7ea:	d948      	bls.n	800c87e <ft5336_TS_GetXY+0xaa>
 800c7ec:	2b09      	cmp	r3, #9
 800c7ee:	d849      	bhi.n	800c884 <ft5336_TS_GetXY+0xb0>
 800c7f0:	4d27      	ldr	r5, [pc, #156]	; (800c890 <ft5336_TS_GetXY+0xbc>)
 800c7f2:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 800c8a0 <ft5336_TS_GetXY+0xcc>
 800c7f6:	4f27      	ldr	r7, [pc, #156]	; (800c894 <ft5336_TS_GetXY+0xc0>)
 800c7f8:	4c27      	ldr	r4, [pc, #156]	; (800c898 <ft5336_TS_GetXY+0xc4>)
 800c7fa:	5ced      	ldrb	r5, [r5, r3]
 800c7fc:	f81c b003 	ldrb.w	fp, [ip, r3]
 800c800:	f817 a003 	ldrb.w	sl, [r7, r3]
 800c804:	f814 8003 	ldrb.w	r8, [r4, r3]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800c808:	b2c4      	uxtb	r4, r0
 800c80a:	4689      	mov	r9, r1
 800c80c:	4629      	mov	r1, r5
 800c80e:	4617      	mov	r7, r2
 800c810:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800c812:	4d22      	ldr	r5, [pc, #136]	; (800c89c <ft5336_TS_GetXY+0xc8>)
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800c814:	f001 f800 	bl	800d818 <TS_IO_Read>
 800c818:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800c81a:	4659      	mov	r1, fp
 800c81c:	4620      	mov	r0, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800c81e:	f88d 3007 	strb.w	r3, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800c822:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c826:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800c828:	f000 fff6 	bl	800d818 <TS_IO_Read>
 800c82c:	4603      	mov	r3, r0
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800c82e:	882a      	ldrh	r2, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800c830:	4651      	mov	r1, sl
 800c832:	4620      	mov	r0, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800c834:	f88d 3007 	strb.w	r3, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800c838:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c83c:	021b      	lsls	r3, r3, #8
 800c83e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c842:	4313      	orrs	r3, r2
    *X = coord;
 800c844:	f8a9 3000 	strh.w	r3, [r9]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800c848:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800c84a:	f000 ffe5 	bl	800d818 <TS_IO_Read>
 800c84e:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800c850:	4641      	mov	r1, r8
 800c852:	4620      	mov	r0, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800c854:	f88d 3007 	strb.w	r3, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800c858:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c85c:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800c85e:	f000 ffdb 	bl	800d818 <TS_IO_Read>
 800c862:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800c866:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c86a:	8829      	ldrh	r1, [r5, #0]
 800c86c:	021b      	lsls	r3, r3, #8
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800c86e:	78b2      	ldrb	r2, [r6, #2]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800c870:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800c874:	3201      	adds	r2, #1
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800c876:	430b      	orrs	r3, r1
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800c878:	70b2      	strb	r2, [r6, #2]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800c87a:	802b      	strh	r3, [r5, #0]
    *Y = coord;
 800c87c:	803b      	strh	r3, [r7, #0]
}
 800c87e:	b003      	add	sp, #12
 800c880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800c884:	46c2      	mov	sl, r8
 800c886:	46c3      	mov	fp, r8
 800c888:	4645      	mov	r5, r8
 800c88a:	e7bd      	b.n	800c808 <ft5336_TS_GetXY+0x34>
 800c88c:	20005ebc 	.word	0x20005ebc
 800c890:	08023f88 	.word	0x08023f88
 800c894:	08023fa0 	.word	0x08023fa0
 800c898:	08023fac 	.word	0x08023fac
 800c89c:	20005eba 	.word	0x20005eba
 800c8a0:	08023f94 	.word	0x08023f94

0800c8a4 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800c8a4:	b2c0      	uxtb	r0, r0
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	21a4      	movs	r1, #164	; 0xa4
 800c8aa:	f000 bf81 	b.w	800d7b0 <TS_IO_Write>
 800c8ae:	bf00      	nop

0800c8b0 <ft5336_TS_Start>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800c8b0:	b2c0      	uxtb	r0, r0
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	21a4      	movs	r1, #164	; 0xa4
 800c8b6:	f000 bf7b 	b.w	800d7b0 <TS_IO_Write>
 800c8ba:	bf00      	nop

0800c8bc <ft5336_TS_ClearIT>:
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop

0800c8c0 <ft5336_TS_DisableIT>:
 800c8c0:	b2c0      	uxtb	r0, r0
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	21a4      	movs	r1, #164	; 0xa4
 800c8c6:	f000 bf73 	b.w	800d7b0 <TS_IO_Write>
 800c8ca:	bf00      	nop

0800c8cc <ft5336_TS_GetGestureID>:
{
 800c8cc:	b510      	push	{r4, lr}
  volatile uint8_t ucReadData = 0;
 800c8ce:	2300      	movs	r3, #0
{
 800c8d0:	b082      	sub	sp, #8
 800c8d2:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800c8d4:	b2c0      	uxtb	r0, r0
 800c8d6:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 800c8d8:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800c8dc:	f000 ff9c 	bl	800d818 <TS_IO_Read>
 800c8e0:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 800c8e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c8e8:	6023      	str	r3, [r4, #0]
}
 800c8ea:	b002      	add	sp, #8
 800c8ec:	bd10      	pop	{r4, pc}
 800c8ee:	bf00      	nop

0800c8f0 <ft5336_TS_GetTouchInfo>:
{
 800c8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800c8f4:	4d1e      	ldr	r5, [pc, #120]	; (800c970 <ft5336_TS_GetTouchInfo+0x80>)
{
 800c8f6:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 800c8f8:	2400      	movs	r4, #0
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800c8fa:	786d      	ldrb	r5, [r5, #1]
  volatile uint8_t ucReadData = 0;
 800c8fc:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800c900:	428d      	cmp	r5, r1
 800c902:	d92e      	bls.n	800c962 <ft5336_TS_GetTouchInfo+0x72>
 800c904:	2909      	cmp	r1, #9
 800c906:	d82f      	bhi.n	800c968 <ft5336_TS_GetTouchInfo+0x78>
 800c908:	4d1a      	ldr	r5, [pc, #104]	; (800c974 <ft5336_TS_GetTouchInfo+0x84>)
 800c90a:	4e1b      	ldr	r6, [pc, #108]	; (800c978 <ft5336_TS_GetTouchInfo+0x88>)
 800c90c:	4c1b      	ldr	r4, [pc, #108]	; (800c97c <ft5336_TS_GetTouchInfo+0x8c>)
 800c90e:	f815 8001 	ldrb.w	r8, [r5, r1]
 800c912:	f816 c001 	ldrb.w	ip, [r6, r1]
 800c916:	5c65      	ldrb	r5, [r4, r1]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800c918:	b2c4      	uxtb	r4, r0
 800c91a:	4661      	mov	r1, ip
 800c91c:	461e      	mov	r6, r3
 800c91e:	4617      	mov	r7, r2
 800c920:	4620      	mov	r0, r4
 800c922:	f000 ff79 	bl	800d818 <TS_IO_Read>
 800c926:	4603      	mov	r3, r0
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800c928:	9a08      	ldr	r2, [sp, #32]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800c92a:	4641      	mov	r1, r8
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800c92c:	f88d 3007 	strb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800c930:	4620      	mov	r0, r4
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800c932:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c936:	099b      	lsrs	r3, r3, #6
 800c938:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800c93a:	f000 ff6d 	bl	800d818 <TS_IO_Read>
 800c93e:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800c940:	4629      	mov	r1, r5
 800c942:	4620      	mov	r0, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800c944:	f88d 3007 	strb.w	r3, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 800c948:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c94c:	603b      	str	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800c94e:	f000 ff63 	bl	800d818 <TS_IO_Read>
 800c952:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 800c956:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c95a:	0912      	lsrs	r2, r2, #4
 800c95c:	f002 0204 	and.w	r2, r2, #4
 800c960:	6032      	str	r2, [r6, #0]
}
 800c962:	b002      	add	sp, #8
 800c964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800c968:	4625      	mov	r5, r4
 800c96a:	46a0      	mov	r8, r4
 800c96c:	46a4      	mov	ip, r4
 800c96e:	e7d3      	b.n	800c918 <ft5336_TS_GetTouchInfo+0x28>
 800c970:	20005ebc 	.word	0x20005ebc
 800c974:	08023fc4 	.word	0x08023fc4
 800c978:	08023fb8 	.word	0x08023fb8
 800c97c:	08023fd0 	.word	0x08023fd0

0800c980 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
 800c980:	2901      	cmp	r1, #1
{
 800c982:	b510      	push	{r4, lr}
 800c984:	b2c4      	uxtb	r4, r0
  switch (Output) 
 800c986:	d021      	beq.n	800c9cc <wm8994_SetOutputMode+0x4c>
 800c988:	2903      	cmp	r1, #3
 800c98a:	d03f      	beq.n	800ca0c <wm8994_SetOutputMode+0x8c>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800c98c:	4620      	mov	r0, r4
 800c98e:	f240 3203 	movw	r2, #771	; 0x303
 800c992:	2105      	movs	r1, #5
 800c994:	f000 fe32 	bl	800d5fc <AUDIO_IO_Write>
 800c998:	4620      	mov	r0, r4
 800c99a:	2201      	movs	r2, #1
 800c99c:	f240 6101 	movw	r1, #1537	; 0x601
 800c9a0:	f000 fe2c 	bl	800d5fc <AUDIO_IO_Write>
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f240 6102 	movw	r1, #1538	; 0x602
 800c9ac:	f000 fe26 	bl	800d5fc <AUDIO_IO_Write>
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f240 6104 	movw	r1, #1540	; 0x604
 800c9b8:	f000 fe20 	bl	800d5fc <AUDIO_IO_Write>
 800c9bc:	4620      	mov	r0, r4
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f240 6105 	movw	r1, #1541	; 0x605
 800c9c4:	f000 fe1a 	bl	800d5fc <AUDIO_IO_Write>
}
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 800c9cc:	f640 420c 	movw	r2, #3084	; 0xc0c
 800c9d0:	2105      	movs	r1, #5
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	f000 fe12 	bl	800d5fc <AUDIO_IO_Write>
 800c9d8:	2200      	movs	r2, #0
 800c9da:	f240 6101 	movw	r1, #1537	; 0x601
 800c9de:	4620      	mov	r0, r4
 800c9e0:	f000 fe0c 	bl	800d5fc <AUDIO_IO_Write>
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f240 6102 	movw	r1, #1538	; 0x602
 800c9ec:	f000 fe06 	bl	800d5fc <AUDIO_IO_Write>
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	2202      	movs	r2, #2
 800c9f4:	f240 6104 	movw	r1, #1540	; 0x604
 800c9f8:	f000 fe00 	bl	800d5fc <AUDIO_IO_Write>
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	2202      	movs	r2, #2
 800ca00:	f240 6105 	movw	r1, #1541	; 0x605
 800ca04:	f000 fdfa 	bl	800d5fc <AUDIO_IO_Write>
}
 800ca08:	2000      	movs	r0, #0
 800ca0a:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 800ca0c:	f640 720f 	movw	r2, #3855	; 0xf0f
 800ca10:	2105      	movs	r1, #5
 800ca12:	4620      	mov	r0, r4
 800ca14:	f000 fdf2 	bl	800d5fc <AUDIO_IO_Write>
 800ca18:	2201      	movs	r2, #1
 800ca1a:	f240 6101 	movw	r1, #1537	; 0x601
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f000 fdec 	bl	800d5fc <AUDIO_IO_Write>
 800ca24:	2201      	movs	r2, #1
 800ca26:	e7de      	b.n	800c9e6 <wm8994_SetOutputMode+0x66>

0800ca28 <wm8994_SetFrequency>:
{
 800ca28:	b508      	push	{r3, lr}
  switch (AudioFreq)
 800ca2a:	f245 6322 	movw	r3, #22050	; 0x5622
 800ca2e:	b2c0      	uxtb	r0, r0
 800ca30:	4299      	cmp	r1, r3
 800ca32:	d045      	beq.n	800cac0 <wm8994_SetFrequency+0x98>
 800ca34:	d910      	bls.n	800ca58 <wm8994_SetFrequency+0x30>
 800ca36:	f64a 4344 	movw	r3, #44100	; 0xac44
 800ca3a:	4299      	cmp	r1, r3
 800ca3c:	d032      	beq.n	800caa4 <wm8994_SetFrequency+0x7c>
 800ca3e:	4b24      	ldr	r3, [pc, #144]	; (800cad0 <wm8994_SetFrequency+0xa8>)
 800ca40:	4299      	cmp	r1, r3
 800ca42:	d028      	beq.n	800ca96 <wm8994_SetFrequency+0x6e>
 800ca44:	f5b1 4ffa 	cmp.w	r1, #32000	; 0x7d00
 800ca48:	d017      	beq.n	800ca7a <wm8994_SetFrequency+0x52>
 AUDIO_IO_Write(Addr, Reg, Value);
 800ca4a:	2283      	movs	r2, #131	; 0x83
 800ca4c:	f44f 7104 	mov.w	r1, #528	; 0x210
 800ca50:	f000 fdd4 	bl	800d5fc <AUDIO_IO_Write>
}
 800ca54:	2000      	movs	r0, #0
 800ca56:	bd08      	pop	{r3, pc}
  switch (AudioFreq)
 800ca58:	f642 3311 	movw	r3, #11025	; 0x2b11
 800ca5c:	4299      	cmp	r1, r3
 800ca5e:	d028      	beq.n	800cab2 <wm8994_SetFrequency+0x8a>
 800ca60:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 800ca64:	d010      	beq.n	800ca88 <wm8994_SetFrequency+0x60>
 800ca66:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 800ca6a:	d1ee      	bne.n	800ca4a <wm8994_SetFrequency+0x22>
 AUDIO_IO_Write(Addr, Reg, Value);
 800ca6c:	2203      	movs	r2, #3
 800ca6e:	f44f 7104 	mov.w	r1, #528	; 0x210
 800ca72:	f000 fdc3 	bl	800d5fc <AUDIO_IO_Write>
}
 800ca76:	2000      	movs	r0, #0
 800ca78:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 800ca7a:	2263      	movs	r2, #99	; 0x63
 800ca7c:	f44f 7104 	mov.w	r1, #528	; 0x210
 800ca80:	f000 fdbc 	bl	800d5fc <AUDIO_IO_Write>
}
 800ca84:	2000      	movs	r0, #0
 800ca86:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 800ca88:	2233      	movs	r2, #51	; 0x33
 800ca8a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800ca8e:	f000 fdb5 	bl	800d5fc <AUDIO_IO_Write>
}
 800ca92:	2000      	movs	r0, #0
 800ca94:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 800ca96:	22a3      	movs	r2, #163	; 0xa3
 800ca98:	f44f 7104 	mov.w	r1, #528	; 0x210
 800ca9c:	f000 fdae 	bl	800d5fc <AUDIO_IO_Write>
}
 800caa0:	2000      	movs	r0, #0
 800caa2:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 800caa4:	2273      	movs	r2, #115	; 0x73
 800caa6:	f44f 7104 	mov.w	r1, #528	; 0x210
 800caaa:	f000 fda7 	bl	800d5fc <AUDIO_IO_Write>
}
 800caae:	2000      	movs	r0, #0
 800cab0:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 800cab2:	2213      	movs	r2, #19
 800cab4:	f44f 7104 	mov.w	r1, #528	; 0x210
 800cab8:	f000 fda0 	bl	800d5fc <AUDIO_IO_Write>
}
 800cabc:	2000      	movs	r0, #0
 800cabe:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 800cac0:	2243      	movs	r2, #67	; 0x43
 800cac2:	f44f 7104 	mov.w	r1, #528	; 0x210
 800cac6:	f000 fd99 	bl	800d5fc <AUDIO_IO_Write>
}
 800caca:	2000      	movs	r0, #0
 800cacc:	bd08      	pop	{r3, pc}
 800cace:	bf00      	nop
 800cad0:	00017700 	.word	0x00017700

0800cad4 <wm8994_Reset>:
 AUDIO_IO_Write(Addr, Reg, Value);
 800cad4:	2200      	movs	r2, #0
 800cad6:	b2c0      	uxtb	r0, r0
{
 800cad8:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
 800cada:	4611      	mov	r1, r2
 800cadc:	f000 fd8e 	bl	800d5fc <AUDIO_IO_Write>
  outputEnabled = 0;
 800cae0:	2300      	movs	r3, #0
 800cae2:	4903      	ldr	r1, [pc, #12]	; (800caf0 <wm8994_Reset+0x1c>)
  inputEnabled=0;
 800cae4:	4a03      	ldr	r2, [pc, #12]	; (800caf4 <wm8994_Reset+0x20>)
}
 800cae6:	4618      	mov	r0, r3
  outputEnabled = 0;
 800cae8:	600b      	str	r3, [r1, #0]
  inputEnabled=0;
 800caea:	6013      	str	r3, [r2, #0]
}
 800caec:	bd08      	pop	{r3, pc}
 800caee:	bf00      	nop
 800caf0:	20005ec4 	.word	0x20005ec4
 800caf4:	20005ec0 	.word	0x20005ec0

0800caf8 <wm8994_DeInit>:
  AUDIO_IO_DeInit();
 800caf8:	f000 bd7e 	b.w	800d5f8 <AUDIO_IO_DeInit>

0800cafc <wm8994_ReadID>:
{
 800cafc:	b510      	push	{r4, lr}
 800cafe:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 800cb00:	f000 fd16 	bl	800d530 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 800cb04:	2100      	movs	r1, #0
 800cb06:	b2e0      	uxtb	r0, r4
 800cb08:	f000 fdae 	bl	800d668 <AUDIO_IO_Read>
}
 800cb0c:	bd10      	pop	{r4, pc}
 800cb0e:	bf00      	nop

0800cb10 <wm8994_Play>:
  if (outputEnabled != 0)
 800cb10:	4b0a      	ldr	r3, [pc, #40]	; (800cb3c <wm8994_Play+0x2c>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	b17b      	cbz	r3, 800cb36 <wm8994_Play+0x26>
 AUDIO_IO_Write(Addr, Reg, Value);
 800cb16:	2210      	movs	r2, #16
 800cb18:	f44f 6184 	mov.w	r1, #1056	; 0x420
{
 800cb1c:	b510      	push	{r4, lr}
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800cb1e:	b2c4      	uxtb	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 800cb20:	4620      	mov	r0, r4
 800cb22:	f000 fd6b 	bl	800d5fc <AUDIO_IO_Write>
 800cb26:	4620      	mov	r0, r4
 800cb28:	2210      	movs	r2, #16
 800cb2a:	f240 4122 	movw	r1, #1058	; 0x422
 800cb2e:	f000 fd65 	bl	800d5fc <AUDIO_IO_Write>
}
 800cb32:	2000      	movs	r0, #0
 800cb34:	bd10      	pop	{r4, pc}
 800cb36:	2000      	movs	r0, #0
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	20005ec4 	.word	0x20005ec4

0800cb40 <wm8994_Resume>:
  if (outputEnabled != 0)
 800cb40:	4b0a      	ldr	r3, [pc, #40]	; (800cb6c <wm8994_Resume+0x2c>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	b17b      	cbz	r3, 800cb66 <wm8994_Resume+0x26>
 AUDIO_IO_Write(Addr, Reg, Value);
 800cb46:	2210      	movs	r2, #16
 800cb48:	f44f 6184 	mov.w	r1, #1056	; 0x420
{
 800cb4c:	b510      	push	{r4, lr}
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800cb4e:	b2c4      	uxtb	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 800cb50:	4620      	mov	r0, r4
 800cb52:	f000 fd53 	bl	800d5fc <AUDIO_IO_Write>
 800cb56:	4620      	mov	r0, r4
 800cb58:	2210      	movs	r2, #16
 800cb5a:	f240 4122 	movw	r1, #1058	; 0x422
 800cb5e:	f000 fd4d 	bl	800d5fc <AUDIO_IO_Write>
}
 800cb62:	2000      	movs	r0, #0
 800cb64:	bd10      	pop	{r4, pc}
 800cb66:	2000      	movs	r0, #0
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop
 800cb6c:	20005ec4 	.word	0x20005ec4

0800cb70 <wm8994_Pause>:
  if (outputEnabled != 0)
 800cb70:	4b0c      	ldr	r3, [pc, #48]	; (800cba4 <wm8994_Pause+0x34>)
 800cb72:	681b      	ldr	r3, [r3, #0]
{  
 800cb74:	b510      	push	{r4, lr}
 800cb76:	b2c4      	uxtb	r4, r0
  if (outputEnabled != 0)
 800cb78:	b16b      	cbz	r3, 800cb96 <wm8994_Pause+0x26>
 AUDIO_IO_Write(Addr, Reg, Value);
 800cb7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb7e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800cb82:	4620      	mov	r0, r4
 800cb84:	f000 fd3a 	bl	800d5fc <AUDIO_IO_Write>
 800cb88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb8c:	f240 4122 	movw	r1, #1058	; 0x422
 800cb90:	4620      	mov	r0, r4
 800cb92:	f000 fd33 	bl	800d5fc <AUDIO_IO_Write>
 800cb96:	4620      	mov	r0, r4
 800cb98:	2201      	movs	r2, #1
 800cb9a:	2102      	movs	r1, #2
 800cb9c:	f000 fd2e 	bl	800d5fc <AUDIO_IO_Write>
}
 800cba0:	2000      	movs	r0, #0
 800cba2:	bd10      	pop	{r4, pc}
 800cba4:	20005ec4 	.word	0x20005ec4

0800cba8 <wm8994_Stop>:
{
 800cba8:	b570      	push	{r4, r5, r6, lr}
  if (outputEnabled != 0)
 800cbaa:	4d1e      	ldr	r5, [pc, #120]	; (800cc24 <wm8994_Stop+0x7c>)
 800cbac:	682b      	ldr	r3, [r5, #0]
 800cbae:	b90b      	cbnz	r3, 800cbb4 <wm8994_Stop+0xc>
}
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	bd70      	pop	{r4, r5, r6, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800cbb4:	b2c4      	uxtb	r4, r0
 800cbb6:	460e      	mov	r6, r1
 AUDIO_IO_Write(Addr, Reg, Value);
 800cbb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbbc:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f000 fd1b 	bl	800d5fc <AUDIO_IO_Write>
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbcc:	f240 4122 	movw	r1, #1058	; 0x422
 800cbd0:	f000 fd14 	bl	800d5fc <AUDIO_IO_Write>
    if (CodecPdwnMode == CODEC_PDWN_SW)
 800cbd4:	2e02      	cmp	r6, #2
 800cbd6:	d0eb      	beq.n	800cbb0 <wm8994_Stop+0x8>
 AUDIO_IO_Write(Addr, Reg, Value);
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbde:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800cbe2:	f000 fd0b 	bl	800d5fc <AUDIO_IO_Write>
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbec:	f240 4122 	movw	r1, #1058	; 0x422
 800cbf0:	f000 fd04 	bl	800d5fc <AUDIO_IO_Write>
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	212d      	movs	r1, #45	; 0x2d
 800cbfa:	f000 fcff 	bl	800d5fc <AUDIO_IO_Write>
 800cbfe:	4620      	mov	r0, r4
 800cc00:	2200      	movs	r2, #0
 800cc02:	212e      	movs	r1, #46	; 0x2e
 800cc04:	f000 fcfa 	bl	800d5fc <AUDIO_IO_Write>
 800cc08:	4620      	mov	r0, r4
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	2105      	movs	r1, #5
 800cc0e:	f000 fcf5 	bl	800d5fc <AUDIO_IO_Write>
 800cc12:	2200      	movs	r2, #0
 800cc14:	4620      	mov	r0, r4
 800cc16:	4611      	mov	r1, r2
 800cc18:	f000 fcf0 	bl	800d5fc <AUDIO_IO_Write>
      outputEnabled = 0;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	2000      	movs	r0, #0
      outputEnabled = 0;
 800cc20:	602b      	str	r3, [r5, #0]
}
 800cc22:	bd70      	pop	{r4, r5, r6, pc}
 800cc24:	20005ec4 	.word	0x20005ec4

0800cc28 <wm8994_SetMute>:
  if (outputEnabled != 0)
 800cc28:	4b13      	ldr	r3, [pc, #76]	; (800cc78 <wm8994_SetMute+0x50>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	b18b      	cbz	r3, 800cc52 <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
 800cc2e:	2901      	cmp	r1, #1
{
 800cc30:	b510      	push	{r4, lr}
 800cc32:	b2c4      	uxtb	r4, r0
    if(Cmd == AUDIO_MUTE_ON)
 800cc34:	d00f      	beq.n	800cc56 <wm8994_SetMute+0x2e>
 AUDIO_IO_Write(Addr, Reg, Value);
 800cc36:	4620      	mov	r0, r4
 800cc38:	2210      	movs	r2, #16
 800cc3a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800cc3e:	f000 fcdd 	bl	800d5fc <AUDIO_IO_Write>
 800cc42:	4620      	mov	r0, r4
 800cc44:	2210      	movs	r2, #16
 800cc46:	f240 4122 	movw	r1, #1058	; 0x422
 800cc4a:	f000 fcd7 	bl	800d5fc <AUDIO_IO_Write>
}
 800cc4e:	2000      	movs	r0, #0
 800cc50:	bd10      	pop	{r4, pc}
 800cc52:	2000      	movs	r0, #0
 800cc54:	4770      	bx	lr
 AUDIO_IO_Write(Addr, Reg, Value);
 800cc56:	4620      	mov	r0, r4
 800cc58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc5c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800cc60:	f000 fccc 	bl	800d5fc <AUDIO_IO_Write>
 800cc64:	4620      	mov	r0, r4
 800cc66:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc6a:	f240 4122 	movw	r1, #1058	; 0x422
 800cc6e:	f000 fcc5 	bl	800d5fc <AUDIO_IO_Write>
}
 800cc72:	2000      	movs	r0, #0
 800cc74:	bd10      	pop	{r4, pc}
 800cc76:	bf00      	nop
 800cc78:	20005ec4 	.word	0x20005ec4

0800cc7c <wm8994_SetVolume>:
{
 800cc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800cc7e:	2964      	cmp	r1, #100	; 0x64
 800cc80:	4b4e      	ldr	r3, [pc, #312]	; (800cdbc <wm8994_SetVolume+0x140>)
{
 800cc82:	460c      	mov	r4, r1
 800cc84:	4606      	mov	r6, r0
 800cc86:	681b      	ldr	r3, [r3, #0]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800cc88:	d947      	bls.n	800cd1a <wm8994_SetVolume+0x9e>
  if (outputEnabled != 0)
 800cc8a:	b323      	cbz	r3, 800ccd6 <wm8994_SetVolume+0x5a>
 800cc8c:	b2c5      	uxtb	r5, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 800cc8e:	2210      	movs	r2, #16
 800cc90:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800cc94:	4628      	mov	r0, r5
 800cc96:	f000 fcb1 	bl	800d5fc <AUDIO_IO_Write>
 800cc9a:	2210      	movs	r2, #16
 800cc9c:	f240 4122 	movw	r1, #1058	; 0x422
 800cca0:	4628      	mov	r0, r5
 800cca2:	f000 fcab 	bl	800d5fc <AUDIO_IO_Write>
 800cca6:	f240 127f 	movw	r2, #383	; 0x17f
 800ccaa:	211c      	movs	r1, #28
 800ccac:	4628      	mov	r0, r5
 800ccae:	f000 fca5 	bl	800d5fc <AUDIO_IO_Write>
 800ccb2:	f240 127f 	movw	r2, #383	; 0x17f
 800ccb6:	211d      	movs	r1, #29
 800ccb8:	4628      	mov	r0, r5
 800ccba:	f000 fc9f 	bl	800d5fc <AUDIO_IO_Write>
 800ccbe:	f240 127f 	movw	r2, #383	; 0x17f
 800ccc2:	2126      	movs	r1, #38	; 0x26
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	f000 fc99 	bl	800d5fc <AUDIO_IO_Write>
 800ccca:	4628      	mov	r0, r5
 800cccc:	f240 127f 	movw	r2, #383	; 0x17f
 800ccd0:	2127      	movs	r1, #39	; 0x27
 800ccd2:	f000 fc93 	bl	800d5fc <AUDIO_IO_Write>
  if (inputEnabled != 0)
 800ccd6:	4b3a      	ldr	r3, [pc, #232]	; (800cdc0 <wm8994_SetVolume+0x144>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	b1e3      	cbz	r3, 800cd16 <wm8994_SetVolume+0x9a>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800ccdc:	2c63      	cmp	r4, #99	; 0x63
 800ccde:	b2f5      	uxtb	r5, r6
 800cce0:	d93a      	bls.n	800cd58 <wm8994_SetVolume+0xdc>
 800cce2:	f240 14ef 	movw	r4, #495	; 0x1ef
 AUDIO_IO_Write(Addr, Reg, Value);
 800cce6:	4622      	mov	r2, r4
 800cce8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ccec:	4628      	mov	r0, r5
 800ccee:	f000 fc85 	bl	800d5fc <AUDIO_IO_Write>
 800ccf2:	4622      	mov	r2, r4
 800ccf4:	f240 4101 	movw	r1, #1025	; 0x401
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	f000 fc7f 	bl	800d5fc <AUDIO_IO_Write>
 800ccfe:	4622      	mov	r2, r4
 800cd00:	f240 4104 	movw	r1, #1028	; 0x404
 800cd04:	4628      	mov	r0, r5
 800cd06:	f000 fc79 	bl	800d5fc <AUDIO_IO_Write>
 800cd0a:	4622      	mov	r2, r4
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	f240 4105 	movw	r1, #1029	; 0x405
 800cd12:	f000 fc73 	bl	800d5fc <AUDIO_IO_Write>
}
 800cd16:	2000      	movs	r0, #0
 800cd18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (outputEnabled != 0)
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d0db      	beq.n	800ccd6 <wm8994_SetVolume+0x5a>
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800cd1e:	ebc1 1381 	rsb	r3, r1, r1, lsl #6
 800cd22:	4a28      	ldr	r2, [pc, #160]	; (800cdc4 <wm8994_SetVolume+0x148>)
 800cd24:	b2c5      	uxtb	r5, r0
 800cd26:	fba2 2303 	umull	r2, r3, r2, r3
 800cd2a:	095b      	lsrs	r3, r3, #5
    if(convertedvol > 0x3E)
 800cd2c:	2b3f      	cmp	r3, #63	; 0x3f
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800cd2e:	b2df      	uxtb	r7, r3
    if(convertedvol > 0x3E)
 800cd30:	d0ad      	beq.n	800cc8e <wm8994_SetVolume+0x12>
    else if (Volume == 0)
 800cd32:	b9e1      	cbnz	r1, 800cd6e <wm8994_SetVolume+0xf2>
 AUDIO_IO_Write(Addr, Reg, Value);
 800cd34:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd38:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	f000 fc5d 	bl	800d5fc <AUDIO_IO_Write>
 800cd42:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd46:	f240 4122 	movw	r1, #1058	; 0x422
 800cd4a:	4628      	mov	r0, r5
 800cd4c:	f000 fc56 	bl	800d5fc <AUDIO_IO_Write>
  if (inputEnabled != 0)
 800cd50:	4b1b      	ldr	r3, [pc, #108]	; (800cdc0 <wm8994_SetVolume+0x144>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d0de      	beq.n	800cd16 <wm8994_SetVolume+0x9a>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800cd58:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800cd5c:	4b19      	ldr	r3, [pc, #100]	; (800cdc4 <wm8994_SetVolume+0x148>)
 800cd5e:	0124      	lsls	r4, r4, #4
 800cd60:	fba3 3404 	umull	r3, r4, r3, r4
 800cd64:	0964      	lsrs	r4, r4, #5
 800cd66:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800cd6a:	b2a4      	uxth	r4, r4
 800cd6c:	e7bb      	b.n	800cce6 <wm8994_SetVolume+0x6a>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800cd6e:	f447 77a0 	orr.w	r7, r7, #320	; 0x140
 AUDIO_IO_Write(Addr, Reg, Value);
 800cd72:	2210      	movs	r2, #16
 800cd74:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800cd78:	4628      	mov	r0, r5
 800cd7a:	f000 fc3f 	bl	800d5fc <AUDIO_IO_Write>
 800cd7e:	2210      	movs	r2, #16
 800cd80:	f240 4122 	movw	r1, #1058	; 0x422
 800cd84:	4628      	mov	r0, r5
 800cd86:	f000 fc39 	bl	800d5fc <AUDIO_IO_Write>
 800cd8a:	463a      	mov	r2, r7
 800cd8c:	211c      	movs	r1, #28
 800cd8e:	4628      	mov	r0, r5
 800cd90:	f000 fc34 	bl	800d5fc <AUDIO_IO_Write>
 800cd94:	463a      	mov	r2, r7
 800cd96:	211d      	movs	r1, #29
 800cd98:	4628      	mov	r0, r5
 800cd9a:	f000 fc2f 	bl	800d5fc <AUDIO_IO_Write>
 800cd9e:	463a      	mov	r2, r7
 800cda0:	2126      	movs	r1, #38	; 0x26
 800cda2:	4628      	mov	r0, r5
 800cda4:	f000 fc2a 	bl	800d5fc <AUDIO_IO_Write>
 800cda8:	463a      	mov	r2, r7
 800cdaa:	4628      	mov	r0, r5
 800cdac:	2127      	movs	r1, #39	; 0x27
 800cdae:	f000 fc25 	bl	800d5fc <AUDIO_IO_Write>
  if (inputEnabled != 0)
 800cdb2:	4b03      	ldr	r3, [pc, #12]	; (800cdc0 <wm8994_SetVolume+0x144>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d190      	bne.n	800ccdc <wm8994_SetVolume+0x60>
 800cdba:	e7ac      	b.n	800cd16 <wm8994_SetVolume+0x9a>
 800cdbc:	20005ec4 	.word	0x20005ec4
 800cdc0:	20005ec0 	.word	0x20005ec0
 800cdc4:	51eb851f 	.word	0x51eb851f

0800cdc8 <wm8994_Init>:
{
 800cdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800cdcc:	b2c4      	uxtb	r4, r0
{
 800cdce:	461f      	mov	r7, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800cdd0:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
{
 800cdd4:	4680      	mov	r8, r0
 800cdd6:	4691      	mov	r9, r2
  uint16_t output_device = OutputInputDevice & 0xFF;
 800cdd8:	b2ce      	uxtb	r6, r1
  AUDIO_IO_Init();
 800cdda:	f000 fba9 	bl	800d530 <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
 800cdde:	4620      	mov	r0, r4
 800cde0:	2203      	movs	r2, #3
 800cde2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cde6:	f000 fc09 	bl	800d5fc <AUDIO_IO_Write>
 800cdea:	4620      	mov	r0, r4
 800cdec:	2200      	movs	r2, #0
 800cdee:	f640 0117 	movw	r1, #2071	; 0x817
 800cdf2:	f000 fc03 	bl	800d5fc <AUDIO_IO_Write>
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f44f 7181 	mov.w	r1, #258	; 0x102
 800cdfe:	f000 fbfd 	bl	800d5fc <AUDIO_IO_Write>
 800ce02:	4620      	mov	r0, r4
 800ce04:	226c      	movs	r2, #108	; 0x6c
 800ce06:	2139      	movs	r1, #57	; 0x39
 800ce08:	f000 fbf8 	bl	800d5fc <AUDIO_IO_Write>
  if (input_device > 0)
 800ce0c:	2d00      	cmp	r5, #0
 800ce0e:	f000 80fb 	beq.w	800d008 <wm8994_Init+0x240>
 AUDIO_IO_Write(Addr, Reg, Value);
 800ce12:	2213      	movs	r2, #19
 800ce14:	2101      	movs	r1, #1
 800ce16:	4620      	mov	r0, r4
 800ce18:	f000 fbf0 	bl	800d5fc <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
 800ce1c:	2032      	movs	r0, #50	; 0x32
 800ce1e:	f000 fc61 	bl	800d6e4 <AUDIO_IO_Delay>
    outputEnabled = 1;
 800ce22:	4bbc      	ldr	r3, [pc, #752]	; (800d114 <wm8994_Init+0x34c>)
  if (output_device > 0)
 800ce24:	2e00      	cmp	r6, #0
 800ce26:	f000 80fb 	beq.w	800d020 <wm8994_Init+0x258>
    outputEnabled = 1;
 800ce2a:	f04f 0a01 	mov.w	sl, #1
    switch (output_device)
 800ce2e:	2e02      	cmp	r6, #2
    outputEnabled = 1;
 800ce30:	f8c3 a000 	str.w	sl, [r3]
    switch (output_device)
 800ce34:	d005      	beq.n	800ce42 <wm8994_Init+0x7a>
 800ce36:	2e03      	cmp	r6, #3
 800ce38:	f000 829f 	beq.w	800d37a <wm8994_Init+0x5b2>
 800ce3c:	4556      	cmp	r6, sl
 800ce3e:	f000 8240 	beq.w	800d2c2 <wm8994_Init+0x4fa>
 AUDIO_IO_Write(Addr, Reg, Value);
 800ce42:	f240 3203 	movw	r2, #771	; 0x303
 800ce46:	2105      	movs	r1, #5
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f000 fbd7 	bl	800d5fc <AUDIO_IO_Write>
 800ce4e:	4652      	mov	r2, sl
 800ce50:	f240 6101 	movw	r1, #1537	; 0x601
 800ce54:	4620      	mov	r0, r4
 800ce56:	f000 fbd1 	bl	800d5fc <AUDIO_IO_Write>
 800ce5a:	4652      	mov	r2, sl
 800ce5c:	f240 6102 	movw	r1, #1538	; 0x602
 800ce60:	4620      	mov	r0, r4
 800ce62:	f000 fbcb 	bl	800d5fc <AUDIO_IO_Write>
 800ce66:	2200      	movs	r2, #0
 800ce68:	f240 6104 	movw	r1, #1540	; 0x604
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	f000 fbc5 	bl	800d5fc <AUDIO_IO_Write>
 800ce72:	2200      	movs	r2, #0
 800ce74:	f240 6105 	movw	r1, #1541	; 0x605
 800ce78:	4620      	mov	r0, r4
 800ce7a:	f000 fbbf 	bl	800d5fc <AUDIO_IO_Write>
    inputEnabled = 1;
 800ce7e:	4ba6      	ldr	r3, [pc, #664]	; (800d118 <wm8994_Init+0x350>)
  if (input_device > 0)
 800ce80:	2d00      	cmp	r5, #0
 800ce82:	f000 80d2 	beq.w	800d02a <wm8994_Init+0x262>
    inputEnabled = 1;
 800ce86:	2201      	movs	r2, #1
    switch (input_device)
 800ce88:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    inputEnabled = 1;
 800ce8c:	601a      	str	r2, [r3, #0]
    switch (input_device)
 800ce8e:	f000 8297 	beq.w	800d3c0 <wm8994_Init+0x5f8>
 800ce92:	f240 825d 	bls.w	800d350 <wm8994_Init+0x588>
 800ce96:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 800ce9a:	f000 81e5 	beq.w	800d268 <wm8994_Init+0x4a0>
 800ce9e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800cea2:	f040 828a 	bne.w	800d3ba <wm8994_Init+0x5f2>
 AUDIO_IO_Write(Addr, Reg, Value);
 800cea6:	f640 723c 	movw	r2, #3900	; 0xf3c
 800ceaa:	2104      	movs	r1, #4
 800ceac:	4620      	mov	r0, r4
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800ceae:	f04f 0a00 	mov.w	sl, #0
 AUDIO_IO_Write(Addr, Reg, Value);
 800ceb2:	f000 fba3 	bl	800d5fc <AUDIO_IO_Write>
 800ceb6:	22db      	movs	r2, #219	; 0xdb
 800ceb8:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800cebc:	4620      	mov	r0, r4
 800cebe:	f000 fb9d 	bl	800d5fc <AUDIO_IO_Write>
 800cec2:	22db      	movs	r2, #219	; 0xdb
 800cec4:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800cec8:	4620      	mov	r0, r4
 800ceca:	f000 fb97 	bl	800d5fc <AUDIO_IO_Write>
 800cece:	f246 32a0 	movw	r2, #25504	; 0x63a0
 800ced2:	2102      	movs	r1, #2
 800ced4:	4620      	mov	r0, r4
 800ced6:	f000 fb91 	bl	800d5fc <AUDIO_IO_Write>
 800ceda:	2202      	movs	r2, #2
 800cedc:	f240 6106 	movw	r1, #1542	; 0x606
 800cee0:	4620      	mov	r0, r4
 800cee2:	f000 fb8b 	bl	800d5fc <AUDIO_IO_Write>
 800cee6:	2202      	movs	r2, #2
 800cee8:	f240 6107 	movw	r1, #1543	; 0x607
 800ceec:	4620      	mov	r0, r4
 800ceee:	f000 fb85 	bl	800d5fc <AUDIO_IO_Write>
 800cef2:	2202      	movs	r2, #2
 800cef4:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800cef8:	4620      	mov	r0, r4
 800cefa:	f000 fb7f 	bl	800d5fc <AUDIO_IO_Write>
 800cefe:	2202      	movs	r2, #2
 800cf00:	f240 6109 	movw	r1, #1545	; 0x609
 800cf04:	4620      	mov	r0, r4
 800cf06:	f000 fb79 	bl	800d5fc <AUDIO_IO_Write>
 800cf0a:	220d      	movs	r2, #13
 800cf0c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800cf10:	4620      	mov	r0, r4
 800cf12:	f000 fb73 	bl	800d5fc <AUDIO_IO_Write>
  switch (AudioFreq)
 800cf16:	f245 6322 	movw	r3, #22050	; 0x5622
 800cf1a:	429f      	cmp	r7, r3
 800cf1c:	f040 808c 	bne.w	800d038 <wm8994_Init+0x270>
 AUDIO_IO_Write(Addr, Reg, Value);
 800cf20:	2243      	movs	r2, #67	; 0x43
 800cf22:	f44f 7104 	mov.w	r1, #528	; 0x210
 800cf26:	4620      	mov	r0, r4
 800cf28:	f000 fb68 	bl	800d5fc <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800cf2c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800cf30:	f040 80b5 	bne.w	800d09e <wm8994_Init+0x2d6>
 AUDIO_IO_Write(Addr, Reg, Value);
 800cf34:	f244 0218 	movw	r2, #16408	; 0x4018
 800cf38:	f44f 7140 	mov.w	r1, #768	; 0x300
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f000 fb5d 	bl	800d5fc <AUDIO_IO_Write>
 800cf42:	2200      	movs	r2, #0
 800cf44:	f240 3102 	movw	r1, #770	; 0x302
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f000 fb57 	bl	800d5fc <AUDIO_IO_Write>
 800cf4e:	220a      	movs	r2, #10
 800cf50:	f44f 7102 	mov.w	r1, #520	; 0x208
 800cf54:	4620      	mov	r0, r4
 800cf56:	f000 fb51 	bl	800d5fc <AUDIO_IO_Write>
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf60:	4620      	mov	r0, r4
 800cf62:	f000 fb4b 	bl	800d5fc <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 800cf66:	2e00      	cmp	r6, #0
 800cf68:	f000 815d 	beq.w	800d226 <wm8994_Init+0x45e>
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800cf6c:	2e02      	cmp	r6, #2
 800cf6e:	f040 824e 	bne.w	800d40e <wm8994_Init+0x646>
 AUDIO_IO_Write(Addr, Reg, Value);
 800cf72:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf76:	212d      	movs	r1, #45	; 0x2d
 800cf78:	4620      	mov	r0, r4
      if(ColdStartup)
 800cf7a:	4e68      	ldr	r6, [pc, #416]	; (800d11c <wm8994_Init+0x354>)
 AUDIO_IO_Write(Addr, Reg, Value);
 800cf7c:	f000 fb3e 	bl	800d5fc <AUDIO_IO_Write>
 800cf80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf84:	212e      	movs	r1, #46	; 0x2e
 800cf86:	4620      	mov	r0, r4
 800cf88:	f000 fb38 	bl	800d5fc <AUDIO_IO_Write>
      if(ColdStartup)
 800cf8c:	7833      	ldrb	r3, [r6, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f000 825a 	beq.w	800d448 <wm8994_Init+0x680>
 AUDIO_IO_Write(Addr, Reg, Value);
 800cf94:	4620      	mov	r0, r4
 800cf96:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 800cf9a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800cf9e:	f000 fb2d 	bl	800d5fc <AUDIO_IO_Write>
        ColdStartup=0;
 800cfa2:	2300      	movs	r3, #0
        AUDIO_IO_Delay(300);
 800cfa4:	f44f 7096 	mov.w	r0, #300	; 0x12c
        ColdStartup=0;
 800cfa8:	7033      	strb	r3, [r6, #0]
        AUDIO_IO_Delay(300);
 800cfaa:	f000 fb9b 	bl	800d6e4 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f000 fb21 	bl	800d5fc <AUDIO_IO_Write>
 800cfba:	f44f 7240 	mov.w	r2, #768	; 0x300
 800cfbe:	2103      	movs	r1, #3
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	f000 fb1b 	bl	800d5fc <AUDIO_IO_Write>
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	2122      	movs	r1, #34	; 0x22
 800cfca:	4620      	mov	r0, r4
 800cfcc:	f000 fb16 	bl	800d5fc <AUDIO_IO_Write>
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	2123      	movs	r1, #35	; 0x23
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f000 fb11 	bl	800d5fc <AUDIO_IO_Write>
 800cfda:	f44f 7240 	mov.w	r2, #768	; 0x300
 800cfde:	2136      	movs	r1, #54	; 0x36
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f000 fb0b 	bl	800d5fc <AUDIO_IO_Write>
 800cfe6:	f243 0203 	movw	r2, #12291	; 0x3003
 800cfea:	2101      	movs	r1, #1
 800cfec:	4620      	mov	r0, r4
 800cfee:	f000 fb05 	bl	800d5fc <AUDIO_IO_Write>
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800cff2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800cff6:	f040 80b4 	bne.w	800d162 <wm8994_Init+0x39a>
 AUDIO_IO_Write(Addr, Reg, Value);
 800cffa:	f240 2205 	movw	r2, #517	; 0x205
 800cffe:	2151      	movs	r1, #81	; 0x51
 800d000:	4620      	mov	r0, r4
 800d002:	f000 fafb 	bl	800d5fc <AUDIO_IO_Write>
 800d006:	e0b1      	b.n	800d16c <wm8994_Init+0x3a4>
 800d008:	2203      	movs	r2, #3
 800d00a:	2101      	movs	r1, #1
 800d00c:	4620      	mov	r0, r4
 800d00e:	f000 faf5 	bl	800d5fc <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
 800d012:	2032      	movs	r0, #50	; 0x32
 800d014:	f000 fb66 	bl	800d6e4 <AUDIO_IO_Delay>
    outputEnabled = 1;
 800d018:	4b3e      	ldr	r3, [pc, #248]	; (800d114 <wm8994_Init+0x34c>)
  if (output_device > 0)
 800d01a:	2e00      	cmp	r6, #0
 800d01c:	f47f af05 	bne.w	800ce2a <wm8994_Init+0x62>
    outputEnabled = 0;
 800d020:	601e      	str	r6, [r3, #0]
    inputEnabled = 1;
 800d022:	4b3d      	ldr	r3, [pc, #244]	; (800d118 <wm8994_Init+0x350>)
  if (input_device > 0)
 800d024:	2d00      	cmp	r5, #0
 800d026:	f47f af2e 	bne.w	800ce86 <wm8994_Init+0xbe>
    inputEnabled = 0;
 800d02a:	46aa      	mov	sl, r5
 800d02c:	601d      	str	r5, [r3, #0]
  switch (AudioFreq)
 800d02e:	f245 6322 	movw	r3, #22050	; 0x5622
 800d032:	429f      	cmp	r7, r3
 800d034:	f43f af74 	beq.w	800cf20 <wm8994_Init+0x158>
 800d038:	d914      	bls.n	800d064 <wm8994_Init+0x29c>
 800d03a:	f64a 4344 	movw	r3, #44100	; 0xac44
 800d03e:	429f      	cmp	r7, r3
 800d040:	f000 81b4 	beq.w	800d3ac <wm8994_Init+0x5e4>
 800d044:	f240 818e 	bls.w	800d364 <wm8994_Init+0x59c>
 800d048:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d04c:	429f      	cmp	r7, r3
 800d04e:	d01c      	beq.n	800d08a <wm8994_Init+0x2c2>
 800d050:	4b33      	ldr	r3, [pc, #204]	; (800d120 <wm8994_Init+0x358>)
 800d052:	429f      	cmp	r7, r3
 800d054:	d119      	bne.n	800d08a <wm8994_Init+0x2c2>
 AUDIO_IO_Write(Addr, Reg, Value);
 800d056:	22a3      	movs	r2, #163	; 0xa3
 800d058:	f44f 7104 	mov.w	r1, #528	; 0x210
 800d05c:	4620      	mov	r0, r4
 800d05e:	f000 facd 	bl	800d5fc <AUDIO_IO_Write>
    break;
 800d062:	e018      	b.n	800d096 <wm8994_Init+0x2ce>
  switch (AudioFreq)
 800d064:	f642 3311 	movw	r3, #11025	; 0x2b11
 800d068:	429f      	cmp	r7, r3
 800d06a:	f000 8198 	beq.w	800d39e <wm8994_Init+0x5d6>
 800d06e:	f5b7 5f7a 	cmp.w	r7, #16000	; 0x3e80
 800d072:	f000 80f2 	beq.w	800d25a <wm8994_Init+0x492>
 800d076:	f5b7 5ffa 	cmp.w	r7, #8000	; 0x1f40
 800d07a:	d106      	bne.n	800d08a <wm8994_Init+0x2c2>
 AUDIO_IO_Write(Addr, Reg, Value);
 800d07c:	2203      	movs	r2, #3
 800d07e:	f44f 7104 	mov.w	r1, #528	; 0x210
 800d082:	4620      	mov	r0, r4
 800d084:	f000 faba 	bl	800d5fc <AUDIO_IO_Write>
    break;
 800d088:	e005      	b.n	800d096 <wm8994_Init+0x2ce>
 AUDIO_IO_Write(Addr, Reg, Value);
 800d08a:	2283      	movs	r2, #131	; 0x83
 800d08c:	f44f 7104 	mov.w	r1, #528	; 0x210
 800d090:	4620      	mov	r0, r4
 800d092:	f000 fab3 	bl	800d5fc <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800d096:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800d09a:	f43f af4b 	beq.w	800cf34 <wm8994_Init+0x16c>
 AUDIO_IO_Write(Addr, Reg, Value);
 800d09e:	f244 0210 	movw	r2, #16400	; 0x4010
 800d0a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f000 faa8 	bl	800d5fc <AUDIO_IO_Write>
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f240 3102 	movw	r1, #770	; 0x302
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f000 faa2 	bl	800d5fc <AUDIO_IO_Write>
 800d0b8:	220a      	movs	r2, #10
 800d0ba:	f44f 7102 	mov.w	r1, #520	; 0x208
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f000 fa9c 	bl	800d5fc <AUDIO_IO_Write>
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	f000 fa96 	bl	800d5fc <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 800d0d0:	bb46      	cbnz	r6, 800d124 <wm8994_Init+0x35c>
 800d0d2:	2213      	movs	r2, #19
  if (input_device > 0) /* Audio input selected */
 800d0d4:	b915      	cbnz	r5, 800d0dc <wm8994_Init+0x314>
}
 800d0d6:	4650      	mov	r0, sl
 800d0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 800d0dc:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800d0e0:	f000 8120 	beq.w	800d324 <wm8994_Init+0x55c>
 800d0e4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d0e8:	f000 811c 	beq.w	800d324 <wm8994_Init+0x55c>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800d0ec:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800d0f0:	f000 809a 	beq.w	800d228 <wm8994_Init+0x460>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 800d0f4:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 800d0f8:	f000 8102 	beq.w	800d300 <wm8994_Init+0x538>
 800d0fc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800d100:	f000 80fe 	beq.w	800d300 <wm8994_Init+0x538>
    wm8994_SetVolume(DeviceAddr, Volume);
 800d104:	4649      	mov	r1, r9
 800d106:	4640      	mov	r0, r8
 800d108:	f7ff fdb8 	bl	800cc7c <wm8994_SetVolume>
}
 800d10c:	4650      	mov	r0, sl
 800d10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d112:	bf00      	nop
 800d114:	20005ec4 	.word	0x20005ec4
 800d118:	20005ec0 	.word	0x20005ec0
 800d11c:	20000058 	.word	0x20000058
 800d120:	00017700 	.word	0x00017700
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800d124:	2e02      	cmp	r6, #2
 800d126:	f43f af24 	beq.w	800cf72 <wm8994_Init+0x1aa>
 AUDIO_IO_Write(Addr, Reg, Value);
 800d12a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800d12e:	2103      	movs	r1, #3
 800d130:	4620      	mov	r0, r4
 800d132:	f000 fa63 	bl	800d5fc <AUDIO_IO_Write>
 800d136:	2200      	movs	r2, #0
 800d138:	2122      	movs	r1, #34	; 0x22
 800d13a:	4620      	mov	r0, r4
 800d13c:	f000 fa5e 	bl	800d5fc <AUDIO_IO_Write>
 800d140:	2200      	movs	r2, #0
 800d142:	2123      	movs	r1, #35	; 0x23
 800d144:	4620      	mov	r0, r4
 800d146:	f000 fa59 	bl	800d5fc <AUDIO_IO_Write>
 800d14a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800d14e:	2136      	movs	r1, #54	; 0x36
 800d150:	4620      	mov	r0, r4
 800d152:	f000 fa53 	bl	800d5fc <AUDIO_IO_Write>
 800d156:	f243 0203 	movw	r2, #12291	; 0x3003
 800d15a:	2101      	movs	r1, #1
 800d15c:	4620      	mov	r0, r4
 800d15e:	f000 fa4d 	bl	800d5fc <AUDIO_IO_Write>
 800d162:	2205      	movs	r2, #5
 800d164:	2151      	movs	r1, #81	; 0x51
 800d166:	4620      	mov	r0, r4
 800d168:	f000 fa48 	bl	800d5fc <AUDIO_IO_Write>
 800d16c:	f243 3203 	movw	r2, #13059	; 0x3303
 800d170:	2101      	movs	r1, #1
 800d172:	4620      	mov	r0, r4
 800d174:	f000 fa42 	bl	800d5fc <AUDIO_IO_Write>
 800d178:	2222      	movs	r2, #34	; 0x22
 800d17a:	2160      	movs	r1, #96	; 0x60
 800d17c:	4620      	mov	r0, r4
 800d17e:	f000 fa3d 	bl	800d5fc <AUDIO_IO_Write>
 800d182:	f649 7225 	movw	r2, #40741	; 0x9f25
 800d186:	214c      	movs	r1, #76	; 0x4c
 800d188:	4620      	mov	r0, r4
 800d18a:	f000 fa37 	bl	800d5fc <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
 800d18e:	200f      	movs	r0, #15
 800d190:	f000 faa8 	bl	800d6e4 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 800d194:	2201      	movs	r2, #1
 800d196:	212d      	movs	r1, #45	; 0x2d
 800d198:	4620      	mov	r0, r4
 800d19a:	f000 fa2f 	bl	800d5fc <AUDIO_IO_Write>
 800d19e:	2201      	movs	r2, #1
 800d1a0:	212e      	movs	r1, #46	; 0x2e
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f000 fa2a 	bl	800d5fc <AUDIO_IO_Write>
 800d1a8:	f44f 724c 	mov.w	r2, #816	; 0x330
 800d1ac:	2103      	movs	r1, #3
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f000 fa24 	bl	800d5fc <AUDIO_IO_Write>
 800d1b4:	2233      	movs	r2, #51	; 0x33
 800d1b6:	2154      	movs	r1, #84	; 0x54
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	f000 fa1f 	bl	800d5fc <AUDIO_IO_Write>
    AUDIO_IO_Delay(257);
 800d1be:	f240 1001 	movw	r0, #257	; 0x101
 800d1c2:	f000 fa8f 	bl	800d6e4 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 800d1c6:	22ee      	movs	r2, #238	; 0xee
 800d1c8:	2160      	movs	r1, #96	; 0x60
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f000 fa16 	bl	800d5fc <AUDIO_IO_Write>
 800d1d0:	22c0      	movs	r2, #192	; 0xc0
 800d1d2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	f000 fa10 	bl	800d5fc <AUDIO_IO_Write>
 800d1dc:	22c0      	movs	r2, #192	; 0xc0
 800d1de:	f240 6111 	movw	r1, #1553	; 0x611
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f000 fa0a 	bl	800d5fc <AUDIO_IO_Write>
 800d1e8:	2210      	movs	r2, #16
 800d1ea:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	f000 fa04 	bl	800d5fc <AUDIO_IO_Write>
 800d1f4:	22c0      	movs	r2, #192	; 0xc0
 800d1f6:	f240 6112 	movw	r1, #1554	; 0x612
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	f000 f9fe 	bl	800d5fc <AUDIO_IO_Write>
 800d200:	22c0      	movs	r2, #192	; 0xc0
 800d202:	f240 6113 	movw	r1, #1555	; 0x613
 800d206:	4620      	mov	r0, r4
 800d208:	f000 f9f8 	bl	800d5fc <AUDIO_IO_Write>
 800d20c:	2210      	movs	r2, #16
 800d20e:	f240 4122 	movw	r1, #1058	; 0x422
 800d212:	4620      	mov	r0, r4
 800d214:	f000 f9f2 	bl	800d5fc <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 800d218:	4649      	mov	r1, r9
 800d21a:	4640      	mov	r0, r8
 800d21c:	f7ff fd2e 	bl	800cc7c <wm8994_SetVolume>
 800d220:	f243 3213 	movw	r2, #13075	; 0x3313
 800d224:	e756      	b.n	800d0d4 <wm8994_Init+0x30c>
  if (output_device > 0)  /* Audio output selected */
 800d226:	2213      	movs	r2, #19
 AUDIO_IO_Write(Addr, Reg, Value);
 800d228:	4620      	mov	r0, r4
 800d22a:	2101      	movs	r1, #1
 800d22c:	f000 f9e6 	bl	800d5fc <AUDIO_IO_Write>
 800d230:	4620      	mov	r0, r4
 800d232:	2202      	movs	r2, #2
 800d234:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800d238:	f000 f9e0 	bl	800d5fc <AUDIO_IO_Write>
 800d23c:	4620      	mov	r0, r4
 800d23e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800d242:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800d246:	f000 f9d9 	bl	800d5fc <AUDIO_IO_Write>
 800d24a:	4620      	mov	r0, r4
 800d24c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800d250:	f240 4111 	movw	r1, #1041	; 0x411
 800d254:	f000 f9d2 	bl	800d5fc <AUDIO_IO_Write>
 800d258:	e754      	b.n	800d104 <wm8994_Init+0x33c>
 800d25a:	2233      	movs	r2, #51	; 0x33
 800d25c:	f44f 7104 	mov.w	r1, #528	; 0x210
 800d260:	4620      	mov	r0, r4
 800d262:	f000 f9cb 	bl	800d5fc <AUDIO_IO_Write>
    break;
 800d266:	e716      	b.n	800d096 <wm8994_Init+0x2ce>
 AUDIO_IO_Write(Addr, Reg, Value);
 800d268:	2211      	movs	r2, #17
 800d26a:	2128      	movs	r1, #40	; 0x28
 800d26c:	4620      	mov	r0, r4
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800d26e:	f04f 0a00 	mov.w	sl, #0
 AUDIO_IO_Write(Addr, Reg, Value);
 800d272:	f000 f9c3 	bl	800d5fc <AUDIO_IO_Write>
 800d276:	2235      	movs	r2, #53	; 0x35
 800d278:	2129      	movs	r1, #41	; 0x29
 800d27a:	4620      	mov	r0, r4
 800d27c:	f000 f9be 	bl	800d5fc <AUDIO_IO_Write>
 800d280:	2235      	movs	r2, #53	; 0x35
 800d282:	212a      	movs	r1, #42	; 0x2a
 800d284:	4620      	mov	r0, r4
 800d286:	f000 f9b9 	bl	800d5fc <AUDIO_IO_Write>
 800d28a:	f240 3203 	movw	r2, #771	; 0x303
 800d28e:	2104      	movs	r1, #4
 800d290:	4620      	mov	r0, r4
 800d292:	f000 f9b3 	bl	800d5fc <AUDIO_IO_Write>
 800d296:	22db      	movs	r2, #219	; 0xdb
 800d298:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800d29c:	4620      	mov	r0, r4
 800d29e:	f000 f9ad 	bl	800d5fc <AUDIO_IO_Write>
 800d2a2:	f246 3250 	movw	r2, #25424	; 0x6350
 800d2a6:	2102      	movs	r1, #2
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f000 f9a7 	bl	800d5fc <AUDIO_IO_Write>
 800d2ae:	2202      	movs	r2, #2
 800d2b0:	f240 6106 	movw	r1, #1542	; 0x606
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	f000 f9a1 	bl	800d5fc <AUDIO_IO_Write>
 800d2ba:	2202      	movs	r2, #2
 800d2bc:	f240 6107 	movw	r1, #1543	; 0x607
 800d2c0:	e620      	b.n	800cf04 <wm8994_Init+0x13c>
 800d2c2:	f640 420c 	movw	r2, #3084	; 0xc0c
 800d2c6:	2105      	movs	r1, #5
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f000 f997 	bl	800d5fc <AUDIO_IO_Write>
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f240 6101 	movw	r1, #1537	; 0x601
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f000 f991 	bl	800d5fc <AUDIO_IO_Write>
 800d2da:	2200      	movs	r2, #0
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f240 6102 	movw	r1, #1538	; 0x602
 800d2e2:	f000 f98b 	bl	800d5fc <AUDIO_IO_Write>
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	2202      	movs	r2, #2
 800d2ea:	f240 6104 	movw	r1, #1540	; 0x604
 800d2ee:	f000 f985 	bl	800d5fc <AUDIO_IO_Write>
 800d2f2:	2202      	movs	r2, #2
 800d2f4:	f240 6105 	movw	r1, #1541	; 0x605
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	f000 f97f 	bl	800d5fc <AUDIO_IO_Write>
 800d2fe:	e690      	b.n	800d022 <wm8994_Init+0x25a>
 800d300:	4620      	mov	r0, r4
 800d302:	220b      	movs	r2, #11
 800d304:	2118      	movs	r1, #24
 800d306:	f000 f979 	bl	800d5fc <AUDIO_IO_Write>
 800d30a:	4620      	mov	r0, r4
 800d30c:	220b      	movs	r2, #11
 800d30e:	211a      	movs	r1, #26
 800d310:	f000 f974 	bl	800d5fc <AUDIO_IO_Write>
 800d314:	4620      	mov	r0, r4
 800d316:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800d31a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800d31e:	f000 f96d 	bl	800d5fc <AUDIO_IO_Write>
 800d322:	e6ef      	b.n	800d104 <wm8994_Init+0x33c>
 800d324:	4620      	mov	r0, r4
 800d326:	2101      	movs	r1, #1
 800d328:	f000 f968 	bl	800d5fc <AUDIO_IO_Write>
 800d32c:	4620      	mov	r0, r4
 800d32e:	2202      	movs	r2, #2
 800d330:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800d334:	f000 f962 	bl	800d5fc <AUDIO_IO_Write>
 800d338:	4620      	mov	r0, r4
 800d33a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800d33e:	f240 4111 	movw	r1, #1041	; 0x411
 800d342:	f000 f95b 	bl	800d5fc <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 800d346:	4649      	mov	r1, r9
 800d348:	4640      	mov	r0, r8
 800d34a:	f7ff fc97 	bl	800cc7c <wm8994_SetVolume>
 800d34e:	e6dd      	b.n	800d10c <wm8994_Init+0x344>
    switch (input_device)
 800d350:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800d354:	d131      	bne.n	800d3ba <wm8994_Init+0x5f2>
 AUDIO_IO_Write(Addr, Reg, Value);
 800d356:	f44f 7243 	mov.w	r2, #780	; 0x30c
 800d35a:	2104      	movs	r1, #4
 800d35c:	4620      	mov	r0, r4
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800d35e:	f04f 0a00 	mov.w	sl, #0
 800d362:	e796      	b.n	800d292 <wm8994_Init+0x4ca>
  switch (AudioFreq)
 800d364:	f5b7 4ffa 	cmp.w	r7, #32000	; 0x7d00
 800d368:	f47f ae8f 	bne.w	800d08a <wm8994_Init+0x2c2>
 AUDIO_IO_Write(Addr, Reg, Value);
 800d36c:	2263      	movs	r2, #99	; 0x63
 800d36e:	f44f 7104 	mov.w	r1, #528	; 0x210
 800d372:	4620      	mov	r0, r4
 800d374:	f000 f942 	bl	800d5fc <AUDIO_IO_Write>
    break;
 800d378:	e68d      	b.n	800d096 <wm8994_Init+0x2ce>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800d37a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 800d37e:	f640 720f 	movw	r2, #3855	; 0xf0f
 800d382:	f04f 0105 	mov.w	r1, #5
 800d386:	4620      	mov	r0, r4
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800d388:	d069      	beq.n	800d45e <wm8994_Init+0x696>
 AUDIO_IO_Write(Addr, Reg, Value);
 800d38a:	f000 f937 	bl	800d5fc <AUDIO_IO_Write>
 800d38e:	4652      	mov	r2, sl
 800d390:	f240 6101 	movw	r1, #1537	; 0x601
 800d394:	4620      	mov	r0, r4
 800d396:	f000 f931 	bl	800d5fc <AUDIO_IO_Write>
 800d39a:	4652      	mov	r2, sl
 800d39c:	e79e      	b.n	800d2dc <wm8994_Init+0x514>
 800d39e:	2213      	movs	r2, #19
 800d3a0:	f44f 7104 	mov.w	r1, #528	; 0x210
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f000 f929 	bl	800d5fc <AUDIO_IO_Write>
    break;
 800d3aa:	e674      	b.n	800d096 <wm8994_Init+0x2ce>
 AUDIO_IO_Write(Addr, Reg, Value);
 800d3ac:	2273      	movs	r2, #115	; 0x73
 800d3ae:	f44f 7104 	mov.w	r1, #528	; 0x210
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	f000 f922 	bl	800d5fc <AUDIO_IO_Write>
    break; 
 800d3b8:	e66d      	b.n	800d096 <wm8994_Init+0x2ce>
      counter++;
 800d3ba:	f04f 0a01 	mov.w	sl, #1
 800d3be:	e636      	b.n	800d02e <wm8994_Init+0x266>
 AUDIO_IO_Write(Addr, Reg, Value);
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 800d3c6:	2104      	movs	r1, #4
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800d3c8:	f04f 0a00 	mov.w	sl, #0
 AUDIO_IO_Write(Addr, Reg, Value);
 800d3cc:	f000 f916 	bl	800d5fc <AUDIO_IO_Write>
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	22db      	movs	r2, #219	; 0xdb
 800d3d4:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800d3d8:	f000 f910 	bl	800d5fc <AUDIO_IO_Write>
 800d3dc:	4620      	mov	r0, r4
 800d3de:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800d3e2:	2102      	movs	r1, #2
 800d3e4:	f000 f90a 	bl	800d5fc <AUDIO_IO_Write>
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800d3f0:	f000 f904 	bl	800d5fc <AUDIO_IO_Write>
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	2202      	movs	r2, #2
 800d3f8:	f240 6109 	movw	r1, #1545	; 0x609
 800d3fc:	f000 f8fe 	bl	800d5fc <AUDIO_IO_Write>
 800d400:	220e      	movs	r2, #14
 800d402:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800d406:	4620      	mov	r0, r4
 800d408:	f000 f8f8 	bl	800d5fc <AUDIO_IO_Write>
      break;
 800d40c:	e60f      	b.n	800d02e <wm8994_Init+0x266>
 AUDIO_IO_Write(Addr, Reg, Value);
 800d40e:	4620      	mov	r0, r4
 800d410:	f44f 7240 	mov.w	r2, #768	; 0x300
 800d414:	2103      	movs	r1, #3
 800d416:	f000 f8f1 	bl	800d5fc <AUDIO_IO_Write>
 800d41a:	4620      	mov	r0, r4
 800d41c:	2200      	movs	r2, #0
 800d41e:	2122      	movs	r1, #34	; 0x22
 800d420:	f000 f8ec 	bl	800d5fc <AUDIO_IO_Write>
 800d424:	4620      	mov	r0, r4
 800d426:	2200      	movs	r2, #0
 800d428:	2123      	movs	r1, #35	; 0x23
 800d42a:	f000 f8e7 	bl	800d5fc <AUDIO_IO_Write>
 800d42e:	4620      	mov	r0, r4
 800d430:	f44f 7240 	mov.w	r2, #768	; 0x300
 800d434:	2136      	movs	r1, #54	; 0x36
 800d436:	f000 f8e1 	bl	800d5fc <AUDIO_IO_Write>
 800d43a:	f243 0203 	movw	r2, #12291	; 0x3003
 800d43e:	2101      	movs	r1, #1
 800d440:	4620      	mov	r0, r4
 800d442:	f000 f8db 	bl	800d5fc <AUDIO_IO_Write>
 800d446:	e5d8      	b.n	800cffa <wm8994_Init+0x232>
 800d448:	4620      	mov	r0, r4
 800d44a:	f248 1208 	movw	r2, #33032	; 0x8108
 800d44e:	f44f 7188 	mov.w	r1, #272	; 0x110
 800d452:	f000 f8d3 	bl	800d5fc <AUDIO_IO_Write>
        AUDIO_IO_Delay(50);
 800d456:	2032      	movs	r0, #50	; 0x32
 800d458:	f000 f944 	bl	800d6e4 <AUDIO_IO_Delay>
 800d45c:	e5a7      	b.n	800cfae <wm8994_Init+0x1e6>
 AUDIO_IO_Write(Addr, Reg, Value);
 800d45e:	f000 f8cd 	bl	800d5fc <AUDIO_IO_Write>
 800d462:	4632      	mov	r2, r6
 800d464:	f240 6101 	movw	r1, #1537	; 0x601
 800d468:	4620      	mov	r0, r4
 800d46a:	f000 f8c7 	bl	800d5fc <AUDIO_IO_Write>
 800d46e:	4632      	mov	r2, r6
 800d470:	f240 6102 	movw	r1, #1538	; 0x602
 800d474:	4620      	mov	r0, r4
 800d476:	f000 f8c1 	bl	800d5fc <AUDIO_IO_Write>
 800d47a:	4632      	mov	r2, r6
 800d47c:	f240 6104 	movw	r1, #1540	; 0x604
 800d480:	4620      	mov	r0, r4
 800d482:	f000 f8bb 	bl	800d5fc <AUDIO_IO_Write>
 800d486:	4632      	mov	r2, r6
 800d488:	f240 6105 	movw	r1, #1541	; 0x605
 800d48c:	4620      	mov	r0, r4
 800d48e:	f000 f8b5 	bl	800d5fc <AUDIO_IO_Write>
    inputEnabled = 1;
 800d492:	4b02      	ldr	r3, [pc, #8]	; (800d49c <wm8994_Init+0x6d4>)
 800d494:	f8c3 a000 	str.w	sl, [r3]
 800d498:	e505      	b.n	800cea6 <wm8994_Init+0xde>
 800d49a:	bf00      	nop
 800d49c:	20005ec0 	.word	0x20005ec0

0800d4a0 <I2Cx_MspInit.constprop.11>:
/**
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
 800d4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800d4a2:	4c21      	ldr	r4, [pc, #132]	; (800d528 <I2Cx_MspInit.constprop.11+0x88>)

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800d4a4:	2080      	movs	r0, #128	; 0x80
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
 800d4a6:	b089      	sub	sp, #36	; 0x24
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800d4a8:	2212      	movs	r2, #18
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800d4aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 800d4ac:	2500      	movs	r5, #0
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800d4ae:	4e1f      	ldr	r6, [pc, #124]	; (800d52c <I2Cx_MspInit.constprop.11+0x8c>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800d4b0:	2702      	movs	r7, #2
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800d4b2:	4303      	orrs	r3, r0
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800d4b4:	a903      	add	r1, sp, #12
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800d4b6:	6323      	str	r3, [r4, #48]	; 0x30
 800d4b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800d4ba:	9204      	str	r2, [sp, #16]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800d4bc:	2204      	movs	r2, #4
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800d4be:	4003      	ands	r3, r0
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800d4c0:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800d4c2:	4630      	mov	r0, r6
    gpio_init_structure.Pull = GPIO_NOPULL;
 800d4c4:	9505      	str	r5, [sp, #20]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800d4c6:	9301      	str	r3, [sp, #4]
 800d4c8:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800d4ca:	e9cd 7206 	strd	r7, r2, [sp, #24]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800d4ce:	f002 fd13 	bl	800fef8 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800d4d2:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800d4d6:	a903      	add	r1, sp, #12
 800d4d8:	4630      	mov	r0, r6
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800d4da:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800d4dc:	f002 fd0c 	bl	800fef8 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800d4e0:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800d4e2:	462a      	mov	r2, r5
 800d4e4:	210f      	movs	r1, #15
 800d4e6:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800d4e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d4ec:	6423      	str	r3, [r4, #64]	; 0x40
 800d4ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d4f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4f4:	9302      	str	r3, [sp, #8]
 800d4f6:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800d4f8:	6a23      	ldr	r3, [r4, #32]
 800d4fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d4fe:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800d500:	6a23      	ldr	r3, [r4, #32]
 800d502:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d506:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800d508:	f001 ff88 	bl	800f41c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800d50c:	2048      	movs	r0, #72	; 0x48
 800d50e:	f001 ffbb 	bl	800f488 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800d512:	462a      	mov	r2, r5
 800d514:	210f      	movs	r1, #15
 800d516:	2049      	movs	r0, #73	; 0x49
 800d518:	f001 ff80 	bl	800f41c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800d51c:	2049      	movs	r0, #73	; 0x49
 800d51e:	f001 ffb3 	bl	800f488 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800d522:	b009      	add	sp, #36	; 0x24
 800d524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d526:	bf00      	nop
 800d528:	40023800 	.word	0x40023800
 800d52c:	40021c00 	.word	0x40021c00

0800d530 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 800d530:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800d532:	4c2c      	ldr	r4, [pc, #176]	; (800d5e4 <AUDIO_IO_Init+0xb4>)
{
 800d534:	b089      	sub	sp, #36	; 0x24
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800d536:	4620      	mov	r0, r4
 800d538:	f003 ff60 	bl	80113fc <HAL_I2C_GetState>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	d14e      	bne.n	800d5de <AUDIO_IO_Init+0xae>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800d540:	4e29      	ldr	r6, [pc, #164]	; (800d5e8 <AUDIO_IO_Init+0xb8>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800d542:	2780      	movs	r7, #128	; 0x80
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800d544:	4b29      	ldr	r3, [pc, #164]	; (800d5ec <AUDIO_IO_Init+0xbc>)
 800d546:	4605      	mov	r5, r0
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800d548:	f04f 0c01 	mov.w	ip, #1
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800d54c:	a903      	add	r1, sp, #12
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800d54e:	6023      	str	r3, [r4, #0]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800d550:	6b33      	ldr	r3, [r6, #48]	; 0x30
    i2c_handler->Init.OwnAddress1      = 0;
 800d552:	60a0      	str	r0, [r4, #8]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800d554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    i2c_handler->Init.OwnAddress2      = 0;
 800d558:	e9c4 0004 	strd	r0, r0, [r4, #16]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800d55c:	6333      	str	r3, [r6, #48]	; 0x30
 800d55e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800d560:	61e0      	str	r0, [r4, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800d562:	403b      	ands	r3, r7
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800d564:	6220      	str	r0, [r4, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800d566:	9005      	str	r0, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800d568:	2012      	movs	r0, #18
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800d56a:	9301      	str	r3, [sp, #4]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800d56c:	4b20      	ldr	r3, [pc, #128]	; (800d5f0 <AUDIO_IO_Init+0xc0>)
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800d56e:	9a01      	ldr	r2, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800d570:	2202      	movs	r2, #2
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800d572:	6063      	str	r3, [r4, #4]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800d574:	2304      	movs	r3, #4
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800d576:	f8c4 c00c 	str.w	ip, [r4, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800d57a:	9206      	str	r2, [sp, #24]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800d57c:	9307      	str	r3, [sp, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800d57e:	e9cd 7003 	strd	r7, r0, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800d582:	481c      	ldr	r0, [pc, #112]	; (800d5f4 <AUDIO_IO_Init+0xc4>)
 800d584:	f002 fcb8 	bl	800fef8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800d588:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800d58c:	a903      	add	r1, sp, #12
 800d58e:	4819      	ldr	r0, [pc, #100]	; (800d5f4 <AUDIO_IO_Init+0xc4>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800d590:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800d592:	f002 fcb1 	bl	800fef8 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800d596:	6c33      	ldr	r3, [r6, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800d598:	462a      	mov	r2, r5
 800d59a:	210f      	movs	r1, #15
 800d59c:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800d59e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d5a2:	6433      	str	r3, [r6, #64]	; 0x40
 800d5a4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800d5a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5aa:	9302      	str	r3, [sp, #8]
 800d5ac:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800d5ae:	6a33      	ldr	r3, [r6, #32]
 800d5b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d5b4:	6233      	str	r3, [r6, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800d5b6:	6a33      	ldr	r3, [r6, #32]
 800d5b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d5bc:	6233      	str	r3, [r6, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800d5be:	f001 ff2d 	bl	800f41c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800d5c2:	2048      	movs	r0, #72	; 0x48
 800d5c4:	f001 ff60 	bl	800f488 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800d5c8:	462a      	mov	r2, r5
 800d5ca:	210f      	movs	r1, #15
 800d5cc:	2049      	movs	r0, #73	; 0x49
 800d5ce:	f001 ff25 	bl	800f41c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800d5d2:	2049      	movs	r0, #73	; 0x49
 800d5d4:	f001 ff58 	bl	800f488 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(i2c_handler);
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f003 fc35 	bl	8010e48 <HAL_I2C_Init>
  I2Cx_Init(&hI2cAudioHandler);
}
 800d5de:	b009      	add	sp, #36	; 0x24
 800d5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	20005ec8 	.word	0x20005ec8
 800d5e8:	40023800 	.word	0x40023800
 800d5ec:	40005c00 	.word	0x40005c00
 800d5f0:	40912732 	.word	0x40912732
 800d5f4:	40021c00 	.word	0x40021c00

0800d5f8 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
 800d5f8:	4770      	bx	lr
 800d5fa:	bf00      	nop

0800d5fc <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800d5fc:	b570      	push	{r4, r5, r6, lr}
 800d5fe:	b086      	sub	sp, #24
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800d600:	ba55      	rev16	r5, r2
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800d602:	4c16      	ldr	r4, [pc, #88]	; (800d65c <AUDIO_IO_Write+0x60>)
 800d604:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800d608:	ab06      	add	r3, sp, #24
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800d60a:	460a      	mov	r2, r1
 800d60c:	4601      	mov	r1, r0
 800d60e:	4620      	mov	r0, r4
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800d610:	f823 5d02 	strh.w	r5, [r3, #-2]!
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800d614:	2502      	movs	r5, #2
 800d616:	9300      	str	r3, [sp, #0]
 800d618:	9602      	str	r6, [sp, #8]
 800d61a:	462b      	mov	r3, r5
 800d61c:	9501      	str	r5, [sp, #4]
 800d61e:	f003 fc81 	bl	8010f24 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800d622:	b908      	cbnz	r0, 800d628 <AUDIO_IO_Write+0x2c>
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
}
 800d624:	b006      	add	sp, #24
 800d626:	bd70      	pop	{r4, r5, r6, pc}
  HAL_I2C_DeInit(i2c_handler);
 800d628:	4620      	mov	r0, r4
 800d62a:	f003 fc61 	bl	8010ef0 <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800d62e:	4620      	mov	r0, r4
 800d630:	f003 fee4 	bl	80113fc <HAL_I2C_GetState>
 800d634:	2800      	cmp	r0, #0
 800d636:	d1f5      	bne.n	800d624 <AUDIO_IO_Write+0x28>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800d638:	4909      	ldr	r1, [pc, #36]	; (800d660 <AUDIO_IO_Write+0x64>)
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800d63a:	2301      	movs	r3, #1
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800d63c:	4a09      	ldr	r2, [pc, #36]	; (800d664 <AUDIO_IO_Write+0x68>)
    i2c_handler->Init.OwnAddress1      = 0;
 800d63e:	60a0      	str	r0, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800d640:	60e3      	str	r3, [r4, #12]
    i2c_handler->Init.OwnAddress2      = 0;
 800d642:	e9c4 0004 	strd	r0, r0, [r4, #16]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800d646:	e9c4 0007 	strd	r0, r0, [r4, #28]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800d64a:	e9c4 1200 	strd	r1, r2, [r4]
    I2Cx_MspInit(i2c_handler);
 800d64e:	f7ff ff27 	bl	800d4a0 <I2Cx_MspInit.constprop.11>
    HAL_I2C_Init(i2c_handler);
 800d652:	4620      	mov	r0, r4
 800d654:	f003 fbf8 	bl	8010e48 <HAL_I2C_Init>
}
 800d658:	b006      	add	sp, #24
 800d65a:	bd70      	pop	{r4, r5, r6, pc}
 800d65c:	20005ec8 	.word	0x20005ec8
 800d660:	40005c00 	.word	0x40005c00
 800d664:	40912732 	.word	0x40912732

0800d668 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 800d668:	b570      	push	{r4, r5, r6, lr}
 800d66a:	b086      	sub	sp, #24
  uint16_t read_value = 0, tmp = 0;
 800d66c:	2500      	movs	r5, #0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800d66e:	4c1a      	ldr	r4, [pc, #104]	; (800d6d8 <AUDIO_IO_Read+0x70>)
 800d670:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint16_t read_value = 0, tmp = 0;
 800d674:	ab06      	add	r3, sp, #24
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800d676:	460a      	mov	r2, r1
 800d678:	4601      	mov	r1, r0
 800d67a:	4620      	mov	r0, r4
  uint16_t read_value = 0, tmp = 0;
 800d67c:	f823 5d02 	strh.w	r5, [r3, #-2]!
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800d680:	2502      	movs	r5, #2
 800d682:	9300      	str	r3, [sp, #0]
 800d684:	9602      	str	r6, [sp, #8]
 800d686:	462b      	mov	r3, r5
 800d688:	9501      	str	r5, [sp, #4]
 800d68a:	f003 fd7b 	bl	8011184 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800d68e:	b928      	cbnz	r0, 800d69c <AUDIO_IO_Read+0x34>
 800d690:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800d694:	ba40      	rev16	r0, r0
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
  
  read_value = tmp;
  
  return read_value;
}
 800d696:	b280      	uxth	r0, r0
 800d698:	b006      	add	sp, #24
 800d69a:	bd70      	pop	{r4, r5, r6, pc}
  HAL_I2C_DeInit(i2c_handler);
 800d69c:	4620      	mov	r0, r4
 800d69e:	f003 fc27 	bl	8010ef0 <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f003 feaa 	bl	80113fc <HAL_I2C_GetState>
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	d1f1      	bne.n	800d690 <AUDIO_IO_Read+0x28>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800d6ac:	490b      	ldr	r1, [pc, #44]	; (800d6dc <AUDIO_IO_Read+0x74>)
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800d6ae:	2301      	movs	r3, #1
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800d6b0:	4a0b      	ldr	r2, [pc, #44]	; (800d6e0 <AUDIO_IO_Read+0x78>)
    i2c_handler->Init.OwnAddress1      = 0;
 800d6b2:	60a0      	str	r0, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800d6b4:	60e3      	str	r3, [r4, #12]
    i2c_handler->Init.OwnAddress2      = 0;
 800d6b6:	e9c4 0004 	strd	r0, r0, [r4, #16]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800d6ba:	e9c4 0007 	strd	r0, r0, [r4, #28]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800d6be:	e9c4 1200 	strd	r1, r2, [r4]
    I2Cx_MspInit(i2c_handler);
 800d6c2:	f7ff feed 	bl	800d4a0 <I2Cx_MspInit.constprop.11>
    HAL_I2C_Init(i2c_handler);
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	f003 fbbe 	bl	8010e48 <HAL_I2C_Init>
 800d6cc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800d6d0:	ba40      	rev16	r0, r0
}
 800d6d2:	b280      	uxth	r0, r0
 800d6d4:	b006      	add	sp, #24
 800d6d6:	bd70      	pop	{r4, r5, r6, pc}
 800d6d8:	20005ec8 	.word	0x20005ec8
 800d6dc:	40005c00 	.word	0x40005c00
 800d6e0:	40912732 	.word	0x40912732

0800d6e4 <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800d6e4:	f001 bd0a 	b.w	800f0fc <HAL_Delay>

0800d6e8 <TS_IO_Init>:
 800d6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ea:	4c2c      	ldr	r4, [pc, #176]	; (800d79c <TS_IO_Init+0xb4>)
 800d6ec:	b089      	sub	sp, #36	; 0x24
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f003 fe84 	bl	80113fc <HAL_I2C_GetState>
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d14e      	bne.n	800d796 <TS_IO_Init+0xae>
 800d6f8:	4e29      	ldr	r6, [pc, #164]	; (800d7a0 <TS_IO_Init+0xb8>)
 800d6fa:	2780      	movs	r7, #128	; 0x80
 800d6fc:	4b29      	ldr	r3, [pc, #164]	; (800d7a4 <TS_IO_Init+0xbc>)
 800d6fe:	4605      	mov	r5, r0
 800d700:	f04f 0c01 	mov.w	ip, #1
 800d704:	a903      	add	r1, sp, #12
 800d706:	6023      	str	r3, [r4, #0]
 800d708:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800d70a:	60a0      	str	r0, [r4, #8]
 800d70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d710:	e9c4 0004 	strd	r0, r0, [r4, #16]
 800d714:	6333      	str	r3, [r6, #48]	; 0x30
 800d716:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800d718:	61e0      	str	r0, [r4, #28]
 800d71a:	403b      	ands	r3, r7
 800d71c:	6220      	str	r0, [r4, #32]
 800d71e:	9005      	str	r0, [sp, #20]
 800d720:	2012      	movs	r0, #18
 800d722:	9302      	str	r3, [sp, #8]
 800d724:	4b20      	ldr	r3, [pc, #128]	; (800d7a8 <TS_IO_Init+0xc0>)
 800d726:	9a02      	ldr	r2, [sp, #8]
 800d728:	2202      	movs	r2, #2
 800d72a:	6063      	str	r3, [r4, #4]
 800d72c:	2304      	movs	r3, #4
 800d72e:	f8c4 c00c 	str.w	ip, [r4, #12]
 800d732:	9206      	str	r2, [sp, #24]
 800d734:	9307      	str	r3, [sp, #28]
 800d736:	e9cd 7003 	strd	r7, r0, [sp, #12]
 800d73a:	481c      	ldr	r0, [pc, #112]	; (800d7ac <TS_IO_Init+0xc4>)
 800d73c:	f002 fbdc 	bl	800fef8 <HAL_GPIO_Init>
 800d740:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d744:	a903      	add	r1, sp, #12
 800d746:	4819      	ldr	r0, [pc, #100]	; (800d7ac <TS_IO_Init+0xc4>)
 800d748:	9303      	str	r3, [sp, #12]
 800d74a:	f002 fbd5 	bl	800fef8 <HAL_GPIO_Init>
 800d74e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800d750:	462a      	mov	r2, r5
 800d752:	210f      	movs	r1, #15
 800d754:	2048      	movs	r0, #72	; 0x48
 800d756:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d75a:	6433      	str	r3, [r6, #64]	; 0x40
 800d75c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800d75e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d762:	9301      	str	r3, [sp, #4]
 800d764:	9b01      	ldr	r3, [sp, #4]
 800d766:	6a33      	ldr	r3, [r6, #32]
 800d768:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d76c:	6233      	str	r3, [r6, #32]
 800d76e:	6a33      	ldr	r3, [r6, #32]
 800d770:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d774:	6233      	str	r3, [r6, #32]
 800d776:	f001 fe51 	bl	800f41c <HAL_NVIC_SetPriority>
 800d77a:	2048      	movs	r0, #72	; 0x48
 800d77c:	f001 fe84 	bl	800f488 <HAL_NVIC_EnableIRQ>
 800d780:	462a      	mov	r2, r5
 800d782:	210f      	movs	r1, #15
 800d784:	2049      	movs	r0, #73	; 0x49
 800d786:	f001 fe49 	bl	800f41c <HAL_NVIC_SetPriority>
 800d78a:	2049      	movs	r0, #73	; 0x49
 800d78c:	f001 fe7c 	bl	800f488 <HAL_NVIC_EnableIRQ>
 800d790:	4620      	mov	r0, r4
 800d792:	f003 fb59 	bl	8010e48 <HAL_I2C_Init>
 800d796:	b009      	add	sp, #36	; 0x24
 800d798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d79a:	bf00      	nop
 800d79c:	20005ec8 	.word	0x20005ec8
 800d7a0:	40023800 	.word	0x40023800
 800d7a4:	40005c00 	.word	0x40005c00
 800d7a8:	40912732 	.word	0x40912732
 800d7ac:	40021c00 	.word	0x40021c00

0800d7b0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800d7b0:	b570      	push	{r4, r5, r6, lr}
 800d7b2:	b086      	sub	sp, #24
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800d7b4:	2501      	movs	r5, #1
 800d7b6:	4c15      	ldr	r4, [pc, #84]	; (800d80c <TS_IO_Write+0x5c>)
 800d7b8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
{
 800d7bc:	ab06      	add	r3, sp, #24
 800d7be:	f803 2d01 	strb.w	r2, [r3, #-1]!
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800d7c2:	460a      	mov	r2, r1
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	4601      	mov	r1, r0
 800d7c8:	9602      	str	r6, [sp, #8]
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	9501      	str	r5, [sp, #4]
 800d7ce:	462b      	mov	r3, r5
 800d7d0:	f003 fba8 	bl	8010f24 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800d7d4:	b908      	cbnz	r0, 800d7da <TS_IO_Write+0x2a>
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 800d7d6:	b006      	add	sp, #24
 800d7d8:	bd70      	pop	{r4, r5, r6, pc}
  HAL_I2C_DeInit(i2c_handler);
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f003 fb88 	bl	8010ef0 <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f003 fe0b 	bl	80113fc <HAL_I2C_GetState>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	d1f5      	bne.n	800d7d6 <TS_IO_Write+0x26>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800d7ea:	4a09      	ldr	r2, [pc, #36]	; (800d810 <TS_IO_Write+0x60>)
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800d7ec:	4b09      	ldr	r3, [pc, #36]	; (800d814 <TS_IO_Write+0x64>)
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800d7ee:	e9c4 0502 	strd	r0, r5, [r4, #8]
    i2c_handler->Init.OwnAddress2      = 0;
 800d7f2:	e9c4 0004 	strd	r0, r0, [r4, #16]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800d7f6:	e9c4 0007 	strd	r0, r0, [r4, #28]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800d7fa:	e9c4 2300 	strd	r2, r3, [r4]
    I2Cx_MspInit(i2c_handler);
 800d7fe:	f7ff fe4f 	bl	800d4a0 <I2Cx_MspInit.constprop.11>
    HAL_I2C_Init(i2c_handler);
 800d802:	4620      	mov	r0, r4
 800d804:	f003 fb20 	bl	8010e48 <HAL_I2C_Init>
}
 800d808:	b006      	add	sp, #24
 800d80a:	bd70      	pop	{r4, r5, r6, pc}
 800d80c:	20005ec8 	.word	0x20005ec8
 800d810:	40005c00 	.word	0x40005c00
 800d814:	40912732 	.word	0x40912732

0800d818 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800d818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d81a:	b087      	sub	sp, #28
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800d81c:	2501      	movs	r5, #1
  uint8_t read_value = 0;
 800d81e:	2700      	movs	r7, #0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800d820:	4c17      	ldr	r4, [pc, #92]	; (800d880 <TS_IO_Read+0x68>)
  uint8_t read_value = 0;
 800d822:	ab06      	add	r3, sp, #24
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800d824:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800d828:	460a      	mov	r2, r1
 800d82a:	4601      	mov	r1, r0
  uint8_t read_value = 0;
 800d82c:	f803 7d01 	strb.w	r7, [r3, #-1]!
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800d830:	4620      	mov	r0, r4
 800d832:	9300      	str	r3, [sp, #0]
 800d834:	462b      	mov	r3, r5
 800d836:	9602      	str	r6, [sp, #8]
 800d838:	9501      	str	r5, [sp, #4]
 800d83a:	f003 fca3 	bl	8011184 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800d83e:	b918      	cbnz	r0, 800d848 <TS_IO_Read+0x30>

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 800d840:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800d844:	b007      	add	sp, #28
 800d846:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_I2C_DeInit(i2c_handler);
 800d848:	4620      	mov	r0, r4
 800d84a:	f003 fb51 	bl	8010ef0 <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800d84e:	4620      	mov	r0, r4
 800d850:	f003 fdd4 	bl	80113fc <HAL_I2C_GetState>
 800d854:	2800      	cmp	r0, #0
 800d856:	d1f3      	bne.n	800d840 <TS_IO_Read+0x28>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800d858:	4a0a      	ldr	r2, [pc, #40]	; (800d884 <TS_IO_Read+0x6c>)
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800d85a:	4b0b      	ldr	r3, [pc, #44]	; (800d888 <TS_IO_Read+0x70>)
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800d85c:	e9c4 0502 	strd	r0, r5, [r4, #8]
    i2c_handler->Init.OwnAddress2      = 0;
 800d860:	e9c4 0004 	strd	r0, r0, [r4, #16]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800d864:	e9c4 0007 	strd	r0, r0, [r4, #28]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800d868:	e9c4 2300 	strd	r2, r3, [r4]
    I2Cx_MspInit(i2c_handler);
 800d86c:	f7ff fe18 	bl	800d4a0 <I2Cx_MspInit.constprop.11>
    HAL_I2C_Init(i2c_handler);
 800d870:	4620      	mov	r0, r4
 800d872:	f003 fae9 	bl	8010e48 <HAL_I2C_Init>
}
 800d876:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800d87a:	b007      	add	sp, #28
 800d87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d87e:	bf00      	nop
 800d880:	20005ec8 	.word	0x20005ec8
 800d884:	40005c00 	.word	0x40005c00
 800d888:	40912732 	.word	0x40912732

0800d88c <TS_IO_Delay>:
 800d88c:	f001 bc36 	b.w	800f0fc <HAL_Delay>

0800d890 <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 800d890:	b538      	push	{r3, r4, r5, lr}
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800d892:	4b0c      	ldr	r3, [pc, #48]	; (800d8c4 <BSP_AUDIO_OUT_Play+0x34>)
{
 800d894:	4605      	mov	r5, r0
 800d896:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800d898:	2034      	movs	r0, #52	; 0x34
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4629      	mov	r1, r5
 800d89e:	b2a2      	uxth	r2, r4
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	4798      	blx	r3
 800d8a4:	b960      	cbnz	r0, 800d8c0 <BSP_AUDIO_OUT_Play+0x30>
    return AUDIO_ERROR;
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 800d8a6:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	4806      	ldr	r0, [pc, #24]	; (800d8c8 <BSP_AUDIO_OUT_Play+0x38>)
 800d8ae:	bf34      	ite	cc
 800d8b0:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 800d8b4:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 800d8b8:	f005 fcb8 	bl	801322c <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 800d8bc:	2000      	movs	r0, #0
  }
}
 800d8be:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 800d8c0:	2001      	movs	r0, #1
}
 800d8c2:	bd38      	pop	{r3, r4, r5, pc}
 800d8c4:	2001315c 	.word	0x2001315c
 800d8c8:	20005f98 	.word	0x20005f98

0800d8cc <BSP_AUDIO_OUT_Pause>:
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Pause(void)
{    
  /* Call the Audio Codec Pause/Resume function */
  if(audio_drv->Pause(AUDIO_I2C_ADDRESS) != 0)
 800d8cc:	4b07      	ldr	r3, [pc, #28]	; (800d8ec <BSP_AUDIO_OUT_Pause+0x20>)
 800d8ce:	2034      	movs	r0, #52	; 0x34
 800d8d0:	681b      	ldr	r3, [r3, #0]
{    
 800d8d2:	b510      	push	{r4, lr}
  if(audio_drv->Pause(AUDIO_I2C_ADDRESS) != 0)
 800d8d4:	691b      	ldr	r3, [r3, #16]
 800d8d6:	4798      	blx	r3
 800d8d8:	b108      	cbz	r0, 800d8de <BSP_AUDIO_OUT_Pause+0x12>
  {
    return AUDIO_ERROR;
 800d8da:	2001      	movs	r0, #1
    HAL_SAI_DMAPause(&haudio_out_sai);
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
  }
}
 800d8dc:	bd10      	pop	{r4, pc}
 800d8de:	4604      	mov	r4, r0
    HAL_SAI_DMAPause(&haudio_out_sai);
 800d8e0:	4803      	ldr	r0, [pc, #12]	; (800d8f0 <BSP_AUDIO_OUT_Pause+0x24>)
 800d8e2:	f005 fc0f 	bl	8013104 <HAL_SAI_DMAPause>
    return AUDIO_OK;
 800d8e6:	4620      	mov	r0, r4
}
 800d8e8:	bd10      	pop	{r4, pc}
 800d8ea:	bf00      	nop
 800d8ec:	2001315c 	.word	0x2001315c
 800d8f0:	20005f98 	.word	0x20005f98

0800d8f4 <BSP_AUDIO_OUT_Resume>:
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Resume(void)
{    
  /* Call the Audio Codec Pause/Resume function */
  if(audio_drv->Resume(AUDIO_I2C_ADDRESS) != 0)
 800d8f4:	4b07      	ldr	r3, [pc, #28]	; (800d914 <BSP_AUDIO_OUT_Resume+0x20>)
 800d8f6:	2034      	movs	r0, #52	; 0x34
 800d8f8:	681b      	ldr	r3, [r3, #0]
{    
 800d8fa:	b510      	push	{r4, lr}
  if(audio_drv->Resume(AUDIO_I2C_ADDRESS) != 0)
 800d8fc:	695b      	ldr	r3, [r3, #20]
 800d8fe:	4798      	blx	r3
 800d900:	b108      	cbz	r0, 800d906 <BSP_AUDIO_OUT_Resume+0x12>
  {
    return AUDIO_ERROR;
 800d902:	2001      	movs	r0, #1
    HAL_SAI_DMAResume(&haudio_out_sai);
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
  }
}
 800d904:	bd10      	pop	{r4, pc}
 800d906:	4604      	mov	r4, r0
    HAL_SAI_DMAResume(&haudio_out_sai);
 800d908:	4803      	ldr	r0, [pc, #12]	; (800d918 <BSP_AUDIO_OUT_Resume+0x24>)
 800d90a:	f005 fc0f 	bl	801312c <HAL_SAI_DMAResume>
    return AUDIO_OK;
 800d90e:	4620      	mov	r0, r4
}
 800d910:	bd10      	pop	{r4, pc}
 800d912:	bf00      	nop
 800d914:	2001315c 	.word	0x2001315c
 800d918:	20005f98 	.word	0x20005f98

0800d91c <BSP_AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Stop(uint32_t Option)
{
 800d91c:	b538      	push	{r3, r4, r5, lr}
 800d91e:	4605      	mov	r5, r0
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_out_sai);
 800d920:	480a      	ldr	r0, [pc, #40]	; (800d94c <BSP_AUDIO_OUT_Stop+0x30>)
 800d922:	f005 fc1d 	bl	8013160 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800d926:	4b0a      	ldr	r3, [pc, #40]	; (800d950 <BSP_AUDIO_OUT_Stop+0x34>)
 800d928:	4629      	mov	r1, r5
 800d92a:	2034      	movs	r0, #52	; 0x34
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	699b      	ldr	r3, [r3, #24]
 800d930:	4798      	blx	r3
 800d932:	b918      	cbnz	r0, 800d93c <BSP_AUDIO_OUT_Stop+0x20>
  {
    return AUDIO_ERROR;
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 800d934:	2d01      	cmp	r5, #1
 800d936:	4604      	mov	r4, r0
 800d938:	d002      	beq.n	800d940 <BSP_AUDIO_OUT_Stop+0x24>
      HAL_Delay(1);
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
  }
}
 800d93a:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 800d93c:	2001      	movs	r0, #1
}
 800d93e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_Delay(1);
 800d940:	4628      	mov	r0, r5
 800d942:	f001 fbdb 	bl	800f0fc <HAL_Delay>
    return AUDIO_OK;
 800d946:	4620      	mov	r0, r4
}
 800d948:	bd38      	pop	{r3, r4, r5, pc}
 800d94a:	bf00      	nop
 800d94c:	20005f98 	.word	0x20005f98
 800d950:	2001315c 	.word	0x2001315c

0800d954 <BSP_AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume)
{
 800d954:	b508      	push	{r3, lr}
  /* Call the codec volume control function with converted volume value */
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 800d956:	4b05      	ldr	r3, [pc, #20]	; (800d96c <BSP_AUDIO_OUT_SetVolume+0x18>)
 800d958:	4601      	mov	r1, r0
 800d95a:	2034      	movs	r0, #52	; 0x34
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	6a1b      	ldr	r3, [r3, #32]
 800d960:	4798      	blx	r3
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
  }
}
 800d962:	3000      	adds	r0, #0
 800d964:	bf18      	it	ne
 800d966:	2001      	movne	r0, #1
 800d968:	bd08      	pop	{r3, pc}
 800d96a:	bf00      	nop
 800d96c:	2001315c 	.word	0x2001315c

0800d970 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 800d970:	b510      	push	{r4, lr}
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800d972:	4c08      	ldr	r4, [pc, #32]	; (800d994 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x24>)
 800d974:	6822      	ldr	r2, [r4, #0]
 800d976:	6813      	ldr	r3, [r2, #0]
 800d978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d97c:	6013      	str	r3, [r2, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 800d97e:	6620      	str	r0, [r4, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 800d980:	4620      	mov	r0, r4
 800d982:	f005 fa69 	bl	8012e58 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800d986:	6822      	ldr	r2, [r4, #0]
 800d988:	6813      	ldr	r3, [r2, #0]
 800d98a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d98e:	6013      	str	r3, [r2, #0]
}
 800d990:	bd10      	pop	{r4, pc}
 800d992:	bf00      	nop
 800d994:	20005f98 	.word	0x20005f98

0800d998 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800d998:	b508      	push	{r3, lr}
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 800d99a:	f7fb fdc3 	bl	8009524 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800d99e:	bd08      	pop	{r3, pc}

0800d9a0 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800d9a0:	b508      	push	{r3, lr}
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 800d9a2:	f7fb fdd3 	bl	800954c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 800d9a6:	bd08      	pop	{r3, pc}

0800d9a8 <BSP_AUDIO_OUT_Error_CallBack>:
 800d9a8:	4770      	bx	lr
 800d9aa:	bf00      	nop

0800d9ac <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 800d9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800d9b0:	4c4b      	ldr	r4, [pc, #300]	; (800dae0 <BSP_AUDIO_OUT_MspInit+0x134>)
{ 
 800d9b2:	b08a      	sub	sp, #40	; 0x28
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
  AUDIO_OUT_SAIx_FS_ENABLE();
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800d9b4:	2280      	movs	r2, #128	; 0x80
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800d9b6:	f04f 0802 	mov.w	r8, #2
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800d9ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
  gpio_init_structure.Pull = GPIO_NOPULL;
 800d9bc:	2500      	movs	r5, #0
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800d9be:	2603      	movs	r6, #3
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800d9c0:	270a      	movs	r7, #10
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800d9c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
{ 
 800d9c6:	4682      	mov	sl, r0
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800d9c8:	a905      	add	r1, sp, #20
 800d9ca:	4846      	ldr	r0, [pc, #280]	; (800dae4 <BSP_AUDIO_OUT_MspInit+0x138>)
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800d9cc:	6463      	str	r3, [r4, #68]	; 0x44
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 800d9ce:	f04f 0940 	mov.w	r9, #64	; 0x40
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800d9d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d9d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	9b00      	ldr	r3, [sp, #0]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800d9dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d9de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9e2:	6323      	str	r3, [r4, #48]	; 0x30
 800d9e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d9e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9ea:	9301      	str	r3, [sp, #4]
 800d9ec:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 800d9ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d9f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9f4:	6323      	str	r3, [r4, #48]	; 0x30
 800d9f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d9f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9fc:	9302      	str	r3, [sp, #8]
 800d9fe:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
 800da00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800da02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da06:	6323      	str	r3, [r4, #48]	; 0x30
 800da08:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800da0a:	9205      	str	r2, [sp, #20]
  AUDIO_OUT_SAIx_FS_ENABLE();
 800da0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da10:	9303      	str	r3, [sp, #12]
 800da12:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800da14:	e9cd 8506 	strd	r8, r5, [sp, #24]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800da18:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800da1c:	f002 fa6c 	bl	800fef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 800da20:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800da22:	a905      	add	r1, sp, #20
 800da24:	482f      	ldr	r0, [pc, #188]	; (800dae4 <BSP_AUDIO_OUT_MspInit+0x138>)
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 800da26:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800da28:	e9cd 8506 	strd	r8, r5, [sp, #24]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 800da2c:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800da30:	f002 fa62 	bl	800fef8 <HAL_GPIO_Init>
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800da34:	a905      	add	r1, sp, #20
 800da36:	482b      	ldr	r0, [pc, #172]	; (800dae4 <BSP_AUDIO_OUT_MspInit+0x138>)
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 800da38:	f8cd 9014 	str.w	r9, [sp, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800da3c:	e9cd 8506 	strd	r8, r5, [sp, #24]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800da40:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800da44:	f002 fa58 	bl	800fef8 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800da48:	2310      	movs	r3, #16
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800da4a:	a905      	add	r1, sp, #20
 800da4c:	4825      	ldr	r0, [pc, #148]	; (800dae4 <BSP_AUDIO_OUT_MspInit+0x138>)
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800da4e:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800da50:	e9cd 8506 	strd	r8, r5, [sp, #24]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800da54:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800da58:	f002 fa4e 	bl	800fef8 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800da5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800da5e:	f8da 1000 	ldr.w	r1, [sl]
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800da62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800da66:	4a20      	ldr	r2, [pc, #128]	; (800dae8 <BSP_AUDIO_OUT_MspInit+0x13c>)
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800da68:	6323      	str	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800da6a:	4291      	cmp	r1, r2
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800da6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800da6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da72:	9304      	str	r3, [sp, #16]
 800da74:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800da76:	d00a      	beq.n	800da8e <BSP_AUDIO_OUT_MspInit+0xe2>
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800da78:	2200      	movs	r2, #0
 800da7a:	210e      	movs	r1, #14
 800da7c:	203c      	movs	r0, #60	; 0x3c
 800da7e:	f001 fccd 	bl	800f41c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 800da82:	203c      	movs	r0, #60	; 0x3c
 800da84:	f001 fd00 	bl	800f488 <HAL_NVIC_EnableIRQ>
}
 800da88:	b00a      	add	sp, #40	; 0x28
 800da8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800da8e:	4c17      	ldr	r4, [pc, #92]	; (800daec <BSP_AUDIO_OUT_MspInit+0x140>)
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 800da90:	f44f 6700 	mov.w	r7, #2048	; 0x800
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 800da94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800da98:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800da9c:	f04f 6cc0 	mov.w	ip, #100663296	; 0x6000000
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800daa0:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800daa2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800daa6:	2204      	movs	r2, #4
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800daa8:	f44f 7680 	mov.w	r6, #256	; 0x100
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800daac:	6120      	str	r0, [r4, #16]
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800daae:	f8ca 406c 	str.w	r4, [sl, #108]	; 0x6c
    HAL_DMA_DeInit(&hdma_sai_tx);
 800dab2:	4620      	mov	r0, r4
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800dab4:	f8c4 9008 	str.w	r9, [r4, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800dab8:	60e5      	str	r5, [r4, #12]
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800daba:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800dabe:	f8c4 c004 	str.w	ip, [r4, #4]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800dac2:	6262      	str	r2, [r4, #36]	; 0x24
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 800dac4:	e9c4 7305 	strd	r7, r3, [r4, #20]
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 800dac8:	4b09      	ldr	r3, [pc, #36]	; (800daf0 <BSP_AUDIO_OUT_MspInit+0x144>)
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800daca:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800dace:	e9c4 6107 	strd	r6, r1, [r4, #28]
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 800dad2:	6023      	str	r3, [r4, #0]
    HAL_DMA_DeInit(&hdma_sai_tx);
 800dad4:	f001 fe6a 	bl	800f7ac <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);      
 800dad8:	4620      	mov	r0, r4
 800dada:	f001 fdcb 	bl	800f674 <HAL_DMA_Init>
 800dade:	e7cb      	b.n	800da78 <BSP_AUDIO_OUT_MspInit+0xcc>
 800dae0:	40023800 	.word	0x40023800
 800dae4:	40022000 	.word	0x40022000
 800dae8:	40015c04 	.word	0x40015c04
 800daec:	2000601c 	.word	0x2000601c
 800daf0:	40026470 	.word	0x40026470

0800daf4 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 800daf4:	b530      	push	{r4, r5, lr}
 800daf6:	b0a3      	sub	sp, #140	; 0x8c
 800daf8:	460c      	mov	r4, r1
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800dafa:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800dafe:	a801      	add	r0, sp, #4
 800db00:	f004 fdde 	bl	80126c0 <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800db04:	f642 3211 	movw	r2, #11025	; 0x2b11
 800db08:	f245 6322 	movw	r3, #22050	; 0x5622
 800db0c:	429c      	cmp	r4, r3
 800db0e:	bf18      	it	ne
 800db10:	4294      	cmpne	r4, r2
 800db12:	d00a      	beq.n	800db2a <BSP_AUDIO_OUT_ClockConfig+0x36>
 800db14:	f64a 4344 	movw	r3, #44100	; 0xac44
 800db18:	429c      	cmp	r4, r3
 800db1a:	d006      	beq.n	800db2a <BSP_AUDIO_OUT_ClockConfig+0x36>
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800db1c:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800db20:	f44f 71ac 	mov.w	r1, #344	; 0x158
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 800db24:	2207      	movs	r2, #7
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 800db26:	2301      	movs	r3, #1
 800db28:	e005      	b.n	800db36 <BSP_AUDIO_OUT_ClockConfig+0x42>
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800db2a:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 800db2e:	f240 11ad 	movw	r1, #429	; 0x1ad
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800db32:	2202      	movs	r2, #2
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800db34:	2313      	movs	r3, #19
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800db36:	a801      	add	r0, sp, #4
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800db38:	9501      	str	r5, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800db3a:	9411      	str	r4, [sp, #68]	; 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800db3c:	9102      	str	r1, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 800db3e:	9204      	str	r2, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 800db40:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800db42:	f004 fb1d 	bl	8012180 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 800db46:	b023      	add	sp, #140	; 0x8c
 800db48:	bd30      	pop	{r4, r5, pc}
 800db4a:	bf00      	nop

0800db4c <BSP_AUDIO_OUT_Init>:
{ 
 800db4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800db50:	4d34      	ldr	r5, [pc, #208]	; (800dc24 <BSP_AUDIO_OUT_Init+0xd8>)
{ 
 800db52:	4616      	mov	r6, r2
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800db54:	4c34      	ldr	r4, [pc, #208]	; (800dc28 <BSP_AUDIO_OUT_Init+0xdc>)
{ 
 800db56:	4607      	mov	r7, r0

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800db58:	682b      	ldr	r3, [r5, #0]
{ 
 800db5a:	4688      	mov	r8, r1
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800db5c:	6025      	str	r5, [r4, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 800db5e:	4620      	mov	r0, r4
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800db60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db64:	602b      	str	r3, [r5, #0]
  HAL_SAI_DeInit(&haudio_out_sai);
 800db66:	f005 fa93 	bl	8013090 <HAL_SAI_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 800db6a:	4620      	mov	r0, r4
 800db6c:	4631      	mov	r1, r6
 800db6e:	2200      	movs	r2, #0
 800db70:	f7ff ffc0 	bl	800daf4 <BSP_AUDIO_OUT_ClockConfig>
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 800db74:	4620      	mov	r0, r4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800db76:	6025      	str	r5, [r4, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 800db78:	f005 fc34 	bl	80133e4 <HAL_SAI_GetState>
 800db7c:	2800      	cmp	r0, #0
 800db7e:	d048      	beq.n	800dc12 <BSP_AUDIO_OUT_Init+0xc6>
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800db80:	4b28      	ldr	r3, [pc, #160]	; (800dc24 <BSP_AUDIO_OUT_Init+0xd8>)
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 800db82:	2500      	movs	r5, #0
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800db84:	61e6      	str	r6, [r4, #28]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800db86:	2180      	movs	r1, #128	; 0x80
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800db88:	681a      	ldr	r2, [r3, #0]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800db8a:	f04f 0c20 	mov.w	ip, #32
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800db8e:	6023      	str	r3, [r4, #0]
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800db90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800db94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 800db98:	6065      	str	r5, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800db9a:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800db9c:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800dba0:	6325      	str	r5, [r4, #48]	; 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800dba2:	f04f 0901 	mov.w	r9, #1
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800dba6:	601a      	str	r2, [r3, #0]
  haudio_out_sai.FrameInit.FrameLength = 64;
 800dba8:	2340      	movs	r3, #64	; 0x40
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800dbaa:	6361      	str	r1, [r4, #52]	; 0x34
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 800dbac:	2204      	movs	r2, #4
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800dbae:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  haudio_out_sai.FrameInit.FrameLength = 64;
 800dbb2:	6423      	str	r3, [r4, #64]	; 0x40
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 800dbb4:	230f      	movs	r3, #15
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800dbb6:	f8c4 e010 	str.w	lr, [r4, #16]
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800dbba:	6521      	str	r1, [r4, #80]	; 0x50
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800dbbc:	63a5      	str	r5, [r4, #56]	; 0x38
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 800dbbe:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800dbc0:	64e5      	str	r5, [r4, #76]	; 0x4c
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800dbc2:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800dbc6:	f8c4 9018 	str.w	r9, [r4, #24]
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800dbca:	e9c4 c011 	strd	ip, r0, [r4, #68]	; 0x44
  HAL_SAI_Init(&haudio_out_sai);
 800dbce:	4816      	ldr	r0, [pc, #88]	; (800dc28 <BSP_AUDIO_OUT_Init+0xdc>)
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 800dbd0:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800dbd4:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
  HAL_SAI_Init(&haudio_out_sai);
 800dbd8:	f005 f93e 	bl	8012e58 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800dbdc:	6822      	ldr	r2, [r4, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800dbde:	4c13      	ldr	r4, [pc, #76]	; (800dc2c <BSP_AUDIO_OUT_Init+0xe0>)
 800dbe0:	2034      	movs	r0, #52	; 0x34
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800dbe2:	6813      	ldr	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800dbe4:	68a1      	ldr	r1, [r4, #8]
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800dbe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dbea:	6013      	str	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800dbec:	4788      	blx	r1
  if((deviceid) == WM8994_ID)
 800dbee:	f648 1394 	movw	r3, #35220	; 0x8994
 800dbf2:	4298      	cmp	r0, r3
 800dbf4:	d112      	bne.n	800dc1c <BSP_AUDIO_OUT_Init+0xd0>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800dbf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dbf8:	2034      	movs	r0, #52	; 0x34
 800dbfa:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 800dbfc:	480c      	ldr	r0, [pc, #48]	; (800dc30 <BSP_AUDIO_OUT_Init+0xe4>)
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800dbfe:	4633      	mov	r3, r6
 800dc00:	4642      	mov	r2, r8
    audio_drv = &wm8994_drv; 
 800dc02:	6004      	str	r4, [r0, #0]
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800dc04:	4639      	mov	r1, r7
 800dc06:	6824      	ldr	r4, [r4, #0]
 800dc08:	2034      	movs	r0, #52	; 0x34
 800dc0a:	47a0      	blx	r4
    ret = AUDIO_OK;
 800dc0c:	4628      	mov	r0, r5
}
 800dc0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800dc12:	4601      	mov	r1, r0
 800dc14:	4620      	mov	r0, r4
 800dc16:	f7ff fec9 	bl	800d9ac <BSP_AUDIO_OUT_MspInit>
 800dc1a:	e7b1      	b.n	800db80 <BSP_AUDIO_OUT_Init+0x34>
    ret = AUDIO_ERROR;
 800dc1c:	4648      	mov	r0, r9
}
 800dc1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc22:	bf00      	nop
 800dc24:	40015c04 	.word	0x40015c04
 800dc28:	20005f98 	.word	0x20005f98
 800dc2c:	2000005c 	.word	0x2000005c
 800dc30:	2001315c 	.word	0x2001315c

0800dc34 <BSP_AUDIO_IN_Error_CallBack>:
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop

0800dc38 <HAL_SAI_ErrorCallback>:
{
 800dc38:	b538      	push	{r3, r4, r5, lr}
  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 800dc3a:	480b      	ldr	r0, [pc, #44]	; (800dc68 <HAL_SAI_ErrorCallback+0x30>)
 800dc3c:	f005 fbd2 	bl	80133e4 <HAL_SAI_GetState>
 800dc40:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 800dc42:	480a      	ldr	r0, [pc, #40]	; (800dc6c <HAL_SAI_ErrorCallback+0x34>)
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 800dc44:	f005 05ef 	and.w	r5, r5, #239	; 0xef
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 800dc48:	f005 fbcc 	bl	80133e4 <HAL_SAI_GetState>
 800dc4c:	4604      	mov	r4, r0
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 800dc4e:	2d02      	cmp	r5, #2
 800dc50:	d007      	beq.n	800dc62 <HAL_SAI_ErrorCallback+0x2a>
  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 800dc52:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dc56:	2c02      	cmp	r4, #2
 800dc58:	d000      	beq.n	800dc5c <HAL_SAI_ErrorCallback+0x24>
}
 800dc5a:	bd38      	pop	{r3, r4, r5, pc}
    BSP_AUDIO_IN_Error_CallBack();
 800dc5c:	f7ff ffea 	bl	800dc34 <BSP_AUDIO_IN_Error_CallBack>
}
 800dc60:	bd38      	pop	{r3, r4, r5, pc}
    BSP_AUDIO_OUT_Error_CallBack();
 800dc62:	f7ff fea1 	bl	800d9a8 <BSP_AUDIO_OUT_Error_CallBack>
 800dc66:	e7f4      	b.n	800dc52 <HAL_SAI_ErrorCallback+0x1a>
 800dc68:	20005f98 	.word	0x20005f98
 800dc6c:	20005f14 	.word	0x20005f14

0800dc70 <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 800dc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc74:	b093      	sub	sp, #76	; 0x4c
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
  curpixel = 0;
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800dc76:	1a0d      	subs	r5, r1, r0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
  x = x1;                       /* Start x off at the first pixel */
  y = y1;                       /* Start y off at the first pixel */
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800dc78:	f64f 76ff 	movw	r6, #65535	; 0xffff
{ 
 800dc7c:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800dc80:	2d00      	cmp	r5, #0
{ 
 800dc82:	920c      	str	r2, [sp, #48]	; 0x30
  x = x1;                       /* Start x off at the first pixel */
 800dc84:	b202      	sxth	r2, r0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800dc86:	eba7 0403 	sub.w	r4, r7, r3
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800dc8a:	bfb8      	it	lt
 800dc8c:	426d      	neglt	r5, r5
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800dc8e:	2c00      	cmp	r4, #0
 800dc90:	bfb8      	it	lt
 800dc92:	4264      	neglt	r4, r4
  if (x2 >= x1)                 /* The x-values are increasing */
 800dc94:	4281      	cmp	r1, r0
 800dc96:	bf34      	ite	cc
 800dc98:	4631      	movcc	r1, r6
 800dc9a:	2101      	movcs	r1, #1
  {
    xinc1 = -1;
    xinc2 = -1;
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 800dc9c:	4630      	mov	r0, r6
  if (x2 >= x1)                 /* The x-values are increasing */
 800dc9e:	9110      	str	r1, [sp, #64]	; 0x40
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800dca0:	b229      	sxth	r1, r5
  if (y2 >= y1)                 /* The y-values are increasing */
 800dca2:	429f      	cmp	r7, r3
 800dca4:	bf28      	it	cs
 800dca6:	2001      	movcs	r0, #1
  y = y1;                       /* Start y off at the first pixel */
 800dca8:	b21b      	sxth	r3, r3
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800dcaa:	9107      	str	r1, [sp, #28]
  if (y2 >= y1)                 /* The y-values are increasing */
 800dcac:	9011      	str	r0, [sp, #68]	; 0x44
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800dcae:	b220      	sxth	r0, r4
{ 
 800dcb0:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
  {
    yinc1 = -1;
    yinc2 = -1;
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800dcb4:	4281      	cmp	r1, r0
{ 
 800dcb6:	940d      	str	r4, [sp, #52]	; 0x34
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800dcb8:	f2c0 80ce 	blt.w	800de58 <FillTriangle+0x1e8>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
    yinc2 = 0;                  /* Don't change the y for every iteration */
    den = deltax;
    num = deltax / 2;
 800dcbc:	2900      	cmp	r1, #0
 800dcbe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800dcc0:	bfb8      	it	lt
 800dcc2:	3101      	addlt	r1, #1
 800dcc4:	940a      	str	r4, [sp, #40]	; 0x28
 800dcc6:	2400      	movs	r4, #0
 800dcc8:	1049      	asrs	r1, r1, #1
 800dcca:	9410      	str	r4, [sp, #64]	; 0x40
 800dccc:	9105      	str	r1, [sp, #20]
 800dcce:	940b      	str	r4, [sp, #44]	; 0x2c
    num = deltay / 2;
    num_add = deltax;
    num_pixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800dcd0:	9907      	ldr	r1, [sp, #28]
 800dcd2:	2900      	cmp	r1, #0
 800dcd4:	f2c0 8094 	blt.w	800de00 <FillTriangle+0x190>
 800dcd8:	b280      	uxth	r0, r0
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800dcda:	4968      	ldr	r1, [pc, #416]	; (800de7c <FillTriangle+0x20c>)
 800dcdc:	2534      	movs	r5, #52	; 0x34
 800dcde:	4c68      	ldr	r4, [pc, #416]	; (800de80 <FillTriangle+0x210>)
 800dce0:	6809      	ldr	r1, [r1, #0]
 800dce2:	900e      	str	r0, [sp, #56]	; 0x38
 800dce4:	2000      	movs	r0, #0
 800dce6:	fb05 4901 	mla	r9, r5, r1, r4
 800dcea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dcee:	9006      	str	r0, [sp, #24]
 800dcf0:	461d      	mov	r5, r3
 800dcf2:	4864      	ldr	r0, [pc, #400]	; (800de84 <FillTriangle+0x214>)
 800dcf4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dcf8:	910f      	str	r1, [sp, #60]	; 0x3c
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 800dcfa:	b292      	uxth	r2, r2
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800dcfc:	980c      	ldr	r0, [sp, #48]	; 0x30
    BSP_LCD_DrawLine(x, y, x3, y3);
 800dcfe:	b2ab      	uxth	r3, r5
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800dd00:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800dd02:	1a84      	subs	r4, r0, r2
  if (x2 >= x1)                 /* The x-values are increasing */
 800dd04:	f64f 71ff 	movw	r1, #65535	; 0xffff
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800dd08:	1aef      	subs	r7, r5, r3
    BSP_LCD_DrawLine(x, y, x3, y3);
 800dd0a:	9208      	str	r2, [sp, #32]
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800dd0c:	2c00      	cmp	r4, #0
    BSP_LCD_DrawLine(x, y, x3, y3);
 800dd0e:	9309      	str	r3, [sp, #36]	; 0x24
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800dd10:	bfb8      	it	lt
 800dd12:	4264      	neglt	r4, r4
  if (x2 >= x1)                 /* The x-values are increasing */
 800dd14:	4282      	cmp	r2, r0
 800dd16:	bf8c      	ite	hi
 800dd18:	4688      	movhi	r8, r1
 800dd1a:	f04f 0801 	movls.w	r8, #1
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800dd1e:	2f00      	cmp	r7, #0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800dd20:	b224      	sxth	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800dd22:	bfb8      	it	lt
 800dd24:	427f      	neglt	r7, r7
  if (y2 >= y1)                 /* The y-values are increasing */
 800dd26:	42ab      	cmp	r3, r5
 800dd28:	bf98      	it	ls
 800dd2a:	2101      	movls	r1, #1
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800dd2c:	b23f      	sxth	r7, r7
  if (y2 >= y1)                 /* The y-values are increasing */
 800dd2e:	9101      	str	r1, [sp, #4]
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800dd30:	42bc      	cmp	r4, r7
 800dd32:	db6c      	blt.n	800de0e <FillTriangle+0x19e>
    num = deltax / 2;
 800dd34:	2c00      	cmp	r4, #0
 800dd36:	4620      	mov	r0, r4
 800dd38:	46c4      	mov	ip, r8
 800dd3a:	f04f 0800 	mov.w	r8, #0
 800dd3e:	bfb8      	it	lt
 800dd40:	1c60      	addlt	r0, r4, #1
 800dd42:	46c6      	mov	lr, r8
 800dd44:	1040      	asrs	r0, r0, #1
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800dd46:	2c00      	cmp	r4, #0
 800dd48:	db38      	blt.n	800ddbc <FillTriangle+0x14c>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800dd4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dd4c:	b2bf      	uxth	r7, r7
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800dd4e:	2500      	movs	r5, #0
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800dd50:	6809      	ldr	r1, [r1, #0]
 800dd52:	9702      	str	r7, [sp, #8]
 800dd54:	9103      	str	r1, [sp, #12]
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800dd56:	b289      	uxth	r1, r1
 800dd58:	9104      	str	r1, [sp, #16]
 800dd5a:	e005      	b.n	800dd68 <FillTriangle+0xf8>
      num -= den;                             /* Calculate the new numerator value */
 800dd5c:	b208      	sxth	r0, r1
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800dd5e:	b229      	sxth	r1, r5
 800dd60:	428c      	cmp	r4, r1
 800dd62:	db2b      	blt.n	800ddbc <FillTriangle+0x14c>
 800dd64:	b292      	uxth	r2, r2
 800dd66:	b29b      	uxth	r3, r3
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800dd68:	f8d9 7048 	ldr.w	r7, [r9, #72]	; 0x48
 800dd6c:	f8d9 1060 	ldr.w	r1, [r9, #96]	; 0x60
 800dd70:	2f02      	cmp	r7, #2
 800dd72:	f8d9 605c 	ldr.w	r6, [r9, #92]	; 0x5c
 800dd76:	fb01 2103 	mla	r1, r1, r3, r2
 800dd7a:	d044      	beq.n	800de06 <FillTriangle+0x196>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800dd7c:	9f03      	ldr	r7, [sp, #12]
 800dd7e:	f846 7021 	str.w	r7, [r6, r1, lsl #2]
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800dd82:	9902      	ldr	r1, [sp, #8]
    y += yinc2;                               /* Change the y as appropriate */
 800dd84:	eb03 0a0e 	add.w	sl, r3, lr
      y += yinc1;                             /* Change the y as appropriate */
 800dd88:	9e01      	ldr	r6, [sp, #4]
 800dd8a:	3501      	adds	r5, #1
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800dd8c:	4401      	add	r1, r0
      x += xinc1;                             /* Change the x as appropriate */
 800dd8e:	eb02 0008 	add.w	r0, r2, r8
      y += yinc1;                             /* Change the y as appropriate */
 800dd92:	eb03 0b06 	add.w	fp, r3, r6
    x += xinc2;                               /* Change the x as appropriate */
 800dd96:	eb02 060c 	add.w	r6, r2, ip
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800dd9a:	b289      	uxth	r1, r1
    x += xinc2;                               /* Change the x as appropriate */
 800dd9c:	eb0c 0200 	add.w	r2, ip, r0
    y += yinc2;                               /* Change the y as appropriate */
 800dda0:	eb0e 030b 	add.w	r3, lr, fp
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800dda4:	b208      	sxth	r0, r1
      num -= den;                             /* Calculate the new numerator value */
 800dda6:	1b09      	subs	r1, r1, r4
    x += xinc2;                               /* Change the x as appropriate */
 800dda8:	b212      	sxth	r2, r2
    if (num >= den)                           /* Check if numerator >= denominator */
 800ddaa:	42a0      	cmp	r0, r4
    y += yinc2;                               /* Change the y as appropriate */
 800ddac:	b21b      	sxth	r3, r3
    if (num >= den)                           /* Check if numerator >= denominator */
 800ddae:	dad5      	bge.n	800dd5c <FillTriangle+0xec>
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800ddb0:	b229      	sxth	r1, r5
    x += xinc2;                               /* Change the x as appropriate */
 800ddb2:	b232      	sxth	r2, r6
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800ddb4:	428c      	cmp	r4, r1
    y += yinc2;                               /* Change the y as appropriate */
 800ddb6:	fa0f f38a 	sxth.w	r3, sl
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800ddba:	dad3      	bge.n	800dd64 <FillTriangle+0xf4>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800ddbc:	9b05      	ldr	r3, [sp, #20]
 800ddbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    if (num >= den)             /* Check if numerator >= denominator */
 800ddc0:	9807      	ldr	r0, [sp, #28]
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800ddc2:	4413      	add	r3, r2
 800ddc4:	b299      	uxth	r1, r3
 800ddc6:	b20b      	sxth	r3, r1
    if (num >= den)             /* Check if numerator >= denominator */
 800ddc8:	4298      	cmp	r0, r3
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800ddca:	9305      	str	r3, [sp, #20]
    if (num >= den)             /* Check if numerator >= denominator */
 800ddcc:	dc2f      	bgt.n	800de2e <FillTriangle+0x1be>
    {
      num -= den;               /* Calculate the new numerator value */
      x += xinc1;               /* Change the x as appropriate */
 800ddce:	9c10      	ldr	r4, [sp, #64]	; 0x40
      num -= den;               /* Calculate the new numerator value */
 800ddd0:	1a09      	subs	r1, r1, r0
      x += xinc1;               /* Change the x as appropriate */
 800ddd2:	9b08      	ldr	r3, [sp, #32]
 800ddd4:	9d06      	ldr	r5, [sp, #24]
 800ddd6:	4423      	add	r3, r4
      y += yinc1;               /* Change the y as appropriate */
 800ddd8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ddda:	3501      	adds	r5, #1
      x += xinc1;               /* Change the x as appropriate */
 800dddc:	461a      	mov	r2, r3
      y += yinc1;               /* Change the y as appropriate */
 800ddde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dde0:	9506      	str	r5, [sp, #24]
 800dde2:	4423      	add	r3, r4
      num -= den;               /* Calculate the new numerator value */
 800dde4:	4604      	mov	r4, r0
    }
    x += xinc2;                 /* Change the x as appropriate */
 800dde6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dde8:	4402      	add	r2, r0
    y += yinc2;                 /* Change the y as appropriate */
 800ddea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ddec:	4403      	add	r3, r0
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800ddee:	b228      	sxth	r0, r5
    x += xinc2;                 /* Change the x as appropriate */
 800ddf0:	b212      	sxth	r2, r2
    y += yinc2;                 /* Change the y as appropriate */
 800ddf2:	b21b      	sxth	r3, r3
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800ddf4:	42a0      	cmp	r0, r4
    y += yinc2;                 /* Change the y as appropriate */
 800ddf6:	461d      	mov	r5, r3
      num -= den;               /* Calculate the new numerator value */
 800ddf8:	b20b      	sxth	r3, r1
 800ddfa:	9305      	str	r3, [sp, #20]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800ddfc:	f77f af7d 	ble.w	800dcfa <FillTriangle+0x8a>
  } 
}
 800de00:	b013      	add	sp, #76	; 0x4c
 800de02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800de06:	9f04      	ldr	r7, [sp, #16]
 800de08:	f826 7011 	strh.w	r7, [r6, r1, lsl #1]
 800de0c:	e7b9      	b.n	800dd82 <FillTriangle+0x112>
    num = deltay / 2;
 800de0e:	2f00      	cmp	r7, #0
 800de10:	4638      	mov	r0, r7
 800de12:	4621      	mov	r1, r4
 800de14:	f04f 0500 	mov.w	r5, #0
 800de18:	bfb8      	it	lt
 800de1a:	1c78      	addlt	r0, r7, #1
 800de1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800de20:	463c      	mov	r4, r7
 800de22:	9501      	str	r5, [sp, #4]
 800de24:	f340 004f 	sbfx	r0, r0, #1, #16
 800de28:	460f      	mov	r7, r1
 800de2a:	46ac      	mov	ip, r5
 800de2c:	e78b      	b.n	800dd46 <FillTriangle+0xd6>
    x += xinc2;                 /* Change the x as appropriate */
 800de2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de30:	9b08      	ldr	r3, [sp, #32]
 800de32:	9906      	ldr	r1, [sp, #24]
 800de34:	4403      	add	r3, r0
    y += yinc2;                 /* Change the y as appropriate */
 800de36:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800de38:	3101      	adds	r1, #1
    x += xinc2;                 /* Change the x as appropriate */
 800de3a:	461a      	mov	r2, r3
    y += yinc2;                 /* Change the y as appropriate */
 800de3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de3e:	9106      	str	r1, [sp, #24]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800de40:	b209      	sxth	r1, r1
    y += yinc2;                 /* Change the y as appropriate */
 800de42:	4403      	add	r3, r0
    x += xinc2;                 /* Change the x as appropriate */
 800de44:	b212      	sxth	r2, r2
    y += yinc2;                 /* Change the y as appropriate */
 800de46:	b21b      	sxth	r3, r3
 800de48:	461d      	mov	r5, r3
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800de4a:	9b07      	ldr	r3, [sp, #28]
 800de4c:	428b      	cmp	r3, r1
 800de4e:	f6bf af54 	bge.w	800dcfa <FillTriangle+0x8a>
}
 800de52:	b013      	add	sp, #76	; 0x4c
 800de54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 800de58:	2800      	cmp	r0, #0
 800de5a:	4601      	mov	r1, r0
 800de5c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800de5e:	f04f 0500 	mov.w	r5, #0
 800de62:	bfb8      	it	lt
 800de64:	1c41      	addlt	r1, r0, #1
 800de66:	940b      	str	r4, [sp, #44]	; 0x2c
 800de68:	f341 014f 	sbfx	r1, r1, #1, #16
 800de6c:	9c07      	ldr	r4, [sp, #28]
 800de6e:	9511      	str	r5, [sp, #68]	; 0x44
 800de70:	9007      	str	r0, [sp, #28]
 800de72:	4620      	mov	r0, r4
 800de74:	9105      	str	r1, [sp, #20]
 800de76:	950a      	str	r5, [sp, #40]	; 0x28
 800de78:	e72a      	b.n	800dcd0 <FillTriangle+0x60>
 800de7a:	bf00      	nop
 800de7c:	2000607c 	.word	0x2000607c
 800de80:	20013160 	.word	0x20013160
 800de84:	20006080 	.word	0x20006080

0800de88 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800de88:	4b03      	ldr	r3, [pc, #12]	; (800de98 <BSP_LCD_GetXSize+0x10>)
 800de8a:	2134      	movs	r1, #52	; 0x34
 800de8c:	4a03      	ldr	r2, [pc, #12]	; (800de9c <BSP_LCD_GetXSize+0x14>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	fb01 2303 	mla	r3, r1, r3, r2
}
 800de94:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800de96:	4770      	bx	lr
 800de98:	2000607c 	.word	0x2000607c
 800de9c:	20013160 	.word	0x20013160

0800dea0 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800dea0:	4b03      	ldr	r3, [pc, #12]	; (800deb0 <BSP_LCD_GetYSize+0x10>)
 800dea2:	2134      	movs	r1, #52	; 0x34
 800dea4:	4a03      	ldr	r2, [pc, #12]	; (800deb4 <BSP_LCD_GetYSize+0x14>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	fb01 2303 	mla	r3, r1, r3, r2
}
 800deac:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800deae:	4770      	bx	lr
 800deb0:	2000607c 	.word	0x2000607c
 800deb4:	20013160 	.word	0x20013160

0800deb8 <BSP_LCD_LayerDefaultInit>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800deb8:	4b19      	ldr	r3, [pc, #100]	; (800df20 <BSP_LCD_LayerDefaultInit+0x68>)
{     
 800deba:	b5f0      	push	{r4, r5, r6, r7, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	2634      	movs	r6, #52	; 0x34
 800dec0:	4d18      	ldr	r5, [pc, #96]	; (800df24 <BSP_LCD_LayerDefaultInit+0x6c>)
{     
 800dec2:	b08f      	sub	sp, #60	; 0x3c
 800dec4:	4604      	mov	r4, r0
  layer_cfg.WindowX0 = 0;
 800dec6:	2300      	movs	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800dec8:	fb06 5202 	mla	r2, r6, r2, r5
  layer_cfg.Alpha = 255;
 800decc:	27ff      	movs	r7, #255	; 0xff
  layer_cfg.FBStartAdress = FB_Address;
 800dece:	910a      	str	r1, [sp, #40]	; 0x28
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800ded0:	4628      	mov	r0, r5
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800ded2:	f44f 66c0 	mov.w	r6, #1536	; 0x600
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800ded6:	2507      	movs	r5, #7
  layer_cfg.WindowX0 = 0;
 800ded8:	9301      	str	r3, [sp, #4]
  layer_cfg.WindowY0 = 0;
 800deda:	9303      	str	r3, [sp, #12]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800dedc:	9305      	str	r3, [sp, #20]
  layer_cfg.Alpha0 = 0;
 800dede:	9307      	str	r3, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 800dee0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 800dee4:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.Alpha = 255;
 800dee8:	9706      	str	r7, [sp, #24]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800deea:	e9d2 1218 	ldrd	r1, r2, [r2, #96]	; 0x60
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800deee:	e9cd 6508 	strd	r6, r5, [sp, #32]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800def2:	9204      	str	r2, [sp, #16]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800def4:	f04f 457f 	mov.w	r5, #4278190080	; 0xff000000
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800def8:	920c      	str	r2, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800defa:	4622      	mov	r2, r4
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800defc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800df00:	9102      	str	r1, [sp, #8]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800df02:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800df04:	a901      	add	r1, sp, #4
 800df06:	f003 fbad 	bl	8011664 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800df0a:	4a07      	ldr	r2, [pc, #28]	; (800df28 <BSP_LCD_LayerDefaultInit+0x70>)
 800df0c:	00a4      	lsls	r4, r4, #2
 800df0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  DrawProp[LayerIndex].pFont     = &Font24;
 800df12:	4906      	ldr	r1, [pc, #24]	; (800df2c <BSP_LCD_LayerDefaultInit+0x74>)
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800df14:	1913      	adds	r3, r2, r4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800df16:	5115      	str	r5, [r2, r4]
  DrawProp[LayerIndex].pFont     = &Font24;
 800df18:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
 800df1c:	b00f      	add	sp, #60	; 0x3c
 800df1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df20:	2000607c 	.word	0x2000607c
 800df24:	20013160 	.word	0x20013160
 800df28:	20006080 	.word	0x20006080
 800df2c:	2000008c 	.word	0x2000008c

0800df30 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 800df30:	4b01      	ldr	r3, [pc, #4]	; (800df38 <BSP_LCD_SelectLayer+0x8>)
 800df32:	6018      	str	r0, [r3, #0]
} 
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	2000607c 	.word	0x2000607c

0800df3c <BSP_LCD_SetTransparency>:
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 800df3c:	4602      	mov	r2, r0
 800df3e:	4801      	ldr	r0, [pc, #4]	; (800df44 <BSP_LCD_SetTransparency+0x8>)
 800df40:	f003 bc94 	b.w	801186c <HAL_LTDC_SetAlpha>
 800df44:	20013160 	.word	0x20013160

0800df48 <BSP_LCD_SetColorKeying>:
{  
 800df48:	b538      	push	{r3, r4, r5, lr}
  HAL_LTDC_ConfigColorKeying(&hLtdcHandler, RGBValue, LayerIndex);
 800df4a:	4c06      	ldr	r4, [pc, #24]	; (800df64 <BSP_LCD_SetColorKeying+0x1c>)
{  
 800df4c:	4605      	mov	r5, r0
  HAL_LTDC_ConfigColorKeying(&hLtdcHandler, RGBValue, LayerIndex);
 800df4e:	4602      	mov	r2, r0
 800df50:	4620      	mov	r0, r4
 800df52:	f003 fc4f 	bl	80117f4 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&hLtdcHandler, LayerIndex);
 800df56:	4629      	mov	r1, r5
 800df58:	4620      	mov	r0, r4
}
 800df5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_LTDC_EnableColorKeying(&hLtdcHandler, LayerIndex);
 800df5e:	f003 bc69 	b.w	8011834 <HAL_LTDC_EnableColorKeying>
 800df62:	bf00      	nop
 800df64:	20013160 	.word	0x20013160

0800df68 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 800df68:	4b03      	ldr	r3, [pc, #12]	; (800df78 <BSP_LCD_SetTextColor+0x10>)
 800df6a:	4a04      	ldr	r2, [pc, #16]	; (800df7c <BSP_LCD_SetTextColor+0x14>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800df72:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 800df76:	4770      	bx	lr
 800df78:	2000607c 	.word	0x2000607c
 800df7c:	20006080 	.word	0x20006080

0800df80 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 800df80:	4b04      	ldr	r3, [pc, #16]	; (800df94 <BSP_LCD_SetBackColor+0x14>)
 800df82:	4a05      	ldr	r2, [pc, #20]	; (800df98 <BSP_LCD_SetBackColor+0x18>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800df8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df8e:	6058      	str	r0, [r3, #4]
}
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	2000607c 	.word	0x2000607c
 800df98:	20006080 	.word	0x20006080

0800df9c <BSP_LCD_Clear>:
{ 
 800df9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800dfa0:	4c1b      	ldr	r4, [pc, #108]	; (800e010 <BSP_LCD_Clear+0x74>)
 800dfa2:	2334      	movs	r3, #52	; 0x34
 800dfa4:	4a1b      	ldr	r2, [pc, #108]	; (800e014 <BSP_LCD_Clear+0x78>)
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800dfa6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800dfaa:	6825      	ldr	r5, [r4, #0]
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800dfac:	2700      	movs	r7, #0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800dfae:	4c1a      	ldr	r4, [pc, #104]	; (800e018 <BSP_LCD_Clear+0x7c>)
{ 
 800dfb0:	b083      	sub	sp, #12
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800dfb2:	fb03 2305 	mla	r3, r3, r5, r2
  
  hDma2dHandler.Instance = DMA2D;
 800dfb6:	4a19      	ldr	r2, [pc, #100]	; (800e01c <BSP_LCD_Clear+0x80>)
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800dfb8:	6061      	str	r1, [r4, #4]
{ 
 800dfba:	4606      	mov	r6, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800dfbc:	6c99      	ldr	r1, [r3, #72]	; 0x48
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800dfbe:	4620      	mov	r0, r4
  hDma2dHandler.Instance = DMA2D;
 800dfc0:	6022      	str	r2, [r4, #0]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800dfc2:	2902      	cmp	r1, #2
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800dfc4:	60e7      	str	r7, [r4, #12]
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800dfc6:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800dfc8:	bf0c      	ite	eq
 800dfca:	2202      	moveq	r2, #2
 800dfcc:	2200      	movne	r2, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800dfce:	e9d3 8918 	ldrd	r8, r9, [r3, #96]	; 0x60
 800dfd2:	60a2      	str	r2, [r4, #8]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800dfd4:	f001 fd92 	bl	800fafc <HAL_DMA2D_Init>
 800dfd8:	b110      	cbz	r0, 800dfe0 <BSP_LCD_Clear+0x44>
}
 800dfda:	b003      	add	sp, #12
 800dfdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f001 ff36 	bl	800fe54 <HAL_DMA2D_ConfigLayer>
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	d1f6      	bne.n	800dfda <BSP_LCD_Clear+0x3e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800dfec:	f8cd 9000 	str.w	r9, [sp]
 800dff0:	4643      	mov	r3, r8
 800dff2:	463a      	mov	r2, r7
 800dff4:	4631      	mov	r1, r6
 800dff6:	4620      	mov	r0, r4
 800dff8:	f001 fdae 	bl	800fb58 <HAL_DMA2D_Start>
 800dffc:	2800      	cmp	r0, #0
 800dffe:	d1ec      	bne.n	800dfda <BSP_LCD_Clear+0x3e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800e000:	4620      	mov	r0, r4
 800e002:	210a      	movs	r1, #10
}
 800e004:	b003      	add	sp, #12
 800e006:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800e00a:	f001 bdfb 	b.w	800fc04 <HAL_DMA2D_PollForTransfer>
 800e00e:	bf00      	nop
 800e010:	2000607c 	.word	0x2000607c
 800e014:	20013160 	.word	0x20013160
 800e018:	20006098 	.word	0x20006098
 800e01c:	4002b000 	.word	0x4002b000

0800e020 <BSP_LCD_DisplayChar>:
{
 800e020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800e024:	4c3b      	ldr	r4, [pc, #236]	; (800e114 <BSP_LCD_DisplayChar+0xf4>)
{
 800e026:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800e028:	4b3b      	ldr	r3, [pc, #236]	; (800e118 <BSP_LCD_DisplayChar+0xf8>)
{
 800e02a:	4682      	mov	sl, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800e02c:	6825      	ldr	r5, [r4, #0]
 800e02e:	3a20      	subs	r2, #32
{
 800e030:	9103      	str	r1, [sp, #12]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800e032:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 800e036:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800e03a:	f8de 3008 	ldr.w	r3, [lr, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800e03e:	8898      	ldrh	r0, [r3, #4]
 800e040:	88de      	ldrh	r6, [r3, #6]
 800e042:	1dc1      	adds	r1, r0, #7
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800e044:	681c      	ldr	r4, [r3, #0]
 800e046:	fb06 f202 	mul.w	r2, r6, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800e04a:	10c9      	asrs	r1, r1, #3
 800e04c:	9602      	str	r6, [sp, #8]
  offset =  8 *((width + 7)/8) -  width ;
 800e04e:	ebc0 03c1 	rsb	r3, r0, r1, lsl #3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800e052:	9101      	str	r1, [sp, #4]
 800e054:	fb01 f202 	mul.w	r2, r1, r2
  offset =  8 *((width + 7)/8) -  width ;
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	9304      	str	r3, [sp, #16]
  for(i = 0; i < height; i++)
 800e05c:	2e00      	cmp	r6, #0
 800e05e:	d04c      	beq.n	800e0fa <BSP_LCD_DisplayChar+0xda>
 800e060:	4b2e      	ldr	r3, [pc, #184]	; (800e11c <BSP_LCD_DisplayChar+0xfc>)
 800e062:	2134      	movs	r1, #52	; 0x34
 800e064:	eb04 0b02 	add.w	fp, r4, r2
 800e068:	fb01 3505 	mla	r5, r1, r5, r3
 800e06c:	2300      	movs	r3, #0
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	1e43      	subs	r3, r0, #1
 800e072:	9305      	str	r3, [sp, #20]
 800e074:	9b03      	ldr	r3, [sp, #12]
 800e076:	9a00      	ldr	r2, [sp, #0]
 800e078:	f89b 7000 	ldrb.w	r7, [fp]
 800e07c:	eb03 0c02 	add.w	ip, r3, r2
    switch(((width + 7)/8))
 800e080:	9b01      	ldr	r3, [sp, #4]
 800e082:	2b01      	cmp	r3, #1
 800e084:	fa1f fc8c 	uxth.w	ip, ip
 800e088:	d005      	beq.n	800e096 <BSP_LCD_DisplayChar+0x76>
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	d138      	bne.n	800e100 <BSP_LCD_DisplayChar+0xe0>
      line =  (pchar[0]<< 8) | pchar[1];      
 800e08e:	f8bb 7000 	ldrh.w	r7, [fp]
 800e092:	ba7f      	rev16	r7, r7
 800e094:	b2bf      	uxth	r7, r7
    for (j = 0; j < width; j++)
 800e096:	b340      	cbz	r0, 800e0ea <BSP_LCD_DisplayChar+0xca>
 800e098:	2100      	movs	r1, #0
      if(line & (1 << (width- j + offset- 1))) 
 800e09a:	f04f 0801 	mov.w	r8, #1
 800e09e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0a2:	eb03 0902 	add.w	r9, r3, r2
 800e0a6:	e008      	b.n	800e0ba <BSP_LCD_DisplayChar+0x9a>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800e0a8:	2e02      	cmp	r6, #2
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800e0aa:	f8de 2000 	ldr.w	r2, [lr]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800e0ae:	d016      	beq.n	800e0de <BSP_LCD_DisplayChar+0xbe>
    for (j = 0; j < width; j++)
 800e0b0:	3101      	adds	r1, #1
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800e0b2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (j = 0; j < width; j++)
 800e0b6:	4288      	cmp	r0, r1
 800e0b8:	d017      	beq.n	800e0ea <BSP_LCD_DisplayChar+0xca>
      if(line & (1 << (width- j + offset- 1))) 
 800e0ba:	eba9 0201 	sub.w	r2, r9, r1
 800e0be:	eb0a 0301 	add.w	r3, sl, r1
 800e0c2:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 800e0c4:	fa08 f202 	lsl.w	r2, r8, r2
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	6cae      	ldr	r6, [r5, #72]	; 0x48
 800e0cc:	423a      	tst	r2, r7
 800e0ce:	fb04 330c 	mla	r3, r4, ip, r3
 800e0d2:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 800e0d4:	d1e8      	bne.n	800e0a8 <BSP_LCD_DisplayChar+0x88>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800e0d6:	2e02      	cmp	r6, #2
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800e0d8:	f8de 2004 	ldr.w	r2, [lr, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800e0dc:	d1e8      	bne.n	800e0b0 <BSP_LCD_DisplayChar+0x90>
    for (j = 0; j < width; j++)
 800e0de:	3101      	adds	r1, #1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800e0e0:	b292      	uxth	r2, r2
    for (j = 0; j < width; j++)
 800e0e2:	4288      	cmp	r0, r1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800e0e4:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
    for (j = 0; j < width; j++)
 800e0e8:	d1e7      	bne.n	800e0ba <BSP_LCD_DisplayChar+0x9a>
  for(i = 0; i < height; i++)
 800e0ea:	9b00      	ldr	r3, [sp, #0]
 800e0ec:	9a01      	ldr	r2, [sp, #4]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	4493      	add	fp, r2
 800e0f2:	9a02      	ldr	r2, [sp, #8]
 800e0f4:	9300      	str	r3, [sp, #0]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d1bc      	bne.n	800e074 <BSP_LCD_DisplayChar+0x54>
}
 800e0fa:	b007      	add	sp, #28
 800e0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800e100:	043f      	lsls	r7, r7, #16
 800e102:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800e106:	f89b 3002 	ldrb.w	r3, [fp, #2]
 800e10a:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 800e10e:	431f      	orrs	r7, r3
 800e110:	e7c1      	b.n	800e096 <BSP_LCD_DisplayChar+0x76>
 800e112:	bf00      	nop
 800e114:	2000607c 	.word	0x2000607c
 800e118:	20006080 	.word	0x20006080
 800e11c:	20013160 	.word	0x20013160

0800e120 <BSP_LCD_DisplayStringAt>:
{
 800e120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e124:	4616      	mov	r6, r2
  while (*ptr++) size ++ ;
 800e126:	7812      	ldrb	r2, [r2, #0]
{
 800e128:	4604      	mov	r4, r0
 800e12a:	4688      	mov	r8, r1
  while (*ptr++) size ++ ;
 800e12c:	2a00      	cmp	r2, #0
 800e12e:	d04b      	beq.n	800e1c8 <BSP_LCD_DisplayStringAt+0xa8>
 800e130:	1c71      	adds	r1, r6, #1
 800e132:	1b8d      	subs	r5, r1, r6
 800e134:	f811 0b01 	ldrb.w	r0, [r1], #1
 800e138:	2800      	cmp	r0, #0
 800e13a:	d1fa      	bne.n	800e132 <BSP_LCD_DisplayStringAt+0x12>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800e13c:	4f23      	ldr	r7, [pc, #140]	; (800e1cc <BSP_LCD_DisplayStringAt+0xac>)
 800e13e:	2034      	movs	r0, #52	; 0x34
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800e140:	4923      	ldr	r1, [pc, #140]	; (800e1d0 <BSP_LCD_DisplayStringAt+0xb0>)
  switch (Mode)
 800e142:	2b01      	cmp	r3, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800e144:	f8d7 9000 	ldr.w	r9, [r7]
 800e148:	f8df c088 	ldr.w	ip, [pc, #136]	; 800e1d4 <BSP_LCD_DisplayStringAt+0xb4>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800e14c:	eb09 0749 	add.w	r7, r9, r9, lsl #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800e150:	fb00 c009 	mla	r0, r0, r9, ip
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800e154:	eb01 0187 	add.w	r1, r1, r7, lsl #2
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800e158:	6e00      	ldr	r0, [r0, #96]	; 0x60
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800e15a:	688f      	ldr	r7, [r1, #8]
 800e15c:	f8b7 e004 	ldrh.w	lr, [r7, #4]
 800e160:	fbb0 f1fe 	udiv	r1, r0, lr
  switch (Mode)
 800e164:	d029      	beq.n	800e1ba <BSP_LCD_DisplayStringAt+0x9a>
 800e166:	2b02      	cmp	r3, #2
 800e168:	d021      	beq.n	800e1ae <BSP_LCD_DisplayStringAt+0x8e>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800e16a:	b223      	sxth	r3, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800e16c:	b280      	uxth	r0, r0
    ref_column = 1;
 800e16e:	2b00      	cmp	r3, #0
 800e170:	bfd8      	it	le
 800e172:	2401      	movle	r4, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800e174:	4586      	cmp	lr, r0
 800e176:	d818      	bhi.n	800e1aa <BSP_LCD_DisplayStringAt+0x8a>
 800e178:	b1ba      	cbz	r2, 800e1aa <BSP_LCD_DisplayStringAt+0x8a>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800e17a:	2334      	movs	r3, #52	; 0x34
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800e17c:	4635      	mov	r5, r6
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800e17e:	fb03 c909 	mla	r9, r3, r9, ip
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800e182:	4620      	mov	r0, r4
 800e184:	4641      	mov	r1, r8
 800e186:	f7ff ff4b 	bl	800e020 <BSP_LCD_DisplayChar>
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800e18a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800e18e:	88b8      	ldrh	r0, [r7, #4]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800e190:	1bab      	subs	r3, r5, r6
 800e192:	f8d9 1060 	ldr.w	r1, [r9, #96]	; 0x60
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800e196:	4404      	add	r4, r0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800e198:	b29b      	uxth	r3, r3
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800e19a:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800e19c:	fb00 1313 	mls	r3, r0, r3, r1
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	4283      	cmp	r3, r0
 800e1a4:	d301      	bcc.n	800e1aa <BSP_LCD_DisplayStringAt+0x8a>
 800e1a6:	2a00      	cmp	r2, #0
 800e1a8:	d1eb      	bne.n	800e182 <BSP_LCD_DisplayStringAt+0x62>
}
 800e1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800e1ae:	1b49      	subs	r1, r1, r5
 800e1b0:	fb11 f10e 	smulbb	r1, r1, lr
 800e1b4:	1b0c      	subs	r4, r1, r4
 800e1b6:	b2a4      	uxth	r4, r4
      break;
 800e1b8:	e7d7      	b.n	800e16a <BSP_LCD_DisplayStringAt+0x4a>
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800e1ba:	1b49      	subs	r1, r1, r5
 800e1bc:	fb0e f101 	mul.w	r1, lr, r1
 800e1c0:	eb04 0451 	add.w	r4, r4, r1, lsr #1
 800e1c4:	b2a4      	uxth	r4, r4
      break;
 800e1c6:	e7d0      	b.n	800e16a <BSP_LCD_DisplayStringAt+0x4a>
  uint32_t size = 0, xsize = 0; 
 800e1c8:	4615      	mov	r5, r2
 800e1ca:	e7b7      	b.n	800e13c <BSP_LCD_DisplayStringAt+0x1c>
 800e1cc:	2000607c 	.word	0x2000607c
 800e1d0:	20006080 	.word	0x20006080
 800e1d4:	20013160 	.word	0x20013160

0800e1d8 <BSP_LCD_FillRect>:
{
 800e1d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800e1dc:	4f22      	ldr	r7, [pc, #136]	; (800e268 <BSP_LCD_FillRect+0x90>)
 800e1de:	2434      	movs	r4, #52	; 0x34
 800e1e0:	4d22      	ldr	r5, [pc, #136]	; (800e26c <BSP_LCD_FillRect+0x94>)
{
 800e1e2:	4616      	mov	r6, r2
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800e1e4:	f8d7 8000 	ldr.w	r8, [r7]
{
 800e1e8:	461f      	mov	r7, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800e1ea:	f8df c08c 	ldr.w	ip, [pc, #140]	; 800e278 <BSP_LCD_FillRect+0xa0>
{
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	fb04 5308 	mla	r3, r4, r8, r5
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800e1f4:	eb08 0e48 	add.w	lr, r8, r8, lsl #1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800e1f8:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800e1fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e1fc:	2c02      	cmp	r4, #2
 800e1fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e200:	fb02 0901 	mla	r9, r2, r1, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800e204:	f85c 502e 	ldr.w	r5, [ip, lr, lsl #2]
 800e208:	eba2 0206 	sub.w	r2, r2, r6
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800e20c:	d027      	beq.n	800e25e <BSP_LCD_FillRect+0x86>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800e20e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800e212:	2300      	movs	r3, #0
 800e214:	4c16      	ldr	r4, [pc, #88]	; (800e270 <BSP_LCD_FillRect+0x98>)
 800e216:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hDma2dHandler.Instance = DMA2D;
 800e21a:	4916      	ldr	r1, [pc, #88]	; (800e274 <BSP_LCD_FillRect+0x9c>)
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800e21c:	4620      	mov	r0, r4
 800e21e:	60a3      	str	r3, [r4, #8]
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800e220:	60e2      	str	r2, [r4, #12]
  hDma2dHandler.Instance = DMA2D;
 800e222:	e9c4 1c00 	strd	r1, ip, [r4]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800e226:	f001 fc69 	bl	800fafc <HAL_DMA2D_Init>
 800e22a:	b110      	cbz	r0, 800e232 <BSP_LCD_FillRect+0x5a>
}
 800e22c:	b003      	add	sp, #12
 800e22e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800e232:	4641      	mov	r1, r8
 800e234:	4620      	mov	r0, r4
 800e236:	f001 fe0d 	bl	800fe54 <HAL_DMA2D_ConfigLayer>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d1f6      	bne.n	800e22c <BSP_LCD_FillRect+0x54>
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800e23e:	9700      	str	r7, [sp, #0]
 800e240:	4633      	mov	r3, r6
 800e242:	464a      	mov	r2, r9
 800e244:	4629      	mov	r1, r5
 800e246:	4620      	mov	r0, r4
 800e248:	f001 fc86 	bl	800fb58 <HAL_DMA2D_Start>
 800e24c:	2800      	cmp	r0, #0
 800e24e:	d1ed      	bne.n	800e22c <BSP_LCD_FillRect+0x54>
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800e250:	4620      	mov	r0, r4
 800e252:	210a      	movs	r1, #10
}
 800e254:	b003      	add	sp, #12
 800e256:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800e25a:	f001 bcd3 	b.w	800fc04 <HAL_DMA2D_PollForTransfer>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800e25e:	eb03 0949 	add.w	r9, r3, r9, lsl #1
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800e262:	4623      	mov	r3, r4
 800e264:	e7d6      	b.n	800e214 <BSP_LCD_FillRect+0x3c>
 800e266:	bf00      	nop
 800e268:	2000607c 	.word	0x2000607c
 800e26c:	20013160 	.word	0x20013160
 800e270:	20006098 	.word	0x20006098
 800e274:	4002b000 	.word	0x4002b000
 800e278:	20006080 	.word	0x20006080

0800e27c <BSP_LCD_FillPolygon>:
{
 800e27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  image_left = image_right = Points->X;
 800e280:	8803      	ldrh	r3, [r0, #0]
{
 800e282:	b0a3      	sub	sp, #140	; 0x8c
  image_top= image_bottom = Points->Y;
 800e284:	8842      	ldrh	r2, [r0, #2]
  for(counter = 1; counter < PointCount; counter++)
 800e286:	2901      	cmp	r1, #1
  image_left = image_right = Points->X;
 800e288:	9320      	str	r3, [sp, #128]	; 0x80
  image_top= image_bottom = Points->Y;
 800e28a:	9221      	str	r2, [sp, #132]	; 0x84
  for(counter = 1; counter < PointCount; counter++)
 800e28c:	f340 8378 	ble.w	800e980 <BSP_LCD_FillPolygon+0x704>
  image_left = image_right = Points->X;
 800e290:	469e      	mov	lr, r3
 800e292:	461f      	mov	r7, r3
  image_top= image_bottom = Points->Y;
 800e294:	4616      	mov	r6, r2
 800e296:	4694      	mov	ip, r2
  for(counter = 1; counter < PointCount; counter++)
 800e298:	2301      	movs	r3, #1
    pixelX = POLY_X(counter);
 800e29a:	f930 2023 	ldrsh.w	r2, [r0, r3, lsl #2]
 800e29e:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800e2a2:	1c5d      	adds	r5, r3, #1
    if(pixelX < image_left)
 800e2a4:	4297      	cmp	r7, r2
 800e2a6:	b22b      	sxth	r3, r5
      image_left = pixelX;
 800e2a8:	bfc8      	it	gt
 800e2aa:	b297      	uxthgt	r7, r2
    if(pixelX > image_right)
 800e2ac:	4572      	cmp	r2, lr
      image_right = pixelX;
 800e2ae:	bfc8      	it	gt
 800e2b0:	fa1f fe82 	uxthgt.w	lr, r2
    pixelY = POLY_Y(counter);
 800e2b4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
    if(pixelY < image_top)
 800e2b8:	4594      	cmp	ip, r2
      image_top = pixelY;
 800e2ba:	bfc8      	it	gt
 800e2bc:	fa1f fc82 	uxthgt.w	ip, r2
    if(pixelY > image_bottom)
 800e2c0:	42b2      	cmp	r2, r6
      image_bottom = pixelY;
 800e2c2:	bfc8      	it	gt
 800e2c4:	b296      	uxthgt	r6, r2
  for(counter = 1; counter < PointCount; counter++)
 800e2c6:	428b      	cmp	r3, r1
 800e2c8:	dbe7      	blt.n	800e29a <BSP_LCD_FillPolygon+0x1e>
  if(PointCount < 2)
 800e2ca:	2901      	cmp	r1, #1
 800e2cc:	f240 82e8 	bls.w	800e8a0 <BSP_LCD_FillPolygon+0x624>
 800e2d0:	1e4b      	subs	r3, r1, #1
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800e2d2:	4a54      	ldr	r2, [pc, #336]	; (800e424 <BSP_LCD_FillPolygon+0x1a8>)
 800e2d4:	4601      	mov	r1, r0
 800e2d6:	9019      	str	r0, [sp, #100]	; 0x64
 800e2d8:	6812      	ldr	r2, [r2, #0]
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	4852      	ldr	r0, [pc, #328]	; (800e428 <BSP_LCD_FillPolygon+0x1ac>)
  X_center = (image_left + image_right)/2;
 800e2de:	4477      	add	r7, lr
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800e2e0:	eb02 0442 	add.w	r4, r2, r2, lsl #1
  Y_center = (image_bottom + image_top)/2;
 800e2e4:	4466      	add	r6, ip
 800e2e6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e2ea:	f04f 0c34 	mov.w	ip, #52	; 0x34
  X_center = (image_left + image_right)/2;
 800e2ee:	107d      	asrs	r5, r7, #1
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 800e2f0:	2700      	movs	r7, #0
 800e2f2:	931d      	str	r3, [sp, #116]	; 0x74
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800e2f4:	eb00 0384 	add.w	r3, r0, r4, lsl #2
  Y_center = (image_bottom + image_top)/2;
 800e2f8:	1076      	asrs	r6, r6, #1
  X_center = (image_left + image_right)/2;
 800e2fa:	950e      	str	r5, [sp, #56]	; 0x38
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800e2fc:	9307      	str	r3, [sp, #28]
 800e2fe:	fb0c f302 	mul.w	r3, ip, r2
  while(--PointCount)
 800e302:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  Y_center = (image_bottom + image_top)/2;
 800e304:	960f      	str	r6, [sp, #60]	; 0x3c
 800e306:	931a      	str	r3, [sp, #104]	; 0x68
 800e308:	b2ab      	uxth	r3, r5
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 800e30a:	971f      	str	r7, [sp, #124]	; 0x7c
 800e30c:	930c      	str	r3, [sp, #48]	; 0x30
 800e30e:	b2b3      	uxth	r3, r6
 800e310:	971e      	str	r7, [sp, #120]	; 0x78
 800e312:	930d      	str	r3, [sp, #52]	; 0x34
 800e314:	460b      	mov	r3, r1
  while(--PointCount)
 800e316:	4293      	cmp	r3, r2
 800e318:	f000 829f 	beq.w	800e85a <BSP_LCD_FillPolygon+0x5de>
 800e31c:	461a      	mov	r2, r3
    X = Points->X;
 800e31e:	f9b3 3000 	ldrsh.w	r3, [r3]
  if (x2 >= x1)                 /* The x-values are increasing */
 800e322:	f64f 74ff 	movw	r4, #65535	; 0xffff
    X2 = Points->X;
 800e326:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 800e32a:	4611      	mov	r1, r2
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 800e32c:	fa1f fb83 	uxth.w	fp, r3
    Y = Points->Y;
 800e330:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    Y2 = Points->Y;    
 800e334:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 800e338:	b281      	uxth	r1, r0
    X2 = Points->X;
 800e33a:	901e      	str	r0, [sp, #120]	; 0x78
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 800e33c:	fa1f f882 	uxth.w	r8, r2
 800e340:	4608      	mov	r0, r1
    Y2 = Points->Y;    
 800e342:	951f      	str	r5, [sp, #124]	; 0x7c
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 800e344:	9110      	str	r1, [sp, #64]	; 0x40
 800e346:	b2ad      	uxth	r5, r5
  if (x2 >= x1)                 /* The x-values are increasing */
 800e348:	4583      	cmp	fp, r0
 800e34a:	bf8c      	ite	hi
 800e34c:	4620      	movhi	r0, r4
 800e34e:	2001      	movls	r0, #1
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e350:	eba1 010b 	sub.w	r1, r1, fp
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 800e354:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e358:	2900      	cmp	r1, #0
  if (x2 >= x1)                 /* The x-values are increasing */
 800e35a:	9017      	str	r0, [sp, #92]	; 0x5c
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e35c:	eba5 0008 	sub.w	r0, r5, r8
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 800e360:	9511      	str	r5, [sp, #68]	; 0x44
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e362:	bfb8      	it	lt
 800e364:	4249      	neglt	r1, r1
  if (y2 >= y1)                 /* The y-values are increasing */
 800e366:	45a8      	cmp	r8, r5
 800e368:	bf98      	it	ls
 800e36a:	2401      	movls	r4, #1
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e36c:	2800      	cmp	r0, #0
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 800e36e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e372:	b209      	sxth	r1, r1
  if (y2 >= y1)                 /* The y-values are increasing */
 800e374:	9418      	str	r4, [sp, #96]	; 0x60
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e376:	bfb8      	it	lt
 800e378:	4240      	neglt	r0, r0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e37a:	9109      	str	r1, [sp, #36]	; 0x24
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e37c:	b200      	sxth	r0, r0
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800e37e:	4281      	cmp	r1, r0
 800e380:	f2c0 82cb 	blt.w	800e91a <BSP_LCD_FillPolygon+0x69e>
    num = deltax / 2;
 800e384:	2900      	cmp	r1, #0
 800e386:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800e388:	bfb8      	it	lt
 800e38a:	3101      	addlt	r1, #1
 800e38c:	9414      	str	r4, [sp, #80]	; 0x50
 800e38e:	2400      	movs	r4, #0
 800e390:	1049      	asrs	r1, r1, #1
 800e392:	9417      	str	r4, [sp, #92]	; 0x5c
 800e394:	9106      	str	r1, [sp, #24]
 800e396:	9415      	str	r4, [sp, #84]	; 0x54
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e398:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e39a:	2900      	cmp	r1, #0
 800e39c:	f2c0 809d 	blt.w	800e4da <BSP_LCD_FillPolygon+0x25e>
 800e3a0:	b280      	uxth	r0, r0
 800e3a2:	4922      	ldr	r1, [pc, #136]	; (800e42c <BSP_LCD_FillPolygon+0x1b0>)
 800e3a4:	461d      	mov	r5, r3
 800e3a6:	9016      	str	r0, [sp, #88]	; 0x58
 800e3a8:	981a      	ldr	r0, [sp, #104]	; 0x68
 800e3aa:	eb01 0e00 	add.w	lr, r1, r0
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	e9cd 8b1b 	strd	r8, fp, [sp, #108]	; 0x6c
 800e3b4:	9108      	str	r1, [sp, #32]
    BSP_LCD_DrawLine(x, y, x3, y3);
 800e3b6:	b2ab      	uxth	r3, r5
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e3b8:	980e      	ldr	r0, [sp, #56]	; 0x38
    BSP_LCD_DrawLine(x, y, x3, y3);
 800e3ba:	b292      	uxth	r2, r2
  if (x2 >= x1)                 /* The x-values are increasing */
 800e3bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e3c0:	1ac4      	subs	r4, r0, r3
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e3c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    BSP_LCD_DrawLine(x, y, x3, y3);
 800e3c4:	930a      	str	r3, [sp, #40]	; 0x28
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e3c6:	1a87      	subs	r7, r0, r2
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e3c8:	2c00      	cmp	r4, #0
  if (x2 >= x1)                 /* The x-values are increasing */
 800e3ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e3cc:	bfb8      	it	lt
 800e3ce:	4264      	neglt	r4, r4
    BSP_LCD_DrawLine(x, y, x3, y3);
 800e3d0:	920b      	str	r2, [sp, #44]	; 0x2c
  if (x2 >= x1)                 /* The x-values are increasing */
 800e3d2:	4283      	cmp	r3, r0
 800e3d4:	bf8c      	ite	hi
 800e3d6:	4608      	movhi	r0, r1
 800e3d8:	2001      	movls	r0, #1
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e3da:	2f00      	cmp	r7, #0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e3dc:	b224      	sxth	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e3de:	bfb8      	it	lt
 800e3e0:	427f      	neglt	r7, r7
  if (x2 >= x1)                 /* The x-values are increasing */
 800e3e2:	9002      	str	r0, [sp, #8]
  if (y2 >= y1)                 /* The y-values are increasing */
 800e3e4:	980d      	ldr	r0, [sp, #52]	; 0x34
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e3e6:	b23f      	sxth	r7, r7
  if (y2 >= y1)                 /* The y-values are increasing */
 800e3e8:	4282      	cmp	r2, r0
 800e3ea:	bf8c      	ite	hi
 800e3ec:	4689      	movhi	r9, r1
 800e3ee:	f04f 0901 	movls.w	r9, #1
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800e3f2:	42bc      	cmp	r4, r7
 800e3f4:	f2c0 813e 	blt.w	800e674 <BSP_LCD_FillPolygon+0x3f8>
    num = deltax / 2;
 800e3f8:	2c00      	cmp	r4, #0
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f04f 0100 	mov.w	r1, #0
 800e400:	f8dd c008 	ldr.w	ip, [sp, #8]
 800e404:	bfb8      	it	lt
 800e406:	1c60      	addlt	r0, r4, #1
 800e408:	4688      	mov	r8, r1
 800e40a:	9102      	str	r1, [sp, #8]
 800e40c:	1040      	asrs	r0, r0, #1
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e40e:	2c00      	cmp	r4, #0
 800e410:	db3e      	blt.n	800e490 <BSP_LCD_FillPolygon+0x214>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800e412:	9907      	ldr	r1, [sp, #28]
 800e414:	b2bf      	uxth	r7, r7
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800e416:	2500      	movs	r5, #0
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800e418:	6809      	ldr	r1, [r1, #0]
 800e41a:	9703      	str	r7, [sp, #12]
 800e41c:	9104      	str	r1, [sp, #16]
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800e41e:	b289      	uxth	r1, r1
 800e420:	9105      	str	r1, [sp, #20]
 800e422:	e00b      	b.n	800e43c <BSP_LCD_FillPolygon+0x1c0>
 800e424:	2000607c 	.word	0x2000607c
 800e428:	20006080 	.word	0x20006080
 800e42c:	20013160 	.word	0x20013160
      num -= den;                             /* Calculate the new numerator value */
 800e430:	b208      	sxth	r0, r1
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e432:	b229      	sxth	r1, r5
 800e434:	428c      	cmp	r4, r1
 800e436:	db2b      	blt.n	800e490 <BSP_LCD_FillPolygon+0x214>
 800e438:	b29b      	uxth	r3, r3
 800e43a:	b292      	uxth	r2, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800e43c:	f8de 7048 	ldr.w	r7, [lr, #72]	; 0x48
 800e440:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
 800e444:	2f02      	cmp	r7, #2
 800e446:	f8de 605c 	ldr.w	r6, [lr, #92]	; 0x5c
 800e44a:	fb01 3102 	mla	r1, r1, r2, r3
 800e44e:	f000 810d 	beq.w	800e66c <BSP_LCD_FillPolygon+0x3f0>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800e452:	9f04      	ldr	r7, [sp, #16]
 800e454:	f846 7021 	str.w	r7, [r6, r1, lsl #2]
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800e458:	9903      	ldr	r1, [sp, #12]
      y += yinc1;                             /* Change the y as appropriate */
 800e45a:	eb02 0b09 	add.w	fp, r2, r9
    x += xinc2;                               /* Change the x as appropriate */
 800e45e:	eb03 060c 	add.w	r6, r3, ip
    y += yinc2;                               /* Change the y as appropriate */
 800e462:	eb02 0a08 	add.w	sl, r2, r8
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800e466:	4401      	add	r1, r0
      x += xinc1;                             /* Change the x as appropriate */
 800e468:	9802      	ldr	r0, [sp, #8]
    y += yinc2;                               /* Change the y as appropriate */
 800e46a:	eb08 020b 	add.w	r2, r8, fp
 800e46e:	3501      	adds	r5, #1
      x += xinc1;                             /* Change the x as appropriate */
 800e470:	1818      	adds	r0, r3, r0
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800e472:	b289      	uxth	r1, r1
    y += yinc2;                               /* Change the y as appropriate */
 800e474:	b212      	sxth	r2, r2
    x += xinc2;                               /* Change the x as appropriate */
 800e476:	eb0c 0300 	add.w	r3, ip, r0
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800e47a:	b208      	sxth	r0, r1
      num -= den;                             /* Calculate the new numerator value */
 800e47c:	1b09      	subs	r1, r1, r4
    if (num >= den)                           /* Check if numerator >= denominator */
 800e47e:	42a0      	cmp	r0, r4
    x += xinc2;                               /* Change the x as appropriate */
 800e480:	b21b      	sxth	r3, r3
    if (num >= den)                           /* Check if numerator >= denominator */
 800e482:	dad5      	bge.n	800e430 <BSP_LCD_FillPolygon+0x1b4>
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e484:	b229      	sxth	r1, r5
    x += xinc2;                               /* Change the x as appropriate */
 800e486:	b233      	sxth	r3, r6
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e488:	42a1      	cmp	r1, r4
    y += yinc2;                               /* Change the y as appropriate */
 800e48a:	fa0f f28a 	sxth.w	r2, sl
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e48e:	ddd3      	ble.n	800e438 <BSP_LCD_FillPolygon+0x1bc>
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800e490:	9b06      	ldr	r3, [sp, #24]
 800e492:	9a16      	ldr	r2, [sp, #88]	; 0x58
    if (num >= den)             /* Check if numerator >= denominator */
 800e494:	9809      	ldr	r0, [sp, #36]	; 0x24
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800e496:	4413      	add	r3, r2
 800e498:	b299      	uxth	r1, r3
 800e49a:	b20b      	sxth	r3, r1
    if (num >= den)             /* Check if numerator >= denominator */
 800e49c:	4283      	cmp	r3, r0
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800e49e:	9306      	str	r3, [sp, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 800e4a0:	f2c0 8228 	blt.w	800e8f4 <BSP_LCD_FillPolygon+0x678>
      x += xinc1;               /* Change the x as appropriate */
 800e4a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
      num -= den;               /* Calculate the new numerator value */
 800e4a6:	1a09      	subs	r1, r1, r0
      x += xinc1;               /* Change the x as appropriate */
 800e4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      y += yinc1;               /* Change the y as appropriate */
 800e4aa:	9c18      	ldr	r4, [sp, #96]	; 0x60
      x += xinc1;               /* Change the x as appropriate */
 800e4ac:	4413      	add	r3, r2
      y += yinc1;               /* Change the y as appropriate */
 800e4ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e4b0:	9d08      	ldr	r5, [sp, #32]
 800e4b2:	4422      	add	r2, r4
      num -= den;               /* Calculate the new numerator value */
 800e4b4:	4604      	mov	r4, r0
    x += xinc2;                 /* Change the x as appropriate */
 800e4b6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e4b8:	3501      	adds	r5, #1
 800e4ba:	4403      	add	r3, r0
    y += yinc2;                 /* Change the y as appropriate */
 800e4bc:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e4be:	9508      	str	r5, [sp, #32]
 800e4c0:	4402      	add	r2, r0
    x += xinc2;                 /* Change the x as appropriate */
 800e4c2:	b21b      	sxth	r3, r3
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e4c4:	b228      	sxth	r0, r5
    x += xinc2;                 /* Change the x as appropriate */
 800e4c6:	461d      	mov	r5, r3
    y += yinc2;                 /* Change the y as appropriate */
 800e4c8:	b213      	sxth	r3, r2
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e4ca:	4284      	cmp	r4, r0
    y += yinc2;                 /* Change the y as appropriate */
 800e4cc:	461a      	mov	r2, r3
      num -= den;               /* Calculate the new numerator value */
 800e4ce:	b20b      	sxth	r3, r1
 800e4d0:	9306      	str	r3, [sp, #24]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e4d2:	f6bf af70 	bge.w	800e3b6 <BSP_LCD_FillPolygon+0x13a>
 800e4d6:	e9dd 8b1b 	ldrd	r8, fp, [sp, #108]	; 0x6c
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e4da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  if (x2 >= x1)                 /* The x-values are increasing */
 800e4dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e4e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e4e2:	eba3 030b 	sub.w	r3, r3, fp
  if (x2 >= x1)                 /* The x-values are increasing */
 800e4e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e4e8:	eba2 0208 	sub.w	r2, r2, r8
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	bfb8      	it	lt
 800e4f0:	425b      	neglt	r3, r3
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e4f2:	2a00      	cmp	r2, #0
 800e4f4:	bfb8      	it	lt
 800e4f6:	4252      	neglt	r2, r2
  if (x2 >= x1)                 /* The x-values are increasing */
 800e4f8:	4583      	cmp	fp, r0
 800e4fa:	bf8c      	ite	hi
 800e4fc:	4608      	movhi	r0, r1
 800e4fe:	2001      	movls	r0, #1
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e500:	b21b      	sxth	r3, r3
  if (x2 >= x1)                 /* The x-values are increasing */
 800e502:	9017      	str	r0, [sp, #92]	; 0x5c
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e504:	b212      	sxth	r2, r2
  if (y2 >= y1)                 /* The y-values are increasing */
 800e506:	980d      	ldr	r0, [sp, #52]	; 0x34
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e508:	9309      	str	r3, [sp, #36]	; 0x24
  if (y2 >= y1)                 /* The y-values are increasing */
 800e50a:	4580      	cmp	r8, r0
 800e50c:	bf98      	it	ls
 800e50e:	2101      	movls	r1, #1
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800e510:	4293      	cmp	r3, r2
  if (y2 >= y1)                 /* The y-values are increasing */
 800e512:	9118      	str	r1, [sp, #96]	; 0x60
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800e514:	f2c0 8223 	blt.w	800e95e <BSP_LCD_FillPolygon+0x6e2>
    num = deltax / 2;
 800e518:	2b00      	cmp	r3, #0
 800e51a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800e51c:	bfb8      	it	lt
 800e51e:	3301      	addlt	r3, #1
 800e520:	9114      	str	r1, [sp, #80]	; 0x50
 800e522:	2100      	movs	r1, #0
 800e524:	105b      	asrs	r3, r3, #1
 800e526:	9117      	str	r1, [sp, #92]	; 0x5c
 800e528:	9306      	str	r3, [sp, #24]
 800e52a:	9115      	str	r1, [sp, #84]	; 0x54
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e52e:	2b00      	cmp	r3, #0
 800e530:	f2c0 80ce 	blt.w	800e6d0 <BSP_LCD_FillPolygon+0x454>
 800e534:	b292      	uxth	r2, r2
 800e536:	4b9b      	ldr	r3, [pc, #620]	; (800e7a4 <BSP_LCD_FillPolygon+0x528>)
 800e538:	9216      	str	r2, [sp, #88]	; 0x58
 800e53a:	2200      	movs	r2, #0
 800e53c:	9208      	str	r2, [sp, #32]
 800e53e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e540:	eb03 0902 	add.w	r9, r3, r2
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e544:	9a10      	ldr	r2, [sp, #64]	; 0x40
  if (x2 >= x1)                 /* The x-values are increasing */
 800e546:	f64f 73ff 	movw	r3, #65535	; 0xffff
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e54a:	9811      	ldr	r0, [sp, #68]	; 0x44
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e54c:	eba2 010b 	sub.w	r1, r2, fp
    BSP_LCD_DrawLine(x, y, x3, y3);
 800e550:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e554:	eba0 0408 	sub.w	r4, r0, r8
    BSP_LCD_DrawLine(x, y, x3, y3);
 800e558:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e55c:	2900      	cmp	r1, #0
 800e55e:	bfb8      	it	lt
 800e560:	4249      	neglt	r1, r1
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e562:	2c00      	cmp	r4, #0
 800e564:	bfb8      	it	lt
 800e566:	4264      	neglt	r4, r4
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e568:	b209      	sxth	r1, r1
  if (x2 >= x1)                 /* The x-values are increasing */
 800e56a:	455a      	cmp	r2, fp
 800e56c:	bf34      	ite	cc
 800e56e:	469c      	movcc	ip, r3
 800e570:	f04f 0c01 	movcs.w	ip, #1
  if (y2 >= y1)                 /* The y-values are increasing */
 800e574:	4540      	cmp	r0, r8
 800e576:	bf28      	it	cs
 800e578:	2301      	movcs	r3, #1
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e57a:	b224      	sxth	r4, r4
  if (y2 >= y1)                 /* The y-values are increasing */
 800e57c:	9302      	str	r3, [sp, #8]
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800e57e:	42a1      	cmp	r1, r4
 800e580:	f2c0 8086 	blt.w	800e690 <BSP_LCD_FillPolygon+0x414>
    num = deltax / 2;
 800e584:	2900      	cmp	r1, #0
 800e586:	460a      	mov	r2, r1
 800e588:	4666      	mov	r6, ip
 800e58a:	f04f 0c00 	mov.w	ip, #0
 800e58e:	bfb8      	it	lt
 800e590:	1c4a      	addlt	r2, r1, #1
 800e592:	4667      	mov	r7, ip
 800e594:	1052      	asrs	r2, r2, #1
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e596:	2900      	cmp	r1, #0
 800e598:	db3d      	blt.n	800e616 <BSP_LCD_FillPolygon+0x39a>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800e59a:	9b07      	ldr	r3, [sp, #28]
 800e59c:	b2a4      	uxth	r4, r4
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800e59e:	2000      	movs	r0, #0
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	9403      	str	r4, [sp, #12]
 800e5a4:	9304      	str	r3, [sp, #16]
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	9305      	str	r3, [sp, #20]
 800e5aa:	e007      	b.n	800e5bc <BSP_LCD_FillPolygon+0x340>
      num -= den;                             /* Calculate the new numerator value */
 800e5ac:	b21a      	sxth	r2, r3
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e5ae:	b203      	sxth	r3, r0
 800e5b0:	4299      	cmp	r1, r3
 800e5b2:	db30      	blt.n	800e616 <BSP_LCD_FillPolygon+0x39a>
 800e5b4:	fa1f fb8b 	uxth.w	fp, fp
 800e5b8:	fa1f f888 	uxth.w	r8, r8
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800e5bc:	f8d9 4048 	ldr.w	r4, [r9, #72]	; 0x48
 800e5c0:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
 800e5c4:	2c02      	cmp	r4, #2
 800e5c6:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 800e5ca:	fb03 b308 	mla	r3, r3, r8, fp
 800e5ce:	d049      	beq.n	800e664 <BSP_LCD_FillPolygon+0x3e8>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800e5d0:	9c04      	ldr	r4, [sp, #16]
 800e5d2:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800e5d6:	9b03      	ldr	r3, [sp, #12]
    x += xinc2;                               /* Change the x as appropriate */
 800e5d8:	eb0b 0506 	add.w	r5, fp, r6
      y += yinc1;                             /* Change the y as appropriate */
 800e5dc:	9c02      	ldr	r4, [sp, #8]
    y += yinc2;                               /* Change the y as appropriate */
 800e5de:	eb08 0e07 	add.w	lr, r8, r7
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800e5e2:	4413      	add	r3, r2
      x += xinc1;                             /* Change the x as appropriate */
 800e5e4:	eb0b 020c 	add.w	r2, fp, ip
      y += yinc1;                             /* Change the y as appropriate */
 800e5e8:	eb08 0a04 	add.w	sl, r8, r4
 800e5ec:	3001      	adds	r0, #1
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800e5ee:	b29b      	uxth	r3, r3
    x += xinc2;                               /* Change the x as appropriate */
 800e5f0:	eb06 0b02 	add.w	fp, r6, r2
    y += yinc2;                               /* Change the y as appropriate */
 800e5f4:	eb07 080a 	add.w	r8, r7, sl
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800e5f8:	b21a      	sxth	r2, r3
      num -= den;                             /* Calculate the new numerator value */
 800e5fa:	1a5b      	subs	r3, r3, r1
    x += xinc2;                               /* Change the x as appropriate */
 800e5fc:	fa0f fb8b 	sxth.w	fp, fp
    if (num >= den)                           /* Check if numerator >= denominator */
 800e600:	428a      	cmp	r2, r1
    y += yinc2;                               /* Change the y as appropriate */
 800e602:	fa0f f888 	sxth.w	r8, r8
    if (num >= den)                           /* Check if numerator >= denominator */
 800e606:	dad1      	bge.n	800e5ac <BSP_LCD_FillPolygon+0x330>
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e608:	b203      	sxth	r3, r0
    x += xinc2;                               /* Change the x as appropriate */
 800e60a:	fa0f fb85 	sxth.w	fp, r5
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e60e:	428b      	cmp	r3, r1
    y += yinc2;                               /* Change the y as appropriate */
 800e610:	fa0f f88e 	sxth.w	r8, lr
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e614:	ddce      	ble.n	800e5b4 <BSP_LCD_FillPolygon+0x338>
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800e616:	9b06      	ldr	r3, [sp, #24]
 800e618:	9a16      	ldr	r2, [sp, #88]	; 0x58
    if (num >= den)             /* Check if numerator >= denominator */
 800e61a:	9909      	ldr	r1, [sp, #36]	; 0x24
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800e61c:	4413      	add	r3, r2
 800e61e:	b29b      	uxth	r3, r3
 800e620:	b21a      	sxth	r2, r3
    if (num >= den)             /* Check if numerator >= denominator */
 800e622:	428a      	cmp	r2, r1
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800e624:	9206      	str	r2, [sp, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 800e626:	db41      	blt.n	800e6ac <BSP_LCD_FillPolygon+0x430>
      x += xinc1;               /* Change the x as appropriate */
 800e628:	9817      	ldr	r0, [sp, #92]	; 0x5c
      num -= den;               /* Calculate the new numerator value */
 800e62a:	1a5b      	subs	r3, r3, r1
      x += xinc1;               /* Change the x as appropriate */
 800e62c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      num -= den;               /* Calculate the new numerator value */
 800e62e:	b21b      	sxth	r3, r3
      x += xinc1;               /* Change the x as appropriate */
 800e630:	4402      	add	r2, r0
      y += yinc1;               /* Change the y as appropriate */
 800e632:	9818      	ldr	r0, [sp, #96]	; 0x60
      num -= den;               /* Calculate the new numerator value */
 800e634:	9306      	str	r3, [sp, #24]
      x += xinc1;               /* Change the x as appropriate */
 800e636:	4693      	mov	fp, r2
      y += yinc1;               /* Change the y as appropriate */
 800e638:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e63a:	4402      	add	r2, r0
    x += xinc2;                 /* Change the x as appropriate */
 800e63c:	9814      	ldr	r0, [sp, #80]	; 0x50
      y += yinc1;               /* Change the y as appropriate */
 800e63e:	4690      	mov	r8, r2
 800e640:	9a08      	ldr	r2, [sp, #32]
    x += xinc2;                 /* Change the x as appropriate */
 800e642:	4483      	add	fp, r0
    y += yinc2;                 /* Change the y as appropriate */
 800e644:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e646:	3201      	adds	r2, #1
 800e648:	4480      	add	r8, r0
    x += xinc2;                 /* Change the x as appropriate */
 800e64a:	fa0f fb8b 	sxth.w	fp, fp
 800e64e:	9208      	str	r2, [sp, #32]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e650:	b212      	sxth	r2, r2
    y += yinc2;                 /* Change the y as appropriate */
 800e652:	fa0f f888 	sxth.w	r8, r8
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e656:	4291      	cmp	r1, r2
 800e658:	db3a      	blt.n	800e6d0 <BSP_LCD_FillPolygon+0x454>
 800e65a:	fa1f fb8b 	uxth.w	fp, fp
 800e65e:	fa1f f888 	uxth.w	r8, r8
 800e662:	e76f      	b.n	800e544 <BSP_LCD_FillPolygon+0x2c8>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800e664:	9c05      	ldr	r4, [sp, #20]
 800e666:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
 800e66a:	e7b4      	b.n	800e5d6 <BSP_LCD_FillPolygon+0x35a>
 800e66c:	9f05      	ldr	r7, [sp, #20]
 800e66e:	f826 7011 	strh.w	r7, [r6, r1, lsl #1]
 800e672:	e6f1      	b.n	800e458 <BSP_LCD_FillPolygon+0x1dc>
    num = deltay / 2;
 800e674:	2f00      	cmp	r7, #0
 800e676:	4638      	mov	r0, r7
 800e678:	4621      	mov	r1, r4
 800e67a:	46c8      	mov	r8, r9
 800e67c:	bfb8      	it	lt
 800e67e:	1c78      	addlt	r0, r7, #1
 800e680:	f04f 0900 	mov.w	r9, #0
 800e684:	463c      	mov	r4, r7
 800e686:	460f      	mov	r7, r1
 800e688:	f340 004f 	sbfx	r0, r0, #1, #16
 800e68c:	46cc      	mov	ip, r9
 800e68e:	e6be      	b.n	800e40e <BSP_LCD_FillPolygon+0x192>
 800e690:	2c00      	cmp	r4, #0
 800e692:	4622      	mov	r2, r4
 800e694:	460b      	mov	r3, r1
 800e696:	f04f 0600 	mov.w	r6, #0
 800e69a:	bfb8      	it	lt
 800e69c:	1c62      	addlt	r2, r4, #1
 800e69e:	9f02      	ldr	r7, [sp, #8]
 800e6a0:	4621      	mov	r1, r4
 800e6a2:	9602      	str	r6, [sp, #8]
 800e6a4:	f342 024f 	sbfx	r2, r2, #1, #16
 800e6a8:	461c      	mov	r4, r3
 800e6aa:	e774      	b.n	800e596 <BSP_LCD_FillPolygon+0x31a>
    x += xinc2;                 /* Change the x as appropriate */
 800e6ac:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e6ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6b0:	9b08      	ldr	r3, [sp, #32]
 800e6b2:	440a      	add	r2, r1
    y += yinc2;                 /* Change the y as appropriate */
 800e6b4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e6b6:	3301      	adds	r3, #1
    x += xinc2;                 /* Change the x as appropriate */
 800e6b8:	4693      	mov	fp, r2
    y += yinc2;                 /* Change the y as appropriate */
 800e6ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e6bc:	9308      	str	r3, [sp, #32]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e6be:	b21b      	sxth	r3, r3
    y += yinc2;                 /* Change the y as appropriate */
 800e6c0:	440a      	add	r2, r1
    x += xinc2;                 /* Change the x as appropriate */
 800e6c2:	fa0f fb8b 	sxth.w	fp, fp
    y += yinc2;                 /* Change the y as appropriate */
 800e6c6:	fa0f f882 	sxth.w	r8, r2
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e6ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	ddc4      	ble.n	800e65a <BSP_LCD_FillPolygon+0x3de>
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e6d0:	9c10      	ldr	r4, [sp, #64]	; 0x40
  if (x2 >= x1)                 /* The x-values are increasing */
 800e6d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e6d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e6d8:	9d11      	ldr	r5, [sp, #68]	; 0x44
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e6da:	1aa3      	subs	r3, r4, r2
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e6dc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  if (x2 >= x1)                 /* The x-values are increasing */
 800e6de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  x = x1;                       /* Start x off at the first pixel */
 800e6e0:	b212      	sxth	r2, r2
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e6e2:	1ba8      	subs	r0, r5, r6
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	bfb8      	it	lt
 800e6e8:	425b      	neglt	r3, r3
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	bfb8      	it	lt
 800e6ee:	4240      	neglt	r0, r0
  if (x2 >= x1)                 /* The x-values are increasing */
 800e6f0:	42bc      	cmp	r4, r7
 800e6f2:	bf34      	ite	cc
 800e6f4:	460c      	movcc	r4, r1
 800e6f6:	2401      	movcs	r4, #1
 800e6f8:	9415      	str	r4, [sp, #84]	; 0x54
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e6fa:	b200      	sxth	r0, r0
  if (y2 >= y1)                 /* The y-values are increasing */
 800e6fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e6fe:	42a5      	cmp	r5, r4
 800e700:	bf28      	it	cs
 800e702:	2101      	movcs	r1, #1
 800e704:	9116      	str	r1, [sp, #88]	; 0x58
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e706:	b219      	sxth	r1, r3
  y = y1;                       /* Start y off at the first pixel */
 800e708:	b233      	sxth	r3, r6
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800e70a:	4281      	cmp	r1, r0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e70c:	9109      	str	r1, [sp, #36]	; 0x24
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800e70e:	f2c0 8115 	blt.w	800e93c <BSP_LCD_FillPolygon+0x6c0>
    num = deltax / 2;
 800e712:	2900      	cmp	r1, #0
 800e714:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800e716:	bfb8      	it	lt
 800e718:	3101      	addlt	r1, #1
 800e71a:	9410      	str	r4, [sp, #64]	; 0x40
 800e71c:	2400      	movs	r4, #0
 800e71e:	1049      	asrs	r1, r1, #1
 800e720:	9415      	str	r4, [sp, #84]	; 0x54
 800e722:	9106      	str	r1, [sp, #24]
 800e724:	9411      	str	r4, [sp, #68]	; 0x44
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e726:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e728:	2900      	cmp	r1, #0
 800e72a:	f2c0 808f 	blt.w	800e84c <BSP_LCD_FillPolygon+0x5d0>
 800e72e:	b280      	uxth	r0, r0
 800e730:	491c      	ldr	r1, [pc, #112]	; (800e7a4 <BSP_LCD_FillPolygon+0x528>)
 800e732:	461d      	mov	r5, r3
 800e734:	9014      	str	r0, [sp, #80]	; 0x50
 800e736:	2000      	movs	r0, #0
 800e738:	9008      	str	r0, [sp, #32]
 800e73a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800e73c:	eb01 0900 	add.w	r9, r1, r0
    BSP_LCD_DrawLine(x, y, x3, y3);
 800e740:	b292      	uxth	r2, r2
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e742:	9812      	ldr	r0, [sp, #72]	; 0x48
    BSP_LCD_DrawLine(x, y, x3, y3);
 800e744:	b2ab      	uxth	r3, r5
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e746:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e748:	1a84      	subs	r4, r0, r2
  if (x2 >= x1)                 /* The x-values are increasing */
 800e74a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e74e:	1aef      	subs	r7, r5, r3
    BSP_LCD_DrawLine(x, y, x3, y3);
 800e750:	920a      	str	r2, [sp, #40]	; 0x28
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e752:	2c00      	cmp	r4, #0
    BSP_LCD_DrawLine(x, y, x3, y3);
 800e754:	930b      	str	r3, [sp, #44]	; 0x2c
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e756:	bfb8      	it	lt
 800e758:	4264      	neglt	r4, r4
  if (x2 >= x1)                 /* The x-values are increasing */
 800e75a:	4290      	cmp	r0, r2
 800e75c:	bf34      	ite	cc
 800e75e:	4688      	movcc	r8, r1
 800e760:	f04f 0801 	movcs.w	r8, #1
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e764:	2f00      	cmp	r7, #0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800e766:	b224      	sxth	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e768:	bfb8      	it	lt
 800e76a:	427f      	neglt	r7, r7
  if (y2 >= y1)                 /* The y-values are increasing */
 800e76c:	429d      	cmp	r5, r3
 800e76e:	bf28      	it	cs
 800e770:	2101      	movcs	r1, #1
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800e772:	b23f      	sxth	r7, r7
  if (y2 >= y1)                 /* The y-values are increasing */
 800e774:	9102      	str	r1, [sp, #8]
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800e776:	42bc      	cmp	r4, r7
 800e778:	f2c0 80ac 	blt.w	800e8d4 <BSP_LCD_FillPolygon+0x658>
    num = deltax / 2;
 800e77c:	2c00      	cmp	r4, #0
 800e77e:	4620      	mov	r0, r4
 800e780:	46c4      	mov	ip, r8
 800e782:	f04f 0800 	mov.w	r8, #0
 800e786:	bfb8      	it	lt
 800e788:	1c60      	addlt	r0, r4, #1
 800e78a:	46c6      	mov	lr, r8
 800e78c:	1040      	asrs	r0, r0, #1
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e78e:	2c00      	cmp	r4, #0
 800e790:	db3a      	blt.n	800e808 <BSP_LCD_FillPolygon+0x58c>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800e792:	9907      	ldr	r1, [sp, #28]
 800e794:	b2bf      	uxth	r7, r7
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800e796:	2500      	movs	r5, #0
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800e798:	6809      	ldr	r1, [r1, #0]
 800e79a:	9703      	str	r7, [sp, #12]
 800e79c:	9104      	str	r1, [sp, #16]
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800e79e:	b289      	uxth	r1, r1
 800e7a0:	9105      	str	r1, [sp, #20]
 800e7a2:	e007      	b.n	800e7b4 <BSP_LCD_FillPolygon+0x538>
 800e7a4:	20013160 	.word	0x20013160
      num -= den;                             /* Calculate the new numerator value */
 800e7a8:	b208      	sxth	r0, r1
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e7aa:	b229      	sxth	r1, r5
 800e7ac:	42a1      	cmp	r1, r4
 800e7ae:	dc2b      	bgt.n	800e808 <BSP_LCD_FillPolygon+0x58c>
 800e7b0:	b292      	uxth	r2, r2
 800e7b2:	b29b      	uxth	r3, r3
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800e7b4:	f8d9 7048 	ldr.w	r7, [r9, #72]	; 0x48
 800e7b8:	f8d9 1060 	ldr.w	r1, [r9, #96]	; 0x60
 800e7bc:	2f02      	cmp	r7, #2
 800e7be:	f8d9 605c 	ldr.w	r6, [r9, #92]	; 0x5c
 800e7c2:	fb01 2103 	mla	r1, r1, r3, r2
 800e7c6:	d06e      	beq.n	800e8a6 <BSP_LCD_FillPolygon+0x62a>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800e7c8:	9f04      	ldr	r7, [sp, #16]
 800e7ca:	f846 7021 	str.w	r7, [r6, r1, lsl #2]
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800e7ce:	9903      	ldr	r1, [sp, #12]
    y += yinc2;                               /* Change the y as appropriate */
 800e7d0:	eb03 0a0e 	add.w	sl, r3, lr
      y += yinc1;                             /* Change the y as appropriate */
 800e7d4:	9e02      	ldr	r6, [sp, #8]
 800e7d6:	3501      	adds	r5, #1
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800e7d8:	4401      	add	r1, r0
      x += xinc1;                             /* Change the x as appropriate */
 800e7da:	eb02 0008 	add.w	r0, r2, r8
      y += yinc1;                             /* Change the y as appropriate */
 800e7de:	eb03 0b06 	add.w	fp, r3, r6
    x += xinc2;                               /* Change the x as appropriate */
 800e7e2:	eb02 060c 	add.w	r6, r2, ip
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800e7e6:	b289      	uxth	r1, r1
    x += xinc2;                               /* Change the x as appropriate */
 800e7e8:	eb0c 0200 	add.w	r2, ip, r0
    y += yinc2;                               /* Change the y as appropriate */
 800e7ec:	eb0e 030b 	add.w	r3, lr, fp
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800e7f0:	b208      	sxth	r0, r1
      num -= den;                             /* Calculate the new numerator value */
 800e7f2:	1b09      	subs	r1, r1, r4
    x += xinc2;                               /* Change the x as appropriate */
 800e7f4:	b212      	sxth	r2, r2
    if (num >= den)                           /* Check if numerator >= denominator */
 800e7f6:	42a0      	cmp	r0, r4
    y += yinc2;                               /* Change the y as appropriate */
 800e7f8:	b21b      	sxth	r3, r3
    if (num >= den)                           /* Check if numerator >= denominator */
 800e7fa:	dad5      	bge.n	800e7a8 <BSP_LCD_FillPolygon+0x52c>
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e7fc:	b229      	sxth	r1, r5
    x += xinc2;                               /* Change the x as appropriate */
 800e7fe:	b232      	sxth	r2, r6
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e800:	428c      	cmp	r4, r1
    y += yinc2;                               /* Change the y as appropriate */
 800e802:	fa0f f38a 	sxth.w	r3, sl
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e806:	dad3      	bge.n	800e7b0 <BSP_LCD_FillPolygon+0x534>
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800e808:	9b06      	ldr	r3, [sp, #24]
 800e80a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    if (num >= den)             /* Check if numerator >= denominator */
 800e80c:	9809      	ldr	r0, [sp, #36]	; 0x24
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800e80e:	4413      	add	r3, r2
 800e810:	b299      	uxth	r1, r3
 800e812:	b20b      	sxth	r3, r1
    if (num >= den)             /* Check if numerator >= denominator */
 800e814:	4283      	cmp	r3, r0
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800e816:	9306      	str	r3, [sp, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 800e818:	db49      	blt.n	800e8ae <BSP_LCD_FillPolygon+0x632>
      x += xinc1;               /* Change the x as appropriate */
 800e81a:	9c15      	ldr	r4, [sp, #84]	; 0x54
      num -= den;               /* Calculate the new numerator value */
 800e81c:	1a09      	subs	r1, r1, r0
      x += xinc1;               /* Change the x as appropriate */
 800e81e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e820:	9d08      	ldr	r5, [sp, #32]
 800e822:	4423      	add	r3, r4
      y += yinc1;               /* Change the y as appropriate */
 800e824:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800e826:	3501      	adds	r5, #1
      x += xinc1;               /* Change the x as appropriate */
 800e828:	461a      	mov	r2, r3
      y += yinc1;               /* Change the y as appropriate */
 800e82a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e82c:	9508      	str	r5, [sp, #32]
 800e82e:	4423      	add	r3, r4
      num -= den;               /* Calculate the new numerator value */
 800e830:	4604      	mov	r4, r0
    x += xinc2;                 /* Change the x as appropriate */
 800e832:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e834:	4402      	add	r2, r0
    y += yinc2;                 /* Change the y as appropriate */
 800e836:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e838:	4403      	add	r3, r0
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e83a:	b228      	sxth	r0, r5
    x += xinc2;                 /* Change the x as appropriate */
 800e83c:	b212      	sxth	r2, r2
    y += yinc2;                 /* Change the y as appropriate */
 800e83e:	b21b      	sxth	r3, r3
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e840:	4284      	cmp	r4, r0
    y += yinc2;                 /* Change the y as appropriate */
 800e842:	461d      	mov	r5, r3
      num -= den;               /* Calculate the new numerator value */
 800e844:	b20b      	sxth	r3, r1
 800e846:	9306      	str	r3, [sp, #24]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e848:	f6bf af7a 	bge.w	800e740 <BSP_LCD_FillPolygon+0x4c4>
 800e84c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  while(--PointCount)
 800e84e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e850:	3304      	adds	r3, #4
 800e852:	4293      	cmp	r3, r2
 800e854:	9319      	str	r3, [sp, #100]	; 0x64
 800e856:	f47f ad61 	bne.w	800e31c <BSP_LCD_FillPolygon+0xa0>
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 800e85a:	f8bd 5078 	ldrh.w	r5, [sp, #120]	; 0x78
 800e85e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800e860:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 800e864:	4629      	mov	r1, r5
 800e866:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 800e86a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800e86e:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800e870:	464b      	mov	r3, r9
 800e872:	4642      	mov	r2, r8
 800e874:	9601      	str	r6, [sp, #4]
 800e876:	4638      	mov	r0, r7
 800e878:	9400      	str	r4, [sp, #0]
 800e87a:	f7ff f9f9 	bl	800dc70 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 800e87e:	462a      	mov	r2, r5
 800e880:	464b      	mov	r3, r9
 800e882:	4641      	mov	r1, r8
 800e884:	4638      	mov	r0, r7
 800e886:	e9cd 6400 	strd	r6, r4, [sp]
 800e88a:	f7ff f9f1 	bl	800dc70 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 800e88e:	9400      	str	r4, [sp, #0]
 800e890:	4629      	mov	r1, r5
 800e892:	f8cd 9004 	str.w	r9, [sp, #4]
 800e896:	4633      	mov	r3, r6
 800e898:	463a      	mov	r2, r7
 800e89a:	4640      	mov	r0, r8
 800e89c:	f7ff f9e8 	bl	800dc70 <FillTriangle>
}
 800e8a0:	b023      	add	sp, #140	; 0x8c
 800e8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800e8a6:	9f05      	ldr	r7, [sp, #20]
 800e8a8:	f826 7011 	strh.w	r7, [r6, r1, lsl #1]
 800e8ac:	e78f      	b.n	800e7ce <BSP_LCD_FillPolygon+0x552>
    x += xinc2;                 /* Change the x as appropriate */
 800e8ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e8b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8b2:	9908      	ldr	r1, [sp, #32]
 800e8b4:	4403      	add	r3, r0
    y += yinc2;                 /* Change the y as appropriate */
 800e8b6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e8b8:	3101      	adds	r1, #1
    x += xinc2;                 /* Change the x as appropriate */
 800e8ba:	461a      	mov	r2, r3
    y += yinc2;                 /* Change the y as appropriate */
 800e8bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8be:	9108      	str	r1, [sp, #32]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e8c0:	b209      	sxth	r1, r1
    y += yinc2;                 /* Change the y as appropriate */
 800e8c2:	4403      	add	r3, r0
    x += xinc2;                 /* Change the x as appropriate */
 800e8c4:	b212      	sxth	r2, r2
    y += yinc2;                 /* Change the y as appropriate */
 800e8c6:	b21b      	sxth	r3, r3
 800e8c8:	461d      	mov	r5, r3
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8cc:	428b      	cmp	r3, r1
 800e8ce:	f6bf af37 	bge.w	800e740 <BSP_LCD_FillPolygon+0x4c4>
 800e8d2:	e7bb      	b.n	800e84c <BSP_LCD_FillPolygon+0x5d0>
    num = deltay / 2;
 800e8d4:	2f00      	cmp	r7, #0
 800e8d6:	4638      	mov	r0, r7
 800e8d8:	4621      	mov	r1, r4
 800e8da:	f04f 0500 	mov.w	r5, #0
 800e8de:	bfb8      	it	lt
 800e8e0:	1c78      	addlt	r0, r7, #1
 800e8e2:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e8e6:	463c      	mov	r4, r7
 800e8e8:	9502      	str	r5, [sp, #8]
 800e8ea:	f340 004f 	sbfx	r0, r0, #1, #16
 800e8ee:	460f      	mov	r7, r1
 800e8f0:	46ac      	mov	ip, r5
 800e8f2:	e74c      	b.n	800e78e <BSP_LCD_FillPolygon+0x512>
    x += xinc2;                 /* Change the x as appropriate */
 800e8f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e8f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    y += yinc2;                 /* Change the y as appropriate */
 800e8f8:	9815      	ldr	r0, [sp, #84]	; 0x54
    x += xinc2;                 /* Change the x as appropriate */
 800e8fa:	4413      	add	r3, r2
    y += yinc2;                 /* Change the y as appropriate */
 800e8fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8fe:	9908      	ldr	r1, [sp, #32]
 800e900:	4402      	add	r2, r0
    x += xinc2;                 /* Change the x as appropriate */
 800e902:	b21b      	sxth	r3, r3
 800e904:	3101      	adds	r1, #1
 800e906:	461d      	mov	r5, r3
    y += yinc2;                 /* Change the y as appropriate */
 800e908:	b213      	sxth	r3, r2
 800e90a:	9108      	str	r1, [sp, #32]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e90c:	b209      	sxth	r1, r1
    y += yinc2;                 /* Change the y as appropriate */
 800e90e:	461a      	mov	r2, r3
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800e910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e912:	4299      	cmp	r1, r3
 800e914:	f77f ad4f 	ble.w	800e3b6 <BSP_LCD_FillPolygon+0x13a>
 800e918:	e5dd      	b.n	800e4d6 <BSP_LCD_FillPolygon+0x25a>
    num = deltay / 2;
 800e91a:	2800      	cmp	r0, #0
 800e91c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e91e:	4604      	mov	r4, r0
 800e920:	f04f 0500 	mov.w	r5, #0
 800e924:	bfb8      	it	lt
 800e926:	1c44      	addlt	r4, r0, #1
 800e928:	9115      	str	r1, [sp, #84]	; 0x54
 800e92a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e92c:	9009      	str	r0, [sp, #36]	; 0x24
 800e92e:	f344 004f 	sbfx	r0, r4, #1, #16
 800e932:	9518      	str	r5, [sp, #96]	; 0x60
 800e934:	9006      	str	r0, [sp, #24]
 800e936:	4608      	mov	r0, r1
 800e938:	9514      	str	r5, [sp, #80]	; 0x50
 800e93a:	e52d      	b.n	800e398 <BSP_LCD_FillPolygon+0x11c>
 800e93c:	2800      	cmp	r0, #0
 800e93e:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e940:	4604      	mov	r4, r0
 800e942:	f04f 0500 	mov.w	r5, #0
 800e946:	bfb8      	it	lt
 800e948:	1c44      	addlt	r4, r0, #1
 800e94a:	9111      	str	r1, [sp, #68]	; 0x44
 800e94c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e94e:	9009      	str	r0, [sp, #36]	; 0x24
 800e950:	f344 004f 	sbfx	r0, r4, #1, #16
 800e954:	9516      	str	r5, [sp, #88]	; 0x58
 800e956:	9006      	str	r0, [sp, #24]
 800e958:	4608      	mov	r0, r1
 800e95a:	9510      	str	r5, [sp, #64]	; 0x40
 800e95c:	e6e3      	b.n	800e726 <BSP_LCD_FillPolygon+0x4aa>
 800e95e:	2a00      	cmp	r2, #0
 800e960:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e962:	4611      	mov	r1, r2
 800e964:	f04f 0000 	mov.w	r0, #0
 800e968:	bfb8      	it	lt
 800e96a:	1c51      	addlt	r1, r2, #1
 800e96c:	9315      	str	r3, [sp, #84]	; 0x54
 800e96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e970:	9209      	str	r2, [sp, #36]	; 0x24
 800e972:	f341 024f 	sbfx	r2, r1, #1, #16
 800e976:	9018      	str	r0, [sp, #96]	; 0x60
 800e978:	9206      	str	r2, [sp, #24]
 800e97a:	461a      	mov	r2, r3
 800e97c:	9014      	str	r0, [sp, #80]	; 0x50
 800e97e:	e5d5      	b.n	800e52c <BSP_LCD_FillPolygon+0x2b0>
 800e980:	4694      	mov	ip, r2
 800e982:	461f      	mov	r7, r3
  image_top= image_bottom = Points->Y;
 800e984:	4616      	mov	r6, r2
  image_left = image_right = Points->X;
 800e986:	469e      	mov	lr, r3
 800e988:	e49f      	b.n	800e2ca <BSP_LCD_FillPolygon+0x4e>
 800e98a:	bf00      	nop

0800e98c <BSP_LCD_DisplayOn>:
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800e98c:	4b09      	ldr	r3, [pc, #36]	; (800e9b4 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800e98e:	2201      	movs	r2, #1
 800e990:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e994:	4808      	ldr	r0, [pc, #32]	; (800e9b8 <BSP_LCD_DisplayOn+0x2c>)
{
 800e996:	b510      	push	{r4, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800e998:	681c      	ldr	r4, [r3, #0]
 800e99a:	69a3      	ldr	r3, [r4, #24]
 800e99c:	4313      	orrs	r3, r2
 800e99e:	61a3      	str	r3, [r4, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800e9a0:	f001 fc92 	bl	80102c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	2108      	movs	r1, #8
 800e9a8:	4804      	ldr	r0, [pc, #16]	; (800e9bc <BSP_LCD_DisplayOn+0x30>)
}
 800e9aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800e9ae:	f001 bc8b 	b.w	80102c8 <HAL_GPIO_WritePin>
 800e9b2:	bf00      	nop
 800e9b4:	20013160 	.word	0x20013160
 800e9b8:	40022000 	.word	0x40022000
 800e9bc:	40022800 	.word	0x40022800

0800e9c0 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 800e9c0:	4b4e      	ldr	r3, [pc, #312]	; (800eafc <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800e9c2:	f04f 0c10 	mov.w	ip, #16
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800e9c6:	484e      	ldr	r0, [pc, #312]	; (800eb00 <BSP_LCD_MspInit+0x140>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 800e9c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 800e9ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 800e9d2:	645a      	str	r2, [r3, #68]	; 0x44
{
 800e9d4:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 800e9d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800e9d8:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800e9da:	250e      	movs	r5, #14
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800e9dc:	2700      	movs	r7, #0
  __HAL_RCC_LTDC_CLK_ENABLE();
 800e9de:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800e9e2:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800e9e4:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800e9e8:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800eb10 <BSP_LCD_MspInit+0x150>
  __HAL_RCC_LTDC_CLK_ENABLE();
 800e9ec:	9200      	str	r2, [sp, #0]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800e9ee:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_LTDC_CLK_ENABLE();
 800e9f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800e9f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e9fa:	631a      	str	r2, [r3, #48]	; 0x30
 800e9fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9fe:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800ea02:	9201      	str	r2, [sp, #4]
 800ea04:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ea06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea08:	ea42 020c 	orr.w	r2, r2, ip
 800ea0c:	631a      	str	r2, [r3, #48]	; 0x30
 800ea0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea10:	ea02 020c 	and.w	r2, r2, ip
 800ea14:	9202      	str	r2, [sp, #8]
 800ea16:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800ea18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea1e:	631a      	str	r2, [r3, #48]	; 0x30
 800ea20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea22:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800ea26:	9203      	str	r2, [sp, #12]
 800ea28:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800ea2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ea30:	631a      	str	r2, [r3, #48]	; 0x30
 800ea32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea34:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800ea38:	9204      	str	r2, [sp, #16]
 800ea3a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800ea3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea42:	631a      	str	r2, [r3, #48]	; 0x30
 800ea44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea46:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800ea4a:	9205      	str	r2, [sp, #20]
 800ea4c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800ea4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ea54:	631a      	str	r2, [r3, #48]	; 0x30
 800ea56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea58:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800ea5c:	9206      	str	r2, [sp, #24]
 800ea5e:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 800ea60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ea66:	631a      	str	r2, [r3, #48]	; 0x30
 800ea68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea6a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800ea6e:	9207      	str	r2, [sp, #28]
 800ea70:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800ea72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ea78:	631a      	str	r2, [r3, #48]	; 0x30
 800ea7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800ea7c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800ea80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800ea84:	970b      	str	r7, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800ea86:	940a      	str	r4, [sp, #40]	; 0x28
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800ea88:	9308      	str	r3, [sp, #32]
 800ea8a:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800ea8c:	940c      	str	r4, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800ea8e:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800ea90:	f001 fa32 	bl	800fef8 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800ea94:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800ea96:	a909      	add	r1, sp, #36	; 0x24
 800ea98:	481a      	ldr	r0, [pc, #104]	; (800eb04 <BSP_LCD_MspInit+0x144>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800ea9a:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800ea9c:	4f1a      	ldr	r7, [pc, #104]	; (800eb08 <BSP_LCD_MspInit+0x148>)
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800ea9e:	e9cd 6409 	strd	r6, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800eaa2:	f001 fa29 	bl	800fef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800eaa6:	f44f 4366 	mov.w	r3, #58880	; 0xe600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800eaaa:	a909      	add	r1, sp, #36	; 0x24
 800eaac:	4648      	mov	r0, r9
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800eaae:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800eab0:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800eab2:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800eab4:	f001 fa20 	bl	800fef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800eab8:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800eabc:	a909      	add	r1, sp, #36	; 0x24
 800eabe:	4813      	ldr	r0, [pc, #76]	; (800eb0c <BSP_LCD_MspInit+0x14c>)
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800eac0:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800eac2:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800eac4:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800eac6:	f001 fa17 	bl	800fef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800eaca:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800eacc:	a909      	add	r1, sp, #36	; 0x24
 800eace:	4638      	mov	r0, r7
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800ead0:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800ead2:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800ead4:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800ead6:	f001 fa0f 	bl	800fef8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800eada:	4648      	mov	r0, r9
 800eadc:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800eade:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800eae2:	f001 fa09 	bl	800fef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800eae6:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800eae8:	a909      	add	r1, sp, #36	; 0x24
 800eaea:	4638      	mov	r0, r7
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800eaec:	e9cd 3809 	strd	r3, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800eaf0:	f001 fa02 	bl	800fef8 <HAL_GPIO_Init>
}
 800eaf4:	b00f      	add	sp, #60	; 0x3c
 800eaf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eafa:	bf00      	nop
 800eafc:	40023800 	.word	0x40023800
 800eb00:	40021000 	.word	0x40021000
 800eb04:	40021800 	.word	0x40021800
 800eb08:	40022800 	.word	0x40022800
 800eb0c:	40022400 	.word	0x40022400
 800eb10:	40022000 	.word	0x40022000

0800eb14 <BSP_LCD_ClockConfig>:
{
 800eb14:	b430      	push	{r4, r5}
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800eb16:	4b07      	ldr	r3, [pc, #28]	; (800eb34 <BSP_LCD_ClockConfig+0x20>)
 800eb18:	2508      	movs	r5, #8
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800eb1a:	24c0      	movs	r4, #192	; 0xc0
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800eb1c:	2105      	movs	r1, #5
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800eb1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800eb22:	601d      	str	r5, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800eb24:	615c      	str	r4, [r3, #20]
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800eb26:	4618      	mov	r0, r3
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800eb28:	61d9      	str	r1, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800eb2a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800eb2c:	bc30      	pop	{r4, r5}
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800eb2e:	f003 bb27 	b.w	8012180 <HAL_RCCEx_PeriphCLKConfig>
 800eb32:	bf00      	nop
 800eb34:	200060d8 	.word	0x200060d8

0800eb38 <BSP_LCD_Init>:
{    
 800eb38:	b538      	push	{r3, r4, r5, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800eb3a:	2209      	movs	r2, #9
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800eb3c:	4c25      	ldr	r4, [pc, #148]	; (800ebd4 <BSP_LCD_Init+0x9c>)
 800eb3e:	2528      	movs	r5, #40	; 0x28
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800eb40:	2335      	movs	r3, #53	; 0x35
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800eb42:	200b      	movs	r0, #11
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800eb44:	f240 111b 	movw	r1, #283	; 0x11b
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800eb48:	6165      	str	r5, [r4, #20]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800eb4a:	f240 2515 	movw	r5, #533	; 0x215
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800eb4e:	61a2      	str	r2, [r4, #24]
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800eb50:	f240 121d 	movw	r2, #285	; 0x11d
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800eb54:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800eb56:	f240 2335 	movw	r3, #565	; 0x235
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800eb5a:	6220      	str	r0, [r4, #32]
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800eb5c:	4620      	mov	r0, r4
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800eb5e:	62a1      	str	r1, [r4, #40]	; 0x28
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800eb60:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800eb62:	6265      	str	r5, [r4, #36]	; 0x24
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800eb64:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800eb68:	e9c4 320b 	strd	r3, r2, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800eb6c:	f7ff ffd2 	bl	800eb14 <BSP_LCD_ClockConfig>
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800eb70:	2300      	movs	r3, #0
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800eb72:	f44f 7188 	mov.w	r1, #272	; 0x110
  hLtdcHandler.Instance = LTDC;
 800eb76:	4a18      	ldr	r2, [pc, #96]	; (800ebd8 <BSP_LCD_Init+0xa0>)
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800eb78:	4620      	mov	r0, r4
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800eb7a:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Instance = LTDC;
 800eb7c:	6022      	str	r2, [r4, #0]
  hLtdcHandler.Init.Backcolor.Green = 0;
 800eb7e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800eb82:	e9c4 5118 	strd	r5, r1, [r4, #96]	; 0x60
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800eb86:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800eb8a:	e9c4 3303 	strd	r3, r3, [r4, #12]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800eb8e:	f002 ff39 	bl	8011a04 <HAL_LTDC_GetState>
 800eb92:	b918      	cbnz	r0, 800eb9c <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800eb94:	4601      	mov	r1, r0
 800eb96:	4620      	mov	r0, r4
 800eb98:	f7ff ff12 	bl	800e9c0 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 800eb9c:	480d      	ldr	r0, [pc, #52]	; (800ebd4 <BSP_LCD_Init+0x9c>)
 800eb9e:	f002 fc85 	bl	80114ac <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800eba2:	2201      	movs	r2, #1
 800eba4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800eba8:	480c      	ldr	r0, [pc, #48]	; (800ebdc <BSP_LCD_Init+0xa4>)
 800ebaa:	f001 fb8d 	bl	80102c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800ebae:	2201      	movs	r2, #1
 800ebb0:	2108      	movs	r1, #8
 800ebb2:	480b      	ldr	r0, [pc, #44]	; (800ebe0 <BSP_LCD_Init+0xa8>)
 800ebb4:	f001 fb88 	bl	80102c8 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 800ebb8:	f000 f8d4 	bl	800ed64 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 800ebbc:	4b09      	ldr	r3, [pc, #36]	; (800ebe4 <BSP_LCD_Init+0xac>)
 800ebbe:	4a0a      	ldr	r2, [pc, #40]	; (800ebe8 <BSP_LCD_Init+0xb0>)
}
 800ebc0:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4909      	ldr	r1, [pc, #36]	; (800ebec <BSP_LCD_Init+0xb4>)
 800ebc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ebca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ebce:	6099      	str	r1, [r3, #8]
}
 800ebd0:	bd38      	pop	{r3, r4, r5, pc}
 800ebd2:	bf00      	nop
 800ebd4:	20013160 	.word	0x20013160
 800ebd8:	40016800 	.word	0x40016800
 800ebdc:	40022000 	.word	0x40022000
 800ebe0:	40022800 	.word	0x40022800
 800ebe4:	2000607c 	.word	0x2000607c
 800ebe8:	20006080 	.word	0x20006080
 800ebec:	2000008c 	.word	0x2000008c

0800ebf0 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ebf0:	4b53      	ldr	r3, [pc, #332]	; (800ed40 <BSP_SDRAM_MspInit+0x150>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800ebf2:	2102      	movs	r1, #2
  __HAL_RCC_FMC_CLK_ENABLE();
 800ebf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebf6:	f042 0201 	orr.w	r2, r2, #1
{  
 800ebfa:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 800ebfc:	639a      	str	r2, [r3, #56]	; 0x38
{  
 800ebfe:	4606      	mov	r6, r0
  __HAL_RCC_FMC_CLK_ENABLE();
 800ec00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800ec02:	2001      	movs	r0, #1
{  
 800ec04:	b08e      	sub	sp, #56	; 0x38
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800ec06:	2508      	movs	r5, #8
  __HAL_RCC_FMC_CLK_ENABLE();
 800ec08:	4002      	ands	r2, r0
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800ec0a:	ac0e      	add	r4, sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 800ec0c:	9201      	str	r2, [sp, #4]
 800ec0e:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 800ec10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec12:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800ec16:	631a      	str	r2, [r3, #48]	; 0x30
 800ec18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec1a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800ec1e:	9202      	str	r2, [sp, #8]
 800ec20:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ec22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec24:	f042 0204 	orr.w	r2, r2, #4
 800ec28:	631a      	str	r2, [r3, #48]	; 0x30
 800ec2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec2c:	f002 0204 	and.w	r2, r2, #4
 800ec30:	9203      	str	r2, [sp, #12]
 800ec32:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ec34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec36:	432a      	orrs	r2, r5
 800ec38:	631a      	str	r2, [r3, #48]	; 0x30
 800ec3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec3c:	402a      	ands	r2, r5
 800ec3e:	9204      	str	r2, [sp, #16]
 800ec40:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ec42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec44:	f042 0210 	orr.w	r2, r2, #16
 800ec48:	631a      	str	r2, [r3, #48]	; 0x30
 800ec4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec4c:	f002 0210 	and.w	r2, r2, #16
 800ec50:	9205      	str	r2, [sp, #20]
 800ec52:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800ec54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec56:	f042 0220 	orr.w	r2, r2, #32
 800ec5a:	631a      	str	r2, [r3, #48]	; 0x30
 800ec5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec5e:	f002 0220 	and.w	r2, r2, #32
 800ec62:	9206      	str	r2, [sp, #24]
 800ec64:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800ec66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec6c:	631a      	str	r2, [r3, #48]	; 0x30
 800ec6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec70:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800ec74:	9207      	str	r2, [sp, #28]
 800ec76:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ec78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ec7e:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800ec80:	220c      	movs	r2, #12
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ec82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800ec84:	f844 5d14 	str.w	r5, [r4, #-20]!
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800ec88:	2500      	movs	r5, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ec8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800ec8e:	910a      	str	r1, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800ec90:	910c      	str	r1, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800ec92:	4621      	mov	r1, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ec94:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800ec96:	900b      	str	r0, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800ec98:	482a      	ldr	r0, [pc, #168]	; (800ed44 <BSP_SDRAM_MspInit+0x154>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800ec9a:	920d      	str	r2, [sp, #52]	; 0x34
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ec9c:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800ec9e:	f001 f92b 	bl	800fef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800eca2:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800eca6:	4621      	mov	r1, r4
 800eca8:	4827      	ldr	r0, [pc, #156]	; (800ed48 <BSP_SDRAM_MspInit+0x158>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800ecaa:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800ecac:	f001 f924 	bl	800fef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800ecb0:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800ecb4:	4621      	mov	r1, r4
 800ecb6:	4825      	ldr	r0, [pc, #148]	; (800ed4c <BSP_SDRAM_MspInit+0x15c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800ecb8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800ecba:	f001 f91d 	bl	800fef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800ecbe:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800ecc2:	4621      	mov	r1, r4
 800ecc4:	4822      	ldr	r0, [pc, #136]	; (800ed50 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800ecc6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800ecc8:	f001 f916 	bl	800fef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800eccc:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800ecd0:	4621      	mov	r1, r4
 800ecd2:	4820      	ldr	r0, [pc, #128]	; (800ed54 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800ecd4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800ecd6:	f001 f90f 	bl	800fef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800ecda:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800ecdc:	4621      	mov	r1, r4
 800ecde:	481e      	ldr	r0, [pc, #120]	; (800ed58 <BSP_SDRAM_MspInit+0x168>)
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800ece0:	4c1e      	ldr	r4, [pc, #120]	; (800ed5c <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800ece2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800ece4:	f001 f908 	bl	800fef8 <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800ece8:	f44f 7300 	mov.w	r3, #512	; 0x200
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800ecec:	2180      	movs	r1, #128	; 0x80
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800ecee:	f44f 6280 	mov.w	r2, #1024	; 0x400
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ecf2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800ecf6:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800ecf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800ecfc:	60a1      	str	r1, [r4, #8]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800ecfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800ed02:	6122      	str	r2, [r4, #16]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800ed04:	2203      	movs	r2, #3
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800ed06:	6223      	str	r3, [r4, #32]
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800ed08:	4b15      	ldr	r3, [pc, #84]	; (800ed60 <BSP_SDRAM_MspInit+0x170>)
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800ed0a:	6325      	str	r5, [r4, #48]	; 0x30
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ed0c:	6160      	str	r0, [r4, #20]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800ed0e:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800ed10:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800ed12:	61a1      	str	r1, [r4, #24]
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800ed14:	62a2      	str	r2, [r4, #40]	; 0x28
  dma_handle.Init.Mode                = DMA_NORMAL;
 800ed16:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800ed18:	6265      	str	r5, [r4, #36]	; 0x24
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800ed1a:	62e5      	str	r5, [r4, #44]	; 0x2c
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800ed1c:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800ed1e:	e9c4 3500 	strd	r3, r5, [r4]
  HAL_DMA_DeInit(&dma_handle);
 800ed22:	f000 fd43 	bl	800f7ac <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800ed26:	4620      	mov	r0, r4
 800ed28:	f000 fca4 	bl	800f674 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800ed2c:	462a      	mov	r2, r5
 800ed2e:	210f      	movs	r1, #15
 800ed30:	2038      	movs	r0, #56	; 0x38
 800ed32:	f000 fb73 	bl	800f41c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800ed36:	2038      	movs	r0, #56	; 0x38
 800ed38:	f000 fba6 	bl	800f488 <HAL_NVIC_EnableIRQ>
}
 800ed3c:	b00e      	add	sp, #56	; 0x38
 800ed3e:	bd70      	pop	{r4, r5, r6, pc}
 800ed40:	40023800 	.word	0x40023800
 800ed44:	40020800 	.word	0x40020800
 800ed48:	40020c00 	.word	0x40020c00
 800ed4c:	40021000 	.word	0x40021000
 800ed50:	40021400 	.word	0x40021400
 800ed54:	40021800 	.word	0x40021800
 800ed58:	40021c00 	.word	0x40021c00
 800ed5c:	20006188 	.word	0x20006188
 800ed60:	40026410 	.word	0x40026410

0800ed64 <BSP_SDRAM_Init>:
{ 
 800ed64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800ed68:	483d      	ldr	r0, [pc, #244]	; (800ee60 <BSP_SDRAM_Init+0xfc>)
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800ed6a:	2600      	movs	r6, #0
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800ed6c:	4d3d      	ldr	r5, [pc, #244]	; (800ee64 <BSP_SDRAM_Init+0x100>)
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800ed6e:	2140      	movs	r1, #64	; 0x40
  Timing.LoadToActiveDelay    = 2;
 800ed70:	4c3d      	ldr	r4, [pc, #244]	; (800ee68 <BSP_SDRAM_Init+0x104>)
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800ed72:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800ed76:	f04f 0810 	mov.w	r8, #16
  Timing.LoadToActiveDelay    = 2;
 800ed7a:	f04f 0902 	mov.w	r9, #2
  Timing.ExitSelfRefreshDelay = 7;
 800ed7e:	2307      	movs	r3, #7
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800ed80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  Timing.SelfRefreshTime      = 4;
 800ed84:	f04f 0a04 	mov.w	sl, #4
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800ed88:	f44f 7780 	mov.w	r7, #256	; 0x100
{ 
 800ed8c:	b083      	sub	sp, #12
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800ed8e:	6028      	str	r0, [r5, #0]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800ed90:	6169      	str	r1, [r5, #20]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800ed92:	4628      	mov	r0, r5
 800ed94:	4631      	mov	r1, r6
  Timing.ExitSelfRefreshDelay = 7;
 800ed96:	6063      	str	r3, [r4, #4]
  Timing.RowCycleDelay        = 7;
 800ed98:	60e3      	str	r3, [r4, #12]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800ed9a:	61af      	str	r7, [r5, #24]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800ed9c:	2701      	movs	r7, #1
  Timing.SelfRefreshTime      = 4;
 800ed9e:	f8c4 a008 	str.w	sl, [r4, #8]
  Timing.LoadToActiveDelay    = 2;
 800eda2:	f8c4 9000 	str.w	r9, [r4]
  Timing.RCDDelay             = 2;
 800eda6:	f8c4 9018 	str.w	r9, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800edaa:	61ee      	str	r6, [r5, #28]
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800edac:	62ae      	str	r6, [r5, #40]	; 0x28
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800edae:	f8c5 a00c 	str.w	sl, [r5, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800edb2:	f8c5 8010 	str.w	r8, [r5, #16]
 800edb6:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800ee70 <BSP_SDRAM_Init+0x10c>
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800edba:	e9c5 c208 	strd	ip, r2, [r5, #32]
  Timing.RPDelay              = 2;
 800edbe:	e9c4 9904 	strd	r9, r9, [r4, #16]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800edc2:	e9c5 6601 	strd	r6, r6, [r5, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800edc6:	f7ff ff13 	bl	800ebf0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800edca:	4621      	mov	r1, r4
 800edcc:	4628      	mov	r0, r5
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800edce:	4c27      	ldr	r4, [pc, #156]	; (800ee6c <BSP_SDRAM_Init+0x108>)
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800edd0:	f004 ffb8 	bl	8013d44 <HAL_SDRAM_Init>
 800edd4:	1b83      	subs	r3, r0, r6
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800edd6:	4621      	mov	r1, r4
 800edd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800eddc:	bf18      	it	ne
 800edde:	2301      	movne	r3, #1
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800ede0:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 800ede2:	9601      	str	r6, [sp, #4]
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800ede4:	f88b 3000 	strb.w	r3, [fp]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800ede8:	f8c4 8004 	str.w	r8, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 800edec:	60e6      	str	r6, [r4, #12]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800edee:	6027      	str	r7, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 800edf0:	60a7      	str	r7, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800edf2:	f004 ffc9 	bl	8013d88 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 800edf6:	4638      	mov	r0, r7
 800edf8:	f000 f980 	bl	800f0fc <HAL_Delay>
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800edfc:	4621      	mov	r1, r4
 800edfe:	4628      	mov	r0, r5
 800ee00:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800ee04:	e9c4 9800 	strd	r9, r8, [r4]
  Command.ModeRegisterDefinition = 0;
 800ee08:	e9c4 7602 	strd	r7, r6, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800ee0c:	f004 ffbc 	bl	8013d88 <HAL_SDRAM_SendCommand>
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800ee10:	f04f 0c03 	mov.w	ip, #3
  Command.AutoRefreshNumber      = 8;
 800ee14:	2308      	movs	r3, #8
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800ee16:	4621      	mov	r1, r4
 800ee18:	4628      	mov	r0, r5
 800ee1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800ee1e:	f8c4 c000 	str.w	ip, [r4]
  Command.AutoRefreshNumber      = 8;
 800ee22:	60a3      	str	r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800ee24:	f8c4 8004 	str.w	r8, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 800ee28:	60e6      	str	r6, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800ee2a:	f004 ffad 	bl	8013d88 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800ee2e:	f44f 7308 	mov.w	r3, #544	; 0x220
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800ee32:	4621      	mov	r1, r4
 800ee34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee38:	4628      	mov	r0, r5
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800ee3a:	9301      	str	r3, [sp, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 800ee3c:	9b01      	ldr	r3, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800ee3e:	e9c4 a800 	strd	sl, r8, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 800ee42:	e9c4 7302 	strd	r7, r3, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800ee46:	f004 ff9f 	bl	8013d88 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f240 6103 	movw	r1, #1539	; 0x603
 800ee50:	f004 ffb4 	bl	8013dbc <HAL_SDRAM_ProgramRefreshRate>
}
 800ee54:	f89b 0000 	ldrb.w	r0, [fp]
 800ee58:	b003      	add	sp, #12
 800ee5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee5e:	bf00      	nop
 800ee60:	a0000140 	.word	0xa0000140
 800ee64:	20013208 	.word	0x20013208
 800ee68:	2000616c 	.word	0x2000616c
 800ee6c:	2000615c 	.word	0x2000615c
 800ee70:	20000094 	.word	0x20000094

0800ee74 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800ee74:	b570      	push	{r4, r5, r6, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 800ee76:	4b0e      	ldr	r3, [pc, #56]	; (800eeb0 <BSP_TS_Init+0x3c>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800ee78:	4c0e      	ldr	r4, [pc, #56]	; (800eeb4 <BSP_TS_Init+0x40>)
  tsYBoundary = ts_SizeY;
 800ee7a:	4a0f      	ldr	r2, [pc, #60]	; (800eeb8 <BSP_TS_Init+0x44>)
  tsXBoundary = ts_SizeX;
 800ee7c:	8018      	strh	r0, [r3, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800ee7e:	2070      	movs	r0, #112	; 0x70
 800ee80:	6823      	ldr	r3, [r4, #0]
  tsYBoundary = ts_SizeY;
 800ee82:	8011      	strh	r1, [r2, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800ee84:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800ee86:	6863      	ldr	r3, [r4, #4]
 800ee88:	2070      	movs	r0, #112	; 0x70
 800ee8a:	4798      	blx	r3
 800ee8c:	2851      	cmp	r0, #81	; 0x51
 800ee8e:	d10c      	bne.n	800eeaa <BSP_TS_Init+0x36>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
    I2cAddress = TS_I2C_ADDRESS;
 800ee90:	2370      	movs	r3, #112	; 0x70
 800ee92:	4e0a      	ldr	r6, [pc, #40]	; (800eebc <BSP_TS_Init+0x48>)
    tsOrientation = TS_SWAP_XY;
 800ee94:	2108      	movs	r1, #8
 800ee96:	4a0a      	ldr	r2, [pc, #40]	; (800eec0 <BSP_TS_Init+0x4c>)
    tsDriver = &ft5336_ts_drv;
 800ee98:	4d0a      	ldr	r5, [pc, #40]	; (800eec4 <BSP_TS_Init+0x50>)

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800ee9a:	4618      	mov	r0, r3
    I2cAddress = TS_I2C_ADDRESS;
 800ee9c:	7033      	strb	r3, [r6, #0]
    tsDriver->Start(I2cAddress);
 800ee9e:	68e3      	ldr	r3, [r4, #12]
    tsDriver = &ft5336_ts_drv;
 800eea0:	602c      	str	r4, [r5, #0]
    tsOrientation = TS_SWAP_XY;
 800eea2:	7011      	strb	r1, [r2, #0]
    tsDriver->Start(I2cAddress);
 800eea4:	4798      	blx	r3
  uint8_t status = TS_OK;
 800eea6:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 800eea8:	bd70      	pop	{r4, r5, r6, pc}
    status = TS_DEVICE_NOT_FOUND;
 800eeaa:	2003      	movs	r0, #3
}
 800eeac:	bd70      	pop	{r4, r5, r6, pc}
 800eeae:	bf00      	nop
 800eeb0:	2000621a 	.word	0x2000621a
 800eeb4:	20000030 	.word	0x20000030
 800eeb8:	2000621c 	.word	0x2000621c
 800eebc:	200061e8 	.word	0x200061e8
 800eec0:	20006218 	.word	0x20006218
 800eec4:	20006214 	.word	0x20006214

0800eec8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800eec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800eecc:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 800f0b8 <BSP_TS_GetState+0x1f0>
{
 800eed0:	b095      	sub	sp, #84	; 0x54
  uint32_t weight = 0;
 800eed2:	2400      	movs	r4, #0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800eed4:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 800f0bc <BSP_TS_GetState+0x1f4>
 800eed8:	f8da 3000 	ldr.w	r3, [sl]
{
 800eedc:	4605      	mov	r5, r0
 800eede:	9003      	str	r0, [sp, #12]
  uint32_t weight = 0;
 800eee0:	9404      	str	r4, [sp, #16]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800eee2:	691b      	ldr	r3, [r3, #16]
 800eee4:	f898 0000 	ldrb.w	r0, [r8]
  uint32_t event = 0;
 800eee8:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800eeec:	4798      	blx	r3
 800eeee:	7028      	strb	r0, [r5, #0]
  
  if(TS_State->touchDetected)
 800eef0:	2800      	cmp	r0, #0
 800eef2:	f000 8091 	beq.w	800f018 <BSP_TS_GetState+0x150>
 800eef6:	462b      	mov	r3, r5
 800eef8:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800eefc:	ad0e      	add	r5, sp, #56	; 0x38
 800eefe:	f103 0616 	add.w	r6, r3, #22
 800ef02:	1c9f      	adds	r7, r3, #2
  {
    for(index=0; index < TS_State->touchDetected; index++)
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800ef04:	f8da 3000 	ldr.w	r3, [sl]
 800ef08:	eb09 0244 	add.w	r2, r9, r4, lsl #1
 800ef0c:	4629      	mov	r1, r5
 800ef0e:	f898 0000 	ldrb.w	r0, [r8]
 800ef12:	695b      	ldr	r3, [r3, #20]
 800ef14:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800ef16:	4b63      	ldr	r3, [pc, #396]	; (800f0a4 <BSP_TS_GetState+0x1dc>)
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	f000 8092 	beq.w	800f044 <BSP_TS_GetState+0x17c>
      {
        x[index] = brute_x[index];
        y[index] = brute_y[index];
      }

      if(tsOrientation & TS_SWAP_X)
 800ef20:	0799      	lsls	r1, r3, #30
 800ef22:	d505      	bpl.n	800ef30 <BSP_TS_GetState+0x68>
      {
        x[index] = 4096 - brute_x[index];
 800ef24:	882a      	ldrh	r2, [r5, #0]
 800ef26:	a908      	add	r1, sp, #32
 800ef28:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 800ef2c:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
      }

      if(tsOrientation & TS_SWAP_Y)
 800ef30:	075a      	lsls	r2, r3, #29
 800ef32:	d506      	bpl.n	800ef42 <BSP_TS_GetState+0x7a>
      {
        y[index] = 4096 - brute_y[index];
 800ef34:	f839 2014 	ldrh.w	r2, [r9, r4, lsl #1]
 800ef38:	a90b      	add	r1, sp, #44	; 0x2c
 800ef3a:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 800ef3e:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
      }

      if(tsOrientation & TS_SWAP_XY)
 800ef42:	071b      	lsls	r3, r3, #28
 800ef44:	d474      	bmi.n	800f030 <BSP_TS_GetState+0x168>
 800ef46:	ab08      	add	r3, sp, #32
 800ef48:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800ef4c:	ab0b      	add	r3, sp, #44	; 0x2c
 800ef4e:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
      {
        y[index] = brute_x[index];
        x[index] = brute_y[index];
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800ef52:	4b55      	ldr	r3, [pc, #340]	; (800f0a8 <BSP_TS_GetState+0x1e0>)
 800ef54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800ef58:	4854      	ldr	r0, [pc, #336]	; (800f0ac <BSP_TS_GetState+0x1e4>)
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800ef5a:	f853 e024 	ldr.w	lr, [r3, r4, lsl #2]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800ef5e:	f850 c00b 	ldr.w	ip, [r0, fp]
 800ef62:	fa1f f38e 	uxth.w	r3, lr
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800ef66:	4572      	cmp	r2, lr
 800ef68:	fa1f f08c 	uxth.w	r0, ip
 800ef6c:	bf8c      	ite	hi
 800ef6e:	1ad3      	subhi	r3, r2, r3
 800ef70:	1a9b      	subls	r3, r3, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800ef72:	4561      	cmp	r1, ip
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800ef74:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800ef76:	bf8c      	ite	hi
 800ef78:	1a08      	subhi	r0, r1, r0
 800ef7a:	1a40      	subls	r0, r0, r1
 800ef7c:	b280      	uxth	r0, r0

      if ((x_diff + y_diff) > 5)
 800ef7e:	4403      	add	r3, r0
 800ef80:	2b05      	cmp	r3, #5
 800ef82:	dd07      	ble.n	800ef94 <BSP_TS_GetState+0xcc>
      {
        _x[index] = x[index];
 800ef84:	4b48      	ldr	r3, [pc, #288]	; (800f0a8 <BSP_TS_GetState+0x1e0>)
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800ef86:	468c      	mov	ip, r1
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800ef88:	4696      	mov	lr, r2
        _x[index] = x[index];
 800ef8a:	f843 200b 	str.w	r2, [r3, fp]
        _y[index] = y[index];
 800ef8e:	4b47      	ldr	r3, [pc, #284]	; (800f0ac <BSP_TS_GetState+0x1e4>)
 800ef90:	f843 100b 	str.w	r1, [r3, fp]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800ef94:	f898 0000 	ldrb.w	r0, [r8]
 800ef98:	2870      	cmp	r0, #112	; 0x70
 800ef9a:	d00b      	beq.n	800efb4 <BSP_TS_GetState+0xec>
        TS_State->touchY[index] = y[index];
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800ef9c:	4b44      	ldr	r3, [pc, #272]	; (800f0b0 <BSP_TS_GetState+0x1e8>)
 800ef9e:	881a      	ldrh	r2, [r3, #0]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800efa0:	4b44      	ldr	r3, [pc, #272]	; (800f0b4 <BSP_TS_GetState+0x1ec>)
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800efa2:	fb0e f202 	mul.w	r2, lr, r2
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800efa6:	8819      	ldrh	r1, [r3, #0]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800efa8:	f3c2 320f 	ubfx	r2, r2, #12, #16
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800efac:	fb0c f101 	mul.w	r1, ip, r1
 800efb0:	f3c1 310f 	ubfx	r1, r1, #12, #16
 800efb4:	8179      	strh	r1, [r7, #10]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800efb6:	ab05      	add	r3, sp, #20
 800efb8:	f827 2b02 	strh.w	r2, [r7], #2
 800efbc:	aa06      	add	r2, sp, #24
 800efbe:	4621      	mov	r1, r4
 800efc0:	9200      	str	r2, [sp, #0]
 800efc2:	aa04      	add	r2, sp, #16
 800efc4:	f7fd fc94 	bl	800c8f0 <ft5336_TS_GetTouchInfo>
      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
      TS_State->touchArea[index]   = area;

      /* Remap touch event */
      switch(event)
 800efc8:	9b06      	ldr	r3, [sp, #24]
      TS_State->touchArea[index]   = area;
 800efca:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
      TS_State->touchWeight[index] = weight;
 800efce:	f806 1b01 	strb.w	r1, [r6], #1
      TS_State->touchArea[index]   = area;
 800efd2:	7272      	strb	r2, [r6, #9]
      switch(event)
 800efd4:	2b03      	cmp	r3, #3
 800efd6:	d806      	bhi.n	800efe6 <BSP_TS_GetState+0x11e>
 800efd8:	e8df f003 	tbb	[pc, r3]
 800efdc:	02272124 	.word	0x02272124
          break;
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
          break;
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800efe0:	f04f 0300 	mov.w	r3, #0
 800efe4:	7133      	strb	r3, [r6, #4]
    for(index=0; index < TS_State->touchDetected; index++)
 800efe6:	9b03      	ldr	r3, [sp, #12]
 800efe8:	3401      	adds	r4, #1
 800efea:	3502      	adds	r5, #2
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	42a3      	cmp	r3, r4
 800eff0:	d888      	bhi.n	800ef04 <BSP_TS_GetState+0x3c>
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
  uint32_t gestureId = 0;
 800eff2:	a914      	add	r1, sp, #80	; 0x50
 800eff4:	2400      	movs	r4, #0
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800eff6:	f898 0000 	ldrb.w	r0, [r8]
  uint32_t gestureId = 0;
 800effa:	f841 4d34 	str.w	r4, [r1, #-52]!
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800effe:	f7fd fc65 	bl	800c8cc <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800f002:	9807      	ldr	r0, [sp, #28]
 800f004:	2818      	cmp	r0, #24
 800f006:	d039      	beq.n	800f07c <BSP_TS_GetState+0x1b4>
 800f008:	d826      	bhi.n	800f058 <BSP_TS_GetState+0x190>
 800f00a:	2810      	cmp	r0, #16
 800f00c:	d02c      	beq.n	800f068 <BSP_TS_GetState+0x1a0>
 800f00e:	2814      	cmp	r0, #20
 800f010:	d039      	beq.n	800f086 <BSP_TS_GetState+0x1be>
 800f012:	bb38      	cbnz	r0, 800f064 <BSP_TS_GetState+0x19c>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800f014:	9b03      	ldr	r3, [sp, #12]
 800f016:	6298      	str	r0, [r3, #40]	; 0x28
}
 800f018:	b015      	add	sp, #84	; 0x54
 800f01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800f01e:	2302      	movs	r3, #2
 800f020:	7133      	strb	r3, [r6, #4]
          break;
 800f022:	e7e0      	b.n	800efe6 <BSP_TS_GetState+0x11e>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800f024:	2301      	movs	r3, #1
 800f026:	7133      	strb	r3, [r6, #4]
          break;
 800f028:	e7dd      	b.n	800efe6 <BSP_TS_GetState+0x11e>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800f02a:	2303      	movs	r3, #3
 800f02c:	7133      	strb	r3, [r6, #4]
          break;
 800f02e:	e7da      	b.n	800efe6 <BSP_TS_GetState+0x11e>
        y[index] = brute_x[index];
 800f030:	ab0b      	add	r3, sp, #44	; 0x2c
 800f032:	8829      	ldrh	r1, [r5, #0]
        x[index] = brute_y[index];
 800f034:	f839 2014 	ldrh.w	r2, [r9, r4, lsl #1]
        y[index] = brute_x[index];
 800f038:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
        x[index] = brute_y[index];
 800f03c:	ab08      	add	r3, sp, #32
 800f03e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 800f042:	e786      	b.n	800ef52 <BSP_TS_GetState+0x8a>
        x[index] = brute_x[index];
 800f044:	8829      	ldrh	r1, [r5, #0]
 800f046:	a808      	add	r0, sp, #32
        y[index] = brute_y[index];
 800f048:	f839 2014 	ldrh.w	r2, [r9, r4, lsl #1]
        x[index] = brute_x[index];
 800f04c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
        y[index] = brute_y[index];
 800f050:	a90b      	add	r1, sp, #44	; 0x2c
 800f052:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
 800f056:	e774      	b.n	800ef42 <BSP_TS_GetState+0x7a>
  switch(gestureId)
 800f058:	2840      	cmp	r0, #64	; 0x40
 800f05a:	d00a      	beq.n	800f072 <BSP_TS_GetState+0x1aa>
 800f05c:	2849      	cmp	r0, #73	; 0x49
 800f05e:	d01c      	beq.n	800f09a <BSP_TS_GetState+0x1d2>
 800f060:	281c      	cmp	r0, #28
 800f062:	d015      	beq.n	800f090 <BSP_TS_GetState+0x1c8>
      break;
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
      break;
    default :
      ts_status = TS_ERROR;
 800f064:	2001      	movs	r0, #1
 800f066:	e7d7      	b.n	800f018 <BSP_TS_GetState+0x150>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800f068:	2301      	movs	r3, #1
 800f06a:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 800f06c:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800f06e:	6293      	str	r3, [r2, #40]	; 0x28
 800f070:	e7d2      	b.n	800f018 <BSP_TS_GetState+0x150>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800f072:	2305      	movs	r3, #5
 800f074:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 800f076:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800f078:	6293      	str	r3, [r2, #40]	; 0x28
 800f07a:	e7cd      	b.n	800f018 <BSP_TS_GetState+0x150>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800f07c:	2303      	movs	r3, #3
 800f07e:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 800f080:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800f082:	6293      	str	r3, [r2, #40]	; 0x28
 800f084:	e7c8      	b.n	800f018 <BSP_TS_GetState+0x150>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800f086:	2302      	movs	r3, #2
 800f088:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 800f08a:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800f08c:	6293      	str	r3, [r2, #40]	; 0x28
 800f08e:	e7c3      	b.n	800f018 <BSP_TS_GetState+0x150>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800f090:	2304      	movs	r3, #4
 800f092:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 800f094:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800f096:	6293      	str	r3, [r2, #40]	; 0x28
 800f098:	e7be      	b.n	800f018 <BSP_TS_GetState+0x150>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800f09a:	2306      	movs	r3, #6
 800f09c:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 800f09e:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800f0a0:	6293      	str	r3, [r2, #40]	; 0x28
 800f0a2:	e7b9      	b.n	800f018 <BSP_TS_GetState+0x150>
 800f0a4:	20006218 	.word	0x20006218
 800f0a8:	200061ec 	.word	0x200061ec
 800f0ac:	20006200 	.word	0x20006200
 800f0b0:	2000621a 	.word	0x2000621a
 800f0b4:	2000621c 	.word	0x2000621c
 800f0b8:	20006214 	.word	0x20006214
 800f0bc:	200061e8 	.word	0x200061e8

0800f0c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f0c0:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f0c2:	2003      	movs	r0, #3
 800f0c4:	f000 f996 	bl	800f3f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800f0c8:	2000      	movs	r0, #0
 800f0ca:	f7fc faf5 	bl	800b6b8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800f0ce:	f7fb fe15 	bl	800acfc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800f0d2:	2000      	movs	r0, #0
 800f0d4:	bd08      	pop	{r3, pc}
 800f0d6:	bf00      	nop

0800f0d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800f0d8:	4a03      	ldr	r2, [pc, #12]	; (800f0e8 <HAL_IncTick+0x10>)
 800f0da:	4b04      	ldr	r3, [pc, #16]	; (800f0ec <HAL_IncTick+0x14>)
 800f0dc:	6811      	ldr	r1, [r2, #0]
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	440b      	add	r3, r1
 800f0e2:	6013      	str	r3, [r2, #0]
}
 800f0e4:	4770      	bx	lr
 800f0e6:	bf00      	nop
 800f0e8:	2001323c 	.word	0x2001323c
 800f0ec:	20000095 	.word	0x20000095

0800f0f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800f0f0:	4b01      	ldr	r3, [pc, #4]	; (800f0f8 <HAL_GetTick+0x8>)
 800f0f2:	6818      	ldr	r0, [r3, #0]
}
 800f0f4:	4770      	bx	lr
 800f0f6:	bf00      	nop
 800f0f8:	2001323c 	.word	0x2001323c

0800f0fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f0fc:	b538      	push	{r3, r4, r5, lr}
 800f0fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800f100:	f7ff fff6 	bl	800f0f0 <HAL_GetTick>
 800f104:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f106:	1c63      	adds	r3, r4, #1
 800f108:	d002      	beq.n	800f110 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800f10a:	4b04      	ldr	r3, [pc, #16]	; (800f11c <HAL_Delay+0x20>)
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800f110:	f7ff ffee 	bl	800f0f0 <HAL_GetTick>
 800f114:	1b40      	subs	r0, r0, r5
 800f116:	42a0      	cmp	r0, r4
 800f118:	d3fa      	bcc.n	800f110 <HAL_Delay+0x14>
  {
  }
}
 800f11a:	bd38      	pop	{r3, r4, r5, pc}
 800f11c:	20000095 	.word	0x20000095

0800f120 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800f120:	2800      	cmp	r0, #0
 800f122:	f000 8092 	beq.w	800f24a <HAL_ADC_Init+0x12a>
{
 800f126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800f128:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800f12a:	4604      	mov	r4, r0
 800f12c:	2d00      	cmp	r5, #0
 800f12e:	f000 8082 	beq.w	800f236 <HAL_ADC_Init+0x116>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f134:	06db      	lsls	r3, r3, #27
 800f136:	d504      	bpl.n	800f142 <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800f138:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800f13a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800f13c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800f140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800f142:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f144:	4a4e      	ldr	r2, [pc, #312]	; (800f280 <HAL_ADC_Init+0x160>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800f146:	494f      	ldr	r1, [pc, #316]	; (800f284 <HAL_ADC_Init+0x164>)
    ADC_STATE_CLR_SET(hadc->State,
 800f148:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800f14a:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f14c:	4d4e      	ldr	r5, [pc, #312]	; (800f288 <HAL_ADC_Init+0x168>)
    ADC_STATE_CLR_SET(hadc->State,
 800f14e:	f042 0202 	orr.w	r2, r2, #2
 800f152:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800f154:	684a      	ldr	r2, [r1, #4]
 800f156:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800f15a:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800f15c:	684a      	ldr	r2, [r1, #4]
 800f15e:	6860      	ldr	r0, [r4, #4]
 800f160:	4302      	orrs	r2, r0
 800f162:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800f164:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800f166:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800f168:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800f16c:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800f170:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800f172:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800f174:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f176:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800f178:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f17c:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800f17e:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800f180:	6858      	ldr	r0, [r3, #4]
 800f182:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800f186:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800f188:	6859      	ldr	r1, [r3, #4]
 800f18a:	ea41 010c 	orr.w	r1, r1, ip
 800f18e:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800f190:	6899      	ldr	r1, [r3, #8]
 800f192:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800f196:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800f198:	689a      	ldr	r2, [r3, #8]
 800f19a:	ea42 0207 	orr.w	r2, r2, r7
 800f19e:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f1a0:	d055      	beq.n	800f24e <HAL_ADC_Init+0x12e>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f1a2:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800f1a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f1a6:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800f1aa:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800f1ac:	689a      	ldr	r2, [r3, #8]
 800f1ae:	4316      	orrs	r6, r2
 800f1b0:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f1b2:	6899      	ldr	r1, [r3, #8]
 800f1b4:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800f1b8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800f1ba:	689a      	ldr	r2, [r3, #8]
 800f1bc:	4302      	orrs	r2, r0
 800f1be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800f1c0:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800f1c2:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800f1c4:	f021 0102 	bic.w	r1, r1, #2
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800f1c8:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800f1cc:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800f1ce:	689a      	ldr	r2, [r3, #8]
 800f1d0:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800f1d4:	609a      	str	r2, [r3, #8]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800f1d6:	2800      	cmp	r0, #0
 800f1d8:	d142      	bne.n	800f260 <HAL_ADC_Init+0x140>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800f1da:	685a      	ldr	r2, [r3, #4]
 800f1dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f1e0:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800f1e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 800f1e4:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800f1e6:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800f1e8:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800f1ec:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800f1f0:	1e6a      	subs	r2, r5, #1
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800f1f2:	6967      	ldr	r7, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800f1f4:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f1f6:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800f1f8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800f1fa:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 800f1fe:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800f200:	689d      	ldr	r5, [r3, #8]
 800f202:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 800f206:	609d      	str	r5, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800f208:	6899      	ldr	r1, [r3, #8]
 800f20a:	ea41 214c 	orr.w	r1, r1, ip, lsl #9
 800f20e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800f210:	6899      	ldr	r1, [r3, #8]
 800f212:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800f216:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800f218:	689a      	ldr	r2, [r3, #8]
 800f21a:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800f21e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800f220:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800f222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f224:	f023 0303 	bic.w	r3, r3, #3
 800f228:	f043 0301 	orr.w	r3, r3, #1
 800f22c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800f22e:	2300      	movs	r3, #0
 800f230:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 800f236:	f7fb fda9 	bl	800ad8c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800f23a:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f23c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800f23e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f242:	06db      	lsls	r3, r3, #27
 800f244:	f53f af78 	bmi.w	800f138 <HAL_ADC_Init+0x18>
 800f248:	e77b      	b.n	800f142 <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 800f24a:	2001      	movs	r0, #1
}
 800f24c:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f24e:	689a      	ldr	r2, [r3, #8]
 800f250:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f256:	689a      	ldr	r2, [r3, #8]
 800f258:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f25c:	609a      	str	r2, [r3, #8]
 800f25e:	e7af      	b.n	800f1c0 <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800f260:	6858      	ldr	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800f262:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800f264:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800f268:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800f26a:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800f26c:	685a      	ldr	r2, [r3, #4]
 800f26e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800f272:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800f274:	685a      	ldr	r2, [r3, #4]
 800f276:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800f27a:	605a      	str	r2, [r3, #4]
 800f27c:	e7b1      	b.n	800f1e2 <HAL_ADC_Init+0xc2>
 800f27e:	bf00      	nop
 800f280:	ffffeefd 	.word	0xffffeefd
 800f284:	40012300 	.word	0x40012300
 800f288:	0f000001 	.word	0x0f000001

0800f28c <HAL_ADC_ConfigChannel>:
  __HAL_LOCK(hadc);
 800f28c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  __IO uint32_t counter = 0;
 800f290:	2200      	movs	r2, #0
{
 800f292:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800f294:	2b01      	cmp	r3, #1
{
 800f296:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 800f298:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800f29a:	f000 809a 	beq.w	800f3d2 <HAL_ADC_ConfigChannel+0x146>
	if (sConfig->Channel > ADC_CHANNEL_9)
 800f29e:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	6803      	ldr	r3, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 800f2a4:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800f2a6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 800f2aa:	b2af      	uxth	r7, r5
 800f2ac:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 800f2ae:	d828      	bhi.n	800f302 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800f2b0:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800f2b4:	f04f 0c07 	mov.w	ip, #7
 800f2b8:	691c      	ldr	r4, [r3, #16]
 800f2ba:	fa0c fc06 	lsl.w	ip, ip, r6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800f2be:	fa02 f606 	lsl.w	r6, r2, r6
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800f2c2:	ea24 040c 	bic.w	r4, r4, ip
 800f2c6:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800f2c8:	691a      	ldr	r2, [r3, #16]
 800f2ca:	4316      	orrs	r6, r2
 800f2cc:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7)
 800f2ce:	684e      	ldr	r6, [r1, #4]
 800f2d0:	2e06      	cmp	r6, #6
 800f2d2:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800f2d6:	d82d      	bhi.n	800f334 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800f2d8:	3a05      	subs	r2, #5
 800f2da:	241f      	movs	r4, #31
 800f2dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f2de:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800f2e0:	fa07 f202 	lsl.w	r2, r7, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800f2e4:	ea21 0104 	bic.w	r1, r1, r4
 800f2e8:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800f2ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f2ec:	430a      	orrs	r2, r1
 800f2ee:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f2f0:	4a3c      	ldr	r2, [pc, #240]	; (800f3e4 <HAL_ADC_ConfigChannel+0x158>)
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d030      	beq.n	800f358 <HAL_ADC_ConfigChannel+0xcc>
  __HAL_UNLOCK(hadc);
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800f2fc:	4618      	mov	r0, r3
}
 800f2fe:	b003      	add	sp, #12
 800f300:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800f302:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800f306:	f04f 0c07 	mov.w	ip, #7
 800f30a:	68dc      	ldr	r4, [r3, #12]
 800f30c:	3e1e      	subs	r6, #30
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800f30e:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 800f3e8 <HAL_ADC_ConfigChannel+0x15c>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800f312:	fa0c fc06 	lsl.w	ip, ip, r6
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800f316:	4575      	cmp	r5, lr
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800f318:	ea24 040c 	bic.w	r4, r4, ip
 800f31c:	60dc      	str	r4, [r3, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800f31e:	d05b      	beq.n	800f3d8 <HAL_ADC_ConfigChannel+0x14c>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800f320:	fa02 f606 	lsl.w	r6, r2, r6
 800f324:	68da      	ldr	r2, [r3, #12]
 800f326:	4316      	orrs	r6, r2
 800f328:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 800f32a:	684e      	ldr	r6, [r1, #4]
 800f32c:	2e06      	cmp	r6, #6
 800f32e:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800f332:	d9d1      	bls.n	800f2d8 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13)
 800f334:	2e0c      	cmp	r6, #12
 800f336:	d837      	bhi.n	800f3a8 <HAL_ADC_ConfigChannel+0x11c>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800f338:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 800f33c:	261f      	movs	r6, #31
 800f33e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f340:	40a6      	lsls	r6, r4
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800f342:	fa07 f204 	lsl.w	r2, r7, r4
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800f346:	ea21 0106 	bic.w	r1, r1, r6
 800f34a:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800f34c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800f34e:	4314      	orrs	r4, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f350:	4a24      	ldr	r2, [pc, #144]	; (800f3e4 <HAL_ADC_ConfigChannel+0x158>)
 800f352:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800f354:	631c      	str	r4, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f356:	d1ce      	bne.n	800f2f6 <HAL_ADC_ConfigChannel+0x6a>
 800f358:	2d12      	cmp	r5, #18
 800f35a:	d033      	beq.n	800f3c4 <HAL_ADC_ConfigChannel+0x138>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800f35c:	4b22      	ldr	r3, [pc, #136]	; (800f3e8 <HAL_ADC_ConfigChannel+0x15c>)
 800f35e:	429d      	cmp	r5, r3
 800f360:	d001      	beq.n	800f366 <HAL_ADC_ConfigChannel+0xda>
 800f362:	2d11      	cmp	r5, #17
 800f364:	d1c7      	bne.n	800f2f6 <HAL_ADC_ConfigChannel+0x6a>
    ADC->CCR |= ADC_CCR_TSVREFE;
 800f366:	4a21      	ldr	r2, [pc, #132]	; (800f3ec <HAL_ADC_ConfigChannel+0x160>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800f368:	491f      	ldr	r1, [pc, #124]	; (800f3e8 <HAL_ADC_ConfigChannel+0x15c>)
    ADC->CCR |= ADC_CCR_TSVREFE;
 800f36a:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800f36c:	428d      	cmp	r5, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 800f36e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f372:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800f374:	d1bf      	bne.n	800f2f6 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800f376:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800f37a:	4b1d      	ldr	r3, [pc, #116]	; (800f3f0 <HAL_ADC_ConfigChannel+0x164>)
 800f37c:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f202 3283 	addw	r2, r2, #899	; 0x383
 800f386:	fba2 2303 	umull	r2, r3, r2, r3
 800f38a:	0c9b      	lsrs	r3, r3, #18
 800f38c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f390:	005b      	lsls	r3, r3, #1
 800f392:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800f394:	9b01      	ldr	r3, [sp, #4]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d0ad      	beq.n	800f2f6 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800f39a:	9b01      	ldr	r3, [sp, #4]
 800f39c:	3b01      	subs	r3, #1
 800f39e:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800f3a0:	9b01      	ldr	r3, [sp, #4]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d1f9      	bne.n	800f39a <HAL_ADC_ConfigChannel+0x10e>
 800f3a6:	e7a6      	b.n	800f2f6 <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800f3a8:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800f3ac:	261f      	movs	r6, #31
 800f3ae:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800f3b0:	408e      	lsls	r6, r1
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800f3b2:	fa07 f201 	lsl.w	r2, r7, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800f3b6:	ea24 0406 	bic.w	r4, r4, r6
 800f3ba:	62dc      	str	r4, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800f3bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f3be:	430a      	orrs	r2, r1
 800f3c0:	62da      	str	r2, [r3, #44]	; 0x2c
 800f3c2:	e795      	b.n	800f2f0 <HAL_ADC_ConfigChannel+0x64>
    ADC->CCR |= ADC_CCR_VBATE;
 800f3c4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800f3c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f3cc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 800f3d0:	e791      	b.n	800f2f6 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 800f3d2:	2002      	movs	r0, #2
}
 800f3d4:	b003      	add	sp, #12
 800f3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800f3d8:	68de      	ldr	r6, [r3, #12]
 800f3da:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
 800f3de:	60de      	str	r6, [r3, #12]
 800f3e0:	e775      	b.n	800f2ce <HAL_ADC_ConfigChannel+0x42>
 800f3e2:	bf00      	nop
 800f3e4:	40012000 	.word	0x40012000
 800f3e8:	10000012 	.word	0x10000012
 800f3ec:	40012300 	.word	0x40012300
 800f3f0:	2000002c 	.word	0x2000002c

0800f3f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f3f4:	4907      	ldr	r1, [pc, #28]	; (800f414 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f3f6:	0200      	lsls	r0, r0, #8
 800f3f8:	4b07      	ldr	r3, [pc, #28]	; (800f418 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f3fa:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f3fc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f400:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f402:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800f406:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800f408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f40c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f40e:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 800f410:	60c8      	str	r0, [r1, #12]
 800f412:	4770      	bx	lr
 800f414:	e000ed00 	.word	0xe000ed00
 800f418:	05fa0000 	.word	0x05fa0000

0800f41c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f41c:	4b17      	ldr	r3, [pc, #92]	; (800f47c <HAL_NVIC_SetPriority+0x60>)
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f424:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f426:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f42a:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f42c:	2d04      	cmp	r5, #4
 800f42e:	bf28      	it	cs
 800f430:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f432:	2c06      	cmp	r4, #6
 800f434:	d918      	bls.n	800f468 <HAL_NVIC_SetPriority+0x4c>
 800f436:	3b03      	subs	r3, #3
 800f438:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f43c:	409c      	lsls	r4, r3
 800f43e:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 800f446:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f448:	fa02 f205 	lsl.w	r2, r2, r5
 800f44c:	ea21 0102 	bic.w	r1, r1, r2
 800f450:	fa01 f203 	lsl.w	r2, r1, r3
 800f454:	ea42 0204 	orr.w	r2, r2, r4
 800f458:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800f45c:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 800f45e:	db06      	blt.n	800f46e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f460:	4b07      	ldr	r3, [pc, #28]	; (800f480 <HAL_NVIC_SetPriority+0x64>)
 800f462:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800f464:	bc30      	pop	{r4, r5}
 800f466:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f468:	2400      	movs	r4, #0
 800f46a:	4623      	mov	r3, r4
 800f46c:	e7e9      	b.n	800f442 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f46e:	f000 000f 	and.w	r0, r0, #15
 800f472:	4b04      	ldr	r3, [pc, #16]	; (800f484 <HAL_NVIC_SetPriority+0x68>)
 800f474:	541a      	strb	r2, [r3, r0]
 800f476:	bc30      	pop	{r4, r5}
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop
 800f47c:	e000ed00 	.word	0xe000ed00
 800f480:	e000e400 	.word	0xe000e400
 800f484:	e000ed14 	.word	0xe000ed14

0800f488 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800f488:	2800      	cmp	r0, #0
 800f48a:	db07      	blt.n	800f49c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f48c:	f000 011f 	and.w	r1, r0, #31
 800f490:	2301      	movs	r3, #1
 800f492:	0940      	lsrs	r0, r0, #5
 800f494:	4a02      	ldr	r2, [pc, #8]	; (800f4a0 <HAL_NVIC_EnableIRQ+0x18>)
 800f496:	408b      	lsls	r3, r1
 800f498:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800f49c:	4770      	bx	lr
 800f49e:	bf00      	nop
 800f4a0:	e000e100 	.word	0xe000e100

0800f4a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f4a4:	3801      	subs	r0, #1
 800f4a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800f4aa:	d20d      	bcs.n	800f4c8 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f4ac:	4b07      	ldr	r3, [pc, #28]	; (800f4cc <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f4ae:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f4b0:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f4b2:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f4b4:	25f0      	movs	r5, #240	; 0xf0
 800f4b6:	4c06      	ldr	r4, [pc, #24]	; (800f4d0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f4b8:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f4ba:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f4bc:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f4c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f4c2:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800f4c4:	bc30      	pop	{r4, r5}
 800f4c6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800f4c8:	2001      	movs	r0, #1
 800f4ca:	4770      	bx	lr
 800f4cc:	e000e010 	.word	0xe000e010
 800f4d0:	e000ed00 	.word	0xe000ed00

0800f4d4 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800f4d4:	4a04      	ldr	r2, [pc, #16]	; (800f4e8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800f4d6:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800f4d8:	6813      	ldr	r3, [r2, #0]
 800f4da:	bf0c      	ite	eq
 800f4dc:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800f4e0:	f023 0304 	bicne.w	r3, r3, #4
 800f4e4:	6013      	str	r3, [r2, #0]
  }
}
 800f4e6:	4770      	bx	lr
 800f4e8:	e000e010 	.word	0xe000e010

0800f4ec <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	d03c      	beq.n	800f56a <HAL_CRC_Init+0x7e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800f4f0:	7f43      	ldrb	r3, [r0, #29]
{
 800f4f2:	b570      	push	{r4, r5, r6, lr}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800f4f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f4f8:	4604      	mov	r4, r0
 800f4fa:	b1fb      	cbz	r3, 800f53c <HAL_CRC_Init+0x50>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800f4fc:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800f4fe:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f500:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800f502:	bb1b      	cbnz	r3, 800f54c <HAL_CRC_Init+0x60>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800f504:	6823      	ldr	r3, [r4, #0]
 800f506:	4a1a      	ldr	r2, [pc, #104]	; (800f570 <HAL_CRC_Init+0x84>)
 800f508:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800f50a:	689a      	ldr	r2, [r3, #8]
 800f50c:	f022 0218 	bic.w	r2, r2, #24
 800f510:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800f512:	7962      	ldrb	r2, [r4, #5]
 800f514:	bb22      	cbnz	r2, 800f560 <HAL_CRC_Init+0x74>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800f516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f51a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800f51c:	6899      	ldr	r1, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800f51e:	2501      	movs	r5, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800f520:	6962      	ldr	r2, [r4, #20]

  /* Return function status */
  return HAL_OK;
 800f522:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800f524:	f021 0160 	bic.w	r1, r1, #96	; 0x60
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800f528:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800f52a:	4311      	orrs	r1, r2
 800f52c:	6099      	str	r1, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800f52e:	689a      	ldr	r2, [r3, #8]
 800f530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f534:	4332      	orrs	r2, r6
 800f536:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800f538:	7765      	strb	r5, [r4, #29]
}
 800f53a:	bd70      	pop	{r4, r5, r6, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800f53c:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800f53e:	f7fb fc53 	bl	800ade8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f542:	2202      	movs	r2, #2
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800f544:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f546:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d0db      	beq.n	800f504 <HAL_CRC_Init+0x18>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800f54c:	68e2      	ldr	r2, [r4, #12]
 800f54e:	4620      	mov	r0, r4
 800f550:	68a1      	ldr	r1, [r4, #8]
 800f552:	f000 f80f 	bl	800f574 <HAL_CRCEx_Polynomial_Set>
 800f556:	b930      	cbnz	r0, 800f566 <HAL_CRC_Init+0x7a>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800f558:	7962      	ldrb	r2, [r4, #5]
 800f55a:	6823      	ldr	r3, [r4, #0]
 800f55c:	2a00      	cmp	r2, #0
 800f55e:	d0da      	beq.n	800f516 <HAL_CRC_Init+0x2a>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800f560:	6922      	ldr	r2, [r4, #16]
 800f562:	611a      	str	r2, [r3, #16]
 800f564:	e7da      	b.n	800f51c <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800f566:	2001      	movs	r0, #1
}
 800f568:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800f56a:	2001      	movs	r0, #1
}
 800f56c:	4770      	bx	lr
 800f56e:	bf00      	nop
 800f570:	04c11db7 	.word	0x04c11db7

0800f574 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800f574:	b410      	push	{r4}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800f576:	231e      	movs	r3, #30
 800f578:	e002      	b.n	800f580 <HAL_CRCEx_Polynomial_Set+0xc>
 800f57a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800f57e:	d321      	bcc.n	800f5c4 <HAL_CRCEx_Polynomial_Set+0x50>
 800f580:	fa21 f403 	lsr.w	r4, r1, r3
 800f584:	07e4      	lsls	r4, r4, #31
 800f586:	d5f8      	bpl.n	800f57a <HAL_CRCEx_Polynomial_Set+0x6>
  {
  }

  switch (PolyLength)
 800f588:	2a18      	cmp	r2, #24
 800f58a:	d81d      	bhi.n	800f5c8 <HAL_CRCEx_Polynomial_Set+0x54>
 800f58c:	e8df f002 	tbb	[pc, r2]
 800f590:	1c1c1c0f 	.word	0x1c1c1c0f
 800f594:	1c1c1c1c 	.word	0x1c1c1c1c
 800f598:	1c1c1c23 	.word	0x1c1c1c23
 800f59c:	1c1c1c1c 	.word	0x1c1c1c1c
 800f5a0:	1c1c1c0d 	.word	0x1c1c1c0d
 800f5a4:	1c1c1c1c 	.word	0x1c1c1c1c
 800f5a8:	20          	.byte	0x20
 800f5a9:	00          	.byte	0x00
      {
        status =   HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800f5aa:	2b07      	cmp	r3, #7
 800f5ac:	d80c      	bhi.n	800f5c8 <HAL_CRCEx_Polynomial_Set+0x54>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800f5ae:	6804      	ldr	r4, [r0, #0]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800f5b0:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 800f5b2:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800f5b4:	68a3      	ldr	r3, [r4, #8]
 800f5b6:	f023 0318 	bic.w	r3, r3, #24
 800f5ba:	431a      	orrs	r2, r3
 800f5bc:	60a2      	str	r2, [r4, #8]
  }
  /* Return function status */
  return status;
}
 800f5be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5c2:	4770      	bx	lr
  switch (PolyLength)
 800f5c4:	2a00      	cmp	r2, #0
 800f5c6:	d0f2      	beq.n	800f5ae <HAL_CRCEx_Polynomial_Set+0x3a>
      status =  HAL_ERROR;
 800f5c8:	2001      	movs	r0, #1
}
 800f5ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5ce:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 800f5d0:	2b06      	cmp	r3, #6
 800f5d2:	d9ec      	bls.n	800f5ae <HAL_CRCEx_Polynomial_Set+0x3a>
 800f5d4:	e7f8      	b.n	800f5c8 <HAL_CRCEx_Polynomial_Set+0x54>
      if (msb >= HAL_CRC_LENGTH_16B)
 800f5d6:	2b0f      	cmp	r3, #15
 800f5d8:	d9e9      	bls.n	800f5ae <HAL_CRCEx_Polynomial_Set+0x3a>
 800f5da:	e7f5      	b.n	800f5c8 <HAL_CRCEx_Polynomial_Set+0x54>

0800f5dc <HAL_DCMI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	d044      	beq.n	800f66a <HAL_DCMI_Init+0x8e>
{     
 800f5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800f5e2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d03b      	beq.n	800f664 <HAL_DCMI_Init+0x88>
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800f5ec:	6862      	ldr	r2, [r4, #4]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 800f5ee:	2502      	movs	r5, #2
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800f5f0:	6963      	ldr	r3, [r4, #20]
 800f5f2:	68e1      	ldr	r1, [r4, #12]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart);
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800f5f4:	2a10      	cmp	r2, #16
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800f5f6:	ea43 0302 	orr.w	r3, r3, r2
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800f5fa:	6920      	ldr	r0, [r4, #16]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800f5fc:	69a6      	ldr	r6, [r4, #24]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800f5fe:	ea43 0301 	orr.w	r3, r3, r1
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800f602:	68a1      	ldr	r1, [r4, #8]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 800f604:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800f608:	ea43 0300 	orr.w	r3, r3, r0
 800f60c:	ea43 0301 	orr.w	r3, r3, r1
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800f610:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f612:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800f616:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800f61a:	6826      	ldr	r6, [r4, #0]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800f61c:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800f620:	6837      	ldr	r7, [r6, #0]
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800f622:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800f624:	ea43 0300 	orr.w	r3, r3, r0
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800f628:	6b20      	ldr	r0, [r4, #48]	; 0x30
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800f62a:	ea43 0301 	orr.w	r3, r3, r1
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800f62e:	4910      	ldr	r1, [pc, #64]	; (800f670 <HAL_DCMI_Init+0x94>)
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800f630:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800f634:	ea01 0107 	and.w	r1, r1, r7
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800f638:	ea43 0300 	orr.w	r3, r3, r0
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800f63c:	6031      	str	r1, [r6, #0]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800f63e:	6831      	ldr	r1, [r6, #0]
 800f640:	ea43 0301 	orr.w	r3, r3, r1
 800f644:	6033      	str	r3, [r6, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800f646:	d00a      	beq.n	800f65e <HAL_DCMI_Init+0x82>
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800f648:	68f3      	ldr	r3, [r6, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800f64a:	2200      	movs	r2, #0
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800f64c:	2101      	movs	r1, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800f64e:	f043 031e 	orr.w	r3, r3, #30

  return HAL_OK;
 800f652:	4610      	mov	r0, r2
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800f654:	60f3      	str	r3, [r6, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800f656:	64e2      	str	r2, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800f658:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 800f65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800f65e:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800f660:	61b3      	str	r3, [r6, #24]
 800f662:	e7f1      	b.n	800f648 <HAL_DCMI_Init+0x6c>
    HAL_DCMI_MspInit(hdcmi);
 800f664:	f7fb fbd6 	bl	800ae14 <HAL_DCMI_MspInit>
 800f668:	e7c0      	b.n	800f5ec <HAL_DCMI_Init+0x10>
     return HAL_ERROR;
 800f66a:	2001      	movs	r0, #1
}
 800f66c:	4770      	bx	lr
 800f66e:	bf00      	nop
 800f670:	ffe0f007 	.word	0xffe0f007

0800f674 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f676:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800f678:	f7ff fd3a 	bl	800f0f0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f67c:	2c00      	cmp	r4, #0
 800f67e:	d053      	beq.n	800f728 <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f680:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f682:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800f684:	2100      	movs	r1, #0
 800f686:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800f688:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800f68c:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 800f68e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800f692:	f022 0201 	bic.w	r2, r2, #1
 800f696:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f698:	e005      	b.n	800f6a6 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f69a:	f7ff fd29 	bl	800f0f0 <HAL_GetTick>
 800f69e:	1b40      	subs	r0, r0, r5
 800f6a0:	2805      	cmp	r0, #5
 800f6a2:	d83a      	bhi.n	800f71a <HAL_DMA_Init+0xa6>
 800f6a4:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f6a6:	681a      	ldr	r2, [r3, #0]
 800f6a8:	07d1      	lsls	r1, r2, #31
 800f6aa:	d4f6      	bmi.n	800f69a <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f6ac:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800f6b0:	68e1      	ldr	r1, [r4, #12]
 800f6b2:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 800f6b4:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f6b6:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f6ba:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f6bc:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 800f6be:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f6c0:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f6c4:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f6c6:	4d35      	ldr	r5, [pc, #212]	; (800f79c <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f6c8:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f6ca:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f6cc:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f6ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 800f6d0:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f6d2:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f6d4:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f6d8:	d028      	beq.n	800f72c <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f6da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f6dc:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f6de:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f6e2:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f6e4:	b2da      	uxtb	r2, r3
 800f6e6:	4d2e      	ldr	r5, [pc, #184]	; (800f7a0 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 800f6e8:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f6ea:	3a10      	subs	r2, #16
 800f6ec:	492d      	ldr	r1, [pc, #180]	; (800f7a4 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f6ee:	482e      	ldr	r0, [pc, #184]	; (800f7a8 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f6f0:	fba5 5202 	umull	r5, r2, r5, r2
 800f6f4:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 800f6f6:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f6f8:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f6fa:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f6fc:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 800f6fe:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f700:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f704:	bf88      	it	hi
 800f706:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f708:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f70a:	4083      	lsls	r3, r0
  return HAL_OK;
 800f70c:	4610      	mov	r0, r2
 800f70e:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f710:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f712:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800f714:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800f718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f71a:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f71c:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800f71e:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f720:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f722:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800f726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800f728:	2001      	movs	r0, #1
}
 800f72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f72c:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800f730:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f732:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 800f736:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f73a:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 800f73c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800f73e:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f740:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 800f744:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f746:	2d00      	cmp	r5, #0
 800f748:	d0cc      	beq.n	800f6e4 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f74a:	b17e      	cbz	r6, 800f76c <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f74c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800f750:	d016      	beq.n	800f780 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800f752:	2f02      	cmp	r7, #2
 800f754:	d903      	bls.n	800f75e <HAL_DMA_Init+0xea>
 800f756:	2f03      	cmp	r7, #3
 800f758:	d1c4      	bne.n	800f6e4 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f75a:	01ea      	lsls	r2, r5, #7
 800f75c:	d5c2      	bpl.n	800f6e4 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800f75e:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f760:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 800f762:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f764:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800f766:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800f76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 800f76c:	2f01      	cmp	r7, #1
 800f76e:	d003      	beq.n	800f778 <HAL_DMA_Init+0x104>
 800f770:	d3f3      	bcc.n	800f75a <HAL_DMA_Init+0xe6>
 800f772:	2f02      	cmp	r7, #2
 800f774:	d1b6      	bne.n	800f6e4 <HAL_DMA_Init+0x70>
 800f776:	e7f0      	b.n	800f75a <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f778:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800f77c:	d1b2      	bne.n	800f6e4 <HAL_DMA_Init+0x70>
 800f77e:	e7ee      	b.n	800f75e <HAL_DMA_Init+0xea>
    switch (tmp)
 800f780:	2f03      	cmp	r7, #3
 800f782:	d8af      	bhi.n	800f6e4 <HAL_DMA_Init+0x70>
 800f784:	a201      	add	r2, pc, #4	; (adr r2, 800f78c <HAL_DMA_Init+0x118>)
 800f786:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 800f78a:	bf00      	nop
 800f78c:	0800f75f 	.word	0x0800f75f
 800f790:	0800f75b 	.word	0x0800f75b
 800f794:	0800f75f 	.word	0x0800f75f
 800f798:	0800f779 	.word	0x0800f779
 800f79c:	f010803f 	.word	0xf010803f
 800f7a0:	aaaaaaab 	.word	0xaaaaaaab
 800f7a4:	fffffc00 	.word	0xfffffc00
 800f7a8:	08025a94 	.word	0x08025a94

0800f7ac <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	d035      	beq.n	800f81c <HAL_DMA_DeInit+0x70>
 800f7b0:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800f7b2:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 800f7b6:	b2c0      	uxtb	r0, r0
 800f7b8:	2802      	cmp	r0, #2
 800f7ba:	d031      	beq.n	800f820 <HAL_DMA_DeInit+0x74>
  __HAL_DMA_DISABLE(hdma);
 800f7bc:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 800f7be:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f7c0:	b2d1      	uxtb	r1, r2
{
 800f7c2:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f7c4:	3910      	subs	r1, #16
  __HAL_DMA_DISABLE(hdma);
 800f7c6:	6814      	ldr	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f7c8:	4d16      	ldr	r5, [pc, #88]	; (800f824 <HAL_DMA_DeInit+0x78>)
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800f7ca:	2621      	movs	r6, #33	; 0x21
  __HAL_DMA_DISABLE(hdma);
 800f7cc:	f024 0401 	bic.w	r4, r4, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f7d0:	fba5 5101 	umull	r5, r1, r5, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f7d4:	4d14      	ldr	r5, [pc, #80]	; (800f828 <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 800f7d6:	6014      	str	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f7d8:	0909      	lsrs	r1, r1, #4
 800f7da:	4c14      	ldr	r4, [pc, #80]	; (800f82c <HAL_DMA_DeInit+0x80>)
  hdma->Instance->CR   = 0U;
 800f7dc:	6010      	str	r0, [r2, #0]
 800f7de:	4014      	ands	r4, r2
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f7e0:	5c6d      	ldrb	r5, [r5, r1]
  if (stream_number > 3U)
 800f7e2:	2903      	cmp	r1, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f7e4:	f04f 013f 	mov.w	r1, #63	; 0x3f
  hdma->Instance->NDTR = 0U;
 800f7e8:	6050      	str	r0, [r2, #4]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f7ea:	bf88      	it	hi
 800f7ec:	3404      	addhi	r4, #4
  hdma->Instance->PAR  = 0U;
 800f7ee:	6090      	str	r0, [r2, #8]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f7f0:	40a9      	lsls	r1, r5
  hdma->Instance->M0AR = 0U;
 800f7f2:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 800f7f4:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800f7f6:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 800f7f8:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f7fa:	65dd      	str	r5, [r3, #92]	; 0x5c
 800f7fc:	659c      	str	r4, [r3, #88]	; 0x58
  return HAL_OK;
 800f7fe:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f800:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f802:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 800f804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800f808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 800f80c:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800f810:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 800f814:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
}
 800f818:	bc70      	pop	{r4, r5, r6}
 800f81a:	4770      	bx	lr
    return HAL_ERROR;
 800f81c:	2001      	movs	r0, #1
 800f81e:	4770      	bx	lr
}
 800f820:	4770      	bx	lr
 800f822:	bf00      	nop
 800f824:	aaaaaaab 	.word	0xaaaaaaab
 800f828:	08025a94 	.word	0x08025a94
 800f82c:	fffffc00 	.word	0xfffffc00

0800f830 <HAL_DMA_Start_IT>:
{
 800f830:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800f832:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800f836:	2c01      	cmp	r4, #1
 800f838:	d038      	beq.n	800f8ac <HAL_DMA_Start_IT+0x7c>
 800f83a:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800f83c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f840:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800f842:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 800f844:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800f848:	d129      	bne.n	800f89e <HAL_DMA_Start_IT+0x6e>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f84a:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800f84c:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f84e:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800f850:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f854:	6545      	str	r5, [r0, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f856:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f858:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f85a:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f85c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800f860:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800f862:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f864:	d026      	beq.n	800f8b4 <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 800f866:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800f868:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f86a:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800f86c:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800f86e:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f870:	408b      	lsls	r3, r1
 800f872:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f874:	6823      	ldr	r3, [r4, #0]
 800f876:	f043 0316 	orr.w	r3, r3, #22
 800f87a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800f87c:	6963      	ldr	r3, [r4, #20]
 800f87e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f882:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800f884:	b11a      	cbz	r2, 800f88e <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CR  |= DMA_IT_HT;
 800f886:	6823      	ldr	r3, [r4, #0]
 800f888:	f043 0308 	orr.w	r3, r3, #8
 800f88c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800f88e:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f890:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 800f892:	f042 0201 	orr.w	r2, r2, #1
}
 800f896:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 800f898:	6022      	str	r2, [r4, #0]
}
 800f89a:	bcf0      	pop	{r4, r5, r6, r7}
 800f89c:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 800f89e:	2200      	movs	r2, #0
    status = HAL_BUSY;
 800f8a0:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);	  
 800f8a2:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	bcf0      	pop	{r4, r5, r6, r7}
 800f8aa:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800f8ac:	2302      	movs	r3, #2
}
 800f8ae:	bcf0      	pop	{r4, r5, r6, r7}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800f8b4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800f8b6:	60e1      	str	r1, [r4, #12]
 800f8b8:	e7d7      	b.n	800f86a <HAL_DMA_Start_IT+0x3a>
 800f8ba:	bf00      	nop

0800f8bc <HAL_DMA_Abort>:
{
 800f8bc:	b570      	push	{r4, r5, r6, lr}
 800f8be:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f8c0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800f8c2:	f7ff fc15 	bl	800f0f0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f8c6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800f8ca:	2b02      	cmp	r3, #2
 800f8cc:	d006      	beq.n	800f8dc <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f8ce:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800f8d0:	2300      	movs	r3, #0
    return HAL_ERROR;
 800f8d2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f8d4:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800f8d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800f8da:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f8dc:	6823      	ldr	r3, [r4, #0]
 800f8de:	4605      	mov	r5, r0
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f8e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f8e2:	681a      	ldr	r2, [r3, #0]
 800f8e4:	f022 0216 	bic.w	r2, r2, #22
 800f8e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f8ea:	695a      	ldr	r2, [r3, #20]
 800f8ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f8f0:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f8f2:	b339      	cbz	r1, 800f944 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	f022 0208 	bic.w	r2, r2, #8
 800f8fa:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	f022 0201 	bic.w	r2, r2, #1
 800f902:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f904:	e005      	b.n	800f912 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f906:	f7ff fbf3 	bl	800f0f0 <HAL_GetTick>
 800f90a:	1b40      	subs	r0, r0, r5
 800f90c:	2805      	cmp	r0, #5
 800f90e:	d80f      	bhi.n	800f930 <HAL_DMA_Abort+0x74>
 800f910:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f013 0301 	ands.w	r3, r3, #1
 800f918:	d1f5      	bne.n	800f906 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f91a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f91c:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 800f91e:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f920:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800f922:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f924:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 800f926:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800f92a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 800f92e:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f930:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f932:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800f934:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f936:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800f938:	4618      	mov	r0, r3
        __HAL_UNLOCK(hdma);
 800f93a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f93e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800f942:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f944:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f946:	2a00      	cmp	r2, #0
 800f948:	d1d4      	bne.n	800f8f4 <HAL_DMA_Abort+0x38>
 800f94a:	e7d7      	b.n	800f8fc <HAL_DMA_Abort+0x40>

0800f94c <HAL_DMA_IRQHandler>:
{
 800f94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f94e:	4604      	mov	r4, r0
 800f950:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 800f952:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f954:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 800f956:	4966      	ldr	r1, [pc, #408]	; (800faf0 <HAL_DMA_IRQHandler+0x1a4>)
  __IO uint32_t count = 0;
 800f958:	9001      	str	r0, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 800f95a:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f95c:	e9d4 7316 	ldrd	r7, r3, [r4, #88]	; 0x58
 800f960:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 800f962:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f964:	422a      	tst	r2, r5
 800f966:	d003      	beq.n	800f970 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f968:	6821      	ldr	r1, [r4, #0]
 800f96a:	6808      	ldr	r0, [r1, #0]
 800f96c:	0740      	lsls	r0, r0, #29
 800f96e:	d459      	bmi.n	800fa24 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f970:	2201      	movs	r2, #1
 800f972:	409a      	lsls	r2, r3
 800f974:	422a      	tst	r2, r5
 800f976:	d003      	beq.n	800f980 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f978:	6821      	ldr	r1, [r4, #0]
 800f97a:	6949      	ldr	r1, [r1, #20]
 800f97c:	0608      	lsls	r0, r1, #24
 800f97e:	d474      	bmi.n	800fa6a <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f980:	2204      	movs	r2, #4
 800f982:	409a      	lsls	r2, r3
 800f984:	422a      	tst	r2, r5
 800f986:	d003      	beq.n	800f990 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f988:	6821      	ldr	r1, [r4, #0]
 800f98a:	6809      	ldr	r1, [r1, #0]
 800f98c:	0789      	lsls	r1, r1, #30
 800f98e:	d466      	bmi.n	800fa5e <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f990:	2210      	movs	r2, #16
 800f992:	409a      	lsls	r2, r3
 800f994:	422a      	tst	r2, r5
 800f996:	d003      	beq.n	800f9a0 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f998:	6821      	ldr	r1, [r4, #0]
 800f99a:	6808      	ldr	r0, [r1, #0]
 800f99c:	0700      	lsls	r0, r0, #28
 800f99e:	d44b      	bmi.n	800fa38 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f9a0:	2220      	movs	r2, #32
 800f9a2:	409a      	lsls	r2, r3
 800f9a4:	422a      	tst	r2, r5
 800f9a6:	d014      	beq.n	800f9d2 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f9a8:	6821      	ldr	r1, [r4, #0]
 800f9aa:	6808      	ldr	r0, [r1, #0]
 800f9ac:	06c0      	lsls	r0, r0, #27
 800f9ae:	d510      	bpl.n	800f9d2 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f9b0:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f9b2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800f9b6:	2a05      	cmp	r2, #5
 800f9b8:	d063      	beq.n	800fa82 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f9ba:	680b      	ldr	r3, [r1, #0]
 800f9bc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f9c0:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f9c2:	d07e      	beq.n	800fac2 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f9c4:	0319      	lsls	r1, r3, #12
 800f9c6:	f140 8089 	bpl.w	800fadc <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 800f9ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f9cc:	b10b      	cbz	r3, 800f9d2 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f9d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f9d4:	b323      	cbz	r3, 800fa20 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f9d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f9d8:	07da      	lsls	r2, r3, #31
 800f9da:	d51a      	bpl.n	800fa12 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 800f9dc:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800f9de:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 800f9e0:	4b44      	ldr	r3, [pc, #272]	; (800faf4 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800f9e2:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 800f9e6:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 800f9ea:	6813      	ldr	r3, [r2, #0]
 800f9ec:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 800f9f0:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 800f9f2:	6013      	str	r3, [r2, #0]
 800f9f4:	e002      	b.n	800f9fc <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f9f6:	6813      	ldr	r3, [r2, #0]
 800f9f8:	07db      	lsls	r3, r3, #31
 800f9fa:	d504      	bpl.n	800fa06 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 800f9fc:	9b01      	ldr	r3, [sp, #4]
 800f9fe:	3301      	adds	r3, #1
 800fa00:	42b3      	cmp	r3, r6
 800fa02:	9301      	str	r3, [sp, #4]
 800fa04:	d9f7      	bls.n	800f9f6 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 800fa06:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 800fa08:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800fa0a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800fa0e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800fa12:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800fa14:	b123      	cbz	r3, 800fa20 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 800fa16:	4620      	mov	r0, r4
}
 800fa18:	b003      	add	sp, #12
 800fa1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800fa1e:	4718      	bx	r3
}
 800fa20:	b003      	add	sp, #12
 800fa22:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800fa24:	6808      	ldr	r0, [r1, #0]
 800fa26:	f020 0004 	bic.w	r0, r0, #4
 800fa2a:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800fa2c:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800fa2e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800fa30:	f042 0201 	orr.w	r2, r2, #1
 800fa34:	6562      	str	r2, [r4, #84]	; 0x54
 800fa36:	e79b      	b.n	800f970 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800fa38:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800fa3a:	680a      	ldr	r2, [r1, #0]
 800fa3c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fa40:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800fa42:	d118      	bne.n	800fa76 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fa44:	05d2      	lsls	r2, r2, #23
 800fa46:	d403      	bmi.n	800fa50 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fa48:	680a      	ldr	r2, [r1, #0]
 800fa4a:	f022 0208 	bic.w	r2, r2, #8
 800fa4e:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800fa50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fa52:	2a00      	cmp	r2, #0
 800fa54:	d0a4      	beq.n	800f9a0 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800fa56:	4620      	mov	r0, r4
 800fa58:	4790      	blx	r2
 800fa5a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800fa5c:	e7a0      	b.n	800f9a0 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800fa5e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800fa60:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800fa62:	f042 0204 	orr.w	r2, r2, #4
 800fa66:	6562      	str	r2, [r4, #84]	; 0x54
 800fa68:	e792      	b.n	800f990 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800fa6a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800fa6c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800fa6e:	f042 0202 	orr.w	r2, r2, #2
 800fa72:	6562      	str	r2, [r4, #84]	; 0x54
 800fa74:	e784      	b.n	800f980 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fa76:	0311      	lsls	r1, r2, #12
 800fa78:	d5ea      	bpl.n	800fa50 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800fa7a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800fa7c:	2a00      	cmp	r2, #0
 800fa7e:	d1ea      	bne.n	800fa56 <HAL_DMA_IRQHandler+0x10a>
 800fa80:	e78e      	b.n	800f9a0 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800fa82:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800fa84:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800fa86:	f022 0216 	bic.w	r2, r2, #22
 800fa8a:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800fa8c:	694a      	ldr	r2, [r1, #20]
 800fa8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fa92:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800fa94:	b338      	cbz	r0, 800fae6 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fa96:	680a      	ldr	r2, [r1, #0]
 800fa98:	f022 0208 	bic.w	r2, r2, #8
 800fa9c:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fa9e:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 800faa0:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 800faa2:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800faa4:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 800faa8:	6d22      	ldr	r2, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800faaa:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800faac:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800fab0:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800fab4:	2a00      	cmp	r2, #0
 800fab6:	d0b3      	beq.n	800fa20 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 800fab8:	4620      	mov	r0, r4
}
 800faba:	b003      	add	sp, #12
 800fabc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800fac0:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fac2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800fac6:	d180      	bne.n	800f9ca <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800fac8:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800faca:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800facc:	f022 0210 	bic.w	r2, r2, #16
 800fad0:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800fad2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800fad6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800fada:	e776      	b.n	800f9ca <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 800fadc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fade:	2b00      	cmp	r3, #0
 800fae0:	f47f af75 	bne.w	800f9ce <HAL_DMA_IRQHandler+0x82>
 800fae4:	e775      	b.n	800f9d2 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800fae6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800fae8:	2a00      	cmp	r2, #0
 800faea:	d1d4      	bne.n	800fa96 <HAL_DMA_IRQHandler+0x14a>
 800faec:	e7d7      	b.n	800fa9e <HAL_DMA_IRQHandler+0x152>
 800faee:	bf00      	nop
 800faf0:	2000002c 	.word	0x2000002c
 800faf4:	1b4e81b5 	.word	0x1b4e81b5

0800faf8 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800faf8:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800fafa:	4770      	bx	lr

0800fafc <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800fafc:	b340      	cbz	r0, 800fb50 <HAL_DMA2D_Init+0x54>
{
 800fafe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800fb00:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800fb04:	4604      	mov	r4, r0
 800fb06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fb0a:	b1e3      	cbz	r3, 800fb46 <HAL_DMA2D_Init+0x4a>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800fb0c:	2202      	movs	r2, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800fb0e:	68a7      	ldr	r7, [r4, #8]
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800fb10:	2500      	movs	r5, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800fb12:	2601      	movs	r6, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800fb14:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39

  return HAL_OK;
 800fb18:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800fb1a:	e9d4 3100 	ldrd	r3, r1, [r4]
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800fb24:	430a      	orrs	r2, r1
 800fb26:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800fb28:	6b59      	ldr	r1, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800fb2a:	4a0a      	ldr	r2, [pc, #40]	; (800fb54 <HAL_DMA2D_Init+0x58>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800fb2c:	f021 0107 	bic.w	r1, r1, #7
 800fb30:	4339      	orrs	r1, r7
 800fb32:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800fb34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800fb36:	400a      	ands	r2, r1
 800fb38:	68e1      	ldr	r1, [r4, #12]
 800fb3a:	430a      	orrs	r2, r1
 800fb3c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800fb3e:	63e5      	str	r5, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800fb40:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
}
 800fb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800fb46:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 800fb4a:	f7fb f9bb 	bl	800aec4 <HAL_DMA2D_MspInit>
 800fb4e:	e7dd      	b.n	800fb0c <HAL_DMA2D_Init+0x10>
     return HAL_ERROR;
 800fb50:	2001      	movs	r0, #1
}
 800fb52:	4770      	bx	lr
 800fb54:	ffffc000 	.word	0xffffc000

0800fb58 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800fb58:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800fb5a:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 800fb5e:	2c01      	cmp	r4, #1
 800fb60:	d036      	beq.n	800fbd0 <HAL_DMA2D_Start+0x78>
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800fb62:	6804      	ldr	r4, [r0, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800fb64:	2502      	movs	r5, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800fb66:	9e03      	ldr	r6, [sp, #12]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800fb68:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800fb6c:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 800fb70:	6c65      	ldr	r5, [r4, #68]	; 0x44
  __HAL_LOCK(hdma2d);
 800fb72:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800fb74:	f005 4540 	and.w	r5, r5, #3221225472	; 0xc0000000
  __HAL_LOCK(hdma2d);
 800fb78:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800fb7c:	6846      	ldr	r6, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800fb7e:	432b      	orrs	r3, r5
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800fb80:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800fb84:	6463      	str	r3, [r4, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800fb86:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800fb88:	d007      	beq.n	800fb9a <HAL_DMA2D_Start+0x42>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800fb8a:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 800fb8c:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800fb8e:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 800fb90:	f043 0301 	orr.w	r3, r3, #1
 800fb94:	6023      	str	r3, [r4, #0]
}
 800fb96:	bc70      	pop	{r4, r5, r6}
 800fb98:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800fb9a:	6882      	ldr	r2, [r0, #8]
 800fb9c:	b1b2      	cbz	r2, 800fbcc <HAL_DMA2D_Start+0x74>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800fb9e:	2a01      	cmp	r2, #1
 800fba0:	d024      	beq.n	800fbec <HAL_DMA2D_Start+0x94>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800fba2:	2a02      	cmp	r2, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800fba4:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800fba8:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800fbac:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800fbae:	d020      	beq.n	800fbf2 <HAL_DMA2D_Start+0x9a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800fbb0:	2a03      	cmp	r2, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800fbb2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800fbb6:	d00e      	beq.n	800fbd6 <HAL_DMA2D_Start+0x7e>
      tmp2 = (tmp2 >> 20U);
 800fbb8:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 800fbba:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800fbbc:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 800fbbe:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800fbc0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800fbc4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800fbc8:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800fbcc:	63a1      	str	r1, [r4, #56]	; 0x38
 800fbce:	e7dd      	b.n	800fb8c <HAL_DMA2D_Start+0x34>
  __HAL_LOCK(hdma2d);
 800fbd0:	2002      	movs	r0, #2
}
 800fbd2:	bc70      	pop	{r4, r5, r6}
 800fbd4:	4770      	bx	lr
      tmp2 = (tmp2 >> 19U);
 800fbd6:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 800fbd8:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800fbda:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 800fbdc:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800fbde:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800fbe2:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800fbe6:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800fbea:	e7ef      	b.n	800fbcc <HAL_DMA2D_Start+0x74>
      tmp = (tmp3 | tmp2 | tmp4);
 800fbec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800fbf0:	e7ec      	b.n	800fbcc <HAL_DMA2D_Start+0x74>
      tmp2 = (tmp2 >> 19U);
 800fbf2:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 800fbf4:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800fbf6:	02c9      	lsls	r1, r1, #11
 800fbf8:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800fbfc:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800fc00:	e7e4      	b.n	800fbcc <HAL_DMA2D_Start+0x74>
 800fc02:	bf00      	nop

0800fc04 <HAL_DMA2D_PollForTransfer>:
{
 800fc04:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800fc06:	2200      	movs	r2, #0
{
 800fc08:	b082      	sub	sp, #8
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800fc0a:	6803      	ldr	r3, [r0, #0]
{
 800fc0c:	4604      	mov	r4, r0
  __IO uint32_t isrflags = 0x0U;
 800fc0e:	9201      	str	r2, [sp, #4]
{
 800fc10:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800fc12:	681a      	ldr	r2, [r3, #0]
 800fc14:	07d6      	lsls	r6, r2, #31
 800fc16:	d40f      	bmi.n	800fc38 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800fc18:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800fc1a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800fc1c:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800fc1e:	0691      	lsls	r1, r2, #26
 800fc20:	d432      	bmi.n	800fc88 <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_UNLOCK(hdma2d);
 800fc22:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800fc24:	2512      	movs	r5, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800fc26:	2101      	movs	r1, #1
  return HAL_OK;
 800fc28:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800fc2a:	609d      	str	r5, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 800fc2c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800fc30:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
}
 800fc34:	b002      	add	sp, #8
 800fc36:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800fc38:	f7ff fa5a 	bl	800f0f0 <HAL_GetTick>
 800fc3c:	4606      	mov	r6, r0
 800fc3e:	1c6a      	adds	r2, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800fc40:	6823      	ldr	r3, [r4, #0]
 800fc42:	d147      	bne.n	800fcd4 <HAL_DMA2D_PollForTransfer+0xd0>
 800fc44:	685a      	ldr	r2, [r3, #4]
 800fc46:	0796      	lsls	r6, r2, #30
 800fc48:	d4e6      	bmi.n	800fc18 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800fc4a:	685a      	ldr	r2, [r3, #4]
 800fc4c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800fc4e:	9a01      	ldr	r2, [sp, #4]
 800fc50:	f012 0f21 	tst.w	r2, #33	; 0x21
 800fc54:	d0f6      	beq.n	800fc44 <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800fc56:	9a01      	ldr	r2, [sp, #4]
 800fc58:	0690      	lsls	r0, r2, #26
 800fc5a:	d503      	bpl.n	800fc64 <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800fc5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800fc5e:	f042 0202 	orr.w	r2, r2, #2
 800fc62:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800fc64:	9a01      	ldr	r2, [sp, #4]
 800fc66:	07d1      	lsls	r1, r2, #31
 800fc68:	d503      	bpl.n	800fc72 <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800fc6a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800fc6c:	f042 0201 	orr.w	r2, r2, #1
 800fc70:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800fc72:	2521      	movs	r5, #33	; 0x21
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800fc74:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 800fc76:	2200      	movs	r2, #0
        return HAL_ERROR;
 800fc78:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800fc7a:	609d      	str	r5, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800fc7c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 800fc80:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
}
 800fc84:	b002      	add	sp, #8
 800fc86:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800fc88:	f7ff fa32 	bl	800f0f0 <HAL_GetTick>
 800fc8c:	4606      	mov	r6, r0
 800fc8e:	1c68      	adds	r0, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	d13b      	bne.n	800fd0c <HAL_DMA2D_PollForTransfer+0x108>
 800fc94:	685a      	ldr	r2, [r3, #4]
 800fc96:	06d1      	lsls	r1, r2, #27
 800fc98:	d4c3      	bmi.n	800fc22 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800fc9a:	685a      	ldr	r2, [r3, #4]
 800fc9c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800fc9e:	9a01      	ldr	r2, [sp, #4]
 800fca0:	f012 0f29 	tst.w	r2, #41	; 0x29
 800fca4:	d0f6      	beq.n	800fc94 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800fca6:	9a01      	ldr	r2, [sp, #4]
 800fca8:	0712      	lsls	r2, r2, #28
 800fcaa:	d503      	bpl.n	800fcb4 <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800fcac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800fcae:	f042 0204 	orr.w	r2, r2, #4
 800fcb2:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800fcb4:	9a01      	ldr	r2, [sp, #4]
 800fcb6:	0696      	lsls	r6, r2, #26
 800fcb8:	d503      	bpl.n	800fcc2 <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800fcba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800fcbc:	f042 0202 	orr.w	r2, r2, #2
 800fcc0:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800fcc2:	9a01      	ldr	r2, [sp, #4]
 800fcc4:	07d5      	lsls	r5, r2, #31
 800fcc6:	d503      	bpl.n	800fcd0 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800fcc8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800fcca:	f042 0201 	orr.w	r2, r2, #1
 800fcce:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800fcd0:	2529      	movs	r5, #41	; 0x29
 800fcd2:	e7cf      	b.n	800fc74 <HAL_DMA2D_PollForTransfer+0x70>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800fcd4:	685a      	ldr	r2, [r3, #4]
 800fcd6:	0790      	lsls	r0, r2, #30
 800fcd8:	d49e      	bmi.n	800fc18 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800fcda:	685a      	ldr	r2, [r3, #4]
 800fcdc:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800fcde:	9a01      	ldr	r2, [sp, #4]
 800fce0:	f012 0f21 	tst.w	r2, #33	; 0x21
 800fce4:	d1b7      	bne.n	800fc56 <HAL_DMA2D_PollForTransfer+0x52>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800fce6:	f7ff fa03 	bl	800f0f0 <HAL_GetTick>
 800fcea:	1b80      	subs	r0, r0, r6
 800fcec:	42a8      	cmp	r0, r5
 800fcee:	d801      	bhi.n	800fcf4 <HAL_DMA2D_PollForTransfer+0xf0>
 800fcf0:	2d00      	cmp	r5, #0
 800fcf2:	d1a4      	bne.n	800fc3e <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800fcf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800fcf6:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 800fcf8:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800fcfa:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 800fcfe:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 800fd00:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800fd04:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800fd06:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 800fd0a:	e793      	b.n	800fc34 <HAL_DMA2D_PollForTransfer+0x30>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800fd0c:	685a      	ldr	r2, [r3, #4]
 800fd0e:	06d2      	lsls	r2, r2, #27
 800fd10:	d487      	bmi.n	800fc22 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800fd12:	685a      	ldr	r2, [r3, #4]
 800fd14:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800fd16:	9a01      	ldr	r2, [sp, #4]
 800fd18:	f012 0f29 	tst.w	r2, #41	; 0x29
 800fd1c:	d1c3      	bne.n	800fca6 <HAL_DMA2D_PollForTransfer+0xa2>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800fd1e:	f7ff f9e7 	bl	800f0f0 <HAL_GetTick>
 800fd22:	1b80      	subs	r0, r0, r6
 800fd24:	42a8      	cmp	r0, r5
 800fd26:	d8e5      	bhi.n	800fcf4 <HAL_DMA2D_PollForTransfer+0xf0>
 800fd28:	2d00      	cmp	r5, #0
 800fd2a:	d1b0      	bne.n	800fc8e <HAL_DMA2D_PollForTransfer+0x8a>
 800fd2c:	e7e2      	b.n	800fcf4 <HAL_DMA2D_PollForTransfer+0xf0>
 800fd2e:	bf00      	nop

0800fd30 <HAL_DMA2D_LineEventCallback>:
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop

0800fd34 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800fd34:	4770      	bx	lr
 800fd36:	bf00      	nop

0800fd38 <HAL_DMA2D_IRQHandler>:
{
 800fd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800fd3a:	6803      	ldr	r3, [r0, #0]
{
 800fd3c:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800fd3e:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800fd40:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800fd42:	07e9      	lsls	r1, r5, #31
 800fd44:	d517      	bpl.n	800fd76 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800fd46:	05f2      	lsls	r2, r6, #23
 800fd48:	d515      	bpl.n	800fd76 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800fd4a:	681a      	ldr	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800fd4c:	f04f 0e01 	mov.w	lr, #1
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800fd50:	f04f 0c04 	mov.w	ip, #4
      __HAL_UNLOCK(hdma2d);
 800fd54:	2700      	movs	r7, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800fd56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
      if(hdma2d->XferErrorCallback != NULL)
 800fd5a:	6941      	ldr	r1, [r0, #20]
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800fd5c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800fd5e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fd60:	ea42 020e 	orr.w	r2, r2, lr
 800fd64:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800fd66:	f8c3 e008 	str.w	lr, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800fd6a:	f880 c039 	strb.w	ip, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800fd6e:	f880 7038 	strb.w	r7, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 800fd72:	b101      	cbz	r1, 800fd76 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 800fd74:	4788      	blx	r1
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800fd76:	06af      	lsls	r7, r5, #26
 800fd78:	d516      	bpl.n	800fda8 <HAL_DMA2D_IRQHandler+0x70>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800fd7a:	04b0      	lsls	r0, r6, #18
 800fd7c:	d514      	bpl.n	800fda8 <HAL_DMA2D_IRQHandler+0x70>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800fd7e:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800fd80:	2020      	movs	r0, #32
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800fd82:	2104      	movs	r1, #4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fd8a:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hdma2d);
 800fd8c:	2200      	movs	r2, #0
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800fd8e:	6098      	str	r0, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800fd90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hdma2d);
 800fd92:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800fd96:	f043 0302 	orr.w	r3, r3, #2
      if(hdma2d->XferErrorCallback != NULL)
 800fd9a:	6962      	ldr	r2, [r4, #20]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800fd9c:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800fd9e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
      if(hdma2d->XferErrorCallback != NULL)
 800fda2:	b10a      	cbz	r2, 800fda8 <HAL_DMA2D_IRQHandler+0x70>
        hdma2d->XferErrorCallback(hdma2d);
 800fda4:	4620      	mov	r0, r4
 800fda6:	4790      	blx	r2
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800fda8:	0729      	lsls	r1, r5, #28
 800fdaa:	d515      	bpl.n	800fdd8 <HAL_DMA2D_IRQHandler+0xa0>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800fdac:	0532      	lsls	r2, r6, #20
 800fdae:	d513      	bpl.n	800fdd8 <HAL_DMA2D_IRQHandler+0xa0>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800fdb0:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800fdb2:	2008      	movs	r0, #8
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800fdb4:	2104      	movs	r1, #4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800fdb6:	681a      	ldr	r2, [r3, #0]
 800fdb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fdbc:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hdma2d);
 800fdbe:	2200      	movs	r2, #0
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800fdc0:	6098      	str	r0, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800fdc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hdma2d);
 800fdc4:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800fdc8:	430b      	orrs	r3, r1
      if(hdma2d->XferErrorCallback != NULL)
 800fdca:	6962      	ldr	r2, [r4, #20]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800fdcc:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800fdce:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
      if(hdma2d->XferErrorCallback != NULL)
 800fdd2:	b10a      	cbz	r2, 800fdd8 <HAL_DMA2D_IRQHandler+0xa0>
        hdma2d->XferErrorCallback(hdma2d);
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	4790      	blx	r2
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800fdd8:	076b      	lsls	r3, r5, #29
 800fdda:	d501      	bpl.n	800fde0 <HAL_DMA2D_IRQHandler+0xa8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800fddc:	0577      	lsls	r7, r6, #21
 800fdde:	d42e      	bmi.n	800fe3e <HAL_DMA2D_IRQHandler+0x106>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800fde0:	07a8      	lsls	r0, r5, #30
 800fde2:	d514      	bpl.n	800fe0e <HAL_DMA2D_IRQHandler+0xd6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800fde4:	05b1      	lsls	r1, r6, #22
 800fde6:	d512      	bpl.n	800fe0e <HAL_DMA2D_IRQHandler+0xd6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800fde8:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800fdea:	2702      	movs	r7, #2
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800fdec:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800fdee:	2000      	movs	r0, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800fdf6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800fdf8:	609f      	str	r7, [r3, #8]
      if(hdma2d->XferCpltCallback != NULL)
 800fdfa:	6923      	ldr	r3, [r4, #16]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800fdfc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hdma2d);
 800fdfe:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800fe02:	63e2      	str	r2, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800fe04:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
      if(hdma2d->XferCpltCallback != NULL)
 800fe08:	b10b      	cbz	r3, 800fe0e <HAL_DMA2D_IRQHandler+0xd6>
        hdma2d->XferCpltCallback(hdma2d);
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800fe0e:	06ea      	lsls	r2, r5, #27
 800fe10:	d501      	bpl.n	800fe16 <HAL_DMA2D_IRQHandler+0xde>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800fe12:	04f3      	lsls	r3, r6, #19
 800fe14:	d400      	bmi.n	800fe18 <HAL_DMA2D_IRQHandler+0xe0>
}
 800fe16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800fe18:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800fe1a:	2610      	movs	r6, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800fe1c:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800fe1e:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800fe20:	681a      	ldr	r2, [r3, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800fe22:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800fe24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800fe28:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800fe2a:	609e      	str	r6, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800fe2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hdma2d);
 800fe2e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800fe32:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800fe34:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800fe38:	f7ff ff7c 	bl	800fd34 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800fe3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800fe3e:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800fe40:	2104      	movs	r1, #4
      HAL_DMA2D_LineEventCallback(hdma2d);
 800fe42:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800fe44:	681a      	ldr	r2, [r3, #0]
 800fe46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800fe4c:	6099      	str	r1, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800fe4e:	f7ff ff6f 	bl	800fd30 <HAL_DMA2D_LineEventCallback>
 800fe52:	e7c5      	b.n	800fde0 <HAL_DMA2D_IRQHandler+0xa8>

0800fe54 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800fe54:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800fe58:	2a01      	cmp	r2, #1
 800fe5a:	d049      	beq.n	800fef0 <HAL_DMA2D_ConfigLayer+0x9c>
 800fe5c:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800fe5e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
{
 800fe62:	b4f0      	push	{r4, r5, r6, r7}
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800fe64:	e9d0 2507 	ldrd	r2, r5, [r0, #28]
  __HAL_LOCK(hdma2d);
 800fe68:	2701      	movs	r7, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800fe6a:	2402      	movs	r4, #2
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800fe6c:	f1a2 0609 	sub.w	r6, r2, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800fe70:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  __HAL_LOCK(hdma2d);
 800fe74:	f883 7038 	strb.w	r7, [r3, #56]	; 0x38
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800fe78:	42be      	cmp	r6, r7
 800fe7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800fe7c:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
 800fe80:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800fe82:	d91a      	bls.n	800feba <HAL_DMA2D_ConfigLayer+0x66>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800fe84:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800fe88:	b179      	cbz	r1, 800feaa <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fe8a:	69e5      	ldr	r5, [r4, #28]
 800fe8c:	4919      	ldr	r1, [pc, #100]	; (800fef4 <HAL_DMA2D_ConfigLayer+0xa0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800fe8e:	6980      	ldr	r0, [r0, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fe90:	4029      	ands	r1, r5
 800fe92:	430a      	orrs	r2, r1
 800fe94:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800fe96:	6120      	str	r0, [r4, #16]
  __HAL_UNLOCK(hdma2d);
 800fe98:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800fe9a:	2101      	movs	r1, #1
  return HAL_OK;
 800fe9c:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800fe9e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 800fea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 800fea6:	bcf0      	pop	{r4, r5, r6, r7}
 800fea8:	4770      	bx	lr
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800feaa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800feac:	4911      	ldr	r1, [pc, #68]	; (800fef4 <HAL_DMA2D_ConfigLayer+0xa0>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800feae:	6998      	ldr	r0, [r3, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800feb0:	4029      	ands	r1, r5
 800feb2:	430a      	orrs	r2, r1
 800feb4:	6262      	str	r2, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800feb6:	61a0      	str	r0, [r4, #24]
 800feb8:	e7ee      	b.n	800fe98 <HAL_DMA2D_ConfigLayer+0x44>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800feba:	f005 467f 	and.w	r6, r5, #4278190080	; 0xff000000
 800febe:	4332      	orrs	r2, r6
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800fec0:	b151      	cbz	r1, 800fed8 <HAL_DMA2D_ConfigLayer+0x84>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fec2:	69e6      	ldr	r6, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800fec4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fec8:	490a      	ldr	r1, [pc, #40]	; (800fef4 <HAL_DMA2D_ConfigLayer+0xa0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800feca:	6980      	ldr	r0, [r0, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fecc:	4031      	ands	r1, r6
 800fece:	430a      	orrs	r2, r1
 800fed0:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800fed2:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800fed4:	6225      	str	r5, [r4, #32]
 800fed6:	e7df      	b.n	800fe98 <HAL_DMA2D_ConfigLayer+0x44>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800fed8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800feda:	4906      	ldr	r1, [pc, #24]	; (800fef4 <HAL_DMA2D_ConfigLayer+0xa0>)
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800fedc:	6a58      	ldr	r0, [r3, #36]	; 0x24
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800fede:	4029      	ands	r1, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800fee0:	699d      	ldr	r5, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800fee2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800fee6:	430a      	orrs	r2, r1
 800fee8:	6262      	str	r2, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800feea:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800feec:	62a0      	str	r0, [r4, #40]	; 0x28
 800feee:	e7d3      	b.n	800fe98 <HAL_DMA2D_ConfigLayer+0x44>
  __HAL_LOCK(hdma2d);
 800fef0:	2002      	movs	r0, #2
}
 800fef2:	4770      	bx	lr
 800fef4:	00fcfff0 	.word	0x00fcfff0

0800fef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fefc:	f8df c22c 	ldr.w	ip, [pc, #556]	; 801012c <HAL_GPIO_Init+0x234>
{
 800ff00:	b083      	sub	sp, #12
 800ff02:	468e      	mov	lr, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 800ff04:	2500      	movs	r5, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ff06:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8010130 <HAL_GPIO_Init+0x238>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ff0a:	f8d1 8000 	ldr.w	r8, [r1]
 800ff0e:	e003      	b.n	800ff18 <HAL_GPIO_Init+0x20>
  for(position = 0; position < GPIO_NUMBER; position++)
 800ff10:	3501      	adds	r5, #1
 800ff12:	2d10      	cmp	r5, #16
 800ff14:	f000 80b6 	beq.w	8010084 <HAL_GPIO_Init+0x18c>
    ioposition = ((uint32_t)0x01) << position;
 800ff18:	2301      	movs	r3, #1
 800ff1a:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ff1c:	ea08 0103 	and.w	r1, r8, r3
    if(iocurrent == ioposition)
 800ff20:	428b      	cmp	r3, r1
 800ff22:	d1f5      	bne.n	800ff10 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ff24:	f8de 4004 	ldr.w	r4, [lr, #4]
 800ff28:	f024 0710 	bic.w	r7, r4, #16
 800ff2c:	2f02      	cmp	r7, #2
 800ff2e:	f040 80ac 	bne.w	801008a <HAL_GPIO_Init+0x192>
        temp = GPIOx->AFR[position >> 3];
 800ff32:	08ef      	lsrs	r7, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ff34:	f005 0a07 	and.w	sl, r5, #7
 800ff38:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ff3c:	f8de 2010 	ldr.w	r2, [lr, #16]
 800ff40:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ff44:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800ff48:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ff4a:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ff4e:	fa02 f20a 	lsl.w	r2, r2, sl
 800ff52:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ff56:	ea26 060b 	bic.w	r6, r6, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ff5a:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ff5e:	4332      	orrs	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ff60:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ff64:	f004 0603 	and.w	r6, r4, #3
        GPIOx->AFR[position >> 3] = temp;
 800ff68:	623a      	str	r2, [r7, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ff6a:	ea6f 020b 	mvn.w	r2, fp
      temp = GPIOx->MODER;
 800ff6e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ff70:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ff74:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ff76:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800ff78:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 800ff7a:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800ff7c:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ff80:	ea06 0b02 	and.w	fp, r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 800ff84:	f8de 600c 	ldr.w	r6, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800ff88:	40af      	lsls	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800ff8a:	fa06 f60a 	lsl.w	r6, r6, sl
 800ff8e:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 800ff92:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800ff94:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ff96:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800ff9a:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 800ff9c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800ff9e:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ffa0:	00e7      	lsls	r7, r4, #3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800ffa2:	f8de 3008 	ldr.w	r3, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800ffa6:	ea02 0206 	and.w	r2, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800ffaa:	fa03 f30a 	lsl.w	r3, r3, sl
 800ffae:	ea43 0302 	orr.w	r3, r3, r2
      GPIOx->PUPDR = temp;
 800ffb2:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ffb4:	d5ac      	bpl.n	800ff10 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ffb6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 800ffba:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ffbe:	f005 0303 	and.w	r3, r5, #3
 800ffc2:	220f      	movs	r2, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ffc4:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800ffc8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ffcc:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ffce:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 800ffd2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800ffd6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ffda:	fa02 fa03 	lsl.w	sl, r2, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ffde:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800ffe2:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ffe4:	4e48      	ldr	r6, [pc, #288]	; (8010108 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ffe6:	9a01      	ldr	r2, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ffe8:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2];
 800ffea:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ffec:	ea22 020a 	bic.w	r2, r2, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800fff0:	d020      	beq.n	8010034 <HAL_GPIO_Init+0x13c>
 800fff2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800fff6:	42b0      	cmp	r0, r6
 800fff8:	d05e      	beq.n	80100b8 <HAL_GPIO_Init+0x1c0>
 800fffa:	4e44      	ldr	r6, [pc, #272]	; (801010c <HAL_GPIO_Init+0x214>)
 800fffc:	42b0      	cmp	r0, r6
 800fffe:	d060      	beq.n	80100c2 <HAL_GPIO_Init+0x1ca>
 8010000:	4e43      	ldr	r6, [pc, #268]	; (8010110 <HAL_GPIO_Init+0x218>)
 8010002:	42b0      	cmp	r0, r6
 8010004:	d062      	beq.n	80100cc <HAL_GPIO_Init+0x1d4>
 8010006:	4e43      	ldr	r6, [pc, #268]	; (8010114 <HAL_GPIO_Init+0x21c>)
 8010008:	42b0      	cmp	r0, r6
 801000a:	d064      	beq.n	80100d6 <HAL_GPIO_Init+0x1de>
 801000c:	4e42      	ldr	r6, [pc, #264]	; (8010118 <HAL_GPIO_Init+0x220>)
 801000e:	42b0      	cmp	r0, r6
 8010010:	d06b      	beq.n	80100ea <HAL_GPIO_Init+0x1f2>
 8010012:	4e42      	ldr	r6, [pc, #264]	; (801011c <HAL_GPIO_Init+0x224>)
 8010014:	42b0      	cmp	r0, r6
 8010016:	d06d      	beq.n	80100f4 <HAL_GPIO_Init+0x1fc>
 8010018:	4e41      	ldr	r6, [pc, #260]	; (8010120 <HAL_GPIO_Init+0x228>)
 801001a:	42b0      	cmp	r0, r6
 801001c:	d060      	beq.n	80100e0 <HAL_GPIO_Init+0x1e8>
 801001e:	4e41      	ldr	r6, [pc, #260]	; (8010124 <HAL_GPIO_Init+0x22c>)
 8010020:	42b0      	cmp	r0, r6
 8010022:	d06c      	beq.n	80100fe <HAL_GPIO_Init+0x206>
 8010024:	4e40      	ldr	r6, [pc, #256]	; (8010128 <HAL_GPIO_Init+0x230>)
 8010026:	42b0      	cmp	r0, r6
 8010028:	bf0c      	ite	eq
 801002a:	2609      	moveq	r6, #9
 801002c:	260a      	movne	r6, #10
 801002e:	fa06 f303 	lsl.w	r3, r6, r3
 8010032:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 8010034:	60ba      	str	r2, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010036:	03e6      	lsls	r6, r4, #15
        temp = EXTI->IMR;
 8010038:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 801003c:	ea6f 0201 	mvn.w	r2, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8010040:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8010044:	bf54      	ite	pl
 8010046:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8010048:	430b      	orrmi	r3, r1
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801004a:	03a7      	lsls	r7, r4, #14
        EXTI->IMR = temp;
 801004c:	f8cc 3000 	str.w	r3, [ip]
        temp = EXTI->EMR;
 8010050:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 8010054:	bf54      	ite	pl
 8010056:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8010058:	430b      	orrmi	r3, r1
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801005a:	02e6      	lsls	r6, r4, #11
        EXTI->EMR = temp;
 801005c:	f8cc 3004 	str.w	r3, [ip, #4]
        temp = EXTI->RTSR;
 8010060:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
 8010064:	bf54      	ite	pl
 8010066:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8010068:	430b      	orrmi	r3, r1
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801006a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 801006c:	f8cc 3008 	str.w	r3, [ip, #8]
        temp = EXTI->FTSR;
 8010070:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
 8010074:	bf54      	ite	pl
 8010076:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8010078:	430b      	orrmi	r3, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 801007a:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 801007c:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8010080:	f47f af4a 	bne.w	800ff18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8010084:	b003      	add	sp, #12
 8010086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801008a:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 801008e:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8010090:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010094:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010096:	ea04 0602 	and.w	r6, r4, r2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 801009a:	fa02 f20a 	lsl.w	r2, r2, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801009e:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80100a0:	ea6f 0202 	mvn.w	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80100a4:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80100a8:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80100ac:	ea46 060b 	orr.w	r6, r6, fp
      GPIOx->MODER = temp;
 80100b0:	6006      	str	r6, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80100b2:	f63f af74 	bhi.w	800ff9e <HAL_GPIO_Init+0xa6>
 80100b6:	e760      	b.n	800ff7a <HAL_GPIO_Init+0x82>
 80100b8:	2601      	movs	r6, #1
 80100ba:	fa06 f303 	lsl.w	r3, r6, r3
 80100be:	431a      	orrs	r2, r3
 80100c0:	e7b8      	b.n	8010034 <HAL_GPIO_Init+0x13c>
 80100c2:	2602      	movs	r6, #2
 80100c4:	fa06 f303 	lsl.w	r3, r6, r3
 80100c8:	431a      	orrs	r2, r3
 80100ca:	e7b3      	b.n	8010034 <HAL_GPIO_Init+0x13c>
 80100cc:	2603      	movs	r6, #3
 80100ce:	fa06 f303 	lsl.w	r3, r6, r3
 80100d2:	431a      	orrs	r2, r3
 80100d4:	e7ae      	b.n	8010034 <HAL_GPIO_Init+0x13c>
 80100d6:	2604      	movs	r6, #4
 80100d8:	fa06 f303 	lsl.w	r3, r6, r3
 80100dc:	431a      	orrs	r2, r3
 80100de:	e7a9      	b.n	8010034 <HAL_GPIO_Init+0x13c>
 80100e0:	2607      	movs	r6, #7
 80100e2:	fa06 f303 	lsl.w	r3, r6, r3
 80100e6:	431a      	orrs	r2, r3
 80100e8:	e7a4      	b.n	8010034 <HAL_GPIO_Init+0x13c>
 80100ea:	2605      	movs	r6, #5
 80100ec:	fa06 f303 	lsl.w	r3, r6, r3
 80100f0:	431a      	orrs	r2, r3
 80100f2:	e79f      	b.n	8010034 <HAL_GPIO_Init+0x13c>
 80100f4:	2606      	movs	r6, #6
 80100f6:	fa06 f303 	lsl.w	r3, r6, r3
 80100fa:	431a      	orrs	r2, r3
 80100fc:	e79a      	b.n	8010034 <HAL_GPIO_Init+0x13c>
 80100fe:	2608      	movs	r6, #8
 8010100:	fa06 f303 	lsl.w	r3, r6, r3
 8010104:	431a      	orrs	r2, r3
 8010106:	e795      	b.n	8010034 <HAL_GPIO_Init+0x13c>
 8010108:	40020000 	.word	0x40020000
 801010c:	40020800 	.word	0x40020800
 8010110:	40020c00 	.word	0x40020c00
 8010114:	40021000 	.word	0x40021000
 8010118:	40021400 	.word	0x40021400
 801011c:	40021800 	.word	0x40021800
 8010120:	40021c00 	.word	0x40021c00
 8010124:	40022000 	.word	0x40022000
 8010128:	40022400 	.word	0x40022400
 801012c:	40013c00 	.word	0x40013c00
 8010130:	40023800 	.word	0x40023800

08010134 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8010138:	2300      	movs	r3, #0
 801013a:	f8df a170 	ldr.w	sl, [pc, #368]	; 80102ac <HAL_GPIO_DeInit+0x178>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 801013e:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80102b0 <HAL_GPIO_DeInit+0x17c>
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8010142:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80102b4 <HAL_GPIO_DeInit+0x180>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8010146:	f8df b170 	ldr.w	fp, [pc, #368]	; 80102b8 <HAL_GPIO_DeInit+0x184>
 801014a:	e002      	b.n	8010152 <HAL_GPIO_DeInit+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 801014c:	3301      	adds	r3, #1
 801014e:	2b10      	cmp	r3, #16
 8010150:	d079      	beq.n	8010246 <HAL_GPIO_DeInit+0x112>
    ioposition = ((uint32_t)0x01) << position;
 8010152:	2401      	movs	r4, #1
 8010154:	fa04 f503 	lsl.w	r5, r4, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8010158:	ea05 0601 	and.w	r6, r5, r1
    if(iocurrent == ioposition)
 801015c:	42b5      	cmp	r5, r6
 801015e:	d1f5      	bne.n	801014c <HAL_GPIO_DeInit+0x18>
 8010160:	f023 0703 	bic.w	r7, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010164:	f003 0203 	and.w	r2, r3, #3
 8010168:	f04f 0c0f 	mov.w	ip, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 801016c:	4548      	cmp	r0, r9
 801016e:	4457      	add	r7, sl
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010170:	ea4f 0282 	mov.w	r2, r2, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 8010174:	f8d7 e008 	ldr.w	lr, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010178:	fa0c fc02 	lsl.w	ip, ip, r2
 801017c:	ea0c 0e0e 	and.w	lr, ip, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8010180:	d01d      	beq.n	80101be <HAL_GPIO_DeInit+0x8a>
 8010182:	4558      	cmp	r0, fp
 8010184:	d018      	beq.n	80101b8 <HAL_GPIO_DeInit+0x84>
 8010186:	4c41      	ldr	r4, [pc, #260]	; (801028c <HAL_GPIO_DeInit+0x158>)
 8010188:	42a0      	cmp	r0, r4
 801018a:	d05e      	beq.n	801024a <HAL_GPIO_DeInit+0x116>
 801018c:	4c40      	ldr	r4, [pc, #256]	; (8010290 <HAL_GPIO_DeInit+0x15c>)
 801018e:	42a0      	cmp	r0, r4
 8010190:	d05f      	beq.n	8010252 <HAL_GPIO_DeInit+0x11e>
 8010192:	4c40      	ldr	r4, [pc, #256]	; (8010294 <HAL_GPIO_DeInit+0x160>)
 8010194:	42a0      	cmp	r0, r4
 8010196:	d060      	beq.n	801025a <HAL_GPIO_DeInit+0x126>
 8010198:	4c3f      	ldr	r4, [pc, #252]	; (8010298 <HAL_GPIO_DeInit+0x164>)
 801019a:	42a0      	cmp	r0, r4
 801019c:	d061      	beq.n	8010262 <HAL_GPIO_DeInit+0x12e>
 801019e:	4c3f      	ldr	r4, [pc, #252]	; (801029c <HAL_GPIO_DeInit+0x168>)
 80101a0:	42a0      	cmp	r0, r4
 80101a2:	d062      	beq.n	801026a <HAL_GPIO_DeInit+0x136>
 80101a4:	4c3e      	ldr	r4, [pc, #248]	; (80102a0 <HAL_GPIO_DeInit+0x16c>)
 80101a6:	42a0      	cmp	r0, r4
 80101a8:	d067      	beq.n	801027a <HAL_GPIO_DeInit+0x146>
 80101aa:	4c3e      	ldr	r4, [pc, #248]	; (80102a4 <HAL_GPIO_DeInit+0x170>)
 80101ac:	42a0      	cmp	r0, r4
 80101ae:	d068      	beq.n	8010282 <HAL_GPIO_DeInit+0x14e>
 80101b0:	4c3d      	ldr	r4, [pc, #244]	; (80102a8 <HAL_GPIO_DeInit+0x174>)
 80101b2:	42a0      	cmp	r0, r4
 80101b4:	d05d      	beq.n	8010272 <HAL_GPIO_DeInit+0x13e>
 80101b6:	240a      	movs	r4, #10
 80101b8:	fa04 f202 	lsl.w	r2, r4, r2
 80101bc:	e000      	b.n	80101c0 <HAL_GPIO_DeInit+0x8c>
 80101be:	2200      	movs	r2, #0
 80101c0:	4596      	cmp	lr, r2
 80101c2:	d118      	bne.n	80101f6 <HAL_GPIO_DeInit+0xc2>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80101c4:	68ba      	ldr	r2, [r7, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80101c6:	43f6      	mvns	r6, r6
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80101c8:	ea22 020c 	bic.w	r2, r2, ip
 80101cc:	60ba      	str	r2, [r7, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80101ce:	f8d8 2000 	ldr.w	r2, [r8]
 80101d2:	4032      	ands	r2, r6
 80101d4:	f8c8 2000 	str.w	r2, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80101d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80101dc:	4032      	ands	r2, r6
 80101de:	f8c8 2004 	str.w	r2, [r8, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80101e2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80101e6:	4032      	ands	r2, r6
 80101e8:	f8c8 2008 	str.w	r2, [r8, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80101ec:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80101f0:	4016      	ands	r6, r2
 80101f2:	f8c8 600c 	str.w	r6, [r8, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80101f6:	2403      	movs	r4, #3
 80101f8:	005a      	lsls	r2, r3, #1
 80101fa:	f8d0 c000 	ldr.w	ip, [r0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80101fe:	270f      	movs	r7, #15
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8010200:	fa04 f202 	lsl.w	r2, r4, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010204:	fa23 f604 	lsr.w	r6, r3, r4
 8010208:	f003 0407 	and.w	r4, r3, #7
  for(position = 0; position < GPIO_NUMBER; position++)
 801020c:	3301      	adds	r3, #1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 801020e:	43d2      	mvns	r2, r2
 8010210:	eb00 0686 	add.w	r6, r0, r6, lsl #2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010214:	00a4      	lsls	r4, r4, #2
  for(position = 0; position < GPIO_NUMBER; position++)
 8010216:	2b10      	cmp	r3, #16
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8010218:	ea0c 0c02 	and.w	ip, ip, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801021c:	fa07 f704 	lsl.w	r7, r7, r4
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8010220:	f8c0 c000 	str.w	ip, [r0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010224:	6a34      	ldr	r4, [r6, #32]
 8010226:	ea24 0407 	bic.w	r4, r4, r7
 801022a:	6234      	str	r4, [r6, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801022c:	6884      	ldr	r4, [r0, #8]
 801022e:	ea04 0402 	and.w	r4, r4, r2
 8010232:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010234:	6844      	ldr	r4, [r0, #4]
 8010236:	ea24 0505 	bic.w	r5, r4, r5
 801023a:	6045      	str	r5, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801023c:	68c4      	ldr	r4, [r0, #12]
 801023e:	ea02 0204 	and.w	r2, r2, r4
 8010242:	60c2      	str	r2, [r0, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8010244:	d185      	bne.n	8010152 <HAL_GPIO_DeInit+0x1e>
    }
  }
}
 8010246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801024a:	2402      	movs	r4, #2
 801024c:	fa04 f202 	lsl.w	r2, r4, r2
 8010250:	e7b6      	b.n	80101c0 <HAL_GPIO_DeInit+0x8c>
 8010252:	2403      	movs	r4, #3
 8010254:	fa04 f202 	lsl.w	r2, r4, r2
 8010258:	e7b2      	b.n	80101c0 <HAL_GPIO_DeInit+0x8c>
 801025a:	2404      	movs	r4, #4
 801025c:	fa04 f202 	lsl.w	r2, r4, r2
 8010260:	e7ae      	b.n	80101c0 <HAL_GPIO_DeInit+0x8c>
 8010262:	2405      	movs	r4, #5
 8010264:	fa04 f202 	lsl.w	r2, r4, r2
 8010268:	e7aa      	b.n	80101c0 <HAL_GPIO_DeInit+0x8c>
 801026a:	2406      	movs	r4, #6
 801026c:	fa04 f202 	lsl.w	r2, r4, r2
 8010270:	e7a6      	b.n	80101c0 <HAL_GPIO_DeInit+0x8c>
 8010272:	2409      	movs	r4, #9
 8010274:	fa04 f202 	lsl.w	r2, r4, r2
 8010278:	e7a2      	b.n	80101c0 <HAL_GPIO_DeInit+0x8c>
 801027a:	2407      	movs	r4, #7
 801027c:	fa04 f202 	lsl.w	r2, r4, r2
 8010280:	e79e      	b.n	80101c0 <HAL_GPIO_DeInit+0x8c>
 8010282:	2408      	movs	r4, #8
 8010284:	fa04 f202 	lsl.w	r2, r4, r2
 8010288:	e79a      	b.n	80101c0 <HAL_GPIO_DeInit+0x8c>
 801028a:	bf00      	nop
 801028c:	40020800 	.word	0x40020800
 8010290:	40020c00 	.word	0x40020c00
 8010294:	40021000 	.word	0x40021000
 8010298:	40021400 	.word	0x40021400
 801029c:	40021800 	.word	0x40021800
 80102a0:	40021c00 	.word	0x40021c00
 80102a4:	40022000 	.word	0x40022000
 80102a8:	40022400 	.word	0x40022400
 80102ac:	40013800 	.word	0x40013800
 80102b0:	40020000 	.word	0x40020000
 80102b4:	40013c00 	.word	0x40013c00
 80102b8:	40020400 	.word	0x40020400

080102bc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80102bc:	6903      	ldr	r3, [r0, #16]
 80102be:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80102c0:	bf14      	ite	ne
 80102c2:	2001      	movne	r0, #1
 80102c4:	2000      	moveq	r0, #0
 80102c6:	4770      	bx	lr

080102c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80102c8:	b902      	cbnz	r2, 80102cc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80102ca:	0409      	lsls	r1, r1, #16
 80102cc:	6181      	str	r1, [r0, #24]
  }
}
 80102ce:	4770      	bx	lr

080102d0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80102d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80102d4:	f890 42b8 	ldrb.w	r4, [r0, #696]	; 0x2b8
{
 80102d8:	b084      	sub	sp, #16
  __HAL_LOCK(hhcd);
 80102da:	2c01      	cmp	r4, #1
{
 80102dc:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80102e0:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80102e4:	f8bd e038 	ldrh.w	lr, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 80102e8:	d028      	beq.n	801033c <HAL_HCD_HC_Init+0x6c>
 80102ea:	4605      	mov	r5, r0
  hhcd->hc[ch_num].do_ping = 0U;
 80102ec:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  __HAL_LOCK(hhcd);
 80102f0:	f04f 0901 	mov.w	r9, #1
  hhcd->hc[ch_num].dev_addr = dev_address;
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80102f4:	f002 007f 	and.w	r0, r2, #127	; 0x7f
  hhcd->hc[ch_num].do_ping = 0U;
 80102f8:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
  __HAL_LOCK(hhcd);
 80102fc:	f885 92b8 	strb.w	r9, [r5, #696]	; 0x2b8

  if ((epnum & 0x80U) == 0x80U)
 8010300:	09d6      	lsrs	r6, r2, #7
  hhcd->hc[ch_num].do_ping = 0U;
 8010302:	f04f 0900 	mov.w	r9, #0
  hhcd->hc[ch_num].dev_addr = dev_address;
 8010306:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 801030a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 801030e:	f884 c03f 	strb.w	ip, [r4, #63]	; 0x3f
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8010312:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8010316:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801031a:	f884 603b 	strb.w	r6, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].do_ping = 0U;
 801031e:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d

  status =  USB_HC_Init(hhcd->Instance,
 8010322:	6828      	ldr	r0, [r5, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8010324:	f8a4 e040 	strh.w	lr, [r4, #64]	; 0x40
  status =  USB_HC_Init(hhcd->Instance,
 8010328:	9700      	str	r7, [sp, #0]
 801032a:	e9cd ce01 	strd	ip, lr, [sp, #4]
 801032e:	f005 fc0b 	bl	8015b48 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8010332:	f885 92b8 	strb.w	r9, [r5, #696]	; 0x2b8

  return status;
}
 8010336:	b004      	add	sp, #16
 8010338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 801033c:	2002      	movs	r0, #2
}
 801033e:	b004      	add	sp, #16
 8010340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010344 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8010344:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8010348:	2b01      	cmp	r3, #1
 801034a:	d00b      	beq.n	8010364 <HAL_HCD_HC_Halt+0x20>
 801034c:	2301      	movs	r3, #1
{
 801034e:	b510      	push	{r4, lr}
 8010350:	4604      	mov	r4, r0
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010352:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hhcd);
 8010354:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010358:	f005 fd5e 	bl	8015e18 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 801035c:	2000      	movs	r0, #0
 801035e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
 8010362:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8010364:	2002      	movs	r0, #2
}
 8010366:	4770      	bx	lr

08010368 <HAL_HCD_Init>:
  if (hhcd == NULL)
 8010368:	2800      	cmp	r0, #0
 801036a:	d042      	beq.n	80103f2 <HAL_HCD_Init+0x8a>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 801036c:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
{
 8010370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8010374:	f003 02ff 	and.w	r2, r3, #255	; 0xff
{
 8010378:	b08a      	sub	sp, #40	; 0x28
 801037a:	4607      	mov	r7, r0
  if (hhcd->State == HAL_HCD_STATE_RESET)
 801037c:	b3a3      	cbz	r3, 80103e8 <HAL_HCD_Init+0x80>
  hhcd->State = HAL_HCD_STATE_BUSY;
 801037e:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8010380:	463c      	mov	r4, r7
  __HAL_HCD_DISABLE(hhcd);
 8010382:	6838      	ldr	r0, [r7, #0]
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8010384:	466d      	mov	r5, sp
  hhcd->State = HAL_HCD_STATE_BUSY;
 8010386:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 801038a:	f107 0804 	add.w	r8, r7, #4
  __HAL_HCD_DISABLE(hhcd);
 801038e:	f005 fa95 	bl	80158bc <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8010392:	f854 6b10 	ldr.w	r6, [r4], #16
 8010396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801039a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801039c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801039e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80103a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80103a6:	4630      	mov	r0, r6
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80103a8:	463e      	mov	r6, r7
 80103aa:	466d      	mov	r5, sp
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80103ac:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80103b0:	f005 fa14 	bl	80157dc <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80103b4:	2101      	movs	r1, #1
 80103b6:	6838      	ldr	r0, [r7, #0]
 80103b8:	f005 fa88 	bl	80158cc <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80103bc:	f856 cb10 	ldr.w	ip, [r6], #16
 80103c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80103c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80103c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80103c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80103c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80103cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80103d0:	4660      	mov	r0, ip
 80103d2:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80103d6:	f005 faad 	bl	8015934 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 80103da:	2301      	movs	r3, #1
  return HAL_OK;
 80103dc:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 80103de:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 80103e2:	b00a      	add	sp, #40	; 0x28
 80103e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hhcd->Lock = HAL_UNLOCKED;
 80103e8:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 80103ec:	f7fb ff74 	bl	800c2d8 <HAL_HCD_MspInit>
 80103f0:	e7c5      	b.n	801037e <HAL_HCD_Init+0x16>
    return HAL_ERROR;
 80103f2:	2001      	movs	r0, #1
}
 80103f4:	4770      	bx	lr
 80103f6:	bf00      	nop

080103f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80103f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80103fa:	008c      	lsls	r4, r1, #2
{
 80103fc:	f89d c014 	ldrb.w	ip, [sp, #20]
 8010400:	9e06      	ldr	r6, [sp, #24]
  hhcd->hc[ch_num].ep_type  = ep_type;

  if (token == 0U)
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8010402:	f1bc 0f00 	cmp.w	ip, #0
  hhcd->hc[ch_num].ep_is_in = direction;
 8010406:	eb04 0501 	add.w	r5, r4, r1
{
 801040a:	f8bd 701c 	ldrh.w	r7, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 801040e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8010412:	bf14      	ite	ne
 8010414:	f04f 0e02 	movne.w	lr, #2
 8010418:	f04f 0e03 	moveq.w	lr, #3
  hhcd->hc[ch_num].ep_is_in = direction;
 801041c:	f885 203b 	strb.w	r2, [r5, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8010420:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 8010424:	f885 e042 	strb.w	lr, [r5, #66]	; 0x42
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8010428:	2b03      	cmp	r3, #3
 801042a:	d815      	bhi.n	8010458 <HAL_HCD_HC_SubmitRequest+0x60>
 801042c:	e8df f003 	tbb	[pc, r3]
 8010430:	2c2c3702 	.word	0x2c2c3702
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8010434:	f1bc 0f01 	cmp.w	ip, #1
 8010438:	d10e      	bne.n	8010458 <HAL_HCD_HC_SubmitRequest+0x60>
 801043a:	b96a      	cbnz	r2, 8010458 <HAL_HCD_HC_SubmitRequest+0x60>
      {
        if (length == 0U)
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 801043c:	1863      	adds	r3, r4, r1
        if (length == 0U)
 801043e:	2f00      	cmp	r7, #0
 8010440:	d13c      	bne.n	80104bc <HAL_HCD_HC_SubmitRequest+0xc4>
          hhcd->hc[ch_num].toggle_out = 1U;
 8010442:	2201      	movs	r2, #1
 8010444:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8010448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
        }
        else
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 801044c:	1863      	adds	r3, r4, r1
 801044e:	2202      	movs	r2, #2
 8010450:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8010454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8010458:	1863      	adds	r3, r4, r1
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 801045a:	2228      	movs	r2, #40	; 0x28
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 801045c:	2400      	movs	r4, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 801045e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8010462:	fb02 0201 	mla	r2, r2, r1, r0
  hhcd->hc[ch_num].ch_num = ch_num;
 8010466:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 801046a:	f102 0138 	add.w	r1, r2, #56	; 0x38
 801046e:	7c02      	ldrb	r2, [r0, #16]
 8010470:	6800      	ldr	r0, [r0, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8010472:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8010476:	64dc      	str	r4, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8010478:	f883 405d 	strb.w	r4, [r3, #93]	; 0x5d
  hhcd->hc[ch_num].xfer_len  = length;
 801047c:	e9c3 6711 	strd	r6, r7, [r3, #68]	; 0x44
}
 8010480:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8010484:	f005 bbfc 	b.w	8015c80 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8010488:	1863      	adds	r3, r4, r1
 801048a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
      if (direction == 0U)
 801048e:	b96a      	cbnz	r2, 80104ac <HAL_HCD_HC_SubmitRequest+0xb4>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8010490:	f893 5051 	ldrb.w	r5, [r3, #81]	; 0x51
 8010494:	b13d      	cbz	r5, 80104a6 <HAL_HCD_HC_SubmitRequest+0xae>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8010496:	2202      	movs	r2, #2
 8010498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801049c:	e7dc      	b.n	8010458 <HAL_HCD_HC_SubmitRequest+0x60>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 801049e:	1863      	adds	r3, r4, r1
 80104a0:	2200      	movs	r2, #0
 80104a2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80104a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 80104aa:	e7d5      	b.n	8010458 <HAL_HCD_HC_SubmitRequest+0x60>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80104ac:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80104b0:	2a00      	cmp	r2, #0
 80104b2:	d0f8      	beq.n	80104a6 <HAL_HCD_HC_SubmitRequest+0xae>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80104b4:	2202      	movs	r2, #2
 80104b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80104ba:	e7cd      	b.n	8010458 <HAL_HCD_HC_SubmitRequest+0x60>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80104bc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80104c0:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 80104c4:	2a00      	cmp	r2, #0
 80104c6:	d0ee      	beq.n	80104a6 <HAL_HCD_HC_SubmitRequest+0xae>
 80104c8:	e7c0      	b.n	801044c <HAL_HCD_HC_SubmitRequest+0x54>
 80104ca:	bf00      	nop

080104cc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80104cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80104d0:	6805      	ldr	r5, [r0, #0]
{
 80104d2:	b085      	sub	sp, #20
 80104d4:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80104d6:	4628      	mov	r0, r5
 80104d8:	f005 fa28 	bl	801592c <USB_GetMode>
 80104dc:	2801      	cmp	r0, #1
 80104de:	d002      	beq.n	80104e6 <HAL_HCD_IRQHandler+0x1a>
      HCD_RXQLVL_IRQHandler(hhcd);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
    }
  }
}
 80104e0:	b005      	add	sp, #20
 80104e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80104e6:	6820      	ldr	r0, [r4, #0]
 80104e8:	f005 fa1c 	bl	8015924 <USB_ReadInterrupts>
 80104ec:	2800      	cmp	r0, #0
 80104ee:	d0f7      	beq.n	80104e0 <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80104f0:	6820      	ldr	r0, [r4, #0]
 80104f2:	f005 fa17 	bl	8015924 <USB_ReadInterrupts>
 80104f6:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80104fa:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80104fc:	d002      	beq.n	8010504 <HAL_HCD_IRQHandler+0x38>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80104fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010502:	6143      	str	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8010504:	f005 fa0e 	bl	8015924 <USB_ReadInterrupts>
 8010508:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 801050c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 801050e:	d002      	beq.n	8010516 <HAL_HCD_IRQHandler+0x4a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8010510:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010514:	6143      	str	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8010516:	f005 fa05 	bl	8015924 <USB_ReadInterrupts>
 801051a:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 801051e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8010520:	d002      	beq.n	8010528 <HAL_HCD_IRQHandler+0x5c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8010522:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8010526:	6143      	str	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8010528:	f005 f9fc 	bl	8015924 <USB_ReadInterrupts>
 801052c:	f010 0f02 	tst.w	r0, #2
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8010530:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8010532:	d157      	bne.n	80105e4 <HAL_HCD_IRQHandler+0x118>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8010534:	f005 f9f6 	bl	8015924 <USB_ReadInterrupts>
 8010538:	0080      	lsls	r0, r0, #2
 801053a:	f100 8116 	bmi.w	801076a <HAL_HCD_IRQHandler+0x29e>
 801053e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8010540:	f005 f9f0 	bl	8015924 <USB_ReadInterrupts>
 8010544:	01c1      	lsls	r1, r0, #7
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8010546:	6826      	ldr	r6, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8010548:	f100 80d1 	bmi.w	80106ee <HAL_HCD_IRQHandler+0x222>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 801054c:	4630      	mov	r0, r6
 801054e:	f005 f9e9 	bl	8015924 <USB_ReadInterrupts>
 8010552:	0703      	lsls	r3, r0, #28
 8010554:	f100 811b 	bmi.w	801078e <HAL_HCD_IRQHandler+0x2c2>
 8010558:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 801055a:	f005 f9e3 	bl	8015924 <USB_ReadInterrupts>
 801055e:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8010562:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8010564:	d141      	bne.n	80105ea <HAL_HCD_IRQHandler+0x11e>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8010566:	f005 f9dd 	bl	8015924 <USB_ReadInterrupts>
 801056a:	06c3      	lsls	r3, r0, #27
 801056c:	d5b8      	bpl.n	80104e0 <HAL_HCD_IRQHandler+0x14>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801056e:	6825      	ldr	r5, [r4, #0]
 8010570:	69ab      	ldr	r3, [r5, #24]
 8010572:	f023 0310 	bic.w	r3, r3, #16
 8010576:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP;
 8010578:	6a2e      	ldr	r6, [r5, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 801057a:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 801057e:	2a02      	cmp	r2, #2
 8010580:	d12b      	bne.n	80105da <HAL_HCD_IRQHandler+0x10e>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010582:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8010586:	f1b8 0f00 	cmp.w	r8, #0
 801058a:	d026      	beq.n	80105da <HAL_HCD_IRQHandler+0x10e>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 801058c:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8010590:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8010594:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8010598:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801059a:	b1f1      	cbz	r1, 80105da <HAL_HCD_IRQHandler+0x10e>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 801059c:	4642      	mov	r2, r8
 801059e:	4628      	mov	r0, r5
 80105a0:	f005 f9ac 	bl	80158fc <USB_ReadPacket>
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80105a4:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 80105a8:	0173      	lsls	r3, r6, #5
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80105aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80105ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80105ae:	18ee      	adds	r6, r5, r3
 80105b0:	4abc      	ldr	r2, [pc, #752]	; (80108a4 <HAL_HCD_IRQHandler+0x3d8>)
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80105b2:	4440      	add	r0, r8
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80105b4:	4441      	add	r1, r8
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80105b6:	6936      	ldr	r6, [r6, #16]
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80105b8:	6478      	str	r0, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80105ba:	4032      	ands	r2, r6
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80105bc:	64f9      	str	r1, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80105be:	b15a      	cbz	r2, 80105d8 <HAL_HCD_IRQHandler+0x10c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80105c0:	58ea      	ldr	r2, [r5, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80105c2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80105c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80105ca:	50ea      	str	r2, [r5, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80105cc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80105d0:	f083 0301 	eor.w	r3, r3, #1
 80105d4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80105d8:	6825      	ldr	r5, [r4, #0]
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80105da:	69ab      	ldr	r3, [r5, #24]
 80105dc:	f043 0310 	orr.w	r3, r3, #16
 80105e0:	61ab      	str	r3, [r5, #24]
 80105e2:	e77d      	b.n	80104e0 <HAL_HCD_IRQHandler+0x14>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80105e4:	2302      	movs	r3, #2
 80105e6:	6143      	str	r3, [r0, #20]
 80105e8:	e7a4      	b.n	8010534 <HAL_HCD_IRQHandler+0x68>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80105ea:	f005 fc0f 	bl	8015e0c <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80105ee:	68a1      	ldr	r1, [r4, #8]
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80105f0:	4681      	mov	r9, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80105f2:	2900      	cmp	r1, #0
 80105f4:	f000 80d2 	beq.w	801079c <HAL_HCD_IRQHandler+0x2d0>
 80105f8:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 80105fc:	6820      	ldr	r0, [r4, #0]
 80105fe:	2600      	movs	r6, #0
 8010600:	e03b      	b.n	801067a <HAL_HCD_IRQHandler+0x1ae>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8010602:	075a      	lsls	r2, r3, #29
 8010604:	f140 80cf 	bpl.w	80107a6 <HAL_HCD_IRQHandler+0x2da>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8010608:	2304      	movs	r3, #4
 801060a:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	f043 0302 	orr.w	r3, r3, #2
 8010612:	60fb      	str	r3, [r7, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	059b      	lsls	r3, r3, #22
 8010618:	f100 80ff 	bmi.w	801081a <HAL_HCD_IRQHandler+0x34e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	07d8      	lsls	r0, r3, #31
 8010620:	f140 80ce 	bpl.w	80107c0 <HAL_HCD_IRQHandler+0x2f4>
    if (hhcd->Init.dma_enable != 0U)
 8010624:	6923      	ldr	r3, [r4, #16]
 8010626:	2b00      	cmp	r3, #0
 8010628:	f040 8159 	bne.w	80108de <HAL_HCD_IRQHandler+0x412>
 801062c:	ea4f 0388 	mov.w	r3, r8, lsl #2
    hhcd->hc[ch_num].state = HC_XFRC;
 8010630:	eb03 0c08 	add.w	ip, r3, r8
    hhcd->hc[ch_num].ErrCnt = 0U;
 8010634:	2200      	movs	r2, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 8010636:	f04f 0e01 	mov.w	lr, #1
 801063a:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 801063e:	f8cc 2058 	str.w	r2, [ip, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 8010642:	f88c e05d 	strb.w	lr, [ip, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8010646:	f8c7 e008 	str.w	lr, [r7, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 801064a:	f89c 203f 	ldrb.w	r2, [ip, #63]	; 0x3f
 801064e:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 8010652:	f000 8186 	beq.w	8010962 <HAL_HCD_IRQHandler+0x496>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8010656:	2a03      	cmp	r2, #3
 8010658:	f000 81d3 	beq.w	8010a02 <HAL_HCD_IRQHandler+0x536>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 801065c:	4443      	add	r3, r8
 801065e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8010662:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8010666:	f082 0201 	eor.w	r2, r2, #1
 801066a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 801066e:	68a1      	ldr	r1, [r4, #8]
 8010670:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8010672:	3601      	adds	r6, #1
 8010674:	428e      	cmp	r6, r1
 8010676:	f080 8092 	bcs.w	801079e <HAL_HCD_IRQHandler+0x2d2>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 801067a:	f006 030f 	and.w	r3, r6, #15
 801067e:	fa29 f303 	lsr.w	r3, r9, r3
 8010682:	07df      	lsls	r7, r3, #31
 8010684:	d5f5      	bpl.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
 8010686:	fa5f f886 	uxtb.w	r8, r6
 801068a:	f500 6aa0 	add.w	sl, r0, #1280	; 0x500
 801068e:	0173      	lsls	r3, r6, #5
 8010690:	ea4f 1b48 	mov.w	fp, r8, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8010694:	595b      	ldr	r3, [r3, r5]
 8010696:	eb0b 070a 	add.w	r7, fp, sl
 801069a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 801069e:	68bb      	ldr	r3, [r7, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80106a0:	d1af      	bne.n	8010602 <HAL_HCD_IRQHandler+0x136>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80106a2:	f013 0304 	ands.w	r3, r3, #4
 80106a6:	f040 8084 	bne.w	80107b2 <HAL_HCD_IRQHandler+0x2e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80106aa:	68ba      	ldr	r2, [r7, #8]
 80106ac:	f012 0220 	ands.w	r2, r2, #32
 80106b0:	f000 80c1 	beq.w	8010836 <HAL_HCD_IRQHandler+0x36a>
    if (hhcd->hc[ch_num].do_ping == 1U)
 80106b4:	eb08 0288 	add.w	r2, r8, r8, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80106b8:	f04f 0c20 	mov.w	ip, #32
    if (hhcd->hc[ch_num].do_ping == 1U)
 80106bc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80106c0:	f8c7 c008 	str.w	ip, [r7, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80106c4:	f892 c03d 	ldrb.w	ip, [r2, #61]	; 0x3d
 80106c8:	f1bc 0f01 	cmp.w	ip, #1
 80106cc:	d1d1      	bne.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
      hhcd->hc[ch_num].do_ping = 0U;
 80106ce:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80106d2:	f04f 0c02 	mov.w	ip, #2
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80106d6:	68fb      	ldr	r3, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80106d8:	4641      	mov	r1, r8
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80106da:	f882 c05c 	strb.w	ip, [r2, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80106de:	f043 0302 	orr.w	r3, r3, #2
 80106e2:	60fb      	str	r3, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80106e4:	f005 fb98 	bl	8015e18 <USB_HC_Halt>
 80106e8:	68a1      	ldr	r1, [r4, #8]
 80106ea:	6820      	ldr	r0, [r4, #0]
 80106ec:	e7c1      	b.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80106ee:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80106f2:	4637      	mov	r7, r6
  hprt0 = USBx_HPRT0;
 80106f4:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80106f6:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80106fa:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80106fc:	9b03      	ldr	r3, [sp, #12]
 80106fe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8010702:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8010704:	9b02      	ldr	r3, [sp, #8]
 8010706:	079a      	lsls	r2, r3, #30
 8010708:	d507      	bpl.n	801071a <HAL_HCD_IRQHandler+0x24e>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 801070a:	9b02      	ldr	r3, [sp, #8]
 801070c:	07db      	lsls	r3, r3, #31
 801070e:	f100 8111 	bmi.w	8010934 <HAL_HCD_IRQHandler+0x468>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8010712:	9b03      	ldr	r3, [sp, #12]
 8010714:	f043 0302 	orr.w	r3, r3, #2
 8010718:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 801071a:	9b02      	ldr	r3, [sp, #8]
 801071c:	0718      	lsls	r0, r3, #28
 801071e:	d518      	bpl.n	8010752 <HAL_HCD_IRQHandler+0x286>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8010720:	9b03      	ldr	r3, [sp, #12]
 8010722:	f043 0308 	orr.w	r3, r3, #8
 8010726:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8010728:	9b02      	ldr	r3, [sp, #8]
 801072a:	0759      	lsls	r1, r3, #29
 801072c:	f140 810a 	bpl.w	8010944 <HAL_HCD_IRQHandler+0x478>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8010730:	69a1      	ldr	r1, [r4, #24]
 8010732:	2902      	cmp	r1, #2
 8010734:	f000 8125 	beq.w	8010982 <HAL_HCD_IRQHandler+0x4b6>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8010738:	68e3      	ldr	r3, [r4, #12]
 801073a:	2b03      	cmp	r3, #3
 801073c:	d103      	bne.n	8010746 <HAL_HCD_IRQHandler+0x27a>
        {
          USBx_HOST->HFIR = 60000U;
 801073e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010742:	f8c6 3404 	str.w	r3, [r6, #1028]	; 0x404
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8010746:	4620      	mov	r0, r4
 8010748:	f7fb fe0e 	bl	800c368 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 801074c:	4620      	mov	r0, r4
 801074e:	f7fb fdff 	bl	800c350 <HAL_HCD_Connect_Callback>
 8010752:	6826      	ldr	r6, [r4, #0]
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8010754:	9b02      	ldr	r3, [sp, #8]
 8010756:	069a      	lsls	r2, r3, #26
 8010758:	d503      	bpl.n	8010762 <HAL_HCD_IRQHandler+0x296>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 801075a:	9b03      	ldr	r3, [sp, #12]
 801075c:	f043 0320 	orr.w	r3, r3, #32
 8010760:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8010762:	9b03      	ldr	r3, [sp, #12]
 8010764:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8010768:	e6f0      	b.n	801054c <HAL_HCD_IRQHandler+0x80>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 801076a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 801076e:	4620      	mov	r0, r4
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8010770:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8010774:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 8010778:	f7fb fdee 	bl	800c358 <HAL_HCD_Disconnect_Callback>
      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 801077c:	2101      	movs	r1, #1
 801077e:	6820      	ldr	r0, [r4, #0]
 8010780:	f005 f964 	bl	8015a4c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8010784:	6820      	ldr	r0, [r4, #0]
 8010786:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801078a:	6143      	str	r3, [r0, #20]
 801078c:	e6d8      	b.n	8010540 <HAL_HCD_IRQHandler+0x74>
      HAL_HCD_SOF_Callback(hhcd);
 801078e:	4620      	mov	r0, r4
 8010790:	f7fb fdda 	bl	800c348 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8010794:	6820      	ldr	r0, [r4, #0]
 8010796:	2308      	movs	r3, #8
 8010798:	6143      	str	r3, [r0, #20]
 801079a:	e6de      	b.n	801055a <HAL_HCD_IRQHandler+0x8e>
 801079c:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 801079e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80107a2:	6143      	str	r3, [r0, #20]
 80107a4:	e6df      	b.n	8010566 <HAL_HCD_IRQHandler+0x9a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	069b      	lsls	r3, r3, #26
 80107aa:	d57d      	bpl.n	80108a8 <HAL_HCD_IRQHandler+0x3dc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80107ac:	2320      	movs	r3, #32
 80107ae:	60bb      	str	r3, [r7, #8]
 80107b0:	e730      	b.n	8010614 <HAL_HCD_IRQHandler+0x148>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80107b2:	2304      	movs	r3, #4
 80107b4:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	f043 0302 	orr.w	r3, r3, #2
 80107bc:	60fb      	str	r3, [r7, #12]
 80107be:	e758      	b.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	0799      	lsls	r1, r3, #30
 80107c4:	f140 8098 	bpl.w	80108f8 <HAL_HCD_IRQHandler+0x42c>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80107c8:	ea4f 0388 	mov.w	r3, r8, lsl #2
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80107cc:	68fa      	ldr	r2, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80107ce:	eb03 0108 	add.w	r1, r3, r8
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80107d2:	f022 0202 	bic.w	r2, r2, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80107d6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80107da:	60fa      	str	r2, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80107dc:	f891 205d 	ldrb.w	r2, [r1, #93]	; 0x5d
 80107e0:	2a01      	cmp	r2, #1
 80107e2:	f000 80cb 	beq.w	801097c <HAL_HCD_IRQHandler+0x4b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80107e6:	2a05      	cmp	r2, #5
 80107e8:	f000 80c8 	beq.w	801097c <HAL_HCD_IRQHandler+0x4b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80107ec:	2a06      	cmp	r2, #6
 80107ee:	f000 8144 	beq.w	8010a7a <HAL_HCD_IRQHandler+0x5ae>
 80107f2:	2a08      	cmp	r2, #8
 80107f4:	f000 8141 	beq.w	8010a7a <HAL_HCD_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80107f8:	2a03      	cmp	r2, #3
 80107fa:	f000 81a7 	beq.w	8010b4c <HAL_HCD_IRQHandler+0x680>
 80107fe:	2328      	movs	r3, #40	; 0x28
 8010800:	fb03 4308 	mla	r3, r3, r8, r4
 8010804:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8010808:	2302      	movs	r3, #2
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 801080a:	4641      	mov	r1, r8
 801080c:	4620      	mov	r0, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 801080e:	60bb      	str	r3, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8010810:	f7fb fda6 	bl	800c360 <HAL_HCD_HC_NotifyURBChange_Callback>
 8010814:	68a1      	ldr	r1, [r4, #8]
 8010816:	6820      	ldr	r0, [r4, #0]
 8010818:	e72b      	b.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801081a:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801081c:	4641      	mov	r1, r8
 801081e:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010820:	f043 0302 	orr.w	r3, r3, #2
 8010824:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010826:	f005 faf7 	bl	8015e18 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 801082a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801082e:	68a1      	ldr	r1, [r4, #8]
 8010830:	6820      	ldr	r0, [r4, #0]
 8010832:	60bb      	str	r3, [r7, #8]
 8010834:	e71d      	b.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	065b      	lsls	r3, r3, #25
 801083a:	f100 80c3 	bmi.w	80109c4 <HAL_HCD_IRQHandler+0x4f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 8010844:	f040 80da 	bne.w	80109fc <HAL_HCD_IRQHandler+0x530>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8010848:	68ba      	ldr	r2, [r7, #8]
 801084a:	07d2      	lsls	r2, r2, #31
 801084c:	f100 8101 	bmi.w	8010a52 <HAL_HCD_IRQHandler+0x586>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	f013 0308 	ands.w	r3, r3, #8
 8010856:	f040 815f 	bne.w	8010b18 <HAL_HCD_IRQHandler+0x64c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 801085a:	68ba      	ldr	r2, [r7, #8]
 801085c:	06d2      	lsls	r2, r2, #27
 801085e:	f140 8127 	bpl.w	8010ab0 <HAL_HCD_IRQHandler+0x5e4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8010862:	eb08 0288 	add.w	r2, r8, r8, lsl #2
    hhcd->hc[ch_num].state = HC_NAK;
 8010866:	2103      	movs	r1, #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 8010868:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801086c:	6593      	str	r3, [r2, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 801086e:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].state = HC_NAK;
 8010872:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8010876:	b943      	cbnz	r3, 801088a <HAL_HCD_IRQHandler+0x3be>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8010878:	2328      	movs	r3, #40	; 0x28
 801087a:	fb03 4308 	mla	r3, r3, r8, r4
 801087e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8010882:	b912      	cbnz	r2, 801088a <HAL_HCD_IRQHandler+0x3be>
        hhcd->hc[ch_num].do_ping = 1U;
 8010884:	2201      	movs	r2, #1
 8010886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801088a:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801088c:	4641      	mov	r1, r8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801088e:	f043 0302 	orr.w	r3, r3, #2
 8010892:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010894:	f005 fac0 	bl	8015e18 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8010898:	2310      	movs	r3, #16
 801089a:	68a1      	ldr	r1, [r4, #8]
 801089c:	6820      	ldr	r0, [r4, #0]
 801089e:	60bb      	str	r3, [r7, #8]
 80108a0:	e6e7      	b.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
 80108a2:	bf00      	nop
 80108a4:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	0719      	lsls	r1, r3, #28
 80108ac:	d474      	bmi.n	8010998 <HAL_HCD_IRQHandler+0x4cc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	055a      	lsls	r2, r3, #21
 80108b2:	f57f aeaf 	bpl.w	8010614 <HAL_HCD_IRQHandler+0x148>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80108b6:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80108b8:	4641      	mov	r1, r8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80108ba:	f043 0302 	orr.w	r3, r3, #2
 80108be:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80108c0:	f005 faaa 	bl	8015e18 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80108c4:	2210      	movs	r2, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80108c6:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 80108ca:	2108      	movs	r1, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80108cc:	60ba      	str	r2, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80108ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80108d2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80108d6:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80108da:	60ba      	str	r2, [r7, #8]
 80108dc:	e69a      	b.n	8010614 <HAL_HCD_IRQHandler+0x148>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80108de:	ea4f 0388 	mov.w	r3, r8, lsl #2
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80108e2:	6938      	ldr	r0, [r7, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80108e4:	eb03 0208 	add.w	r2, r3, r8
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80108e8:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80108ec:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80108f0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80108f2:	1a09      	subs	r1, r1, r0
 80108f4:	64d1      	str	r1, [r2, #76]	; 0x4c
 80108f6:	e69b      	b.n	8010630 <HAL_HCD_IRQHandler+0x164>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	6820      	ldr	r0, [r4, #0]
 80108fc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8010900:	f040 808f 	bne.w	8010a22 <HAL_HCD_IRQHandler+0x556>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8010904:	68ba      	ldr	r2, [r7, #8]
 8010906:	06d2      	lsls	r2, r2, #27
 8010908:	d576      	bpl.n	80109f8 <HAL_HCD_IRQHandler+0x52c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 801090a:	eb08 0188 	add.w	r1, r8, r8, lsl #2
 801090e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8010912:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8010916:	2a03      	cmp	r2, #3
 8010918:	f000 8129 	beq.w	8010b6e <HAL_HCD_IRQHandler+0x6a2>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 801091c:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 8010920:	d104      	bne.n	801092c <HAL_HCD_IRQHandler+0x460>
      if (hhcd->Init.dma_enable == 0U)
 8010922:	6923      	ldr	r3, [r4, #16]
      hhcd->hc[ch_num].ErrCnt = 0U;
 8010924:	658a      	str	r2, [r1, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8010926:	2b00      	cmp	r3, #0
 8010928:	f000 8142 	beq.w	8010bb0 <HAL_HCD_IRQHandler+0x6e4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 801092c:	2310      	movs	r3, #16
 801092e:	68a1      	ldr	r1, [r4, #8]
 8010930:	60bb      	str	r3, [r7, #8]
 8010932:	e69e      	b.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8010934:	69b3      	ldr	r3, [r6, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8010936:	4620      	mov	r0, r4
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8010938:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801093c:	61b3      	str	r3, [r6, #24]
      HAL_HCD_Connect_Callback(hhcd);
 801093e:	f7fb fd07 	bl	800c350 <HAL_HCD_Connect_Callback>
 8010942:	e6e6      	b.n	8010712 <HAL_HCD_IRQHandler+0x246>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8010944:	4620      	mov	r0, r4
 8010946:	f7fb fd13 	bl	800c370 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 801094a:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 801094e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8010952:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8010956:	6826      	ldr	r6, [r4, #0]
 8010958:	69b3      	ldr	r3, [r6, #24]
 801095a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801095e:	61b3      	str	r3, [r6, #24]
 8010960:	e6f8      	b.n	8010754 <HAL_HCD_IRQHandler+0x288>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010962:	68fa      	ldr	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010964:	4641      	mov	r1, r8
 8010966:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010968:	f042 0202 	orr.w	r2, r2, #2
 801096c:	9301      	str	r3, [sp, #4]
 801096e:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010970:	f005 fa52 	bl	8015e18 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8010974:	2210      	movs	r2, #16
 8010976:	9b01      	ldr	r3, [sp, #4]
 8010978:	60ba      	str	r2, [r7, #8]
 801097a:	e66f      	b.n	801065c <HAL_HCD_IRQHandler+0x190>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 801097c:	f881 205c 	strb.w	r2, [r1, #92]	; 0x5c
 8010980:	e742      	b.n	8010808 <HAL_HCD_IRQHandler+0x33c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8010982:	9b02      	ldr	r3, [sp, #8]
 8010984:	6820      	ldr	r0, [r4, #0]
 8010986:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 801098a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 801098e:	bf18      	it	ne
 8010990:	2101      	movne	r1, #1
 8010992:	f005 f85b 	bl	8015a4c <USB_InitFSLSPClkSel>
 8010996:	e6d6      	b.n	8010746 <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010998:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 801099a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 801099e:	2105      	movs	r1, #5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80109a0:	f04f 0c10 	mov.w	ip, #16
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80109a4:	f042 0e02 	orr.w	lr, r2, #2
    hhcd->hc[ch_num].state = HC_STALL;
 80109a8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80109ac:	2208      	movs	r2, #8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80109ae:	f8c7 e00c 	str.w	lr, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80109b2:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80109b6:	4641      	mov	r1, r8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80109b8:	f8c7 c008 	str.w	ip, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80109bc:	60ba      	str	r2, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80109be:	f005 fa2b 	bl	8015e18 <USB_HC_Halt>
 80109c2:	e627      	b.n	8010614 <HAL_HCD_IRQHandler+0x148>
    hhcd->hc[ch_num].state = HC_NYET;
 80109c4:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    hhcd->hc[ch_num].do_ping = 1U;
 80109c8:	f04f 0c01 	mov.w	ip, #1
    hhcd->hc[ch_num].state = HC_NYET;
 80109cc:	f04f 0e04 	mov.w	lr, #4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80109d0:	4641      	mov	r1, r8
    hhcd->hc[ch_num].state = HC_NYET;
 80109d2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    hhcd->hc[ch_num].do_ping = 1U;
 80109d6:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80109da:	f8d7 c00c 	ldr.w	ip, [r7, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80109de:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80109e0:	f04c 0202 	orr.w	r2, ip, #2
    hhcd->hc[ch_num].state = HC_NYET;
 80109e4:	f883 e05d 	strb.w	lr, [r3, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80109e8:	60fa      	str	r2, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80109ea:	f005 fa15 	bl	8015e18 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80109ee:	2340      	movs	r3, #64	; 0x40
 80109f0:	68a1      	ldr	r1, [r4, #8]
 80109f2:	6820      	ldr	r0, [r4, #0]
 80109f4:	60bb      	str	r3, [r7, #8]
 80109f6:	e63c      	b.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
 80109f8:	68a1      	ldr	r1, [r4, #8]
 80109fa:	e63a      	b.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80109fc:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80109fe:	4641      	mov	r1, r8
 8010a00:	e70e      	b.n	8010820 <HAL_HCD_IRQHandler+0x354>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8010a02:	f85b 000a 	ldr.w	r0, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8010a06:	4672      	mov	r2, lr
 8010a08:	4641      	mov	r1, r8
 8010a0a:	9301      	str	r3, [sp, #4]
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8010a0c:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8010a10:	f84b 000a 	str.w	r0, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8010a14:	4620      	mov	r0, r4
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8010a16:	f88c e05c 	strb.w	lr, [ip, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8010a1a:	f7fb fca1 	bl	800c360 <HAL_HCD_HC_NotifyURBChange_Callback>
 8010a1e:	9b01      	ldr	r3, [sp, #4]
 8010a20:	e61c      	b.n	801065c <HAL_HCD_IRQHandler+0x190>
    hhcd->hc[ch_num].ErrCnt++;
 8010a22:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010a26:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8010a28:	f04f 0e06 	mov.w	lr, #6
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010a2c:	4641      	mov	r1, r8
    hhcd->hc[ch_num].ErrCnt++;
 8010a2e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010a32:	f042 0c02 	orr.w	ip, r2, #2
    hhcd->hc[ch_num].ErrCnt++;
 8010a36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010a38:	f8c7 c00c 	str.w	ip, [r7, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8010a3c:	3201      	adds	r2, #1
    hhcd->hc[ch_num].state = HC_XACTERR;
 8010a3e:	f883 e05d 	strb.w	lr, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt++;
 8010a42:	659a      	str	r2, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010a44:	f005 f9e8 	bl	8015e18 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8010a48:	2380      	movs	r3, #128	; 0x80
 8010a4a:	68a1      	ldr	r1, [r4, #8]
 8010a4c:	6820      	ldr	r0, [r4, #0]
 8010a4e:	60bb      	str	r3, [r7, #8]
 8010a50:	e60f      	b.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010a52:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8010a54:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010a58:	4641      	mov	r1, r8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010a5a:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8010a5e:	eb04 08cc 	add.w	r8, r4, ip, lsl #3
 8010a62:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010a66:	60fa      	str	r2, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010a68:	f005 f9d6 	bl	8015e18 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8010a6c:	2301      	movs	r3, #1
 8010a6e:	68a1      	ldr	r1, [r4, #8]
 8010a70:	6820      	ldr	r0, [r4, #0]
 8010a72:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8010a74:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
 8010a78:	e5fb      	b.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
      hhcd->hc[ch_num].ErrCnt++;
 8010a7a:	eb03 0208 	add.w	r2, r3, r8
 8010a7e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8010a82:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8010a84:	3101      	adds	r1, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8010a86:	2903      	cmp	r1, #3
 8010a88:	d859      	bhi.n	8010b3e <HAL_HCD_IRQHandler+0x672>
      hhcd->hc[ch_num].ErrCnt++;
 8010a8a:	2028      	movs	r0, #40	; 0x28
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8010a8c:	2202      	movs	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 8010a8e:	fb00 4008 	mla	r0, r0, r8, r4
 8010a92:	6581      	str	r1, [r0, #88]	; 0x58
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8010a94:	f85b 100a 	ldr.w	r1, [fp, sl]
 8010a98:	4443      	add	r3, r8
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8010a9a:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 8010a9e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010aa2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8010aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8010aaa:	f84b 100a 	str.w	r1, [fp, sl]
 8010aae:	e6ab      	b.n	8010808 <HAL_HCD_IRQHandler+0x33c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	061a      	lsls	r2, r3, #24
 8010ab4:	d46a      	bmi.n	8010b8c <HAL_HCD_IRQHandler+0x6c0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	055b      	lsls	r3, r3, #21
 8010aba:	f100 8089 	bmi.w	8010bd0 <HAL_HCD_IRQHandler+0x704>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	079a      	lsls	r2, r3, #30
 8010ac2:	f57f add6 	bpl.w	8010672 <HAL_HCD_IRQHandler+0x1a6>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8010ac6:	2228      	movs	r2, #40	; 0x28
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8010ac8:	68f9      	ldr	r1, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8010aca:	fb02 4208 	mla	r2, r2, r8, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8010ace:	f021 0102 	bic.w	r1, r1, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8010ad2:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8010ad6:	60f9      	str	r1, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	f000 8093 	beq.w	8010c04 <HAL_HCD_IRQHandler+0x738>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8010ade:	2b03      	cmp	r3, #3
 8010ae0:	f000 808b 	beq.w	8010bfa <HAL_HCD_IRQHandler+0x72e>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8010ae4:	2b04      	cmp	r3, #4
 8010ae6:	f000 8088 	beq.w	8010bfa <HAL_HCD_IRQHandler+0x72e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8010aea:	2b05      	cmp	r3, #5
 8010aec:	f000 80b2 	beq.w	8010c54 <HAL_HCD_IRQHandler+0x788>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8010af0:	2b06      	cmp	r3, #6
 8010af2:	f000 8096 	beq.w	8010c22 <HAL_HCD_IRQHandler+0x756>
 8010af6:	2b08      	cmp	r3, #8
 8010af8:	f000 8093 	beq.w	8010c22 <HAL_HCD_IRQHandler+0x756>
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8010afc:	2328      	movs	r3, #40	; 0x28
 8010afe:	4641      	mov	r1, r8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8010b00:	2202      	movs	r2, #2
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8010b02:	4620      	mov	r0, r4
 8010b04:	fb03 4808 	mla	r8, r3, r8, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8010b08:	60ba      	str	r2, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8010b0a:	f898 205c 	ldrb.w	r2, [r8, #92]	; 0x5c
 8010b0e:	f7fb fc27 	bl	800c360 <HAL_HCD_HC_NotifyURBChange_Callback>
 8010b12:	68a1      	ldr	r1, [r4, #8]
 8010b14:	6820      	ldr	r0, [r4, #0]
 8010b16:	e5ac      	b.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8010b18:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010b1a:	4641      	mov	r1, r8
    hhcd->hc[ch_num].state = HC_STALL;
 8010b1c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8010b20:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	f043 0302 	orr.w	r3, r3, #2
 8010b28:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010b2a:	f005 f975 	bl	8015e18 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8010b2e:	2205      	movs	r2, #5
 8010b30:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
 8010b34:	68a1      	ldr	r1, [r4, #8]
 8010b36:	6820      	ldr	r0, [r4, #0]
 8010b38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8010b3c:	e599      	b.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8010b3e:	2128      	movs	r1, #40	; 0x28
 8010b40:	2000      	movs	r0, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8010b42:	2204      	movs	r2, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8010b44:	fb01 4108 	mla	r1, r1, r8, r4
 8010b48:	6588      	str	r0, [r1, #88]	; 0x58
 8010b4a:	e7a3      	b.n	8010a94 <HAL_HCD_IRQHandler+0x5c8>
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8010b4c:	f85b 300a 	ldr.w	r3, [fp, sl]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8010b50:	2128      	movs	r1, #40	; 0x28
 8010b52:	f04f 0002 	mov.w	r0, #2
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8010b56:	2202      	movs	r2, #2
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8010b58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8010b5c:	fb01 4108 	mla	r1, r1, r8, r4
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010b60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8010b64:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8010b68:	f84b 300a 	str.w	r3, [fp, sl]
 8010b6c:	e64c      	b.n	8010808 <HAL_HCD_IRQHandler+0x33c>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010b6e:	68fa      	ldr	r2, [r7, #12]
      hhcd->hc[ch_num].ErrCnt = 0U;
 8010b70:	f04f 0c28 	mov.w	ip, #40	; 0x28
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010b74:	4641      	mov	r1, r8
      hhcd->hc[ch_num].ErrCnt = 0U;
 8010b76:	fb0c 4c08 	mla	ip, ip, r8, r4
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010b7a:	f042 0202 	orr.w	r2, r2, #2
      hhcd->hc[ch_num].ErrCnt = 0U;
 8010b7e:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010b82:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010b84:	f005 f948 	bl	8015e18 <USB_HC_Halt>
 8010b88:	6820      	ldr	r0, [r4, #0]
 8010b8a:	e6cf      	b.n	801092c <HAL_HCD_IRQHandler+0x460>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010b8c:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010b8e:	4641      	mov	r1, r8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010b90:	f043 0302 	orr.w	r3, r3, #2
 8010b94:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010b96:	f005 f93f 	bl	8015e18 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8010b9a:	2328      	movs	r3, #40	; 0x28
 8010b9c:	2006      	movs	r0, #6
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8010b9e:	2280      	movs	r2, #128	; 0x80
    hhcd->hc[ch_num].state = HC_XACTERR;
 8010ba0:	fb03 4808 	mla	r8, r3, r8, r4
 8010ba4:	68a1      	ldr	r1, [r4, #8]
 8010ba6:	f888 005d 	strb.w	r0, [r8, #93]	; 0x5d
 8010baa:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8010bac:	60ba      	str	r2, [r7, #8]
 8010bae:	e560      	b.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010bb0:	68fb      	ldr	r3, [r7, #12]
        hhcd->hc[ch_num].state = HC_NAK;
 8010bb2:	2228      	movs	r2, #40	; 0x28
 8010bb4:	f04f 0c03 	mov.w	ip, #3
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010bb8:	4641      	mov	r1, r8
        hhcd->hc[ch_num].state = HC_NAK;
 8010bba:	fb02 4208 	mla	r2, r2, r8, r4
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010bbe:	f043 0302 	orr.w	r3, r3, #2
        hhcd->hc[ch_num].state = HC_NAK;
 8010bc2:	f882 c05d 	strb.w	ip, [r2, #93]	; 0x5d
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010bc6:	60fb      	str	r3, [r7, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010bc8:	f005 f926 	bl	8015e18 <USB_HC_Halt>
 8010bcc:	6820      	ldr	r0, [r4, #0]
 8010bce:	e6ad      	b.n	801092c <HAL_HCD_IRQHandler+0x460>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010bd0:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010bd2:	4641      	mov	r1, r8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010bd4:	f043 0302 	orr.w	r3, r3, #2
 8010bd8:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010bda:	f005 f91d 	bl	8015e18 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8010bde:	2328      	movs	r3, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8010be0:	2110      	movs	r1, #16
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8010be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8010be6:	fb03 4808 	mla	r8, r3, r8, r4
 8010bea:	2308      	movs	r3, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8010bec:	60b9      	str	r1, [r7, #8]
 8010bee:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8010bf0:	60ba      	str	r2, [r7, #8]
 8010bf2:	68a1      	ldr	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8010bf4:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
 8010bf8:	e53b      	b.n	8010672 <HAL_HCD_IRQHandler+0x1a6>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8010bfa:	f04f 0302 	mov.w	r3, #2
 8010bfe:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
 8010c02:	e77b      	b.n	8010afc <HAL_HCD_IRQHandler+0x630>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8010c04:	f892 103f 	ldrb.w	r1, [r2, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8010c08:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8010c0c:	1e8b      	subs	r3, r1, #2
 8010c0e:	2b01      	cmp	r3, #1
 8010c10:	f63f af74 	bhi.w	8010afc <HAL_HCD_IRQHandler+0x630>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8010c14:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8010c18:	f083 0301 	eor.w	r3, r3, #1
 8010c1c:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
 8010c20:	e76c      	b.n	8010afc <HAL_HCD_IRQHandler+0x630>
      hhcd->hc[ch_num].ErrCnt++;
 8010c22:	2328      	movs	r3, #40	; 0x28
 8010c24:	fb03 4308 	mla	r3, r3, r8, r4
 8010c28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010c2a:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8010c2c:	2a03      	cmp	r2, #3
      hhcd->hc[ch_num].ErrCnt++;
 8010c2e:	659a      	str	r2, [r3, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8010c30:	d913      	bls.n	8010c5a <HAL_HCD_IRQHandler+0x78e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8010c32:	2200      	movs	r2, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8010c34:	2104      	movs	r1, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8010c36:	659a      	str	r2, [r3, #88]	; 0x58
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8010c38:	f85b 300a 	ldr.w	r3, [fp, sl]
 8010c3c:	2228      	movs	r2, #40	; 0x28
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8010c3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010c42:	fb02 4208 	mla	r2, r2, r8, r4
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010c46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010c4a:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8010c4e:	f84b 300a 	str.w	r3, [fp, sl]
 8010c52:	e753      	b.n	8010afc <HAL_HCD_IRQHandler+0x630>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8010c54:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
 8010c58:	e750      	b.n	8010afc <HAL_HCD_IRQHandler+0x630>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8010c5a:	2102      	movs	r1, #2
 8010c5c:	e7ec      	b.n	8010c38 <HAL_HCD_IRQHandler+0x76c>
 8010c5e:	bf00      	nop

08010c60 <HAL_HCD_Start>:
{
 8010c60:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8010c62:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8010c66:	2b01      	cmp	r3, #1
 8010c68:	d00e      	beq.n	8010c88 <HAL_HCD_Start+0x28>
 8010c6a:	4604      	mov	r4, r0
 8010c6c:	2501      	movs	r5, #1
  __HAL_HCD_ENABLE(hhcd);
 8010c6e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hhcd);
 8010c70:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8010c74:	f004 fe1a 	bl	80158ac <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8010c78:	4629      	mov	r1, r5
 8010c7a:	6820      	ldr	r0, [r4, #0]
 8010c7c:	f004 ff2e 	bl	8015adc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8010c80:	2000      	movs	r0, #0
 8010c82:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8010c86:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8010c88:	2002      	movs	r0, #2
}
 8010c8a:	bd38      	pop	{r3, r4, r5, pc}

08010c8c <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8010c8c:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d00b      	beq.n	8010cac <HAL_HCD_Stop+0x20>
 8010c94:	2301      	movs	r3, #1
{
 8010c96:	b510      	push	{r4, lr}
 8010c98:	4604      	mov	r4, r0
  (void)USB_StopHost(hhcd->Instance);
 8010c9a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hhcd);
 8010c9c:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8010ca0:	f005 f912 	bl	8015ec8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8010ca4:	2000      	movs	r0, #0
 8010ca6:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8010caa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8010cac:	2002      	movs	r0, #2
}
 8010cae:	4770      	bx	lr

08010cb0 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8010cb0:	6800      	ldr	r0, [r0, #0]
 8010cb2:	f004 bef3 	b.w	8015a9c <USB_ResetPort>
 8010cb6:	bf00      	nop

08010cb8 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8010cb8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010cbc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8010cc0:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8010cc4:	4770      	bx	lr
 8010cc6:	bf00      	nop

08010cc8 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8010cc8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010ccc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8010cd0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8010cd2:	4770      	bx	lr

08010cd4 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8010cd4:	6800      	ldr	r0, [r0, #0]
 8010cd6:	f004 bf31 	b.w	8015b3c <USB_GetCurrentFrame>
 8010cda:	bf00      	nop

08010cdc <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8010cdc:	6800      	ldr	r0, [r0, #0]
 8010cde:	f004 bf21 	b.w	8015b24 <USB_GetHostSpeed>
 8010ce2:	bf00      	nop

08010ce4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010ce4:	b570      	push	{r4, r5, r6, lr}
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	460d      	mov	r5, r1
 8010cea:	4616      	mov	r6, r2
 8010cec:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010cee:	6823      	ldr	r3, [r4, #0]
 8010cf0:	d12c      	bne.n	8010d4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8010cf2:	699a      	ldr	r2, [r3, #24]
 8010cf4:	0790      	lsls	r0, r2, #30
 8010cf6:	d427      	bmi.n	8010d48 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010cf8:	699a      	ldr	r2, [r3, #24]
 8010cfa:	06d1      	lsls	r1, r2, #27
 8010cfc:	d5f9      	bpl.n	8010cf2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010cfe:	699a      	ldr	r2, [r3, #24]
 8010d00:	0691      	lsls	r1, r2, #26
 8010d02:	d5fc      	bpl.n	8010cfe <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010d04:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010d06:	2110      	movs	r1, #16
 8010d08:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010d0a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010d0c:	699a      	ldr	r2, [r3, #24]
 8010d0e:	0790      	lsls	r0, r2, #30
 8010d10:	d501      	bpl.n	8010d16 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8010d12:	2200      	movs	r2, #0
 8010d14:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010d16:	699a      	ldr	r2, [r3, #24]
 8010d18:	07d1      	lsls	r1, r2, #31
 8010d1a:	d403      	bmi.n	8010d24 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010d1c:	699a      	ldr	r2, [r3, #24]
 8010d1e:	f042 0201 	orr.w	r2, r2, #1
 8010d22:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010d24:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d26:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8010d28:	4e1b      	ldr	r6, [pc, #108]	; (8010d98 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
 8010d2a:	2520      	movs	r5, #32
      return HAL_ERROR;
 8010d2c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8010d2e:	4032      	ands	r2, r6
 8010d30:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010d32:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010d34:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010d38:	f043 0304 	orr.w	r3, r3, #4
 8010d3c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010d3e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d42:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8010d46:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8010d48:	2000      	movs	r0, #0
}
 8010d4a:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010d4c:	699a      	ldr	r2, [r3, #24]
 8010d4e:	0792      	lsls	r2, r2, #30
 8010d50:	d4fa      	bmi.n	8010d48 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010d52:	699a      	ldr	r2, [r3, #24]
 8010d54:	06d0      	lsls	r0, r2, #27
 8010d56:	d41b      	bmi.n	8010d90 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010d58:	f7fe f9ca 	bl	800f0f0 <HAL_GetTick>
 8010d5c:	1b80      	subs	r0, r0, r6
 8010d5e:	42a8      	cmp	r0, r5
 8010d60:	d801      	bhi.n	8010d66 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8010d62:	2d00      	cmp	r5, #0
 8010d64:	d1c2      	bne.n	8010cec <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010d66:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010d68:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d6a:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8010d6c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010d6e:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8010d70:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010d74:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010d76:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d7a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8010d7e:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010d80:	f7fe f9b6 	bl	800f0f0 <HAL_GetTick>
 8010d84:	1b80      	subs	r0, r0, r6
 8010d86:	4285      	cmp	r5, r0
 8010d88:	d3ed      	bcc.n	8010d66 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8010d8a:	2d00      	cmp	r5, #0
 8010d8c:	d0eb      	beq.n	8010d66 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8010d8e:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010d90:	699a      	ldr	r2, [r3, #24]
 8010d92:	0692      	lsls	r2, r2, #26
 8010d94:	d5f4      	bpl.n	8010d80 <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
 8010d96:	e7b5      	b.n	8010d04 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 8010d98:	fe00e800 	.word	0xfe00e800

08010d9c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8010d9c:	b570      	push	{r4, r5, r6, lr}
 8010d9e:	4604      	mov	r4, r0
 8010da0:	460d      	mov	r5, r1
 8010da2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010da4:	6823      	ldr	r3, [r4, #0]
 8010da6:	699a      	ldr	r2, [r3, #24]
 8010da8:	0692      	lsls	r2, r2, #26
 8010daa:	d449      	bmi.n	8010e40 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010dac:	699a      	ldr	r2, [r3, #24]
 8010dae:	06d2      	lsls	r2, r2, #27
 8010db0:	d526      	bpl.n	8010e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
 8010db2:	1c68      	adds	r0, r5, #1
 8010db4:	d138      	bne.n	8010e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010db6:	699a      	ldr	r2, [r3, #24]
 8010db8:	0691      	lsls	r1, r2, #26
 8010dba:	d5fc      	bpl.n	8010db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010dbc:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010dbe:	2110      	movs	r1, #16
 8010dc0:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010dc2:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010dc4:	699a      	ldr	r2, [r3, #24]
 8010dc6:	0790      	lsls	r0, r2, #30
 8010dc8:	d501      	bpl.n	8010dce <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8010dca:	2200      	movs	r2, #0
 8010dcc:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010dce:	699a      	ldr	r2, [r3, #24]
 8010dd0:	07d1      	lsls	r1, r2, #31
 8010dd2:	d403      	bmi.n	8010ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010dd4:	699a      	ldr	r2, [r3, #24]
 8010dd6:	f042 0201 	orr.w	r2, r2, #1
 8010dda:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8010ddc:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010dde:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8010de0:	4e18      	ldr	r6, [pc, #96]	; (8010e44 <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
 8010de2:	2520      	movs	r5, #32
      return HAL_ERROR;
 8010de4:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8010de6:	4032      	ands	r2, r6
 8010de8:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010dea:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8010dec:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010df0:	f043 0304 	orr.w	r3, r3, #4
 8010df4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010df6:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010dfa:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8010dfe:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010e00:	f7fe f976 	bl	800f0f0 <HAL_GetTick>
 8010e04:	1b80      	subs	r0, r0, r6
 8010e06:	42a8      	cmp	r0, r5
 8010e08:	d801      	bhi.n	8010e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8010e0a:	2d00      	cmp	r5, #0
 8010e0c:	d1ca      	bne.n	8010da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010e0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010e10:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e12:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8010e14:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010e16:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8010e18:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010e1c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010e1e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e22:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8010e26:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010e28:	699a      	ldr	r2, [r3, #24]
 8010e2a:	0692      	lsls	r2, r2, #26
 8010e2c:	d4c6      	bmi.n	8010dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010e2e:	f7fe f95f 	bl	800f0f0 <HAL_GetTick>
 8010e32:	1b80      	subs	r0, r0, r6
 8010e34:	4285      	cmp	r5, r0
 8010e36:	d3ea      	bcc.n	8010e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8010e38:	2d00      	cmp	r5, #0
 8010e3a:	d0e8      	beq.n	8010e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8010e3c:	6823      	ldr	r3, [r4, #0]
 8010e3e:	e7b8      	b.n	8010db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8010e40:	2000      	movs	r0, #0
}
 8010e42:	bd70      	pop	{r4, r5, r6, pc}
 8010e44:	fe00e800 	.word	0xfe00e800

08010e48 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	d04d      	beq.n	8010ee8 <HAL_I2C_Init+0xa0>
{
 8010e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010e4e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8010e52:	4604      	mov	r4, r0
 8010e54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d040      	beq.n	8010ede <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8010e5c:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010e5e:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8010e60:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8010e64:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010e68:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 8010e6a:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8010e6c:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 8010e70:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8010e72:	f020 0001 	bic.w	r0, r0, #1
 8010e76:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8010e78:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8010e7a:	6899      	ldr	r1, [r3, #8]
 8010e7c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8010e80:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010e82:	d028      	beq.n	8010ed6 <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8010e84:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010e88:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8010e8a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010e8c:	d102      	bne.n	8010e94 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8010e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e92:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010e94:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010e96:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010e98:	4814      	ldr	r0, [pc, #80]	; (8010eec <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8010e9a:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8010e9c:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010e9e:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8010ea0:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010ea4:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8010ea6:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8010ea8:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8010eaa:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8010eac:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8010eb0:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8010eb2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8010eb6:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8010eb8:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8010eba:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8010ebc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8010ebe:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8010ec0:	681a      	ldr	r2, [r3, #0]
 8010ec2:	f042 0201 	orr.w	r2, r2, #1
 8010ec6:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010ec8:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8010eca:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8010ece:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ed0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8010ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8010ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010eda:	609a      	str	r2, [r3, #8]
 8010edc:	e7da      	b.n	8010e94 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8010ede:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8010ee2:	f7fa f80f 	bl	800af04 <HAL_I2C_MspInit>
 8010ee6:	e7b9      	b.n	8010e5c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8010ee8:	2001      	movs	r0, #1
}
 8010eea:	4770      	bx	lr
 8010eec:	02008000 	.word	0x02008000

08010ef0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8010ef0:	b1b0      	cbz	r0, 8010f20 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 8010ef2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8010ef4:	2324      	movs	r3, #36	; 0x24
{
 8010ef6:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 8010ef8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8010efc:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 8010efe:	6813      	ldr	r3, [r2, #0]
 8010f00:	f023 0301 	bic.w	r3, r3, #1
 8010f04:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8010f06:	f7fa f849 	bl	800af9c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8010f0e:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 8010f10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8010f14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 8010f18:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8010f1e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8010f20:	2001      	movs	r0, #1
}
 8010f22:	4770      	bx	lr

08010f24 <HAL_I2C_Mem_Write>:
{
 8010f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f28:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8010f2a:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
 8010f2e:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8010f32:	2820      	cmp	r0, #32
 8010f34:	f040 809a 	bne.w	801106c <HAL_I2C_Mem_Write+0x148>
    if ((pData == NULL) || (Size == 0U))
 8010f38:	9808      	ldr	r0, [sp, #32]
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	f000 8099 	beq.w	8011072 <HAL_I2C_Mem_Write+0x14e>
 8010f40:	f1b8 0f00 	cmp.w	r8, #0
 8010f44:	f000 8095 	beq.w	8011072 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8010f48:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8010f4c:	2801      	cmp	r0, #1
 8010f4e:	f000 808d 	beq.w	801106c <HAL_I2C_Mem_Write+0x148>
 8010f52:	461f      	mov	r7, r3
 8010f54:	2301      	movs	r3, #1
 8010f56:	4691      	mov	r9, r2
 8010f58:	460e      	mov	r6, r1
 8010f5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8010f5e:	f7fe f8c7 	bl	800f0f0 <HAL_GetTick>
 8010f62:	4605      	mov	r5, r0
 8010f64:	e005      	b.n	8010f72 <HAL_I2C_Mem_Write+0x4e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010f66:	f7fe f8c3 	bl	800f0f0 <HAL_GetTick>
 8010f6a:	1b40      	subs	r0, r0, r5
 8010f6c:	2819      	cmp	r0, #25
 8010f6e:	f200 8086 	bhi.w	801107e <HAL_I2C_Mem_Write+0x15a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010f72:	6823      	ldr	r3, [r4, #0]
 8010f74:	6998      	ldr	r0, [r3, #24]
 8010f76:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8010f7a:	d1f4      	bne.n	8010f66 <HAL_I2C_Mem_Write+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010f7c:	2121      	movs	r1, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8010f7e:	2240      	movs	r2, #64	; 0x40
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010f80:	fa5f fc87 	uxtb.w	ip, r7
 8010f84:	f3c6 0609 	ubfx	r6, r6, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010f88:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010f8c:	4978      	ldr	r1, [pc, #480]	; (8011170 <HAL_I2C_Mem_Write+0x24c>)
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8010f8e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010f92:	462a      	mov	r2, r5
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010f94:	6460      	str	r0, [r4, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010f96:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
    hi2c->XferCount = Size;
 8010f9a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010f9e:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 8011180 <HAL_I2C_Mem_Write+0x25c>
 8010fa2:	ea4c 0c06 	orr.w	ip, ip, r6
 8010fa6:	f8d3 8004 	ldr.w	r8, [r3, #4]
    hi2c->pBuffPtr  = pData;
 8010faa:	9908      	ldr	r1, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010fac:	ea08 0e0e 	and.w	lr, r8, lr
    hi2c->XferISR   = NULL;
 8010fb0:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->pBuffPtr  = pData;
 8010fb2:	6261      	str	r1, [r4, #36]	; 0x24
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010fb4:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010fb6:	ea4c 0c0e 	orr.w	ip, ip, lr
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010fba:	990a      	ldr	r1, [sp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010fbc:	f8c3 c004 	str.w	ip, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010fc0:	f7ff fe90 	bl	8010ce4 <I2C_WaitOnTXISFlagUntilTimeout>
 8010fc4:	2800      	cmp	r0, #0
 8010fc6:	f040 808c 	bne.w	80110e2 <HAL_I2C_Mem_Write+0x1be>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010fca:	2f01      	cmp	r7, #1
 8010fcc:	6820      	ldr	r0, [r4, #0]
 8010fce:	d163      	bne.n	8011098 <HAL_I2C_Mem_Write+0x174>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010fd0:	fa5f f389 	uxtb.w	r3, r9
 8010fd4:	6283      	str	r3, [r0, #40]	; 0x28
 8010fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fd8:	3301      	adds	r3, #1
 8010fda:	f040 8087 	bne.w	80110ec <HAL_I2C_Mem_Write+0x1c8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010fde:	6983      	ldr	r3, [r0, #24]
 8010fe0:	061f      	lsls	r7, r3, #24
 8010fe2:	d5fc      	bpl.n	8010fde <HAL_I2C_Mem_Write+0xba>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010fe4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8010fe6:	2bff      	cmp	r3, #255	; 0xff
 8010fe8:	f240 809f 	bls.w	801112a <HAL_I2C_Mem_Write+0x206>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010fec:	6843      	ldr	r3, [r0, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010fee:	21ff      	movs	r1, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010ff0:	4f60      	ldr	r7, [pc, #384]	; (8011174 <HAL_I2C_Mem_Write+0x250>)
 8010ff2:	4a61      	ldr	r2, [pc, #388]	; (8011178 <HAL_I2C_Mem_Write+0x254>)
 8010ff4:	403b      	ands	r3, r7
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010ff6:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010ff8:	4332      	orrs	r2, r6
 8010ffa:	4313      	orrs	r3, r2
 8010ffc:	6043      	str	r3, [r0, #4]
 8010ffe:	4f5e      	ldr	r7, [pc, #376]	; (8011178 <HAL_I2C_Mem_Write+0x254>)
 8011000:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8011174 <HAL_I2C_Mem_Write+0x250>
 8011004:	4337      	orrs	r7, r6
 8011006:	e004      	b.n	8011012 <HAL_I2C_Mem_Write+0xee>
    while (hi2c->XferCount > 0U);
 8011008:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801100a:	b29b      	uxth	r3, r3
 801100c:	2b00      	cmp	r3, #0
 801100e:	f000 809a 	beq.w	8011146 <HAL_I2C_Mem_Write+0x222>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011012:	462a      	mov	r2, r5
 8011014:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011016:	4620      	mov	r0, r4
 8011018:	f7ff fe64 	bl	8010ce4 <I2C_WaitOnTXISFlagUntilTimeout>
 801101c:	2800      	cmp	r0, #0
 801101e:	f040 8082 	bne.w	8011126 <HAL_I2C_Mem_Write+0x202>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011022:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011024:	6821      	ldr	r1, [r4, #0]
 8011026:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 801102a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801102c:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 801102e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8011030:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8011032:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8011034:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 8011036:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8011038:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 801103a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 801103c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801103e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8011040:	b292      	uxth	r2, r2
 8011042:	2a00      	cmp	r2, #0
 8011044:	d0e0      	beq.n	8011008 <HAL_I2C_Mem_Write+0xe4>
 8011046:	2b00      	cmp	r3, #0
 8011048:	d1de      	bne.n	8011008 <HAL_I2C_Mem_Write+0xe4>
 801104a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801104c:	3301      	adds	r3, #1
 801104e:	d132      	bne.n	80110b6 <HAL_I2C_Mem_Write+0x192>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011050:	698b      	ldr	r3, [r1, #24]
 8011052:	061a      	lsls	r2, r3, #24
 8011054:	d5fc      	bpl.n	8011050 <HAL_I2C_Mem_Write+0x12c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011056:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8011058:	2bff      	cmp	r3, #255	; 0xff
 801105a:	d955      	bls.n	8011108 <HAL_I2C_Mem_Write+0x1e4>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801105c:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801105e:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8011060:	ea03 0308 	and.w	r3, r3, r8
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011064:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8011066:	433b      	orrs	r3, r7
 8011068:	604b      	str	r3, [r1, #4]
 801106a:	e7cd      	b.n	8011008 <HAL_I2C_Mem_Write+0xe4>
    return HAL_BUSY;
 801106c:	2002      	movs	r0, #2
}
 801106e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011072:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 8011076:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011078:	6463      	str	r3, [r4, #68]	; 0x44
}
 801107a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801107e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011080:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011082:	2200      	movs	r2, #0
          return HAL_ERROR;
 8011084:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011086:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8011088:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801108c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801108e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011092:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8011096:	e7ea      	b.n	801106e <HAL_I2C_Mem_Write+0x14a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8011098:	ea4f 2319 	mov.w	r3, r9, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801109c:	462a      	mov	r2, r5
 801109e:	990a      	ldr	r1, [sp, #40]	; 0x28
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80110a0:	6283      	str	r3, [r0, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80110a2:	4620      	mov	r0, r4
 80110a4:	f7ff fe1e 	bl	8010ce4 <I2C_WaitOnTXISFlagUntilTimeout>
 80110a8:	b9d8      	cbnz	r0, 80110e2 <HAL_I2C_Mem_Write+0x1be>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80110aa:	fa5f f389 	uxtb.w	r3, r9
 80110ae:	6820      	ldr	r0, [r4, #0]
 80110b0:	6283      	str	r3, [r0, #40]	; 0x28
 80110b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110b4:	e790      	b.n	8010fd8 <HAL_I2C_Mem_Write+0xb4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80110b6:	698b      	ldr	r3, [r1, #24]
 80110b8:	061b      	lsls	r3, r3, #24
 80110ba:	d4cc      	bmi.n	8011056 <HAL_I2C_Mem_Write+0x132>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80110bc:	f7fe f818 	bl	800f0f0 <HAL_GetTick>
 80110c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110c2:	1b40      	subs	r0, r0, r5
 80110c4:	4283      	cmp	r3, r0
 80110c6:	d3da      	bcc.n	801107e <HAL_I2C_Mem_Write+0x15a>
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d0d8      	beq.n	801107e <HAL_I2C_Mem_Write+0x15a>
 80110cc:	6821      	ldr	r1, [r4, #0]
 80110ce:	e7bd      	b.n	801104c <HAL_I2C_Mem_Write+0x128>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80110d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80110d2:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80110d4:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80110d6:	430b      	orrs	r3, r1
 80110d8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80110da:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80110de:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80110e2:	2300      	movs	r3, #0
      return HAL_ERROR;
 80110e4:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 80110e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80110ea:	e7c0      	b.n	801106e <HAL_I2C_Mem_Write+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80110ec:	6983      	ldr	r3, [r0, #24]
 80110ee:	0619      	lsls	r1, r3, #24
 80110f0:	f53f af78 	bmi.w	8010fe4 <HAL_I2C_Mem_Write+0xc0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80110f4:	f7fd fffc 	bl	800f0f0 <HAL_GetTick>
 80110f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110fa:	1b40      	subs	r0, r0, r5
 80110fc:	4283      	cmp	r3, r0
 80110fe:	d3e7      	bcc.n	80110d0 <HAL_I2C_Mem_Write+0x1ac>
 8011100:	2b00      	cmp	r3, #0
 8011102:	d0e5      	beq.n	80110d0 <HAL_I2C_Mem_Write+0x1ac>
 8011104:	6820      	ldr	r0, [r4, #0]
 8011106:	e767      	b.n	8010fd8 <HAL_I2C_Mem_Write+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8011108:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801110a:	f046 7300 	orr.w	r3, r6, #33554432	; 0x2000000
 801110e:	6848      	ldr	r0, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 8011110:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8011112:	ea00 0008 	and.w	r0, r0, r8
 8011116:	fa5f fc82 	uxtb.w	ip, r2
          hi2c->XferSize = hi2c->XferCount;
 801111a:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801111c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8011120:	4303      	orrs	r3, r0
 8011122:	604b      	str	r3, [r1, #4]
 8011124:	e770      	b.n	8011008 <HAL_I2C_Mem_Write+0xe4>
        return HAL_ERROR;
 8011126:	2001      	movs	r0, #1
 8011128:	e7a1      	b.n	801106e <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = hi2c->XferCount;
 801112a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801112c:	f046 7300 	orr.w	r3, r6, #33554432	; 0x2000000
 8011130:	6841      	ldr	r1, [r0, #4]
      hi2c->XferSize = hi2c->XferCount;
 8011132:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8011134:	4f0f      	ldr	r7, [pc, #60]	; (8011174 <HAL_I2C_Mem_Write+0x250>)
 8011136:	4039      	ands	r1, r7
 8011138:	b2d7      	uxtb	r7, r2
      hi2c->XferSize = hi2c->XferCount;
 801113a:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801113c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011140:	430b      	orrs	r3, r1
 8011142:	6043      	str	r3, [r0, #4]
 8011144:	e75b      	b.n	8010ffe <HAL_I2C_Mem_Write+0xda>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011146:	462a      	mov	r2, r5
 8011148:	990a      	ldr	r1, [sp, #40]	; 0x28
 801114a:	4620      	mov	r0, r4
 801114c:	f7ff fe26 	bl	8010d9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8011150:	2800      	cmp	r0, #0
 8011152:	d1e8      	bne.n	8011126 <HAL_I2C_Mem_Write+0x202>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011154:	6823      	ldr	r3, [r4, #0]
 8011156:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8011158:	4d08      	ldr	r5, [pc, #32]	; (801117c <HAL_I2C_Mem_Write+0x258>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801115a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 801115c:	685a      	ldr	r2, [r3, #4]
 801115e:	402a      	ands	r2, r5
 8011160:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8011162:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8011166:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801116a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 801116e:	e77e      	b.n	801106e <HAL_I2C_Mem_Write+0x14a>
 8011170:	81002000 	.word	0x81002000
 8011174:	fc009c00 	.word	0xfc009c00
 8011178:	01ff0000 	.word	0x01ff0000
 801117c:	fe00e800 	.word	0xfe00e800
 8011180:	fc009800 	.word	0xfc009800

08011184 <HAL_I2C_Mem_Read>:
{
 8011184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011188:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 801118a:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
 801118e:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8011192:	2820      	cmp	r0, #32
{
 8011194:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8011196:	f040 8087 	bne.w	80112a8 <HAL_I2C_Mem_Read+0x124>
    if ((pData == NULL) || (Size == 0U))
 801119a:	9808      	ldr	r0, [sp, #32]
 801119c:	2800      	cmp	r0, #0
 801119e:	f000 8086 	beq.w	80112ae <HAL_I2C_Mem_Read+0x12a>
 80111a2:	f1ba 0f00 	cmp.w	sl, #0
 80111a6:	f000 8082 	beq.w	80112ae <HAL_I2C_Mem_Read+0x12a>
    __HAL_LOCK(hi2c);
 80111aa:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80111ae:	2801      	cmp	r0, #1
 80111b0:	d07a      	beq.n	80112a8 <HAL_I2C_Mem_Read+0x124>
 80111b2:	4698      	mov	r8, r3
 80111b4:	2301      	movs	r3, #1
 80111b6:	4691      	mov	r9, r2
 80111b8:	460f      	mov	r7, r1
 80111ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 80111be:	f7fd ff97 	bl	800f0f0 <HAL_GetTick>
 80111c2:	4606      	mov	r6, r0
 80111c4:	e004      	b.n	80111d0 <HAL_I2C_Mem_Read+0x4c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80111c6:	f7fd ff93 	bl	800f0f0 <HAL_GetTick>
 80111ca:	1b80      	subs	r0, r0, r6
 80111cc:	2819      	cmp	r0, #25
 80111ce:	d87d      	bhi.n	80112cc <HAL_I2C_Mem_Read+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80111d0:	6823      	ldr	r3, [r4, #0]
 80111d2:	6998      	ldr	r0, [r3, #24]
 80111d4:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 80111d8:	d1f5      	bne.n	80111c6 <HAL_I2C_Mem_Read+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80111da:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80111dc:	2240      	movs	r2, #64	; 0x40
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80111de:	fa5f fc88 	uxtb.w	ip, r8
 80111e2:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80111e6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80111ea:	497d      	ldr	r1, [pc, #500]	; (80113e0 <HAL_I2C_Mem_Read+0x25c>)
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80111ec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80111f0:	4632      	mov	r2, r6
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80111f2:	6460      	str	r0, [r4, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80111f4:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
    hi2c->XferCount = Size;
 80111f8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80111fc:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 80113f0 <HAL_I2C_Mem_Read+0x26c>
 8011200:	ea4c 0c07 	orr.w	ip, ip, r7
 8011204:	f8d3 a004 	ldr.w	sl, [r3, #4]
    hi2c->pBuffPtr  = pData;
 8011208:	9908      	ldr	r1, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801120a:	ea0a 0e0e 	and.w	lr, sl, lr
    hi2c->XferISR   = NULL;
 801120e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->pBuffPtr  = pData;
 8011210:	6261      	str	r1, [r4, #36]	; 0x24
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011212:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8011214:	ea4c 0c0e 	orr.w	ip, ip, lr
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011218:	4629      	mov	r1, r5
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801121a:	f8c3 c004 	str.w	ip, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801121e:	f7ff fd61 	bl	8010ce4 <I2C_WaitOnTXISFlagUntilTimeout>
 8011222:	2800      	cmp	r0, #0
 8011224:	f040 8094 	bne.w	8011350 <HAL_I2C_Mem_Read+0x1cc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011228:	f1b8 0f01 	cmp.w	r8, #1
 801122c:	6820      	ldr	r0, [r4, #0]
 801122e:	d16d      	bne.n	801130c <HAL_I2C_Mem_Read+0x188>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011230:	fa5f f389 	uxtb.w	r3, r9
 8011234:	6283      	str	r3, [r0, #40]	; 0x28
 8011236:	1c69      	adds	r1, r5, #1
 8011238:	f040 809e 	bne.w	8011378 <HAL_I2C_Mem_Read+0x1f4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801123c:	6983      	ldr	r3, [r0, #24]
 801123e:	065a      	lsls	r2, r3, #25
 8011240:	d5fc      	bpl.n	801123c <HAL_I2C_Mem_Read+0xb8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011242:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8011244:	2bff      	cmp	r3, #255	; 0xff
 8011246:	f240 80a4 	bls.w	8011392 <HAL_I2C_Mem_Read+0x20e>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801124a:	6843      	ldr	r3, [r0, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801124c:	21ff      	movs	r1, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801124e:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80113f0 <HAL_I2C_Mem_Read+0x26c>
 8011252:	4a64      	ldr	r2, [pc, #400]	; (80113e4 <HAL_I2C_Mem_Read+0x260>)
 8011254:	ea03 030c 	and.w	r3, r3, ip
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011258:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801125a:	433a      	orrs	r2, r7
 801125c:	4313      	orrs	r3, r2
 801125e:	6043      	str	r3, [r0, #4]
 8011260:	f8df 8190 	ldr.w	r8, [pc, #400]	; 80113f4 <HAL_I2C_Mem_Read+0x270>
 8011264:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80113f8 <HAL_I2C_Mem_Read+0x274>
 8011268:	ea47 0808 	orr.w	r8, r7, r8
 801126c:	1c69      	adds	r1, r5, #1
 801126e:	d15b      	bne.n	8011328 <HAL_I2C_Mem_Read+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011270:	6983      	ldr	r3, [r0, #24]
 8011272:	075a      	lsls	r2, r3, #29
 8011274:	d5fc      	bpl.n	8011270 <HAL_I2C_Mem_Read+0xec>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011276:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8011278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801127a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 801127c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 801127e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8011280:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8011282:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8011284:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8011286:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8011288:	3201      	adds	r2, #1
      hi2c->XferSize--;
 801128a:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 801128c:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801128e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8011290:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011292:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8011294:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011296:	b903      	cbnz	r3, 801129a <HAL_I2C_Mem_Read+0x116>
 8011298:	bb31      	cbnz	r1, 80112e8 <HAL_I2C_Mem_Read+0x164>
    while (hi2c->XferCount > 0U);
 801129a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801129c:	b29b      	uxth	r3, r3
 801129e:	2b00      	cmp	r3, #0
 80112a0:	f000 8088 	beq.w	80113b4 <HAL_I2C_Mem_Read+0x230>
 80112a4:	6820      	ldr	r0, [r4, #0]
 80112a6:	e7e1      	b.n	801126c <HAL_I2C_Mem_Read+0xe8>
    return HAL_BUSY;
 80112a8:	2002      	movs	r0, #2
}
 80112aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80112ae:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 80112b2:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80112b4:	6463      	str	r3, [r4, #68]	; 0x44
}
 80112b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80112ba:	6993      	ldr	r3, [r2, #24]
 80112bc:	061b      	lsls	r3, r3, #24
 80112be:	d419      	bmi.n	80112f4 <HAL_I2C_Mem_Read+0x170>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80112c0:	f7fd ff16 	bl	800f0f0 <HAL_GetTick>
 80112c4:	1b80      	subs	r0, r0, r6
 80112c6:	4285      	cmp	r5, r0
 80112c8:	d300      	bcc.n	80112cc <HAL_I2C_Mem_Read+0x148>
 80112ca:	b96d      	cbnz	r5, 80112e8 <HAL_I2C_Mem_Read+0x164>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80112cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80112ce:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80112d0:	2200      	movs	r2, #0
          return HAL_ERROR;
 80112d2:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80112d4:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80112d6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80112da:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80112dc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80112e0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80112e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112e8:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80112ea:	6822      	ldr	r2, [r4, #0]
 80112ec:	d1e5      	bne.n	80112ba <HAL_I2C_Mem_Read+0x136>
 80112ee:	6993      	ldr	r3, [r2, #24]
 80112f0:	0619      	lsls	r1, r3, #24
 80112f2:	d5fc      	bpl.n	80112ee <HAL_I2C_Mem_Read+0x16a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80112f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80112f6:	2bff      	cmp	r3, #255	; 0xff
 80112f8:	d92f      	bls.n	801135a <HAL_I2C_Mem_Read+0x1d6>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80112fa:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80112fc:	21ff      	movs	r1, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80112fe:	ea03 0309 	and.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011302:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8011304:	ea43 0308 	orr.w	r3, r3, r8
 8011308:	6053      	str	r3, [r2, #4]
 801130a:	e7c6      	b.n	801129a <HAL_I2C_Mem_Read+0x116>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801130c:	ea4f 2319 	mov.w	r3, r9, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011310:	4632      	mov	r2, r6
 8011312:	4629      	mov	r1, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8011314:	6283      	str	r3, [r0, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011316:	4620      	mov	r0, r4
 8011318:	f7ff fce4 	bl	8010ce4 <I2C_WaitOnTXISFlagUntilTimeout>
 801131c:	b9c0      	cbnz	r0, 8011350 <HAL_I2C_Mem_Read+0x1cc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801131e:	fa5f f389 	uxtb.w	r3, r9
 8011322:	6820      	ldr	r0, [r4, #0]
 8011324:	6283      	str	r3, [r0, #40]	; 0x28
 8011326:	e786      	b.n	8011236 <HAL_I2C_Mem_Read+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011328:	6983      	ldr	r3, [r0, #24]
 801132a:	075b      	lsls	r3, r3, #29
 801132c:	d4a3      	bmi.n	8011276 <HAL_I2C_Mem_Read+0xf2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801132e:	f7fd fedf 	bl	800f0f0 <HAL_GetTick>
 8011332:	1b80      	subs	r0, r0, r6
 8011334:	4285      	cmp	r5, r0
 8011336:	d3c9      	bcc.n	80112cc <HAL_I2C_Mem_Read+0x148>
 8011338:	2d00      	cmp	r5, #0
 801133a:	d1b3      	bne.n	80112a4 <HAL_I2C_Mem_Read+0x120>
 801133c:	e7c6      	b.n	80112cc <HAL_I2C_Mem_Read+0x148>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801133e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011340:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011342:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011344:	430b      	orrs	r3, r1
 8011346:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011348:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801134c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8011350:	2300      	movs	r3, #0
      return HAL_ERROR;
 8011352:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8011354:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8011358:	e7a7      	b.n	80112aa <HAL_I2C_Mem_Read+0x126>
          hi2c->XferSize = hi2c->XferCount;
 801135a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801135c:	f047 7300 	orr.w	r3, r7, #33554432	; 0x2000000
 8011360:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8011362:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8011364:	ea00 0009 	and.w	r0, r0, r9
 8011368:	fa5f fc81 	uxtb.w	ip, r1
          hi2c->XferSize = hi2c->XferCount;
 801136c:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801136e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8011372:	4303      	orrs	r3, r0
 8011374:	6053      	str	r3, [r2, #4]
 8011376:	e790      	b.n	801129a <HAL_I2C_Mem_Read+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011378:	6983      	ldr	r3, [r0, #24]
 801137a:	065b      	lsls	r3, r3, #25
 801137c:	f53f af61 	bmi.w	8011242 <HAL_I2C_Mem_Read+0xbe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011380:	f7fd feb6 	bl	800f0f0 <HAL_GetTick>
 8011384:	1b80      	subs	r0, r0, r6
 8011386:	4285      	cmp	r5, r0
 8011388:	d3d9      	bcc.n	801133e <HAL_I2C_Mem_Read+0x1ba>
 801138a:	2d00      	cmp	r5, #0
 801138c:	d0d7      	beq.n	801133e <HAL_I2C_Mem_Read+0x1ba>
 801138e:	6820      	ldr	r0, [r4, #0]
 8011390:	e751      	b.n	8011236 <HAL_I2C_Mem_Read+0xb2>
      hi2c->XferSize = hi2c->XferCount;
 8011392:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8011394:	4b14      	ldr	r3, [pc, #80]	; (80113e8 <HAL_I2C_Mem_Read+0x264>)
      hi2c->XferSize = hi2c->XferCount;
 8011396:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8011398:	6841      	ldr	r1, [r0, #4]
 801139a:	433b      	orrs	r3, r7
 801139c:	f8df e050 	ldr.w	lr, [pc, #80]	; 80113f0 <HAL_I2C_Mem_Read+0x26c>
 80113a0:	fa5f fc82 	uxtb.w	ip, r2
      hi2c->XferSize = hi2c->XferCount;
 80113a4:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80113a6:	ea01 020e 	and.w	r2, r1, lr
 80113aa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80113ae:	4313      	orrs	r3, r2
 80113b0:	6043      	str	r3, [r0, #4]
 80113b2:	e755      	b.n	8011260 <HAL_I2C_Mem_Read+0xdc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80113b4:	4632      	mov	r2, r6
 80113b6:	4629      	mov	r1, r5
 80113b8:	4620      	mov	r0, r4
 80113ba:	f7ff fcef 	bl	8010d9c <I2C_WaitOnSTOPFlagUntilTimeout>
 80113be:	b968      	cbnz	r0, 80113dc <HAL_I2C_Mem_Read+0x258>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80113c0:	6823      	ldr	r3, [r4, #0]
 80113c2:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 80113c4:	4d09      	ldr	r5, [pc, #36]	; (80113ec <HAL_I2C_Mem_Read+0x268>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80113c6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80113c8:	685a      	ldr	r2, [r3, #4]
 80113ca:	402a      	ands	r2, r5
 80113cc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80113ce:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80113d2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80113d6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80113da:	e766      	b.n	80112aa <HAL_I2C_Mem_Read+0x126>
      return HAL_ERROR;
 80113dc:	2001      	movs	r0, #1
 80113de:	e764      	b.n	80112aa <HAL_I2C_Mem_Read+0x126>
 80113e0:	80002000 	.word	0x80002000
 80113e4:	81ff2400 	.word	0x81ff2400
 80113e8:	82002400 	.word	0x82002400
 80113ec:	fe00e800 	.word	0xfe00e800
 80113f0:	fc009800 	.word	0xfc009800
 80113f4:	01ff0000 	.word	0x01ff0000
 80113f8:	fc009c00 	.word	0xfc009c00

080113fc <HAL_I2C_GetState>:
  return hi2c->State;
 80113fc:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8011400:	4770      	bx	lr
 8011402:	bf00      	nop

08011404 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011404:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8011408:	b2db      	uxtb	r3, r3
 801140a:	2b20      	cmp	r3, #32
{
 801140c:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 801140e:	d11f      	bne.n	8011450 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011410:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8011414:	2a01      	cmp	r2, #1
 8011416:	d01b      	beq.n	8011450 <HAL_I2CEx_ConfigAnalogFilter+0x4c>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011418:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 801141a:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801141c:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 801141e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8011422:	6815      	ldr	r5, [r2, #0]

    return HAL_OK;
 8011424:	4634      	mov	r4, r6
    __HAL_I2C_DISABLE(hi2c);
 8011426:	f025 0501 	bic.w	r5, r5, #1
 801142a:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801142c:	6815      	ldr	r5, [r2, #0]
 801142e:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8011432:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8011434:	6815      	ldr	r5, [r2, #0]
 8011436:	4329      	orrs	r1, r5
 8011438:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 801143a:	6811      	ldr	r1, [r2, #0]
 801143c:	f041 0101 	orr.w	r1, r1, #1
 8011440:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8011442:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8011446:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 801144a:	4620      	mov	r0, r4
 801144c:	bc70      	pop	{r4, r5, r6}
 801144e:	4770      	bx	lr
    return HAL_BUSY;
 8011450:	2402      	movs	r4, #2
}
 8011452:	4620      	mov	r0, r4
 8011454:	bc70      	pop	{r4, r5, r6}
 8011456:	4770      	bx	lr

08011458 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011458:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 801145c:	b2db      	uxtb	r3, r3
 801145e:	2b20      	cmp	r3, #32
{
 8011460:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8011462:	d11e      	bne.n	80114a2 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011464:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8011468:	2a01      	cmp	r2, #1
 801146a:	d01a      	beq.n	80114a2 <HAL_I2CEx_ConfigDigitalFilter+0x4a>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801146c:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 801146e:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011470:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8011472:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8011476:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 8011478:	4635      	mov	r5, r6
    __HAL_I2C_DISABLE(hi2c);
 801147a:	f024 0401 	bic.w	r4, r4, #1
 801147e:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8011480:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8011482:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8011486:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 801148a:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 801148c:	6811      	ldr	r1, [r2, #0]
 801148e:	f041 0101 	orr.w	r1, r1, #1
 8011492:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8011494:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8011498:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 801149c:	4628      	mov	r0, r5
 801149e:	bc70      	pop	{r4, r5, r6}
 80114a0:	4770      	bx	lr
    return HAL_BUSY;
 80114a2:	2502      	movs	r5, #2
}
 80114a4:	4628      	mov	r0, r5
 80114a6:	bc70      	pop	{r4, r5, r6}
 80114a8:	4770      	bx	lr
 80114aa:	bf00      	nop

080114ac <HAL_LTDC_Init>:
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80114ac:	2800      	cmp	r0, #0
 80114ae:	d06d      	beq.n	801158c <HAL_LTDC_Init+0xe0>
{
 80114b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80114b2:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80114b6:	4604      	mov	r4, r0
 80114b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d060      	beq.n	8011582 <HAL_LTDC_Init+0xd6>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80114c0:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80114c2:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80114c4:	68e6      	ldr	r6, [r4, #12]

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80114c6:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80114c8:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80114cc:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80114ce:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80114d0:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80114d4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80114d8:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80114da:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80114dc:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80114de:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80114e2:	4e2b      	ldr	r6, [pc, #172]	; (8011590 <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80114e4:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80114e6:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80114e8:	6998      	ldr	r0, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80114ea:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80114ec:	4302      	orrs	r2, r0
 80114ee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80114f0:	689a      	ldr	r2, [r3, #8]
 80114f2:	4032      	ands	r2, r6
 80114f4:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80114f6:	6898      	ldr	r0, [r3, #8]
 80114f8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80114fc:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80114fe:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8011502:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8011506:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8011508:	68d8      	ldr	r0, [r3, #12]
 801150a:	4030      	ands	r0, r6
 801150c:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 801150e:	68da      	ldr	r2, [r3, #12]
 8011510:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8011514:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8011516:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 801151a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 801151e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8011520:	691a      	ldr	r2, [r3, #16]
 8011522:	4032      	ands	r2, r6
 8011524:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8011526:	6918      	ldr	r0, [r3, #16]
 8011528:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 801152c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 801152e:	ea40 000c 	orr.w	r0, r0, ip
 8011532:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8011534:	6958      	ldr	r0, [r3, #20]
 8011536:	4006      	ands	r6, r0
 8011538:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 801153a:	695a      	ldr	r2, [r3, #20]
 801153c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801153e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8011542:	4302      	orrs	r2, r0
 8011544:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8011546:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8011548:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 801154c:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8011550:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8011554:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8011556:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011558:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 801155c:	4302      	orrs	r2, r0

  return HAL_OK;
 801155e:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8011560:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8011564:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8011568:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 801156a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801156c:	f042 0206 	orr.w	r2, r2, #6
 8011570:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8011572:	699a      	ldr	r2, [r3, #24]
 8011574:	432a      	orrs	r2, r5
 8011576:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8011578:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 801157c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 8011580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8011582:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8011586:	f7f9 fd2f 	bl	800afe8 <HAL_LTDC_MspInit>
 801158a:	e799      	b.n	80114c0 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 801158c:	2001      	movs	r0, #1
}
 801158e:	4770      	bx	lr
 8011590:	f000f800 	.word	0xf000f800

08011594 <HAL_LTDC_ErrorCallback>:
 8011594:	4770      	bx	lr
 8011596:	bf00      	nop

08011598 <HAL_LTDC_LineEventCallback>:
 8011598:	4770      	bx	lr
 801159a:	bf00      	nop

0801159c <HAL_LTDC_ReloadEventCallback>:
 801159c:	4770      	bx	lr
 801159e:	bf00      	nop

080115a0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80115a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80115a2:	6803      	ldr	r3, [r0, #0]
{
 80115a4:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80115a6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80115a8:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80115aa:	0769      	lsls	r1, r5, #29
 80115ac:	d501      	bpl.n	80115b2 <HAL_LTDC_IRQHandler+0x12>
 80115ae:	0772      	lsls	r2, r6, #29
 80115b0:	d41d      	bmi.n	80115ee <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80115b2:	07ab      	lsls	r3, r5, #30
 80115b4:	d501      	bpl.n	80115ba <HAL_LTDC_IRQHandler+0x1a>
 80115b6:	07b7      	lsls	r7, r6, #30
 80115b8:	d42d      	bmi.n	8011616 <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80115ba:	07e8      	lsls	r0, r5, #31
 80115bc:	d501      	bpl.n	80115c2 <HAL_LTDC_IRQHandler+0x22>
 80115be:	07f1      	lsls	r1, r6, #31
 80115c0:	d440      	bmi.n	8011644 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80115c2:	072a      	lsls	r2, r5, #28
 80115c4:	d501      	bpl.n	80115ca <HAL_LTDC_IRQHandler+0x2a>
 80115c6:	0733      	lsls	r3, r6, #28
 80115c8:	d400      	bmi.n	80115cc <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80115ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80115cc:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80115ce:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 80115d0:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 80115d2:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80115d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 80115d6:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80115d8:	f022 0208 	bic.w	r2, r2, #8
 80115dc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80115de:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80115e0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80115e4:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80115e8:	f7ff ffd8 	bl	801159c <HAL_LTDC_ReloadEventCallback>
}
 80115ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80115ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80115f0:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 80115f2:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80115f4:	f022 0204 	bic.w	r2, r2, #4
 80115f8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80115fa:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80115fc:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8011600:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8011604:	f043 0301 	orr.w	r3, r3, #1
 8011608:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 801160c:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 8011610:	f7ff ffc0 	bl	8011594 <HAL_LTDC_ErrorCallback>
 8011614:	e7cd      	b.n	80115b2 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8011616:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8011618:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 801161a:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 801161c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801161e:	f022 0202 	bic.w	r2, r2, #2
 8011622:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 8011624:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8011626:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 8011628:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 801162a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 801162e:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8011632:	f043 0302 	orr.w	r3, r3, #2
 8011636:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 801163a:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 801163e:	f7ff ffa9 	bl	8011594 <HAL_LTDC_ErrorCallback>
 8011642:	e7ba      	b.n	80115ba <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8011644:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8011646:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 8011648:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 801164a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 801164c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801164e:	f022 0201 	bic.w	r2, r2, #1
 8011652:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8011654:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8011656:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 801165a:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 801165e:	f7ff ff9b 	bl	8011598 <HAL_LTDC_LineEventCallback>
 8011662:	e7ae      	b.n	80115c2 <HAL_LTDC_IRQHandler+0x22>

08011664 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8011664:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8011668:	2b01      	cmp	r3, #1
 801166a:	f000 80b9 	beq.w	80117e0 <HAL_LTDC_ConfigLayer+0x17c>
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801166e:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8011672:	2302      	movs	r3, #2
{
 8011674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8011678:	f10c 0c84 	add.w	ip, ip, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801167c:	6806      	ldr	r6, [r0, #0]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801167e:	f04f 0834 	mov.w	r8, #52	; 0x34
 8011682:	460d      	mov	r5, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8011684:	eb06 040c 	add.w	r4, r6, ip
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8011688:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801168c:	fb08 0202 	mla	r2, r8, r2, r0
 8011690:	4689      	mov	r9, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8011692:	68f1      	ldr	r1, [r6, #12]
 8011694:	4607      	mov	r7, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8011696:	6863      	ldr	r3, [r4, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8011698:	f102 0838 	add.w	r8, r2, #56	; 0x38
  __HAL_LOCK(hltdc);
 801169c:	f04f 0201 	mov.w	r2, #1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80116a0:	f3c1 4a0b 	ubfx	sl, r1, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80116a4:	f403 4e70 	and.w	lr, r3, #61440	; 0xf000
  __HAL_LOCK(hltdc);
 80116a8:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80116ac:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80116b0:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80116b4:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80116b8:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80116bc:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80116c0:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80116c4:	f8d9 3000 	ldr.w	r3, [r9]
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80116c8:	4848      	ldr	r0, [pc, #288]	; (80117ec <HAL_LTDC_ConfigLayer+0x188>)
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80116ca:	f8c8 3000 	str.w	r3, [r8]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80116ce:	686b      	ldr	r3, [r5, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80116d0:	f8c4 e004 	str.w	lr, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80116d4:	f8d5 e000 	ldr.w	lr, [r5]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80116d8:	449a      	add	sl, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80116da:	68f1      	ldr	r1, [r6, #12]
 80116dc:	f10e 0801 	add.w	r8, lr, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80116e0:	f8d5 900c 	ldr.w	r9, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80116e4:	f3c1 410b 	ubfx	r1, r1, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80116e8:	68aa      	ldr	r2, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80116ea:	4441      	add	r1, r8
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80116ec:	f8d5 8010 	ldr.w	r8, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80116f0:	3201      	adds	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80116f2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80116f6:	f8d5 a018 	ldr.w	sl, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80116fa:	6061      	str	r1, [r4, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80116fc:	68f1      	ldr	r1, [r6, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80116fe:	f8d4 b008 	ldr.w	fp, [r4, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8011702:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8011706:	f40b 4b70 	and.w	fp, fp, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 801170a:	4449      	add	r1, r9
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 801170c:	f8d5 9014 	ldr.w	r9, [r5, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8011710:	f8c4 b008 	str.w	fp, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8011714:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8011718:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 801171c:	445a      	add	r2, fp
 801171e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011722:	60a2      	str	r2, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8011724:	6922      	ldr	r2, [r4, #16]
 8011726:	f022 0207 	bic.w	r2, r2, #7
 801172a:	6122      	str	r2, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 801172c:	f8c4 8010 	str.w	r8, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8011730:	69a2      	ldr	r2, [r4, #24]
 8011732:	2200      	movs	r2, #0
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8011734:	f895 1031 	ldrb.w	r1, [r5, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8011738:	f895 b032 	ldrb.w	fp, [r5, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 801173c:	61a2      	str	r2, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 801173e:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 8011742:	ea42 620a 	orr.w	r2, r2, sl, lsl #24
 8011746:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 801174a:	6a29      	ldr	r1, [r5, #32]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 801174c:	ea42 4a0b 	orr.w	sl, r2, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8011750:	69ea      	ldr	r2, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8011752:	f8c4 a018 	str.w	sl, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8011756:	4311      	orrs	r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8011758:	6962      	ldr	r2, [r4, #20]
 801175a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801175e:	6162      	str	r2, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8011760:	f8c4 9014 	str.w	r9, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8011764:	69e2      	ldr	r2, [r4, #28]
 8011766:	4010      	ands	r0, r2
 8011768:	61e0      	str	r0, [r4, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 801176a:	61e1      	str	r1, [r4, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 801176c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801176e:	2200      	movs	r2, #0
 8011770:	62a2      	str	r2, [r4, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8011772:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8011774:	62a2      	str	r2, [r4, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8011776:	f1b8 0f00 	cmp.w	r8, #0
 801177a:	d00b      	beq.n	8011794 <HAL_LTDC_ConfigLayer+0x130>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 801177c:	f1b8 0f01 	cmp.w	r8, #1
 8011780:	d030      	beq.n	80117e4 <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8011782:	f1a8 0202 	sub.w	r2, r8, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8011786:	2a02      	cmp	r2, #2
 8011788:	d902      	bls.n	8011790 <HAL_LTDC_ConfigLayer+0x12c>
 801178a:	f1b8 0f07 	cmp.w	r8, #7
 801178e:	d12b      	bne.n	80117e8 <HAL_LTDC_ConfigLayer+0x184>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8011790:	2202      	movs	r2, #2
 8011792:	e000      	b.n	8011796 <HAL_LTDC_ConfigLayer+0x132>
    tmp = 4U;
 8011794:	2204      	movs	r2, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8011796:	eba3 030e 	sub.w	r3, r3, lr
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 801179a:	e9d5 1e0a 	ldrd	r1, lr, [r5, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 801179e:	fb02 f303 	mul.w	r3, r2, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80117a2:	2501      	movs	r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80117a4:	fb01 f202 	mul.w	r2, r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80117a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80117aa:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80117ac:	f001 21e0 	and.w	r1, r1, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80117b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80117b4:	4a0e      	ldr	r2, [pc, #56]	; (80117f0 <HAL_LTDC_ConfigLayer+0x18c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80117b6:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_UNLOCK(hltdc);
 80117b8:	2100      	movs	r1, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80117ba:	62e3      	str	r3, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80117bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  return HAL_OK;
 80117be:	4608      	mov	r0, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80117c0:	401a      	ands	r2, r3
 80117c2:	6322      	str	r2, [r4, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80117c4:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80117c8:	f856 300c 	ldr.w	r3, [r6, ip]
 80117cc:	432b      	orrs	r3, r5
 80117ce:	f846 300c 	str.w	r3, [r6, ip]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80117d2:	6275      	str	r5, [r6, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80117d4:	f887 50a1 	strb.w	r5, [r7, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80117d8:	f887 10a0 	strb.w	r1, [r7, #160]	; 0xa0
}
 80117dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hltdc);
 80117e0:	2002      	movs	r0, #2
}
 80117e2:	4770      	bx	lr
    tmp = 3U;
 80117e4:	2203      	movs	r2, #3
 80117e6:	e7d6      	b.n	8011796 <HAL_LTDC_ConfigLayer+0x132>
    tmp = 1U;
 80117e8:	2201      	movs	r2, #1
 80117ea:	e7d4      	b.n	8011796 <HAL_LTDC_ConfigLayer+0x132>
 80117ec:	fffff8f8 	.word	0xfffff8f8
 80117f0:	fffff800 	.word	0xfffff800

080117f4 <HAL_LTDC_ConfigColorKeying>:
{
 80117f4:	4603      	mov	r3, r0
  __HAL_LOCK(hltdc);
 80117f6:	f890 00a0 	ldrb.w	r0, [r0, #160]	; 0xa0
 80117fa:	2801      	cmp	r0, #1
 80117fc:	d018      	beq.n	8011830 <HAL_LTDC_ConfigColorKeying+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80117fe:	2002      	movs	r0, #2
{
 8011800:	b470      	push	{r4, r5, r6}
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8011802:	681e      	ldr	r6, [r3, #0]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8011804:	2501      	movs	r5, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8011806:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 801180a:	2400      	movs	r4, #0
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 801180c:	eb06 12c2 	add.w	r2, r6, r2, lsl #7
 8011810:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8011814:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 8011818:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  return HAL_OK;
 801181c:	4620      	mov	r0, r4
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 801181e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8011822:	6275      	str	r5, [r6, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8011824:	f883 50a1 	strb.w	r5, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8011828:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
}
 801182c:	bc70      	pop	{r4, r5, r6}
 801182e:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8011830:	2002      	movs	r0, #2
}
 8011832:	4770      	bx	lr

08011834 <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 8011834:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 8011838:	2a01      	cmp	r2, #1
 801183a:	d014      	beq.n	8011866 <HAL_LTDC_EnableColorKeying+0x32>
 801183c:	4603      	mov	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 801183e:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8011840:	2002      	movs	r0, #2
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8011842:	681a      	ldr	r2, [r3, #0]
 8011844:	3184      	adds	r1, #132	; 0x84
{
 8011846:	b470      	push	{r4, r5, r6}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8011848:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 801184c:	2601      	movs	r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 801184e:	5854      	ldr	r4, [r2, r1]
  __HAL_UNLOCK(hltdc);
 8011850:	2500      	movs	r5, #0
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8011852:	4304      	orrs	r4, r0
  return HAL_OK;
 8011854:	4628      	mov	r0, r5
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8011856:	5054      	str	r4, [r2, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8011858:	6256      	str	r6, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 801185a:	f883 60a1 	strb.w	r6, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 801185e:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
}
 8011862:	bc70      	pop	{r4, r5, r6}
 8011864:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8011866:	2002      	movs	r0, #2
}
 8011868:	4770      	bx	lr
 801186a:	bf00      	nop

0801186c <HAL_LTDC_SetAlpha>:
  __HAL_LOCK(hltdc);
 801186c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8011870:	2b01      	cmp	r3, #1
{
 8011872:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011876:	b083      	sub	sp, #12
  __HAL_LOCK(hltdc);
 8011878:	f000 80b4 	beq.w	80119e4 <HAL_LTDC_SetAlpha+0x178>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801187c:	01d7      	lsls	r7, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801187e:	6806      	ldr	r6, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8011880:	2302      	movs	r3, #2
  pLayerCfg->Alpha = Alpha;
 8011882:	2434      	movs	r4, #52	; 0x34
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8011884:	3784      	adds	r7, #132	; 0x84
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8011886:	f04f 0800 	mov.w	r8, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801188a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801188e:	19f3      	adds	r3, r6, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8011890:	68f5      	ldr	r5, [r6, #12]
  pLayerCfg->Alpha = Alpha;
 8011892:	fb04 0402 	mla	r4, r4, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8011896:	f8d3 9004 	ldr.w	r9, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801189a:	f3c5 4c0b 	ubfx	ip, r5, #16, #12
 801189e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80118a0:	f409 4970 	and.w	r9, r9, #61440	; 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80118a4:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
  pLayerCfg->Alpha = Alpha;
 80118a8:	64e1      	str	r1, [r4, #76]	; 0x4c
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80118aa:	eb0c 0a05 	add.w	sl, ip, r5
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80118ae:	f8c3 9004 	str.w	r9, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80118b2:	f10e 0b01 	add.w	fp, lr, #1
 80118b6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80118ba:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80118be:	f3cc 4c0b 	ubfx	ip, ip, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80118c2:	9501      	str	r5, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80118c4:	6c25      	ldr	r5, [r4, #64]	; 0x40
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80118c6:	44dc      	add	ip, fp
 80118c8:	ea4c 4c0a 	orr.w	ip, ip, sl, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80118cc:	f105 0a01 	add.w	sl, r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80118d0:	6d25      	ldr	r5, [r4, #80]	; 0x50
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80118d2:	f8c3 c004 	str.w	ip, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80118d6:	f8d6 b00c 	ldr.w	fp, [r6, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80118da:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80118de:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80118e2:	f40c 4c70 	and.w	ip, ip, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80118e6:	44d9      	add	r9, fp
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80118e8:	f8c3 c008 	str.w	ip, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80118ec:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80118f0:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 80118f4:	44e2      	add	sl, ip
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80118f6:	f894 c068 	ldrb.w	ip, [r4, #104]	; 0x68
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80118fa:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80118fe:	f894 a069 	ldrb.w	sl, [r4, #105]	; 0x69
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8011902:	ea4c 6c05 	orr.w	ip, ip, r5, lsl #24
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8011906:	f8c3 9008 	str.w	r9, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 801190a:	ea4c 2c0a 	orr.w	ip, ip, sl, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 801190e:	f894 906a 	ldrb.w	r9, [r4, #106]	; 0x6a
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8011912:	f8d3 a010 	ldr.w	sl, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8011916:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 801191a:	f8d4 9048 	ldr.w	r9, [r4, #72]	; 0x48
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 801191e:	f02a 0a07 	bic.w	sl, sl, #7
 8011922:	f8c3 a010 	str.w	sl, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8011926:	f8c3 9010 	str.w	r9, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 801192a:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801192e:	f8c3 8018 	str.w	r8, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8011932:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8011936:	f8d3 c014 	ldr.w	ip, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 801193a:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011a00 <HAL_LTDC_SetAlpha+0x194>
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 801193e:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
 8011942:	f8c3 c014 	str.w	ip, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8011946:	6159      	str	r1, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8011948:	69d9      	ldr	r1, [r3, #28]
 801194a:	ea01 0a0a 	and.w	sl, r1, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 801194e:	e9d4 1c15 	ldrd	r1, ip, [r4, #84]	; 0x54
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8011952:	6de4      	ldr	r4, [r4, #92]	; 0x5c
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8011954:	ea41 010c 	orr.w	r1, r1, ip
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8011958:	f8c3 a01c 	str.w	sl, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 801195c:	61d9      	str	r1, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 801195e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8011960:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8011964:	629c      	str	r4, [r3, #40]	; 0x28
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8011966:	f1b9 0f00 	cmp.w	r9, #0
 801196a:	d00c      	beq.n	8011986 <HAL_LTDC_SetAlpha+0x11a>
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 801196c:	f1b9 0f01 	cmp.w	r9, #1
 8011970:	d03d      	beq.n	80119ee <HAL_LTDC_SetAlpha+0x182>
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8011972:	f1a9 0102 	sub.w	r1, r9, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8011976:	2902      	cmp	r1, #2
 8011978:	d902      	bls.n	8011980 <HAL_LTDC_SetAlpha+0x114>
 801197a:	f1b9 0f07 	cmp.w	r9, #7
 801197e:	d139      	bne.n	80119f4 <HAL_LTDC_SetAlpha+0x188>
    tmp = 2U;
 8011980:	f04f 0c02 	mov.w	ip, #2
 8011984:	e001      	b.n	801198a <HAL_LTDC_SetAlpha+0x11e>
    tmp = 4U;
 8011986:	f04f 0c04 	mov.w	ip, #4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 801198a:	9901      	ldr	r1, [sp, #4]
 801198c:	2434      	movs	r4, #52	; 0x34
 801198e:	eba1 050e 	sub.w	r5, r1, lr
 8011992:	fb04 0202 	mla	r2, r4, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8011996:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8011998:	6e14      	ldr	r4, [r2, #96]	; 0x60
 801199a:	fb0c f505 	mul.w	r5, ip, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 801199e:	f001 21e0 	and.w	r1, r1, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80119a2:	f8d2 e064 	ldr.w	lr, [r2, #100]	; 0x64
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80119a6:	fb04 f40c 	mul.w	r4, r4, ip
 80119aa:	3503      	adds	r5, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80119ac:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80119ae:	f04f 0c01 	mov.w	ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80119b2:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80119b6:	4911      	ldr	r1, [pc, #68]	; (80119fc <HAL_LTDC_SetAlpha+0x190>)
  __HAL_UNLOCK(hltdc);
 80119b8:	2200      	movs	r2, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80119ba:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80119bc:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  return HAL_OK;
 80119be:	4614      	mov	r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80119c0:	4029      	ands	r1, r5
 80119c2:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80119c4:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80119c8:	59f3      	ldr	r3, [r6, r7]
 80119ca:	ea43 030c 	orr.w	r3, r3, ip
 80119ce:	51f3      	str	r3, [r6, r7]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80119d0:	f8c6 c024 	str.w	ip, [r6, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80119d4:	f880 c0a1 	strb.w	ip, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80119d8:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
}
 80119dc:	4620      	mov	r0, r4
 80119de:	b003      	add	sp, #12
 80119e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hltdc);
 80119e4:	2402      	movs	r4, #2
}
 80119e6:	4620      	mov	r0, r4
 80119e8:	b003      	add	sp, #12
 80119ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 80119ee:	f04f 0c03 	mov.w	ip, #3
 80119f2:	e7ca      	b.n	801198a <HAL_LTDC_SetAlpha+0x11e>
    tmp = 1U;
 80119f4:	f04f 0c01 	mov.w	ip, #1
 80119f8:	e7c7      	b.n	801198a <HAL_LTDC_SetAlpha+0x11e>
 80119fa:	bf00      	nop
 80119fc:	fffff800 	.word	0xfffff800
 8011a00:	fffff8f8 	.word	0xfffff8f8

08011a04 <HAL_LTDC_GetState>:
  return hltdc->State;
 8011a04:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8011a08:	4770      	bx	lr
 8011a0a:	bf00      	nop

08011a0c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8011a0c:	4a1b      	ldr	r2, [pc, #108]	; (8011a7c <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8011a0e:	4b1c      	ldr	r3, [pc, #112]	; (8011a80 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8011a10:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011a12:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8011a16:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8011a18:	6411      	str	r1, [r2, #64]	; 0x40
{
 8011a1a:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8011a1c:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8011a1e:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8011a20:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8011a24:	9201      	str	r2, [sp, #4]
 8011a26:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8011a28:	681a      	ldr	r2, [r3, #0]
 8011a2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011a2e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8011a30:	f7fd fb5e 	bl	800f0f0 <HAL_GetTick>
 8011a34:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8011a36:	e005      	b.n	8011a44 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8011a38:	f7fd fb5a 	bl	800f0f0 <HAL_GetTick>
 8011a3c:	1b40      	subs	r0, r0, r5
 8011a3e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8011a42:	d817      	bhi.n	8011a74 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8011a44:	6863      	ldr	r3, [r4, #4]
 8011a46:	03da      	lsls	r2, r3, #15
 8011a48:	d5f6      	bpl.n	8011a38 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8011a4a:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8011a4c:	4d0c      	ldr	r5, [pc, #48]	; (8011a80 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8011a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011a52:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8011a54:	f7fd fb4c 	bl	800f0f0 <HAL_GetTick>
 8011a58:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8011a5a:	e005      	b.n	8011a68 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8011a5c:	f7fd fb48 	bl	800f0f0 <HAL_GetTick>
 8011a60:	1b00      	subs	r0, r0, r4
 8011a62:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8011a66:	d805      	bhi.n	8011a74 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8011a68:	686b      	ldr	r3, [r5, #4]
 8011a6a:	039b      	lsls	r3, r3, #14
 8011a6c:	d5f6      	bpl.n	8011a5c <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8011a6e:	2000      	movs	r0, #0
}
 8011a70:	b003      	add	sp, #12
 8011a72:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8011a74:	2003      	movs	r0, #3
}
 8011a76:	b003      	add	sp, #12
 8011a78:	bd30      	pop	{r4, r5, pc}
 8011a7a:	bf00      	nop
 8011a7c:	40023800 	.word	0x40023800
 8011a80:	40007000 	.word	0x40007000

08011a84 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8011a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a86:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t tickstart = HAL_GetTick();
 8011a88:	f7fd fb32 	bl	800f0f0 <HAL_GetTick>
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8011a8c:	2c00      	cmp	r4, #0
 8011a8e:	d04b      	beq.n	8011b28 <HAL_QSPI_Init+0xa4>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8011a90:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011a94:	2b01      	cmp	r3, #1
 8011a96:	d053      	beq.n	8011b40 <HAL_QSPI_Init+0xbc>
 8011a98:	2301      	movs	r3, #1
 8011a9a:	4606      	mov	r6, r0
 8011a9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8011aa0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8011aa4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d03f      	beq.n	8011b2c <HAL_QSPI_Init+0xa8>
 8011aac:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8011aae:	6822      	ldr	r2, [r4, #0]
 8011ab0:	68a1      	ldr	r1, [r4, #8]
 8011ab2:	6813      	ldr	r3, [r2, #0]
 8011ab4:	3901      	subs	r1, #1
 8011ab6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8011aba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8011abe:	6013      	str	r3, [r2, #0]
 8011ac0:	e001      	b.n	8011ac6 <HAL_QSPI_Init+0x42>
{
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011ac2:	1c6b      	adds	r3, r5, #1
 8011ac4:	d128      	bne.n	8011b18 <HAL_QSPI_Init+0x94>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011ac6:	6893      	ldr	r3, [r2, #8]
 8011ac8:	f013 0320 	ands.w	r3, r3, #32
 8011acc:	d1f9      	bne.n	8011ac2 <HAL_QSPI_Init+0x3e>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8011ace:	e9d4 5607 	ldrd	r5, r6, [r4, #28]
 8011ad2:	68e1      	ldr	r1, [r4, #12]
    hqspi->State = HAL_QSPI_STATE_READY;
 8011ad4:	4618      	mov	r0, r3
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8011ad6:	6817      	ldr	r7, [r2, #0]
 8011ad8:	4329      	orrs	r1, r5
 8011ada:	6865      	ldr	r5, [r4, #4]
 8011adc:	4331      	orrs	r1, r6
 8011ade:	4e1d      	ldr	r6, [pc, #116]	; (8011b54 <HAL_QSPI_Init+0xd0>)
 8011ae0:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
 8011ae4:	403e      	ands	r6, r7
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8011ae6:	6965      	ldr	r5, [r4, #20]
 8011ae8:	69a7      	ldr	r7, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8011aea:	4331      	orrs	r1, r6
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8011aec:	4e1a      	ldr	r6, [pc, #104]	; (8011b58 <HAL_QSPI_Init+0xd4>)
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8011aee:	6011      	str	r1, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8011af0:	ea45 0107 	orr.w	r1, r5, r7
 8011af4:	6857      	ldr	r7, [r2, #4]
 8011af6:	6925      	ldr	r5, [r4, #16]
 8011af8:	403e      	ands	r6, r7
 8011afa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    hqspi->State = HAL_QSPI_STATE_READY;
 8011afe:	2501      	movs	r5, #1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8011b00:	4331      	orrs	r1, r6
 8011b02:	6051      	str	r1, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8011b04:	6811      	ldr	r1, [r2, #0]
 8011b06:	4329      	orrs	r1, r5
 8011b08:	6011      	str	r1, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8011b0a:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8011b0c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8011b10:	2300      	movs	r3, #0
 8011b12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8011b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011b18:	b1a5      	cbz	r5, 8011b44 <HAL_QSPI_Init+0xc0>
 8011b1a:	f7fd fae9 	bl	800f0f0 <HAL_GetTick>
 8011b1e:	1b80      	subs	r0, r0, r6
 8011b20:	4285      	cmp	r5, r0
 8011b22:	d30f      	bcc.n	8011b44 <HAL_QSPI_Init+0xc0>
 8011b24:	6822      	ldr	r2, [r4, #0]
 8011b26:	e7ce      	b.n	8011ac6 <HAL_QSPI_Init+0x42>
    return HAL_ERROR;
 8011b28:	2001      	movs	r0, #1
}
 8011b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hqspi->Lock = HAL_UNLOCKED;
 8011b2c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8011b30:	4620      	mov	r0, r4
 8011b32:	f7f9 fabb 	bl	800b0ac <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8011b36:	f241 3388 	movw	r3, #5000	; 0x1388
 8011b3a:	461d      	mov	r5, r3
 8011b3c:	64a3      	str	r3, [r4, #72]	; 0x48
 8011b3e:	e7b6      	b.n	8011aae <HAL_QSPI_Init+0x2a>
  __HAL_LOCK(hqspi);
 8011b40:	2002      	movs	r0, #2
}
 8011b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011b44:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011b46:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011b48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011b4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011b4e:	4303      	orrs	r3, r0
 8011b50:	6463      	str	r3, [r4, #68]	; 0x44
 8011b52:	e7dd      	b.n	8011b10 <HAL_QSPI_Init+0x8c>
 8011b54:	00ffff2f 	.word	0x00ffff2f
 8011b58:	ffe0f8fe 	.word	0xffe0f8fe

08011b5c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011b5c:	2800      	cmp	r0, #0
 8011b5e:	f000 8134 	beq.w	8011dca <HAL_RCC_OscConfig+0x26e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011b62:	6803      	ldr	r3, [r0, #0]
{
 8011b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011b68:	07dd      	lsls	r5, r3, #31
{
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011b6e:	d535      	bpl.n	8011bdc <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8011b70:	49ab      	ldr	r1, [pc, #684]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011b72:	688a      	ldr	r2, [r1, #8]
 8011b74:	f002 020c 	and.w	r2, r2, #12
 8011b78:	2a04      	cmp	r2, #4
 8011b7a:	f000 80fe 	beq.w	8011d7a <HAL_RCC_OscConfig+0x21e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011b7e:	688a      	ldr	r2, [r1, #8]
 8011b80:	f002 020c 	and.w	r2, r2, #12
 8011b84:	2a08      	cmp	r2, #8
 8011b86:	f000 80f4 	beq.w	8011d72 <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011b8a:	6863      	ldr	r3, [r4, #4]
 8011b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b90:	d010      	beq.n	8011bb4 <HAL_RCC_OscConfig+0x58>
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	f000 811b 	beq.w	8011dce <HAL_RCC_OscConfig+0x272>
 8011b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011b9c:	4ba0      	ldr	r3, [pc, #640]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011b9e:	681a      	ldr	r2, [r3, #0]
 8011ba0:	f000 8162 	beq.w	8011e68 <HAL_RCC_OscConfig+0x30c>
 8011ba4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011ba8:	601a      	str	r2, [r3, #0]
 8011baa:	681a      	ldr	r2, [r3, #0]
 8011bac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011bb0:	601a      	str	r2, [r3, #0]
 8011bb2:	e004      	b.n	8011bbe <HAL_RCC_OscConfig+0x62>
 8011bb4:	4a9a      	ldr	r2, [pc, #616]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011bb6:	6813      	ldr	r3, [r2, #0]
 8011bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011bbc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011bbe:	f7fd fa97 	bl	800f0f0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011bc2:	4d97      	ldr	r5, [pc, #604]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8011bc4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011bc6:	e005      	b.n	8011bd4 <HAL_RCC_OscConfig+0x78>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011bc8:	f7fd fa92 	bl	800f0f0 <HAL_GetTick>
 8011bcc:	1b80      	subs	r0, r0, r6
 8011bce:	2864      	cmp	r0, #100	; 0x64
 8011bd0:	f200 80ee 	bhi.w	8011db0 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011bd4:	682b      	ldr	r3, [r5, #0]
 8011bd6:	039a      	lsls	r2, r3, #14
 8011bd8:	d5f6      	bpl.n	8011bc8 <HAL_RCC_OscConfig+0x6c>
 8011bda:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011bdc:	079f      	lsls	r7, r3, #30
 8011bde:	d442      	bmi.n	8011c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011be0:	071a      	lsls	r2, r3, #28
 8011be2:	d517      	bpl.n	8011c14 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011be4:	6963      	ldr	r3, [r4, #20]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	f000 80b0 	beq.w	8011d4c <HAL_RCC_OscConfig+0x1f0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011bec:	4b8c      	ldr	r3, [pc, #560]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011bee:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011bf0:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8011bf2:	f042 0201 	orr.w	r2, r2, #1
 8011bf6:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8011bf8:	f7fd fa7a 	bl	800f0f0 <HAL_GetTick>
 8011bfc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011bfe:	e005      	b.n	8011c0c <HAL_RCC_OscConfig+0xb0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011c00:	f7fd fa76 	bl	800f0f0 <HAL_GetTick>
 8011c04:	1b80      	subs	r0, r0, r6
 8011c06:	2802      	cmp	r0, #2
 8011c08:	f200 80d2 	bhi.w	8011db0 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011c0c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8011c0e:	079b      	lsls	r3, r3, #30
 8011c10:	d5f6      	bpl.n	8011c00 <HAL_RCC_OscConfig+0xa4>
 8011c12:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011c14:	075d      	lsls	r5, r3, #29
 8011c16:	d56b      	bpl.n	8011cf0 <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011c18:	4b81      	ldr	r3, [pc, #516]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011c1c:	00d0      	lsls	r0, r2, #3
 8011c1e:	f100 80ed 	bmi.w	8011dfc <HAL_RCC_OscConfig+0x2a0>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8011c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8011c24:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8011c26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011c2a:	641a      	str	r2, [r3, #64]	; 0x40
 8011c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011c32:	9301      	str	r3, [sp, #4]
 8011c34:	9b01      	ldr	r3, [sp, #4]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011c36:	4b7b      	ldr	r3, [pc, #492]	; (8011e24 <HAL_RCC_OscConfig+0x2c8>)
 8011c38:	681a      	ldr	r2, [r3, #0]
 8011c3a:	05d1      	lsls	r1, r2, #23
 8011c3c:	f140 80a7 	bpl.w	8011d8e <HAL_RCC_OscConfig+0x232>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011c40:	68a3      	ldr	r3, [r4, #8]
 8011c42:	2b01      	cmp	r3, #1
 8011c44:	d039      	beq.n	8011cba <HAL_RCC_OscConfig+0x15e>
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	f000 80da 	beq.w	8011e00 <HAL_RCC_OscConfig+0x2a4>
 8011c4c:	2b05      	cmp	r3, #5
 8011c4e:	4b74      	ldr	r3, [pc, #464]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011c50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011c52:	f000 8111 	beq.w	8011e78 <HAL_RCC_OscConfig+0x31c>
 8011c56:	f022 0201 	bic.w	r2, r2, #1
 8011c5a:	671a      	str	r2, [r3, #112]	; 0x70
 8011c5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011c5e:	f022 0204 	bic.w	r2, r2, #4
 8011c62:	671a      	str	r2, [r3, #112]	; 0x70
 8011c64:	e02e      	b.n	8011cc4 <HAL_RCC_OscConfig+0x168>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8011c66:	4a6e      	ldr	r2, [pc, #440]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011c68:	6891      	ldr	r1, [r2, #8]
 8011c6a:	f011 0f0c 	tst.w	r1, #12
 8011c6e:	d062      	beq.n	8011d36 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011c70:	6891      	ldr	r1, [r2, #8]
 8011c72:	f001 010c 	and.w	r1, r1, #12
 8011c76:	2908      	cmp	r1, #8
 8011c78:	d05a      	beq.n	8011d30 <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011c7a:	68e3      	ldr	r3, [r4, #12]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	f000 80df 	beq.w	8011e40 <HAL_RCC_OscConfig+0x2e4>
        __HAL_RCC_HSI_ENABLE();
 8011c82:	4b67      	ldr	r3, [pc, #412]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011c84:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011c86:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8011c88:	f042 0201 	orr.w	r2, r2, #1
 8011c8c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011c8e:	f7fd fa2f 	bl	800f0f0 <HAL_GetTick>
 8011c92:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011c94:	e005      	b.n	8011ca2 <HAL_RCC_OscConfig+0x146>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011c96:	f7fd fa2b 	bl	800f0f0 <HAL_GetTick>
 8011c9a:	1b80      	subs	r0, r0, r6
 8011c9c:	2802      	cmp	r0, #2
 8011c9e:	f200 8087 	bhi.w	8011db0 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011ca2:	682b      	ldr	r3, [r5, #0]
 8011ca4:	0798      	lsls	r0, r3, #30
 8011ca6:	d5f6      	bpl.n	8011c96 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011ca8:	682b      	ldr	r3, [r5, #0]
 8011caa:	6922      	ldr	r2, [r4, #16]
 8011cac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011cb0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8011cb4:	602b      	str	r3, [r5, #0]
 8011cb6:	6823      	ldr	r3, [r4, #0]
 8011cb8:	e792      	b.n	8011be0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011cba:	4a59      	ldr	r2, [pc, #356]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011cbc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8011cbe:	f043 0301 	orr.w	r3, r3, #1
 8011cc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011cc4:	f7fd fa14 	bl	800f0f0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011cc8:	4e55      	ldr	r6, [pc, #340]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 8011cca:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011ccc:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011cd0:	e005      	b.n	8011cde <HAL_RCC_OscConfig+0x182>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011cd2:	f7fd fa0d 	bl	800f0f0 <HAL_GetTick>
 8011cd6:	eba0 0008 	sub.w	r0, r0, r8
 8011cda:	42b8      	cmp	r0, r7
 8011cdc:	d868      	bhi.n	8011db0 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011cde:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8011ce0:	079b      	lsls	r3, r3, #30
 8011ce2:	d5f6      	bpl.n	8011cd2 <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011ce4:	b125      	cbz	r5, 8011cf0 <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011ce6:	4a4e      	ldr	r2, [pc, #312]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011ce8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011cee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011cf0:	69a3      	ldr	r3, [r4, #24]
 8011cf2:	b1cb      	cbz	r3, 8011d28 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011cf4:	4a4a      	ldr	r2, [pc, #296]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011cf6:	6891      	ldr	r1, [r2, #8]
 8011cf8:	f001 010c 	and.w	r1, r1, #12
 8011cfc:	2908      	cmp	r1, #8
 8011cfe:	d021      	beq.n	8011d44 <HAL_RCC_OscConfig+0x1e8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011d00:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011d02:	6813      	ldr	r3, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011d04:	f000 80c0 	beq.w	8011e88 <HAL_RCC_OscConfig+0x32c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011d0c:	4614      	mov	r4, r2
        __HAL_RCC_PLL_DISABLE();
 8011d0e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011d10:	f7fd f9ee 	bl	800f0f0 <HAL_GetTick>
 8011d14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011d16:	e004      	b.n	8011d22 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d18:	f7fd f9ea 	bl	800f0f0 <HAL_GetTick>
 8011d1c:	1b40      	subs	r0, r0, r5
 8011d1e:	2802      	cmp	r0, #2
 8011d20:	d846      	bhi.n	8011db0 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011d22:	6823      	ldr	r3, [r4, #0]
 8011d24:	019b      	lsls	r3, r3, #6
 8011d26:	d4f7      	bmi.n	8011d18 <HAL_RCC_OscConfig+0x1bc>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8011d28:	2000      	movs	r0, #0
}
 8011d2a:	b002      	add	sp, #8
 8011d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011d30:	6852      	ldr	r2, [r2, #4]
 8011d32:	0256      	lsls	r6, r2, #9
 8011d34:	d4a1      	bmi.n	8011c7a <HAL_RCC_OscConfig+0x11e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011d36:	4a3a      	ldr	r2, [pc, #232]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011d38:	6812      	ldr	r2, [r2, #0]
 8011d3a:	0795      	lsls	r5, r2, #30
 8011d3c:	d53c      	bpl.n	8011db8 <HAL_RCC_OscConfig+0x25c>
 8011d3e:	68e2      	ldr	r2, [r4, #12]
 8011d40:	2a01      	cmp	r2, #1
 8011d42:	d039      	beq.n	8011db8 <HAL_RCC_OscConfig+0x25c>
    return HAL_ERROR;
 8011d44:	2001      	movs	r0, #1
}
 8011d46:	b002      	add	sp, #8
 8011d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8011d4c:	4b34      	ldr	r3, [pc, #208]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011d4e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011d50:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8011d52:	f022 0201 	bic.w	r2, r2, #1
 8011d56:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8011d58:	f7fd f9ca 	bl	800f0f0 <HAL_GetTick>
 8011d5c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011d5e:	e004      	b.n	8011d6a <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011d60:	f7fd f9c6 	bl	800f0f0 <HAL_GetTick>
 8011d64:	1b80      	subs	r0, r0, r6
 8011d66:	2802      	cmp	r0, #2
 8011d68:	d822      	bhi.n	8011db0 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011d6a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8011d6c:	079f      	lsls	r7, r3, #30
 8011d6e:	d4f7      	bmi.n	8011d60 <HAL_RCC_OscConfig+0x204>
 8011d70:	e74f      	b.n	8011c12 <HAL_RCC_OscConfig+0xb6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011d72:	684a      	ldr	r2, [r1, #4]
 8011d74:	0250      	lsls	r0, r2, #9
 8011d76:	f57f af08 	bpl.w	8011b8a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011d7a:	4a29      	ldr	r2, [pc, #164]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011d7c:	6812      	ldr	r2, [r2, #0]
 8011d7e:	0391      	lsls	r1, r2, #14
 8011d80:	f57f af2c 	bpl.w	8011bdc <HAL_RCC_OscConfig+0x80>
 8011d84:	6862      	ldr	r2, [r4, #4]
 8011d86:	2a00      	cmp	r2, #0
 8011d88:	f47f af28 	bne.w	8011bdc <HAL_RCC_OscConfig+0x80>
 8011d8c:	e7da      	b.n	8011d44 <HAL_RCC_OscConfig+0x1e8>
      PWR->CR1 |= PWR_CR1_DBP;
 8011d8e:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011d90:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8011d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011d96:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8011d98:	f7fd f9aa 	bl	800f0f0 <HAL_GetTick>
 8011d9c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011d9e:	6833      	ldr	r3, [r6, #0]
 8011da0:	05da      	lsls	r2, r3, #23
 8011da2:	f53f af4d 	bmi.w	8011c40 <HAL_RCC_OscConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8011da6:	f7fd f9a3 	bl	800f0f0 <HAL_GetTick>
 8011daa:	1bc0      	subs	r0, r0, r7
 8011dac:	2864      	cmp	r0, #100	; 0x64
 8011dae:	d9f6      	bls.n	8011d9e <HAL_RCC_OscConfig+0x242>
            return HAL_TIMEOUT;
 8011db0:	2003      	movs	r0, #3
}
 8011db2:	b002      	add	sp, #8
 8011db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011db8:	4919      	ldr	r1, [pc, #100]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011dba:	6920      	ldr	r0, [r4, #16]
 8011dbc:	680a      	ldr	r2, [r1, #0]
 8011dbe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8011dc2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8011dc6:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011dc8:	e70a      	b.n	8011be0 <HAL_RCC_OscConfig+0x84>
    return HAL_ERROR;
 8011dca:	2001      	movs	r0, #1
}
 8011dcc:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011dce:	4b14      	ldr	r3, [pc, #80]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
 8011dd0:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011dd2:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011dd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011dd8:	601a      	str	r2, [r3, #0]
 8011dda:	681a      	ldr	r2, [r3, #0]
 8011ddc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011de0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011de2:	f7fd f985 	bl	800f0f0 <HAL_GetTick>
 8011de6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011de8:	e004      	b.n	8011df4 <HAL_RCC_OscConfig+0x298>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011dea:	f7fd f981 	bl	800f0f0 <HAL_GetTick>
 8011dee:	1b80      	subs	r0, r0, r6
 8011df0:	2864      	cmp	r0, #100	; 0x64
 8011df2:	d8dd      	bhi.n	8011db0 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011df4:	682b      	ldr	r3, [r5, #0]
 8011df6:	039b      	lsls	r3, r3, #14
 8011df8:	d4f7      	bmi.n	8011dea <HAL_RCC_OscConfig+0x28e>
 8011dfa:	e6ee      	b.n	8011bda <HAL_RCC_OscConfig+0x7e>
  FlagStatus pwrclkchanged = RESET;
 8011dfc:	2500      	movs	r5, #0
 8011dfe:	e71a      	b.n	8011c36 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011e00:	4b07      	ldr	r3, [pc, #28]	; (8011e20 <HAL_RCC_OscConfig+0x2c4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011e02:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011e06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011e08:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011e0a:	f022 0201 	bic.w	r2, r2, #1
 8011e0e:	671a      	str	r2, [r3, #112]	; 0x70
 8011e10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011e12:	f022 0204 	bic.w	r2, r2, #4
 8011e16:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8011e18:	f7fd f96a 	bl	800f0f0 <HAL_GetTick>
 8011e1c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011e1e:	e008      	b.n	8011e32 <HAL_RCC_OscConfig+0x2d6>
 8011e20:	40023800 	.word	0x40023800
 8011e24:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011e28:	f7fd f962 	bl	800f0f0 <HAL_GetTick>
 8011e2c:	1bc0      	subs	r0, r0, r7
 8011e2e:	4540      	cmp	r0, r8
 8011e30:	d8be      	bhi.n	8011db0 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011e32:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8011e34:	0798      	lsls	r0, r3, #30
 8011e36:	d4f7      	bmi.n	8011e28 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8011e38:	2d00      	cmp	r5, #0
 8011e3a:	f43f af59 	beq.w	8011cf0 <HAL_RCC_OscConfig+0x194>
 8011e3e:	e752      	b.n	8011ce6 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 8011e40:	4b2b      	ldr	r3, [pc, #172]	; (8011ef0 <HAL_RCC_OscConfig+0x394>)
 8011e42:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011e44:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8011e46:	f022 0201 	bic.w	r2, r2, #1
 8011e4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011e4c:	f7fd f950 	bl	800f0f0 <HAL_GetTick>
 8011e50:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011e52:	e004      	b.n	8011e5e <HAL_RCC_OscConfig+0x302>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011e54:	f7fd f94c 	bl	800f0f0 <HAL_GetTick>
 8011e58:	1b80      	subs	r0, r0, r6
 8011e5a:	2802      	cmp	r0, #2
 8011e5c:	d8a8      	bhi.n	8011db0 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011e5e:	682b      	ldr	r3, [r5, #0]
 8011e60:	0799      	lsls	r1, r3, #30
 8011e62:	d4f7      	bmi.n	8011e54 <HAL_RCC_OscConfig+0x2f8>
 8011e64:	6823      	ldr	r3, [r4, #0]
 8011e66:	e6bb      	b.n	8011be0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011e68:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011e6c:	601a      	str	r2, [r3, #0]
 8011e6e:	681a      	ldr	r2, [r3, #0]
 8011e70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011e74:	601a      	str	r2, [r3, #0]
 8011e76:	e6a2      	b.n	8011bbe <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011e78:	f042 0204 	orr.w	r2, r2, #4
 8011e7c:	671a      	str	r2, [r3, #112]	; 0x70
 8011e7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011e80:	f042 0201 	orr.w	r2, r2, #1
 8011e84:	671a      	str	r2, [r3, #112]	; 0x70
 8011e86:	e71d      	b.n	8011cc4 <HAL_RCC_OscConfig+0x168>
        __HAL_RCC_PLL_DISABLE();
 8011e88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011e8c:	4615      	mov	r5, r2
        __HAL_RCC_PLL_DISABLE();
 8011e8e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011e90:	f7fd f92e 	bl	800f0f0 <HAL_GetTick>
 8011e94:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011e96:	e004      	b.n	8011ea2 <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011e98:	f7fd f92a 	bl	800f0f0 <HAL_GetTick>
 8011e9c:	1b80      	subs	r0, r0, r6
 8011e9e:	2802      	cmp	r0, #2
 8011ea0:	d886      	bhi.n	8011db0 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011ea2:	682b      	ldr	r3, [r5, #0]
 8011ea4:	0199      	lsls	r1, r3, #6
 8011ea6:	d4f7      	bmi.n	8011e98 <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011ea8:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8011eac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011eae:	4313      	orrs	r3, r2
 8011eb0:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8011eb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011eb8:	4c0d      	ldr	r4, [pc, #52]	; (8011ef0 <HAL_RCC_OscConfig+0x394>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011eba:	0852      	lsrs	r2, r2, #1
 8011ebc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8011ec0:	3a01      	subs	r2, #1
 8011ec2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8011ec6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011eca:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8011ecc:	682b      	ldr	r3, [r5, #0]
 8011ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011ed2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011ed4:	f7fd f90c 	bl	800f0f0 <HAL_GetTick>
 8011ed8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011eda:	e005      	b.n	8011ee8 <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011edc:	f7fd f908 	bl	800f0f0 <HAL_GetTick>
 8011ee0:	1b40      	subs	r0, r0, r5
 8011ee2:	2802      	cmp	r0, #2
 8011ee4:	f63f af64 	bhi.w	8011db0 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011ee8:	6823      	ldr	r3, [r4, #0]
 8011eea:	019a      	lsls	r2, r3, #6
 8011eec:	d5f6      	bpl.n	8011edc <HAL_RCC_OscConfig+0x380>
 8011eee:	e71b      	b.n	8011d28 <HAL_RCC_OscConfig+0x1cc>
 8011ef0:	40023800 	.word	0x40023800

08011ef4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011ef4:	b178      	cbz	r0, 8011f16 <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011ef6:	4a5e      	ldr	r2, [pc, #376]	; (8012070 <HAL_RCC_ClockConfig+0x17c>)
 8011ef8:	6813      	ldr	r3, [r2, #0]
 8011efa:	f003 030f 	and.w	r3, r3, #15
 8011efe:	428b      	cmp	r3, r1
 8011f00:	d20b      	bcs.n	8011f1a <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011f02:	6813      	ldr	r3, [r2, #0]
 8011f04:	f023 030f 	bic.w	r3, r3, #15
 8011f08:	430b      	orrs	r3, r1
 8011f0a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011f0c:	6813      	ldr	r3, [r2, #0]
 8011f0e:	f003 030f 	and.w	r3, r3, #15
 8011f12:	428b      	cmp	r3, r1
 8011f14:	d001      	beq.n	8011f1a <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8011f16:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8011f18:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011f1a:	6803      	ldr	r3, [r0, #0]
{
 8011f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011f20:	079d      	lsls	r5, r3, #30
 8011f22:	d514      	bpl.n	8011f4e <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011f24:	075c      	lsls	r4, r3, #29
 8011f26:	d504      	bpl.n	8011f32 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011f28:	4c52      	ldr	r4, [pc, #328]	; (8012074 <HAL_RCC_ClockConfig+0x180>)
 8011f2a:	68a2      	ldr	r2, [r4, #8]
 8011f2c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8011f30:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011f32:	071a      	lsls	r2, r3, #28
 8011f34:	d504      	bpl.n	8011f40 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011f36:	4c4f      	ldr	r4, [pc, #316]	; (8012074 <HAL_RCC_ClockConfig+0x180>)
 8011f38:	68a2      	ldr	r2, [r4, #8]
 8011f3a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8011f3e:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011f40:	4c4c      	ldr	r4, [pc, #304]	; (8012074 <HAL_RCC_ClockConfig+0x180>)
 8011f42:	6885      	ldr	r5, [r0, #8]
 8011f44:	68a2      	ldr	r2, [r4, #8]
 8011f46:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8011f4a:	432a      	orrs	r2, r5
 8011f4c:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011f4e:	07df      	lsls	r7, r3, #31
 8011f50:	4604      	mov	r4, r0
 8011f52:	460d      	mov	r5, r1
 8011f54:	d521      	bpl.n	8011f9a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011f56:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011f58:	4b46      	ldr	r3, [pc, #280]	; (8012074 <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011f5a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011f5c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011f5e:	d063      	beq.n	8012028 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011f60:	2a02      	cmp	r2, #2
 8011f62:	d078      	beq.n	8012056 <HAL_RCC_ClockConfig+0x162>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011f64:	0799      	lsls	r1, r3, #30
 8011f66:	d528      	bpl.n	8011fba <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011f68:	4942      	ldr	r1, [pc, #264]	; (8012074 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011f6a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011f6e:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011f70:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011f72:	f023 0303 	bic.w	r3, r3, #3
 8011f76:	4313      	orrs	r3, r2
 8011f78:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8011f7a:	f7fd f8b9 	bl	800f0f0 <HAL_GetTick>
 8011f7e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011f80:	e004      	b.n	8011f8c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011f82:	f7fd f8b5 	bl	800f0f0 <HAL_GetTick>
 8011f86:	1bc0      	subs	r0, r0, r7
 8011f88:	4540      	cmp	r0, r8
 8011f8a:	d862      	bhi.n	8012052 <HAL_RCC_ClockConfig+0x15e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011f8c:	68b3      	ldr	r3, [r6, #8]
 8011f8e:	6862      	ldr	r2, [r4, #4]
 8011f90:	f003 030c 	and.w	r3, r3, #12
 8011f94:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8011f98:	d1f3      	bne.n	8011f82 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011f9a:	4a35      	ldr	r2, [pc, #212]	; (8012070 <HAL_RCC_ClockConfig+0x17c>)
 8011f9c:	6813      	ldr	r3, [r2, #0]
 8011f9e:	f003 030f 	and.w	r3, r3, #15
 8011fa2:	42ab      	cmp	r3, r5
 8011fa4:	d90c      	bls.n	8011fc0 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011fa6:	6813      	ldr	r3, [r2, #0]
 8011fa8:	f023 030f 	bic.w	r3, r3, #15
 8011fac:	432b      	orrs	r3, r5
 8011fae:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011fb0:	6813      	ldr	r3, [r2, #0]
 8011fb2:	f003 030f 	and.w	r3, r3, #15
 8011fb6:	42ab      	cmp	r3, r5
 8011fb8:	d002      	beq.n	8011fc0 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 8011fba:	2001      	movs	r0, #1
}
 8011fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011fc0:	6823      	ldr	r3, [r4, #0]
 8011fc2:	075a      	lsls	r2, r3, #29
 8011fc4:	d506      	bpl.n	8011fd4 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011fc6:	492b      	ldr	r1, [pc, #172]	; (8012074 <HAL_RCC_ClockConfig+0x180>)
 8011fc8:	68e0      	ldr	r0, [r4, #12]
 8011fca:	688a      	ldr	r2, [r1, #8]
 8011fcc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8011fd0:	4302      	orrs	r2, r0
 8011fd2:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011fd4:	071b      	lsls	r3, r3, #28
 8011fd6:	d507      	bpl.n	8011fe8 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8011fd8:	4a26      	ldr	r2, [pc, #152]	; (8012074 <HAL_RCC_ClockConfig+0x180>)
 8011fda:	6921      	ldr	r1, [r4, #16]
 8011fdc:	6893      	ldr	r3, [r2, #8]
 8011fde:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8011fe2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8011fe6:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011fe8:	4922      	ldr	r1, [pc, #136]	; (8012074 <HAL_RCC_ClockConfig+0x180>)
 8011fea:	688b      	ldr	r3, [r1, #8]
 8011fec:	f003 030c 	and.w	r3, r3, #12
 8011ff0:	2b04      	cmp	r3, #4
 8011ff2:	d01c      	beq.n	801202e <HAL_RCC_ClockConfig+0x13a>
 8011ff4:	2b08      	cmp	r3, #8
 8011ff6:	d12a      	bne.n	801204e <HAL_RCC_ClockConfig+0x15a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011ff8:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8011ffa:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011ffc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012000:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8012002:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8012006:	d129      	bne.n	801205c <HAL_RCC_ClockConfig+0x168>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012008:	481b      	ldr	r0, [pc, #108]	; (8012078 <HAL_RCC_ClockConfig+0x184>)
 801200a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 801200e:	fba1 0100 	umull	r0, r1, r1, r0
 8012012:	f7ee fdf3 	bl	8000bfc <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8012016:	4b17      	ldr	r3, [pc, #92]	; (8012074 <HAL_RCC_ClockConfig+0x180>)
 8012018:	685b      	ldr	r3, [r3, #4]
 801201a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 801201e:	3301      	adds	r3, #1
 8012020:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8012022:	fbb0 f3f3 	udiv	r3, r0, r3
 8012026:	e003      	b.n	8012030 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012028:	039e      	lsls	r6, r3, #14
 801202a:	d49d      	bmi.n	8011f68 <HAL_RCC_ClockConfig+0x74>
 801202c:	e7c5      	b.n	8011fba <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 801202e:	4b13      	ldr	r3, [pc, #76]	; (801207c <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012030:	4a10      	ldr	r2, [pc, #64]	; (8012074 <HAL_RCC_ClockConfig+0x180>)
  HAL_InitTick (TICK_INT_PRIORITY);
 8012032:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012034:	4c12      	ldr	r4, [pc, #72]	; (8012080 <HAL_RCC_ClockConfig+0x18c>)
 8012036:	6892      	ldr	r2, [r2, #8]
 8012038:	4912      	ldr	r1, [pc, #72]	; (8012084 <HAL_RCC_ClockConfig+0x190>)
 801203a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 801203e:	5ca2      	ldrb	r2, [r4, r2]
 8012040:	40d3      	lsrs	r3, r2
 8012042:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8012044:	f7f9 fb38 	bl	800b6b8 <HAL_InitTick>
  return HAL_OK;
 8012048:	2000      	movs	r0, #0
}
 801204a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 801204e:	4b0a      	ldr	r3, [pc, #40]	; (8012078 <HAL_RCC_ClockConfig+0x184>)
 8012050:	e7ee      	b.n	8012030 <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 8012052:	2003      	movs	r0, #3
 8012054:	e7b2      	b.n	8011fbc <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012056:	0198      	lsls	r0, r3, #6
 8012058:	d486      	bmi.n	8011f68 <HAL_RCC_ClockConfig+0x74>
 801205a:	e7ae      	b.n	8011fba <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801205c:	4807      	ldr	r0, [pc, #28]	; (801207c <HAL_RCC_ClockConfig+0x188>)
 801205e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8012062:	2300      	movs	r3, #0
 8012064:	fba1 0100 	umull	r0, r1, r1, r0
 8012068:	f7ee fdc8 	bl	8000bfc <__aeabi_uldivmod>
 801206c:	e7d3      	b.n	8012016 <HAL_RCC_ClockConfig+0x122>
 801206e:	bf00      	nop
 8012070:	40023c00 	.word	0x40023c00
 8012074:	40023800 	.word	0x40023800
 8012078:	00f42400 	.word	0x00f42400
 801207c:	017d7840 	.word	0x017d7840
 8012080:	08023714 	.word	0x08023714
 8012084:	2000002c 	.word	0x2000002c

08012088 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012088:	4916      	ldr	r1, [pc, #88]	; (80120e4 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 801208a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801208c:	688b      	ldr	r3, [r1, #8]
 801208e:	f003 030c 	and.w	r3, r3, #12
 8012092:	2b04      	cmp	r3, #4
 8012094:	d01b      	beq.n	80120ce <HAL_RCC_GetSysClockFreq+0x46>
 8012096:	2b08      	cmp	r3, #8
 8012098:	d117      	bne.n	80120ca <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801209a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801209c:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801209e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80120a2:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80120a4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80120a8:	d113      	bne.n	80120d2 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80120aa:	480f      	ldr	r0, [pc, #60]	; (80120e8 <HAL_RCC_GetSysClockFreq+0x60>)
 80120ac:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80120b0:	fba1 0100 	umull	r0, r1, r1, r0
 80120b4:	f7ee fda2 	bl	8000bfc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80120b8:	4b0a      	ldr	r3, [pc, #40]	; (80120e4 <HAL_RCC_GetSysClockFreq+0x5c>)
 80120ba:	685b      	ldr	r3, [r3, #4]
 80120bc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80120c0:	3301      	adds	r3, #1
 80120c2:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80120c4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80120c8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80120ca:	4807      	ldr	r0, [pc, #28]	; (80120e8 <HAL_RCC_GetSysClockFreq+0x60>)
}
 80120cc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80120ce:	4807      	ldr	r0, [pc, #28]	; (80120ec <HAL_RCC_GetSysClockFreq+0x64>)
}
 80120d0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80120d2:	4806      	ldr	r0, [pc, #24]	; (80120ec <HAL_RCC_GetSysClockFreq+0x64>)
 80120d4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80120d8:	2300      	movs	r3, #0
 80120da:	fba1 0100 	umull	r0, r1, r1, r0
 80120de:	f7ee fd8d 	bl	8000bfc <__aeabi_uldivmod>
 80120e2:	e7e9      	b.n	80120b8 <HAL_RCC_GetSysClockFreq+0x30>
 80120e4:	40023800 	.word	0x40023800
 80120e8:	00f42400 	.word	0x00f42400
 80120ec:	017d7840 	.word	0x017d7840

080120f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80120f0:	4b01      	ldr	r3, [pc, #4]	; (80120f8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80120f2:	6818      	ldr	r0, [r3, #0]
 80120f4:	4770      	bx	lr
 80120f6:	bf00      	nop
 80120f8:	2000002c 	.word	0x2000002c

080120fc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80120fc:	4b04      	ldr	r3, [pc, #16]	; (8012110 <HAL_RCC_GetPCLK1Freq+0x14>)
 80120fe:	4a05      	ldr	r2, [pc, #20]	; (8012114 <HAL_RCC_GetPCLK1Freq+0x18>)
 8012100:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8012102:	4905      	ldr	r1, [pc, #20]	; (8012118 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8012104:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8012108:	6808      	ldr	r0, [r1, #0]
 801210a:	5cd3      	ldrb	r3, [r2, r3]
}
 801210c:	40d8      	lsrs	r0, r3
 801210e:	4770      	bx	lr
 8012110:	40023800 	.word	0x40023800
 8012114:	08023724 	.word	0x08023724
 8012118:	2000002c 	.word	0x2000002c

0801211c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801211c:	4b04      	ldr	r3, [pc, #16]	; (8012130 <HAL_RCC_GetPCLK2Freq+0x14>)
 801211e:	4a05      	ldr	r2, [pc, #20]	; (8012134 <HAL_RCC_GetPCLK2Freq+0x18>)
 8012120:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8012122:	4905      	ldr	r1, [pc, #20]	; (8012138 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8012124:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8012128:	6808      	ldr	r0, [r1, #0]
 801212a:	5cd3      	ldrb	r3, [r2, r3]
}
 801212c:	40d8      	lsrs	r0, r3
 801212e:	4770      	bx	lr
 8012130:	40023800 	.word	0x40023800
 8012134:	08023724 	.word	0x08023724
 8012138:	2000002c 	.word	0x2000002c

0801213c <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801213c:	4b0e      	ldr	r3, [pc, #56]	; (8012178 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801213e:	220f      	movs	r2, #15
 8012140:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012142:	689a      	ldr	r2, [r3, #8]
 8012144:	f002 0203 	and.w	r2, r2, #3
 8012148:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801214a:	689a      	ldr	r2, [r3, #8]
 801214c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8012150:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8012152:	689a      	ldr	r2, [r3, #8]
 8012154:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8012158:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 801215a:	689b      	ldr	r3, [r3, #8]
 801215c:	08db      	lsrs	r3, r3, #3
{
 801215e:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8012160:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012164:	4c05      	ldr	r4, [pc, #20]	; (801217c <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8012166:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012168:	6823      	ldr	r3, [r4, #0]
}
 801216a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801216e:	f003 030f 	and.w	r3, r3, #15
 8012172:	600b      	str	r3, [r1, #0]
}
 8012174:	4770      	bx	lr
 8012176:	bf00      	nop
 8012178:	40023800 	.word	0x40023800
 801217c:	40023c00 	.word	0x40023c00

08012180 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8012180:	6803      	ldr	r3, [r0, #0]
{
 8012182:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8012186:	f013 0601 	ands.w	r6, r3, #1
{
 801218a:	b083      	sub	sp, #12
 801218c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 801218e:	d00b      	beq.n	80121a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8012190:	4ab8      	ldr	r2, [pc, #736]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012192:	6891      	ldr	r1, [r2, #8]
 8012194:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8012198:	6091      	str	r1, [r2, #8]
 801219a:	6b46      	ldr	r6, [r0, #52]	; 0x34
 801219c:	6891      	ldr	r1, [r2, #8]
 801219e:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80121a0:	fab6 f686 	clz	r6, r6
 80121a4:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80121a6:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80121a8:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80121ac:	d010      	beq.n	80121d0 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80121ae:	49b1      	ldr	r1, [pc, #708]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80121b0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80121b2:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80121b6:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80121ba:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80121be:	ea42 0205 	orr.w	r2, r2, r5
 80121c2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80121c6:	f000 81b0 	beq.w	801252a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80121ca:	fab5 f585 	clz	r5, r5
 80121ce:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80121d0:	02d9      	lsls	r1, r3, #11
 80121d2:	d510      	bpl.n	80121f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80121d4:	48a7      	ldr	r0, [pc, #668]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80121d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80121d8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80121dc:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80121e0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80121e4:	ea42 0201 	orr.w	r2, r2, r1
 80121e8:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80121ec:	f000 819b 	beq.w	8012526 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80121f0:	2900      	cmp	r1, #0
 80121f2:	bf08      	it	eq
 80121f4:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80121f6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80121fa:	bf18      	it	ne
 80121fc:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80121fe:	069a      	lsls	r2, r3, #26
 8012200:	f100 8149 	bmi.w	8012496 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8012204:	06d9      	lsls	r1, r3, #27
 8012206:	d50c      	bpl.n	8012222 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012208:	4a9a      	ldr	r2, [pc, #616]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801220a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 801220e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8012212:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8012216:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 801221a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801221c:	4301      	orrs	r1, r0
 801221e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012222:	045a      	lsls	r2, r3, #17
 8012224:	d508      	bpl.n	8012238 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012226:	4993      	ldr	r1, [pc, #588]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012228:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801222a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801222e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8012232:	4302      	orrs	r2, r0
 8012234:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8012238:	041f      	lsls	r7, r3, #16
 801223a:	d508      	bpl.n	801224e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801223c:	498d      	ldr	r1, [pc, #564]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801223e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8012240:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8012244:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8012248:	4302      	orrs	r2, r0
 801224a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801224e:	03d8      	lsls	r0, r3, #15
 8012250:	d508      	bpl.n	8012264 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8012252:	4988      	ldr	r1, [pc, #544]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012254:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8012256:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801225a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 801225e:	4302      	orrs	r2, r0
 8012260:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012264:	0399      	lsls	r1, r3, #14
 8012266:	d508      	bpl.n	801227a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012268:	4982      	ldr	r1, [pc, #520]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801226a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801226c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8012270:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8012274:	4302      	orrs	r2, r0
 8012276:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801227a:	065a      	lsls	r2, r3, #25
 801227c:	d508      	bpl.n	8012290 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801227e:	497d      	ldr	r1, [pc, #500]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012280:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012282:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8012286:	f022 0203 	bic.w	r2, r2, #3
 801228a:	4302      	orrs	r2, r0
 801228c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012290:	061f      	lsls	r7, r3, #24
 8012292:	d508      	bpl.n	80122a6 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012294:	4977      	ldr	r1, [pc, #476]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012296:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8012298:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801229c:	f022 020c 	bic.w	r2, r2, #12
 80122a0:	4302      	orrs	r2, r0
 80122a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80122a6:	05d8      	lsls	r0, r3, #23
 80122a8:	d508      	bpl.n	80122bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80122aa:	4972      	ldr	r1, [pc, #456]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80122ac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80122ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80122b2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80122b6:	4302      	orrs	r2, r0
 80122b8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80122bc:	0599      	lsls	r1, r3, #22
 80122be:	d508      	bpl.n	80122d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80122c0:	496c      	ldr	r1, [pc, #432]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80122c2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80122c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80122c8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80122cc:	4302      	orrs	r2, r0
 80122ce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80122d2:	055a      	lsls	r2, r3, #21
 80122d4:	d508      	bpl.n	80122e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80122d6:	4967      	ldr	r1, [pc, #412]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80122d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80122da:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80122de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80122e2:	4302      	orrs	r2, r0
 80122e4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80122e8:	051f      	lsls	r7, r3, #20
 80122ea:	d508      	bpl.n	80122fe <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80122ec:	4961      	ldr	r1, [pc, #388]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80122ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80122f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80122f8:	4302      	orrs	r2, r0
 80122fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80122fe:	04d8      	lsls	r0, r3, #19
 8012300:	d508      	bpl.n	8012314 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8012302:	495c      	ldr	r1, [pc, #368]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012304:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8012306:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801230a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801230e:	4302      	orrs	r2, r0
 8012310:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8012314:	0499      	lsls	r1, r3, #18
 8012316:	d508      	bpl.n	801232a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8012318:	4956      	ldr	r1, [pc, #344]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801231a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 801231c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8012320:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012324:	4302      	orrs	r2, r0
 8012326:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801232a:	025a      	lsls	r2, r3, #9
 801232c:	d508      	bpl.n	8012340 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801232e:	4951      	ldr	r1, [pc, #324]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012330:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8012332:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8012336:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 801233a:	4302      	orrs	r2, r0
 801233c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8012340:	029f      	lsls	r7, r3, #10
 8012342:	d50c      	bpl.n	801235e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8012344:	494b      	ldr	r1, [pc, #300]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012346:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8012348:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 801234c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8012350:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8012354:	bf08      	it	eq
 8012356:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8012358:	4302      	orrs	r2, r0
 801235a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 801235e:	f013 0f08 	tst.w	r3, #8
 8012362:	bf18      	it	ne
 8012364:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012366:	0358      	lsls	r0, r3, #13
 8012368:	d508      	bpl.n	801237c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801236a:	4942      	ldr	r1, [pc, #264]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801236c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801236e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8012372:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8012376:	4302      	orrs	r2, r0
 8012378:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 801237c:	0219      	lsls	r1, r3, #8
 801237e:	d40b      	bmi.n	8012398 <HAL_RCCEx_PeriphCLKConfig+0x218>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8012380:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012384:	d016      	beq.n	80123b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8012386:	07f2      	lsls	r2, r6, #31
 8012388:	d414      	bmi.n	80123b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 801238a:	2d01      	cmp	r5, #1
 801238c:	f000 80d0 	beq.w	8012530 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8012390:	2000      	movs	r0, #0
}
 8012392:	b003      	add	sp, #12
 8012394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8012398:	4936      	ldr	r1, [pc, #216]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 801239a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801239e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80123a2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80123a6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80123aa:	ea42 0200 	orr.w	r2, r2, r0
 80123ae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80123b2:	d1e8      	bne.n	8012386 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_PLLI2S_DISABLE();
 80123b4:	4b2f      	ldr	r3, [pc, #188]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80123b6:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80123b8:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 80123ba:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80123be:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80123c0:	f7fc fe96 	bl	800f0f0 <HAL_GetTick>
 80123c4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80123c6:	e004      	b.n	80123d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80123c8:	f7fc fe92 	bl	800f0f0 <HAL_GetTick>
 80123cc:	1bc0      	subs	r0, r0, r7
 80123ce:	2864      	cmp	r0, #100	; 0x64
 80123d0:	d85d      	bhi.n	801248e <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80123d2:	6833      	ldr	r3, [r6, #0]
 80123d4:	011b      	lsls	r3, r3, #4
 80123d6:	d4f7      	bmi.n	80123c8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80123d8:	6823      	ldr	r3, [r4, #0]
 80123da:	07df      	lsls	r7, r3, #31
 80123dc:	d512      	bpl.n	8012404 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80123de:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80123e0:	b982      	cbnz	r2, 8012404 <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80123e2:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80123e6:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80123ea:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80123ee:	6860      	ldr	r0, [r4, #4]
 80123f0:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 80123f4:	68a1      	ldr	r1, [r4, #8]
 80123f6:	433a      	orrs	r2, r7
 80123f8:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80123fc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8012400:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8012404:	031e      	lsls	r6, r3, #12
 8012406:	f100 8111 	bmi.w	801262c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 801240a:	02d8      	lsls	r0, r3, #11
 801240c:	d504      	bpl.n	8012418 <HAL_RCCEx_PeriphCLKConfig+0x298>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801240e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012410:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8012414:	f000 810f 	beq.w	8012636 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012418:	01d9      	lsls	r1, r3, #7
 801241a:	d511      	bpl.n	8012440 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801241c:	4e15      	ldr	r6, [pc, #84]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 801241e:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8012420:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8012424:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8012428:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 801242c:	6921      	ldr	r1, [r4, #16]
 801242e:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8012432:	433a      	orrs	r2, r7
 8012434:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8012438:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801243c:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8012440:	019a      	lsls	r2, r3, #6
 8012442:	d50d      	bpl.n	8012460 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8012444:	6923      	ldr	r3, [r4, #16]
 8012446:	6862      	ldr	r2, [r4, #4]
 8012448:	041b      	lsls	r3, r3, #16
 801244a:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 801244e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8012452:	4a08      	ldr	r2, [pc, #32]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012454:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8012458:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 801245c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8012460:	4b04      	ldr	r3, [pc, #16]	; (8012474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012462:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8012464:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8012466:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801246a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 801246c:	f7fc fe40 	bl	800f0f0 <HAL_GetTick>
 8012470:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8012472:	e006      	b.n	8012482 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8012474:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8012478:	f7fc fe3a 	bl	800f0f0 <HAL_GetTick>
 801247c:	1bc0      	subs	r0, r0, r7
 801247e:	2864      	cmp	r0, #100	; 0x64
 8012480:	d805      	bhi.n	801248e <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8012482:	6833      	ldr	r3, [r6, #0]
 8012484:	011b      	lsls	r3, r3, #4
 8012486:	d5f7      	bpl.n	8012478 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if(pllsaiused == 1)
 8012488:	2d01      	cmp	r5, #1
 801248a:	d181      	bne.n	8012390 <HAL_RCCEx_PeriphCLKConfig+0x210>
 801248c:	e050      	b.n	8012530 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        return HAL_TIMEOUT;
 801248e:	2003      	movs	r0, #3
}
 8012490:	b003      	add	sp, #12
 8012492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8012496:	4a87      	ldr	r2, [pc, #540]	; (80126b4 <HAL_RCCEx_PeriphCLKConfig+0x534>)
    PWR->CR1 |= PWR_CR1_DBP;
 8012498:	4b87      	ldr	r3, [pc, #540]	; (80126b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
    __HAL_RCC_PWR_CLK_ENABLE();
 801249a:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801249c:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 801249e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80124a2:	6411      	str	r1, [r2, #64]	; 0x40
 80124a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80124a6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80124aa:	9201      	str	r2, [sp, #4]
 80124ac:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80124ae:	681a      	ldr	r2, [r3, #0]
 80124b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80124b4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80124b6:	f7fc fe1b 	bl	800f0f0 <HAL_GetTick>
 80124ba:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80124bc:	e005      	b.n	80124ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80124be:	f7fc fe17 	bl	800f0f0 <HAL_GetTick>
 80124c2:	eba0 0008 	sub.w	r0, r0, r8
 80124c6:	2864      	cmp	r0, #100	; 0x64
 80124c8:	d8e1      	bhi.n	801248e <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	05db      	lsls	r3, r3, #23
 80124ce:	d5f6      	bpl.n	80124be <HAL_RCCEx_PeriphCLKConfig+0x33e>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80124d0:	4a78      	ldr	r2, [pc, #480]	; (80126b4 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80124d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80124d4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80124d6:	f403 7040 	and.w	r0, r3, #768	; 0x300
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80124da:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 80124de:	d011      	beq.n	8012504 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80124e0:	4281      	cmp	r1, r0
 80124e2:	d00f      	beq.n	8012504 <HAL_RCCEx_PeriphCLKConfig+0x384>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80124e4:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80124e6:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80124e8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80124ec:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 80124f0:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80124f2:	6f17      	ldr	r7, [r2, #112]	; 0x70
 80124f4:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 80124f8:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80124fa:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80124fc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80124fe:	07cf      	lsls	r7, r1, #31
 8012500:	f100 80c3 	bmi.w	801268a <HAL_RCCEx_PeriphCLKConfig+0x50a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012504:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8012508:	f000 80b1 	beq.w	801266e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 801250c:	4969      	ldr	r1, [pc, #420]	; (80126b4 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 801250e:	688a      	ldr	r2, [r1, #8]
 8012510:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8012514:	608a      	str	r2, [r1, #8]
 8012516:	4a67      	ldr	r2, [pc, #412]	; (80126b4 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8012518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801251c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 801251e:	430b      	orrs	r3, r1
 8012520:	6713      	str	r3, [r2, #112]	; 0x70
 8012522:	6823      	ldr	r3, [r4, #0]
 8012524:	e66e      	b.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0x84>
      plli2sused = 1;
 8012526:	2601      	movs	r6, #1
 8012528:	e665      	b.n	80121f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
  uint32_t pllsaiused = 0;
 801252a:	2500      	movs	r5, #0
      plli2sused = 1;
 801252c:	2601      	movs	r6, #1
 801252e:	e64f      	b.n	80121d0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    __HAL_RCC_PLLSAI_DISABLE();
 8012530:	4b60      	ldr	r3, [pc, #384]	; (80126b4 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8012532:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8012534:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8012536:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801253a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 801253c:	f7fc fdd8 	bl	800f0f0 <HAL_GetTick>
 8012540:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8012542:	e004      	b.n	801254e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8012544:	f7fc fdd4 	bl	800f0f0 <HAL_GetTick>
 8012548:	1b80      	subs	r0, r0, r6
 801254a:	2864      	cmp	r0, #100	; 0x64
 801254c:	d89f      	bhi.n	801248e <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801254e:	682b      	ldr	r3, [r5, #0]
 8012550:	009f      	lsls	r7, r3, #2
 8012552:	d4f7      	bmi.n	8012544 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8012554:	6823      	ldr	r3, [r4, #0]
 8012556:	031d      	lsls	r5, r3, #12
 8012558:	f100 8092 	bmi.w	8012680 <HAL_RCCEx_PeriphCLKConfig+0x500>
 801255c:	02d8      	lsls	r0, r3, #11
 801255e:	d51d      	bpl.n	801259c <HAL_RCCEx_PeriphCLKConfig+0x41c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8012560:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012562:	b9da      	cbnz	r2, 801259c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8012564:	4953      	ldr	r1, [pc, #332]	; (80126b4 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8012566:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8012568:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801256c:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8012570:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8012574:	69a0      	ldr	r0, [r4, #24]
 8012576:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 801257a:	4332      	orrs	r2, r6
 801257c:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8012580:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8012584:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8012588:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 801258c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801258e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8012592:	3801      	subs	r0, #1
 8012594:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8012598:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 801259c:	0299      	lsls	r1, r3, #10
 801259e:	d515      	bpl.n	80125cc <HAL_RCCEx_PeriphCLKConfig+0x44c>
 80125a0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80125a2:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80125a6:	d111      	bne.n	80125cc <HAL_RCCEx_PeriphCLKConfig+0x44c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80125a8:	4942      	ldr	r1, [pc, #264]	; (80126b4 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80125aa:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80125ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80125b0:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80125b4:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80125b8:	6a20      	ldr	r0, [r4, #32]
 80125ba:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 80125be:	4332      	orrs	r2, r6
 80125c0:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80125c4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80125c8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80125cc:	071a      	lsls	r2, r3, #28
 80125ce:	d519      	bpl.n	8012604 <HAL_RCCEx_PeriphCLKConfig+0x484>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80125d0:	4a38      	ldr	r2, [pc, #224]	; (80126b4 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80125d2:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80125d4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80125d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80125dc:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80125e0:	69e0      	ldr	r0, [r4, #28]
 80125e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80125e6:	430b      	orrs	r3, r1
 80125e8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80125ec:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80125f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80125f4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80125f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80125fa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80125fe:	430b      	orrs	r3, r1
 8012600:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8012604:	4b2b      	ldr	r3, [pc, #172]	; (80126b4 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8012606:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8012608:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 801260a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801260e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8012610:	f7fc fd6e 	bl	800f0f0 <HAL_GetTick>
 8012614:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8012616:	e005      	b.n	8012624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8012618:	f7fc fd6a 	bl	800f0f0 <HAL_GetTick>
 801261c:	1b40      	subs	r0, r0, r5
 801261e:	2864      	cmp	r0, #100	; 0x64
 8012620:	f63f af35 	bhi.w	801248e <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8012624:	6823      	ldr	r3, [r4, #0]
 8012626:	009b      	lsls	r3, r3, #2
 8012628:	d5f6      	bpl.n	8012618 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801262a:	e6b1      	b.n	8012390 <HAL_RCCEx_PeriphCLKConfig+0x210>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801262c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801262e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8012632:	f47f aeea 	bne.w	801240a <HAL_RCCEx_PeriphCLKConfig+0x28a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8012636:	4e1f      	ldr	r6, [pc, #124]	; (80126b4 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8012638:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801263a:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801263e:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8012642:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8012646:	68e1      	ldr	r1, [r4, #12]
 8012648:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 801264c:	433a      	orrs	r2, r7
 801264e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8012652:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8012656:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801265a:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 801265e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8012660:	f021 011f 	bic.w	r1, r1, #31
 8012664:	3a01      	subs	r2, #1
 8012666:	430a      	orrs	r2, r1
 8012668:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 801266c:	e6d4      	b.n	8012418 <HAL_RCCEx_PeriphCLKConfig+0x298>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801266e:	4811      	ldr	r0, [pc, #68]	; (80126b4 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8012670:	4912      	ldr	r1, [pc, #72]	; (80126bc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8012672:	6882      	ldr	r2, [r0, #8]
 8012674:	4019      	ands	r1, r3
 8012676:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 801267a:	430a      	orrs	r2, r1
 801267c:	6082      	str	r2, [r0, #8]
 801267e:	e74a      	b.n	8012516 <HAL_RCCEx_PeriphCLKConfig+0x396>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8012680:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012682:	2a00      	cmp	r2, #0
 8012684:	f43f af6e 	beq.w	8012564 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8012688:	e768      	b.n	801255c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801268a:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801268c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8012690:	f7fc fd2e 	bl	800f0f0 <HAL_GetTick>
 8012694:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012696:	e006      	b.n	80126a6 <HAL_RCCEx_PeriphCLKConfig+0x526>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012698:	f7fc fd2a 	bl	800f0f0 <HAL_GetTick>
 801269c:	eba0 0009 	sub.w	r0, r0, r9
 80126a0:	4540      	cmp	r0, r8
 80126a2:	f63f aef4 	bhi.w	801248e <HAL_RCCEx_PeriphCLKConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80126a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80126a8:	0798      	lsls	r0, r3, #30
 80126aa:	d5f5      	bpl.n	8012698 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80126ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80126ae:	f403 7040 	and.w	r0, r3, #768	; 0x300
 80126b2:	e727      	b.n	8012504 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80126b4:	40023800 	.word	0x40023800
 80126b8:	40007000 	.word	0x40007000
 80126bc:	0ffffcff 	.word	0x0ffffcff

080126c0 <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80126c0:	4b53      	ldr	r3, [pc, #332]	; (8012810 <HAL_RCCEx_GetPeriphCLKConfig+0x150>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 80126c2:	4a54      	ldr	r2, [pc, #336]	; (8012814 <HAL_RCCEx_GetPeriphCLKConfig+0x154>)
 80126c4:	6002      	str	r2, [r0, #0]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80126c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80126ca:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80126ce:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80126d0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80126d4:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80126d8:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80126da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80126de:	f3c2 6203 	ubfx	r2, r2, #24, #4
 80126e2:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80126e4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80126e8:	f3c2 7202 	ubfx	r2, r2, #28, #3
 80126ec:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 80126ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80126f2:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80126f6:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80126f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80126fc:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8012700:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8012702:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8012706:	f3c2 6203 	ubfx	r2, r2, #24, #4
 801270a:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801270c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8012710:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8012714:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8012716:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 801271a:	f002 021f 	and.w	r2, r2, #31
 801271e:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8012720:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8012724:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8012728:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 801272a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 801272e:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8012732:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8012734:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8012738:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 801273c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 801273e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8012742:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8012746:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8012748:	689a      	ldr	r2, [r3, #8]
 801274a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 801274e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8012750:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8012754:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8012758:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 801275a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801275e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8012762:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8012764:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8012768:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 801276c:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 801276e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8012772:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8012776:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8012778:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801277c:	f002 0203 	and.w	r2, r2, #3
 8012780:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8012782:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8012786:	f002 020c 	and.w	r2, r2, #12
 801278a:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 801278c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8012790:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8012794:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8012796:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801279a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 801279e:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80127a0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80127a4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80127a8:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80127aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80127ae:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80127b2:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80127b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80127b8:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80127bc:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80127be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80127c2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80127c6:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80127c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80127cc:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 80127d0:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80127d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80127d6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80127da:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80127dc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80127e0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80127e4:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80127e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80127ea:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80127ee:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80127f2:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80127f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80127f6:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80127fa:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80127fe:	430a      	orrs	r2, r1
 8012800:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8012802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8012806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801280a:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
 801280c:	4770      	bx	lr
 801280e:	bf00      	nop
 8012810:	40023800 	.word	0x40023800
 8012814:	00fffff1 	.word	0x00fffff1

08012818 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8012818:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 801281c:	d010      	beq.n	8012840 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 801281e:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8012822:	d10b      	bne.n	801283c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
  {
    saiclocksource = RCC->DCKCFGR1;
 8012824:	4a2e      	ldr	r2, [pc, #184]	; (80128e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8012826:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 801282a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 801282e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012832:	d033      	beq.n	801289c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 8012834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012838:	d00d      	beq.n	8012856 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 801283a:	b173      	cbz	r3, 801285a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    default :
      {
        break;
      }
    }
  }
 801283c:	2000      	movs	r0, #0
 801283e:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 8012840:	4a27      	ldr	r2, [pc, #156]	; (80128e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8012842:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8012846:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    switch (saiclocksource)
 801284a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801284e:	d025      	beq.n	801289c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 8012850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012854:	d1f1      	bne.n	801283a <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        frequency = EXTERNAL_CLOCK_VALUE;
 8012856:	4823      	ldr	r0, [pc, #140]	; (80128e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)

  return frequency;
}
 8012858:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 801285a:	6853      	ldr	r3, [r2, #4]
 801285c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012860:	6853      	ldr	r3, [r2, #4]
 8012862:	bf08      	it	eq
 8012864:	4820      	ldreq	r0, [pc, #128]	; (80128e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8012866:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801286a:	bf18      	it	ne
 801286c:	481f      	ldrne	r0, [pc, #124]	; (80128ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 801286e:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8012872:	4b1b      	ldr	r3, [pc, #108]	; (80128e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8012874:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8012878:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 801287c:	f3c2 6203 	ubfx	r2, r2, #24, #4
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8012880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8012884:	f3c1 1188 	ubfx	r1, r1, #6, #9
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8012888:	f3c3 2304 	ubfx	r3, r3, #8, #5
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 801288c:	fb00 f001 	mul.w	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8012890:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8012892:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
 8012896:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 801289a:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 801289c:	6853      	ldr	r3, [r2, #4]
 801289e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80128a2:	6853      	ldr	r3, [r2, #4]
 80128a4:	bf08      	it	eq
 80128a6:	4810      	ldreq	r0, [pc, #64]	; (80128e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80128a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80128ac:	bf18      	it	ne
 80128ae:	480f      	ldrne	r0, [pc, #60]	; (80128ec <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 80128b0:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80128b4:	4b0a      	ldr	r3, [pc, #40]	; (80128e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 80128b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80128ba:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80128be:	f3c2 6203 	ubfx	r2, r2, #24, #4
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80128c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80128c6:	f3c1 1188 	ubfx	r1, r1, #6, #9
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80128ca:	f003 031f 	and.w	r3, r3, #31
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80128ce:	fb00 f001 	mul.w	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80128d2:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80128d4:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
 80128d8:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop
 80128e0:	40023800 	.word	0x40023800
 80128e4:	00bb8000 	.word	0x00bb8000
 80128e8:	00f42400 	.word	0x00f42400
 80128ec:	017d7840 	.word	0x017d7840

080128f0 <HAL_RTC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80128f0:	2800      	cmp	r0, #0
 80128f2:	d052      	beq.n	801299a <HAL_RTC_Init+0xaa>
{
 80128f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80128f6:	7f43      	ldrb	r3, [r0, #29]
 80128f8:	4604      	mov	r4, r0
 80128fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d040      	beq.n	8012984 <HAL_RTC_Init+0x94>

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012902:	6823      	ldr	r3, [r4, #0]
 8012904:	21ca      	movs	r1, #202	; 0xca
 8012906:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012908:	2002      	movs	r0, #2
 801290a:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801290c:	6259      	str	r1, [r3, #36]	; 0x24
 801290e:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012910:	68da      	ldr	r2, [r3, #12]
 8012912:	0651      	lsls	r1, r2, #25
 8012914:	d524      	bpl.n	8012960 <HAL_RTC_Init+0x70>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012916:	6898      	ldr	r0, [r3, #8]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012918:	25ff      	movs	r5, #255	; 0xff
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801291a:	4921      	ldr	r1, [pc, #132]	; (80129a0 <HAL_RTC_Init+0xb0>)
    hrtc->State = HAL_RTC_STATE_READY;
 801291c:	2601      	movs	r6, #1
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801291e:	6862      	ldr	r2, [r4, #4]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012920:	4001      	ands	r1, r0
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012922:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012924:	68a7      	ldr	r7, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012926:	4302      	orrs	r2, r0
 8012928:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801292a:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801292c:	4302      	orrs	r2, r0
 801292e:	6898      	ldr	r0, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8012930:	68e1      	ldr	r1, [r4, #12]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012932:	4302      	orrs	r2, r0
    return HAL_OK;
 8012934:	2000      	movs	r0, #0
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012936:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8012938:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 801293a:	6919      	ldr	r1, [r3, #16]
 801293c:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8012940:	69a7      	ldr	r7, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012942:	6119      	str	r1, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8012944:	68d9      	ldr	r1, [r3, #12]
 8012946:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801294a:	60d9      	str	r1, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 801294c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801294e:	f021 0108 	bic.w	r1, r1, #8
 8012952:	64d9      	str	r1, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8012954:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012956:	433a      	orrs	r2, r7
 8012958:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801295a:	625d      	str	r5, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 801295c:	7766      	strb	r6, [r4, #29]
}
 801295e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012964:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8012966:	f7fc fbc3 	bl	800f0f0 <HAL_GetTick>
 801296a:	4605      	mov	r5, r0
 801296c:	e005      	b.n	801297a <HAL_RTC_Init+0x8a>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 801296e:	f7fc fbbf 	bl	800f0f0 <HAL_GetTick>
 8012972:	1b40      	subs	r0, r0, r5
 8012974:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8012978:	d808      	bhi.n	801298c <HAL_RTC_Init+0x9c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801297a:	6823      	ldr	r3, [r4, #0]
 801297c:	68da      	ldr	r2, [r3, #12]
 801297e:	0652      	lsls	r2, r2, #25
 8012980:	d5f5      	bpl.n	801296e <HAL_RTC_Init+0x7e>
 8012982:	e7c8      	b.n	8012916 <HAL_RTC_Init+0x26>
    hrtc->Lock = HAL_UNLOCKED;
 8012984:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8012986:	f7f8 fbe1 	bl	800b14c <HAL_RTC_MspInit>
 801298a:	e7ba      	b.n	8012902 <HAL_RTC_Init+0x12>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801298c:	6822      	ldr	r2, [r4, #0]
 801298e:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012990:	2304      	movs	r3, #4
    return HAL_ERROR;
 8012992:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012994:	6251      	str	r1, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012996:	7763      	strb	r3, [r4, #29]
}
 8012998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     return HAL_ERROR;
 801299a:	2001      	movs	r0, #1
}
 801299c:	4770      	bx	lr
 801299e:	bf00      	nop
 80129a0:	ff8fffbf 	.word	0xff8fffbf

080129a4 <HAL_RTC_SetTime>:
{
 80129a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 80129a8:	7f03      	ldrb	r3, [r0, #28]
 80129aa:	2b01      	cmp	r3, #1
 80129ac:	f000 808c 	beq.w	8012ac8 <HAL_RTC_SetTime+0x124>
 80129b0:	460d      	mov	r5, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80129b2:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 80129b4:	2101      	movs	r1, #1
 80129b6:	6806      	ldr	r6, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80129b8:	7743      	strb	r3, [r0, #29]
 80129ba:	4604      	mov	r4, r0
  __HAL_LOCK(hrtc);
 80129bc:	7701      	strb	r1, [r0, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80129be:	68b7      	ldr	r7, [r6, #8]
  if(Format == RTC_FORMAT_BIN)
 80129c0:	2a00      	cmp	r2, #0
 80129c2:	d030      	beq.n	8012a26 <HAL_RTC_SetTime+0x82>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80129c4:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 80129c8:	d07a      	beq.n	8012ac0 <HAL_RTC_SetTime+0x11c>
 80129ca:	7b2f      	ldrb	r7, [r5, #12]
 80129cc:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80129ce:	7868      	ldrb	r0, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80129d0:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80129d2:	0200      	lsls	r0, r0, #8
              ((uint32_t)sTime->Seconds) | \
 80129d4:	78ab      	ldrb	r3, [r5, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80129d6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80129da:	4318      	orrs	r0, r3
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80129dc:	4307      	orrs	r7, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80129de:	22ca      	movs	r2, #202	; 0xca
 80129e0:	2353      	movs	r3, #83	; 0x53
 80129e2:	6272      	str	r2, [r6, #36]	; 0x24
 80129e4:	6273      	str	r3, [r6, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80129e6:	68f3      	ldr	r3, [r6, #12]
 80129e8:	065a      	lsls	r2, r3, #25
 80129ea:	d54d      	bpl.n	8012a88 <HAL_RTC_SetTime+0xe4>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80129ec:	4a46      	ldr	r2, [pc, #280]	; (8012b08 <HAL_RTC_SetTime+0x164>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80129ee:	692b      	ldr	r3, [r5, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80129f0:	403a      	ands	r2, r7
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80129f2:	6969      	ldr	r1, [r5, #20]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80129f4:	6032      	str	r2, [r6, #0]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80129f6:	430b      	orrs	r3, r1
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80129f8:	68b2      	ldr	r2, [r6, #8]
 80129fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80129fe:	60b2      	str	r2, [r6, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012a00:	68b2      	ldr	r2, [r6, #8]
 8012a02:	4313      	orrs	r3, r2
 8012a04:	60b3      	str	r3, [r6, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8012a06:	68f3      	ldr	r3, [r6, #12]
 8012a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012a0c:	60f3      	str	r3, [r6, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012a0e:	68b3      	ldr	r3, [r6, #8]
 8012a10:	069b      	lsls	r3, r3, #26
 8012a12:	d55c      	bpl.n	8012ace <HAL_RTC_SetTime+0x12a>
   __HAL_UNLOCK(hrtc);
 8012a14:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012a16:	21ff      	movs	r1, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 8012a18:	2201      	movs	r2, #1
   return HAL_OK;
 8012a1a:	4618      	mov	r0, r3
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012a1c:	6271      	str	r1, [r6, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8012a1e:	7762      	strb	r2, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8012a20:	7723      	strb	r3, [r4, #28]
}
 8012a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012a26:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8012a2a:	d04b      	beq.n	8012ac4 <HAL_RTC_SetTime+0x120>
 8012a2c:	7b2f      	ldrb	r7, [r5, #12]
 8012a2e:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012a30:	782b      	ldrb	r3, [r5, #0]
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8012a32:	2100      	movs	r1, #0

  while(Value >= 10)
 8012a34:	2b09      	cmp	r3, #9
 8012a36:	d906      	bls.n	8012a46 <HAL_RTC_SetTime+0xa2>
  {
    bcdhigh++;
    Value -= 10;
 8012a38:	3b0a      	subs	r3, #10
    bcdhigh++;
 8012a3a:	3101      	adds	r1, #1
    Value -= 10;
 8012a3c:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8012a3e:	2b09      	cmp	r3, #9
 8012a40:	d8fa      	bhi.n	8012a38 <HAL_RTC_SetTime+0x94>
 8012a42:	0109      	lsls	r1, r1, #4
 8012a44:	b2c9      	uxtb	r1, r1
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012a46:	4319      	orrs	r1, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012a48:	786b      	ldrb	r3, [r5, #1]
  uint32_t bcdhigh = 0;
 8012a4a:	2000      	movs	r0, #0
  while(Value >= 10)
 8012a4c:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012a4e:	ea4f 4101 	mov.w	r1, r1, lsl #16
  while(Value >= 10)
 8012a52:	d906      	bls.n	8012a62 <HAL_RTC_SetTime+0xbe>
    Value -= 10;
 8012a54:	3b0a      	subs	r3, #10
    bcdhigh++;
 8012a56:	3001      	adds	r0, #1
    Value -= 10;
 8012a58:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8012a5a:	2b09      	cmp	r3, #9
 8012a5c:	d8fa      	bhi.n	8012a54 <HAL_RTC_SetTime+0xb0>
 8012a5e:	0100      	lsls	r0, r0, #4
 8012a60:	b2c0      	uxtb	r0, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012a62:	4303      	orrs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012a64:	78a8      	ldrb	r0, [r5, #2]
  while(Value >= 10)
 8012a66:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012a68:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10)
 8012a6c:	d949      	bls.n	8012b02 <HAL_RTC_SetTime+0x15e>
    Value -= 10;
 8012a6e:	380a      	subs	r0, #10
    bcdhigh++;
 8012a70:	3201      	adds	r2, #1
    Value -= 10;
 8012a72:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012a74:	2809      	cmp	r0, #9
 8012a76:	d8fa      	bhi.n	8012a6e <HAL_RTC_SetTime+0xca>
 8012a78:	0112      	lsls	r2, r2, #4
 8012a7a:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012a7c:	430f      	orrs	r7, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012a7e:	4310      	orrs	r0, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012a80:	433b      	orrs	r3, r7
 8012a82:	ea43 0700 	orr.w	r7, r3, r0
 8012a86:	e7aa      	b.n	80129de <HAL_RTC_SetTime+0x3a>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a8c:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8012a8e:	f7fc fb2f 	bl	800f0f0 <HAL_GetTick>
 8012a92:	4681      	mov	r9, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012a94:	6826      	ldr	r6, [r4, #0]
 8012a96:	68f3      	ldr	r3, [r6, #12]
 8012a98:	f013 0840 	ands.w	r8, r3, #64	; 0x40
 8012a9c:	d1a6      	bne.n	80129ec <HAL_RTC_SetTime+0x48>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8012a9e:	f7fc fb27 	bl	800f0f0 <HAL_GetTick>
 8012aa2:	eba0 0009 	sub.w	r0, r0, r9
 8012aa6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8012aaa:	d9f3      	bls.n	8012a94 <HAL_RTC_SetTime+0xf0>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012aac:	6822      	ldr	r2, [r4, #0]
 8012aae:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012ab0:	2304      	movs	r3, #4
    return HAL_ERROR;
 8012ab2:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012ab4:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 8012ab6:	f884 801c 	strb.w	r8, [r4, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012aba:	7763      	strb	r3, [r4, #29]
}
 8012abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      sTime->TimeFormat = 0x00;
 8012ac0:	732f      	strb	r7, [r5, #12]
 8012ac2:	e784      	b.n	80129ce <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 8012ac4:	732f      	strb	r7, [r5, #12]
 8012ac6:	e7b3      	b.n	8012a30 <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 8012ac8:	2002      	movs	r0, #2
}
 8012aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8012ace:	68f3      	ldr	r3, [r6, #12]
 8012ad0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012ad4:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8012ad6:	f7fc fb0b 	bl	800f0f0 <HAL_GetTick>
 8012ada:	4607      	mov	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012adc:	6826      	ldr	r6, [r4, #0]
 8012ade:	68f5      	ldr	r5, [r6, #12]
 8012ae0:	f015 0520 	ands.w	r5, r5, #32
 8012ae4:	d196      	bne.n	8012a14 <HAL_RTC_SetTime+0x70>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8012ae6:	f7fc fb03 	bl	800f0f0 <HAL_GetTick>
 8012aea:	1bc0      	subs	r0, r0, r7
 8012aec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8012af0:	d9f4      	bls.n	8012adc <HAL_RTC_SetTime+0x138>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012af2:	6822      	ldr	r2, [r4, #0]
 8012af4:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012af6:	2304      	movs	r3, #4
        return HAL_ERROR;
 8012af8:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012afa:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8012afc:	7725      	strb	r5, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012afe:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8012b00:	e78f      	b.n	8012a22 <HAL_RTC_SetTime+0x7e>
  while(Value >= 10)
 8012b02:	2200      	movs	r2, #0
 8012b04:	e7ba      	b.n	8012a7c <HAL_RTC_SetTime+0xd8>
 8012b06:	bf00      	nop
 8012b08:	007f7f7f 	.word	0x007f7f7f

08012b0c <HAL_RTC_SetDate>:
{
 8012b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8012b0e:	7f03      	ldrb	r3, [r0, #28]
 8012b10:	2b01      	cmp	r3, #1
 8012b12:	d074      	beq.n	8012bfe <HAL_RTC_SetDate+0xf2>
 8012b14:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012b16:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 8012b18:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012b1a:	776b      	strb	r3, [r5, #29]
 __HAL_LOCK(hrtc);
 8012b1c:	7728      	strb	r0, [r5, #28]
 8012b1e:	780e      	ldrb	r6, [r1, #0]
 8012b20:	78cb      	ldrb	r3, [r1, #3]
 8012b22:	0376      	lsls	r6, r6, #13
 8012b24:	7848      	ldrb	r0, [r1, #1]
 8012b26:	788c      	ldrb	r4, [r1, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8012b28:	bb8a      	cbnz	r2, 8012b8e <HAL_RTC_SetDate+0x82>
 8012b2a:	06c7      	lsls	r7, r0, #27
 8012b2c:	d504      	bpl.n	8012b38 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8012b2e:	f020 0010 	bic.w	r0, r0, #16
 8012b32:	300a      	adds	r0, #10
 8012b34:	b2c0      	uxtb	r0, r0
 8012b36:	7048      	strb	r0, [r1, #1]
  while(Value >= 10)
 8012b38:	2b09      	cmp	r3, #9
  uint32_t bcdhigh = 0;
 8012b3a:	f04f 0100 	mov.w	r1, #0
  while(Value >= 10)
 8012b3e:	d906      	bls.n	8012b4e <HAL_RTC_SetDate+0x42>
    Value -= 10;
 8012b40:	3b0a      	subs	r3, #10
    bcdhigh++;
 8012b42:	3101      	adds	r1, #1
    Value -= 10;
 8012b44:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8012b46:	2b09      	cmp	r3, #9
 8012b48:	d8fa      	bhi.n	8012b40 <HAL_RTC_SetDate+0x34>
 8012b4a:	0109      	lsls	r1, r1, #4
 8012b4c:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012b4e:	430b      	orrs	r3, r1
  while(Value >= 10)
 8012b50:	2809      	cmp	r0, #9
  uint32_t bcdhigh = 0;
 8012b52:	f04f 0100 	mov.w	r1, #0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012b56:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while(Value >= 10)
 8012b5a:	d906      	bls.n	8012b6a <HAL_RTC_SetDate+0x5e>
    Value -= 10;
 8012b5c:	380a      	subs	r0, #10
    bcdhigh++;
 8012b5e:	3101      	adds	r1, #1
    Value -= 10;
 8012b60:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012b62:	2809      	cmp	r0, #9
 8012b64:	d8fa      	bhi.n	8012b5c <HAL_RTC_SetDate+0x50>
 8012b66:	0109      	lsls	r1, r1, #4
 8012b68:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012b6a:	4308      	orrs	r0, r1
  while(Value >= 10)
 8012b6c:	2c09      	cmp	r4, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012b6e:	ea4f 2100 	mov.w	r1, r0, lsl #8
  while(Value >= 10)
 8012b72:	d960      	bls.n	8012c36 <HAL_RTC_SetDate+0x12a>
    Value -= 10;
 8012b74:	3c0a      	subs	r4, #10
    bcdhigh++;
 8012b76:	3201      	adds	r2, #1
    Value -= 10;
 8012b78:	b2e4      	uxtb	r4, r4
  while(Value >= 10)
 8012b7a:	2c09      	cmp	r4, #9
 8012b7c:	d8fa      	bhi.n	8012b74 <HAL_RTC_SetDate+0x68>
 8012b7e:	0112      	lsls	r2, r2, #4
 8012b80:	b2d0      	uxtb	r0, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012b82:	431e      	orrs	r6, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8012b84:	4304      	orrs	r4, r0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012b86:	ea46 0001 	orr.w	r0, r6, r1
 8012b8a:	4304      	orrs	r4, r0
 8012b8c:	e004      	b.n	8012b98 <HAL_RTC_SetDate+0x8c>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012b8e:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8012b92:	431c      	orrs	r4, r3
 8012b94:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012b98:	682b      	ldr	r3, [r5, #0]
 8012b9a:	21ca      	movs	r1, #202	; 0xca
 8012b9c:	2253      	movs	r2, #83	; 0x53
 8012b9e:	6259      	str	r1, [r3, #36]	; 0x24
 8012ba0:	625a      	str	r2, [r3, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012ba2:	68da      	ldr	r2, [r3, #12]
 8012ba4:	0651      	lsls	r1, r2, #25
 8012ba6:	d511      	bpl.n	8012bcc <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012ba8:	4a24      	ldr	r2, [pc, #144]	; (8012c3c <HAL_RTC_SetDate+0x130>)
 8012baa:	4022      	ands	r2, r4
 8012bac:	605a      	str	r2, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8012bae:	68da      	ldr	r2, [r3, #12]
 8012bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012bb4:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012bb6:	689a      	ldr	r2, [r3, #8]
 8012bb8:	0692      	lsls	r2, r2, #26
 8012bba:	d522      	bpl.n	8012c02 <HAL_RTC_SetDate+0xf6>
    __HAL_UNLOCK(hrtc);
 8012bbc:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012bbe:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 8012bc0:	2101      	movs	r1, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012bc2:	6258      	str	r0, [r3, #36]	; 0x24
    return HAL_OK;
 8012bc4:	4610      	mov	r0, r2
    hrtc->State = HAL_RTC_STATE_READY ;
 8012bc6:	7769      	strb	r1, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8012bc8:	772a      	strb	r2, [r5, #28]
}
 8012bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012bd0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8012bd2:	f7fc fa8d 	bl	800f0f0 <HAL_GetTick>
 8012bd6:	4606      	mov	r6, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012bd8:	682b      	ldr	r3, [r5, #0]
 8012bda:	68df      	ldr	r7, [r3, #12]
 8012bdc:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8012be0:	d1e2      	bne.n	8012ba8 <HAL_RTC_SetDate+0x9c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8012be2:	f7fc fa85 	bl	800f0f0 <HAL_GetTick>
 8012be6:	1b80      	subs	r0, r0, r6
 8012be8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8012bec:	d9f4      	bls.n	8012bd8 <HAL_RTC_SetDate+0xcc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012bee:	682a      	ldr	r2, [r5, #0]
 8012bf0:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012bf2:	2304      	movs	r3, #4
    return HAL_ERROR;
 8012bf4:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012bf6:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 8012bf8:	772f      	strb	r7, [r5, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012bfa:	776b      	strb	r3, [r5, #29]
}
 8012bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 __HAL_LOCK(hrtc);
 8012bfe:	2002      	movs	r0, #2
}
 8012c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8012c02:	68da      	ldr	r2, [r3, #12]
 8012c04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8012c08:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8012c0a:	f7fc fa71 	bl	800f0f0 <HAL_GetTick>
 8012c0e:	4606      	mov	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012c10:	682b      	ldr	r3, [r5, #0]
 8012c12:	68dc      	ldr	r4, [r3, #12]
 8012c14:	f014 0420 	ands.w	r4, r4, #32
 8012c18:	d1d0      	bne.n	8012bbc <HAL_RTC_SetDate+0xb0>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8012c1a:	f7fc fa69 	bl	800f0f0 <HAL_GetTick>
 8012c1e:	1b80      	subs	r0, r0, r6
 8012c20:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8012c24:	d9f4      	bls.n	8012c10 <HAL_RTC_SetDate+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012c26:	682a      	ldr	r2, [r5, #0]
 8012c28:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012c2a:	2304      	movs	r3, #4
        return HAL_ERROR;
 8012c2c:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012c2e:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8012c30:	772c      	strb	r4, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012c32:	776b      	strb	r3, [r5, #29]
}
 8012c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(Value >= 10)
 8012c36:	2000      	movs	r0, #0
 8012c38:	e7a3      	b.n	8012b82 <HAL_RTC_SetDate+0x76>
 8012c3a:	bf00      	nop
 8012c3c:	00ffff3f 	.word	0x00ffff3f

08012c40 <HAL_RTC_SetAlarm>:
  __HAL_LOCK(hrtc);
 8012c40:	7f03      	ldrb	r3, [r0, #28]
 8012c42:	2b01      	cmp	r3, #1
 8012c44:	f000 80d7 	beq.w	8012df6 <HAL_RTC_SetAlarm+0x1b6>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012c48:	2302      	movs	r3, #2
{
 8012c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c4e:	4605      	mov	r5, r0
  __HAL_LOCK(hrtc);
 8012c50:	2001      	movs	r0, #1
 8012c52:	682f      	ldr	r7, [r5, #0]
 8012c54:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012c56:	776b      	strb	r3, [r5, #29]
  if(Format == RTC_FORMAT_BIN)
 8012c58:	2a00      	cmp	r2, #0
 8012c5a:	d04d      	beq.n	8012cf8 <HAL_RTC_SetAlarm+0xb8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012c5c:	68bc      	ldr	r4, [r7, #8]
 8012c5e:	f014 0e40 	ands.w	lr, r4, #64	; 0x40
 8012c62:	f000 80c2 	beq.w	8012dea <HAL_RTC_SetAlarm+0x1aa>
 8012c66:	7b0c      	ldrb	r4, [r1, #12]
 8012c68:	ea4f 4e04 	mov.w	lr, r4, lsl #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8012c6c:	6a0b      	ldr	r3, [r1, #32]
 8012c6e:	698c      	ldr	r4, [r1, #24]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8012c70:	788a      	ldrb	r2, [r1, #2]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8012c72:	431c      	orrs	r4, r3
 8012c74:	780b      	ldrb	r3, [r1, #0]
 8012c76:	4314      	orrs	r4, r2
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8012c78:	784a      	ldrb	r2, [r1, #1]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8012c7a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8012c7e:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8012c82:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8012c86:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 8012c8a:	ea44 040e 	orr.w	r4, r4, lr
  if(sAlarm->Alarm == RTC_ALARM_A)
 8012c8e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012c90:	20ca      	movs	r0, #202	; 0xca
 8012c92:	2253      	movs	r2, #83	; 0x53
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8012c94:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8012c98:	69ce      	ldr	r6, [r1, #28]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8012c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012c9e:	6278      	str	r0, [r7, #36]	; 0x24
 8012ca0:	627a      	str	r2, [r7, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8012ca2:	ea48 0806 	orr.w	r8, r8, r6
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8012ca6:	68bb      	ldr	r3, [r7, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8012ca8:	f000 8081 	beq.w	8012dae <HAL_RTC_SetAlarm+0x16e>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8012cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012cb0:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012cb8:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8012cba:	f7fc fa19 	bl	800f0f0 <HAL_GetTick>
 8012cbe:	4607      	mov	r7, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8012cc0:	e005      	b.n	8012cce <HAL_RTC_SetAlarm+0x8e>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8012cc2:	f7fc fa15 	bl	800f0f0 <HAL_GetTick>
 8012cc6:	1bc0      	subs	r0, r0, r7
 8012cc8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8012ccc:	d866      	bhi.n	8012d9c <HAL_RTC_SetAlarm+0x15c>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8012cce:	682a      	ldr	r2, [r5, #0]
 8012cd0:	68d6      	ldr	r6, [r2, #12]
 8012cd2:	f016 0602 	ands.w	r6, r6, #2
 8012cd6:	d0f4      	beq.n	8012cc2 <HAL_RTC_SetAlarm+0x82>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8012cd8:	6214      	str	r4, [r2, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8012cda:	f8c2 8048 	str.w	r8, [r2, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8012cde:	6893      	ldr	r3, [r2, #8]
 8012ce0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012ce4:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(hrtc);
 8012ce6:	2300      	movs	r3, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012ce8:	20ff      	movs	r0, #255	; 0xff
  hrtc->State = HAL_RTC_STATE_READY;
 8012cea:	2101      	movs	r1, #1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012cec:	6250      	str	r0, [r2, #36]	; 0x24
  return HAL_OK;
 8012cee:	4618      	mov	r0, r3
  hrtc->State = HAL_RTC_STATE_READY;
 8012cf0:	7769      	strb	r1, [r5, #29]
  __HAL_UNLOCK(hrtc);
 8012cf2:	772b      	strb	r3, [r5, #28]
}
 8012cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012cf8:	68be      	ldr	r6, [r7, #8]
 8012cfa:	f016 0c40 	ands.w	ip, r6, #64	; 0x40
 8012cfe:	d077      	beq.n	8012df0 <HAL_RTC_SetAlarm+0x1b0>
 8012d00:	f891 c00c 	ldrb.w	ip, [r1, #12]
 8012d04:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8012d08:	780b      	ldrb	r3, [r1, #0]
  uint32_t bcdhigh = 0;
 8012d0a:	2000      	movs	r0, #0
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8012d0c:	6a0e      	ldr	r6, [r1, #32]
  while(Value >= 10)
 8012d0e:	2b09      	cmp	r3, #9
 8012d10:	d906      	bls.n	8012d20 <HAL_RTC_SetAlarm+0xe0>
    Value -= 10;
 8012d12:	3b0a      	subs	r3, #10
    bcdhigh++;
 8012d14:	3001      	adds	r0, #1
    Value -= 10;
 8012d16:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8012d18:	2b09      	cmp	r3, #9
 8012d1a:	d8fa      	bhi.n	8012d12 <HAL_RTC_SetAlarm+0xd2>
 8012d1c:	0100      	lsls	r0, r0, #4
 8012d1e:	b2c0      	uxtb	r0, r0
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8012d20:	4318      	orrs	r0, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8012d22:	784b      	ldrb	r3, [r1, #1]
  uint32_t bcdhigh = 0;
 8012d24:	2400      	movs	r4, #0
  while(Value >= 10)
 8012d26:	2b09      	cmp	r3, #9
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8012d28:	ea4f 4000 	mov.w	r0, r0, lsl #16
  while(Value >= 10)
 8012d2c:	d906      	bls.n	8012d3c <HAL_RTC_SetAlarm+0xfc>
    Value -= 10;
 8012d2e:	3b0a      	subs	r3, #10
    bcdhigh++;
 8012d30:	3401      	adds	r4, #1
    Value -= 10;
 8012d32:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8012d34:	2b09      	cmp	r3, #9
 8012d36:	d8fa      	bhi.n	8012d2e <HAL_RTC_SetAlarm+0xee>
 8012d38:	0124      	lsls	r4, r4, #4
 8012d3a:	b2e4      	uxtb	r4, r4
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8012d3c:	4323      	orrs	r3, r4
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8012d3e:	788c      	ldrb	r4, [r1, #2]
  while(Value >= 10)
 8012d40:	2c09      	cmp	r4, #9
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8012d42:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10)
 8012d46:	d95a      	bls.n	8012dfe <HAL_RTC_SetAlarm+0x1be>
  uint32_t bcdhigh = 0;
 8012d48:	f04f 0e00 	mov.w	lr, #0
    Value -= 10;
 8012d4c:	3c0a      	subs	r4, #10
    bcdhigh++;
 8012d4e:	f10e 0e01 	add.w	lr, lr, #1
    Value -= 10;
 8012d52:	b2e4      	uxtb	r4, r4
  while(Value >= 10)
 8012d54:	2c09      	cmp	r4, #9
 8012d56:	d8f9      	bhi.n	8012d4c <HAL_RTC_SetAlarm+0x10c>
 8012d58:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
 8012d5c:	fa5f f88e 	uxtb.w	r8, lr
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8012d60:	f891 e024 	ldrb.w	lr, [r1, #36]	; 0x24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8012d64:	ea44 0408 	orr.w	r4, r4, r8
  while(Value >= 10)
 8012d68:	f1be 0f09 	cmp.w	lr, #9
 8012d6c:	d945      	bls.n	8012dfa <HAL_RTC_SetAlarm+0x1ba>
    Value -= 10;
 8012d6e:	f1ae 0e0a 	sub.w	lr, lr, #10
    bcdhigh++;
 8012d72:	3201      	adds	r2, #1
    Value -= 10;
 8012d74:	fa5f fe8e 	uxtb.w	lr, lr
  while(Value >= 10)
 8012d78:	f1be 0f09 	cmp.w	lr, #9
 8012d7c:	d8f7      	bhi.n	8012d6e <HAL_RTC_SetAlarm+0x12e>
 8012d7e:	0112      	lsls	r2, r2, #4
 8012d80:	b2d2      	uxtb	r2, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8012d82:	ea4e 0e02 	orr.w	lr, lr, r2
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8012d86:	698a      	ldr	r2, [r1, #24]
 8012d88:	4316      	orrs	r6, r2
 8012d8a:	ea46 0c0c 	orr.w	ip, r6, ip
 8012d8e:	ea4c 0000 	orr.w	r0, ip, r0
 8012d92:	4303      	orrs	r3, r0
 8012d94:	431c      	orrs	r4, r3
 8012d96:	ea44 640e 	orr.w	r4, r4, lr, lsl #24
 8012d9a:	e778      	b.n	8012c8e <HAL_RTC_SetAlarm+0x4e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012d9c:	2303      	movs	r3, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012d9e:	682a      	ldr	r2, [r5, #0]
 8012da0:	21ff      	movs	r1, #255	; 0xff
        return HAL_TIMEOUT;
 8012da2:	4618      	mov	r0, r3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012da4:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8012da6:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012da8:	776b      	strb	r3, [r5, #29]
}
 8012daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8012dae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012db2:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012dba:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8012dbc:	f7fc f998 	bl	800f0f0 <HAL_GetTick>
 8012dc0:	4607      	mov	r7, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8012dc2:	e005      	b.n	8012dd0 <HAL_RTC_SetAlarm+0x190>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8012dc4:	f7fc f994 	bl	800f0f0 <HAL_GetTick>
 8012dc8:	1bc0      	subs	r0, r0, r7
 8012dca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8012dce:	d8e5      	bhi.n	8012d9c <HAL_RTC_SetAlarm+0x15c>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8012dd0:	682a      	ldr	r2, [r5, #0]
 8012dd2:	68d6      	ldr	r6, [r2, #12]
 8012dd4:	f016 0601 	ands.w	r6, r6, #1
 8012dd8:	d0f4      	beq.n	8012dc4 <HAL_RTC_SetAlarm+0x184>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8012dda:	61d4      	str	r4, [r2, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8012ddc:	f8c2 8044 	str.w	r8, [r2, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8012de0:	6893      	ldr	r3, [r2, #8]
 8012de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012de6:	6093      	str	r3, [r2, #8]
 8012de8:	e77d      	b.n	8012ce6 <HAL_RTC_SetAlarm+0xa6>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8012dea:	f881 e00c 	strb.w	lr, [r1, #12]
 8012dee:	e73d      	b.n	8012c6c <HAL_RTC_SetAlarm+0x2c>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8012df0:	f881 c00c 	strb.w	ip, [r1, #12]
 8012df4:	e788      	b.n	8012d08 <HAL_RTC_SetAlarm+0xc8>
  __HAL_LOCK(hrtc);
 8012df6:	2002      	movs	r0, #2
}
 8012df8:	4770      	bx	lr
  while(Value >= 10)
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	e7c1      	b.n	8012d82 <HAL_RTC_SetAlarm+0x142>
 8012dfe:	f04f 0800 	mov.w	r8, #0
 8012e02:	e7ad      	b.n	8012d60 <HAL_RTC_SetAlarm+0x120>

08012e04 <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012e04:	7f03      	ldrb	r3, [r0, #28]
 8012e06:	2b01      	cmp	r3, #1
{
 8012e08:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hrtc);
 8012e0a:	d021      	beq.n	8012e50 <HAL_RTCEx_SetTimeStamp+0x4c>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8012e0c:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012e0e:	2602      	movs	r6, #2

  tmpreg|= TimeStampEdge;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012e10:	25ca      	movs	r5, #202	; 0xca
 8012e12:	2453      	movs	r4, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012e14:	7746      	strb	r6, [r0, #29]
  hrtc->Instance->CR = (uint32_t)tmpreg;

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012e16:	26ff      	movs	r6, #255	; 0xff
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8012e18:	689f      	ldr	r7, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012e1a:	625d      	str	r5, [r3, #36]	; 0x24
 8012e1c:	625c      	str	r4, [r3, #36]	; 0x24
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8012e1e:	f6a4 045c 	subw	r4, r4, #2140	; 0x85c
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8012e22:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8012e24:	403c      	ands	r4, r7

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8012e26:	2701      	movs	r7, #1
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8012e28:	f025 0506 	bic.w	r5, r5, #6
  tmpreg|= TimeStampEdge;
 8012e2c:	430c      	orrs	r4, r1
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8012e2e:	64dd      	str	r5, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8012e30:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012e32:	430a      	orrs	r2, r1

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012e34:	2100      	movs	r1, #0
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8012e36:	64da      	str	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8012e38:	460d      	mov	r5, r1
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8012e3a:	609c      	str	r4, [r3, #8]
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8012e3c:	689a      	ldr	r2, [r3, #8]
 8012e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012e42:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012e44:	625e      	str	r6, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8012e46:	7747      	strb	r7, [r0, #29]
  __HAL_UNLOCK(hrtc);
 8012e48:	7701      	strb	r1, [r0, #28]
}
 8012e4a:	4628      	mov	r0, r5
 8012e4c:	bcf0      	pop	{r4, r5, r6, r7}
 8012e4e:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8012e50:	2502      	movs	r5, #2
}
 8012e52:	4628      	mov	r0, r5
 8012e54:	bcf0      	pop	{r4, r5, r6, r7}
 8012e56:	4770      	bx	lr

08012e58 <HAL_SAI_Init>:
  uint32_t tmpregisterGCR = 0;
  uint32_t ckstr_bits = 0;
  uint32_t syncen_bits = 0;

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8012e58:	2800      	cmp	r0, #0
 8012e5a:	f000 80ef 	beq.w	801303c <HAL_SAI_Init+0x1e4>
{
 8012e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8012e60:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8012e64:	4604      	mov	r4, r0
 8012e66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	f000 80e1 	beq.w	8013032 <HAL_SAI_Init+0x1da>
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8012e70:	4b7d      	ldr	r3, [pc, #500]	; (8013068 <HAL_SAI_Init+0x210>)
  hsai->State = HAL_SAI_STATE_BUSY;
 8012e72:	2102      	movs	r1, #2
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8012e74:	487d      	ldr	r0, [pc, #500]	; (801306c <HAL_SAI_Init+0x214>)
 8012e76:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8012e78:	6823      	ldr	r3, [r4, #0]
  hsai->State = HAL_SAI_STATE_BUSY;
 8012e7a:	f884 107d 	strb.w	r1, [r4, #125]	; 0x7d
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8012e7e:	fba0 0202 	umull	r0, r2, r0, r2
  __HAL_SAI_DISABLE(hsai);
 8012e82:	6819      	ldr	r1, [r3, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8012e84:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 8012e86:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8012e8a:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8012e8c:	6019      	str	r1, [r3, #0]
 8012e8e:	e002      	b.n	8012e96 <HAL_SAI_Init+0x3e>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8012e90:	6819      	ldr	r1, [r3, #0]
 8012e92:	03cd      	lsls	r5, r1, #15
 8012e94:	d508      	bpl.n	8012ea8 <HAL_SAI_Init+0x50>
    if (count-- == 0)
 8012e96:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8012e9a:	d2f9      	bcs.n	8012e90 <HAL_SAI_Init+0x38>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8012e9c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8012ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012ea4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  switch(hsai->Init.SynchroExt)
 8012ea8:	68e2      	ldr	r2, [r4, #12]
 8012eaa:	2a01      	cmp	r2, #1
 8012eac:	f000 80a5 	beq.w	8012ffa <HAL_SAI_Init+0x1a2>
 8012eb0:	2a02      	cmp	r2, #2
  switch(hsai->Init.Synchro)
 8012eb2:	68a2      	ldr	r2, [r4, #8]
  switch(hsai->Init.SynchroExt)
 8012eb4:	bf0b      	itete	eq
 8012eb6:	2021      	moveq	r0, #33	; 0x21
 8012eb8:	2001      	movne	r0, #1
 8012eba:	2120      	moveq	r1, #32
 8012ebc:	2100      	movne	r1, #0
  switch(hsai->Init.Synchro)
 8012ebe:	2a02      	cmp	r2, #2
 8012ec0:	f000 80a1 	beq.w	8013006 <HAL_SAI_Init+0x1ae>
 8012ec4:	2a03      	cmp	r2, #3
 8012ec6:	f000 80c4 	beq.w	8013052 <HAL_SAI_Init+0x1fa>
  uint32_t syncen_bits = 0;
 8012eca:	2a01      	cmp	r2, #1
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8012ecc:	4868      	ldr	r0, [pc, #416]	; (8013070 <HAL_SAI_Init+0x218>)
 8012ece:	69e2      	ldr	r2, [r4, #28]
  uint32_t syncen_bits = 0;
 8012ed0:	bf0c      	ite	eq
 8012ed2:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8012ed6:	2700      	movne	r7, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8012ed8:	4283      	cmp	r3, r0
 8012eda:	f000 809b 	beq.w	8013014 <HAL_SAI_Init+0x1bc>
 8012ede:	3020      	adds	r0, #32
 8012ee0:	1a18      	subs	r0, r3, r0
 8012ee2:	fab0 f080 	clz	r0, r0
 8012ee6:	0940      	lsrs	r0, r0, #5
 8012ee8:	2800      	cmp	r0, #0
 8012eea:	f040 8093 	bne.w	8013014 <HAL_SAI_Init+0x1bc>
    SAI2->GCR = tmpregisterGCR;
 8012eee:	4d61      	ldr	r5, [pc, #388]	; (8013074 <HAL_SAI_Init+0x21c>)
 8012ef0:	6029      	str	r1, [r5, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8012ef2:	2a00      	cmp	r2, #0
 8012ef4:	f000 8091 	beq.w	801301a <HAL_SAI_Init+0x1c2>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8012ef8:	4a5f      	ldr	r2, [pc, #380]	; (8013078 <HAL_SAI_Init+0x220>)
 8012efa:	4293      	cmp	r3, r2
 8012efc:	f000 80ad 	beq.w	801305a <HAL_SAI_Init+0x202>
 8012f00:	3220      	adds	r2, #32
 8012f02:	4293      	cmp	r3, r2
 8012f04:	f000 80a9 	beq.w	801305a <HAL_SAI_Init+0x202>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8012f08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012f0c:	69e5      	ldr	r5, [r4, #28]
    hsai->Init.Mckdiv = tmpval / 10;
 8012f0e:	4a5b      	ldr	r2, [pc, #364]	; (801307c <HAL_SAI_Init+0x224>)
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8012f10:	0041      	lsls	r1, r0, #1
 8012f12:	026d      	lsls	r5, r5, #9
 8012f14:	fbb1 f1f5 	udiv	r1, r1, r5
    hsai->Init.Mckdiv = tmpval / 10;
 8012f18:	fba2 0201 	umull	r0, r2, r2, r1
 8012f1c:	08d0      	lsrs	r0, r2, #3
    if((tmpval % 10) > 8)
 8012f1e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    hsai->Init.Mckdiv = tmpval / 10;
 8012f22:	6220      	str	r0, [r4, #32]
    if((tmpval % 10) > 8)
 8012f24:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
 8012f28:	2909      	cmp	r1, #9
 8012f2a:	f000 8089 	beq.w	8013040 <HAL_SAI_Init+0x1e8>
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8012f2e:	6862      	ldr	r2, [r4, #4]
 8012f30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012f32:	f032 0602 	bics.w	r6, r2, #2
 8012f36:	d176      	bne.n	8013026 <HAL_SAI_Init+0x1ce>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8012f38:	2901      	cmp	r1, #1
 8012f3a:	bf18      	it	ne
 8012f3c:	f44f 7600 	movne.w	r6, #512	; 0x200
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012f40:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8012f42:	f24f 0e20 	movw	lr, #61472	; 0xf020
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8012f46:	f8d3 c000 	ldr.w	ip, [r3]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012f4a:	430a      	orrs	r2, r1
 8012f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8012f4e:	6c25      	ldr	r5, [r4, #64]	; 0x40
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012f50:	430a      	orrs	r2, r1
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8012f52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012f54:	430a      	orrs	r2, r1
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012f56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012f58:	430a      	orrs	r2, r1
 8012f5a:	6921      	ldr	r1, [r4, #16]
 8012f5c:	430a      	orrs	r2, r1
 8012f5e:	6961      	ldr	r1, [r4, #20]
 8012f60:	430a      	orrs	r2, r1
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8012f62:	4947      	ldr	r1, [pc, #284]	; (8013080 <HAL_SAI_Init+0x228>)
 8012f64:	ea0c 0101 	and.w	r1, ip, r1
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012f68:	433a      	orrs	r2, r7
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8012f6a:	f8df c120 	ldr.w	ip, [pc, #288]	; 801308c <HAL_SAI_Init+0x234>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8012f6e:	2700      	movs	r7, #0
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8012f70:	6019      	str	r1, [r3, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012f72:	6819      	ldr	r1, [r3, #0]
 8012f74:	430a      	orrs	r2, r1
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8012f76:	69a1      	ldr	r1, [r4, #24]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012f78:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8012f7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012f7e:	4332      	orrs	r2, r6
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8012f80:	4301      	orrs	r1, r0
 8012f82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012f84:	601a      	str	r2, [r3, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8012f86:	685e      	ldr	r6, [r3, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8012f88:	4301      	orrs	r1, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8012f8a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012f8c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8012f8e:	ea06 0c0c 	and.w	ip, r6, ip
  hsai->State= HAL_SAI_STATE_READY;
 8012f92:	2601      	movs	r6, #1
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8012f94:	f8c3 c004 	str.w	ip, [r3, #4]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8012f98:	4302      	orrs	r2, r0
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8012f9a:	6858      	ldr	r0, [r3, #4]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8012f9c:	f8d4 c04c 	ldr.w	ip, [r4, #76]	; 0x4c
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8012fa0:	4301      	orrs	r1, r0
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8012fa2:	4838      	ldr	r0, [pc, #224]	; (8013084 <HAL_SAI_Init+0x22c>)
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8012fa4:	ea42 020c 	orr.w	r2, r2, ip
 8012fa8:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8012fac:	6059      	str	r1, [r3, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8012fae:	6899      	ldr	r1, [r3, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8012fb0:	ea42 020c 	orr.w	r2, r2, ip
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8012fb4:	4008      	ands	r0, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8012fb6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012fb8:	3901      	subs	r1, #1
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8012fba:	6098      	str	r0, [r3, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8012fbc:	6898      	ldr	r0, [r3, #8]
 8012fbe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8012fc2:	6d61      	ldr	r1, [r4, #84]	; 0x54
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8012fc4:	4302      	orrs	r2, r0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8012fc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8012fc8:	609a      	str	r2, [r3, #8]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8012fca:	ea41 0200 	orr.w	r2, r1, r0
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8012fce:	68d9      	ldr	r1, [r3, #12]
  return HAL_OK;
 8012fd0:	4638      	mov	r0, r7
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8012fd2:	ea0e 0501 	and.w	r5, lr, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8012fd6:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8012fd8:	60dd      	str	r5, [r3, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8012fda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8012fde:	68dd      	ldr	r5, [r3, #12]
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8012fe0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012fe2:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8012fe4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8012fe8:	432a      	orrs	r2, r5
 8012fea:	60da      	str	r2, [r3, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8012fec:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8012ff0:	f884 707c 	strb.w	r7, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 8012ff4:	f884 607d 	strb.w	r6, [r4, #125]	; 0x7d
}
 8012ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch(hsai->Init.Synchro)
 8012ffa:	68a2      	ldr	r2, [r4, #8]
  switch(hsai->Init.SynchroExt)
 8012ffc:	2011      	movs	r0, #17
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8012ffe:	2110      	movs	r1, #16
  switch(hsai->Init.Synchro)
 8013000:	2a02      	cmp	r2, #2
 8013002:	f47f af5f 	bne.w	8012ec4 <HAL_SAI_Init+0x6c>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8013006:	f44f 6700 	mov.w	r7, #2048	; 0x800
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 801300a:	4819      	ldr	r0, [pc, #100]	; (8013070 <HAL_SAI_Init+0x218>)
 801300c:	69e2      	ldr	r2, [r4, #28]
 801300e:	4283      	cmp	r3, r0
 8013010:	f47f af65 	bne.w	8012ede <HAL_SAI_Init+0x86>
    SAI1->GCR = tmpregisterGCR;
 8013014:	481c      	ldr	r0, [pc, #112]	; (8013088 <HAL_SAI_Init+0x230>)
 8013016:	6001      	str	r1, [r0, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8013018:	b9aa      	cbnz	r2, 8013046 <HAL_SAI_Init+0x1ee>
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801301a:	6862      	ldr	r2, [r4, #4]
 801301c:	6a20      	ldr	r0, [r4, #32]
 801301e:	f032 0602 	bics.w	r6, r2, #2
 8013022:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013024:	d088      	beq.n	8012f38 <HAL_SAI_Init+0xe0>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8013026:	2901      	cmp	r1, #1
 8013028:	bf14      	ite	ne
 801302a:	2600      	movne	r6, #0
 801302c:	f44f 7600 	moveq.w	r6, #512	; 0x200
 8013030:	e786      	b.n	8012f40 <HAL_SAI_Init+0xe8>
    hsai->Lock = HAL_UNLOCKED;
 8013032:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8013036:	f7f8 fab1 	bl	800b59c <HAL_SAI_MspInit>
 801303a:	e719      	b.n	8012e70 <HAL_SAI_Init+0x18>
    return HAL_ERROR;
 801303c:	2001      	movs	r0, #1
}
 801303e:	4770      	bx	lr
      hsai->Init.Mckdiv+= 1;
 8013040:	3001      	adds	r0, #1
 8013042:	6220      	str	r0, [r4, #32]
 8013044:	e773      	b.n	8012f2e <HAL_SAI_Init+0xd6>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8013046:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 801304a:	f7ff fbe5 	bl	8012818 <HAL_RCCEx_GetPeriphCLKFreq>
 801304e:	6823      	ldr	r3, [r4, #0]
 8013050:	e752      	b.n	8012ef8 <HAL_SAI_Init+0xa0>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8013052:	4601      	mov	r1, r0
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8013054:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8013058:	e7d7      	b.n	801300a <HAL_SAI_Init+0x1b2>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 801305a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801305e:	f7ff fbdb 	bl	8012818 <HAL_RCCEx_GetPeriphCLKFreq>
 8013062:	6823      	ldr	r3, [r4, #0]
 8013064:	e750      	b.n	8012f08 <HAL_SAI_Init+0xb0>
 8013066:	bf00      	nop
 8013068:	2000002c 	.word	0x2000002c
 801306c:	95cbec1b 	.word	0x95cbec1b
 8013070:	40015804 	.word	0x40015804
 8013074:	40015c00 	.word	0x40015c00
 8013078:	40015c04 	.word	0x40015c04
 801307c:	cccccccd 	.word	0xcccccccd
 8013080:	ff05c010 	.word	0xff05c010
 8013084:	fff88000 	.word	0xfff88000
 8013088:	40015800 	.word	0x40015800
 801308c:	ffff1ff0 	.word	0xffff1ff0

08013090 <HAL_SAI_DeInit>:
  if(hsai == NULL)
 8013090:	b388      	cbz	r0, 80130f6 <HAL_SAI_DeInit+0x66>
  hsai->State = HAL_SAI_STATE_BUSY;
 8013092:	2202      	movs	r2, #2
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8013094:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 8013098:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 801309a:	4b18      	ldr	r3, [pc, #96]	; (80130fc <HAL_SAI_DeInit+0x6c>)
  hsai->Instance->IMR = 0;
 801309c:	2400      	movs	r4, #0
  hsai->State = HAL_SAI_STATE_BUSY;
 801309e:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80130a2:	681b      	ldr	r3, [r3, #0]
  hsai->Instance->IMR = 0;
 80130a4:	6802      	ldr	r2, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80130a6:	4d16      	ldr	r5, [pc, #88]	; (8013100 <HAL_SAI_DeInit+0x70>)
  hsai->Instance->IMR = 0;
 80130a8:	6114      	str	r4, [r2, #16]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80130aa:	fba5 5303 	umull	r5, r3, r5, r3
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80130ae:	6191      	str	r1, [r2, #24]
  __HAL_SAI_DISABLE(hsai);
 80130b0:	6811      	ldr	r1, [r2, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80130b2:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 80130b4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80130b8:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 80130ba:	6011      	str	r1, [r2, #0]
 80130bc:	e002      	b.n	80130c4 <HAL_SAI_DeInit+0x34>
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80130be:	6811      	ldr	r1, [r2, #0]
 80130c0:	03c9      	lsls	r1, r1, #15
 80130c2:	d508      	bpl.n	80130d6 <HAL_SAI_DeInit+0x46>
    if (count-- == 0)
 80130c4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80130c8:	d2f9      	bcs.n	80130be <HAL_SAI_DeInit+0x2e>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80130ca:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80130ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130d2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80130d6:	6853      	ldr	r3, [r2, #4]
 80130d8:	4604      	mov	r4, r0
 80130da:	f043 0308 	orr.w	r3, r3, #8
 80130de:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 80130e0:	f7f8 fab2 	bl	800b648 <HAL_SAI_MspDeInit>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80130e4:	2300      	movs	r3, #0
 80130e6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  return HAL_OK;
 80130ea:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_RESET;
 80130ec:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 80130f0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 80130f4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80130f6:	2001      	movs	r0, #1
}
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop
 80130fc:	2000002c 	.word	0x2000002c
 8013100:	95cbec1b 	.word	0x95cbec1b

08013104 <HAL_SAI_DMAPause>:
  __HAL_LOCK(hsai);
 8013104:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8013108:	2a01      	cmp	r2, #1
 801310a:	d00d      	beq.n	8013128 <HAL_SAI_DMAPause+0x24>
 801310c:	4603      	mov	r3, r0
  __HAL_UNLOCK(hsai);
 801310e:	2100      	movs	r1, #0
{
 8013110:	b410      	push	{r4}
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8013112:	6804      	ldr	r4, [r0, #0]
  return HAL_OK;
 8013114:	4608      	mov	r0, r1
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8013116:	6822      	ldr	r2, [r4, #0]
 8013118:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801311c:	6022      	str	r2, [r4, #0]
  __HAL_UNLOCK(hsai);
 801311e:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8013122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013126:	4770      	bx	lr
  __HAL_LOCK(hsai);
 8013128:	2002      	movs	r0, #2
}
 801312a:	4770      	bx	lr

0801312c <HAL_SAI_DMAResume>:
  __HAL_LOCK(hsai);
 801312c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8013130:	2b01      	cmp	r3, #1
 8013132:	d013      	beq.n	801315c <HAL_SAI_DMAResume+0x30>
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8013134:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hsai);
 8013136:	2101      	movs	r1, #1
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8013138:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hsai);
 801313a:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 801313e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8013142:	601a      	str	r2, [r3, #0]
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8013144:	681a      	ldr	r2, [r3, #0]
 8013146:	03d2      	lsls	r2, r2, #15
 8013148:	d403      	bmi.n	8013152 <HAL_SAI_DMAResume+0x26>
    __HAL_SAI_ENABLE(hsai);
 801314a:	681a      	ldr	r2, [r3, #0]
 801314c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8013150:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hsai);
 8013152:	2300      	movs	r3, #0
 8013154:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8013158:	4618      	mov	r0, r3
 801315a:	4770      	bx	lr
  __HAL_LOCK(hsai);
 801315c:	2002      	movs	r0, #2
}
 801315e:	4770      	bx	lr

08013160 <HAL_SAI_DMAStop>:
{
 8013160:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 8013162:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8013166:	2b01      	cmp	r3, #1
 8013168:	d059      	beq.n	801321e <HAL_SAI_DMAStop+0xbe>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 801316a:	6802      	ldr	r2, [r0, #0]
 801316c:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 801316e:	2501      	movs	r5, #1
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8013170:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8013172:	6813      	ldr	r3, [r2, #0]
  __HAL_LOCK(hsai);
 8013174:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8013178:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801317c:	6013      	str	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 801317e:	b118      	cbz	r0, 8013188 <HAL_SAI_DMAStop+0x28>
 8013180:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8013184:	2b12      	cmp	r3, #18
 8013186:	d03b      	beq.n	8013200 <HAL_SAI_DMAStop+0xa0>
  HAL_StatusTypeDef status = HAL_OK;
 8013188:	2500      	movs	r5, #0
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 801318a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801318c:	b118      	cbz	r0, 8013196 <HAL_SAI_DMAStop+0x36>
 801318e:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8013192:	2b22      	cmp	r3, #34	; 0x22
 8013194:	d024      	beq.n	80131e0 <HAL_SAI_DMAStop+0x80>
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8013196:	4b23      	ldr	r3, [pc, #140]	; (8013224 <HAL_SAI_DMAStop+0xc4>)
 8013198:	4a23      	ldr	r2, [pc, #140]	; (8013228 <HAL_SAI_DMAStop+0xc8>)
 801319a:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
 801319c:	6821      	ldr	r1, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 801319e:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_SAI_DISABLE(hsai);
 80131a2:	680a      	ldr	r2, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80131a4:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 80131a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80131aa:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 80131ac:	600a      	str	r2, [r1, #0]
 80131ae:	e002      	b.n	80131b6 <HAL_SAI_DMAStop+0x56>
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80131b0:	680a      	ldr	r2, [r1, #0]
 80131b2:	03d2      	lsls	r2, r2, #15
 80131b4:	d508      	bpl.n	80131c8 <HAL_SAI_DMAStop+0x68>
    if (count-- == 0)
 80131b6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80131ba:	d2f9      	bcs.n	80131b0 <HAL_SAI_DMAStop+0x50>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80131bc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80131c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131c4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80131c8:	684b      	ldr	r3, [r1, #4]
  hsai->State = HAL_SAI_STATE_READY;
 80131ca:	2001      	movs	r0, #1
  __HAL_UNLOCK(hsai);
 80131cc:	2200      	movs	r2, #0
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80131ce:	f043 0308 	orr.w	r3, r3, #8
 80131d2:	604b      	str	r3, [r1, #4]
  hsai->State = HAL_SAI_STATE_READY;
 80131d4:	f884 007d 	strb.w	r0, [r4, #125]	; 0x7d
}
 80131d8:	4628      	mov	r0, r5
  __HAL_UNLOCK(hsai);
 80131da:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
}
 80131de:	bd38      	pop	{r3, r4, r5, pc}
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80131e0:	f7fc fb6c 	bl	800f8bc <HAL_DMA_Abort>
 80131e4:	2800      	cmp	r0, #0
 80131e6:	d0d6      	beq.n	8013196 <HAL_SAI_DMAStop+0x36>
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80131e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80131ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131ec:	2b80      	cmp	r3, #128	; 0x80
 80131ee:	d0d2      	beq.n	8013196 <HAL_SAI_DMAStop+0x36>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80131f0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 80131f4:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80131f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131fa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80131fe:	e7ca      	b.n	8013196 <HAL_SAI_DMAStop+0x36>
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8013200:	f7fc fb5c 	bl	800f8bc <HAL_DMA_Abort>
 8013204:	2800      	cmp	r0, #0
 8013206:	d0bf      	beq.n	8013188 <HAL_SAI_DMAStop+0x28>
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8013208:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801320c:	2b80      	cmp	r3, #128	; 0x80
 801320e:	d0bb      	beq.n	8013188 <HAL_SAI_DMAStop+0x28>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8013210:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8013214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013218:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 801321c:	e7b5      	b.n	801318a <HAL_SAI_DMAStop+0x2a>
  __HAL_LOCK(hsai);
 801321e:	2502      	movs	r5, #2
}
 8013220:	4628      	mov	r0, r5
 8013222:	bd38      	pop	{r3, r4, r5, pc}
 8013224:	2000002c 	.word	0x2000002c
 8013228:	95cbec1b 	.word	0x95cbec1b

0801322c <HAL_SAI_Transmit_DMA>:
  if((pData == NULL) || (Size == 0))
 801322c:	2900      	cmp	r1, #0
 801322e:	d04f      	beq.n	80132d0 <HAL_SAI_Transmit_DMA+0xa4>
{
 8013230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((pData == NULL) || (Size == 0))
 8013232:	fab2 f582 	clz	r5, r2
 8013236:	096d      	lsrs	r5, r5, #5
 8013238:	2d00      	cmp	r5, #0
 801323a:	d147      	bne.n	80132cc <HAL_SAI_Transmit_DMA+0xa0>
  if(hsai->State == HAL_SAI_STATE_READY)
 801323c:	f890 607d 	ldrb.w	r6, [r0, #125]	; 0x7d
 8013240:	b2f6      	uxtb	r6, r6
 8013242:	2e01      	cmp	r6, #1
 8013244:	d140      	bne.n	80132c8 <HAL_SAI_Transmit_DMA+0x9c>
    __HAL_LOCK(hsai);
 8013246:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
 801324a:	2c01      	cmp	r4, #1
 801324c:	d03c      	beq.n	80132c8 <HAL_SAI_Transmit_DMA+0x9c>
 801324e:	4604      	mov	r4, r0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8013250:	f04f 0c12 	mov.w	ip, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8013254:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8013256:	4613      	mov	r3, r2
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8013258:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    __HAL_LOCK(hsai);
 801325c:	f880 607c 	strb.w	r6, [r0, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 8013260:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 8013262:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
    hsai->XferCount = Size;
 8013266:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 801326a:	4638      	mov	r0, r7
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 801326c:	f884 c07d 	strb.w	ip, [r4, #125]	; 0x7d
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8013270:	4a1f      	ldr	r2, [pc, #124]	; (80132f0 <HAL_SAI_Transmit_DMA+0xc4>)
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8013272:	f8df c080 	ldr.w	ip, [pc, #128]	; 80132f4 <HAL_SAI_Transmit_DMA+0xc8>
    hsai->hdmatx->XferAbortCallback = NULL;
 8013276:	653d      	str	r5, [r7, #80]	; 0x50
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8013278:	e9c7 2c0f 	strd	r2, ip, [r7, #60]	; 0x3c
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 801327c:	6822      	ldr	r2, [r4, #0]
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 801327e:	f8df c078 	ldr.w	ip, [pc, #120]	; 80132f8 <HAL_SAI_Transmit_DMA+0xcc>
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8013282:	321c      	adds	r2, #28
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8013284:	f8c7 c04c 	str.w	ip, [r7, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8013288:	f7fc fad2 	bl	800f830 <HAL_DMA_Start_IT>
 801328c:	bb10      	cbnz	r0, 80132d4 <HAL_SAI_Transmit_DMA+0xa8>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 801328e:	6823      	ldr	r3, [r4, #0]
 8013290:	681a      	ldr	r2, [r3, #0]
 8013292:	03d2      	lsls	r2, r2, #15
 8013294:	d403      	bmi.n	801329e <HAL_SAI_Transmit_DMA+0x72>
      __HAL_SAI_ENABLE(hsai);
 8013296:	681a      	ldr	r2, [r3, #0]
 8013298:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801329c:	601a      	str	r2, [r3, #0]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 801329e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80132a0:	6862      	ldr	r2, [r4, #4]
 80132a2:	2908      	cmp	r1, #8
 80132a4:	d01a      	beq.n	80132dc <HAL_SAI_Transmit_DMA+0xb0>
 80132a6:	2605      	movs	r6, #5
 80132a8:	2561      	movs	r5, #97	; 0x61
  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80132aa:	3a02      	subs	r2, #2
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80132ac:	6919      	ldr	r1, [r3, #16]
    tmpIT|= SAI_IT_WCKCFG;
 80132ae:	2a01      	cmp	r2, #1
 80132b0:	bf88      	it	hi
 80132b2:	4635      	movhi	r5, r6
    __HAL_UNLOCK(hsai);
 80132b4:	2600      	movs	r6, #0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80132b6:	4329      	orrs	r1, r5
 80132b8:	6119      	str	r1, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80132ba:	681a      	ldr	r2, [r3, #0]
 80132bc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80132c0:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80132c2:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
 80132c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80132c8:	2002      	movs	r0, #2
}
 80132ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 80132cc:	2001      	movs	r0, #1
}
 80132ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 80132d0:	2001      	movs	r0, #1
}
 80132d2:	4770      	bx	lr
      __HAL_UNLOCK(hsai);
 80132d4:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 80132d8:	4630      	mov	r0, r6
}
 80132da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80132dc:	f022 0102 	bic.w	r1, r2, #2
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80132e0:	2901      	cmp	r1, #1
 80132e2:	bf0b      	itete	eq
 80132e4:	2615      	moveq	r6, #21
 80132e6:	2605      	movne	r6, #5
 80132e8:	2571      	moveq	r5, #113	; 0x71
 80132ea:	2561      	movne	r5, #97	; 0x61
 80132ec:	e7dd      	b.n	80132aa <HAL_SAI_Transmit_DMA+0x7e>
 80132ee:	bf00      	nop
 80132f0:	080132fd 	.word	0x080132fd
 80132f4:	0801335d 	.word	0x0801335d
 80132f8:	08013369 	.word	0x08013369

080132fc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80132fc:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80132fe:	6803      	ldr	r3, [r0, #0]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8013300:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8013308:	d118      	bne.n	801333c <SAI_DMATxCplt+0x40>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 801330a:	6802      	ldr	r2, [r0, #0]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 801330c:	6b04      	ldr	r4, [r0, #48]	; 0x30
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 801330e:	6811      	ldr	r1, [r2, #0]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8013310:	2c08      	cmp	r4, #8
    hsai->XferCount = 0;
 8013312:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8013316:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 801331a:	6843      	ldr	r3, [r0, #4]
 801331c:	6011      	str	r1, [r2, #0]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 801331e:	d010      	beq.n	8013342 <SAI_DMATxCplt+0x46>
 8013320:	f06f 0461 	mvn.w	r4, #97	; 0x61
 8013324:	f06f 0505 	mvn.w	r5, #5
  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8013328:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 801332a:	6911      	ldr	r1, [r2, #16]
  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801332c:	2b01      	cmp	r3, #1
 801332e:	bf88      	it	hi
 8013330:	462c      	movhi	r4, r5

    hsai->State= HAL_SAI_STATE_READY;
 8013332:	2501      	movs	r5, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8013334:	4021      	ands	r1, r4
 8013336:	6111      	str	r1, [r2, #16]
    hsai->State= HAL_SAI_STATE_READY;
 8013338:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 801333c:	f7fa fb2c 	bl	800d998 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8013340:	bd38      	pop	{r3, r4, r5, pc}
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8013342:	f023 0102 	bic.w	r1, r3, #2
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8013346:	2901      	cmp	r1, #1
 8013348:	bf0b      	itete	eq
 801334a:	f06f 0471 	mvneq.w	r4, #113	; 0x71
 801334e:	f06f 0461 	mvnne.w	r4, #97	; 0x61
 8013352:	f06f 0515 	mvneq.w	r5, #21
 8013356:	f06f 0505 	mvnne.w	r5, #5
 801335a:	e7e5      	b.n	8013328 <SAI_DMATxCplt+0x2c>

0801335c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801335c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 801335e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8013360:	f7fa fb1e 	bl	800d9a0 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8013364:	bd08      	pop	{r3, pc}
 8013366:	bf00      	nop

08013368 <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013368:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 801336a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 801336e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8013370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
{
 8013374:	b510      	push	{r4, lr}
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8013376:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 801337a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 801337c:	2b01      	cmp	r3, #1
 801337e:	d006      	beq.n	801338e <SAI_DMAError+0x26>
 8013380:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8013382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013384:	2b01      	cmp	r3, #1
 8013386:	d002      	beq.n	801338e <SAI_DMAError+0x26>
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8013388:	f7fa fc56 	bl	800dc38 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 801338c:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 801338e:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8013390:	4b12      	ldr	r3, [pc, #72]	; (80133dc <SAI_DMAError+0x74>)
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8013392:	680a      	ldr	r2, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8013394:	681b      	ldr	r3, [r3, #0]
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8013396:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 801339a:	4c11      	ldr	r4, [pc, #68]	; (80133e0 <SAI_DMAError+0x78>)
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 801339c:	600a      	str	r2, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 801339e:	fba4 4303 	umull	r4, r3, r4, r3
  __HAL_SAI_DISABLE(hsai);
 80133a2:	680a      	ldr	r2, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80133a4:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 80133a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80133aa:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 80133ac:	600a      	str	r2, [r1, #0]
 80133ae:	e002      	b.n	80133b6 <SAI_DMAError+0x4e>
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80133b0:	680a      	ldr	r2, [r1, #0]
 80133b2:	03d2      	lsls	r2, r2, #15
 80133b4:	d508      	bpl.n	80133c8 <SAI_DMAError+0x60>
    if (count-- == 0)
 80133b6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80133ba:	d2f9      	bcs.n	80133b0 <SAI_DMAError+0x48>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80133bc:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80133c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133c4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_READY;
 80133c8:	2201      	movs	r2, #1
    hsai->XferCount = 0U;
 80133ca:	2300      	movs	r3, #0
    hsai->State = HAL_SAI_STATE_READY;
 80133cc:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
    hsai->XferCount = 0U;
 80133d0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  HAL_SAI_ErrorCallback(hsai);
 80133d4:	f7fa fc30 	bl	800dc38 <HAL_SAI_ErrorCallback>
}
 80133d8:	bd10      	pop	{r4, pc}
 80133da:	bf00      	nop
 80133dc:	2000002c 	.word	0x2000002c
 80133e0:	95cbec1b 	.word	0x95cbec1b

080133e4 <HAL_SAI_GetState>:
  return hsai->State;
 80133e4:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 80133e8:	4770      	bx	lr
 80133ea:	bf00      	nop

080133ec <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80133ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80133ee:	681a      	ldr	r2, [r3, #0]
 80133f0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80133f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80133f6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80133f8:	4770      	bx	lr
 80133fa:	bf00      	nop

080133fc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80133fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013400:	4605      	mov	r5, r0
 8013402:	b089      	sub	sp, #36	; 0x24
 8013404:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8013406:	f7fb fe73 	bl	800f0f0 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 801340a:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 801340c:	4606      	mov	r6, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 801340e:	2108      	movs	r1, #8
 8013410:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2] = {0, 0};
 8013412:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8013416:	f001 fdaf 	bl	8014f78 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 801341a:	4604      	mov	r4, r0
 801341c:	b118      	cbz	r0, 8013426 <SD_FindSCR+0x2a>
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 801341e:	4620      	mov	r0, r4
 8013420:	b009      	add	sp, #36	; 0x24
 8013422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8013426:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8013428:	6828      	ldr	r0, [r5, #0]
 801342a:	0409      	lsls	r1, r1, #16
 801342c:	f001 ffca 	bl	80153c4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8013430:	4604      	mov	r4, r0
 8013432:	2800      	cmp	r0, #0
 8013434:	d1f3      	bne.n	801341e <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8013436:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  config.DataLength    = 8;
 801343a:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 801343c:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801343e:	9006      	str	r0, [sp, #24]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8013440:	9202      	str	r2, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8013442:	2202      	movs	r2, #2
  config.DataLength    = 8;
 8013444:	9303      	str	r3, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8013446:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8013448:	9104      	str	r1, [sp, #16]
  SDMMC_ConfigData(hsd->Instance, &config);
 801344a:	a902      	add	r1, sp, #8
 801344c:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801344e:	9205      	str	r2, [sp, #20]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8013450:	9307      	str	r3, [sp, #28]
  SDMMC_ConfigData(hsd->Instance, &config);
 8013452:	f001 fd7b 	bl	8014f4c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8013456:	6828      	ldr	r0, [r5, #0]
 8013458:	f002 f86c 	bl	8015534 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 801345c:	4604      	mov	r4, r0
 801345e:	2800      	cmp	r0, #0
 8013460:	d1dd      	bne.n	801341e <SD_FindSCR+0x22>
  uint32_t index = 0;
 8013462:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8013464:	f240 482a 	movw	r8, #1066	; 0x42a
 8013468:	6828      	ldr	r0, [r5, #0]
 801346a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801346c:	ea13 0f08 	tst.w	r3, r8
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8013470:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8013472:	d118      	bne.n	80134a6 <SD_FindSCR+0xaa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8013474:	029b      	lsls	r3, r3, #10
 8013476:	d407      	bmi.n	8013488 <SD_FindSCR+0x8c>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8013478:	f7fb fe3a 	bl	800f0f0 <HAL_GetTick>
 801347c:	1b80      	subs	r0, r0, r6
 801347e:	3001      	adds	r0, #1
 8013480:	d1f2      	bne.n	8013468 <SD_FindSCR+0x6c>
      return HAL_SD_ERROR_TIMEOUT;
 8013482:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8013486:	e7ca      	b.n	801341e <SD_FindSCR+0x22>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8013488:	f001 fd48 	bl	8014f1c <SDMMC_ReadFIFO>
 801348c:	ab08      	add	r3, sp, #32
 801348e:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8013492:	f109 0901 	add.w	r9, r9, #1
 8013496:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801349a:	f7fb fe29 	bl	800f0f0 <HAL_GetTick>
 801349e:	1b80      	subs	r0, r0, r6
 80134a0:	3001      	adds	r0, #1
 80134a2:	d1e1      	bne.n	8013468 <SD_FindSCR+0x6c>
 80134a4:	e7ed      	b.n	8013482 <SD_FindSCR+0x86>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80134a6:	0719      	lsls	r1, r3, #28
 80134a8:	d40f      	bmi.n	80134ca <SD_FindSCR+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80134aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80134ac:	079a      	lsls	r2, r3, #30
 80134ae:	d40f      	bmi.n	80134d0 <SD_FindSCR+0xd4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80134b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80134b2:	069b      	lsls	r3, r3, #26
 80134b4:	d40f      	bmi.n	80134d6 <SD_FindSCR+0xda>
 80134b6:	9a00      	ldr	r2, [sp, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80134b8:	f240 51ff 	movw	r1, #1535	; 0x5ff
 80134bc:	9b01      	ldr	r3, [sp, #4]
 80134be:	ba12      	rev	r2, r2
 80134c0:	6381      	str	r1, [r0, #56]	; 0x38
 80134c2:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80134c4:	e9c7 3200 	strd	r3, r2, [r7]
  return HAL_SD_ERROR_NONE;
 80134c8:	e7a9      	b.n	801341e <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80134ca:	2408      	movs	r4, #8
 80134cc:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80134ce:	e7a6      	b.n	801341e <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80134d0:	2402      	movs	r4, #2
 80134d2:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80134d4:	e7a3      	b.n	801341e <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80134d6:	2420      	movs	r4, #32
 80134d8:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80134da:	e7a0      	b.n	801341e <SD_FindSCR+0x22>

080134dc <HAL_SD_ReadBlocks_DMA>:
{
 80134dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134e0:	4604      	mov	r4, r0
 80134e2:	b086      	sub	sp, #24
  if(NULL == pData)
 80134e4:	b1b9      	cbz	r1, 8013516 <HAL_SD_ReadBlocks_DMA+0x3a>
  if(hsd->State == HAL_SD_STATE_READY)
 80134e6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80134ea:	b2c0      	uxtb	r0, r0
 80134ec:	2801      	cmp	r0, #1
 80134ee:	d10e      	bne.n	801350e <HAL_SD_ReadBlocks_DMA+0x32>
 80134f0:	4615      	mov	r5, r2
 80134f2:	461e      	mov	r6, r3
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80134f4:	18d3      	adds	r3, r2, r3
 80134f6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80134f8:	2700      	movs	r7, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80134fa:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80134fc:	63a7      	str	r7, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80134fe:	d912      	bls.n	8013526 <HAL_SD_ReadBlocks_DMA+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8013500:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013502:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013506:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8013508:	b006      	add	sp, #24
 801350a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 801350e:	2002      	movs	r0, #2
}
 8013510:	b006      	add	sp, #24
 8013512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8013516:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8013518:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801351a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801351e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8013520:	b006      	add	sp, #24
 8013522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->Instance->DCTRL = 0U;
 8013526:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8013528:	2003      	movs	r0, #3
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 801352a:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 801352e:	ea4f 2846 	mov.w	r8, r6, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 8013532:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8013536:	460a      	mov	r2, r1
    hsd->Instance->DCTRL = 0U;
 8013538:	62df      	str	r7, [r3, #44]	; 0x2c
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 801353a:	f103 0180 	add.w	r1, r3, #128	; 0x80
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 801353e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8013540:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 80135fc <HAL_SD_ReadBlocks_DMA+0x120>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8013544:	f440 7095 	orr.w	r0, r0, #298	; 0x12a
 8013548:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 801354a:	4660      	mov	r0, ip
    hsd->hdmarx->XferAbortCallback = NULL;
 801354c:	f8cc 7050 	str.w	r7, [ip, #80]	; 0x50
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8013550:	ea4f 0398 	mov.w	r3, r8, lsr #2
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8013554:	4f28      	ldr	r7, [pc, #160]	; (80135f8 <HAL_SD_ReadBlocks_DMA+0x11c>)
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8013556:	f8cc e03c 	str.w	lr, [ip, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 801355a:	f8cc 704c 	str.w	r7, [ip, #76]	; 0x4c
    config.DPSM          = SDMMC_DPSM_ENABLE;
 801355e:	2701      	movs	r7, #1
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8013560:	f7fc f966 	bl	800f830 <HAL_DMA_Start_IT>
    __HAL_SD_DMA_ENABLE(hsd);
 8013564:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8013566:	6c62      	ldr	r2, [r4, #68]	; 0x44
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8013568:	2190      	movs	r1, #144	; 0x90
    __HAL_SD_DMA_ENABLE(hsd);
 801356a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801356c:	2a01      	cmp	r2, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801356e:	f04f 0202 	mov.w	r2, #2
    __HAL_SD_DMA_ENABLE(hsd);
 8013572:	f043 0308 	orr.w	r3, r3, #8
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8013576:	9102      	str	r1, [sp, #8]
    SDMMC_ConfigData(hsd->Instance, &config);
 8013578:	4669      	mov	r1, sp
      BlockAdd *= 512U;
 801357a:	bf18      	it	ne
 801357c:	026d      	lslne	r5, r5, #9
    __HAL_SD_DMA_ENABLE(hsd);
 801357e:	62c3      	str	r3, [r0, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8013580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8013584:	9203      	str	r2, [sp, #12]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8013586:	9300      	str	r3, [sp, #0]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8013588:	2300      	movs	r3, #0
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801358a:	f8cd 8004 	str.w	r8, [sp, #4]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 801358e:	e9cd 3704 	strd	r3, r7, [sp, #16]
    SDMMC_ConfigData(hsd->Instance, &config);
 8013592:	f001 fcdb 	bl	8014f4c <SDMMC_ConfigData>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8013596:	f44f 7100 	mov.w	r1, #512	; 0x200
 801359a:	6820      	ldr	r0, [r4, #0]
 801359c:	f001 fcec 	bl	8014f78 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80135a0:	4603      	mov	r3, r0
 80135a2:	b9a8      	cbnz	r0, 80135d0 <HAL_SD_ReadBlocks_DMA+0xf4>
    if(NumberOfBlocks > 1U)
 80135a4:	2e01      	cmp	r6, #1
 80135a6:	6820      	ldr	r0, [r4, #0]
 80135a8:	d91d      	bls.n	80135e6 <HAL_SD_ReadBlocks_DMA+0x10a>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80135aa:	2382      	movs	r3, #130	; 0x82
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80135ac:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80135ae:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80135b0:	f001 fd60 	bl	8015074 <SDMMC_CmdReadMultiBlock>
 80135b4:	4603      	mov	r3, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 80135b6:	b1eb      	cbz	r3, 80135f4 <HAL_SD_ReadBlocks_DMA+0x118>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80135b8:	6822      	ldr	r2, [r4, #0]
 80135ba:	f240 50ff 	movw	r0, #1535	; 0x5ff
      hsd->State = HAL_SD_STATE_READY;
 80135be:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80135c0:	6390      	str	r0, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80135c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      return HAL_ERROR;
 80135c4:	4608      	mov	r0, r1
      hsd->ErrorCode |= errorstate;
 80135c6:	4313      	orrs	r3, r2
 80135c8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80135ca:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      return HAL_ERROR;
 80135ce:	e79b      	b.n	8013508 <HAL_SD_ReadBlocks_DMA+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80135d0:	6822      	ldr	r2, [r4, #0]
 80135d2:	f240 51ff 	movw	r1, #1535	; 0x5ff
      return HAL_ERROR;
 80135d6:	4638      	mov	r0, r7
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80135d8:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80135da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80135dc:	4313      	orrs	r3, r2
 80135de:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80135e0:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
      return HAL_ERROR;
 80135e4:	e790      	b.n	8013508 <HAL_SD_ReadBlocks_DMA+0x2c>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80135e6:	2381      	movs	r3, #129	; 0x81
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80135e8:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80135ea:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80135ec:	f001 fd02 	bl	8014ff4 <SDMMC_CmdReadSingleBlock>
 80135f0:	4603      	mov	r3, r0
 80135f2:	e7e0      	b.n	80135b6 <HAL_SD_ReadBlocks_DMA+0xda>
    return HAL_OK;
 80135f4:	4618      	mov	r0, r3
 80135f6:	e787      	b.n	8013508 <HAL_SD_ReadBlocks_DMA+0x2c>
 80135f8:	0801375d 	.word	0x0801375d
 80135fc:	08013719 	.word	0x08013719

08013600 <HAL_SD_WriteBlocks_DMA>:
{
 8013600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013602:	4604      	mov	r4, r0
 8013604:	b087      	sub	sp, #28
  if(NULL == pData)
 8013606:	2900      	cmp	r1, #0
 8013608:	d043      	beq.n	8013692 <HAL_SD_WriteBlocks_DMA+0x92>
  if(hsd->State == HAL_SD_STATE_READY)
 801360a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 801360e:	b2c0      	uxtb	r0, r0
 8013610:	2801      	cmp	r0, #1
 8013612:	d13b      	bne.n	801368c <HAL_SD_WriteBlocks_DMA+0x8c>
 8013614:	4616      	mov	r6, r2
 8013616:	461f      	mov	r7, r3
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8013618:	18d3      	adds	r3, r2, r3
 801361a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801361c:	460d      	mov	r5, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 801361e:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8013620:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8013622:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8013624:	d848      	bhi.n	80136b8 <HAL_SD_WriteBlocks_DMA+0xb8>
    hsd->Instance->DCTRL = 0U;
 8013626:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8013628:	2203      	movs	r2, #3
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 801362a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hsd->State = HAL_SD_STATE_BUSY;
 801362c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8013630:	62c1      	str	r1, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8013632:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8013634:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 801370c <HAL_SD_WriteBlocks_DMA+0x10c>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8013638:	f042 021a 	orr.w	r2, r2, #26
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 801363c:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8013710 <HAL_SD_WriteBlocks_DMA+0x110>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8013640:	63c2      	str	r2, [r0, #60]	; 0x3c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8013642:	6c62      	ldr	r2, [r4, #68]	; 0x44
    hsd->hdmatx->XferAbortCallback = NULL;
 8013644:	6519      	str	r1, [r3, #80]	; 0x50
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8013646:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801364a:	2a01      	cmp	r2, #1
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 801364c:	f8c3 e03c 	str.w	lr, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8013650:	f8c3 c04c 	str.w	ip, [r3, #76]	; 0x4c
      BlockAdd *= 512U;
 8013654:	bf18      	it	ne
 8013656:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8013658:	f001 fc8e 	bl	8014f78 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 801365c:	4603      	mov	r3, r0
 801365e:	b9f8      	cbnz	r0, 80136a0 <HAL_SD_WriteBlocks_DMA+0xa0>
    if(NumberOfBlocks > 1U)
 8013660:	2f01      	cmp	r7, #1
 8013662:	6820      	ldr	r0, [r4, #0]
 8013664:	d94a      	bls.n	80136fc <HAL_SD_WriteBlocks_DMA+0xfc>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8013666:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8013668:	4631      	mov	r1, r6
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801366a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 801366c:	f001 fd80 	bl	8015170 <SDMMC_CmdWriteMultiBlock>
 8013670:	4606      	mov	r6, r0
 8013672:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013674:	b336      	cbz	r6, 80136c4 <HAL_SD_WriteBlocks_DMA+0xc4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8013676:	f240 53ff 	movw	r3, #1535	; 0x5ff
      hsd->State = HAL_SD_STATE_READY;
 801367a:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 801367c:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 801367e:	4610      	mov	r0, r2
      hsd->ErrorCode |= errorstate;
 8013680:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013682:	431e      	orrs	r6, r3
 8013684:	63a6      	str	r6, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8013686:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      return HAL_ERROR;
 801368a:	e000      	b.n	801368e <HAL_SD_WriteBlocks_DMA+0x8e>
    return HAL_BUSY;
 801368c:	2002      	movs	r0, #2
}
 801368e:	b007      	add	sp, #28
 8013690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8013692:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8013694:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8013696:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801369a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 801369c:	b007      	add	sp, #28
 801369e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80136a0:	6822      	ldr	r2, [r4, #0]
 80136a2:	f240 50ff 	movw	r0, #1535	; 0x5ff
      hsd->State = HAL_SD_STATE_READY;
 80136a6:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80136a8:	6390      	str	r0, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80136aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      return HAL_ERROR;
 80136ac:	4608      	mov	r0, r1
      hsd->ErrorCode |= errorstate;
 80136ae:	4313      	orrs	r3, r2
 80136b0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80136b2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      return HAL_ERROR;
 80136b6:	e7ea      	b.n	801368e <HAL_SD_WriteBlocks_DMA+0x8e>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80136b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80136ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80136be:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80136c0:	b007      	add	sp, #28
 80136c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_SD_DMA_ENABLE(hsd);
 80136c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80136c6:	4629      	mov	r1, r5
 80136c8:	027f      	lsls	r7, r7, #9
 80136ca:	f100 0280 	add.w	r2, r0, #128	; 0x80
    __HAL_SD_DMA_ENABLE(hsd);
 80136ce:	f043 0508 	orr.w	r5, r3, #8
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80136d2:	08bb      	lsrs	r3, r7, #2
    __HAL_SD_DMA_ENABLE(hsd);
 80136d4:	62c5      	str	r5, [r0, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80136d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80136da:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80136dc:	f7fc f8a8 	bl	800f830 <HAL_DMA_Start_IT>
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80136e0:	2290      	movs	r2, #144	; 0x90
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80136e2:	2301      	movs	r3, #1
    SDMMC_ConfigData(hsd->Instance, &config);
 80136e4:	6820      	ldr	r0, [r4, #0]
 80136e6:	4669      	mov	r1, sp
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80136e8:	9701      	str	r7, [sp, #4]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80136ea:	9500      	str	r5, [sp, #0]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80136ec:	9202      	str	r2, [sp, #8]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80136ee:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80136f0:	e9cd 6603 	strd	r6, r6, [sp, #12]
    SDMMC_ConfigData(hsd->Instance, &config);
 80136f4:	f001 fc2a 	bl	8014f4c <SDMMC_ConfigData>
    return HAL_OK;
 80136f8:	4630      	mov	r0, r6
 80136fa:	e7c8      	b.n	801368e <HAL_SD_WriteBlocks_DMA+0x8e>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80136fc:	2390      	movs	r3, #144	; 0x90
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80136fe:	4631      	mov	r1, r6
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8013700:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8013702:	f001 fcf7 	bl	80150f4 <SDMMC_CmdWriteSingleBlock>
 8013706:	4606      	mov	r6, r0
 8013708:	e7b3      	b.n	8013672 <HAL_SD_WriteBlocks_DMA+0x72>
 801370a:	bf00      	nop
 801370c:	080133ed 	.word	0x080133ed
 8013710:	0801375d 	.word	0x0801375d

08013714 <HAL_SD_ErrorCallback>:
 8013714:	4770      	bx	lr
 8013716:	bf00      	nop

08013718 <SD_DMAReceiveCplt>:
{
 8013718:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801371a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 801371c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801371e:	6823      	ldr	r3, [r4, #0]
 8013720:	2a82      	cmp	r2, #130	; 0x82
 8013722:	d00d      	beq.n	8013740 <SD_DMAReceiveCplt+0x28>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8013724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8013726:	f240 55ff 	movw	r5, #1535	; 0x5ff
  hsd->State = HAL_SD_STATE_READY;
 801372a:	2101      	movs	r1, #1
  HAL_SD_RxCpltCallback(hsd);
 801372c:	4620      	mov	r0, r4
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 801372e:	f022 0208 	bic.w	r2, r2, #8
 8013732:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8013734:	639d      	str	r5, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8013736:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  HAL_SD_RxCpltCallback(hsd);
 801373a:	f7ef f8af 	bl	800289c <HAL_SD_RxCpltCallback>
}
 801373e:	bd38      	pop	{r3, r4, r5, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8013740:	4618      	mov	r0, r3
 8013742:	f001 fd55 	bl	80151f0 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8013746:	4603      	mov	r3, r0
 8013748:	b908      	cbnz	r0, 801374e <SD_DMAReceiveCplt+0x36>
 801374a:	6823      	ldr	r3, [r4, #0]
 801374c:	e7ea      	b.n	8013724 <SD_DMAReceiveCplt+0xc>
      hsd->ErrorCode |= errorstate;
 801374e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8013750:	4620      	mov	r0, r4
      hsd->ErrorCode |= errorstate;
 8013752:	4313      	orrs	r3, r2
 8013754:	63a3      	str	r3, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8013756:	f7ff ffdd 	bl	8013714 <HAL_SD_ErrorCallback>
 801375a:	e7f6      	b.n	801374a <SD_DMAReceiveCplt+0x32>

0801375c <SD_DMAError>:
{
 801375c:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801375e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8013760:	f7fc f9ca 	bl	800faf8 <HAL_DMA_GetError>
 8013764:	2802      	cmp	r0, #2
 8013766:	d00a      	beq.n	801377e <SD_DMAError+0x22>
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 8013768:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801376a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801376c:	2b01      	cmp	r3, #1
 801376e:	d007      	beq.n	8013780 <SD_DMAError+0x24>
 8013770:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013774:	2b01      	cmp	r3, #1
 8013776:	d003      	beq.n	8013780 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8013778:	4620      	mov	r0, r4
 801377a:	f7ff ffcb 	bl	8013714 <HAL_SD_ErrorCallback>
}
 801377e:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8013780:	6823      	ldr	r3, [r4, #0]
 8013782:	f240 52ff 	movw	r2, #1535	; 0x5ff
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8013786:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8013788:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 801378a:	4618      	mov	r0, r3
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 801378c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 801378e:	0409      	lsls	r1, r1, #16
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8013790:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8013794:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8013796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013798:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801379c:	63a3      	str	r3, [r4, #56]	; 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 801379e:	f001 ffdd 	bl	801575c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 80137a2:	b148      	cbz	r0, 80137b8 <SD_DMAError+0x5c>
    hsd->ErrorCode |= errorstate;
 80137a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80137a6:	4308      	orrs	r0, r1
 80137a8:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80137aa:	2301      	movs	r3, #1
    HAL_SD_ErrorCallback(hsd);
 80137ac:	4620      	mov	r0, r4
      hsd->State= HAL_SD_STATE_READY;
 80137ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    HAL_SD_ErrorCallback(hsd);
 80137b2:	f7ff ffaf 	bl	8013714 <HAL_SD_ErrorCallback>
 80137b6:	e7e2      	b.n	801377e <SD_DMAError+0x22>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80137b8:	4601      	mov	r1, r0
 80137ba:	6820      	ldr	r0, [r4, #0]
 80137bc:	f001 fbbc 	bl	8014f38 <SDMMC_GetResponse>
  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 80137c0:	f3c0 2043 	ubfx	r0, r0, #9, #4
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80137c4:	3805      	subs	r0, #5
 80137c6:	2801      	cmp	r0, #1
 80137c8:	d8ef      	bhi.n	80137aa <SD_DMAError+0x4e>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80137ca:	6820      	ldr	r0, [r4, #0]
 80137cc:	f001 fd10 	bl	80151f0 <SDMMC_CmdStopTransfer>
 80137d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80137d2:	4318      	orrs	r0, r3
 80137d4:	63a0      	str	r0, [r4, #56]	; 0x38
 80137d6:	e7e8      	b.n	80137aa <SD_DMAError+0x4e>

080137d8 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 80137d8:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 80137da:	0f9a      	lsrs	r2, r3, #30
{
 80137dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 80137de:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 80137e0:	f3c3 6783 	ubfx	r7, r3, #26, #4
  pCSD->Reserved1      = tmp & 0x03;
 80137e4:	f3c3 6501 	ubfx	r5, r3, #24, #2
  pCSD->TAAC = (uint8_t)tmp;
 80137e8:	f3c3 4407 	ubfx	r4, r3, #16, #8
  pCSD->NSAC = (uint8_t)tmp;
 80137ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80137f0:	b2db      	uxtb	r3, r3
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 80137f2:	704f      	strb	r7, [r1, #1]
  pCSD->Reserved2       = 0; /*!< Reserved */
 80137f4:	2600      	movs	r6, #0
  pCSD->Reserved1      = tmp & 0x03;
 80137f6:	708d      	strb	r5, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 80137f8:	70cc      	strb	r4, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 80137fa:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80137fc:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 80137fe:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8013800:	0e1d      	lsrs	r5, r3, #24
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8013802:	f3c3 5403 	ubfx	r4, r3, #20, #4
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8013806:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 801380a:	012d      	lsls	r5, r5, #4
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 801380c:	ea4f 1cd2 	mov.w	ip, r2, lsr #7
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8013810:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8013812:	f3c3 4503 	ubfx	r5, r3, #16, #4
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8013816:	88cf      	ldrh	r7, [r1, #6]
 8013818:	433c      	orrs	r4, r7
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 801381a:	f3c2 1780 	ubfx	r7, r2, #6, #1
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 801381e:	80cc      	strh	r4, [r1, #6]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8013820:	f3c2 1400 	ubfx	r4, r2, #4, #1
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8013824:	720d      	strb	r5, [r1, #8]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8013826:	f3c2 1540 	ubfx	r5, r2, #5, #1
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 801382a:	f881 c009 	strb.w	ip, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 801382e:	728f      	strb	r7, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8013830:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8013832:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8013834:	734e      	strb	r6, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8013836:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8013838:	2c00      	cmp	r4, #0
 801383a:	f040 8088 	bne.w	801394e <HAL_SD_GetCardCSD+0x176>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 801383e:	0292      	lsls	r2, r2, #10
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8013840:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp) << 2;
 8013842:	009b      	lsls	r3, r3, #2
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8013844:	2501      	movs	r5, #1
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8013846:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 801384a:	0be6      	lsrs	r6, r4, #15
    pCSD->DeviceSize |= (tmp) << 2;
 801384c:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8013850:	f3c4 6c02 	ubfx	ip, r4, #24, #3
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8013854:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8013856:	f006 0606 	and.w	r6, r6, #6
    pCSD->DeviceSize |= (tmp) << 2;
 801385a:	690a      	ldr	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 801385c:	f3c4 5742 	ubfx	r7, r4, #21, #3
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8013860:	f3c4 6ec2 	ubfx	lr, r4, #27, #3
    pCSD->DeviceSize |= (tmp) << 2;
 8013864:	431a      	orrs	r2, r3
 8013866:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8013868:	f3c4 4282 	ubfx	r2, r4, #18, #3
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 801386c:	690b      	ldr	r3, [r1, #16]
 801386e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8013872:	610b      	str	r3, [r1, #16]
 8013874:	f3c4 2307 	ubfx	r3, r4, #8, #8
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8013878:	f881 e014 	strb.w	lr, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 801387c:	f881 c015 	strb.w	ip, [r1, #21]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8013880:	f3c4 3cc0 	ubfx	ip, r4, #15, #1
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8013884:	758f      	strb	r7, [r1, #22]
    hsd->SdCard.LogBlockSize = 512;
 8013886:	f44f 7700 	mov.w	r7, #512	; 0x200
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 801388a:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 801388c:	760e      	strb	r6, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 801388e:	7e0a      	ldrb	r2, [r1, #24]
 8013890:	ea42 020c 	orr.w	r2, r2, ip
 8013894:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8013896:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8013898:	7e0e      	ldrb	r6, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 801389a:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 801389c:	3602      	adds	r6, #2
 801389e:	40b2      	lsls	r2, r6
 80138a0:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80138a2:	7a0e      	ldrb	r6, [r1, #8]
    hsd->SdCard.LogBlockSize = 512;
 80138a4:	6607      	str	r7, [r0, #96]	; 0x60
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80138a6:	40b5      	lsls	r5, r6
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 80138a8:	0a6e      	lsrs	r6, r5, #9
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80138aa:	6585      	str	r5, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 80138ac:	fb02 f206 	mul.w	r2, r2, r6
 80138b0:	65c2      	str	r2, [r0, #92]	; 0x5c
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80138b2:	005d      	lsls	r5, r3, #1
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80138b4:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80138b8:	f3c4 17c0 	ubfx	r7, r4, #7, #1
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 80138bc:	f004 037f 	and.w	r3, r4, #127	; 0x7f
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80138c0:	f005 047e 	and.w	r4, r5, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80138c4:	764a      	strb	r2, [r1, #25]
  pCSD->Reserved3           = 0;
 80138c6:	2500      	movs	r5, #0
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80138c8:	768c      	strb	r4, [r1, #26]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80138ca:	7e8a      	ldrb	r2, [r1, #26]
  return HAL_OK;
 80138cc:	462e      	mov	r6, r5
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80138ce:	433a      	orrs	r2, r7
  pCSD->Reserved4 = 1;
 80138d0:	2701      	movs	r7, #1
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80138d2:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 80138d4:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 80138d6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 80138d8:	0fda      	lsrs	r2, r3, #31
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 80138da:	f3c3 7041 	ubfx	r0, r3, #29, #2
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80138de:	0d9c      	lsrs	r4, r3, #22
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80138e0:	f3c3 5c40 	ubfx	ip, r3, #21, #1
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 80138e4:	770a      	strb	r2, [r1, #28]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 80138e6:	f3c3 6282 	ubfx	r2, r3, #26, #3
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80138ea:	f004 040c 	and.w	r4, r4, #12
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 80138ee:	7748      	strb	r0, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 80138f0:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80138f2:	f3c3 5081 	ubfx	r0, r3, #22, #2
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80138f6:	77cc      	strb	r4, [r1, #31]
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80138f8:	f3c3 4400 	ubfx	r4, r3, #16, #1
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80138fc:	7fca      	ldrb	r2, [r1, #31]
 80138fe:	4302      	orrs	r2, r0
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8013900:	f3c3 30c0 	ubfx	r0, r3, #15, #1
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8013904:	77ca      	strb	r2, [r1, #31]
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8013906:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 801390a:	f881 c020 	strb.w	ip, [r1, #32]
  pCSD->Reserved3           = 0;
 801390e:	f881 5021 	strb.w	r5, [r1, #33]	; 0x21
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8013912:	f3c3 3540 	ubfx	r5, r3, #13, #1
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8013916:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 801391a:	f3c3 3400 	ubfx	r4, r3, #12, #1
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 801391e:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8013922:	f3c3 2081 	ubfx	r0, r3, #10, #2
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8013926:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC              = (tmp & 0x03);
 801392a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 801392e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8013932:	f881 5025 	strb.w	r5, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8013936:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 801393a:	f881 0027 	strb.w	r0, [r1, #39]	; 0x27
}
 801393e:	4630      	mov	r0, r6
  pCSD->ECC              = (tmp & 0x03);
 8013940:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8013944:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8013948:	f881 702a 	strb.w	r7, [r1, #42]	; 0x2a
}
 801394c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801394e:	2c01      	cmp	r4, #1
 8013950:	d00d      	beq.n	801396e <HAL_SD_GetCardCSD+0x196>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8013952:	6803      	ldr	r3, [r0, #0]
 8013954:	f240 51ff 	movw	r1, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 8013958:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 801395a:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801395c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 801395e:	4616      	mov	r6, r2
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013964:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8013966:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 801396a:	4630      	mov	r0, r6
 801396c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 801396e:	041a      	lsls	r2, r3, #16
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8013970:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8013972:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8013976:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 801397a:	0e23      	lsrs	r3, r4, #24
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 801397c:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 801397e:	f3c4 4207 	ubfx	r2, r4, #16, #8
    pCSD->DeviceSize |= (tmp << 8);
 8013982:	690d      	ldr	r5, [r1, #16]
 8013984:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 8013988:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801398c:	610d      	str	r5, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 801398e:	690d      	ldr	r5, [r1, #16]
 8013990:	432a      	orrs	r2, r5
 8013992:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8013994:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8013996:	6586      	str	r6, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8013998:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 801399a:	6606      	str	r6, [r0, #96]	; 0x60
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 801399c:	0292      	lsls	r2, r2, #10
 801399e:	6542      	str	r2, [r0, #84]	; 0x54
 80139a0:	65c2      	str	r2, [r0, #92]	; 0x5c
 80139a2:	e786      	b.n	80138b2 <HAL_SD_GetCardCSD+0xda>

080139a4 <HAL_SD_InitCard>:
{
 80139a4:	b570      	push	{r4, r5, r6, lr}
 80139a6:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80139a8:	2500      	movs	r5, #0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80139aa:	2176      	movs	r1, #118	; 0x76
{
 80139ac:	4604      	mov	r4, r0
  SDMMC_Init(hsd->Instance, Init);
 80139ae:	aa0a      	add	r2, sp, #40	; 0x28
 80139b0:	6806      	ldr	r6, [r0, #0]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80139b2:	950a      	str	r5, [sp, #40]	; 0x28
  SDMMC_Init(hsd->Instance, Init);
 80139b4:	ab07      	add	r3, sp, #28
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80139b6:	9509      	str	r5, [sp, #36]	; 0x24
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80139b8:	e9cd 510b 	strd	r5, r1, [sp, #44]	; 0x2c
  SDMMC_Init(hsd->Instance, Init);
 80139bc:	ca07      	ldmia	r2, {r0, r1, r2}
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80139be:	e9cd 5507 	strd	r5, r5, [sp, #28]
  SDMMC_Init(hsd->Instance, Init);
 80139c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80139c6:	4630      	mov	r0, r6
 80139c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80139ca:	f001 fa8b 	bl	8014ee4 <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 80139ce:	6823      	ldr	r3, [r4, #0]
 80139d0:	685a      	ldr	r2, [r3, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 80139d2:	4618      	mov	r0, r3
  __HAL_SD_DISABLE(hsd); 
 80139d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80139d8:	605a      	str	r2, [r3, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 80139da:	f001 faa3 	bl	8014f24 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80139de:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 80139e0:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 80139e2:	6853      	ldr	r3, [r2, #4]
 80139e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80139e8:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 80139ea:	f7fb fb87 	bl	800f0fc <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80139ee:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 80139f0:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80139f2:	f001 fc7b 	bl	80152ec <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80139f6:	4605      	mov	r5, r0
 80139f8:	b138      	cbz	r0, 8013a0a <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 80139fa:	2001      	movs	r0, #1
 80139fc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8013a00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013a02:	431d      	orrs	r5, r3
 8013a04:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8013a06:	b018      	add	sp, #96	; 0x60
 8013a08:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8013a0a:	6820      	ldr	r0, [r4, #0]
 8013a0c:	f001 fc9a 	bl	8015344 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8013a10:	2800      	cmp	r0, #0
 8013a12:	d04b      	beq.n	8013aac <HAL_SD_InitCard+0x108>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8013a14:	f64f 76ff 	movw	r6, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V1_X;
 8013a18:	64a5      	str	r5, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8013a1a:	9b06      	ldr	r3, [sp, #24]
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8013a1c:	2100      	movs	r1, #0
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8013a1e:	1c5a      	adds	r2, r3, #1
 8013a20:	42b3      	cmp	r3, r6
 8013a22:	9206      	str	r2, [sp, #24]
 8013a24:	f000 80b5 	beq.w	8013b92 <HAL_SD_InitCard+0x1ee>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8013a28:	6820      	ldr	r0, [r4, #0]
 8013a2a:	f001 fccb 	bl	80153c4 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8013a2e:	2800      	cmp	r0, #0
 8013a30:	f040 80b2 	bne.w	8013b98 <HAL_SD_InitCard+0x1f4>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8013a34:	4601      	mov	r1, r0
 8013a36:	6820      	ldr	r0, [r4, #0]
 8013a38:	f001 fd04 	bl	8015444 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8013a3c:	2800      	cmp	r0, #0
 8013a3e:	f040 80ab 	bne.w	8013b98 <HAL_SD_InitCard+0x1f4>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8013a42:	4601      	mov	r1, r0
 8013a44:	6820      	ldr	r0, [r4, #0]
 8013a46:	f001 fa77 	bl	8014f38 <SDMMC_GetResponse>
    while(validvoltage == 0)
 8013a4a:	2800      	cmp	r0, #0
 8013a4c:	dae5      	bge.n	8013a1a <HAL_SD_InitCard+0x76>
    hsd->SdCard.CardType = CARD_SDSC;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	6463      	str	r3, [r4, #68]	; 0x44
  uint16_t sd_rca = 1;
 8013a52:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8013a54:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 8013a56:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8013a5a:	f001 fa69 	bl	8014f30 <SDMMC_GetPowerState>
 8013a5e:	2800      	cmp	r0, #0
 8013a60:	f000 8094 	beq.w	8013b8c <HAL_SD_InitCard+0x1e8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8013a64:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8013a66:	6823      	ldr	r3, [r4, #0]
 8013a68:	2a03      	cmp	r2, #3
 8013a6a:	d142      	bne.n	8013af2 <HAL_SD_InitCard+0x14e>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	2104      	movs	r1, #4
 8013a70:	f001 fa62 	bl	8014f38 <SDMMC_GetResponse>
  HAL_SD_GetCardCSD(hsd, &CSD);
 8013a74:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8013a76:	0d03      	lsrs	r3, r0, #20
  HAL_SD_GetCardCSD(hsd, &CSD);
 8013a78:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8013a7a:	64e3      	str	r3, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8013a7c:	f7ff feac 	bl	80137d8 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8013a80:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8013a82:	2300      	movs	r3, #0
 8013a84:	6820      	ldr	r0, [r4, #0]
 8013a86:	0412      	lsls	r2, r2, #16
 8013a88:	f001 fbf0 	bl	801526c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8013a8c:	4605      	mov	r5, r0
 8013a8e:	2800      	cmp	r0, #0
 8013a90:	d1b3      	bne.n	80139fa <HAL_SD_InitCard+0x56>
  SDMMC_Init(hsd->Instance, hsd->Init);
 8013a92:	1d23      	adds	r3, r4, #4
 8013a94:	f854 6b10 	ldr.w	r6, [r4], #16
 8013a98:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013a9c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013aa0:	4630      	mov	r0, r6
 8013aa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013aa4:	f001 fa1e 	bl	8014ee4 <SDMMC_Init>
  return HAL_OK;
 8013aa8:	4628      	mov	r0, r5
 8013aaa:	e7ac      	b.n	8013a06 <HAL_SD_InitCard+0x62>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8013aac:	2301      	movs	r3, #1
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8013aae:	f64f 76ff 	movw	r6, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V2_X;
 8013ab2:	64a3      	str	r3, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8013ab4:	9b06      	ldr	r3, [sp, #24]
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8013ab6:	2100      	movs	r1, #0
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8013ab8:	1c5a      	adds	r2, r3, #1
 8013aba:	42b3      	cmp	r3, r6
 8013abc:	9206      	str	r2, [sp, #24]
 8013abe:	d068      	beq.n	8013b92 <HAL_SD_InitCard+0x1ee>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8013ac0:	6820      	ldr	r0, [r4, #0]
 8013ac2:	f001 fc7f 	bl	80153c4 <SDMMC_CmdAppCommand>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8013ac6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      if(errorstate != HAL_SD_ERROR_NONE)
 8013aca:	4605      	mov	r5, r0
 8013acc:	2800      	cmp	r0, #0
 8013ace:	d194      	bne.n	80139fa <HAL_SD_InitCard+0x56>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8013ad0:	6820      	ldr	r0, [r4, #0]
 8013ad2:	f001 fcb7 	bl	8015444 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8013ad6:	4605      	mov	r5, r0
 8013ad8:	2800      	cmp	r0, #0
 8013ada:	d18e      	bne.n	80139fa <HAL_SD_InitCard+0x56>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8013adc:	4601      	mov	r1, r0
 8013ade:	6820      	ldr	r0, [r4, #0]
 8013ae0:	f001 fa2a 	bl	8014f38 <SDMMC_GetResponse>
    while(validvoltage == 0)
 8013ae4:	2800      	cmp	r0, #0
 8013ae6:	dae5      	bge.n	8013ab4 <HAL_SD_InitCard+0x110>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8013ae8:	0043      	lsls	r3, r0, #1
 8013aea:	d5b0      	bpl.n	8013a4e <HAL_SD_InitCard+0xaa>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8013aec:	2301      	movs	r3, #1
 8013aee:	6463      	str	r3, [r4, #68]	; 0x44
 8013af0:	e7af      	b.n	8013a52 <HAL_SD_InitCard+0xae>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8013af2:	4618      	mov	r0, r3
 8013af4:	f001 fd5e 	bl	80155b4 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8013af8:	4605      	mov	r5, r0
 8013afa:	2800      	cmp	r0, #0
 8013afc:	f47f af7d 	bne.w	80139fa <HAL_SD_InitCard+0x56>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8013b00:	4601      	mov	r1, r0
 8013b02:	6820      	ldr	r0, [r4, #0]
 8013b04:	f001 fa18 	bl	8014f38 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8013b08:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8013b0a:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8013b0c:	6820      	ldr	r0, [r4, #0]
 8013b0e:	f001 fa13 	bl	8014f38 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8013b12:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8013b14:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8013b16:	6820      	ldr	r0, [r4, #0]
 8013b18:	f001 fa0e 	bl	8014f38 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8013b1c:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8013b1e:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8013b20:	6820      	ldr	r0, [r4, #0]
 8013b22:	f001 fa09 	bl	8014f38 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8013b26:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8013b28:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8013b2c:	2b03      	cmp	r3, #3
 8013b2e:	d036      	beq.n	8013b9e <HAL_SD_InitCard+0x1fa>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8013b30:	f10d 0116 	add.w	r1, sp, #22
 8013b34:	6820      	ldr	r0, [r4, #0]
 8013b36:	f001 fdb1 	bl	801569c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8013b3a:	4605      	mov	r5, r0
 8013b3c:	2800      	cmp	r0, #0
 8013b3e:	f47f af5c 	bne.w	80139fa <HAL_SD_InitCard+0x56>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8013b42:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8013b44:	6823      	ldr	r3, [r4, #0]
 8013b46:	2a03      	cmp	r2, #3
 8013b48:	d090      	beq.n	8013a6c <HAL_SD_InitCard+0xc8>
    hsd->SdCard.RelCardAdd = sd_rca;
 8013b4a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8013b4e:	4618      	mov	r0, r3
    hsd->SdCard.RelCardAdd = sd_rca;
 8013b50:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8013b52:	0409      	lsls	r1, r1, #16
 8013b54:	f001 fd68 	bl	8015628 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8013b58:	4605      	mov	r5, r0
 8013b5a:	2800      	cmp	r0, #0
 8013b5c:	f47f af4d 	bne.w	80139fa <HAL_SD_InitCard+0x56>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8013b60:	4601      	mov	r1, r0
 8013b62:	6820      	ldr	r0, [r4, #0]
 8013b64:	f001 f9e8 	bl	8014f38 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8013b68:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8013b6a:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8013b6c:	6820      	ldr	r0, [r4, #0]
 8013b6e:	f001 f9e3 	bl	8014f38 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8013b72:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8013b74:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8013b76:	6820      	ldr	r0, [r4, #0]
 8013b78:	f001 f9de 	bl	8014f38 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8013b7c:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8013b7e:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8013b80:	6820      	ldr	r0, [r4, #0]
 8013b82:	f001 f9d9 	bl	8014f38 <SDMMC_GetResponse>
 8013b86:	6823      	ldr	r3, [r4, #0]
 8013b88:	6720      	str	r0, [r4, #112]	; 0x70
 8013b8a:	e76f      	b.n	8013a6c <HAL_SD_InitCard+0xc8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8013b8c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8013b90:	e733      	b.n	80139fa <HAL_SD_InitCard+0x56>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8013b92:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8013b96:	e730      	b.n	80139fa <HAL_SD_InitCard+0x56>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013b98:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8013b9c:	e72d      	b.n	80139fa <HAL_SD_InitCard+0x56>
 8013b9e:	6823      	ldr	r3, [r4, #0]
 8013ba0:	e764      	b.n	8013a6c <HAL_SD_InitCard+0xc8>
 8013ba2:	bf00      	nop

08013ba4 <HAL_SD_Init>:
  if(hsd == NULL)
 8013ba4:	b1c0      	cbz	r0, 8013bd8 <HAL_SD_Init+0x34>
  if(hsd->State == HAL_SD_STATE_RESET)
 8013ba6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8013baa:	b510      	push	{r4, lr}
  if(hsd->State == HAL_SD_STATE_RESET)
 8013bac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8013bb0:	4604      	mov	r4, r0
 8013bb2:	b16b      	cbz	r3, 8013bd0 <HAL_SD_Init+0x2c>
  hsd->State = HAL_SD_STATE_BUSY;
 8013bb4:	2303      	movs	r3, #3
  HAL_SD_InitCard(hsd);
 8013bb6:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8013bb8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8013bbc:	f7ff fef2 	bl	80139a4 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8013bc0:	2300      	movs	r3, #0
  hsd->State = HAL_SD_STATE_READY;
 8013bc2:	2201      	movs	r2, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8013bc4:	63a3      	str	r3, [r4, #56]	; 0x38
  return HAL_OK;
 8013bc6:	4618      	mov	r0, r3
  hsd->Context = SD_CONTEXT_NONE;
 8013bc8:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8013bca:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8013bce:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8013bd0:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8013bd2:	f7f7 fac9 	bl	800b168 <HAL_SD_MspInit>
 8013bd6:	e7ed      	b.n	8013bb4 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 8013bd8:	2001      	movs	r0, #1
}
 8013bda:	4770      	bx	lr

08013bdc <HAL_SD_GetCardInfo>:
{
 8013bdc:	4603      	mov	r3, r0
}
 8013bde:	2000      	movs	r0, #0
{
 8013be0:	b430      	push	{r4, r5}
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8013be2:	e9d3 2511 	ldrd	r2, r5, [r3, #68]	; 0x44
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8013be6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8013be8:	600a      	str	r2, [r1, #0]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8013bea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8013bec:	604d      	str	r5, [r1, #4]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8013bee:	6d5d      	ldr	r5, [r3, #84]	; 0x54
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8013bf0:	608c      	str	r4, [r1, #8]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8013bf2:	6d9c      	ldr	r4, [r3, #88]	; 0x58
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8013bf4:	60ca      	str	r2, [r1, #12]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8013bf6:	e9d3 2317 	ldrd	r2, r3, [r3, #92]	; 0x5c
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8013bfa:	e9c1 5404 	strd	r5, r4, [r1, #16]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8013bfe:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8013c02:	bc30      	pop	{r4, r5}
 8013c04:	4770      	bx	lr
 8013c06:	bf00      	nop

08013c08 <HAL_SD_ConfigWideBusOperation>:
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8013c08:	6c42      	ldr	r2, [r0, #68]	; 0x44
  hsd->State = HAL_SD_STATE_BUSY;
 8013c0a:	2303      	movs	r3, #3
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8013c0c:	2a03      	cmp	r2, #3
{
 8013c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8013c10:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8013c14:	b08b      	sub	sp, #44	; 0x2c
 8013c16:	4604      	mov	r4, r0
 8013c18:	460e      	mov	r6, r1
 8013c1a:	6803      	ldr	r3, [r0, #0]
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8013c1c:	d029      	beq.n	8013c72 <HAL_SD_ConfigWideBusOperation+0x6a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8013c1e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8013c22:	d026      	beq.n	8013c72 <HAL_SD_ConfigWideBusOperation+0x6a>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8013c24:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8013c28:	d052      	beq.n	8013cd0 <HAL_SD_ConfigWideBusOperation+0xc8>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8013c2a:	2900      	cmp	r1, #0
 8013c2c:	d031      	beq.n	8013c92 <HAL_SD_ConfigWideBusOperation+0x8a>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8013c2e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8013c30:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8013c34:	6382      	str	r2, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8013c36:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8013c38:	bb15      	cbnz	r5, 8013c80 <HAL_SD_ConfigWideBusOperation+0x78>
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8013c3a:	69a2      	ldr	r2, [r4, #24]
    SDMMC_Init(hsd->Instance, Init);
 8013c3c:	af04      	add	r7, sp, #16
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8013c3e:	6961      	ldr	r1, [r4, #20]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8013c40:	9209      	str	r2, [sp, #36]	; 0x24
    SDMMC_Init(hsd->Instance, Init);
 8013c42:	aa0a      	add	r2, sp, #40	; 0x28
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8013c44:	e9cd 6107 	strd	r6, r1, [sp, #28]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8013c48:	6866      	ldr	r6, [r4, #4]
    SDMMC_Init(hsd->Instance, Init);
 8013c4a:	e912 0007 	ldmdb	r2, {r0, r1, r2}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8013c4e:	9604      	str	r6, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8013c50:	68a6      	ldr	r6, [r4, #8]
    SDMMC_Init(hsd->Instance, Init);
 8013c52:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8013c56:	68e2      	ldr	r2, [r4, #12]
    SDMMC_Init(hsd->Instance, Init);
 8013c58:	4618      	mov	r0, r3
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8013c5a:	e9cd 6205 	strd	r6, r2, [sp, #20]
    SDMMC_Init(hsd->Instance, Init);
 8013c5e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8013c62:	f001 f93f 	bl	8014ee4 <SDMMC_Init>
  return HAL_OK;
 8013c66:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8013c68:	2301      	movs	r3, #1
 8013c6a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8013c6e:	b00b      	add	sp, #44	; 0x2c
 8013c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013c72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013c74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8013c78:	63a2      	str	r2, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8013c7a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8013c7c:	2d00      	cmp	r5, #0
 8013c7e:	d0dc      	beq.n	8013c3a <HAL_SD_ConfigWideBusOperation+0x32>
    hsd->State = HAL_SD_STATE_READY;
 8013c80:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8013c82:	f240 51ff 	movw	r1, #1535	; 0x5ff
    return HAL_ERROR;
 8013c86:	4610      	mov	r0, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8013c88:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8013c8a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8013c8e:	b00b      	add	sp, #44	; 0x2c
 8013c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8013c92:	4618      	mov	r0, r3
  uint32_t scr[2] = {0, 0};
 8013c94:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8013c98:	f001 f94e 	bl	8014f38 <SDMMC_GetResponse>
 8013c9c:	0181      	lsls	r1, r0, #6
 8013c9e:	d420      	bmi.n	8013ce2 <HAL_SD_ConfigWideBusOperation+0xda>
  errorstate = SD_FindSCR(hsd, scr);
 8013ca0:	a904      	add	r1, sp, #16
 8013ca2:	4620      	mov	r0, r4
 8013ca4:	f7ff fbaa 	bl	80133fc <SD_FindSCR>
  if(errorstate != HAL_OK)
 8013ca8:	b968      	cbnz	r0, 8013cc6 <HAL_SD_ConfigWideBusOperation+0xbe>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8013caa:	9a05      	ldr	r2, [sp, #20]
 8013cac:	6823      	ldr	r3, [r4, #0]
 8013cae:	03d2      	lsls	r2, r2, #15
 8013cb0:	d531      	bpl.n	8013d16 <HAL_SD_ConfigWideBusOperation+0x10e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8013cb2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	0409      	lsls	r1, r1, #16
 8013cb8:	f001 fb84 	bl	80153c4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8013cbc:	b918      	cbnz	r0, 8013cc6 <HAL_SD_ConfigWideBusOperation+0xbe>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8013cbe:	4601      	mov	r1, r0
 8013cc0:	6820      	ldr	r0, [r4, #0]
 8013cc2:	f001 fbf7 	bl	80154b4 <SDMMC_CmdBusWidth>
 8013cc6:	6823      	ldr	r3, [r4, #0]
      hsd->ErrorCode |= errorstate;
 8013cc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013cca:	4310      	orrs	r0, r2
 8013ccc:	63a0      	str	r0, [r4, #56]	; 0x38
 8013cce:	e7d4      	b.n	8013c7a <HAL_SD_ConfigWideBusOperation+0x72>
  uint32_t scr[2] = {0, 0};
 8013cd0:	2200      	movs	r2, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	4611      	mov	r1, r2
  uint32_t scr[2] = {0, 0};
 8013cd6:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8013cda:	f001 f92d 	bl	8014f38 <SDMMC_GetResponse>
 8013cde:	0185      	lsls	r5, r0, #6
 8013ce0:	d503      	bpl.n	8013cea <HAL_SD_ConfigWideBusOperation+0xe2>
 8013ce2:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8013ce4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013ce8:	e7ee      	b.n	8013cc8 <HAL_SD_ConfigWideBusOperation+0xc0>
  errorstate = SD_FindSCR(hsd, scr);
 8013cea:	a904      	add	r1, sp, #16
 8013cec:	4620      	mov	r0, r4
 8013cee:	f7ff fb85 	bl	80133fc <SD_FindSCR>
  if(errorstate != HAL_OK)
 8013cf2:	2800      	cmp	r0, #0
 8013cf4:	d1e7      	bne.n	8013cc6 <HAL_SD_ConfigWideBusOperation+0xbe>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8013cf6:	9a05      	ldr	r2, [sp, #20]
 8013cf8:	6823      	ldr	r3, [r4, #0]
 8013cfa:	0350      	lsls	r0, r2, #13
 8013cfc:	d50b      	bpl.n	8013d16 <HAL_SD_ConfigWideBusOperation+0x10e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8013cfe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8013d00:	4618      	mov	r0, r3
 8013d02:	0409      	lsls	r1, r1, #16
 8013d04:	f001 fb5e 	bl	80153c4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	d1dc      	bne.n	8013cc6 <HAL_SD_ConfigWideBusOperation+0xbe>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8013d0c:	2102      	movs	r1, #2
 8013d0e:	6820      	ldr	r0, [r4, #0]
 8013d10:	f001 fbd0 	bl	80154b4 <SDMMC_CmdBusWidth>
 8013d14:	e7d7      	b.n	8013cc6 <HAL_SD_ConfigWideBusOperation+0xbe>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8013d16:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8013d1a:	e7d5      	b.n	8013cc8 <HAL_SD_ConfigWideBusOperation+0xc0>

08013d1c <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8013d1c:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8013d1e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8013d20:	0409      	lsls	r1, r1, #16
{
 8013d22:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8013d24:	6800      	ldr	r0, [r0, #0]
 8013d26:	f001 fd19 	bl	801575c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8013d2a:	4601      	mov	r1, r0
 8013d2c:	b120      	cbz	r0, 8013d38 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8013d2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013d30:	2000      	movs	r0, #0
 8013d32:	4319      	orrs	r1, r3
 8013d34:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8013d36:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8013d38:	6820      	ldr	r0, [r4, #0]
 8013d3a:	f001 f8fd 	bl	8014f38 <SDMMC_GetResponse>
 8013d3e:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8013d42:	bd10      	pop	{r4, pc}

08013d44 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8013d44:	b1e8      	cbz	r0, 8013d82 <HAL_SDRAM_Init+0x3e>
{   
 8013d46:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8013d48:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013d4c:	4604      	mov	r4, r0
 8013d4e:	460d      	mov	r5, r1
 8013d50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8013d54:	b183      	cbz	r3, 8013d78 <HAL_SDRAM_Init+0x34>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013d56:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8013d58:	1d21      	adds	r1, r4, #4
 8013d5a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013d5c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8013d60:	f000 ff9a 	bl	8014c98 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8013d64:	4629      	mov	r1, r5
 8013d66:	e9d4 0200 	ldrd	r0, r2, [r4]
 8013d6a:	f000 ffd3 	bl	8014d14 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8013d6e:	2301      	movs	r3, #1
  
  return HAL_OK;
 8013d70:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8013d72:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8013d76:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8013d78:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8013d7c:	f7f7 fba6 	bl	800b4cc <HAL_SDRAM_MspInit>
 8013d80:	e7e9      	b.n	8013d56 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8013d82:	2001      	movs	r0, #1
}
 8013d84:	4770      	bx	lr
 8013d86:	bf00      	nop

08013d88 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8013d88:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8013d8a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	2b02      	cmp	r3, #2
 8013d92:	d010      	beq.n	8013db6 <HAL_SDRAM_SendCommand+0x2e>
 8013d94:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013d96:	2302      	movs	r3, #2
 8013d98:	460d      	mov	r5, r1
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8013d9a:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013d9c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8013da0:	f001 f80a 	bl	8014db8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013da4:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8013da6:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013da8:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8013daa:	bf0c      	ite	eq
 8013dac:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8013dae:	2301      	movne	r3, #1
 8013db0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8013db4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8013db6:	4618      	mov	r0, r3
}
 8013db8:	bd38      	pop	{r3, r4, r5, pc}
 8013dba:	bf00      	nop

08013dbc <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8013dbc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013dc0:	b2db      	uxtb	r3, r3
 8013dc2:	2b02      	cmp	r3, #2
 8013dc4:	d00c      	beq.n	8013de0 <HAL_SDRAM_ProgramRefreshRate+0x24>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013dc6:	2302      	movs	r3, #2
{
 8013dc8:	b510      	push	{r4, lr}
 8013dca:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8013dcc:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013dce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8013dd2:	f001 f807 	bl	8014de4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8013dd6:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8013dd8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8013dda:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8013dde:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8013de0:	4618      	mov	r0, r3
}
 8013de2:	4770      	bx	lr

08013de4 <HAL_SPDIFRX_Init>:
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8013de4:	2800      	cmp	r0, #0
 8013de6:	d032      	beq.n	8013e4e <HAL_SPDIFRX_Init+0x6a>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8013de8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 8013dec:	b570      	push	{r4, r5, r6, lr}
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8013dee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8013df2:	4604      	mov	r4, r0
 8013df4:	b333      	cbz	r3, 8013e44 <HAL_SPDIFRX_Init+0x60>
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8013df6:	6860      	ldr	r0, [r4, #4]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8013df8:	2502      	movs	r5, #2
  tmpreg |= (hspdif->Init.StereoMode |
 8013dfa:	69a3      	ldr	r3, [r4, #24]
             );


  hspdif->Instance->CR = tmpreg;

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8013dfc:	2100      	movs	r1, #0
             hspdif->Init.InputSelection |
 8013dfe:	68a2      	ldr	r2, [r4, #8]
  tmpreg |= (hspdif->Init.StereoMode |
 8013e00:	4303      	orrs	r3, r0
             hspdif->Init.Retries |
 8013e02:	68e0      	ldr	r0, [r4, #12]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8013e04:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
             hspdif->Init.InputSelection |
 8013e08:	4313      	orrs	r3, r2
             hspdif->Init.ValidityBitMask |
 8013e0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
             hspdif->Init.ChannelSelection |
 8013e0c:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
             hspdif->Init.Retries |
 8013e10:	4303      	orrs	r3, r0
             hspdif->Init.DataFormat |
 8013e12:	69e0      	ldr	r0, [r4, #28]
             hspdif->Init.WaitForActivity |
 8013e14:	4313      	orrs	r3, r2
  __HAL_SPDIFRX_IDLE(hspdif);
 8013e16:	6822      	ldr	r2, [r4, #0]
             hspdif->Init.ChannelSelection |
 8013e18:	432b      	orrs	r3, r5
             hspdif->Init.PreambleTypeMask |
 8013e1a:	6a25      	ldr	r5, [r4, #32]
             hspdif->Init.DataFormat |
 8013e1c:	4303      	orrs	r3, r0
  __HAL_SPDIFRX_IDLE(hspdif);
 8013e1e:	6810      	ldr	r0, [r2, #0]
             hspdif->Init.PreambleTypeMask |
 8013e20:	432b      	orrs	r3, r5
  __HAL_SPDIFRX_IDLE(hspdif);
 8013e22:	f020 0003 	bic.w	r0, r0, #3
             hspdif->Init.ChannelStatusMask |
 8013e26:	6a65      	ldr	r5, [r4, #36]	; 0x24
  __HAL_SPDIFRX_IDLE(hspdif);
 8013e28:	6010      	str	r0, [r2, #0]
             hspdif->Init.ChannelStatusMask |
 8013e2a:	432b      	orrs	r3, r5
  tmpreg = hspdif->Instance->CR;
 8013e2c:	6810      	ldr	r0, [r2, #0]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8013e2e:	4d09      	ldr	r5, [pc, #36]	; (8013e54 <HAL_SPDIFRX_Init+0x70>)
             hspdif->Init.ValidityBitMask |
 8013e30:	4333      	orrs	r3, r6

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8013e32:	2601      	movs	r6, #1
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8013e34:	4005      	ands	r5, r0

  return HAL_OK;
 8013e36:	4608      	mov	r0, r1
  tmpreg |= (hspdif->Init.StereoMode |
 8013e38:	432b      	orrs	r3, r5
  hspdif->Instance->CR = tmpreg;
 8013e3a:	6013      	str	r3, [r2, #0]
  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8013e3c:	64a1      	str	r1, [r4, #72]	; 0x48
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8013e3e:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
}
 8013e42:	bd70      	pop	{r4, r5, r6, pc}
    hspdif->Lock = HAL_UNLOCKED;
 8013e44:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    HAL_SPDIFRX_MspInit(hspdif);
 8013e48:	f7f7 f9c2 	bl	800b1d0 <HAL_SPDIFRX_MspInit>
 8013e4c:	e7d3      	b.n	8013df6 <HAL_SPDIFRX_Init+0x12>
    return HAL_ERROR;
 8013e4e:	2001      	movs	r0, #1
}
 8013e50:	4770      	bx	lr
 8013e52:	bf00      	nop
 8013e54:	fff88407 	.word	0xfff88407

08013e58 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013e58:	2800      	cmp	r0, #0
 8013e5a:	d05d      	beq.n	8013f18 <HAL_SPI_Init+0xc0>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013e5c:	2200      	movs	r2, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013e5e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
{
 8013e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013e66:	6282      	str	r2, [r0, #40]	; 0x28
 8013e68:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8013e6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d04d      	beq.n	8013f0e <HAL_SPI_Init+0xb6>

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013e72:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8013e74:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8013e76:	6822      	ldr	r2, [r4, #0]
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8013e78:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 8013e7c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8013e80:	f427 6100 	bic.w	r1, r7, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 8013e84:	6813      	ldr	r3, [r2, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8013e86:	bf94      	ite	ls
 8013e88:	f44f 5580 	movls.w	r5, #4096	; 0x1000
 8013e8c:	2500      	movhi	r5, #0
  __HAL_SPI_DISABLE(hspi);
 8013e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8013e92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8013e96:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8013e98:	d135      	bne.n	8013f06 <HAL_SPI_Init+0xae>
 8013e9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8013e9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013e9e:	b92b      	cbnz	r3, 8013eac <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013ea0:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8013ea4:	bf8c      	ite	hi
 8013ea6:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8013ea8:	2301      	movls	r3, #1
 8013eaa:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8013eac:	68a1      	ldr	r1, [r4, #8]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013eae:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8013eb2:	6863      	ldr	r3, [r4, #4]
 8013eb4:	6920      	ldr	r0, [r4, #16]
 8013eb6:	430b      	orrs	r3, r1
 8013eb8:	6961      	ldr	r1, [r4, #20]
 8013eba:	4303      	orrs	r3, r0
 8013ebc:	430b      	orrs	r3, r1
 8013ebe:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8013ec2:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8013ec4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013ec6:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8013eca:	f400 7e00 	and.w	lr, r0, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8013ece:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8013ed0:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8013ed2:	f00c 0c04 	and.w	ip, ip, #4
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
 8013ed6:	4640      	mov	r0, r8
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8013ed8:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8013eda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013edc:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8013ede:	ea43 030e 	orr.w	r3, r3, lr
  hspi->State     = HAL_SPI_STATE_READY;
 8013ee2:	f04f 0e01 	mov.w	lr, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8013ee6:	ea47 070c 	orr.w	r7, r7, ip
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8013eea:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8013eec:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8013eee:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8013ef0:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013ef2:	69d3      	ldr	r3, [r2, #28]
 8013ef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013ef8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013efa:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8013efe:	f884 e05d 	strb.w	lr, [r4, #93]	; 0x5d
}
 8013f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013f06:	2300      	movs	r3, #0
 8013f08:	461e      	mov	r6, r3
 8013f0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8013f0c:	e7c6      	b.n	8013e9c <HAL_SPI_Init+0x44>
    hspi->Lock = HAL_UNLOCKED;
 8013f0e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8013f12:	f7f7 f981 	bl	800b218 <HAL_SPI_MspInit>
 8013f16:	e7ac      	b.n	8013e72 <HAL_SPI_Init+0x1a>
    return HAL_ERROR;
 8013f18:	2001      	movs	r0, #1
}
 8013f1a:	4770      	bx	lr

08013f1c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013f1c:	2800      	cmp	r0, #0
 8013f1e:	d065      	beq.n	8013fec <HAL_TIM_Base_Init+0xd0>
{
 8013f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013f22:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8013f26:	4604      	mov	r4, r0
 8013f28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d03b      	beq.n	8013fa8 <HAL_TIM_Base_Init+0x8c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013f30:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8013f32:	2002      	movs	r0, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013f34:	4e36      	ldr	r6, [pc, #216]	; (8014010 <HAL_TIM_Base_Init+0xf4>)
 8013f36:	4f37      	ldr	r7, [pc, #220]	; (8014014 <HAL_TIM_Base_Init+0xf8>)
 8013f38:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8013f3c:	eba2 0606 	sub.w	r6, r2, r6
  htim->State = HAL_TIM_STATE_BUSY;
 8013f40:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8013f44:	eba2 0707 	sub.w	r7, r2, r7
  tmpcr1 = TIMx->CR1;
 8013f48:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013f4a:	fab6 f686 	clz	r6, r6
 8013f4e:	fab7 f787 	clz	r7, r7
 8013f52:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8013f56:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8013f5a:	d02a      	beq.n	8013fb2 <HAL_TIM_Base_Init+0x96>
 8013f5c:	bb4e      	cbnz	r6, 8013fb2 <HAL_TIM_Base_Init+0x96>
 8013f5e:	492e      	ldr	r1, [pc, #184]	; (8014018 <HAL_TIM_Base_Init+0xfc>)
 8013f60:	428a      	cmp	r2, r1
 8013f62:	d045      	beq.n	8013ff0 <HAL_TIM_Base_Init+0xd4>
 8013f64:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013f68:	428a      	cmp	r2, r1
 8013f6a:	d041      	beq.n	8013ff0 <HAL_TIM_Base_Init+0xd4>
 8013f6c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013f70:	428a      	cmp	r2, r1
 8013f72:	d042      	beq.n	8013ffa <HAL_TIM_Base_Init+0xde>
 8013f74:	2f00      	cmp	r7, #0
 8013f76:	d140      	bne.n	8013ffa <HAL_TIM_Base_Init+0xde>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013f78:	4928      	ldr	r1, [pc, #160]	; (801401c <HAL_TIM_Base_Init+0x100>)
 8013f7a:	428a      	cmp	r2, r1
 8013f7c:	d01e      	beq.n	8013fbc <HAL_TIM_Base_Init+0xa0>
 8013f7e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013f82:	428a      	cmp	r2, r1
 8013f84:	d01a      	beq.n	8013fbc <HAL_TIM_Base_Init+0xa0>
 8013f86:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013f8a:	428a      	cmp	r2, r1
 8013f8c:	d016      	beq.n	8013fbc <HAL_TIM_Base_Init+0xa0>
 8013f8e:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8013f92:	428a      	cmp	r2, r1
 8013f94:	d012      	beq.n	8013fbc <HAL_TIM_Base_Init+0xa0>
 8013f96:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013f9a:	428a      	cmp	r2, r1
 8013f9c:	d00e      	beq.n	8013fbc <HAL_TIM_Base_Init+0xa0>
 8013f9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013fa2:	428a      	cmp	r2, r1
 8013fa4:	d10e      	bne.n	8013fc4 <HAL_TIM_Base_Init+0xa8>
 8013fa6:	e009      	b.n	8013fbc <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8013fa8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8013fac:	f7f7 f966 	bl	800b27c <HAL_TIM_Base_MspInit>
 8013fb0:	e7be      	b.n	8013f30 <HAL_TIM_Base_Init+0x14>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013fb2:	f023 0570 	bic.w	r5, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8013fb6:	68a0      	ldr	r0, [r4, #8]
 8013fb8:	ea45 0300 	orr.w	r3, r5, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013fc0:	6920      	ldr	r0, [r4, #16]
 8013fc2:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013fc4:	69a1      	ldr	r1, [r4, #24]
 8013fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013fca:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013fcc:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013fce:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8013fd0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013fd2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8013fd4:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013fd6:	b936      	cbnz	r6, 8013fe6 <HAL_TIM_Base_Init+0xca>
 8013fd8:	b92f      	cbnz	r7, 8013fe6 <HAL_TIM_Base_Init+0xca>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013fda:	2301      	movs	r3, #1
  return HAL_OK;
 8013fdc:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8013fde:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8013fe0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8013fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8013fe6:	6963      	ldr	r3, [r4, #20]
 8013fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8013fea:	e7f6      	b.n	8013fda <HAL_TIM_Base_Init+0xbe>
    return HAL_ERROR;
 8013fec:	2001      	movs	r0, #1
}
 8013fee:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8013ff4:	68a1      	ldr	r1, [r4, #8]
 8013ff6:	430b      	orrs	r3, r1
 8013ff8:	e7e0      	b.n	8013fbc <HAL_TIM_Base_Init+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013ffa:	4909      	ldr	r1, [pc, #36]	; (8014020 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8014000:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014002:	428a      	cmp	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8014004:	ea43 0300 	orr.w	r3, r3, r0
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014008:	d0d8      	beq.n	8013fbc <HAL_TIM_Base_Init+0xa0>
 801400a:	2f00      	cmp	r7, #0
 801400c:	d1d6      	bne.n	8013fbc <HAL_TIM_Base_Init+0xa0>
 801400e:	e7b3      	b.n	8013f78 <HAL_TIM_Base_Init+0x5c>
 8014010:	40010000 	.word	0x40010000
 8014014:	40010400 	.word	0x40010400
 8014018:	40000400 	.word	0x40000400
 801401c:	40014000 	.word	0x40014000
 8014020:	40000c00 	.word	0x40000c00

08014024 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014024:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014026:	4a09      	ldr	r2, [pc, #36]	; (801404c <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014028:	68d9      	ldr	r1, [r3, #12]
 801402a:	f041 0101 	orr.w	r1, r1, #1
 801402e:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014030:	6899      	ldr	r1, [r3, #8]
 8014032:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014034:	2a06      	cmp	r2, #6
 8014036:	d006      	beq.n	8014046 <HAL_TIM_Base_Start_IT+0x22>
 8014038:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801403c:	d003      	beq.n	8014046 <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 801403e:	681a      	ldr	r2, [r3, #0]
 8014040:	f042 0201 	orr.w	r2, r2, #1
 8014044:	601a      	str	r2, [r3, #0]
}
 8014046:	2000      	movs	r0, #0
 8014048:	4770      	bx	lr
 801404a:	bf00      	nop
 801404c:	00010007 	.word	0x00010007

08014050 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8014050:	2800      	cmp	r0, #0
 8014052:	d065      	beq.n	8014120 <HAL_TIM_PWM_Init+0xd0>
{
 8014054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8014056:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 801405a:	4604      	mov	r4, r0
 801405c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8014060:	2b00      	cmp	r3, #0
 8014062:	d03b      	beq.n	80140dc <HAL_TIM_PWM_Init+0x8c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014064:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8014066:	2002      	movs	r0, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014068:	4e36      	ldr	r6, [pc, #216]	; (8014144 <HAL_TIM_PWM_Init+0xf4>)
 801406a:	4f37      	ldr	r7, [pc, #220]	; (8014148 <HAL_TIM_PWM_Init+0xf8>)
 801406c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8014070:	eba2 0606 	sub.w	r6, r2, r6
  htim->State = HAL_TIM_STATE_BUSY;
 8014074:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8014078:	eba2 0707 	sub.w	r7, r2, r7
  tmpcr1 = TIMx->CR1;
 801407c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801407e:	fab6 f686 	clz	r6, r6
 8014082:	fab7 f787 	clz	r7, r7
 8014086:	ea4f 1656 	mov.w	r6, r6, lsr #5
 801408a:	ea4f 1757 	mov.w	r7, r7, lsr #5
 801408e:	d02a      	beq.n	80140e6 <HAL_TIM_PWM_Init+0x96>
 8014090:	bb4e      	cbnz	r6, 80140e6 <HAL_TIM_PWM_Init+0x96>
 8014092:	492e      	ldr	r1, [pc, #184]	; (801414c <HAL_TIM_PWM_Init+0xfc>)
 8014094:	428a      	cmp	r2, r1
 8014096:	d045      	beq.n	8014124 <HAL_TIM_PWM_Init+0xd4>
 8014098:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801409c:	428a      	cmp	r2, r1
 801409e:	d041      	beq.n	8014124 <HAL_TIM_PWM_Init+0xd4>
 80140a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80140a4:	428a      	cmp	r2, r1
 80140a6:	d042      	beq.n	801412e <HAL_TIM_PWM_Init+0xde>
 80140a8:	2f00      	cmp	r7, #0
 80140aa:	d140      	bne.n	801412e <HAL_TIM_PWM_Init+0xde>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80140ac:	4928      	ldr	r1, [pc, #160]	; (8014150 <HAL_TIM_PWM_Init+0x100>)
 80140ae:	428a      	cmp	r2, r1
 80140b0:	d01e      	beq.n	80140f0 <HAL_TIM_PWM_Init+0xa0>
 80140b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80140b6:	428a      	cmp	r2, r1
 80140b8:	d01a      	beq.n	80140f0 <HAL_TIM_PWM_Init+0xa0>
 80140ba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80140be:	428a      	cmp	r2, r1
 80140c0:	d016      	beq.n	80140f0 <HAL_TIM_PWM_Init+0xa0>
 80140c2:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80140c6:	428a      	cmp	r2, r1
 80140c8:	d012      	beq.n	80140f0 <HAL_TIM_PWM_Init+0xa0>
 80140ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80140ce:	428a      	cmp	r2, r1
 80140d0:	d00e      	beq.n	80140f0 <HAL_TIM_PWM_Init+0xa0>
 80140d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80140d6:	428a      	cmp	r2, r1
 80140d8:	d10e      	bne.n	80140f8 <HAL_TIM_PWM_Init+0xa8>
 80140da:	e009      	b.n	80140f0 <HAL_TIM_PWM_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 80140dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80140e0:	f7f7 f936 	bl	800b350 <HAL_TIM_PWM_MspInit>
 80140e4:	e7be      	b.n	8014064 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80140e6:	f023 0570 	bic.w	r5, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80140ea:	68a0      	ldr	r0, [r4, #8]
 80140ec:	ea45 0300 	orr.w	r3, r5, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80140f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80140f4:	6920      	ldr	r0, [r4, #16]
 80140f6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80140f8:	69a1      	ldr	r1, [r4, #24]
 80140fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80140fe:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014100:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8014102:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8014104:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014106:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8014108:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801410a:	b936      	cbnz	r6, 801411a <HAL_TIM_PWM_Init+0xca>
 801410c:	b92f      	cbnz	r7, 801411a <HAL_TIM_PWM_Init+0xca>
  TIMx->EGR = TIM_EGR_UG;
 801410e:	2301      	movs	r3, #1
  return HAL_OK;
 8014110:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8014112:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8014114:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8014118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 801411a:	6963      	ldr	r3, [r4, #20]
 801411c:	6313      	str	r3, [r2, #48]	; 0x30
 801411e:	e7f6      	b.n	801410e <HAL_TIM_PWM_Init+0xbe>
    return HAL_ERROR;
 8014120:	2001      	movs	r0, #1
}
 8014122:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8014128:	68a1      	ldr	r1, [r4, #8]
 801412a:	430b      	orrs	r3, r1
 801412c:	e7e0      	b.n	80140f0 <HAL_TIM_PWM_Init+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801412e:	4909      	ldr	r1, [pc, #36]	; (8014154 <HAL_TIM_PWM_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8014134:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014136:	428a      	cmp	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8014138:	ea43 0300 	orr.w	r3, r3, r0
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801413c:	d0d8      	beq.n	80140f0 <HAL_TIM_PWM_Init+0xa0>
 801413e:	2f00      	cmp	r7, #0
 8014140:	d1d6      	bne.n	80140f0 <HAL_TIM_PWM_Init+0xa0>
 8014142:	e7b3      	b.n	80140ac <HAL_TIM_PWM_Init+0x5c>
 8014144:	40010000 	.word	0x40010000
 8014148:	40010400 	.word	0x40010400
 801414c:	40000400 	.word	0x40000400
 8014150:	40014000 	.word	0x40014000
 8014154:	40000c00 	.word	0x40000c00

08014158 <HAL_TIM_PWM_ConfigChannel>:
{
 8014158:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 801415a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 801415e:	2801      	cmp	r0, #1
 8014160:	f000 813e 	beq.w	80143e0 <HAL_TIM_PWM_ConfigChannel+0x288>
  htim->State = HAL_TIM_STATE_BUSY;
 8014164:	2002      	movs	r0, #2
{
 8014166:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8014168:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 801416a:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 801416e:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  switch (Channel)
 8014172:	2a14      	cmp	r2, #20
 8014174:	d843      	bhi.n	80141fe <HAL_TIM_PWM_ConfigChannel+0xa6>
 8014176:	e8df f012 	tbh	[pc, r2, lsl #1]
 801417a:	0015      	.short	0x0015
 801417c:	00420042 	.word	0x00420042
 8014180:	007b0042 	.word	0x007b0042
 8014184:	00420042 	.word	0x00420042
 8014188:	00da0042 	.word	0x00da0042
 801418c:	00420042 	.word	0x00420042
 8014190:	00aa0042 	.word	0x00aa0042
 8014194:	00420042 	.word	0x00420042
 8014198:	01060042 	.word	0x01060042
 801419c:	00420042 	.word	0x00420042
 80141a0:	004b0042 	.word	0x004b0042
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80141a4:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80141a6:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80141aa:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 80141ac:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80141ae:	f025 0501 	bic.w	r5, r5, #1
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80141b2:	4cab      	ldr	r4, [pc, #684]	; (8014460 <HAL_TIM_PWM_ConfigChannel+0x308>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80141b4:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 80141b6:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80141b8:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 80141ba:	6995      	ldr	r5, [r2, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80141bc:	f020 0002 	bic.w	r0, r0, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80141c0:	402c      	ands	r4, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80141c2:	4da8      	ldr	r5, [pc, #672]	; (8014464 <HAL_TIM_PWM_ConfigChannel+0x30c>)
  tmpccer |= OC_Config->OCPolarity;
 80141c4:	ea40 000c 	orr.w	r0, r0, ip
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80141c8:	42aa      	cmp	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 80141ca:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80141ce:	f000 8115 	beq.w	80143fc <HAL_TIM_PWM_ConfigChannel+0x2a4>
 80141d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80141d6:	42aa      	cmp	r2, r5
 80141d8:	f000 8110 	beq.w	80143fc <HAL_TIM_PWM_ConfigChannel+0x2a4>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80141dc:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80141de:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80141e0:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80141e2:	6355      	str	r5, [r2, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80141e4:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80141e6:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80141e8:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80141ea:	f040 0008 	orr.w	r0, r0, #8
 80141ee:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80141f0:	6990      	ldr	r0, [r2, #24]
 80141f2:	f020 0004 	bic.w	r0, r0, #4
 80141f6:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80141f8:	6991      	ldr	r1, [r2, #24]
 80141fa:	4321      	orrs	r1, r4
 80141fc:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 80141fe:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8014200:	2101      	movs	r1, #1
  return HAL_OK;
 8014202:	4610      	mov	r0, r2
  htim->State = HAL_TIM_STATE_READY;
 8014204:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8014208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801420c:	bcf0      	pop	{r4, r5, r6, r7}
 801420e:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8014210:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8014212:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8014214:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014216:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8014218:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801421c:	4c92      	ldr	r4, [pc, #584]	; (8014468 <HAL_TIM_PWM_ConfigChannel+0x310>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801421e:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8014220:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8014222:	6855      	ldr	r5, [r2, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8014224:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 8014228:	f8d2 c054 	ldr.w	ip, [r2, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801422c:	ea40 5006 	orr.w	r0, r0, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014230:	4e8c      	ldr	r6, [pc, #560]	; (8014464 <HAL_TIM_PWM_ConfigChannel+0x30c>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8014232:	ea0c 0404 	and.w	r4, ip, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014236:	42b2      	cmp	r2, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014238:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801423c:	f000 80d2 	beq.w	80143e4 <HAL_TIM_PWM_ConfigChannel+0x28c>
 8014240:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8014244:	42b2      	cmp	r2, r6
 8014246:	f000 80cd 	beq.w	80143e4 <HAL_TIM_PWM_ConfigChannel+0x28c>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801424a:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 801424c:	6055      	str	r5, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 801424e:	6554      	str	r4, [r2, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8014250:	65d6      	str	r6, [r2, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014252:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8014254:	6d50      	ldr	r0, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8014256:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8014258:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 801425c:	6550      	str	r0, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801425e:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8014260:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8014264:	6550      	str	r0, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8014266:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8014268:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 801426c:	6551      	str	r1, [r2, #84]	; 0x54
      break;
 801426e:	e7c6      	b.n	80141fe <HAL_TIM_PWM_ConfigChannel+0xa6>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014270:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014272:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014276:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014278:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801427a:	f025 0510 	bic.w	r5, r5, #16
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801427e:	4c7b      	ldr	r4, [pc, #492]	; (801446c <HAL_TIM_PWM_ConfigChannel+0x314>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014280:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8014282:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8014284:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8014286:	6995      	ldr	r5, [r2, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8014288:	f020 0020 	bic.w	r0, r0, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801428c:	402c      	ands	r4, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801428e:	4d75      	ldr	r5, [pc, #468]	; (8014464 <HAL_TIM_PWM_ConfigChannel+0x30c>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014290:	ea40 100c 	orr.w	r0, r0, ip, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014294:	42aa      	cmp	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014296:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801429a:	f000 80c3 	beq.w	8014424 <HAL_TIM_PWM_ConfigChannel+0x2cc>
 801429e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80142a2:	42aa      	cmp	r2, r5
 80142a4:	f000 80be 	beq.w	8014424 <HAL_TIM_PWM_ConfigChannel+0x2cc>
  TIMx->CCR2 = OC_Config->Pulse;
 80142a8:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80142aa:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80142ac:	6194      	str	r4, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80142ae:	6395      	str	r5, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80142b0:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80142b2:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80142b4:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80142b6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80142ba:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80142bc:	6990      	ldr	r0, [r2, #24]
 80142be:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80142c2:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80142c4:	6991      	ldr	r1, [r2, #24]
 80142c6:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 80142ca:	6191      	str	r1, [r2, #24]
      break;
 80142cc:	e797      	b.n	80141fe <HAL_TIM_PWM_ConfigChannel+0xa6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80142ce:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80142d0:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80142d2:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80142d4:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80142d6:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80142da:	4c64      	ldr	r4, [pc, #400]	; (801446c <HAL_TIM_PWM_ConfigChannel+0x314>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80142dc:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 80142de:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80142e0:	6855      	ldr	r5, [r2, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 80142e2:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpccmrx = TIMx->CCMR2;
 80142e6:	f8d2 c01c 	ldr.w	ip, [r2, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80142ea:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80142ee:	4e5d      	ldr	r6, [pc, #372]	; (8014464 <HAL_TIM_PWM_ConfigChannel+0x30c>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80142f0:	ea0c 0404 	and.w	r4, ip, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80142f4:	42b2      	cmp	r2, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80142f6:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80142fa:	f000 808d 	beq.w	8014418 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 80142fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8014302:	42b2      	cmp	r2, r6
 8014304:	f000 8088 	beq.w	8014418 <HAL_TIM_PWM_ConfigChannel+0x2c0>
  TIMx->CCR4 = OC_Config->Pulse;
 8014308:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 801430a:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 801430c:	61d4      	str	r4, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 801430e:	6416      	str	r6, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8014310:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014312:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014314:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014316:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 801431a:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801431c:	69d0      	ldr	r0, [r2, #28]
 801431e:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8014322:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014324:	69d1      	ldr	r1, [r2, #28]
 8014326:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 801432a:	61d1      	str	r1, [r2, #28]
      break;
 801432c:	e767      	b.n	80141fe <HAL_TIM_PWM_ConfigChannel+0xa6>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801432e:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014330:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014334:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8014336:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014338:	f425 7580 	bic.w	r5, r5, #256	; 0x100
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801433c:	4c48      	ldr	r4, [pc, #288]	; (8014460 <HAL_TIM_PWM_ConfigChannel+0x308>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801433e:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8014340:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8014342:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8014344:	69d5      	ldr	r5, [r2, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8014346:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801434a:	402c      	ands	r4, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801434c:	4d45      	ldr	r5, [pc, #276]	; (8014464 <HAL_TIM_PWM_ConfigChannel+0x30c>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801434e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014352:	42aa      	cmp	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8014354:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014358:	d073      	beq.n	8014442 <HAL_TIM_PWM_ConfigChannel+0x2ea>
 801435a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801435e:	42aa      	cmp	r2, r5
 8014360:	d06f      	beq.n	8014442 <HAL_TIM_PWM_ConfigChannel+0x2ea>
  TIMx->CCR3 = OC_Config->Pulse;
 8014362:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8014364:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8014366:	61d4      	str	r4, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8014368:	63d5      	str	r5, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 801436a:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801436c:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801436e:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014370:	f040 0008 	orr.w	r0, r0, #8
 8014374:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014376:	69d0      	ldr	r0, [r2, #28]
 8014378:	f020 0004 	bic.w	r0, r0, #4
 801437c:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801437e:	69d1      	ldr	r1, [r2, #28]
 8014380:	4321      	orrs	r1, r4
 8014382:	61d1      	str	r1, [r2, #28]
      break;
 8014384:	e73b      	b.n	80141fe <HAL_TIM_PWM_ConfigChannel+0xa6>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8014386:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8014388:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801438a:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 801438c:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801438e:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8014392:	4c37      	ldr	r4, [pc, #220]	; (8014470 <HAL_TIM_PWM_ConfigChannel+0x318>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8014394:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8014396:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8014398:	6855      	ldr	r5, [r2, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 801439a:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 801439e:	f8d2 c054 	ldr.w	ip, [r2, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80143a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80143a6:	4e2f      	ldr	r6, [pc, #188]	; (8014464 <HAL_TIM_PWM_ConfigChannel+0x30c>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80143a8:	ea0c 0404 	and.w	r4, ip, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80143ac:	42b2      	cmp	r2, r6
  tmpccmrx |= OC_Config->OCMode;
 80143ae:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80143b2:	d01d      	beq.n	80143f0 <HAL_TIM_PWM_ConfigChannel+0x298>
 80143b4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80143b8:	42b2      	cmp	r2, r6
 80143ba:	d019      	beq.n	80143f0 <HAL_TIM_PWM_ConfigChannel+0x298>
  TIMx->CCR5 = OC_Config->Pulse;
 80143bc:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80143be:	6055      	str	r5, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 80143c0:	6554      	str	r4, [r2, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80143c2:	6596      	str	r6, [r2, #88]	; 0x58
  TIMx->CCER = tmpccer;
 80143c4:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80143c6:	6d50      	ldr	r0, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80143c8:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80143ca:	f040 0008 	orr.w	r0, r0, #8
 80143ce:	6550      	str	r0, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80143d0:	6d50      	ldr	r0, [r2, #84]	; 0x54
 80143d2:	f020 0004 	bic.w	r0, r0, #4
 80143d6:	6550      	str	r0, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80143d8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80143da:	4321      	orrs	r1, r4
 80143dc:	6551      	str	r1, [r2, #84]	; 0x54
      break;
 80143de:	e70e      	b.n	80141fe <HAL_TIM_PWM_ConfigChannel+0xa6>
  __HAL_LOCK(htim);
 80143e0:	2002      	movs	r0, #2
}
 80143e2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 80143e4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80143e8:	694e      	ldr	r6, [r1, #20]
 80143ea:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 80143ee:	e72c      	b.n	801424a <HAL_TIM_PWM_ConfigChannel+0xf2>
    tmpcr2 &= ~TIM_CR2_OIS5;
 80143f0:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80143f4:	694e      	ldr	r6, [r1, #20]
 80143f6:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 80143fa:	e7df      	b.n	80143bc <HAL_TIM_PWM_ConfigChannel+0x264>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80143fc:	f426 7c40 	bic.w	ip, r6, #768	; 0x300
    tmpccer &= ~TIM_CCER_CC1NP;
 8014400:	f020 0008 	bic.w	r0, r0, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8014404:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8014406:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8014408:	694d      	ldr	r5, [r1, #20]
    tmpccer |= OC_Config->OCNPolarity;
 801440a:	4338      	orrs	r0, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 801440c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 801440e:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8014412:	ea45 060c 	orr.w	r6, r5, ip
 8014416:	e6e1      	b.n	80141dc <HAL_TIM_PWM_ConfigChannel+0x84>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014418:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801441c:	694e      	ldr	r6, [r1, #20]
 801441e:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8014422:	e771      	b.n	8014308 <HAL_TIM_PWM_ConfigChannel+0x1b0>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014424:	f426 6c40 	bic.w	ip, r6, #3072	; 0xc00
    tmpccer &= ~TIM_CCER_CC2NP;
 8014428:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801442c:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801442e:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014430:	694d      	ldr	r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014432:	ea40 1007 	orr.w	r0, r0, r7, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014436:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8014438:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801443c:	ea4c 0685 	orr.w	r6, ip, r5, lsl #2
 8014440:	e732      	b.n	80142a8 <HAL_TIM_PWM_ConfigChannel+0x150>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014442:	f426 5c40 	bic.w	ip, r6, #12288	; 0x3000
    tmpccer &= ~TIM_CCER_CC3NP;
 8014446:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801444a:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801444c:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801444e:	694d      	ldr	r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014450:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014454:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8014456:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801445a:	ea4c 1605 	orr.w	r6, ip, r5, lsl #4
 801445e:	e780      	b.n	8014362 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8014460:	fffeff8c 	.word	0xfffeff8c
 8014464:	40010000 	.word	0x40010000
 8014468:	feff8fff 	.word	0xfeff8fff
 801446c:	feff8cff 	.word	0xfeff8cff
 8014470:	fffeff8f 	.word	0xfffeff8f

08014474 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8014474:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8014478:	2b01      	cmp	r3, #1
 801447a:	d05b      	beq.n	8014534 <HAL_TIM_ConfigClockSource+0xc0>
 801447c:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 801447e:	2002      	movs	r0, #2
  tmpsmcr = htim->Instance->SMCR;
 8014480:	6813      	ldr	r3, [r2, #0]
{
 8014482:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8014484:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8014488:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 801448a:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801448c:	4c4c      	ldr	r4, [pc, #304]	; (80145c0 <HAL_TIM_ConfigClockSource+0x14c>)
  __HAL_LOCK(htim);
 801448e:	f882 503c 	strb.w	r5, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014492:	4004      	ands	r4, r0
  switch (sClockSourceConfig->ClockSource)
 8014494:	6808      	ldr	r0, [r1, #0]
 8014496:	2840      	cmp	r0, #64	; 0x40
  htim->Instance->SMCR = tmpsmcr;
 8014498:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 801449a:	d076      	beq.n	801458a <HAL_TIM_ConfigClockSource+0x116>
 801449c:	d94c      	bls.n	8014538 <HAL_TIM_ConfigClockSource+0xc4>
 801449e:	2860      	cmp	r0, #96	; 0x60
 80144a0:	d02f      	beq.n	8014502 <HAL_TIM_ConfigClockSource+0x8e>
 80144a2:	d958      	bls.n	8014556 <HAL_TIM_ConfigClockSource+0xe2>
 80144a4:	2870      	cmp	r0, #112	; 0x70
 80144a6:	d01b      	beq.n	80144e0 <HAL_TIM_ConfigClockSource+0x6c>
 80144a8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80144ac:	d10f      	bne.n	80144ce <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80144ae:	68cc      	ldr	r4, [r1, #12]
 80144b0:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 80144b4:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 80144b8:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80144ba:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80144be:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80144c2:	4301      	orrs	r1, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80144c4:	6099      	str	r1, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80144c6:	6899      	ldr	r1, [r3, #8]
 80144c8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80144cc:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(htim);
 80144ce:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80144d0:	2101      	movs	r1, #1
  return HAL_OK;
 80144d2:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80144d4:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80144d8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80144dc:	bc70      	pop	{r4, r5, r6}
 80144de:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80144e0:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 80144e4:	68cc      	ldr	r4, [r1, #12]
 80144e6:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 80144ea:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80144ec:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80144f0:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80144f4:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 80144f6:	6099      	str	r1, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80144f8:	6899      	ldr	r1, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80144fa:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80144fe:	6099      	str	r1, [r3, #8]
      break;
 8014500:	e7e5      	b.n	80144ce <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014502:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014504:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014506:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 801450a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801450c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801450e:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 8014510:	6a19      	ldr	r1, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014512:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014516:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801451a:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 801451e:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8014522:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8014524:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8014526:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8014528:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801452c:	f041 0167 	orr.w	r1, r1, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8014530:	6099      	str	r1, [r3, #8]
 8014532:	e7cc      	b.n	80144ce <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8014534:	2002      	movs	r0, #2
}
 8014536:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8014538:	2810      	cmp	r0, #16
 801453a:	d004      	beq.n	8014546 <HAL_TIM_ConfigClockSource+0xd2>
 801453c:	d93d      	bls.n	80145ba <HAL_TIM_ConfigClockSource+0x146>
 801453e:	2820      	cmp	r0, #32
 8014540:	d001      	beq.n	8014546 <HAL_TIM_ConfigClockSource+0xd2>
 8014542:	2830      	cmp	r0, #48	; 0x30
 8014544:	d1c3      	bne.n	80144ce <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8014546:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014548:	f040 0007 	orr.w	r0, r0, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 801454c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014550:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8014552:	6098      	str	r0, [r3, #8]
 8014554:	e7bb      	b.n	80144ce <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8014556:	2850      	cmp	r0, #80	; 0x50
 8014558:	d1b9      	bne.n	80144ce <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 801455a:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801455c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801455e:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014560:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014564:	f024 0401 	bic.w	r4, r4, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014568:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 801456a:	4328      	orrs	r0, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801456c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801456e:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014570:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014574:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8014578:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 801457a:	6218      	str	r0, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 801457c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 801457e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014582:	f041 0157 	orr.w	r1, r1, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8014586:	6099      	str	r1, [r3, #8]
 8014588:	e7a1      	b.n	80144ce <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 801458a:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801458c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801458e:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014590:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014594:	f024 0401 	bic.w	r4, r4, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014598:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 801459a:	4328      	orrs	r0, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801459c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801459e:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80145a0:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80145a4:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80145a8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80145aa:	6218      	str	r0, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80145ac:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80145ae:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80145b2:	f041 0147 	orr.w	r1, r1, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80145b6:	6099      	str	r1, [r3, #8]
 80145b8:	e789      	b.n	80144ce <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80145ba:	2800      	cmp	r0, #0
 80145bc:	d0c3      	beq.n	8014546 <HAL_TIM_ConfigClockSource+0xd2>
 80145be:	e786      	b.n	80144ce <HAL_TIM_ConfigClockSource+0x5a>
 80145c0:	fffe0088 	.word	0xfffe0088

080145c4 <HAL_TIM_OC_DelayElapsedCallback>:
 80145c4:	4770      	bx	lr
 80145c6:	bf00      	nop

080145c8 <HAL_TIM_IC_CaptureCallback>:
 80145c8:	4770      	bx	lr
 80145ca:	bf00      	nop

080145cc <HAL_TIM_PWM_PulseFinishedCallback>:
 80145cc:	4770      	bx	lr
 80145ce:	bf00      	nop

080145d0 <HAL_TIM_TriggerCallback>:
 80145d0:	4770      	bx	lr
 80145d2:	bf00      	nop

080145d4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80145d4:	6803      	ldr	r3, [r0, #0]
 80145d6:	691a      	ldr	r2, [r3, #16]
 80145d8:	0791      	lsls	r1, r2, #30
{
 80145da:	b510      	push	{r4, lr}
 80145dc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80145de:	d502      	bpl.n	80145e6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80145e0:	68da      	ldr	r2, [r3, #12]
 80145e2:	0792      	lsls	r2, r2, #30
 80145e4:	d468      	bmi.n	80146b8 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80145e6:	691a      	ldr	r2, [r3, #16]
 80145e8:	0752      	lsls	r2, r2, #29
 80145ea:	d502      	bpl.n	80145f2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80145ec:	68da      	ldr	r2, [r3, #12]
 80145ee:	0750      	lsls	r0, r2, #29
 80145f0:	d44f      	bmi.n	8014692 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80145f2:	691a      	ldr	r2, [r3, #16]
 80145f4:	0711      	lsls	r1, r2, #28
 80145f6:	d502      	bpl.n	80145fe <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80145f8:	68da      	ldr	r2, [r3, #12]
 80145fa:	0712      	lsls	r2, r2, #28
 80145fc:	d437      	bmi.n	801466e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80145fe:	691a      	ldr	r2, [r3, #16]
 8014600:	06d0      	lsls	r0, r2, #27
 8014602:	d502      	bpl.n	801460a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014604:	68da      	ldr	r2, [r3, #12]
 8014606:	06d1      	lsls	r1, r2, #27
 8014608:	d41e      	bmi.n	8014648 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801460a:	691a      	ldr	r2, [r3, #16]
 801460c:	07d2      	lsls	r2, r2, #31
 801460e:	d502      	bpl.n	8014616 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014610:	68da      	ldr	r2, [r3, #12]
 8014612:	07d0      	lsls	r0, r2, #31
 8014614:	d469      	bmi.n	80146ea <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014616:	691a      	ldr	r2, [r3, #16]
 8014618:	0611      	lsls	r1, r2, #24
 801461a:	d502      	bpl.n	8014622 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801461c:	68da      	ldr	r2, [r3, #12]
 801461e:	0612      	lsls	r2, r2, #24
 8014620:	d46b      	bmi.n	80146fa <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8014622:	691a      	ldr	r2, [r3, #16]
 8014624:	05d0      	lsls	r0, r2, #23
 8014626:	d502      	bpl.n	801462e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014628:	68da      	ldr	r2, [r3, #12]
 801462a:	0611      	lsls	r1, r2, #24
 801462c:	d46d      	bmi.n	801470a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801462e:	691a      	ldr	r2, [r3, #16]
 8014630:	0652      	lsls	r2, r2, #25
 8014632:	d502      	bpl.n	801463a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8014634:	68da      	ldr	r2, [r3, #12]
 8014636:	0650      	lsls	r0, r2, #25
 8014638:	d46f      	bmi.n	801471a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801463a:	691a      	ldr	r2, [r3, #16]
 801463c:	0691      	lsls	r1, r2, #26
 801463e:	d502      	bpl.n	8014646 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014640:	68da      	ldr	r2, [r3, #12]
 8014642:	0692      	lsls	r2, r2, #26
 8014644:	d449      	bmi.n	80146da <HAL_TIM_IRQHandler+0x106>
}
 8014646:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014648:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801464c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 801464e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014650:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014652:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014654:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014656:	f413 7f40 	tst.w	r3, #768	; 0x300
 801465a:	d16f      	bne.n	801473c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801465c:	f7ff ffb2 	bl	80145c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014660:	4620      	mov	r0, r4
 8014662:	f7ff ffb3 	bl	80145cc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014666:	2200      	movs	r2, #0
 8014668:	6823      	ldr	r3, [r4, #0]
 801466a:	7722      	strb	r2, [r4, #28]
 801466c:	e7cd      	b.n	801460a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801466e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014672:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8014674:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8014676:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014678:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801467a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801467c:	079b      	lsls	r3, r3, #30
 801467e:	d15a      	bne.n	8014736 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014680:	f7ff ffa0 	bl	80145c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014684:	4620      	mov	r0, r4
 8014686:	f7ff ffa1 	bl	80145cc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801468a:	2200      	movs	r2, #0
 801468c:	6823      	ldr	r3, [r4, #0]
 801468e:	7722      	strb	r2, [r4, #28]
 8014690:	e7b5      	b.n	80145fe <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014692:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014696:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8014698:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801469a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801469c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801469e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80146a0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80146a4:	d144      	bne.n	8014730 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80146a6:	f7ff ff8d 	bl	80145c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80146aa:	4620      	mov	r0, r4
 80146ac:	f7ff ff8e 	bl	80145cc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80146b0:	2200      	movs	r2, #0
 80146b2:	6823      	ldr	r3, [r4, #0]
 80146b4:	7722      	strb	r2, [r4, #28]
 80146b6:	e79c      	b.n	80145f2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80146b8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80146bc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80146be:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80146c0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80146c2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80146c4:	0799      	lsls	r1, r3, #30
 80146c6:	d130      	bne.n	801472a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80146c8:	f7ff ff7c 	bl	80145c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80146cc:	4620      	mov	r0, r4
 80146ce:	f7ff ff7d 	bl	80145cc <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80146d2:	2200      	movs	r2, #0
 80146d4:	6823      	ldr	r3, [r4, #0]
 80146d6:	7722      	strb	r2, [r4, #28]
 80146d8:	e785      	b.n	80145e6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80146da:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80146de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80146e0:	611a      	str	r2, [r3, #16]
}
 80146e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80146e6:	f000 b8a5 	b.w	8014834 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80146ea:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80146ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80146f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80146f2:	f7f4 fb83 	bl	8008dfc <HAL_TIM_PeriodElapsedCallback>
 80146f6:	6823      	ldr	r3, [r4, #0]
 80146f8:	e78d      	b.n	8014616 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80146fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80146fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014700:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8014702:	f000 f899 	bl	8014838 <HAL_TIMEx_BreakCallback>
 8014706:	6823      	ldr	r3, [r4, #0]
 8014708:	e78b      	b.n	8014622 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801470a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 801470e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8014710:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8014712:	f000 f893 	bl	801483c <HAL_TIMEx_Break2Callback>
 8014716:	6823      	ldr	r3, [r4, #0]
 8014718:	e789      	b.n	801462e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801471a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 801471e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014720:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8014722:	f7ff ff55 	bl	80145d0 <HAL_TIM_TriggerCallback>
 8014726:	6823      	ldr	r3, [r4, #0]
 8014728:	e787      	b.n	801463a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 801472a:	f7ff ff4d 	bl	80145c8 <HAL_TIM_IC_CaptureCallback>
 801472e:	e7d0      	b.n	80146d2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8014730:	f7ff ff4a 	bl	80145c8 <HAL_TIM_IC_CaptureCallback>
 8014734:	e7bc      	b.n	80146b0 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8014736:	f7ff ff47 	bl	80145c8 <HAL_TIM_IC_CaptureCallback>
 801473a:	e7a6      	b.n	801468a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 801473c:	f7ff ff44 	bl	80145c8 <HAL_TIM_IC_CaptureCallback>
 8014740:	e791      	b.n	8014666 <HAL_TIM_IRQHandler+0x92>
 8014742:	bf00      	nop

08014744 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014744:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8014748:	2b01      	cmp	r3, #1
 801474a:	d025      	beq.n	8014798 <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801474c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 801474e:	2302      	movs	r3, #2
{
 8014750:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014752:	4d13      	ldr	r5, [pc, #76]	; (80147a0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8014754:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014758:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 801475a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 801475c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801475e:	d016      	beq.n	801478e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8014760:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8014764:	42aa      	cmp	r2, r5
 8014766:	d012      	beq.n	801478e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014768:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 801476a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801476e:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8014770:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014774:	2601      	movs	r6, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014776:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014778:	4321      	orrs	r1, r4

  __HAL_UNLOCK(htim);
 801477a:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 801477c:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 801477e:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8014780:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8014784:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8014788:	4628      	mov	r0, r5
 801478a:	bc70      	pop	{r4, r5, r6}
 801478c:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 801478e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014792:	684d      	ldr	r5, [r1, #4]
 8014794:	432b      	orrs	r3, r5
 8014796:	e7e7      	b.n	8014768 <HAL_TIMEx_MasterConfigSynchronization+0x24>
  __HAL_LOCK(htim);
 8014798:	2302      	movs	r3, #2
}
 801479a:	4618      	mov	r0, r3
 801479c:	4770      	bx	lr
 801479e:	bf00      	nop
 80147a0:	40010000 	.word	0x40010000

080147a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80147a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80147a8:	2b01      	cmp	r3, #1
 80147aa:	d03b      	beq.n	8014824 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
{
 80147ac:	b470      	push	{r4, r5, r6}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80147ae:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80147b2:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80147b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80147ba:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80147bc:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80147be:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80147c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80147c4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80147c6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80147c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80147cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80147ce:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80147d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80147d4:	4333      	orrs	r3, r6

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80147d6:	6806      	ldr	r6, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80147d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80147dc:	432b      	orrs	r3, r5
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80147de:	4d13      	ldr	r5, [pc, #76]	; (801482c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80147e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80147e4:	42ae      	cmp	r6, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80147e6:	ea43 0304 	orr.w	r3, r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80147ea:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80147ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80147f2:	d009      	beq.n	8014808 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80147f4:	4a0e      	ldr	r2, [pc, #56]	; (8014830 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80147f6:	4296      	cmp	r6, r2
 80147f8:	d006      	beq.n	8014808 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80147fa:	2200      	movs	r2, #0
  htim->Instance->BDTR = tmpbdtr;
 80147fc:	6473      	str	r3, [r6, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80147fe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8014802:	4610      	mov	r0, r2
 8014804:	bc70      	pop	{r4, r5, r6}
 8014806:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8014808:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801480a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801480e:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8014810:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8014814:	6a0a      	ldr	r2, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8014816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801481a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801481c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8014820:	4313      	orrs	r3, r2
 8014822:	e7ea      	b.n	80147fa <HAL_TIMEx_ConfigBreakDeadTime+0x56>
  __HAL_LOCK(htim);
 8014824:	2302      	movs	r3, #2
}
 8014826:	4618      	mov	r0, r3
 8014828:	4770      	bx	lr
 801482a:	bf00      	nop
 801482c:	40010000 	.word	0x40010000
 8014830:	40010400 	.word	0x40010400

08014834 <HAL_TIMEx_CommutCallback>:
 8014834:	4770      	bx	lr
 8014836:	bf00      	nop

08014838 <HAL_TIMEx_BreakCallback>:
 8014838:	4770      	bx	lr
 801483a:	bf00      	nop

0801483c <HAL_TIMEx_Break2Callback>:
 801483c:	4770      	bx	lr
 801483e:	bf00      	nop

08014840 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014840:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014842:	07da      	lsls	r2, r3, #31
{
 8014844:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014846:	d506      	bpl.n	8014856 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014848:	6801      	ldr	r1, [r0, #0]
 801484a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801484c:	684a      	ldr	r2, [r1, #4]
 801484e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8014852:	4322      	orrs	r2, r4
 8014854:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014856:	079c      	lsls	r4, r3, #30
 8014858:	d506      	bpl.n	8014868 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801485a:	6801      	ldr	r1, [r0, #0]
 801485c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 801485e:	684a      	ldr	r2, [r1, #4]
 8014860:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8014864:	4322      	orrs	r2, r4
 8014866:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014868:	0759      	lsls	r1, r3, #29
 801486a:	d506      	bpl.n	801487a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801486c:	6801      	ldr	r1, [r0, #0]
 801486e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8014870:	684a      	ldr	r2, [r1, #4]
 8014872:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8014876:	4322      	orrs	r2, r4
 8014878:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801487a:	071a      	lsls	r2, r3, #28
 801487c:	d506      	bpl.n	801488c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801487e:	6801      	ldr	r1, [r0, #0]
 8014880:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8014882:	684a      	ldr	r2, [r1, #4]
 8014884:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014888:	4322      	orrs	r2, r4
 801488a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801488c:	06dc      	lsls	r4, r3, #27
 801488e:	d506      	bpl.n	801489e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014890:	6801      	ldr	r1, [r0, #0]
 8014892:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8014894:	688a      	ldr	r2, [r1, #8]
 8014896:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801489a:	4322      	orrs	r2, r4
 801489c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801489e:	0699      	lsls	r1, r3, #26
 80148a0:	d506      	bpl.n	80148b0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80148a2:	6801      	ldr	r1, [r0, #0]
 80148a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80148a6:	688a      	ldr	r2, [r1, #8]
 80148a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80148ac:	4322      	orrs	r2, r4
 80148ae:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80148b0:	065a      	lsls	r2, r3, #25
 80148b2:	d50a      	bpl.n	80148ca <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80148b4:	6801      	ldr	r1, [r0, #0]
 80148b6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80148b8:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80148ba:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80148be:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80148c2:	ea42 0204 	orr.w	r2, r2, r4
 80148c6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80148c8:	d00b      	beq.n	80148e2 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80148ca:	061b      	lsls	r3, r3, #24
 80148cc:	d506      	bpl.n	80148dc <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80148ce:	6802      	ldr	r2, [r0, #0]
 80148d0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80148d2:	6853      	ldr	r3, [r2, #4]
 80148d4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80148d8:	430b      	orrs	r3, r1
 80148da:	6053      	str	r3, [r2, #4]
  }
}
 80148dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148e0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80148e2:	684a      	ldr	r2, [r1, #4]
 80148e4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80148e6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80148ea:	4322      	orrs	r2, r4
 80148ec:	604a      	str	r2, [r1, #4]
 80148ee:	e7ec      	b.n	80148ca <UART_AdvFeatureConfig+0x8a>

080148f0 <HAL_UART_Init>:
  if (huart == NULL)
 80148f0:	2800      	cmp	r0, #0
 80148f2:	d04f      	beq.n	8014994 <HAL_UART_Init+0xa4>
  if (huart->gState == HAL_UART_STATE_RESET)
 80148f4:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80148f6:	b570      	push	{r4, r5, r6, lr}
 80148f8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d045      	beq.n	801498a <HAL_UART_Init+0x9a>
  __HAL_UART_DISABLE(huart);
 80148fe:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8014900:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014902:	6920      	ldr	r0, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8014904:	6761      	str	r1, [r4, #116]	; 0x74
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014906:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8014908:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801490a:	4302      	orrs	r2, r0
 801490c:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 801490e:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014912:	4dbe      	ldr	r5, [pc, #760]	; (8014c0c <HAL_UART_Init+0x31c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014914:	4302      	orrs	r2, r0
 8014916:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8014918:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801491a:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801491c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801491e:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014920:	400d      	ands	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014922:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014924:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 8014926:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014928:	601a      	str	r2, [r3, #0]
  tmpreg |= huart->Init.OneBitSampling;
 801492a:	ea41 0205 	orr.w	r2, r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801492e:	6859      	ldr	r1, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014930:	4db7      	ldr	r5, [pc, #732]	; (8014c10 <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014932:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014936:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014938:	ea41 0106 	orr.w	r1, r1, r6
 801493c:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801493e:	6899      	ldr	r1, [r3, #8]
 8014940:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8014944:	ea42 0201 	orr.w	r2, r2, r1
 8014948:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 801494a:	d025      	beq.n	8014998 <HAL_UART_Init+0xa8>
 801494c:	4ab1      	ldr	r2, [pc, #708]	; (8014c14 <HAL_UART_Init+0x324>)
 801494e:	4293      	cmp	r3, r2
 8014950:	d044      	beq.n	80149dc <HAL_UART_Init+0xec>
 8014952:	4ab1      	ldr	r2, [pc, #708]	; (8014c18 <HAL_UART_Init+0x328>)
 8014954:	4293      	cmp	r3, r2
 8014956:	f000 80d3 	beq.w	8014b00 <HAL_UART_Init+0x210>
 801495a:	4ab0      	ldr	r2, [pc, #704]	; (8014c1c <HAL_UART_Init+0x32c>)
 801495c:	4293      	cmp	r3, r2
 801495e:	d045      	beq.n	80149ec <HAL_UART_Init+0xfc>
 8014960:	4aaf      	ldr	r2, [pc, #700]	; (8014c20 <HAL_UART_Init+0x330>)
 8014962:	4293      	cmp	r3, r2
 8014964:	f000 80e1 	beq.w	8014b2a <HAL_UART_Init+0x23a>
 8014968:	4aae      	ldr	r2, [pc, #696]	; (8014c24 <HAL_UART_Init+0x334>)
 801496a:	4293      	cmp	r3, r2
 801496c:	f000 816a 	beq.w	8014c44 <HAL_UART_Init+0x354>
 8014970:	4aad      	ldr	r2, [pc, #692]	; (8014c28 <HAL_UART_Init+0x338>)
 8014972:	4293      	cmp	r3, r2
 8014974:	f000 8179 	beq.w	8014c6a <HAL_UART_Init+0x37a>
 8014978:	4aac      	ldr	r2, [pc, #688]	; (8014c2c <HAL_UART_Init+0x33c>)
 801497a:	4293      	cmp	r3, r2
 801497c:	f000 8135 	beq.w	8014bea <HAL_UART_Init+0x2fa>
  huart->RxISR = NULL;
 8014980:	2300      	movs	r3, #0
    return HAL_ERROR;
 8014982:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8014984:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 8014988:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 801498a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 801498e:	f7f6 fd47 	bl	800b420 <HAL_UART_MspInit>
 8014992:	e7b4      	b.n	80148fe <HAL_UART_Init+0xe>
    return HAL_ERROR;
 8014994:	2001      	movs	r0, #1
}
 8014996:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014998:	4ba5      	ldr	r3, [pc, #660]	; (8014c30 <HAL_UART_Init+0x340>)
 801499a:	4aa6      	ldr	r2, [pc, #664]	; (8014c34 <HAL_UART_Init+0x344>)
 801499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80149a0:	f003 0303 	and.w	r3, r3, #3
 80149a4:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80149a6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80149aa:	d02f      	beq.n	8014a0c <HAL_UART_Init+0x11c>
    switch (clocksource)
 80149ac:	2b08      	cmp	r3, #8
 80149ae:	d8e7      	bhi.n	8014980 <HAL_UART_Init+0x90>
 80149b0:	a201      	add	r2, pc, #4	; (adr r2, 80149b8 <HAL_UART_Init+0xc8>)
 80149b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149b6:	bf00      	nop
 80149b8:	08014aef 	.word	0x08014aef
 80149bc:	08014a49 	.word	0x08014a49
 80149c0:	08014b1b 	.word	0x08014b1b
 80149c4:	08014981 	.word	0x08014981
 80149c8:	08014b41 	.word	0x08014b41
 80149cc:	08014981 	.word	0x08014981
 80149d0:	08014981 	.word	0x08014981
 80149d4:	08014981 	.word	0x08014981
 80149d8:	08014b53 	.word	0x08014b53
  UART_GETCLOCKSOURCE(huart, clocksource);
 80149dc:	4b94      	ldr	r3, [pc, #592]	; (8014c30 <HAL_UART_Init+0x340>)
 80149de:	4a96      	ldr	r2, [pc, #600]	; (8014c38 <HAL_UART_Init+0x348>)
 80149e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80149e4:	f003 030c 	and.w	r3, r3, #12
 80149e8:	5cd3      	ldrb	r3, [r2, r3]
 80149ea:	e7dc      	b.n	80149a6 <HAL_UART_Init+0xb6>
 80149ec:	4b90      	ldr	r3, [pc, #576]	; (8014c30 <HAL_UART_Init+0x340>)
 80149ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80149f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80149f6:	2b40      	cmp	r3, #64	; 0x40
 80149f8:	f000 809f 	beq.w	8014b3a <HAL_UART_Init+0x24a>
 80149fc:	d971      	bls.n	8014ae2 <HAL_UART_Init+0x1f2>
 80149fe:	2b80      	cmp	r3, #128	; 0x80
 8014a00:	f000 8088 	beq.w	8014b14 <HAL_UART_Init+0x224>
 8014a04:	2bc0      	cmp	r3, #192	; 0xc0
 8014a06:	f000 80b9 	beq.w	8014b7c <HAL_UART_Init+0x28c>
 8014a0a:	e7b9      	b.n	8014980 <HAL_UART_Init+0x90>
    switch (clocksource)
 8014a0c:	2b08      	cmp	r3, #8
 8014a0e:	d8b7      	bhi.n	8014980 <HAL_UART_Init+0x90>
 8014a10:	a201      	add	r2, pc, #4	; (adr r2, 8014a18 <HAL_UART_Init+0x128>)
 8014a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a16:	bf00      	nop
 8014a18:	08014be5 	.word	0x08014be5
 8014a1c:	08014bbb 	.word	0x08014bbb
 8014a20:	08014bd5 	.word	0x08014bd5
 8014a24:	08014981 	.word	0x08014981
 8014a28:	08014bcf 	.word	0x08014bcf
 8014a2c:	08014981 	.word	0x08014981
 8014a30:	08014981 	.word	0x08014981
 8014a34:	08014981 	.word	0x08014981
 8014a38:	08014b83 	.word	0x08014b83
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d19f      	bne.n	8014980 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014a40:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8014a44:	f000 80b9 	beq.w	8014bba <HAL_UART_Init+0x2ca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8014a48:	f7fd fb68 	bl	801211c <HAL_RCC_GetPCLK2Freq>
 8014a4c:	6863      	ldr	r3, [r4, #4]
 8014a4e:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8014a52:	fbb2 f2f3 	udiv	r2, r2, r3
 8014a56:	b292      	uxth	r2, r2
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014a58:	f1a2 0110 	sub.w	r1, r2, #16
 8014a5c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8014a60:	4299      	cmp	r1, r3
 8014a62:	d88d      	bhi.n	8014980 <HAL_UART_Init+0x90>
      huart->Instance->BRR = usartdiv;
 8014a64:	6823      	ldr	r3, [r4, #0]
  huart->RxISR = NULL;
 8014a66:	2100      	movs	r1, #0
      huart->Instance->BRR = usartdiv;
 8014a68:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 8014a6a:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014a6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014a70:	2a00      	cmp	r2, #0
 8014a72:	d176      	bne.n	8014b62 <HAL_UART_Init+0x272>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014a74:	685a      	ldr	r2, [r3, #4]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014a76:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014a78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014a7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014a7e:	689a      	ldr	r2, [r3, #8]
 8014a80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014a84:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8014a86:	681a      	ldr	r2, [r3, #0]
 8014a88:	f042 0201 	orr.w	r2, r2, #1
 8014a8c:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014a8e:	67e1      	str	r1, [r4, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8014a90:	f7fa fb2e 	bl	800f0f0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014a94:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8014a96:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014a98:	681a      	ldr	r2, [r3, #0]
 8014a9a:	0712      	lsls	r2, r2, #28
 8014a9c:	d407      	bmi.n	8014aae <HAL_UART_Init+0x1be>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014a9e:	2220      	movs	r2, #32
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014aa0:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8014aa2:	6762      	str	r2, [r4, #116]	; 0x74

  return HAL_OK;
 8014aa4:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8014aa6:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8014aa8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 8014aac:	bd70      	pop	{r4, r5, r6, pc}
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014aae:	69dd      	ldr	r5, [r3, #28]
 8014ab0:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8014ab4:	d1f3      	bne.n	8014a9e <HAL_UART_Init+0x1ae>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014ab6:	f7fa fb1b 	bl	800f0f0 <HAL_GetTick>
 8014aba:	1b80      	subs	r0, r0, r6
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014abc:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014abe:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8014ac2:	d3f4      	bcc.n	8014aae <HAL_UART_Init+0x1be>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014ac4:	681a      	ldr	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

        huart->gState = HAL_UART_STATE_READY;
 8014ac6:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8014ac8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014aca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8014ace:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014ad0:	689a      	ldr	r2, [r3, #8]
 8014ad2:	f022 0201 	bic.w	r2, r2, #1
 8014ad6:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8014ad8:	6761      	str	r1, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8014ada:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8014ade:	67a1      	str	r1, [r4, #120]	; 0x78
}
 8014ae0:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	f47f af4c 	bne.w	8014980 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014ae8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8014aec:	d07a      	beq.n	8014be4 <HAL_UART_Init+0x2f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8014aee:	f7fd fb05 	bl	80120fc <HAL_RCC_GetPCLK1Freq>
 8014af2:	6863      	ldr	r3, [r4, #4]
 8014af4:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8014af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8014afc:	b292      	uxth	r2, r2
 8014afe:	e7ab      	b.n	8014a58 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014b00:	4b4b      	ldr	r3, [pc, #300]	; (8014c30 <HAL_UART_Init+0x340>)
 8014b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014b06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8014b0a:	2b10      	cmp	r3, #16
 8014b0c:	d015      	beq.n	8014b3a <HAL_UART_Init+0x24a>
 8014b0e:	d9e8      	bls.n	8014ae2 <HAL_UART_Init+0x1f2>
 8014b10:	2b20      	cmp	r3, #32
 8014b12:	d14f      	bne.n	8014bb4 <HAL_UART_Init+0x2c4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014b14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8014b18:	d05c      	beq.n	8014bd4 <HAL_UART_Init+0x2e4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8014b1a:	6863      	ldr	r3, [r4, #4]
 8014b1c:	4a47      	ldr	r2, [pc, #284]	; (8014c3c <HAL_UART_Init+0x34c>)
 8014b1e:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8014b22:	fbb2 f2f3 	udiv	r2, r2, r3
 8014b26:	b292      	uxth	r2, r2
 8014b28:	e796      	b.n	8014a58 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014b2a:	4b41      	ldr	r3, [pc, #260]	; (8014c30 <HAL_UART_Init+0x340>)
 8014b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014b38:	d118      	bne.n	8014b6c <HAL_UART_Init+0x27c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014b3a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8014b3e:	d046      	beq.n	8014bce <HAL_UART_Init+0x2de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8014b40:	f7fd faa2 	bl	8012088 <HAL_RCC_GetSysClockFreq>
 8014b44:	6863      	ldr	r3, [r4, #4]
 8014b46:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8014b4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8014b4e:	b292      	uxth	r2, r2
 8014b50:	e782      	b.n	8014a58 <HAL_UART_Init+0x168>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8014b52:	6863      	ldr	r3, [r4, #4]
 8014b54:	085a      	lsrs	r2, r3, #1
 8014b56:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014b5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8014b5e:	b292      	uxth	r2, r2
 8014b60:	e77a      	b.n	8014a58 <HAL_UART_Init+0x168>
    UART_AdvFeatureConfig(huart);
 8014b62:	4620      	mov	r0, r4
 8014b64:	f7ff fe6c 	bl	8014840 <UART_AdvFeatureConfig>
 8014b68:	6823      	ldr	r3, [r4, #0]
 8014b6a:	e783      	b.n	8014a74 <HAL_UART_Init+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014b6c:	d9b9      	bls.n	8014ae2 <HAL_UART_Init+0x1f2>
 8014b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b72:	d0cf      	beq.n	8014b14 <HAL_UART_Init+0x224>
 8014b74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014b78:	f47f af02 	bne.w	8014980 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014b7c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8014b80:	d1e7      	bne.n	8014b52 <HAL_UART_Init+0x262>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8014b82:	6862      	ldr	r2, [r4, #4]
 8014b84:	0853      	lsrs	r3, r2, #1
 8014b86:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8014b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8014b8e:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014b90:	f1a3 0110 	sub.w	r1, r3, #16
 8014b94:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8014b98:	4291      	cmp	r1, r2
 8014b9a:	f63f aef1 	bhi.w	8014980 <HAL_UART_Init+0x90>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014b9e:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014ba2:	f3c3 0242 	ubfx	r2, r3, #1, #3
  huart->RxISR = NULL;
 8014ba6:	2000      	movs	r0, #0
      huart->Instance->BRR = brrtemp;
 8014ba8:	6823      	ldr	r3, [r4, #0]
 8014baa:	430a      	orrs	r2, r1
 8014bac:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 8014bae:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 8014bb2:	e75c      	b.n	8014a6e <HAL_UART_Init+0x17e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014bb4:	2b30      	cmp	r3, #48	; 0x30
 8014bb6:	d0e1      	beq.n	8014b7c <HAL_UART_Init+0x28c>
 8014bb8:	e6e2      	b.n	8014980 <HAL_UART_Init+0x90>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8014bba:	f7fd faaf 	bl	801211c <HAL_RCC_GetPCLK2Freq>
 8014bbe:	6862      	ldr	r2, [r4, #4]
 8014bc0:	0853      	lsrs	r3, r2, #1
 8014bc2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8014bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8014bca:	b29b      	uxth	r3, r3
 8014bcc:	e7e0      	b.n	8014b90 <HAL_UART_Init+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8014bce:	f7fd fa5b 	bl	8012088 <HAL_RCC_GetSysClockFreq>
 8014bd2:	e7f4      	b.n	8014bbe <HAL_UART_Init+0x2ce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8014bd4:	6862      	ldr	r2, [r4, #4]
 8014bd6:	4b1a      	ldr	r3, [pc, #104]	; (8014c40 <HAL_UART_Init+0x350>)
 8014bd8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8014bdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8014be0:	b29b      	uxth	r3, r3
 8014be2:	e7d5      	b.n	8014b90 <HAL_UART_Init+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8014be4:	f7fd fa8a 	bl	80120fc <HAL_RCC_GetPCLK1Freq>
 8014be8:	e7e9      	b.n	8014bbe <HAL_UART_Init+0x2ce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014bea:	4b11      	ldr	r3, [pc, #68]	; (8014c30 <HAL_UART_Init+0x340>)
 8014bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014bf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8014bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014bf8:	d09f      	beq.n	8014b3a <HAL_UART_Init+0x24a>
 8014bfa:	f67f af72 	bls.w	8014ae2 <HAL_UART_Init+0x1f2>
 8014bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014c02:	d087      	beq.n	8014b14 <HAL_UART_Init+0x224>
 8014c04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8014c08:	d0b8      	beq.n	8014b7c <HAL_UART_Init+0x28c>
 8014c0a:	e6b9      	b.n	8014980 <HAL_UART_Init+0x90>
 8014c0c:	efff69f3 	.word	0xefff69f3
 8014c10:	40011000 	.word	0x40011000
 8014c14:	40004400 	.word	0x40004400
 8014c18:	40004800 	.word	0x40004800
 8014c1c:	40004c00 	.word	0x40004c00
 8014c20:	40005000 	.word	0x40005000
 8014c24:	40011400 	.word	0x40011400
 8014c28:	40007800 	.word	0x40007800
 8014c2c:	40007c00 	.word	0x40007c00
 8014c30:	40023800 	.word	0x40023800
 8014c34:	08025a9c 	.word	0x08025a9c
 8014c38:	08025aa0 	.word	0x08025aa0
 8014c3c:	00f42400 	.word	0x00f42400
 8014c40:	01e84800 	.word	0x01e84800
 8014c44:	4b13      	ldr	r3, [pc, #76]	; (8014c94 <HAL_UART_Init+0x3a4>)
 8014c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014c4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8014c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014c52:	f43f af72 	beq.w	8014b3a <HAL_UART_Init+0x24a>
 8014c56:	f67f aef1 	bls.w	8014a3c <HAL_UART_Init+0x14c>
 8014c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014c5e:	f43f af59 	beq.w	8014b14 <HAL_UART_Init+0x224>
 8014c62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8014c66:	d089      	beq.n	8014b7c <HAL_UART_Init+0x28c>
 8014c68:	e68a      	b.n	8014980 <HAL_UART_Init+0x90>
 8014c6a:	4b0a      	ldr	r3, [pc, #40]	; (8014c94 <HAL_UART_Init+0x3a4>)
 8014c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014c70:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8014c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014c78:	f43f af5f 	beq.w	8014b3a <HAL_UART_Init+0x24a>
 8014c7c:	f67f af31 	bls.w	8014ae2 <HAL_UART_Init+0x1f2>
 8014c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014c84:	f43f af46 	beq.w	8014b14 <HAL_UART_Init+0x224>
 8014c88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8014c8c:	f43f af76 	beq.w	8014b7c <HAL_UART_Init+0x28c>
 8014c90:	e676      	b.n	8014980 <HAL_UART_Init+0x90>
 8014c92:	bf00      	nop
 8014c94:	40023800 	.word	0x40023800

08014c98 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8014c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8014c9c:	680f      	ldr	r7, [r1, #0]
 8014c9e:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 8014ca2:	2f01      	cmp	r7, #1
 8014ca4:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 8014ca8:	e9d1 4801 	ldrd	r4, r8, [r1, #4]
 8014cac:	e9d1 c603 	ldrd	ip, r6, [r1, #12]
 8014cb0:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 8014cb4:	d012      	beq.n	8014cdc <FMC_SDRAM_Init+0x44>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8014cb6:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8014cb8:	4f15      	ldr	r7, [pc, #84]	; (8014d10 <FMC_SDRAM_Init+0x78>)
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8014cba:	6803      	ldr	r3, [r0, #0]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8014cbc:	ea42 020e 	orr.w	r2, r2, lr
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8014cc0:	401f      	ands	r7, r3
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8014cc2:	4322      	orrs	r2, r4
 8014cc4:	ea42 0308 	orr.w	r3, r2, r8
 8014cc8:	ea43 030c 	orr.w	r3, r3, ip
 8014ccc:	4333      	orrs	r3, r6
 8014cce:	432b      	orrs	r3, r5
 8014cd0:	430b      	orrs	r3, r1
 8014cd2:	433b      	orrs	r3, r7
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8014cd4:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8014cd6:	2000      	movs	r0, #0
 8014cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8014cdc:	ea44 0408 	orr.w	r4, r4, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8014ce0:	431a      	orrs	r2, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8014ce2:	6807      	ldr	r7, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8014ce4:	ea44 030c 	orr.w	r3, r4, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8014ce8:	f8d0 c004 	ldr.w	ip, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8014cec:	4c08      	ldr	r4, [pc, #32]	; (8014d10 <FMC_SDRAM_Init+0x78>)
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8014cee:	ea42 020e 	orr.w	r2, r2, lr
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8014cf2:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8014cf4:	f427 46f8 	bic.w	r6, r7, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8014cf8:	ea0c 0404 	and.w	r4, ip, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8014cfc:	432b      	orrs	r3, r5
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8014cfe:	4332      	orrs	r2, r6
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8014d00:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8014d02:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8014d04:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8014d06:	6043      	str	r3, [r0, #4]
}
 8014d08:	2000      	movs	r0, #0
 8014d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d0e:	bf00      	nop
 8014d10:	ffff8000 	.word	0xffff8000

08014d14 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8014d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d18:	690b      	ldr	r3, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8014d1a:	2a01      	cmp	r2, #1
 8014d1c:	68cf      	ldr	r7, [r1, #12]
 8014d1e:	694e      	ldr	r6, [r1, #20]
 8014d20:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8014d24:	684d      	ldr	r5, [r1, #4]
 8014d26:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8014d2a:	688c      	ldr	r4, [r1, #8]
 8014d2c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8014d30:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8014d34:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8014d38:	6809      	ldr	r1, [r1, #0]
 8014d3a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8014d3e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8014d42:	ea4f 3707 	mov.w	r7, r7, lsl #12
 8014d46:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8014d4a:	ea4f 5606 	mov.w	r6, r6, lsl #20
 8014d4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8014d52:	ea4f 2104 	mov.w	r1, r4, lsl #8
 8014d56:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 8014d5a:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
 8014d5e:	d012      	beq.n	8014d86 <FMC_SDRAM_Timing_Init+0x72>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8014d60:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8014d64:	6884      	ldr	r4, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8014d66:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8014d6a:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8014d6e:	ea42 0305 	orr.w	r3, r2, r5
 8014d72:	430b      	orrs	r3, r1
 8014d74:	ea43 030e 	orr.w	r3, r3, lr
 8014d78:	ea43 030c 	orr.w	r3, r3, ip
 8014d7c:	4323      	orrs	r3, r4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8014d7e:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8014d80:	2000      	movs	r0, #0
 8014d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8014d86:	4329      	orrs	r1, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8014d88:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8014d8c:	6885      	ldr	r5, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8014d8e:	ea41 0108 	orr.w	r1, r1, r8
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8014d92:	68c4      	ldr	r4, [r0, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8014d94:	4e07      	ldr	r6, [pc, #28]	; (8014db4 <FMC_SDRAM_Timing_Init+0xa0>)
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8014d96:	ea41 030e 	orr.w	r3, r1, lr
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8014d9a:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8014d9e:	402e      	ands	r6, r5
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8014da0:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8014da4:	4316      	orrs	r6, r2
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8014da6:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8014da8:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8014daa:	60c3      	str	r3, [r0, #12]
}
 8014dac:	2000      	movs	r0, #0
 8014dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014db2:	bf00      	nop
 8014db4:	ff0f0fff 	.word	0xff0f0fff

08014db8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8014db8:	b430      	push	{r4, r5}
  __IO uint32_t tmpr = 0;
 8014dba:	2200      	movs	r2, #0
{
 8014dbc:	b082      	sub	sp, #8
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8014dbe:	684d      	ldr	r5, [r1, #4]
{
 8014dc0:	4604      	mov	r4, r0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8014dc2:	680b      	ldr	r3, [r1, #0]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 8014dc4:	4610      	mov	r0, r2
  __IO uint32_t tmpr = 0;
 8014dc6:	9201      	str	r2, [sp, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8014dc8:	432b      	orrs	r3, r5
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8014dca:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8014dce:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8014dd2:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8014dd4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8014dd8:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 8014dda:	9b01      	ldr	r3, [sp, #4]
 8014ddc:	6123      	str	r3, [r4, #16]
}
 8014dde:	b002      	add	sp, #8
 8014de0:	bc30      	pop	{r4, r5}
 8014de2:	4770      	bx	lr

08014de4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8014de4:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 8014de6:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 8014de8:	6953      	ldr	r3, [r2, #20]
 8014dea:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8014dee:	6151      	str	r1, [r2, #20]
}
 8014df0:	4770      	bx	lr
 8014df2:	bf00      	nop

08014df4 <SDMMC_GetCmdResp1.part.2>:
  * @brief  Checks for error conditions for R1 response.
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
 8014df4:	b410      	push	{r4}
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8014df6:	f100 0214 	add.w	r2, r0, #20
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
 8014dfa:	b083      	sub	sp, #12
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8014dfc:	f240 54ff 	movw	r4, #1535	; 0x5ff
  __IO uint32_t tmp = 0;
 8014e00:	2100      	movs	r1, #0
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014e02:	4b37      	ldr	r3, [pc, #220]	; (8014ee0 <SDMMC_GetCmdResp1.part.2+0xec>)
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8014e04:	6384      	str	r4, [r0, #56]	; 0x38
  __IO uint32_t tmp = 0;
 8014e06:	9101      	str	r1, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8014e08:	9201      	str	r2, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8014e0a:	9a01      	ldr	r2, [sp, #4]
 8014e0c:	6812      	ldr	r2, [r2, #0]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014e0e:	4013      	ands	r3, r2
 8014e10:	b34b      	cbz	r3, 8014e66 <SDMMC_GetCmdResp1.part.2+0x72>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014e12:	428a      	cmp	r2, r1
 8014e14:	db2c      	blt.n	8014e70 <SDMMC_GetCmdResp1.part.2+0x7c>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8014e16:	0053      	lsls	r3, r2, #1
 8014e18:	d433      	bmi.n	8014e82 <SDMMC_GetCmdResp1.part.2+0x8e>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014e1a:	0094      	lsls	r4, r2, #2
 8014e1c:	d436      	bmi.n	8014e8c <SDMMC_GetCmdResp1.part.2+0x98>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014e1e:	00d1      	lsls	r1, r2, #3
 8014e20:	d42c      	bmi.n	8014e7c <SDMMC_GetCmdResp1.part.2+0x88>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014e22:	0113      	lsls	r3, r2, #4
 8014e24:	d437      	bmi.n	8014e96 <SDMMC_GetCmdResp1.part.2+0xa2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014e26:	0154      	lsls	r4, r2, #5
 8014e28:	d438      	bmi.n	8014e9c <SDMMC_GetCmdResp1.part.2+0xa8>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014e2a:	01d1      	lsls	r1, r2, #7
 8014e2c:	d430      	bmi.n	8014e90 <SDMMC_GetCmdResp1.part.2+0x9c>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014e2e:	0213      	lsls	r3, r2, #8
 8014e30:	d437      	bmi.n	8014ea2 <SDMMC_GetCmdResp1.part.2+0xae>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014e32:	0254      	lsls	r4, r2, #9
 8014e34:	d438      	bmi.n	8014ea8 <SDMMC_GetCmdResp1.part.2+0xb4>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014e36:	0291      	lsls	r1, r2, #10
 8014e38:	d439      	bmi.n	8014eae <SDMMC_GetCmdResp1.part.2+0xba>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014e3a:	02d3      	lsls	r3, r2, #11
 8014e3c:	d43a      	bmi.n	8014eb4 <SDMMC_GetCmdResp1.part.2+0xc0>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014e3e:	0354      	lsls	r4, r2, #13
 8014e40:	d43b      	bmi.n	8014eba <SDMMC_GetCmdResp1.part.2+0xc6>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014e42:	0391      	lsls	r1, r2, #14
 8014e44:	d43c      	bmi.n	8014ec0 <SDMMC_GetCmdResp1.part.2+0xcc>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014e46:	03d3      	lsls	r3, r2, #15
 8014e48:	d43d      	bmi.n	8014ec6 <SDMMC_GetCmdResp1.part.2+0xd2>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014e4a:	0414      	lsls	r4, r2, #16
 8014e4c:	d43e      	bmi.n	8014ecc <SDMMC_GetCmdResp1.part.2+0xd8>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014e4e:	0451      	lsls	r1, r2, #17
 8014e50:	d43f      	bmi.n	8014ed2 <SDMMC_GetCmdResp1.part.2+0xde>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014e52:	0493      	lsls	r3, r2, #18
 8014e54:	d440      	bmi.n	8014ed8 <SDMMC_GetCmdResp1.part.2+0xe4>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8014e56:	f012 0f08 	tst.w	r2, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014e5a:	bf14      	ite	ne
 8014e5c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8014e60:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8014e64:	e000      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
    return SDMMC_ERROR_NONE;
 8014e66:	4618      	mov	r0, r3
  }
}
 8014e68:	b003      	add	sp, #12
 8014e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e6e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014e70:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
}
 8014e74:	b003      	add	sp, #12
 8014e76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e7a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014e7c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014e80:	e7f2      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014e82:	2040      	movs	r0, #64	; 0x40
}
 8014e84:	b003      	add	sp, #12
 8014e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e8a:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8014e8c:	2080      	movs	r0, #128	; 0x80
 8014e8e:	e7eb      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014e90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014e94:	e7e8      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014e96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014e9a:	e7e5      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014e9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014ea0:	e7e2      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014ea2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8014ea6:	e7df      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014ea8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8014eac:	e7dc      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014eae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8014eb2:	e7d9      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
    return SDMMC_ERROR_CC_ERR;
 8014eb4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8014eb8:	e7d6      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014eba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8014ebe:	e7d3      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014ec0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8014ec4:	e7d0      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014ec6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8014eca:	e7cd      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014ecc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8014ed0:	e7ca      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014ed2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8014ed6:	e7c7      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
    return SDMMC_ERROR_ERASE_RESET;
 8014ed8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8014edc:	e7c4      	b.n	8014e68 <SDMMC_GetCmdResp1.part.2+0x74>
 8014ede:	bf00      	nop
 8014ee0:	fdffe008 	.word	0xfdffe008

08014ee4 <SDMMC_Init>:
{
 8014ee4:	b084      	sub	sp, #16
 8014ee6:	b470      	push	{r4, r5, r6}
 8014ee8:	ae04      	add	r6, sp, #16
             Init.ClockPowerSave      |\
 8014eea:	9c07      	ldr	r4, [sp, #28]
{
 8014eec:	4605      	mov	r5, r0
}
 8014eee:	2000      	movs	r0, #0
{
 8014ef0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8014ef4:	460b      	mov	r3, r1
             Init.ClockBypass         |\
 8014ef6:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 8014efa:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8014efc:	9a08      	ldr	r2, [sp, #32]
             Init.ClockBypass         |\
 8014efe:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8014f00:	9909      	ldr	r1, [sp, #36]	; 0x24
             Init.ClockPowerSave      |\
 8014f02:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8014f04:	686c      	ldr	r4, [r5, #4]
             Init.BusWide             |\
 8014f06:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8014f08:	4a03      	ldr	r2, [pc, #12]	; (8014f18 <SDMMC_Init+0x34>)
             Init.HardwareFlowControl |\
 8014f0a:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8014f0c:	4022      	ands	r2, r4
 8014f0e:	4313      	orrs	r3, r2
 8014f10:	606b      	str	r3, [r5, #4]
}
 8014f12:	bc70      	pop	{r4, r5, r6}
 8014f14:	b004      	add	sp, #16
 8014f16:	4770      	bx	lr
 8014f18:	ffff8100 	.word	0xffff8100

08014f1c <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8014f1c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8014f20:	4770      	bx	lr
 8014f22:	bf00      	nop

08014f24 <SDMMC_PowerState_ON>:
{  
 8014f24:	4603      	mov	r3, r0
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8014f26:	2203      	movs	r2, #3
}
 8014f28:	2000      	movs	r0, #0
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8014f2a:	601a      	str	r2, [r3, #0]
}
 8014f2c:	4770      	bx	lr
 8014f2e:	bf00      	nop

08014f30 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8014f30:	6800      	ldr	r0, [r0, #0]
}
 8014f32:	f000 0003 	and.w	r0, r0, #3
 8014f36:	4770      	bx	lr

08014f38 <SDMMC_GetResponse>:
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8014f38:	3014      	adds	r0, #20
{
 8014f3a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8014f3c:	2300      	movs	r3, #0
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8014f3e:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 8014f40:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8014f42:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8014f44:	9b01      	ldr	r3, [sp, #4]
 8014f46:	6818      	ldr	r0, [r3, #0]
}  
 8014f48:	b002      	add	sp, #8
 8014f4a:	4770      	bx	lr

08014f4c <SDMMC_ConfigData>:
{
 8014f4c:	b430      	push	{r4, r5}
 8014f4e:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 8014f50:	680c      	ldr	r4, [r1, #0]
}
 8014f52:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8014f54:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
 8014f58:	432b      	orrs	r3, r5
  SDMMCx->DLEN = Data->DataLength;
 8014f5a:	684d      	ldr	r5, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 8014f5c:	6254      	str	r4, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 8014f5e:	690c      	ldr	r4, [r1, #16]
  SDMMCx->DLEN = Data->DataLength;
 8014f60:	6295      	str	r5, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 8014f62:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8014f64:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8014f66:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 8014f68:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8014f6a:	f024 01f7 	bic.w	r1, r4, #247	; 0xf7
 8014f6e:	430b      	orrs	r3, r1
}
 8014f70:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8014f72:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8014f74:	4770      	bx	lr
 8014f76:	bf00      	nop

08014f78 <SDMMC_CmdBlockLength>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8014f78:	4b1b      	ldr	r3, [pc, #108]	; (8014fe8 <SDMMC_CmdBlockLength+0x70>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8014f7a:	4a1c      	ldr	r2, [pc, #112]	; (8014fec <SDMMC_CmdBlockLength+0x74>)
{
 8014f7c:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8014f7e:	681c      	ldr	r4, [r3, #0]
 8014f80:	f241 3388 	movw	r3, #5000	; 0x1388
 8014f84:	4d1a      	ldr	r5, [pc, #104]	; (8014ff0 <SDMMC_CmdBlockLength+0x78>)
  SDMMCx->ARG = Command->Argument;
 8014f86:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8014f88:	fba5 4104 	umull	r4, r1, r5, r4
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8014f8c:	68c4      	ldr	r4, [r0, #12]
 8014f8e:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8014f90:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8014f92:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8014f96:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8014f9a:	60c2      	str	r2, [r0, #12]
 8014f9c:	e003      	b.n	8014fa6 <SDMMC_CmdBlockLength+0x2e>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8014f9e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8014fa0:	f012 0f45 	tst.w	r2, #69	; 0x45
 8014fa4:	d106      	bne.n	8014fb4 <SDMMC_CmdBlockLength+0x3c>
    if (count-- == 0)
 8014fa6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8014faa:	d2f8      	bcs.n	8014f9e <SDMMC_CmdBlockLength+0x26>
      return SDMMC_ERROR_TIMEOUT;
 8014fac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8014fb0:	bc30      	pop	{r4, r5}
 8014fb2:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014fb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014fb6:	075a      	lsls	r2, r3, #29
 8014fb8:	d40e      	bmi.n	8014fd8 <SDMMC_CmdBlockLength+0x60>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014fba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014fbc:	07db      	lsls	r3, r3, #31
 8014fbe:	d406      	bmi.n	8014fce <SDMMC_CmdBlockLength+0x56>
  return (uint8_t)(SDMMCx->RESPCMD);
 8014fc0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014fc2:	b2db      	uxtb	r3, r3
 8014fc4:	2b10      	cmp	r3, #16
 8014fc6:	d00c      	beq.n	8014fe2 <SDMMC_CmdBlockLength+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014fc8:	2001      	movs	r0, #1
}
 8014fca:	bc30      	pop	{r4, r5}
 8014fcc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014fce:	2301      	movs	r3, #1
}
 8014fd0:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014fd2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014fd4:	4618      	mov	r0, r3
}
 8014fd6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014fd8:	2304      	movs	r3, #4
}
 8014fda:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014fdc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014fde:	4618      	mov	r0, r3
}
 8014fe0:	4770      	bx	lr
 8014fe2:	bc30      	pop	{r4, r5}
 8014fe4:	f7ff bf06 	b.w	8014df4 <SDMMC_GetCmdResp1.part.2>
 8014fe8:	2000002c 	.word	0x2000002c
 8014fec:	fffff000 	.word	0xfffff000
 8014ff0:	10624dd3 	.word	0x10624dd3

08014ff4 <SDMMC_CmdReadSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8014ff4:	4a1c      	ldr	r2, [pc, #112]	; (8015068 <SDMMC_CmdReadSingleBlock+0x74>)
 8014ff6:	4b1d      	ldr	r3, [pc, #116]	; (801506c <SDMMC_CmdReadSingleBlock+0x78>)
 8014ff8:	6812      	ldr	r2, [r2, #0]
{
 8014ffa:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8014ffc:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8014ffe:	f240 4451 	movw	r4, #1105	; 0x451
 8015002:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015004:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015008:	4919      	ldr	r1, [pc, #100]	; (8015070 <SDMMC_CmdReadSingleBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 801500a:	f241 3388 	movw	r3, #5000	; 0x1388
 801500e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015010:	4029      	ands	r1, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015012:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015016:	430c      	orrs	r4, r1
 8015018:	60c4      	str	r4, [r0, #12]
 801501a:	e003      	b.n	8015024 <SDMMC_CmdReadSingleBlock+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 801501c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801501e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8015022:	d106      	bne.n	8015032 <SDMMC_CmdReadSingleBlock+0x3e>
    if (count-- == 0)
 8015024:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8015028:	d2f8      	bcs.n	801501c <SDMMC_CmdReadSingleBlock+0x28>
      return SDMMC_ERROR_TIMEOUT;
 801502a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 801502e:	bc30      	pop	{r4, r5}
 8015030:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8015032:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015034:	075a      	lsls	r2, r3, #29
 8015036:	d40e      	bmi.n	8015056 <SDMMC_CmdReadSingleBlock+0x62>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8015038:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801503a:	07db      	lsls	r3, r3, #31
 801503c:	d406      	bmi.n	801504c <SDMMC_CmdReadSingleBlock+0x58>
  return (uint8_t)(SDMMCx->RESPCMD);
 801503e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8015040:	b2db      	uxtb	r3, r3
 8015042:	2b11      	cmp	r3, #17
 8015044:	d00c      	beq.n	8015060 <SDMMC_CmdReadSingleBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015046:	2001      	movs	r0, #1
}
 8015048:	bc30      	pop	{r4, r5}
 801504a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801504c:	2301      	movs	r3, #1
}
 801504e:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8015050:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015052:	4618      	mov	r0, r3
}
 8015054:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015056:	2304      	movs	r3, #4
}
 8015058:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801505a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801505c:	4618      	mov	r0, r3
}
 801505e:	4770      	bx	lr
 8015060:	bc30      	pop	{r4, r5}
 8015062:	f7ff bec7 	b.w	8014df4 <SDMMC_GetCmdResp1.part.2>
 8015066:	bf00      	nop
 8015068:	2000002c 	.word	0x2000002c
 801506c:	10624dd3 	.word	0x10624dd3
 8015070:	fffff000 	.word	0xfffff000

08015074 <SDMMC_CmdReadMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015074:	4a1c      	ldr	r2, [pc, #112]	; (80150e8 <SDMMC_CmdReadMultiBlock+0x74>)
 8015076:	4b1d      	ldr	r3, [pc, #116]	; (80150ec <SDMMC_CmdReadMultiBlock+0x78>)
 8015078:	6812      	ldr	r2, [r2, #0]
{
 801507a:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 801507c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801507e:	f240 4452 	movw	r4, #1106	; 0x452
 8015082:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015084:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015088:	4919      	ldr	r1, [pc, #100]	; (80150f0 <SDMMC_CmdReadMultiBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 801508a:	f241 3388 	movw	r3, #5000	; 0x1388
 801508e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015090:	4029      	ands	r1, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015092:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015096:	430c      	orrs	r4, r1
 8015098:	60c4      	str	r4, [r0, #12]
 801509a:	e003      	b.n	80150a4 <SDMMC_CmdReadMultiBlock+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 801509c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801509e:	f012 0f45 	tst.w	r2, #69	; 0x45
 80150a2:	d106      	bne.n	80150b2 <SDMMC_CmdReadMultiBlock+0x3e>
    if (count-- == 0)
 80150a4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80150a8:	d2f8      	bcs.n	801509c <SDMMC_CmdReadMultiBlock+0x28>
      return SDMMC_ERROR_TIMEOUT;
 80150aa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80150ae:	bc30      	pop	{r4, r5}
 80150b0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80150b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80150b4:	075a      	lsls	r2, r3, #29
 80150b6:	d40e      	bmi.n	80150d6 <SDMMC_CmdReadMultiBlock+0x62>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80150b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80150ba:	07db      	lsls	r3, r3, #31
 80150bc:	d406      	bmi.n	80150cc <SDMMC_CmdReadMultiBlock+0x58>
  return (uint8_t)(SDMMCx->RESPCMD);
 80150be:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80150c0:	b2db      	uxtb	r3, r3
 80150c2:	2b12      	cmp	r3, #18
 80150c4:	d00c      	beq.n	80150e0 <SDMMC_CmdReadMultiBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80150c6:	2001      	movs	r0, #1
}
 80150c8:	bc30      	pop	{r4, r5}
 80150ca:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80150cc:	2301      	movs	r3, #1
}
 80150ce:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80150d0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80150d2:	4618      	mov	r0, r3
}
 80150d4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80150d6:	2304      	movs	r3, #4
}
 80150d8:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80150da:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80150dc:	4618      	mov	r0, r3
}
 80150de:	4770      	bx	lr
 80150e0:	bc30      	pop	{r4, r5}
 80150e2:	f7ff be87 	b.w	8014df4 <SDMMC_GetCmdResp1.part.2>
 80150e6:	bf00      	nop
 80150e8:	2000002c 	.word	0x2000002c
 80150ec:	10624dd3 	.word	0x10624dd3
 80150f0:	fffff000 	.word	0xfffff000

080150f4 <SDMMC_CmdWriteSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80150f4:	4b1b      	ldr	r3, [pc, #108]	; (8015164 <SDMMC_CmdWriteSingleBlock+0x70>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80150f6:	4a1c      	ldr	r2, [pc, #112]	; (8015168 <SDMMC_CmdWriteSingleBlock+0x74>)
{
 80150f8:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80150fa:	681c      	ldr	r4, [r3, #0]
 80150fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8015100:	4d1a      	ldr	r5, [pc, #104]	; (801516c <SDMMC_CmdWriteSingleBlock+0x78>)
  SDMMCx->ARG = Command->Argument;
 8015102:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015104:	fba5 4104 	umull	r4, r1, r5, r4
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015108:	68c4      	ldr	r4, [r0, #12]
 801510a:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 801510c:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801510e:	f442 628b 	orr.w	r2, r2, #1112	; 0x458
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015112:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015116:	60c2      	str	r2, [r0, #12]
 8015118:	e003      	b.n	8015122 <SDMMC_CmdWriteSingleBlock+0x2e>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 801511a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801511c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8015120:	d106      	bne.n	8015130 <SDMMC_CmdWriteSingleBlock+0x3c>
    if (count-- == 0)
 8015122:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8015126:	d2f8      	bcs.n	801511a <SDMMC_CmdWriteSingleBlock+0x26>
      return SDMMC_ERROR_TIMEOUT;
 8015128:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 801512c:	bc30      	pop	{r4, r5}
 801512e:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8015130:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015132:	075a      	lsls	r2, r3, #29
 8015134:	d40e      	bmi.n	8015154 <SDMMC_CmdWriteSingleBlock+0x60>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8015136:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015138:	07db      	lsls	r3, r3, #31
 801513a:	d406      	bmi.n	801514a <SDMMC_CmdWriteSingleBlock+0x56>
  return (uint8_t)(SDMMCx->RESPCMD);
 801513c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801513e:	b2db      	uxtb	r3, r3
 8015140:	2b18      	cmp	r3, #24
 8015142:	d00c      	beq.n	801515e <SDMMC_CmdWriteSingleBlock+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015144:	2001      	movs	r0, #1
}
 8015146:	bc30      	pop	{r4, r5}
 8015148:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801514a:	2301      	movs	r3, #1
}
 801514c:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801514e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015150:	4618      	mov	r0, r3
}
 8015152:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015154:	2304      	movs	r3, #4
}
 8015156:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015158:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801515a:	4618      	mov	r0, r3
}
 801515c:	4770      	bx	lr
 801515e:	bc30      	pop	{r4, r5}
 8015160:	f7ff be48 	b.w	8014df4 <SDMMC_GetCmdResp1.part.2>
 8015164:	2000002c 	.word	0x2000002c
 8015168:	fffff000 	.word	0xfffff000
 801516c:	10624dd3 	.word	0x10624dd3

08015170 <SDMMC_CmdWriteMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015170:	4a1c      	ldr	r2, [pc, #112]	; (80151e4 <SDMMC_CmdWriteMultiBlock+0x74>)
 8015172:	4b1d      	ldr	r3, [pc, #116]	; (80151e8 <SDMMC_CmdWriteMultiBlock+0x78>)
 8015174:	6812      	ldr	r2, [r2, #0]
{
 8015176:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8015178:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801517a:	f240 4459 	movw	r4, #1113	; 0x459
 801517e:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015180:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015184:	4919      	ldr	r1, [pc, #100]	; (80151ec <SDMMC_CmdWriteMultiBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015186:	f241 3388 	movw	r3, #5000	; 0x1388
 801518a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801518c:	4029      	ands	r1, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 801518e:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015192:	430c      	orrs	r4, r1
 8015194:	60c4      	str	r4, [r0, #12]
 8015196:	e003      	b.n	80151a0 <SDMMC_CmdWriteMultiBlock+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8015198:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801519a:	f012 0f45 	tst.w	r2, #69	; 0x45
 801519e:	d106      	bne.n	80151ae <SDMMC_CmdWriteMultiBlock+0x3e>
    if (count-- == 0)
 80151a0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80151a4:	d2f8      	bcs.n	8015198 <SDMMC_CmdWriteMultiBlock+0x28>
      return SDMMC_ERROR_TIMEOUT;
 80151a6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80151aa:	bc30      	pop	{r4, r5}
 80151ac:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80151ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80151b0:	075a      	lsls	r2, r3, #29
 80151b2:	d40e      	bmi.n	80151d2 <SDMMC_CmdWriteMultiBlock+0x62>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80151b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80151b6:	07db      	lsls	r3, r3, #31
 80151b8:	d406      	bmi.n	80151c8 <SDMMC_CmdWriteMultiBlock+0x58>
  return (uint8_t)(SDMMCx->RESPCMD);
 80151ba:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80151bc:	b2db      	uxtb	r3, r3
 80151be:	2b19      	cmp	r3, #25
 80151c0:	d00c      	beq.n	80151dc <SDMMC_CmdWriteMultiBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80151c2:	2001      	movs	r0, #1
}
 80151c4:	bc30      	pop	{r4, r5}
 80151c6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80151c8:	2301      	movs	r3, #1
}
 80151ca:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80151cc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80151ce:	4618      	mov	r0, r3
}
 80151d0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80151d2:	2304      	movs	r3, #4
}
 80151d4:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80151d6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80151d8:	4618      	mov	r0, r3
}
 80151da:	4770      	bx	lr
 80151dc:	bc30      	pop	{r4, r5}
 80151de:	f7ff be09 	b.w	8014df4 <SDMMC_GetCmdResp1.part.2>
 80151e2:	bf00      	nop
 80151e4:	2000002c 	.word	0x2000002c
 80151e8:	10624dd3 	.word	0x10624dd3
 80151ec:	fffff000 	.word	0xfffff000

080151f0 <SDMMC_CmdStopTransfer>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80151f0:	4b1b      	ldr	r3, [pc, #108]	; (8015260 <SDMMC_CmdStopTransfer+0x70>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80151f2:	f240 414c 	movw	r1, #1100	; 0x44c
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80151f6:	4a1b      	ldr	r2, [pc, #108]	; (8015264 <SDMMC_CmdStopTransfer+0x74>)
 80151f8:	681b      	ldr	r3, [r3, #0]
{
 80151fa:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80151fc:	2400      	movs	r4, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80151fe:	fba2 2303 	umull	r2, r3, r2, r3
  SDMMCx->ARG = Command->Argument;
 8015202:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015204:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
 8015208:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 801520a:	0a5a      	lsrs	r2, r3, #9
 801520c:	4b16      	ldr	r3, [pc, #88]	; (8015268 <SDMMC_CmdStopTransfer+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801520e:	402c      	ands	r4, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015210:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015214:	4321      	orrs	r1, r4
 8015216:	60c1      	str	r1, [r0, #12]
    if (count-- == 0)
 8015218:	b18b      	cbz	r3, 801523e <SDMMC_CmdStopTransfer+0x4e>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 801521a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801521c:	3b01      	subs	r3, #1
 801521e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8015222:	d0f9      	beq.n	8015218 <SDMMC_CmdStopTransfer+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8015224:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015226:	075a      	lsls	r2, r3, #29
 8015228:	d412      	bmi.n	8015250 <SDMMC_CmdStopTransfer+0x60>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801522a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801522c:	07db      	lsls	r3, r3, #31
 801522e:	d40a      	bmi.n	8015246 <SDMMC_CmdStopTransfer+0x56>
  return (uint8_t)(SDMMCx->RESPCMD);
 8015230:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8015232:	b2db      	uxtb	r3, r3
 8015234:	2b0c      	cmp	r3, #12
 8015236:	d010      	beq.n	801525a <SDMMC_CmdStopTransfer+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015238:	2001      	movs	r0, #1
}
 801523a:	bc30      	pop	{r4, r5}
 801523c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 801523e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8015242:	bc30      	pop	{r4, r5}
 8015244:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8015246:	2301      	movs	r3, #1
}
 8015248:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801524a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801524c:	4618      	mov	r0, r3
}
 801524e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015250:	2304      	movs	r3, #4
}
 8015252:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015254:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8015256:	4618      	mov	r0, r3
}
 8015258:	4770      	bx	lr
 801525a:	bc30      	pop	{r4, r5}
 801525c:	f7ff bdca 	b.w	8014df4 <SDMMC_GetCmdResp1.part.2>
 8015260:	2000002c 	.word	0x2000002c
 8015264:	10624dd3 	.word	0x10624dd3
 8015268:	05f5e100 	.word	0x05f5e100

0801526c <SDMMC_CmdSelDesel>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 801526c:	4b1c      	ldr	r3, [pc, #112]	; (80152e0 <SDMMC_CmdSelDesel+0x74>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801526e:	f240 4147 	movw	r1, #1095	; 0x447
{
 8015272:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	4d1b      	ldr	r5, [pc, #108]	; (80152e4 <SDMMC_CmdSelDesel+0x78>)
  SDMMCx->ARG = Command->Argument;
 8015278:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801527a:	4c1b      	ldr	r4, [pc, #108]	; (80152e8 <SDMMC_CmdSelDesel+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 801527c:	fba5 3203 	umull	r3, r2, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015280:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015282:	f241 3388 	movw	r3, #5000	; 0x1388
 8015286:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015288:	402c      	ands	r4, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 801528a:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801528e:	4321      	orrs	r1, r4
 8015290:	60c1      	str	r1, [r0, #12]
 8015292:	e003      	b.n	801529c <SDMMC_CmdSelDesel+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8015294:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8015296:	f012 0f45 	tst.w	r2, #69	; 0x45
 801529a:	d106      	bne.n	80152aa <SDMMC_CmdSelDesel+0x3e>
    if (count-- == 0)
 801529c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80152a0:	d2f8      	bcs.n	8015294 <SDMMC_CmdSelDesel+0x28>
      return SDMMC_ERROR_TIMEOUT;
 80152a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80152a6:	bc30      	pop	{r4, r5}
 80152a8:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80152aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80152ac:	075a      	lsls	r2, r3, #29
 80152ae:	d40e      	bmi.n	80152ce <SDMMC_CmdSelDesel+0x62>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80152b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80152b2:	07db      	lsls	r3, r3, #31
 80152b4:	d406      	bmi.n	80152c4 <SDMMC_CmdSelDesel+0x58>
  return (uint8_t)(SDMMCx->RESPCMD);
 80152b6:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80152b8:	b2db      	uxtb	r3, r3
 80152ba:	2b07      	cmp	r3, #7
 80152bc:	d00c      	beq.n	80152d8 <SDMMC_CmdSelDesel+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80152be:	2001      	movs	r0, #1
}
 80152c0:	bc30      	pop	{r4, r5}
 80152c2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80152c4:	2301      	movs	r3, #1
}
 80152c6:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80152c8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80152ca:	4618      	mov	r0, r3
}
 80152cc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80152ce:	2304      	movs	r3, #4
}
 80152d0:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80152d2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80152d4:	4618      	mov	r0, r3
}
 80152d6:	4770      	bx	lr
 80152d8:	bc30      	pop	{r4, r5}
 80152da:	f7ff bd8b 	b.w	8014df4 <SDMMC_GetCmdResp1.part.2>
 80152de:	bf00      	nop
 80152e0:	2000002c 	.word	0x2000002c
 80152e4:	10624dd3 	.word	0x10624dd3
 80152e8:	fffff000 	.word	0xfffff000

080152ec <SDMMC_CmdGoIdleState>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80152ec:	4b13      	ldr	r3, [pc, #76]	; (801533c <SDMMC_CmdGoIdleState+0x50>)
{
 80152ee:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 80152f0:	2200      	movs	r2, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80152f2:	6818      	ldr	r0, [r3, #0]
 80152f4:	f241 3388 	movw	r3, #5000	; 0x1388
{
 80152f8:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80152fa:	4c11      	ldr	r4, [pc, #68]	; (8015340 <SDMMC_CmdGoIdleState+0x54>)
  SDMMCx->ARG = Command->Argument;
 80152fc:	608a      	str	r2, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80152fe:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8015302:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015306:	68cc      	ldr	r4, [r1, #12]
 8015308:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 801530a:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801530c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8015310:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015314:	60ca      	str	r2, [r1, #12]
 8015316:	e002      	b.n	801531e <SDMMC_CmdGoIdleState+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8015318:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 801531a:	0612      	lsls	r2, r2, #24
 801531c:	d407      	bmi.n	801532e <SDMMC_CmdGoIdleState+0x42>
    if (count-- == 0)
 801531e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8015322:	d2f9      	bcs.n	8015318 <SDMMC_CmdGoIdleState+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8015324:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8015328:	f85d 4b04 	ldr.w	r4, [sp], #4
 801532c:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 801532e:	f240 53ff 	movw	r3, #1535	; 0x5ff
  return SDMMC_ERROR_NONE;
 8015332:	2000      	movs	r0, #0
}
 8015334:	f85d 4b04 	ldr.w	r4, [sp], #4
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8015338:	638b      	str	r3, [r1, #56]	; 0x38
}
 801533a:	4770      	bx	lr
 801533c:	2000002c 	.word	0x2000002c
 8015340:	10624dd3 	.word	0x10624dd3

08015344 <SDMMC_CmdOperCond>:
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8015344:	4b1c      	ldr	r3, [pc, #112]	; (80153b8 <SDMMC_CmdOperCond+0x74>)
{
 8015346:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8015348:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 801534c:	6818      	ldr	r0, [r3, #0]
 801534e:	f241 3388 	movw	r3, #5000	; 0x1388
{
 8015352:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8015354:	4c19      	ldr	r4, [pc, #100]	; (80153bc <SDMMC_CmdOperCond+0x78>)
  SDMMCx->ARG = Command->Argument;
 8015356:	608a      	str	r2, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8015358:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801535c:	4a18      	ldr	r2, [pc, #96]	; (80153c0 <SDMMC_CmdOperCond+0x7c>)
 801535e:	68cc      	ldr	r4, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8015360:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015362:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8015364:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015368:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
 801536c:	60ca      	str	r2, [r1, #12]
 801536e:	e003      	b.n	8015378 <SDMMC_CmdOperCond+0x34>
    if (count-- == 0)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8015370:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8015372:	f012 0f45 	tst.w	r2, #69	; 0x45
 8015376:	d107      	bne.n	8015388 <SDMMC_CmdOperCond+0x44>
    if (count-- == 0)
 8015378:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 801537c:	d2f8      	bcs.n	8015370 <SDMMC_CmdOperCond+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 801537e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8015382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015386:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8015388:	6b48      	ldr	r0, [r1, #52]	; 0x34
 801538a:	f010 0004 	ands.w	r0, r0, #4
 801538e:	d10c      	bne.n	80153aa <SDMMC_CmdOperCond+0x66>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8015390:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8015392:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8015396:	d004      	beq.n	80153a2 <SDMMC_CmdOperCond+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8015398:	2340      	movs	r3, #64	; 0x40
}
 801539a:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801539e:	638b      	str	r3, [r1, #56]	; 0x38
}
 80153a0:	4770      	bx	lr
  }
  
  return SDMMC_ERROR_NONE;
 80153a2:	4618      	mov	r0, r3
}
 80153a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153a8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80153aa:	2340      	movs	r3, #64	; 0x40
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80153ac:	2004      	movs	r0, #4
}
 80153ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80153b2:	638b      	str	r3, [r1, #56]	; 0x38
}
 80153b4:	4770      	bx	lr
 80153b6:	bf00      	nop
 80153b8:	2000002c 	.word	0x2000002c
 80153bc:	10624dd3 	.word	0x10624dd3
 80153c0:	fffff000 	.word	0xfffff000

080153c4 <SDMMC_CmdAppCommand>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80153c4:	4a1c      	ldr	r2, [pc, #112]	; (8015438 <SDMMC_CmdAppCommand+0x74>)
 80153c6:	4b1d      	ldr	r3, [pc, #116]	; (801543c <SDMMC_CmdAppCommand+0x78>)
 80153c8:	6812      	ldr	r2, [r2, #0]
{
 80153ca:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80153cc:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80153ce:	f240 4477 	movw	r4, #1143	; 0x477
 80153d2:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80153d4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80153d8:	4919      	ldr	r1, [pc, #100]	; (8015440 <SDMMC_CmdAppCommand+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80153da:	f241 3388 	movw	r3, #5000	; 0x1388
 80153de:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80153e0:	4029      	ands	r1, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80153e2:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80153e6:	430c      	orrs	r4, r1
 80153e8:	60c4      	str	r4, [r0, #12]
 80153ea:	e003      	b.n	80153f4 <SDMMC_CmdAppCommand+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80153ec:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80153ee:	f012 0f45 	tst.w	r2, #69	; 0x45
 80153f2:	d106      	bne.n	8015402 <SDMMC_CmdAppCommand+0x3e>
    if (count-- == 0)
 80153f4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80153f8:	d2f8      	bcs.n	80153ec <SDMMC_CmdAppCommand+0x28>
      return SDMMC_ERROR_TIMEOUT;
 80153fa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80153fe:	bc30      	pop	{r4, r5}
 8015400:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8015402:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015404:	075a      	lsls	r2, r3, #29
 8015406:	d40e      	bmi.n	8015426 <SDMMC_CmdAppCommand+0x62>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8015408:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801540a:	07db      	lsls	r3, r3, #31
 801540c:	d406      	bmi.n	801541c <SDMMC_CmdAppCommand+0x58>
  return (uint8_t)(SDMMCx->RESPCMD);
 801540e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8015410:	b2db      	uxtb	r3, r3
 8015412:	2b37      	cmp	r3, #55	; 0x37
 8015414:	d00c      	beq.n	8015430 <SDMMC_CmdAppCommand+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015416:	2001      	movs	r0, #1
}
 8015418:	bc30      	pop	{r4, r5}
 801541a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801541c:	2301      	movs	r3, #1
}
 801541e:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8015420:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015422:	4618      	mov	r0, r3
}
 8015424:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015426:	2304      	movs	r3, #4
}
 8015428:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801542a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801542c:	4618      	mov	r0, r3
}
 801542e:	4770      	bx	lr
 8015430:	bc30      	pop	{r4, r5}
 8015432:	f7ff bcdf 	b.w	8014df4 <SDMMC_GetCmdResp1.part.2>
 8015436:	bf00      	nop
 8015438:	2000002c 	.word	0x2000002c
 801543c:	10624dd3 	.word	0x10624dd3
 8015440:	fffff000 	.word	0xfffff000

08015444 <SDMMC_CmdAppOperCommand>:
{
 8015444:	b430      	push	{r4, r5}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8015446:	4d17      	ldr	r5, [pc, #92]	; (80154a4 <SDMMC_CmdAppOperCommand+0x60>)
{
 8015448:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 801544a:	4a17      	ldr	r2, [pc, #92]	; (80154a8 <SDMMC_CmdAppOperCommand+0x64>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801544c:	f240 4069 	movw	r0, #1129	; 0x469
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8015450:	430d      	orrs	r5, r1
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8015452:	4b16      	ldr	r3, [pc, #88]	; (80154ac <SDMMC_CmdAppOperCommand+0x68>)
 8015454:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8015456:	60a5      	str	r5, [r4, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015458:	4915      	ldr	r1, [pc, #84]	; (80154b0 <SDMMC_CmdAppOperCommand+0x6c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 801545a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801545e:	68e5      	ldr	r5, [r4, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8015460:	f241 3388 	movw	r3, #5000	; 0x1388
 8015464:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015466:	4029      	ands	r1, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8015468:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801546c:	4308      	orrs	r0, r1
 801546e:	60e0      	str	r0, [r4, #12]
 8015470:	e003      	b.n	801547a <SDMMC_CmdAppOperCommand+0x36>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8015472:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015474:	f012 0f45 	tst.w	r2, #69	; 0x45
 8015478:	d106      	bne.n	8015488 <SDMMC_CmdAppOperCommand+0x44>
    if (count-- == 0)
 801547a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 801547e:	d2f8      	bcs.n	8015472 <SDMMC_CmdAppOperCommand+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8015480:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8015484:	bc30      	pop	{r4, r5}
 8015486:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8015488:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801548a:	f010 0004 	ands.w	r0, r0, #4
 801548e:	d104      	bne.n	801549a <SDMMC_CmdAppOperCommand+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8015490:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8015494:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8015496:	bc30      	pop	{r4, r5}
 8015498:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801549a:	2004      	movs	r0, #4
 801549c:	63a0      	str	r0, [r4, #56]	; 0x38
}
 801549e:	bc30      	pop	{r4, r5}
 80154a0:	4770      	bx	lr
 80154a2:	bf00      	nop
 80154a4:	80100000 	.word	0x80100000
 80154a8:	2000002c 	.word	0x2000002c
 80154ac:	10624dd3 	.word	0x10624dd3
 80154b0:	fffff000 	.word	0xfffff000

080154b4 <SDMMC_CmdBusWidth>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80154b4:	4a1c      	ldr	r2, [pc, #112]	; (8015528 <SDMMC_CmdBusWidth+0x74>)
 80154b6:	4b1d      	ldr	r3, [pc, #116]	; (801552c <SDMMC_CmdBusWidth+0x78>)
 80154b8:	6812      	ldr	r2, [r2, #0]
{
 80154ba:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80154bc:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80154be:	f240 4446 	movw	r4, #1094	; 0x446
 80154c2:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80154c4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80154c8:	4919      	ldr	r1, [pc, #100]	; (8015530 <SDMMC_CmdBusWidth+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80154ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80154ce:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80154d0:	4029      	ands	r1, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80154d2:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80154d6:	430c      	orrs	r4, r1
 80154d8:	60c4      	str	r4, [r0, #12]
 80154da:	e003      	b.n	80154e4 <SDMMC_CmdBusWidth+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80154dc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80154de:	f012 0f45 	tst.w	r2, #69	; 0x45
 80154e2:	d106      	bne.n	80154f2 <SDMMC_CmdBusWidth+0x3e>
    if (count-- == 0)
 80154e4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80154e8:	d2f8      	bcs.n	80154dc <SDMMC_CmdBusWidth+0x28>
      return SDMMC_ERROR_TIMEOUT;
 80154ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80154ee:	bc30      	pop	{r4, r5}
 80154f0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80154f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80154f4:	075a      	lsls	r2, r3, #29
 80154f6:	d40e      	bmi.n	8015516 <SDMMC_CmdBusWidth+0x62>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80154f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80154fa:	07db      	lsls	r3, r3, #31
 80154fc:	d406      	bmi.n	801550c <SDMMC_CmdBusWidth+0x58>
  return (uint8_t)(SDMMCx->RESPCMD);
 80154fe:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8015500:	b2db      	uxtb	r3, r3
 8015502:	2b06      	cmp	r3, #6
 8015504:	d00c      	beq.n	8015520 <SDMMC_CmdBusWidth+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015506:	2001      	movs	r0, #1
}
 8015508:	bc30      	pop	{r4, r5}
 801550a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801550c:	2301      	movs	r3, #1
}
 801550e:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8015510:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015512:	4618      	mov	r0, r3
}
 8015514:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015516:	2304      	movs	r3, #4
}
 8015518:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801551a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801551c:	4618      	mov	r0, r3
}
 801551e:	4770      	bx	lr
 8015520:	bc30      	pop	{r4, r5}
 8015522:	f7ff bc67 	b.w	8014df4 <SDMMC_GetCmdResp1.part.2>
 8015526:	bf00      	nop
 8015528:	2000002c 	.word	0x2000002c
 801552c:	10624dd3 	.word	0x10624dd3
 8015530:	fffff000 	.word	0xfffff000

08015534 <SDMMC_CmdSendSCR>:
{
 8015534:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015536:	4a1d      	ldr	r2, [pc, #116]	; (80155ac <SDMMC_CmdSendSCR+0x78>)
  SDMMCx->ARG = Command->Argument;
 8015538:	2400      	movs	r4, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 801553a:	4b1d      	ldr	r3, [pc, #116]	; (80155b0 <SDMMC_CmdSendSCR+0x7c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801553c:	f240 4173 	movw	r1, #1139	; 0x473
  SDMMCx->ARG = Command->Argument;
 8015540:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015542:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
 8015546:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015548:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801554a:	402c      	ands	r4, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 801554c:	fba3 3202 	umull	r3, r2, r3, r2
 8015550:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015554:	4321      	orrs	r1, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015556:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015558:	60c1      	str	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 801555a:	fb03 f302 	mul.w	r3, r3, r2
 801555e:	e003      	b.n	8015568 <SDMMC_CmdSendSCR+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8015560:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8015562:	f012 0f45 	tst.w	r2, #69	; 0x45
 8015566:	d106      	bne.n	8015576 <SDMMC_CmdSendSCR+0x42>
    if (count-- == 0)
 8015568:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 801556c:	d2f8      	bcs.n	8015560 <SDMMC_CmdSendSCR+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 801556e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8015572:	bc30      	pop	{r4, r5}
 8015574:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8015576:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015578:	075a      	lsls	r2, r3, #29
 801557a:	d40e      	bmi.n	801559a <SDMMC_CmdSendSCR+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801557c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801557e:	07db      	lsls	r3, r3, #31
 8015580:	d406      	bmi.n	8015590 <SDMMC_CmdSendSCR+0x5c>
  return (uint8_t)(SDMMCx->RESPCMD);
 8015582:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8015584:	b2db      	uxtb	r3, r3
 8015586:	2b33      	cmp	r3, #51	; 0x33
 8015588:	d00c      	beq.n	80155a4 <SDMMC_CmdSendSCR+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801558a:	2001      	movs	r0, #1
}
 801558c:	bc30      	pop	{r4, r5}
 801558e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8015590:	2301      	movs	r3, #1
}
 8015592:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8015594:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015596:	4618      	mov	r0, r3
}
 8015598:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801559a:	2304      	movs	r3, #4
}
 801559c:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801559e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80155a0:	4618      	mov	r0, r3
}
 80155a2:	4770      	bx	lr
 80155a4:	bc30      	pop	{r4, r5}
 80155a6:	f7ff bc25 	b.w	8014df4 <SDMMC_GetCmdResp1.part.2>
 80155aa:	bf00      	nop
 80155ac:	2000002c 	.word	0x2000002c
 80155b0:	10624dd3 	.word	0x10624dd3

080155b4 <SDMMC_CmdSendCID>:
{
 80155b4:	b430      	push	{r4, r5}
 80155b6:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 80155b8:	2400      	movs	r4, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80155ba:	4a19      	ldr	r2, [pc, #100]	; (8015620 <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80155bc:	f240 40c2 	movw	r0, #1218	; 0x4c2
  SDMMCx->ARG = Command->Argument;
 80155c0:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80155c2:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80155c6:	4b17      	ldr	r3, [pc, #92]	; (8015624 <SDMMC_CmdSendCID+0x70>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80155c8:	68cd      	ldr	r5, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80155ca:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80155cc:	402c      	ands	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80155ce:	fba3 3202 	umull	r3, r2, r3, r2
 80155d2:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80155d6:	4320      	orrs	r0, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80155d8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80155da:	60c8      	str	r0, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80155dc:	fb03 f302 	mul.w	r3, r3, r2
 80155e0:	e003      	b.n	80155ea <SDMMC_CmdSendCID+0x36>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80155e2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80155e4:	f012 0f45 	tst.w	r2, #69	; 0x45
 80155e8:	d106      	bne.n	80155f8 <SDMMC_CmdSendCID+0x44>
    if (count-- == 0)
 80155ea:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80155ee:	d2f8      	bcs.n	80155e2 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80155f0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80155f4:	bc30      	pop	{r4, r5}
 80155f6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80155f8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80155fa:	075b      	lsls	r3, r3, #29
 80155fc:	d40c      	bmi.n	8015618 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80155fe:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8015600:	f010 0001 	ands.w	r0, r0, #1
 8015604:	d104      	bne.n	8015610 <SDMMC_CmdSendCID+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8015606:	f240 53ff 	movw	r3, #1535	; 0x5ff
 801560a:	638b      	str	r3, [r1, #56]	; 0x38
}
 801560c:	bc30      	pop	{r4, r5}
 801560e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8015610:	2001      	movs	r0, #1
 8015612:	6388      	str	r0, [r1, #56]	; 0x38
}
 8015614:	bc30      	pop	{r4, r5}
 8015616:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015618:	2004      	movs	r0, #4
 801561a:	6388      	str	r0, [r1, #56]	; 0x38
}
 801561c:	bc30      	pop	{r4, r5}
 801561e:	4770      	bx	lr
 8015620:	2000002c 	.word	0x2000002c
 8015624:	10624dd3 	.word	0x10624dd3

08015628 <SDMMC_CmdSendCSD>:
{
 8015628:	b430      	push	{r4, r5}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 801562a:	4a19      	ldr	r2, [pc, #100]	; (8015690 <SDMMC_CmdSendCSD+0x68>)
{
 801562c:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 801562e:	4b19      	ldr	r3, [pc, #100]	; (8015694 <SDMMC_CmdSendCSD+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015630:	f240 40c9 	movw	r0, #1225	; 0x4c9
  SDMMCx->ARG = Command->Argument;
 8015634:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8015636:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015638:	68e5      	ldr	r5, [r4, #12]
 801563a:	4917      	ldr	r1, [pc, #92]	; (8015698 <SDMMC_CmdSendCSD+0x70>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 801563c:	fba3 3202 	umull	r3, r2, r3, r2
 8015640:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015644:	4029      	ands	r1, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8015646:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015648:	4308      	orrs	r0, r1
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 801564a:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801564e:	60e0      	str	r0, [r4, #12]
 8015650:	e003      	b.n	801565a <SDMMC_CmdSendCSD+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8015652:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015654:	f012 0f45 	tst.w	r2, #69	; 0x45
 8015658:	d106      	bne.n	8015668 <SDMMC_CmdSendCSD+0x40>
    if (count-- == 0)
 801565a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 801565e:	d2f8      	bcs.n	8015652 <SDMMC_CmdSendCSD+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8015660:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8015664:	bc30      	pop	{r4, r5}
 8015666:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8015668:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801566a:	075b      	lsls	r3, r3, #29
 801566c:	d40c      	bmi.n	8015688 <SDMMC_CmdSendCSD+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801566e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8015670:	f010 0001 	ands.w	r0, r0, #1
 8015674:	d104      	bne.n	8015680 <SDMMC_CmdSendCSD+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8015676:	f240 53ff 	movw	r3, #1535	; 0x5ff
 801567a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 801567c:	bc30      	pop	{r4, r5}
 801567e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8015680:	2001      	movs	r0, #1
 8015682:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8015684:	bc30      	pop	{r4, r5}
 8015686:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015688:	2004      	movs	r0, #4
 801568a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 801568c:	bc30      	pop	{r4, r5}
 801568e:	4770      	bx	lr
 8015690:	2000002c 	.word	0x2000002c
 8015694:	10624dd3 	.word	0x10624dd3
 8015698:	fffff000 	.word	0xfffff000

0801569c <SDMMC_CmdSetRelAdd>:
{
 801569c:	b470      	push	{r4, r5, r6}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 801569e:	4b2c      	ldr	r3, [pc, #176]	; (8015750 <SDMMC_CmdSetRelAdd+0xb4>)
  SDMMCx->ARG = Command->Argument;
 80156a0:	2400      	movs	r4, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80156a2:	4a2c      	ldr	r2, [pc, #176]	; (8015754 <SDMMC_CmdSetRelAdd+0xb8>)
{
 80156a4:	b083      	sub	sp, #12
  SDMMCx->ARG = Command->Argument;
 80156a6:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80156a8:	f240 4443 	movw	r4, #1091	; 0x443
 80156ac:	68c6      	ldr	r6, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80156ae:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80156b0:	4d29      	ldr	r5, [pc, #164]	; (8015758 <SDMMC_CmdSetRelAdd+0xbc>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80156b2:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80156b6:	4035      	ands	r5, r6
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80156b8:	0a5a      	lsrs	r2, r3, #9
 80156ba:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80156be:	432c      	orrs	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80156c0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80156c4:	60c4      	str	r4, [r0, #12]
 80156c6:	e003      	b.n	80156d0 <SDMMC_CmdSetRelAdd+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80156c8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80156ca:	f012 0f45 	tst.w	r2, #69	; 0x45
 80156ce:	d107      	bne.n	80156e0 <SDMMC_CmdSetRelAdd+0x44>
    if (count-- == 0)
 80156d0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80156d4:	d2f8      	bcs.n	80156c8 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80156d6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80156da:	b003      	add	sp, #12
 80156dc:	bc70      	pop	{r4, r5, r6}
 80156de:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80156e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80156e2:	075c      	lsls	r4, r3, #29
 80156e4:	d411      	bmi.n	801570a <SDMMC_CmdSetRelAdd+0x6e>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80156e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80156e8:	f013 0301 	ands.w	r3, r3, #1
 80156ec:	d107      	bne.n	80156fe <SDMMC_CmdSetRelAdd+0x62>
  return (uint8_t)(SDMMCx->RESPCMD);
 80156ee:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80156f0:	b2d2      	uxtb	r2, r2
 80156f2:	2a03      	cmp	r2, #3
 80156f4:	d00f      	beq.n	8015716 <SDMMC_CmdSetRelAdd+0x7a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80156f6:	2001      	movs	r0, #1
}
 80156f8:	b003      	add	sp, #12
 80156fa:	bc70      	pop	{r4, r5, r6}
 80156fc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80156fe:	2301      	movs	r3, #1
 8015700:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015702:	4618      	mov	r0, r3
}
 8015704:	b003      	add	sp, #12
 8015706:	bc70      	pop	{r4, r5, r6}
 8015708:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801570a:	2304      	movs	r3, #4
 801570c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801570e:	4618      	mov	r0, r3
}
 8015710:	b003      	add	sp, #12
 8015712:	bc70      	pop	{r4, r5, r6}
 8015714:	4770      	bx	lr
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8015716:	f100 0214 	add.w	r2, r0, #20
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 801571a:	f240 54ff 	movw	r4, #1535	; 0x5ff
 801571e:	6384      	str	r4, [r0, #56]	; 0x38
  __IO uint32_t tmp = 0;
 8015720:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8015722:	9201      	str	r2, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8015724:	9b01      	ldr	r3, [sp, #4]
 8015726:	681b      	ldr	r3, [r3, #0]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8015728:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 801572c:	d009      	beq.n	8015742 <SDMMC_CmdSetRelAdd+0xa6>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801572e:	045a      	lsls	r2, r3, #17
 8015730:	d40a      	bmi.n	8015748 <SDMMC_CmdSetRelAdd+0xac>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8015732:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8015736:	bf14      	ite	ne
 8015738:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 801573c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8015740:	e7cb      	b.n	80156da <SDMMC_CmdSetRelAdd+0x3e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8015742:	0c1b      	lsrs	r3, r3, #16
 8015744:	800b      	strh	r3, [r1, #0]
 8015746:	e7c8      	b.n	80156da <SDMMC_CmdSetRelAdd+0x3e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8015748:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801574c:	e7c5      	b.n	80156da <SDMMC_CmdSetRelAdd+0x3e>
 801574e:	bf00      	nop
 8015750:	2000002c 	.word	0x2000002c
 8015754:	10624dd3 	.word	0x10624dd3
 8015758:	fffff000 	.word	0xfffff000

0801575c <SDMMC_CmdSendStatus>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 801575c:	4a1c      	ldr	r2, [pc, #112]	; (80157d0 <SDMMC_CmdSendStatus+0x74>)
 801575e:	4b1d      	ldr	r3, [pc, #116]	; (80157d4 <SDMMC_CmdSendStatus+0x78>)
 8015760:	6812      	ldr	r2, [r2, #0]
{
 8015762:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8015764:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015766:	f240 444d 	movw	r4, #1101	; 0x44d
 801576a:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 801576c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015770:	4919      	ldr	r1, [pc, #100]	; (80157d8 <SDMMC_CmdSendStatus+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8015772:	f241 3388 	movw	r3, #5000	; 0x1388
 8015776:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015778:	4029      	ands	r1, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 801577a:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801577e:	430c      	orrs	r4, r1
 8015780:	60c4      	str	r4, [r0, #12]
 8015782:	e003      	b.n	801578c <SDMMC_CmdSendStatus+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8015784:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8015786:	f012 0f45 	tst.w	r2, #69	; 0x45
 801578a:	d106      	bne.n	801579a <SDMMC_CmdSendStatus+0x3e>
    if (count-- == 0)
 801578c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8015790:	d2f8      	bcs.n	8015784 <SDMMC_CmdSendStatus+0x28>
      return SDMMC_ERROR_TIMEOUT;
 8015792:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8015796:	bc30      	pop	{r4, r5}
 8015798:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801579a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801579c:	075a      	lsls	r2, r3, #29
 801579e:	d40e      	bmi.n	80157be <SDMMC_CmdSendStatus+0x62>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80157a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80157a2:	07db      	lsls	r3, r3, #31
 80157a4:	d406      	bmi.n	80157b4 <SDMMC_CmdSendStatus+0x58>
  return (uint8_t)(SDMMCx->RESPCMD);
 80157a6:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80157a8:	b2db      	uxtb	r3, r3
 80157aa:	2b0d      	cmp	r3, #13
 80157ac:	d00c      	beq.n	80157c8 <SDMMC_CmdSendStatus+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80157ae:	2001      	movs	r0, #1
}
 80157b0:	bc30      	pop	{r4, r5}
 80157b2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80157b4:	2301      	movs	r3, #1
}
 80157b6:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80157b8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80157ba:	4618      	mov	r0, r3
}
 80157bc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80157be:	2304      	movs	r3, #4
}
 80157c0:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80157c2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80157c4:	4618      	mov	r0, r3
}
 80157c6:	4770      	bx	lr
 80157c8:	bc30      	pop	{r4, r5}
 80157ca:	f7ff bb13 	b.w	8014df4 <SDMMC_GetCmdResp1.part.2>
 80157ce:	bf00      	nop
 80157d0:	2000002c 	.word	0x2000002c
 80157d4:	10624dd3 	.word	0x10624dd3
 80157d8:	fffff000 	.word	0xfffff000

080157dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80157dc:	b084      	sub	sp, #16
 80157de:	b430      	push	{r4, r5}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80157e0:	9d08      	ldr	r5, [sp, #32]
{
 80157e2:	ac03      	add	r4, sp, #12
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80157e4:	2d01      	cmp	r5, #1
{
 80157e6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80157ea:	d131      	bne.n	8015850 <USB_CoreInit+0x74>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80157ec:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80157ee:	4b2d      	ldr	r3, [pc, #180]	; (80158a4 <USB_CoreInit+0xc8>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80157f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 80157f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80157f6:	6382      	str	r2, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 80157f8:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80157fa:	68c2      	ldr	r2, [r0, #12]
 80157fc:	ea03 0302 	and.w	r3, r3, r2
 8015800:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8015802:	68c3      	ldr	r3, [r0, #12]
 8015804:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8015808:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 801580a:	d03d      	beq.n	8015888 <USB_CoreInit+0xac>
{
 801580c:	4b26      	ldr	r3, [pc, #152]	; (80158a8 <USB_CoreInit+0xcc>)
 801580e:	e001      	b.n	8015814 <USB_CoreInit+0x38>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8015810:	3b01      	subs	r3, #1
 8015812:	d03e      	beq.n	8015892 <USB_CoreInit+0xb6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015814:	6902      	ldr	r2, [r0, #16]
 8015816:	2a00      	cmp	r2, #0
 8015818:	dafa      	bge.n	8015810 <USB_CoreInit+0x34>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801581a:	6903      	ldr	r3, [r0, #16]
 801581c:	4a22      	ldr	r2, [pc, #136]	; (80158a8 <USB_CoreInit+0xcc>)
 801581e:	f043 0301 	orr.w	r3, r3, #1
 8015822:	6103      	str	r3, [r0, #16]
 8015824:	e001      	b.n	801582a <USB_CoreInit+0x4e>

  do
  {
    if (++count > 200000U)
 8015826:	3a01      	subs	r2, #1
 8015828:	d033      	beq.n	8015892 <USB_CoreInit+0xb6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801582a:	6903      	ldr	r3, [r0, #16]
 801582c:	f013 0301 	ands.w	r3, r3, #1
 8015830:	d1f9      	bne.n	8015826 <USB_CoreInit+0x4a>
  if (cfg.dma_enable == 1U)
 8015832:	9a06      	ldr	r2, [sp, #24]
 8015834:	2a01      	cmp	r2, #1
 8015836:	d107      	bne.n	8015848 <USB_CoreInit+0x6c>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8015838:	6882      	ldr	r2, [r0, #8]
 801583a:	f042 0206 	orr.w	r2, r2, #6
 801583e:	6082      	str	r2, [r0, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8015840:	6882      	ldr	r2, [r0, #8]
 8015842:	f042 0220 	orr.w	r2, r2, #32
 8015846:	6082      	str	r2, [r0, #8]
}
 8015848:	4618      	mov	r0, r3
 801584a:	bc30      	pop	{r4, r5}
 801584c:	b004      	add	sp, #16
 801584e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8015850:	68c2      	ldr	r2, [r0, #12]
 8015852:	4b15      	ldr	r3, [pc, #84]	; (80158a8 <USB_CoreInit+0xcc>)
 8015854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015858:	60c2      	str	r2, [r0, #12]
 801585a:	e001      	b.n	8015860 <USB_CoreInit+0x84>
    if (++count > 200000U)
 801585c:	3b01      	subs	r3, #1
 801585e:	d01a      	beq.n	8015896 <USB_CoreInit+0xba>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015860:	6902      	ldr	r2, [r0, #16]
 8015862:	2a00      	cmp	r2, #0
 8015864:	dafa      	bge.n	801585c <USB_CoreInit+0x80>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015866:	6903      	ldr	r3, [r0, #16]
 8015868:	4a0f      	ldr	r2, [pc, #60]	; (80158a8 <USB_CoreInit+0xcc>)
 801586a:	f043 0301 	orr.w	r3, r3, #1
 801586e:	6103      	str	r3, [r0, #16]
 8015870:	e001      	b.n	8015876 <USB_CoreInit+0x9a>
    if (++count > 200000U)
 8015872:	3a01      	subs	r2, #1
 8015874:	d00f      	beq.n	8015896 <USB_CoreInit+0xba>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015876:	6903      	ldr	r3, [r0, #16]
 8015878:	f013 0301 	ands.w	r3, r3, #1
 801587c:	d1f9      	bne.n	8015872 <USB_CoreInit+0x96>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801587e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8015880:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8015884:	6382      	str	r2, [r0, #56]	; 0x38
 8015886:	e7d4      	b.n	8015832 <USB_CoreInit+0x56>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8015888:	68c3      	ldr	r3, [r0, #12]
 801588a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801588e:	60c3      	str	r3, [r0, #12]
 8015890:	e7bc      	b.n	801580c <USB_CoreInit+0x30>
      return HAL_TIMEOUT;
 8015892:	2303      	movs	r3, #3
 8015894:	e7cd      	b.n	8015832 <USB_CoreInit+0x56>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8015896:	6b82      	ldr	r2, [r0, #56]	; 0x38
      return HAL_TIMEOUT;
 8015898:	2303      	movs	r3, #3
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801589a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801589e:	6382      	str	r2, [r0, #56]	; 0x38
 80158a0:	e7c7      	b.n	8015832 <USB_CoreInit+0x56>
 80158a2:	bf00      	nop
 80158a4:	ffbdffbf 	.word	0xffbdffbf
 80158a8:	00030d40 	.word	0x00030d40

080158ac <USB_EnableGlobalInt>:
{
 80158ac:	4602      	mov	r2, r0
}
 80158ae:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80158b0:	6893      	ldr	r3, [r2, #8]
 80158b2:	f043 0301 	orr.w	r3, r3, #1
 80158b6:	6093      	str	r3, [r2, #8]
}
 80158b8:	4770      	bx	lr
 80158ba:	bf00      	nop

080158bc <USB_DisableGlobalInt>:
{
 80158bc:	4602      	mov	r2, r0
}
 80158be:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80158c0:	6893      	ldr	r3, [r2, #8]
 80158c2:	f023 0301 	bic.w	r3, r3, #1
 80158c6:	6093      	str	r3, [r2, #8]
}
 80158c8:	4770      	bx	lr
 80158ca:	bf00      	nop

080158cc <USB_SetCurrentMode>:
{
 80158cc:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80158ce:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80158d0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80158d2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80158d6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80158d8:	d00b      	beq.n	80158f2 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 80158da:	b941      	cbnz	r1, 80158ee <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80158dc:	68c3      	ldr	r3, [r0, #12]
 80158de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80158e2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80158e4:	2032      	movs	r0, #50	; 0x32
 80158e6:	f7f9 fc09 	bl	800f0fc <HAL_Delay>
  return HAL_OK;
 80158ea:	2000      	movs	r0, #0
}
 80158ec:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 80158ee:	2001      	movs	r0, #1
}
 80158f0:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80158f2:	68c3      	ldr	r3, [r0, #12]
 80158f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80158f8:	60c3      	str	r3, [r0, #12]
 80158fa:	e7f3      	b.n	80158e4 <USB_SetCurrentMode+0x18>

080158fc <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80158fc:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 80158fe:	0892      	lsrs	r2, r2, #2
 8015900:	d00d      	beq.n	801591e <USB_ReadPacket+0x22>
 8015902:	eb01 0282 	add.w	r2, r1, r2, lsl #2
{
 8015906:	b410      	push	{r4}
 8015908:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint32_t *pDest = (uint32_t *)dest;
 801590c:	4608      	mov	r0, r1
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 801590e:	6823      	ldr	r3, [r4, #0]
 8015910:	f840 3b04 	str.w	r3, [r0], #4
  for (i = 0U; i < count32b; i++)
 8015914:	4282      	cmp	r2, r0
 8015916:	d1fa      	bne.n	801590e <USB_ReadPacket+0x12>
}
 8015918:	f85d 4b04 	ldr.w	r4, [sp], #4
 801591c:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 801591e:	4608      	mov	r0, r1
}
 8015920:	4770      	bx	lr
 8015922:	bf00      	nop

08015924 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8015924:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8015926:	6980      	ldr	r0, [r0, #24]
}
 8015928:	4010      	ands	r0, r2
 801592a:	4770      	bx	lr

0801592c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 801592c:	6940      	ldr	r0, [r0, #20]
}
 801592e:	f000 0001 	and.w	r0, r0, #1
 8015932:	4770      	bx	lr

08015934 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015934:	b084      	sub	sp, #16
 8015936:	b530      	push	{r4, r5, lr}
 8015938:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801593a:	2500      	movs	r5, #0
{
 801593c:	b083      	sub	sp, #12
  USBx_PCGCCTL = 0U;
 801593e:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8015942:	6ba5      	ldr	r5, [r4, #56]	; 0x38
{
 8015944:	a807      	add	r0, sp, #28
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8015946:	f425 1500 	bic.w	r5, r5, #2097152	; 0x200000
 801594a:	63a5      	str	r5, [r4, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 801594c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
{
 801594e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8015952:	05eb      	lsls	r3, r5, #23
 8015954:	9908      	ldr	r1, [sp, #32]
 8015956:	d565      	bpl.n	8015a24 <USB_HostInit+0xf0>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8015958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801595a:	2b03      	cmp	r3, #3
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 801595c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8015960:	d063      	beq.n	8015a2a <USB_HostInit+0xf6>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8015962:	f023 0304 	bic.w	r3, r3, #4
 8015966:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801596a:	f44f 6284 	mov.w	r2, #1056	; 0x420
 801596e:	4b31      	ldr	r3, [pc, #196]	; (8015a34 <USB_HostInit+0x100>)
 8015970:	6122      	str	r2, [r4, #16]
 8015972:	e001      	b.n	8015978 <USB_HostInit+0x44>
    if (++count > 200000U)
 8015974:	3b01      	subs	r3, #1
 8015976:	d002      	beq.n	801597e <USB_HostInit+0x4a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8015978:	6922      	ldr	r2, [r4, #16]
 801597a:	0695      	lsls	r5, r2, #26
 801597c:	d4fa      	bmi.n	8015974 <USB_HostInit+0x40>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801597e:	2210      	movs	r2, #16
 8015980:	4b2c      	ldr	r3, [pc, #176]	; (8015a34 <USB_HostInit+0x100>)
 8015982:	6122      	str	r2, [r4, #16]
 8015984:	e001      	b.n	801598a <USB_HostInit+0x56>
    if (++count > 200000U)
 8015986:	3b01      	subs	r3, #1
 8015988:	d002      	beq.n	8015990 <USB_HostInit+0x5c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801598a:	6922      	ldr	r2, [r4, #16]
 801598c:	06d0      	lsls	r0, r2, #27
 801598e:	d4fa      	bmi.n	8015986 <USB_HostInit+0x52>
  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
  (void)USB_FlushRxFifo(USBx);

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8015990:	b159      	cbz	r1, 80159aa <USB_HostInit+0x76>
 8015992:	2200      	movs	r2, #0
 8015994:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8015998:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 801599c:	4610      	mov	r0, r2
  for (i = 0U; i < cfg.Host_channels; i++)
 801599e:	3201      	adds	r2, #1
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80159a0:	609d      	str	r5, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80159a2:	60d8      	str	r0, [r3, #12]
 80159a4:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.Host_channels; i++)
 80159a6:	428a      	cmp	r2, r1
 80159a8:	d1f9      	bne.n	801599e <USB_HostInit+0x6a>
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80159aa:	2300      	movs	r3, #0
 80159ac:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80159ae:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80159b2:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80159b4:	9b01      	ldr	r3, [sp, #4]
 80159b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80159ba:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80159bc:	9b01      	ldr	r3, [sp, #4]
 80159be:	04da      	lsls	r2, r3, #19
 80159c0:	d404      	bmi.n	80159cc <USB_HostInit+0x98>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80159c2:	9b01      	ldr	r3, [sp, #4]
 80159c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80159c8:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(200U);
 80159cc:	20c8      	movs	r0, #200	; 0xc8
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80159ce:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(200U);
 80159d0:	f7f9 fb94 	bl	800f0fc <HAL_Delay>
  USBx->GINTSTS = 0xFFFFFFFFU;
 80159d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  USBx->GINTMSK = 0U;
 80159d8:	2200      	movs	r2, #0
 80159da:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80159dc:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 80159de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80159e0:	05db      	lsls	r3, r3, #23
 80159e2:	d517      	bpl.n	8015a14 <USB_HostInit+0xe0>
    USBx->GRXFSIZ  = 0x200U;
 80159e4:	f44f 7100 	mov.w	r1, #512	; 0x200
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80159e8:	4a13      	ldr	r2, [pc, #76]	; (8015a38 <USB_HostInit+0x104>)
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80159ea:	4b14      	ldr	r3, [pc, #80]	; (8015a3c <USB_HostInit+0x108>)
    USBx->GRXFSIZ  = 0x200U;
 80159ec:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80159ee:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80159f0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 80159f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159f6:	b91b      	cbnz	r3, 8015a00 <USB_HostInit+0xcc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80159f8:	69a3      	ldr	r3, [r4, #24]
 80159fa:	f043 0310 	orr.w	r3, r3, #16
 80159fe:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8015a00:	69a2      	ldr	r2, [r4, #24]
}
 8015a02:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8015a04:	4b0e      	ldr	r3, [pc, #56]	; (8015a40 <USB_HostInit+0x10c>)
 8015a06:	4313      	orrs	r3, r2
 8015a08:	61a3      	str	r3, [r4, #24]
}
 8015a0a:	b003      	add	sp, #12
 8015a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a10:	b004      	add	sp, #16
 8015a12:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 8015a14:	2180      	movs	r1, #128	; 0x80
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8015a16:	4a0b      	ldr	r2, [pc, #44]	; (8015a44 <USB_HostInit+0x110>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8015a18:	4b0b      	ldr	r3, [pc, #44]	; (8015a48 <USB_HostInit+0x114>)
    USBx->GRXFSIZ  = 0x80U;
 8015a1a:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8015a1c:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8015a1e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8015a22:	e7e7      	b.n	80159f4 <USB_HostInit+0xc0>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8015a24:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8015a28:	e79b      	b.n	8015962 <USB_HostInit+0x2e>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8015a2a:	f043 0304 	orr.w	r3, r3, #4
 8015a2e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8015a32:	e79a      	b.n	801596a <USB_HostInit+0x36>
 8015a34:	00030d40 	.word	0x00030d40
 8015a38:	01000200 	.word	0x01000200
 8015a3c:	00e00300 	.word	0x00e00300
 8015a40:	a3200008 	.word	0xa3200008
 8015a44:	00600080 	.word	0x00600080
 8015a48:	004000e0 	.word	0x004000e0

08015a4c <USB_InitFSLSPClkSel>:
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8015a4c:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8015a50:	f001 0303 	and.w	r3, r1, #3
  if (freq == HCFG_48_MHZ)
 8015a54:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8015a56:	f022 0203 	bic.w	r2, r2, #3
{
 8015a5a:	b410      	push	{r4}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8015a5c:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
 8015a60:	f500 6480 	add.w	r4, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8015a64:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8015a68:	ea43 0302 	orr.w	r3, r3, r2
 8015a6c:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8015a70:	d00c      	beq.n	8015a8c <USB_InitFSLSPClkSel+0x40>
  else if (freq == HCFG_6_MHZ)
 8015a72:	2902      	cmp	r1, #2
 8015a74:	d003      	beq.n	8015a7e <USB_InitFSLSPClkSel+0x32>
}
 8015a76:	2000      	movs	r0, #0
 8015a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a7c:	4770      	bx	lr
    USBx_HOST->HFIR = 6000U;
 8015a7e:	f241 7370 	movw	r3, #6000	; 0x1770
}
 8015a82:	2000      	movs	r0, #0
    USBx_HOST->HFIR = 6000U;
 8015a84:	6063      	str	r3, [r4, #4]
}
 8015a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a8a:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8015a8c:	f64b 3380 	movw	r3, #48000	; 0xbb80
}
 8015a90:	2000      	movs	r0, #0
    USBx_HOST->HFIR = 48000U;
 8015a92:	6063      	str	r3, [r4, #4]
}
 8015a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a98:	4770      	bx	lr
 8015a9a:	bf00      	nop

08015a9c <USB_ResetPort>:
{
 8015a9c:	b530      	push	{r4, r5, lr}
 8015a9e:	4604      	mov	r4, r0
 8015aa0:	b083      	sub	sp, #12
  __IO uint32_t hprt0 = 0U;
 8015aa2:	2500      	movs	r5, #0
  HAL_Delay(100U);                                 /* See Note #1 */
 8015aa4:	2064      	movs	r0, #100	; 0x64
  __IO uint32_t hprt0 = 0U;
 8015aa6:	9501      	str	r5, [sp, #4]
  hprt0 = USBx_HPRT0;
 8015aa8:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8015aac:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8015aae:	9b01      	ldr	r3, [sp, #4]
 8015ab0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8015ab4:	9301      	str	r3, [sp, #4]
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8015ab6:	9b01      	ldr	r3, [sp, #4]
 8015ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015abc:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8015ac0:	f7f9 fb1c 	bl	800f0fc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8015ac4:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
 8015ac6:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8015ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015acc:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8015ad0:	f7f9 fb14 	bl	800f0fc <HAL_Delay>
}
 8015ad4:	4628      	mov	r0, r5
 8015ad6:	b003      	add	sp, #12
 8015ad8:	bd30      	pop	{r4, r5, pc}
 8015ada:	bf00      	nop

08015adc <USB_DriveVbus>:
{
 8015adc:	b082      	sub	sp, #8
  __IO uint32_t hprt0 = 0U;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	9301      	str	r3, [sp, #4]
  hprt0 = USBx_HPRT0;
 8015ae2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8015ae6:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8015ae8:	9b01      	ldr	r3, [sp, #4]
 8015aea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8015aee:	9301      	str	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8015af0:	9b01      	ldr	r3, [sp, #4]
 8015af2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8015af6:	9b01      	ldr	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8015af8:	d101      	bne.n	8015afe <USB_DriveVbus+0x22>
 8015afa:	2901      	cmp	r1, #1
 8015afc:	d00a      	beq.n	8015b14 <USB_DriveVbus+0x38>
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8015afe:	04db      	lsls	r3, r3, #19
 8015b00:	d505      	bpl.n	8015b0e <USB_DriveVbus+0x32>
 8015b02:	b921      	cbnz	r1, 8015b0e <USB_DriveVbus+0x32>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8015b04:	9b01      	ldr	r3, [sp, #4]
 8015b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015b0a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8015b0e:	2000      	movs	r0, #0
 8015b10:	b002      	add	sp, #8
 8015b12:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8015b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015b18:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
}
 8015b1c:	2000      	movs	r0, #0
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8015b1e:	9b01      	ldr	r3, [sp, #4]
}
 8015b20:	b002      	add	sp, #8
 8015b22:	4770      	bx	lr

08015b24 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8015b24:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8015b26:	2300      	movs	r3, #0
 8015b28:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8015b2a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8015b2e:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8015b30:	9801      	ldr	r0, [sp, #4]
}
 8015b32:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8015b36:	b002      	add	sp, #8
 8015b38:	4770      	bx	lr
 8015b3a:	bf00      	nop

08015b3c <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8015b3c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8015b40:	6880      	ldr	r0, [r0, #8]
}
 8015b42:	b280      	uxth	r0, r0
 8015b44:	4770      	bx	lr
 8015b46:	bf00      	nop

08015b48 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8015b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b4c:	4606      	mov	r6, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8015b4e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015b52:	2001      	movs	r0, #1
{
 8015b54:	f89d 4020 	ldrb.w	r4, [sp, #32]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8015b58:	eb06 1541 	add.w	r5, r6, r1, lsl #5
 8015b5c:	f001 010f 	and.w	r1, r1, #15
 8015b60:	f506 6980 	add.w	r9, r6, #1024	; 0x400
{
 8015b64:	f89d e01c 	ldrb.w	lr, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8015b68:	f505 68a0 	add.w	r8, r5, #1280	; 0x500
 8015b6c:	fa00 f101 	lsl.w	r1, r0, r1
 8015b70:	f8c8 7008 	str.w	r7, [r8, #8]
 8015b74:	b250      	sxtb	r0, r2
{
 8015b76:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8015b7a:	2c03      	cmp	r4, #3
 8015b7c:	d85b      	bhi.n	8015c36 <USB_HC_Init+0xee>
 8015b7e:	e8df f004 	tbb	[pc, r4]
 8015b82:	3d4a      	.short	0x3d4a
 8015b84:	024a      	.short	0x024a
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015b86:	f240 679d 	movw	r7, #1693	; 0x69d
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8015b8a:	2800      	cmp	r0, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015b8c:	f8c8 700c 	str.w	r7, [r8, #12]
      if ((epnum & 0x80U) == 0x80U)
 8015b90:	db63      	blt.n	8015c5a <USB_HC_Init+0x112>
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8015b92:	f8d9 7018 	ldr.w	r7, [r9, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8015b96:	2000      	movs	r0, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8015b98:	4339      	orrs	r1, r7
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8015b9a:	4607      	mov	r7, r0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8015b9c:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8015ba0:	69b1      	ldr	r1, [r6, #24]
 8015ba2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8015ba6:	61b1      	str	r1, [r6, #24]
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8015ba8:	0599      	lsls	r1, r3, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8015baa:	f3cc 030a 	ubfx	r3, ip, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8015bae:	02d2      	lsls	r2, r2, #11
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8015bb0:	f1be 0f02 	cmp.w	lr, #2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8015bb4:	f001 51fe 	and.w	r1, r1, #532676608	; 0x1fc00000
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8015bb8:	ea4f 4684 	mov.w	r6, r4, lsl #18
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8015bbc:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8015bc0:	bf18      	it	ne
 8015bc2:	f04f 0c00 	movne.w	ip, #0
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8015bc6:	ea43 0301 	orr.w	r3, r3, r1
 8015bca:	f406 2140 	and.w	r1, r6, #786432	; 0xc0000
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8015bce:	bf08      	it	eq
 8015bd0:	f44f 3c00 	moveq.w	ip, #131072	; 0x20000

  if (ep_type == EP_TYPE_INTR)
 8015bd4:	2c03      	cmp	r4, #3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8015bd6:	ea43 0302 	orr.w	r3, r3, r2
 8015bda:	ea43 0301 	orr.w	r3, r3, r1
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8015bde:	ea43 0307 	orr.w	r3, r3, r7
 8015be2:	ea43 030c 	orr.w	r3, r3, ip
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8015be6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8015bea:	d105      	bne.n	8015bf8 <USB_HC_Init+0xb0>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8015bec:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 8015bf0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015bf4:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  }

  return ret;
}
 8015bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015bfc:	f240 2725 	movw	r7, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8015c00:	2800      	cmp	r0, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015c02:	f8c8 700c 	str.w	r7, [r8, #12]
      if ((epnum & 0x80U) == 0x80U)
 8015c06:	dac4      	bge.n	8015b92 <USB_HC_Init+0x4a>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8015c08:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8015c0c:	f440 70c0 	orr.w	r0, r0, #384	; 0x180
 8015c10:	f8c8 000c 	str.w	r0, [r8, #12]
 8015c14:	e027      	b.n	8015c66 <USB_HC_Init+0x11e>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015c16:	f240 479d 	movw	r7, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
 8015c1a:	2800      	cmp	r0, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015c1c:	f8c8 700c 	str.w	r7, [r8, #12]
      if ((epnum & 0x80U) == 0x80U)
 8015c20:	db1b      	blt.n	8015c5a <USB_HC_Init+0x112>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8015c22:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8015c24:	05c0      	lsls	r0, r0, #23
 8015c26:	d5b4      	bpl.n	8015b92 <USB_HC_Init+0x4a>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8015c28:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8015c2c:	f040 0060 	orr.w	r0, r0, #96	; 0x60
 8015c30:	f8c8 000c 	str.w	r0, [r8, #12]
 8015c34:	e7ad      	b.n	8015b92 <USB_HC_Init+0x4a>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8015c36:	f8d9 7018 	ldr.w	r7, [r9, #24]
      ret = HAL_ERROR;
 8015c3a:	2800      	cmp	r0, #0
 8015c3c:	f04f 0001 	mov.w	r0, #1
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8015c40:	ea41 0107 	orr.w	r1, r1, r7
      ret = HAL_ERROR;
 8015c44:	bfac      	ite	ge
 8015c46:	2700      	movge	r7, #0
 8015c48:	f44f 4700 	movlt.w	r7, #32768	; 0x8000
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8015c4c:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8015c50:	69b1      	ldr	r1, [r6, #24]
 8015c52:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8015c56:	61b1      	str	r1, [r6, #24]
 8015c58:	e7a6      	b.n	8015ba8 <USB_HC_Init+0x60>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8015c5a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8015c5e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8015c62:	f8c8 000c 	str.w	r0, [r8, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8015c66:	f8d9 7018 	ldr.w	r7, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8015c6a:	2000      	movs	r0, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8015c6c:	4339      	orrs	r1, r7
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8015c6e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8015c72:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8015c76:	69b1      	ldr	r1, [r6, #24]
 8015c78:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8015c7c:	61b1      	str	r1, [r6, #24]
 8015c7e:	e793      	b.n	8015ba8 <USB_HC_Init+0x60>

08015c80 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8015c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 8015c84:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8015c86:	f891 c001 	ldrb.w	ip, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 8015c8a:	05db      	lsls	r3, r3, #23
 8015c8c:	eb00 164c 	add.w	r6, r0, ip, lsl #5
 8015c90:	f506 6ea0 	add.w	lr, r6, #1280	; 0x500
 8015c94:	d50c      	bpl.n	8015cb0 <USB_HC_StartXfer+0x30>
 8015c96:	790b      	ldrb	r3, [r1, #4]
 8015c98:	b953      	cbnz	r3, 8015cb0 <USB_HC_StartXfer+0x30>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8015c9a:	2a00      	cmp	r2, #0
 8015c9c:	d077      	beq.n	8015d8e <USB_HC_StartXfer+0x10e>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
      return HAL_OK;
    }
    else if (dma == 1U)
 8015c9e:	2a01      	cmp	r2, #1
 8015ca0:	d106      	bne.n	8015cb0 <USB_HC_StartXfer+0x30>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8015ca2:	f8de 400c 	ldr.w	r4, [lr, #12]
 8015ca6:	f024 0460 	bic.w	r4, r4, #96	; 0x60
 8015caa:	f8ce 400c 	str.w	r4, [lr, #12]
      hc->do_ping = 0U;
 8015cae:	714b      	strb	r3, [r1, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8015cb0:	690d      	ldr	r5, [r1, #16]
 8015cb2:	2d00      	cmp	r5, #0
 8015cb4:	d142      	bne.n	8015d3c <USB_HC_StartXfer+0xbc>
 8015cb6:	f44f 2800 	mov.w	r8, #524288	; 0x80000
 8015cba:	2301      	movs	r3, #1
  }
  else
  {
    num_packets = 1U;
  }
  if (hc->ep_is_in != 0U)
 8015cbc:	78cf      	ldrb	r7, [r1, #3]
 8015cbe:	b11f      	cbz	r7, 8015cc8 <USB_HC_StartXfer+0x48>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8015cc0:	890d      	ldrh	r5, [r1, #8]
 8015cc2:	fb03 f505 	mul.w	r5, r3, r5
 8015cc6:	610d      	str	r5, [r1, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8015cc8:	7a8c      	ldrb	r4, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8015cca:	f3c5 0312 	ubfx	r3, r5, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8015cce:	0764      	lsls	r4, r4, #29
 8015cd0:	f004 44c0 	and.w	r4, r4, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015cd4:	ea44 0408 	orr.w	r4, r4, r8
 8015cd8:	4323      	orrs	r3, r4
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8015cda:	f8ce 3010 	str.w	r3, [lr, #16]

  if (dma != 0U)
 8015cde:	b112      	cbz	r2, 8015ce6 <USB_HC_StartXfer+0x66>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8015ce0:	68cb      	ldr	r3, [r1, #12]
 8015ce2:	f8ce 3014 	str.w	r3, [lr, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8015ce6:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8015cea:	f8de 3008 	ldr.w	r3, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8015cee:	f8d6 8500 	ldr.w	r8, [r6, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8015cf2:	43db      	mvns	r3, r3

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8015cf4:	4c43      	ldr	r4, [pc, #268]	; (8015e04 <USB_HC_StartXfer+0x184>)
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8015cf6:	f028 5800 	bic.w	r8, r8, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8015cfa:	075b      	lsls	r3, r3, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8015cfc:	f8c6 8500 	str.w	r8, [r6, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8015d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015d04:	f8d6 8500 	ldr.w	r8, [r6, #1280]	; 0x500
 8015d08:	ea43 0308 	orr.w	r3, r3, r8
 8015d0c:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8015d10:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 8015d14:	6023      	str	r3, [r4, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8015d16:	6823      	ldr	r3, [r4, #0]
 8015d18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015d1c:	6023      	str	r3, [r4, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8015d1e:	6823      	ldr	r3, [r4, #0]
  if (hc->ep_is_in != 0U)
 8015d20:	b1cf      	cbz	r7, 8015d56 <USB_HC_StartXfer+0xd6>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8015d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015d26:	6023      	str	r3, [r4, #0]
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015d28:	6823      	ldr	r3, [r4, #0]
 8015d2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015d2e:	6023      	str	r3, [r4, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8015d30:	6823      	ldr	r3, [r4, #0]
 8015d32:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
    }
  }

  return HAL_OK;
}
 8015d36:	2000      	movs	r0, #0
 8015d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8015d3c:	890b      	ldrh	r3, [r1, #8]
 8015d3e:	1e6c      	subs	r4, r5, #1
 8015d40:	441c      	add	r4, r3
 8015d42:	fbb4 f4f3 	udiv	r4, r4, r3
    if (num_packets > max_hc_pkt_count)
 8015d46:	b2a7      	uxth	r7, r4
 8015d48:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8015d4c:	d818      	bhi.n	8015d80 <USB_HC_StartXfer+0x100>
 8015d4e:	463b      	mov	r3, r7
 8015d50:	ea4f 48c4 	mov.w	r8, r4, lsl #19
 8015d54:	e7b2      	b.n	8015cbc <USB_HC_StartXfer+0x3c>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8015d56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015d5a:	6023      	str	r3, [r4, #0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015d5c:	6823      	ldr	r3, [r4, #0]
 8015d5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015d62:	6023      	str	r3, [r4, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8015d64:	6823      	ldr	r3, [r4, #0]
 8015d66:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8015d6a:	2d00      	cmp	r5, #0
 8015d6c:	d0e3      	beq.n	8015d36 <USB_HC_StartXfer+0xb6>
 8015d6e:	2a00      	cmp	r2, #0
 8015d70:	d1e1      	bne.n	8015d36 <USB_HC_StartXfer+0xb6>
      switch (hc->ep_type)
 8015d72:	79cb      	ldrb	r3, [r1, #7]
 8015d74:	2b03      	cmp	r3, #3
 8015d76:	d821      	bhi.n	8015dbc <USB_HC_StartXfer+0x13c>
 8015d78:	e8df f003 	tbb	[pc, r3]
 8015d7c:	18331833 	.word	0x18331833
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8015d80:	021d      	lsls	r5, r3, #8
 8015d82:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
 8015d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015d8a:	610d      	str	r5, [r1, #16]
 8015d8c:	e796      	b.n	8015cbc <USB_HC_StartXfer+0x3c>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8015d8e:	794b      	ldrb	r3, [r1, #5]
 8015d90:	2b01      	cmp	r3, #1
 8015d92:	d18d      	bne.n	8015cb0 <USB_HC_StartXfer+0x30>
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015d94:	4b1c      	ldr	r3, [pc, #112]	; (8015e08 <USB_HC_StartXfer+0x188>)
 8015d96:	f8ce 3010 	str.w	r3, [lr, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8015d9a:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8015d9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015da2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8015da6:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
      return HAL_OK;
 8015daa:	e7c4      	b.n	8015d36 <USB_HC_StartXfer+0xb6>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8015dac:	f8de 2010 	ldr.w	r2, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8015db0:	1ceb      	adds	r3, r5, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8015db2:	b292      	uxth	r2, r2
 8015db4:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8015db8:	429a      	cmp	r2, r3
 8015dba:	d31e      	bcc.n	8015dfa <USB_HC_StartXfer+0x17a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8015dbc:	b2ab      	uxth	r3, r5
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8015dbe:	68ca      	ldr	r2, [r1, #12]
    count32b = ((uint32_t)len + 3U) / 4U;
 8015dc0:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8015dc2:	089b      	lsrs	r3, r3, #2
 8015dc4:	d0b7      	beq.n	8015d36 <USB_HC_StartXfer+0xb6>
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8015dc6:	eb00 300c 	add.w	r0, r0, ip, lsl #12
 8015dca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015dce:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8015dd2:	f852 1b04 	ldr.w	r1, [r2], #4
    for (i = 0U; i < count32b; i++)
 8015dd6:	4293      	cmp	r3, r2
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8015dd8:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8015dda:	d1fa      	bne.n	8015dd2 <USB_HC_StartXfer+0x152>
}
 8015ddc:	2000      	movs	r0, #0
 8015dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8015de2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8015de4:	1ceb      	adds	r3, r5, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8015de6:	b292      	uxth	r2, r2
 8015de8:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8015dec:	429a      	cmp	r2, r3
 8015dee:	d2e5      	bcs.n	8015dbc <USB_HC_StartXfer+0x13c>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8015df0:	6983      	ldr	r3, [r0, #24]
 8015df2:	f043 0320 	orr.w	r3, r3, #32
 8015df6:	6183      	str	r3, [r0, #24]
 8015df8:	e7e0      	b.n	8015dbc <USB_HC_StartXfer+0x13c>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8015dfa:	6983      	ldr	r3, [r0, #24]
 8015dfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015e00:	6183      	str	r3, [r0, #24]
 8015e02:	e7db      	b.n	8015dbc <USB_HC_StartXfer+0x13c>
 8015e04:	20006220 	.word	0x20006220
 8015e08:	80080000 	.word	0x80080000

08015e0c <USB_HC_ReadInterrupt>:
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8015e0c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8015e10:	6940      	ldr	r0, [r0, #20]
}
 8015e12:	b280      	uxth	r0, r0
 8015e14:	4770      	bx	lr
 8015e16:	bf00      	nop

08015e18 <USB_HC_Halt>:
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8015e18:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8015e1c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8015e20:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8015e24:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8015e28:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8015e2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015e30:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8015e34:	d11f      	bne.n	8015e76 <USB_HC_Halt+0x5e>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8015e36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015e38:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8015e3c:	d13c      	bne.n	8015eb8 <USB_HC_Halt+0xa0>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8015e3e:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8015e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8015e46:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015e4a:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015e4e:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8015e52:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8015e56:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8015e5a:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8015e5e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8015e62:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
 8015e66:	e001      	b.n	8015e6c <USB_HC_Halt+0x54>
        if (++count > 1000U)
 8015e68:	3b01      	subs	r3, #1
 8015e6a:	d02b      	beq.n	8015ec4 <USB_HC_Halt+0xac>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015e6c:	6811      	ldr	r1, [r2, #0]
 8015e6e:	2900      	cmp	r1, #0
 8015e70:	dbfa      	blt.n	8015e68 <USB_HC_Halt+0x50>
}
 8015e72:	2000      	movs	r0, #0
 8015e74:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8015e76:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8015e7a:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8015e7e:	d11b      	bne.n	8015eb8 <USB_HC_Halt+0xa0>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8015e80:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8015e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8015e88:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015e8c:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015e90:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8015e94:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8015e98:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8015e9c:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8015ea0:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8015ea4:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
 8015ea8:	e001      	b.n	8015eae <USB_HC_Halt+0x96>
        if (++count > 1000U)
 8015eaa:	3b01      	subs	r3, #1
 8015eac:	d00a      	beq.n	8015ec4 <USB_HC_Halt+0xac>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015eae:	6811      	ldr	r1, [r2, #0]
 8015eb0:	2900      	cmp	r1, #0
 8015eb2:	dbfa      	blt.n	8015eaa <USB_HC_Halt+0x92>
}
 8015eb4:	2000      	movs	r0, #0
 8015eb6:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015eb8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8015ebc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015ec0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 8015ec4:	2000      	movs	r0, #0
 8015ec6:	4770      	bx	lr

08015ec8 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8015ec8:	6882      	ldr	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8015eca:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8015ece:	4b5c      	ldr	r3, [pc, #368]	; (8016040 <USB_StopHost+0x178>)
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8015ed0:	f022 0201 	bic.w	r2, r2, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8015ed4:	b410      	push	{r4}
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8015ed6:	6082      	str	r2, [r0, #8]
{
 8015ed8:	4604      	mov	r4, r0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8015eda:	6101      	str	r1, [r0, #16]
 8015edc:	e001      	b.n	8015ee2 <USB_StopHost+0x1a>
    if (++count > 200000U)
 8015ede:	3b01      	subs	r3, #1
 8015ee0:	d002      	beq.n	8015ee8 <USB_StopHost+0x20>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8015ee2:	6922      	ldr	r2, [r4, #16]
 8015ee4:	0691      	lsls	r1, r2, #26
 8015ee6:	d4fa      	bmi.n	8015ede <USB_StopHost+0x16>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015ee8:	2210      	movs	r2, #16
 8015eea:	4b55      	ldr	r3, [pc, #340]	; (8016040 <USB_StopHost+0x178>)
 8015eec:	6122      	str	r2, [r4, #16]
 8015eee:	e001      	b.n	8015ef4 <USB_StopHost+0x2c>
    if (++count > 200000U)
 8015ef0:	3b01      	subs	r3, #1
 8015ef2:	d002      	beq.n	8015efa <USB_StopHost+0x32>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8015ef4:	6922      	ldr	r2, [r4, #16]
 8015ef6:	06d2      	lsls	r2, r2, #27
 8015ef8:	d4fa      	bmi.n	8015ef0 <USB_StopHost+0x28>
  (void)USB_FlushRxFifo(USBx);

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8015efa:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
 8015efe:	f504 61a0 	add.w	r1, r4, #1280	; 0x500
 8015f02:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
  uint32_t count = 0U;
 8015f06:	2300      	movs	r3, #0
 8015f08:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015f0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8015f10:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    value = USBx_HC(i)->HCCHAR;
 8015f14:	f8d4 2520 	ldr.w	r2, [r4, #1312]	; 0x520
 8015f18:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015f1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8015f20:	f8c4 2520 	str.w	r2, [r4, #1312]	; 0x520
    value = USBx_HC(i)->HCCHAR;
 8015f24:	f8d4 2540 	ldr.w	r2, [r4, #1344]	; 0x540
 8015f28:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015f2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8015f30:	f8c4 2540 	str.w	r2, [r4, #1344]	; 0x540
    value = USBx_HC(i)->HCCHAR;
 8015f34:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
 8015f38:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015f3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8015f40:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
    value = USBx_HC(i)->HCCHAR;
 8015f44:	f8d4 2580 	ldr.w	r2, [r4, #1408]	; 0x580
 8015f48:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015f4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8015f50:	f8c4 2580 	str.w	r2, [r4, #1408]	; 0x580
    value = USBx_HC(i)->HCCHAR;
 8015f54:	f8d4 25a0 	ldr.w	r2, [r4, #1440]	; 0x5a0
 8015f58:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015f5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8015f60:	f8c4 25a0 	str.w	r2, [r4, #1440]	; 0x5a0
    value = USBx_HC(i)->HCCHAR;
 8015f64:	f8d4 25c0 	ldr.w	r2, [r4, #1472]	; 0x5c0
 8015f68:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015f6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8015f70:	f8c4 25c0 	str.w	r2, [r4, #1472]	; 0x5c0
    value = USBx_HC(i)->HCCHAR;
 8015f74:	f8d4 25e0 	ldr.w	r2, [r4, #1504]	; 0x5e0
 8015f78:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015f7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8015f80:	f8c4 25e0 	str.w	r2, [r4, #1504]	; 0x5e0
    value = USBx_HC(i)->HCCHAR;
 8015f84:	f8d4 2600 	ldr.w	r2, [r4, #1536]	; 0x600
 8015f88:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015f8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8015f90:	f8c4 2600 	str.w	r2, [r4, #1536]	; 0x600
    value = USBx_HC(i)->HCCHAR;
 8015f94:	f8d4 2620 	ldr.w	r2, [r4, #1568]	; 0x620
 8015f98:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015f9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8015fa0:	f8c4 2620 	str.w	r2, [r4, #1568]	; 0x620
    value = USBx_HC(i)->HCCHAR;
 8015fa4:	f8d4 2640 	ldr.w	r2, [r4, #1600]	; 0x640
 8015fa8:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015fac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8015fb0:	f8c4 2640 	str.w	r2, [r4, #1600]	; 0x640
    value = USBx_HC(i)->HCCHAR;
 8015fb4:	f8d4 2660 	ldr.w	r2, [r4, #1632]	; 0x660
 8015fb8:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015fbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8015fc0:	f8c4 2660 	str.w	r2, [r4, #1632]	; 0x660
    value = USBx_HC(i)->HCCHAR;
 8015fc4:	f8d4 2680 	ldr.w	r2, [r4, #1664]	; 0x680
 8015fc8:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015fcc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8015fd0:	f8c4 2680 	str.w	r2, [r4, #1664]	; 0x680
    value = USBx_HC(i)->HCCHAR;
 8015fd4:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8015fd8:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015fdc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8015fe0:	f8c4 26a0 	str.w	r2, [r4, #1696]	; 0x6a0
    value = USBx_HC(i)->HCCHAR;
 8015fe4:	f8d4 26c0 	ldr.w	r2, [r4, #1728]	; 0x6c0
 8015fe8:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015fec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8015ff0:	f8c4 26c0 	str.w	r2, [r4, #1728]	; 0x6c0
    value = USBx_HC(i)->HCCHAR;
 8015ff4:	f8d4 26e0 	ldr.w	r2, [r4, #1760]	; 0x6e0
 8015ff8:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015ffc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8016000:	f8c4 26e0 	str.w	r2, [r4, #1760]	; 0x6e0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8016004:	680a      	ldr	r2, [r1, #0]
 8016006:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801600a:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 801600e:	600a      	str	r2, [r1, #0]
 8016010:	e002      	b.n	8016018 <USB_StopHost+0x150>
      if (++count > 1000U)
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8016012:	680a      	ldr	r2, [r1, #0]
 8016014:	2a00      	cmp	r2, #0
 8016016:	da03      	bge.n	8016020 <USB_StopHost+0x158>
      if (++count > 1000U)
 8016018:	3301      	adds	r3, #1
 801601a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801601e:	d9f8      	bls.n	8016012 <USB_StopHost+0x14a>
 8016020:	3120      	adds	r1, #32
  for (i = 0U; i <= 15U; i++)
 8016022:	4281      	cmp	r1, r0
 8016024:	d1ee      	bne.n	8016004 <USB_StopHost+0x13c>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8016026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  USBx->GINTSTS = 0xFFFFFFFFU;
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 801602a:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 801602c:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8016030:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8016032:	68a3      	ldr	r3, [r4, #8]
 8016034:	f043 0301 	orr.w	r3, r3, #1
 8016038:	60a3      	str	r3, [r4, #8]
}
 801603a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801603e:	4770      	bx	lr
 8016040:	00030d40 	.word	0x00030d40

08016044 <USBH_MSC_SOFProcess>:
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{

  return USBH_OK;
}
 8016044:	2000      	movs	r0, #0
 8016046:	4770      	bx	lr

08016048 <USBH_MSC_Process>:
{
 8016048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801604a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 801604e:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->state)
 8016050:	7b22      	ldrb	r2, [r4, #12]
 8016052:	b122      	cbz	r2, 801605e <USBH_MSC_Process+0x16>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8016054:	f112 30ff 	adds.w	r0, r2, #4294967295	; 0xffffffff
 8016058:	bf18      	it	ne
 801605a:	2001      	movne	r0, #1
}
 801605c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 801605e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8016062:	4605      	mov	r5, r0
 8016064:	6821      	ldr	r1, [r4, #0]
 8016066:	428b      	cmp	r3, r1
 8016068:	d23a      	bcs.n	80160e0 <USBH_MSC_Process+0x98>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 801606a:	2234      	movs	r2, #52	; 0x34
 801606c:	2001      	movs	r0, #1
 801606e:	fb02 4203 	mla	r2, r2, r3, r4
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8016072:	f892 1090 	ldrb.w	r1, [r2, #144]	; 0x90
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8016076:	f882 0091 	strb.w	r0, [r2, #145]	; 0x91
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 801607a:	2908      	cmp	r1, #8
 801607c:	d828      	bhi.n	80160d0 <USBH_MSC_Process+0x88>
 801607e:	e8df f001 	tbb	[pc, r1]
 8016082:	2743      	.short	0x2743
 8016084:	05947557 	.word	0x05947557
 8016088:	2727      	.short	0x2727
 801608a:	3f          	.byte	0x3f
 801608b:	00          	.byte	0x00
        scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 801608c:	2634      	movs	r6, #52	; 0x34
 801608e:	b2d9      	uxtb	r1, r3
 8016090:	4628      	mov	r0, r5
 8016092:	fb06 4203 	mla	r2, r6, r3, r4
 8016096:	329c      	adds	r2, #156	; 0x9c
 8016098:	f000 fea6 	bl	8016de8 <USBH_MSC_SCSI_RequestSense>
        if( scsi_status == USBH_OK)
 801609c:	2800      	cmp	r0, #0
 801609e:	f040 80a5 	bne.w	80161ec <USBH_MSC_Process+0x1a4>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80160a2:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80160a6:	fb06 4603 	mla	r6, r6, r3, r4
 80160aa:	f896 109c 	ldrb.w	r1, [r6, #156]	; 0x9c
 80160ae:	f001 02fb 	and.w	r2, r1, #251	; 0xfb
 80160b2:	2a02      	cmp	r2, #2
 80160b4:	f040 80ce 	bne.w	8016254 <USBH_MSC_Process+0x20c>
            if((phost->Timer - MSC_Handle->timer) < 10000U)
 80160b8:	f8d5 33bc 	ldr.w	r3, [r5, #956]	; 0x3bc
 80160bc:	f242 700f 	movw	r0, #9999	; 0x270f
 80160c0:	f8d4 70fc 	ldr.w	r7, [r4, #252]	; 0xfc
 80160c4:	1bdb      	subs	r3, r3, r7
 80160c6:	4283      	cmp	r3, r0
 80160c8:	f200 80c4 	bhi.w	8016254 <USBH_MSC_Process+0x20c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80160cc:	f886 2090 	strb.w	r2, [r6, #144]	; 0x90
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 80160d0:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 80160d4:	2200      	movs	r2, #0
 80160d6:	2104      	movs	r1, #4
 80160d8:	f007 f9c8 	bl	801d46c <osMessagePut>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80160dc:	2001      	movs	r0, #1
}
 80160de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MSC_Handle->state = MSC_IDLE;
 80160e0:	2601      	movs	r6, #1
      MSC_Handle->current_lun = 0U;
 80160e2:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 80160e6:	2104      	movs	r1, #4
 80160e8:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
    MSC_Handle->state = MSC_IDLE;
 80160ec:	7326      	strb	r6, [r4, #12]
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 80160ee:	f007 f9bd 	bl	801d46c <osMessagePut>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80160f2:	4628      	mov	r0, r5
 80160f4:	f8d5 33c8 	ldr.w	r3, [r5, #968]	; 0x3c8
 80160f8:	2102      	movs	r1, #2
 80160fa:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY ;
 80160fc:	4630      	mov	r0, r6
}
 80160fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MSC_Handle->current_lun++;
 8016100:	3301      	adds	r3, #1
 8016102:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
        break;
 8016106:	e7e3      	b.n	80160d0 <USBH_MSC_Process+0x88>
        USBH_UsrLog ("LUN #%d: ", MSC_Handle->current_lun);
 8016108:	4619      	mov	r1, r3
 801610a:	489f      	ldr	r0, [pc, #636]	; (8016388 <USBH_MSC_Process+0x340>)
 801610c:	f009 fbb2 	bl	801f874 <iprintf>
 8016110:	200a      	movs	r0, #10
 8016112:	f009 fbc7 	bl	801f8a4 <putchar>
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8016116:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 801611a:	2034      	movs	r0, #52	; 0x34
        MSC_Handle->timer = phost->Timer;
 801611c:	f8d5 23bc 	ldr.w	r2, [r5, #956]	; 0x3bc
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8016120:	2104      	movs	r1, #4
 8016122:	fb00 4303 	mla	r3, r0, r3, r4
 8016126:	f883 1090 	strb.w	r1, [r3, #144]	; 0x90
        MSC_Handle->timer = phost->Timer;
 801612a:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc
        break;
 801612e:	e7cf      	b.n	80160d0 <USBH_MSC_Process+0x88>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8016130:	b2d9      	uxtb	r1, r3
 8016132:	4628      	mov	r0, r5
 8016134:	f000 fd90 	bl	8016c58 <USBH_MSC_SCSI_TestUnitReady>
        if (ready_status == USBH_OK)
 8016138:	2800      	cmp	r0, #0
 801613a:	d167      	bne.n	801620c <USBH_MSC_Process+0x1c4>
          if(MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 801613c:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8016140:	2234      	movs	r2, #52	; 0x34
 8016142:	fb02 4203 	mla	r2, r2, r3, r4
 8016146:	f892 1092 	ldrb.w	r1, [r2, #146]	; 0x92
 801614a:	2900      	cmp	r1, #0
 801614c:	f040 80d9 	bne.w	8016302 <USBH_MSC_Process+0x2ba>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8016150:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8016154:	2034      	movs	r0, #52	; 0x34
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8016156:	2200      	movs	r2, #0
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8016158:	2103      	movs	r1, #3
 801615a:	fb00 4403 	mla	r4, r0, r3, r4
 801615e:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8016162:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8016166:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
 801616a:	e7b1      	b.n	80160d0 <USBH_MSC_Process+0x88>
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 801616c:	2634      	movs	r6, #52	; 0x34
 801616e:	b2d9      	uxtb	r1, r3
 8016170:	4628      	mov	r0, r5
 8016172:	fb06 4203 	mla	r2, r6, r3, r4
 8016176:	3294      	adds	r2, #148	; 0x94
 8016178:	f000 fd96 	bl	8016ca8 <USBH_MSC_SCSI_ReadCapacity>
        if(scsi_status == USBH_OK)
 801617c:	b9f8      	cbnz	r0, 80161be <USBH_MSC_Process+0x176>
          if(MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 801617e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8016182:	fb06 4203 	mla	r2, r6, r3, r4
 8016186:	f892 10c1 	ldrb.w	r1, [r2, #193]	; 0xc1
 801618a:	2901      	cmp	r1, #1
 801618c:	f000 80d4 	beq.w	8016338 <USBH_MSC_Process+0x2f0>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8016190:	2134      	movs	r1, #52	; 0x34
          MSC_Handle->current_lun++;
 8016192:	1c5a      	adds	r2, r3, #1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8016194:	2001      	movs	r0, #1
 8016196:	fb01 4303 	mla	r3, r1, r3, r4
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 801619a:	2100      	movs	r1, #0
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801619c:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80161a0:	f883 1091 	strb.w	r1, [r3, #145]	; 0x91
          MSC_Handle->current_lun++;
 80161a4:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
 80161a8:	e792      	b.n	80160d0 <USBH_MSC_Process+0x88>
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80161aa:	2634      	movs	r6, #52	; 0x34
 80161ac:	b2d9      	uxtb	r1, r3
 80161ae:	4628      	mov	r0, r5
 80161b0:	fb06 4203 	mla	r2, r6, r3, r4
 80161b4:	329f      	adds	r2, #159	; 0x9f
 80161b6:	f000 fdaf 	bl	8016d18 <USBH_MSC_SCSI_Inquiry>
        if (scsi_status == USBH_OK)
 80161ba:	2800      	cmp	r0, #0
 80161bc:	d074      	beq.n	80162a8 <USBH_MSC_Process+0x260>
        else if(scsi_status == USBH_FAIL)
 80161be:	2802      	cmp	r0, #2
 80161c0:	d00c      	beq.n	80161dc <USBH_MSC_Process+0x194>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 80161c2:	2804      	cmp	r0, #4
 80161c4:	d184      	bne.n	80160d0 <USBH_MSC_Process+0x88>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80161c6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80161ca:	2101      	movs	r1, #1
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80161cc:	2202      	movs	r2, #2
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80161ce:	fb06 4403 	mla	r4, r6, r3, r4
 80161d2:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80161d6:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
 80161da:	e779      	b.n	80160d0 <USBH_MSC_Process+0x88>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80161dc:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80161e0:	2205      	movs	r2, #5
 80161e2:	fb06 4403 	mla	r4, r6, r3, r4
 80161e6:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
 80161ea:	e771      	b.n	80160d0 <USBH_MSC_Process+0x88>
        if(scsi_status == USBH_FAIL)
 80161ec:	2802      	cmp	r0, #2
 80161ee:	d1e8      	bne.n	80161c2 <USBH_MSC_Process+0x17a>
          USBH_UsrLog ("MSC Device NOT ready");
 80161f0:	4866      	ldr	r0, [pc, #408]	; (801638c <USBH_MSC_Process+0x344>)
 80161f2:	f009 fb3f 	bl	801f874 <iprintf>
 80161f6:	200a      	movs	r0, #10
 80161f8:	f009 fb54 	bl	801f8a4 <putchar>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80161fc:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8016200:	2208      	movs	r2, #8
 8016202:	fb06 4403 	mla	r4, r6, r3, r4
 8016206:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
 801620a:	e761      	b.n	80160d0 <USBH_MSC_Process+0x88>
        if (ready_status == USBH_FAIL)
 801620c:	2802      	cmp	r0, #2
 801620e:	f040 8084 	bne.w	801631a <USBH_MSC_Process+0x2d2>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8016212:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8016216:	2234      	movs	r2, #52	; 0x34
 8016218:	fb02 4203 	mla	r2, r2, r3, r4
 801621c:	f892 1092 	ldrb.w	r1, [r2, #146]	; 0x92
 8016220:	2902      	cmp	r1, #2
 8016222:	d06a      	beq.n	80162fa <USBH_MSC_Process+0x2b2>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8016224:	2301      	movs	r3, #1
            USBH_UsrLog ("MSC Device NOT ready");
 8016226:	4859      	ldr	r0, [pc, #356]	; (801638c <USBH_MSC_Process+0x344>)
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8016228:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
            USBH_UsrLog ("MSC Device NOT ready");
 801622c:	f009 fb22 	bl	801f874 <iprintf>
 8016230:	200a      	movs	r0, #10
 8016232:	f009 fb37 	bl	801f8a4 <putchar>
 8016236:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 801623a:	2034      	movs	r0, #52	; 0x34
 801623c:	2105      	movs	r1, #5
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 801623e:	2201      	movs	r2, #1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8016240:	fb00 4403 	mla	r4, r0, r3, r4
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8016244:	2302      	movs	r3, #2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8016246:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 801624a:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 801624e:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
 8016252:	e73d      	b.n	80160d0 <USBH_MSC_Process+0x88>
          USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 8016254:	484e      	ldr	r0, [pc, #312]	; (8016390 <USBH_MSC_Process+0x348>)
          USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 8016256:	2634      	movs	r6, #52	; 0x34
          USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 8016258:	f009 fb0c 	bl	801f874 <iprintf>
 801625c:	200a      	movs	r0, #10
 801625e:	f009 fb21 	bl	801f8a4 <putchar>
          USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 8016262:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8016266:	484b      	ldr	r0, [pc, #300]	; (8016394 <USBH_MSC_Process+0x34c>)
 8016268:	fb06 4303 	mla	r3, r6, r3, r4
 801626c:	f893 109d 	ldrb.w	r1, [r3, #157]	; 0x9d
 8016270:	f009 fb00 	bl	801f874 <iprintf>
 8016274:	200a      	movs	r0, #10
 8016276:	f009 fb15 	bl	801f8a4 <putchar>
          USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 801627a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 801627e:	4846      	ldr	r0, [pc, #280]	; (8016398 <USBH_MSC_Process+0x350>)
 8016280:	fb06 4303 	mla	r3, r6, r3, r4
 8016284:	f893 109e 	ldrb.w	r1, [r3, #158]	; 0x9e
 8016288:	f009 faf4 	bl	801f874 <iprintf>
 801628c:	200a      	movs	r0, #10
 801628e:	f009 fb09 	bl	801f8a4 <putchar>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8016292:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8016296:	2201      	movs	r2, #1
 8016298:	fb06 4603 	mla	r6, r6, r3, r4
          MSC_Handle->current_lun++;
 801629c:	4413      	add	r3, r2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801629e:	f886 2090 	strb.w	r2, [r6, #144]	; 0x90
          MSC_Handle->current_lun++;
 80162a2:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
 80162a6:	e713      	b.n	80160d0 <USBH_MSC_Process+0x88>
          USBH_UsrLog ("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 80162a8:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 80162ac:	483b      	ldr	r0, [pc, #236]	; (801639c <USBH_MSC_Process+0x354>)
 80162ae:	fb06 4101 	mla	r1, r6, r1, r4
 80162b2:	31a2      	adds	r1, #162	; 0xa2
 80162b4:	f009 fade 	bl	801f874 <iprintf>
 80162b8:	200a      	movs	r0, #10
 80162ba:	f009 faf3 	bl	801f8a4 <putchar>
          USBH_UsrLog ("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 80162be:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 80162c2:	4837      	ldr	r0, [pc, #220]	; (80163a0 <USBH_MSC_Process+0x358>)
 80162c4:	fb06 4101 	mla	r1, r6, r1, r4
 80162c8:	31ab      	adds	r1, #171	; 0xab
 80162ca:	f009 fad3 	bl	801f874 <iprintf>
 80162ce:	200a      	movs	r0, #10
 80162d0:	f009 fae8 	bl	801f8a4 <putchar>
          USBH_UsrLog ("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 80162d4:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 80162d8:	4832      	ldr	r0, [pc, #200]	; (80163a4 <USBH_MSC_Process+0x35c>)
 80162da:	fb06 4101 	mla	r1, r6, r1, r4
 80162de:	31bc      	adds	r1, #188	; 0xbc
 80162e0:	f009 fac8 	bl	801f874 <iprintf>
 80162e4:	200a      	movs	r0, #10
 80162e6:	f009 fadd 	bl	801f8a4 <putchar>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80162ea:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80162ee:	2202      	movs	r2, #2
 80162f0:	fb06 4403 	mla	r4, r6, r3, r4
 80162f4:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
 80162f8:	e6ea      	b.n	80160d0 <USBH_MSC_Process+0x88>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80162fa:	2100      	movs	r1, #0
 80162fc:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
 8016300:	e79b      	b.n	801623a <USBH_MSC_Process+0x1f2>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8016302:	2301      	movs	r3, #1
            USBH_UsrLog ("MSC Device ready");
 8016304:	4828      	ldr	r0, [pc, #160]	; (80163a8 <USBH_MSC_Process+0x360>)
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8016306:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
            USBH_UsrLog ("MSC Device ready");
 801630a:	f009 fab3 	bl	801f874 <iprintf>
 801630e:	200a      	movs	r0, #10
 8016310:	f009 fac8 	bl	801f8a4 <putchar>
 8016314:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8016318:	e71c      	b.n	8016154 <USBH_MSC_Process+0x10c>
          if (ready_status == USBH_UNRECOVERED_ERROR)
 801631a:	2804      	cmp	r0, #4
 801631c:	f47f aed8 	bne.w	80160d0 <USBH_MSC_Process+0x88>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8016320:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8016324:	2034      	movs	r0, #52	; 0x34
 8016326:	2101      	movs	r1, #1
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8016328:	2202      	movs	r2, #2
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801632a:	fb00 4403 	mla	r4, r0, r3, r4
 801632e:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8016332:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
 8016336:	e6cb      	b.n	80160d0 <USBH_MSC_Process+0x88>
            USBH_UsrLog ("MSC Device capacity : %lu Bytes", \
 8016338:	f8b2 3098 	ldrh.w	r3, [r2, #152]	; 0x98
 801633c:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
 8016340:	481a      	ldr	r0, [pc, #104]	; (80163ac <USBH_MSC_Process+0x364>)
 8016342:	fb01 f103 	mul.w	r1, r1, r3
 8016346:	f009 fa95 	bl	801f874 <iprintf>
 801634a:	200a      	movs	r0, #10
 801634c:	f009 faaa 	bl	801f8a4 <putchar>
            USBH_UsrLog ("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 8016350:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8016354:	4816      	ldr	r0, [pc, #88]	; (80163b0 <USBH_MSC_Process+0x368>)
 8016356:	fb06 4303 	mla	r3, r6, r3, r4
 801635a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801635e:	f009 fa89 	bl	801f874 <iprintf>
 8016362:	200a      	movs	r0, #10
 8016364:	f009 fa9e 	bl	801f8a4 <putchar>
            USBH_UsrLog ("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 8016368:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 801636c:	4811      	ldr	r0, [pc, #68]	; (80163b4 <USBH_MSC_Process+0x36c>)
 801636e:	fb06 4603 	mla	r6, r6, r3, r4
 8016372:	f8b6 1098 	ldrh.w	r1, [r6, #152]	; 0x98
 8016376:	f009 fa7d 	bl	801f874 <iprintf>
 801637a:	200a      	movs	r0, #10
 801637c:	f009 fa92 	bl	801f8a4 <putchar>
 8016380:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8016384:	e704      	b.n	8016190 <USBH_MSC_Process+0x148>
 8016386:	bf00      	nop
 8016388:	08025b04 	.word	0x08025b04
 801638c:	08025b6c 	.word	0x08025b6c
 8016390:	08025bcc 	.word	0x08025bcc
 8016394:	08025bdc 	.word	0x08025bdc
 8016398:	08025bf8 	.word	0x08025bf8
 801639c:	08025b10 	.word	0x08025b10
 80163a0:	08025b28 	.word	0x08025b28
 80163a4:	08025b40 	.word	0x08025b40
 80163a8:	08025b58 	.word	0x08025b58
 80163ac:	08025b84 	.word	0x08025b84
 80163b0:	08025ba4 	.word	0x08025ba4
 80163b4:	08025bb8 	.word	0x08025bb8

080163b8 <USBH_MSC_ClassRequest>:
{
 80163b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80163ba:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 80163be:	4602      	mov	r2, r0
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80163c0:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 80163c2:	7ba3      	ldrb	r3, [r4, #14]
 80163c4:	2b02      	cmp	r3, #2
 80163c6:	d004      	beq.n	80163d2 <USBH_MSC_ClassRequest+0x1a>
 80163c8:	2b03      	cmp	r3, #3
 80163ca:	d028      	beq.n	801641e <USBH_MSC_ClassRequest+0x66>
 80163cc:	b10b      	cbz	r3, 80163d2 <USBH_MSC_ClassRequest+0x1a>
  USBH_StatusTypeDef status = USBH_BUSY;
 80163ce:	2001      	movs	r0, #1
}
 80163d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)(void *)&MSC_Handle->max_lun);
 80163d2:	4610      	mov	r0, r2
 80163d4:	4621      	mov	r1, r4
 80163d6:	f000 faed 	bl	80169b4 <USBH_MSC_BOT_REQ_GetMaxLUN>
    if(status == USBH_NOT_SUPPORTED)
 80163da:	2803      	cmp	r0, #3
 80163dc:	d028      	beq.n	8016430 <USBH_MSC_ClassRequest+0x78>
    if(status == USBH_OK)
 80163de:	2800      	cmp	r0, #0
 80163e0:	d1f6      	bne.n	80163d0 <USBH_MSC_ClassRequest+0x18>
      MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN)? MAX_SUPPORTED_LUN : (uint8_t )(MSC_Handle->max_lun) + 1U;
 80163e2:	6823      	ldr	r3, [r4, #0]
 80163e4:	2b02      	cmp	r3, #2
 80163e6:	d926      	bls.n	8016436 <USBH_MSC_ClassRequest+0x7e>
 80163e8:	2102      	movs	r1, #2
 80163ea:	460b      	mov	r3, r1
 80163ec:	6023      	str	r3, [r4, #0]
      USBH_UsrLog ("Number of supported LUN: %lu", (int32_t)(MSC_Handle->max_lun));
 80163ee:	4813      	ldr	r0, [pc, #76]	; (801643c <USBH_MSC_ClassRequest+0x84>)
 80163f0:	f009 fa40 	bl	801f874 <iprintf>
 80163f4:	200a      	movs	r0, #10
 80163f6:	f009 fa55 	bl	801f8a4 <putchar>
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 80163fa:	6820      	ldr	r0, [r4, #0]
 80163fc:	b168      	cbz	r0, 801641a <USBH_MSC_ClassRequest+0x62>
 80163fe:	2300      	movs	r3, #0
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8016400:	2734      	movs	r7, #52	; 0x34
 8016402:	2602      	movs	r6, #2
        MSC_Handle->unit[i].state_changed = 0U;
 8016404:	461d      	mov	r5, r3
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 8016406:	1c59      	adds	r1, r3, #1
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8016408:	fb07 4203 	mla	r2, r7, r3, r4
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 801640c:	b2cb      	uxtb	r3, r1
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 801640e:	f882 6092 	strb.w	r6, [r2, #146]	; 0x92
        MSC_Handle->unit[i].state_changed = 0U;
 8016412:	f882 50c1 	strb.w	r5, [r2, #193]	; 0xc1
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 8016416:	4283      	cmp	r3, r0
 8016418:	d3f5      	bcc.n	8016406 <USBH_MSC_ClassRequest+0x4e>
 801641a:	2000      	movs	r0, #0
}
 801641c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 801641e:	2100      	movs	r1, #0
 8016420:	f002 f992 	bl	8018748 <USBH_ClrFeature>
 8016424:	2800      	cmp	r0, #0
 8016426:	d1d2      	bne.n	80163ce <USBH_MSC_ClassRequest+0x16>
      MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8016428:	7be3      	ldrb	r3, [r4, #15]
  USBH_StatusTypeDef status = USBH_BUSY;
 801642a:	2001      	movs	r0, #1
      MSC_Handle->req_state = MSC_Handle->prev_req_state;
 801642c:	73a3      	strb	r3, [r4, #14]
}
 801642e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016430:	2101      	movs	r1, #1
 8016432:	460b      	mov	r3, r1
 8016434:	e7da      	b.n	80163ec <USBH_MSC_ClassRequest+0x34>
 8016436:	3301      	adds	r3, #1
 8016438:	4619      	mov	r1, r3
 801643a:	e7d7      	b.n	80163ec <USBH_MSC_ClassRequest+0x34>
 801643c:	08025ab0 	.word	0x08025ab0

08016440 <USBH_MSC_InterfaceDeInit>:
{
 8016440:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016442:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8016446:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016448:	69dd      	ldr	r5, [r3, #28]
  if ( MSC_Handle->OutPipe)
 801644a:	7969      	ldrb	r1, [r5, #5]
 801644c:	b969      	cbnz	r1, 801646a <USBH_MSC_InterfaceDeInit+0x2a>
  if ( MSC_Handle->InPipe)
 801644e:	7929      	ldrb	r1, [r5, #4]
 8016450:	b9b1      	cbnz	r1, 8016480 <USBH_MSC_InterfaceDeInit+0x40>
  if(phost->pActiveClass->pData)
 8016452:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8016456:	69d8      	ldr	r0, [r3, #28]
 8016458:	b128      	cbz	r0, 8016466 <USBH_MSC_InterfaceDeInit+0x26>
    USBH_free (phost->pActiveClass->pData);
 801645a:	f009 f92f 	bl	801f6bc <free>
    phost->pActiveClass->pData = 0;
 801645e:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8016462:	2200      	movs	r2, #0
 8016464:	61da      	str	r2, [r3, #28]
}
 8016466:	2000      	movs	r0, #0
 8016468:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 801646a:	f002 fc23 	bl	8018cb4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 801646e:	7969      	ldrb	r1, [r5, #5]
 8016470:	4620      	mov	r0, r4
 8016472:	f002 fc79 	bl	8018d68 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8016476:	2300      	movs	r3, #0
  if ( MSC_Handle->InPipe)
 8016478:	7929      	ldrb	r1, [r5, #4]
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 801647a:	716b      	strb	r3, [r5, #5]
  if ( MSC_Handle->InPipe)
 801647c:	2900      	cmp	r1, #0
 801647e:	d0e8      	beq.n	8016452 <USBH_MSC_InterfaceDeInit+0x12>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8016480:	4620      	mov	r0, r4
 8016482:	f002 fc17 	bl	8018cb4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 8016486:	7929      	ldrb	r1, [r5, #4]
 8016488:	4620      	mov	r0, r4
 801648a:	f002 fc6d 	bl	8018d68 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 801648e:	2300      	movs	r3, #0
 8016490:	712b      	strb	r3, [r5, #4]
 8016492:	e7de      	b.n	8016452 <USBH_MSC_InterfaceDeInit+0x12>

08016494 <USBH_MSC_InterfaceInit>:
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8016494:	f8d0 1378 	ldr.w	r1, [r0, #888]	; 0x378
 8016498:	2350      	movs	r3, #80	; 0x50
 801649a:	2206      	movs	r2, #6
{
 801649c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801649e:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80164a0:	7909      	ldrb	r1, [r1, #4]
{
 80164a2:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80164a4:	f000 fe4a 	bl	801713c <USBH_FindInterface>
  if(interface == 0xFFU) /* Not Valid Interface */
 80164a8:	28ff      	cmp	r0, #255	; 0xff
 80164aa:	d06e      	beq.n	801658a <USBH_MSC_InterfaceInit+0xf6>
    USBH_SelectInterface (phost, interface);
 80164ac:	4601      	mov	r1, r0
 80164ae:	4628      	mov	r0, r5
 80164b0:	f000 fe00 	bl	80170b4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 80164b4:	f8d5 6378 	ldr.w	r6, [r5, #888]	; 0x378
 80164b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80164bc:	f009 f8f6 	bl	801f6ac <malloc>
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80164c0:	221a      	movs	r2, #26
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 80164c2:	61f0      	str	r0, [r6, #28]
 80164c4:	4604      	mov	r4, r0
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80164c6:	f895 3320 	ldrb.w	r3, [r5, #800]	; 0x320
 80164ca:	fb02 5203 	mla	r2, r2, r3, r5
 80164ce:	f892 134a 	ldrb.w	r1, [r2, #842]	; 0x34a
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80164d2:	f8b2 234c 	ldrh.w	r2, [r2, #844]	; 0x34c
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80164d6:	0608      	lsls	r0, r1, #24
 80164d8:	d450      	bmi.n	801657c <USBH_MSC_InterfaceInit+0xe8>
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80164da:	71a1      	strb	r1, [r4, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80164dc:	8122      	strh	r2, [r4, #8]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80164de:	221a      	movs	r2, #26
 80164e0:	fb02 5303 	mla	r3, r2, r3, r5
 80164e4:	f893 1352 	ldrb.w	r1, [r3, #850]	; 0x352
 80164e8:	f8b3 3354 	ldrh.w	r3, [r3, #852]	; 0x354
 80164ec:	060a      	lsls	r2, r1, #24
 80164ee:	d448      	bmi.n	8016582 <USBH_MSC_InterfaceInit+0xee>
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80164f0:	71a1      	strb	r1, [r4, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80164f2:	8123      	strh	r3, [r4, #8]
    MSC_Handle->current_lun = 0U;
 80164f4:	2600      	movs	r6, #0
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80164f6:	4628      	mov	r0, r5
    USBH_OpenPipe  (phost,
 80164f8:	2702      	movs	r7, #2
    MSC_Handle->current_lun = 0U;
 80164fa:	f8c4 60f8 	str.w	r6, [r4, #248]	; 0xf8
    MSC_Handle->state = MSC_INIT;
 80164fe:	7326      	strb	r6, [r4, #12]
    MSC_Handle->error = MSC_OK;
 8016500:	7366      	strb	r6, [r4, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 8016502:	73a6      	strb	r6, [r4, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8016504:	f002 fbdc 	bl	8018cc0 <USBH_AllocPipe>
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8016508:	79e1      	ldrb	r1, [r4, #7]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 801650a:	7160      	strb	r0, [r4, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 801650c:	4628      	mov	r0, r5
 801650e:	f002 fbd7 	bl	8018cc0 <USBH_AllocPipe>
 8016512:	7120      	strb	r0, [r4, #4]
    USBH_MSC_BOT_Init(phost);
 8016514:	4628      	mov	r0, r5
 8016516:	f000 fa59 	bl	80169cc <USBH_MSC_BOT_Init>
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 801651a:	4631      	mov	r1, r6
 801651c:	2268      	movs	r2, #104	; 0x68
 801651e:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8016522:	f009 f8f7 	bl	801f714 <memset>
    USBH_OpenPipe  (phost,
 8016526:	f8b4 e008 	ldrh.w	lr, [r4, #8]
 801652a:	f895 c31d 	ldrb.w	ip, [r5, #797]	; 0x31d
 801652e:	4628      	mov	r0, r5
 8016530:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8016534:	79a2      	ldrb	r2, [r4, #6]
 8016536:	7961      	ldrb	r1, [r4, #5]
 8016538:	f8cd c000 	str.w	ip, [sp]
 801653c:	e9cd 7e01 	strd	r7, lr, [sp, #4]
 8016540:	f002 fba8 	bl	8018c94 <USBH_OpenPipe>
    USBH_OpenPipe  (phost,
 8016544:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8016548:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
 801654c:	4628      	mov	r0, r5
 801654e:	9701      	str	r7, [sp, #4]
 8016550:	f895 731d 	ldrb.w	r7, [r5, #797]	; 0x31d
 8016554:	79e2      	ldrb	r2, [r4, #7]
 8016556:	f8cd c008 	str.w	ip, [sp, #8]
 801655a:	7921      	ldrb	r1, [r4, #4]
 801655c:	9700      	str	r7, [sp, #0]
 801655e:	f002 fb99 	bl	8018c94 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, MSC_Handle->InPipe, 0U);
 8016562:	4632      	mov	r2, r6
 8016564:	7921      	ldrb	r1, [r4, #4]
 8016566:	4628      	mov	r0, r5
 8016568:	f7f5 ffcc 	bl	800c504 <USBH_LL_SetToggle>
    USBH_LL_SetToggle (phost, MSC_Handle->OutPipe, 0U);
 801656c:	4632      	mov	r2, r6
 801656e:	7961      	ldrb	r1, [r4, #5]
 8016570:	4628      	mov	r0, r5
 8016572:	f7f5 ffc7 	bl	800c504 <USBH_LL_SetToggle>
    status = USBH_OK;
 8016576:	4630      	mov	r0, r6
}
 8016578:	b005      	add	sp, #20
 801657a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 801657c:	71e1      	strb	r1, [r4, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 801657e:	8162      	strh	r2, [r4, #10]
 8016580:	e7ad      	b.n	80164de <USBH_MSC_InterfaceInit+0x4a>
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8016582:	71e1      	strb	r1, [r4, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8016584:	8163      	strh	r3, [r4, #10]
 8016586:	79a1      	ldrb	r1, [r4, #6]
 8016588:	e7b4      	b.n	80164f4 <USBH_MSC_InterfaceInit+0x60>
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 801658a:	4807      	ldr	r0, [pc, #28]	; (80165a8 <USBH_MSC_InterfaceInit+0x114>)
 801658c:	f009 f972 	bl	801f874 <iprintf>
 8016590:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8016594:	4805      	ldr	r0, [pc, #20]	; (80165ac <USBH_MSC_InterfaceInit+0x118>)
 8016596:	6819      	ldr	r1, [r3, #0]
 8016598:	f009 f96c 	bl	801f874 <iprintf>
 801659c:	200a      	movs	r0, #10
 801659e:	f009 f981 	bl	801f8a4 <putchar>
    status = USBH_FAIL;
 80165a2:	2002      	movs	r0, #2
}
 80165a4:	b005      	add	sp, #20
 80165a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165a8:	08025ad0 	.word	0x08025ad0
 80165ac:	08025adc 	.word	0x08025adc

080165b0 <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80165b0:	7803      	ldrb	r3, [r0, #0]
 80165b2:	2b0b      	cmp	r3, #11
 80165b4:	d001      	beq.n	80165ba <USBH_MSC_UnitIsReady+0xa>
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 80165b6:	2000      	movs	r0, #0
  }

  return res;
}
 80165b8:	4770      	bx	lr
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80165ba:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80165be:	2234      	movs	r2, #52	; 0x34
 80165c0:	69db      	ldr	r3, [r3, #28]
 80165c2:	fb02 3101 	mla	r1, r2, r1, r3
 80165c6:	f891 0091 	ldrb.w	r0, [r1, #145]	; 0x91
    res = 1U;
 80165ca:	fab0 f080 	clz	r0, r0
 80165ce:	0940      	lsrs	r0, r0, #5
 80165d0:	4770      	bx	lr
 80165d2:	bf00      	nop

080165d4 <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if(phost->gState == HOST_CLASS)
 80165d4:	7803      	ldrb	r3, [r0, #0]
 80165d6:	2b0b      	cmp	r3, #11
 80165d8:	d001      	beq.n	80165de <USBH_MSC_GetLUNInfo+0xa>
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
    return USBH_OK;
  }
  else
  {
    return USBH_FAIL;
 80165da:	2002      	movs	r0, #2
  }
}
 80165dc:	4770      	bx	lr
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80165de:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80165e2:	2034      	movs	r0, #52	; 0x34
{
 80165e4:	b470      	push	{r4, r5, r6}
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80165e6:	2490      	movs	r4, #144	; 0x90
 80165e8:	69db      	ldr	r3, [r3, #28]
 80165ea:	fb10 4101 	smlabb	r1, r0, r1, r4
 80165ee:	4419      	add	r1, r3
 80165f0:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80165f4:	680e      	ldr	r6, [r1, #0]
 80165f6:	3110      	adds	r1, #16
 80165f8:	f851 5c0c 	ldr.w	r5, [r1, #-12]
 80165fc:	3210      	adds	r2, #16
 80165fe:	f851 4c08 	ldr.w	r4, [r1, #-8]
 8016602:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016606:	4299      	cmp	r1, r3
 8016608:	f842 6c10 	str.w	r6, [r2, #-16]
 801660c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8016610:	f842 4c08 	str.w	r4, [r2, #-8]
 8016614:	f842 0c04 	str.w	r0, [r2, #-4]
 8016618:	d1ec      	bne.n	80165f4 <USBH_MSC_GetLUNInfo+0x20>
 801661a:	680b      	ldr	r3, [r1, #0]
    return USBH_OK;
 801661c:	2000      	movs	r0, #0
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 801661e:	6013      	str	r3, [r2, #0]
}
 8016620:	bc70      	pop	{r4, r5, r6}
 8016622:	4770      	bx	lr

08016624 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8016624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 8016628:	f890 531e 	ldrb.w	r5, [r0, #798]	; 0x31e
{
 801662c:	b085      	sub	sp, #20
  if ((phost->device.is_connected == 0U) ||
 801662e:	b195      	cbz	r5, 8016656 <USBH_MSC_Read+0x32>
      (phost->gState != HOST_CLASS) ||
 8016630:	7805      	ldrb	r5, [r0, #0]
 8016632:	4604      	mov	r4, r0
  if ((phost->device.is_connected == 0U) ||
 8016634:	2d0b      	cmp	r5, #11
 8016636:	d10e      	bne.n	8016656 <USBH_MSC_Read+0x32>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016638:	f8d0 7378 	ldr.w	r7, [r0, #888]	; 0x378
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 801663c:	2534      	movs	r5, #52	; 0x34
 801663e:	460e      	mov	r6, r1
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016640:	f8d7 a01c 	ldr.w	sl, [r7, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8016644:	fb05 f701 	mul.w	r7, r5, r1
 8016648:	eb0a 0c07 	add.w	ip, sl, r7
      (phost->gState != HOST_CLASS) ||
 801664c:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
 8016650:	f1be 0f01 	cmp.w	lr, #1
 8016654:	d003      	beq.n	801665e <USBH_MSC_Read+0x3a>
  {
    return  USBH_FAIL;
 8016656:	2002      	movs	r0, #2
    }
  }
  MSC_Handle->state = MSC_IDLE;

  return USBH_OK;
}
 8016658:	b005      	add	sp, #20
 801665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MSC_Handle->state = MSC_READ;
 801665e:	f04f 0e06 	mov.w	lr, #6
  switch (MSC_Handle->unit[lun].state)
 8016662:	46b8      	mov	r8, r7
  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8016664:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    if(((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8016666:	f242 7910 	movw	r9, #10000	; 0x2710
  MSC_Handle->state = MSC_READ;
 801666a:	f88a e00c 	strb.w	lr, [sl, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 801666e:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8016672:	f8aa 10fa 	strh.w	r1, [sl, #250]	; 0xfa
  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8016676:	9700      	str	r7, [sp, #0]
 8016678:	4647      	mov	r7, r8
 801667a:	f000 fc4b 	bl	8016f14 <USBH_MSC_SCSI_Read>
 801667e:	239c      	movs	r3, #156	; 0x9c
  timeout = phost->Timer;
 8016680:	f8d4 b3bc 	ldr.w	fp, [r4, #956]	; 0x3bc
 8016684:	fb15 3306 	smlabb	r3, r5, r6, r3
 8016688:	9303      	str	r3, [sp, #12]
    if(((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 801668a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801668c:	fb09 f903 	mul.w	r9, r9, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8016690:	e00d      	b.n	80166ae <USBH_MSC_Read+0x8a>
  switch (MSC_Handle->unit[lun].state)
 8016692:	2b07      	cmp	r3, #7
 8016694:	d03e      	beq.n	8016714 <USBH_MSC_Read+0xf0>
 8016696:	2b05      	cmp	r3, #5
 8016698:	d029      	beq.n	80166ee <USBH_MSC_Read+0xca>
    if(((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 801669a:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 801669e:	eba3 030b 	sub.w	r3, r3, fp
 80166a2:	454b      	cmp	r3, r9
 80166a4:	d84e      	bhi.n	8016744 <USBH_MSC_Read+0x120>
 80166a6:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d04a      	beq.n	8016744 <USBH_MSC_Read+0x120>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80166ae:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80166b2:	69da      	ldr	r2, [r3, #28]
  switch (MSC_Handle->unit[lun].state)
 80166b4:	19d5      	adds	r5, r2, r7
 80166b6:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 80166ba:	f105 0890 	add.w	r8, r5, #144	; 0x90
 80166be:	2b06      	cmp	r3, #6
 80166c0:	d1e7      	bne.n	8016692 <USBH_MSC_Read+0x6e>
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0U, NULL, 0U);
 80166c2:	2300      	movs	r3, #0
 80166c4:	4631      	mov	r1, r6
 80166c6:	4620      	mov	r0, r4
 80166c8:	461a      	mov	r2, r3
 80166ca:	9300      	str	r3, [sp, #0]
 80166cc:	f000 fc22 	bl	8016f14 <USBH_MSC_SCSI_Read>
    if(scsi_status == USBH_OK)
 80166d0:	bb48      	cbnz	r0, 8016726 <USBH_MSC_Read+0x102>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80166d2:	2301      	movs	r3, #1
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 80166d4:	4602      	mov	r2, r0
 80166d6:	2104      	movs	r1, #4
 80166d8:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80166dc:	f888 3000 	strb.w	r3, [r8]
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 80166e0:	f006 fec4 	bl	801d46c <osMessagePut>
  MSC_Handle->state = MSC_IDLE;
 80166e4:	2301      	movs	r3, #1
  return USBH_OK;
 80166e6:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
 80166e8:	f88a 300c 	strb.w	r3, [sl, #12]
  return USBH_OK;
 80166ec:	e7b4      	b.n	8016658 <USBH_MSC_Read+0x34>
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80166ee:	9b03      	ldr	r3, [sp, #12]
 80166f0:	4631      	mov	r1, r6
 80166f2:	4620      	mov	r0, r4
 80166f4:	441a      	add	r2, r3
 80166f6:	f000 fb77 	bl	8016de8 <USBH_MSC_SCSI_RequestSense>
    if(scsi_status == USBH_OK)
 80166fa:	b388      	cbz	r0, 8016760 <USBH_MSC_Read+0x13c>
    if(scsi_status == USBH_FAIL)
 80166fc:	2802      	cmp	r0, #2
 80166fe:	d05f      	beq.n	80167c0 <USBH_MSC_Read+0x19c>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 8016700:	2804      	cmp	r0, #4
 8016702:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
 8016706:	d051      	beq.n	80167ac <USBH_MSC_Read+0x188>
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 8016708:	4618      	mov	r0, r3
 801670a:	2200      	movs	r2, #0
 801670c:	2104      	movs	r1, #4
 801670e:	f006 fead 	bl	801d46c <osMessagePut>
 8016712:	e7c2      	b.n	801669a <USBH_MSC_Read+0x76>
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0U, NULL, 0U);
 8016714:	2300      	movs	r3, #0
 8016716:	4631      	mov	r1, r6
 8016718:	4620      	mov	r0, r4
 801671a:	461a      	mov	r2, r3
 801671c:	9300      	str	r3, [sp, #0]
 801671e:	f000 fbab 	bl	8016e78 <USBH_MSC_SCSI_Write>
    if(scsi_status == USBH_OK)
 8016722:	2800      	cmp	r0, #0
 8016724:	d0d5      	beq.n	80166d2 <USBH_MSC_Read+0xae>
    else if( scsi_status == USBH_FAIL)
 8016726:	2802      	cmp	r0, #2
 8016728:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
 801672c:	d00f      	beq.n	801674e <USBH_MSC_Read+0x12a>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 801672e:	2804      	cmp	r0, #4
 8016730:	d1ea      	bne.n	8016708 <USBH_MSC_Read+0xe4>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8016732:	2408      	movs	r4, #8
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 8016734:	4601      	mov	r1, r0
 8016736:	2200      	movs	r2, #0
 8016738:	4618      	mov	r0, r3
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 801673a:	f888 4000 	strb.w	r4, [r8]
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 801673e:	f006 fe95 	bl	801d46c <osMessagePut>
 8016742:	e7cf      	b.n	80166e4 <USBH_MSC_Read+0xc0>
      MSC_Handle->state = MSC_IDLE;
 8016744:	2301      	movs	r3, #1
      return USBH_FAIL;
 8016746:	2002      	movs	r0, #2
      MSC_Handle->state = MSC_IDLE;
 8016748:	f88a 300c 	strb.w	r3, [sl, #12]
      return USBH_FAIL;
 801674c:	e784      	b.n	8016658 <USBH_MSC_Read+0x34>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 801674e:	2105      	movs	r1, #5
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 8016750:	4618      	mov	r0, r3
 8016752:	2200      	movs	r2, #0
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8016754:	f885 1090 	strb.w	r1, [r5, #144]	; 0x90
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 8016758:	2104      	movs	r1, #4
 801675a:	f006 fe87 	bl	801d46c <osMessagePut>
 801675e:	e79c      	b.n	801669a <USBH_MSC_Read+0x76>
      USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 8016760:	f895 109c 	ldrb.w	r1, [r5, #156]	; 0x9c
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8016764:	2601      	movs	r6, #1
 8016766:	9003      	str	r0, [sp, #12]
      USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 8016768:	481c      	ldr	r0, [pc, #112]	; (80167dc <USBH_MSC_Read+0x1b8>)
 801676a:	f009 f883 	bl	801f874 <iprintf>
 801676e:	200a      	movs	r0, #10
 8016770:	f009 f898 	bl	801f8a4 <putchar>
      USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 8016774:	f895 109d 	ldrb.w	r1, [r5, #157]	; 0x9d
 8016778:	4819      	ldr	r0, [pc, #100]	; (80167e0 <USBH_MSC_Read+0x1bc>)
 801677a:	f009 f87b 	bl	801f874 <iprintf>
 801677e:	200a      	movs	r0, #10
 8016780:	f009 f890 	bl	801f8a4 <putchar>
      USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 8016784:	f895 109e 	ldrb.w	r1, [r5, #158]	; 0x9e
 8016788:	4816      	ldr	r0, [pc, #88]	; (80167e4 <USBH_MSC_Read+0x1c0>)
 801678a:	f009 f873 	bl	801f874 <iprintf>
 801678e:	200a      	movs	r0, #10
 8016790:	f009 f888 	bl	801f8a4 <putchar>
      MSC_Handle->unit[lun].error = MSC_ERROR;
 8016794:	2302      	movs	r3, #2
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 8016796:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 801679a:	2104      	movs	r1, #4
      MSC_Handle->unit[lun].state = MSC_IDLE;
 801679c:	f888 6000 	strb.w	r6, [r8]
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 80167a0:	9a03      	ldr	r2, [sp, #12]
      MSC_Handle->unit[lun].error = MSC_ERROR;
 80167a2:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 80167a6:	f006 fe61 	bl	801d46c <osMessagePut>
 80167aa:	e79b      	b.n	80166e4 <USBH_MSC_Read+0xc0>
 80167ac:	4602      	mov	r2, r0
 80167ae:	4618      	mov	r0, r3
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80167b0:	2308      	movs	r3, #8
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 80167b2:	4611      	mov	r1, r2
 80167b4:	2200      	movs	r2, #0
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80167b6:	f888 3000 	strb.w	r3, [r8]
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 80167ba:	f006 fe57 	bl	801d46c <osMessagePut>
 80167be:	e791      	b.n	80166e4 <USBH_MSC_Read+0xc0>
      USBH_UsrLog ("MSC Device NOT ready");
 80167c0:	4809      	ldr	r0, [pc, #36]	; (80167e8 <USBH_MSC_Read+0x1c4>)
 80167c2:	f009 f857 	bl	801f874 <iprintf>
 80167c6:	200a      	movs	r0, #10
 80167c8:	f009 f86c 	bl	801f8a4 <putchar>
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 80167cc:	2200      	movs	r2, #0
 80167ce:	2104      	movs	r1, #4
 80167d0:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80167d4:	f006 fe4a 	bl	801d46c <osMessagePut>
 80167d8:	e75f      	b.n	801669a <USBH_MSC_Read+0x76>
 80167da:	bf00      	nop
 80167dc:	08025bcc 	.word	0x08025bcc
 80167e0:	08025bdc 	.word	0x08025bdc
 80167e4:	08025bf8 	.word	0x08025bf8
 80167e8:	08025b6c 	.word	0x08025b6c

080167ec <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 80167ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 80167f0:	f890 531e 	ldrb.w	r5, [r0, #798]	; 0x31e
{
 80167f4:	b085      	sub	sp, #20
  if ((phost->device.is_connected == 0U) ||
 80167f6:	b195      	cbz	r5, 801681e <USBH_MSC_Write+0x32>
      (phost->gState != HOST_CLASS) ||
 80167f8:	7805      	ldrb	r5, [r0, #0]
 80167fa:	4604      	mov	r4, r0
  if ((phost->device.is_connected == 0U) ||
 80167fc:	2d0b      	cmp	r5, #11
 80167fe:	d10e      	bne.n	801681e <USBH_MSC_Write+0x32>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016800:	f8d0 7378 	ldr.w	r7, [r0, #888]	; 0x378
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8016804:	2534      	movs	r5, #52	; 0x34
 8016806:	460e      	mov	r6, r1
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016808:	f8d7 a01c 	ldr.w	sl, [r7, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 801680c:	fb05 f701 	mul.w	r7, r5, r1
 8016810:	eb0a 0c07 	add.w	ip, sl, r7
      (phost->gState != HOST_CLASS) ||
 8016814:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
 8016818:	f1be 0f01 	cmp.w	lr, #1
 801681c:	d003      	beq.n	8016826 <USBH_MSC_Write+0x3a>
  {
    return  USBH_FAIL;
 801681e:	2002      	movs	r0, #2
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
  return USBH_OK;
}
 8016820:	b005      	add	sp, #20
 8016822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MSC_Handle->state = MSC_WRITE;
 8016826:	f04f 0e07 	mov.w	lr, #7
  switch (MSC_Handle->unit[lun].state)
 801682a:	46b8      	mov	r8, r7
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 801682c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    if(((phost->Timer - timeout) >  (10000U * length)) || (phost->device.is_connected == 0U))
 801682e:	f242 7910 	movw	r9, #10000	; 0x2710
  MSC_Handle->state = MSC_WRITE;
 8016832:	f88a e00c 	strb.w	lr, [sl, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8016836:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 801683a:	f8aa 10fa 	strh.w	r1, [sl, #250]	; 0xfa
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 801683e:	9700      	str	r7, [sp, #0]
 8016840:	4647      	mov	r7, r8
 8016842:	f000 fb19 	bl	8016e78 <USBH_MSC_SCSI_Write>
 8016846:	239c      	movs	r3, #156	; 0x9c
  timeout = phost->Timer;
 8016848:	f8d4 b3bc 	ldr.w	fp, [r4, #956]	; 0x3bc
 801684c:	fb15 3306 	smlabb	r3, r5, r6, r3
 8016850:	9303      	str	r3, [sp, #12]
    if(((phost->Timer - timeout) >  (10000U * length)) || (phost->device.is_connected == 0U))
 8016852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016854:	fb09 f903 	mul.w	r9, r9, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8016858:	e00d      	b.n	8016876 <USBH_MSC_Write+0x8a>
  switch (MSC_Handle->unit[lun].state)
 801685a:	2b07      	cmp	r3, #7
 801685c:	d03e      	beq.n	80168dc <USBH_MSC_Write+0xf0>
 801685e:	2b05      	cmp	r3, #5
 8016860:	d029      	beq.n	80168b6 <USBH_MSC_Write+0xca>
    if(((phost->Timer - timeout) >  (10000U * length)) || (phost->device.is_connected == 0U))
 8016862:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8016866:	eba3 030b 	sub.w	r3, r3, fp
 801686a:	454b      	cmp	r3, r9
 801686c:	d84e      	bhi.n	801690c <USBH_MSC_Write+0x120>
 801686e:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8016872:	2b00      	cmp	r3, #0
 8016874:	d04a      	beq.n	801690c <USBH_MSC_Write+0x120>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016876:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 801687a:	69da      	ldr	r2, [r3, #28]
  switch (MSC_Handle->unit[lun].state)
 801687c:	19d5      	adds	r5, r2, r7
 801687e:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 8016882:	f105 0890 	add.w	r8, r5, #144	; 0x90
 8016886:	2b06      	cmp	r3, #6
 8016888:	d1e7      	bne.n	801685a <USBH_MSC_Write+0x6e>
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0U, NULL, 0U);
 801688a:	2300      	movs	r3, #0
 801688c:	4631      	mov	r1, r6
 801688e:	4620      	mov	r0, r4
 8016890:	461a      	mov	r2, r3
 8016892:	9300      	str	r3, [sp, #0]
 8016894:	f000 fb3e 	bl	8016f14 <USBH_MSC_SCSI_Read>
    if(scsi_status == USBH_OK)
 8016898:	bb48      	cbnz	r0, 80168ee <USBH_MSC_Write+0x102>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 801689a:	2301      	movs	r3, #1
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 801689c:	4602      	mov	r2, r0
 801689e:	2104      	movs	r1, #4
 80168a0:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80168a4:	f888 3000 	strb.w	r3, [r8]
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 80168a8:	f006 fde0 	bl	801d46c <osMessagePut>
  MSC_Handle->state = MSC_IDLE;
 80168ac:	2301      	movs	r3, #1
  return USBH_OK;
 80168ae:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
 80168b0:	f88a 300c 	strb.w	r3, [sl, #12]
  return USBH_OK;
 80168b4:	e7b4      	b.n	8016820 <USBH_MSC_Write+0x34>
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80168b6:	9b03      	ldr	r3, [sp, #12]
 80168b8:	4631      	mov	r1, r6
 80168ba:	4620      	mov	r0, r4
 80168bc:	441a      	add	r2, r3
 80168be:	f000 fa93 	bl	8016de8 <USBH_MSC_SCSI_RequestSense>
    if(scsi_status == USBH_OK)
 80168c2:	b388      	cbz	r0, 8016928 <USBH_MSC_Write+0x13c>
    if(scsi_status == USBH_FAIL)
 80168c4:	2802      	cmp	r0, #2
 80168c6:	d05f      	beq.n	8016988 <USBH_MSC_Write+0x19c>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 80168c8:	2804      	cmp	r0, #4
 80168ca:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
 80168ce:	d051      	beq.n	8016974 <USBH_MSC_Write+0x188>
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 80168d0:	4618      	mov	r0, r3
 80168d2:	2200      	movs	r2, #0
 80168d4:	2104      	movs	r1, #4
 80168d6:	f006 fdc9 	bl	801d46c <osMessagePut>
 80168da:	e7c2      	b.n	8016862 <USBH_MSC_Write+0x76>
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0U, NULL, 0U);
 80168dc:	2300      	movs	r3, #0
 80168de:	4631      	mov	r1, r6
 80168e0:	4620      	mov	r0, r4
 80168e2:	461a      	mov	r2, r3
 80168e4:	9300      	str	r3, [sp, #0]
 80168e6:	f000 fac7 	bl	8016e78 <USBH_MSC_SCSI_Write>
    if(scsi_status == USBH_OK)
 80168ea:	2800      	cmp	r0, #0
 80168ec:	d0d5      	beq.n	801689a <USBH_MSC_Write+0xae>
    else if( scsi_status == USBH_FAIL)
 80168ee:	2802      	cmp	r0, #2
 80168f0:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
 80168f4:	d00f      	beq.n	8016916 <USBH_MSC_Write+0x12a>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 80168f6:	2804      	cmp	r0, #4
 80168f8:	d1ea      	bne.n	80168d0 <USBH_MSC_Write+0xe4>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80168fa:	2408      	movs	r4, #8
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 80168fc:	4601      	mov	r1, r0
 80168fe:	2200      	movs	r2, #0
 8016900:	4618      	mov	r0, r3
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8016902:	f888 4000 	strb.w	r4, [r8]
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 8016906:	f006 fdb1 	bl	801d46c <osMessagePut>
 801690a:	e7cf      	b.n	80168ac <USBH_MSC_Write+0xc0>
      MSC_Handle->state = MSC_IDLE;
 801690c:	2301      	movs	r3, #1
      return USBH_FAIL;
 801690e:	2002      	movs	r0, #2
      MSC_Handle->state = MSC_IDLE;
 8016910:	f88a 300c 	strb.w	r3, [sl, #12]
      return USBH_FAIL;
 8016914:	e784      	b.n	8016820 <USBH_MSC_Write+0x34>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8016916:	2105      	movs	r1, #5
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 8016918:	4618      	mov	r0, r3
 801691a:	2200      	movs	r2, #0
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 801691c:	f885 1090 	strb.w	r1, [r5, #144]	; 0x90
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 8016920:	2104      	movs	r1, #4
 8016922:	f006 fda3 	bl	801d46c <osMessagePut>
 8016926:	e79c      	b.n	8016862 <USBH_MSC_Write+0x76>
      USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 8016928:	f895 109c 	ldrb.w	r1, [r5, #156]	; 0x9c
      MSC_Handle->unit[lun].state = MSC_IDLE;
 801692c:	2601      	movs	r6, #1
 801692e:	9003      	str	r0, [sp, #12]
      USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 8016930:	481c      	ldr	r0, [pc, #112]	; (80169a4 <USBH_MSC_Write+0x1b8>)
 8016932:	f008 ff9f 	bl	801f874 <iprintf>
 8016936:	200a      	movs	r0, #10
 8016938:	f008 ffb4 	bl	801f8a4 <putchar>
      USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 801693c:	f895 109d 	ldrb.w	r1, [r5, #157]	; 0x9d
 8016940:	4819      	ldr	r0, [pc, #100]	; (80169a8 <USBH_MSC_Write+0x1bc>)
 8016942:	f008 ff97 	bl	801f874 <iprintf>
 8016946:	200a      	movs	r0, #10
 8016948:	f008 ffac 	bl	801f8a4 <putchar>
      USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 801694c:	f895 109e 	ldrb.w	r1, [r5, #158]	; 0x9e
 8016950:	4816      	ldr	r0, [pc, #88]	; (80169ac <USBH_MSC_Write+0x1c0>)
 8016952:	f008 ff8f 	bl	801f874 <iprintf>
 8016956:	200a      	movs	r0, #10
 8016958:	f008 ffa4 	bl	801f8a4 <putchar>
      MSC_Handle->unit[lun].error = MSC_ERROR;
 801695c:	2302      	movs	r3, #2
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 801695e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8016962:	2104      	movs	r1, #4
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8016964:	f888 6000 	strb.w	r6, [r8]
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 8016968:	9a03      	ldr	r2, [sp, #12]
      MSC_Handle->unit[lun].error = MSC_ERROR;
 801696a:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 801696e:	f006 fd7d 	bl	801d46c <osMessagePut>
 8016972:	e79b      	b.n	80168ac <USBH_MSC_Write+0xc0>
 8016974:	4602      	mov	r2, r0
 8016976:	4618      	mov	r0, r3
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8016978:	2308      	movs	r3, #8
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 801697a:	4611      	mov	r1, r2
 801697c:	2200      	movs	r2, #0
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 801697e:	f888 3000 	strb.w	r3, [r8]
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 8016982:	f006 fd73 	bl	801d46c <osMessagePut>
 8016986:	e791      	b.n	80168ac <USBH_MSC_Write+0xc0>
      USBH_UsrLog ("MSC Device NOT ready");
 8016988:	4809      	ldr	r0, [pc, #36]	; (80169b0 <USBH_MSC_Write+0x1c4>)
 801698a:	f008 ff73 	bl	801f874 <iprintf>
 801698e:	200a      	movs	r0, #10
 8016990:	f008 ff88 	bl	801f8a4 <putchar>
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 8016994:	2200      	movs	r2, #0
 8016996:	2104      	movs	r1, #4
 8016998:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 801699c:	f006 fd66 	bl	801d46c <osMessagePut>
 80169a0:	e75f      	b.n	8016862 <USBH_MSC_Write+0x76>
 80169a2:	bf00      	nop
 80169a4:	08025bcc 	.word	0x08025bcc
 80169a8:	08025bdc 	.word	0x08025bdc
 80169ac:	08025bf8 	.word	0x08025bf8
 80169b0:	08025b6c 	.word	0x08025b6c

080169b4 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80169b4:	b430      	push	{r4, r5}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80169b6:	f64f 65a1 	movw	r5, #65185	; 0xfea1
                                                 | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
 80169ba:	f44f 3480 	mov.w	r4, #65536	; 0x10000
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
 80169be:	2201      	movs	r2, #1
  phost->Control.setup.b.wValue.w = 0U;
 80169c0:	e9c0 5404 	strd	r5, r4, [r0, #16]
}
 80169c4:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, Maxlun, 1U);
 80169c6:	f001 bfe3 	b.w	8018990 <USBH_CtlReq>
 80169ca:	bf00      	nop

080169cc <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80169cc:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80169d0:	2201      	movs	r2, #1
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80169d2:	4907      	ldr	r1, [pc, #28]	; (80169f0 <USBH_MSC_BOT_Init+0x24>)
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;

  return USBH_OK;
}
 80169d4:	2000      	movs	r0, #0
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80169d6:	69db      	ldr	r3, [r3, #28]
{
 80169d8:	b410      	push	{r4}
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80169da:	4c06      	ldr	r4, [pc, #24]	; (80169f4 <USBH_MSC_BOT_Init+0x28>)
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80169dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80169e0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80169e4:	e9c3 4115 	strd	r4, r1, [r3, #84]	; 0x54
}
 80169e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169ec:	4770      	bx	lr
 80169ee:	bf00      	nop
 80169f0:	20304050 	.word	0x20304050
 80169f4:	43425355 	.word	0x43425355

080169f8 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80169f8:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 80169fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80169fe:	69dc      	ldr	r4, [r3, #28]
{
 8016a00:	b083      	sub	sp, #12
 8016a02:	4605      	mov	r5, r0
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 8016a04:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8016a08:	3b01      	subs	r3, #1
 8016a0a:	2b0a      	cmp	r3, #10
 8016a0c:	d810      	bhi.n	8016a30 <USBH_MSC_BOT_Process+0x38>
 8016a0e:	e8df f003 	tbb	[pc, r3]
 8016a12:	3022      	.short	0x3022
 8016a14:	85790644 	.word	0x85790644
 8016a18:	70655a4f 	.word	0x70655a4f
 8016a1c:	13          	.byte	0x13
 8016a1d:	00          	.byte	0x00

    break;

  case BOT_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8016a1e:	7921      	ldrb	r1, [r4, #4]
 8016a20:	f7f5 fd5a 	bl	800c4d8 <USBH_LL_GetURBState>

    if(URB_Status == USBH_URB_DONE)
 8016a24:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8016a26:	4606      	mov	r6, r0
    if(URB_Status == USBH_URB_DONE)
 8016a28:	f000 80b1 	beq.w	8016b8e <USBH_MSC_BOT_Process+0x196>
#if (USBH_USE_OS == 1U)
        osMessagePut (phost->os_event, USBH_URB_EVENT, 0U);
#endif
      }
    }
    else if(URB_Status == USBH_URB_STALL)
 8016a2c:	2805      	cmp	r0, #5
 8016a2e:	d053      	beq.n	8016ad8 <USBH_MSC_BOT_Process+0xe0>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8016a30:	2601      	movs	r6, #1

  default:
    break;
  }
  return status;
}
 8016a32:	4630      	mov	r0, r6
 8016a34:	b003      	add	sp, #12
 8016a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  phost->Control.setup.b.wValue.w = 0U;
 8016a38:	2200      	movs	r2, #0
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8016a3a:	f64f 7321 	movw	r3, #65313	; 0xff21
  return USBH_CtlReq(phost, 0U, 0U);
 8016a3e:	4611      	mov	r1, r2
  phost->Control.setup.b.wValue.w = 0U;
 8016a40:	e9c0 3204 	strd	r3, r2, [r0, #16]
  return USBH_CtlReq(phost, 0U, 0U);
 8016a44:	f001 ffa4 	bl	8018990 <USBH_CtlReq>
    if ( status == USBH_OK)
 8016a48:	4606      	mov	r6, r0
 8016a4a:	2800      	cmp	r0, #0
 8016a4c:	d1f1      	bne.n	8016a32 <USBH_MSC_BOT_Process+0x3a>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016a4e:	2301      	movs	r3, #1
 8016a50:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8016a54:	e7ed      	b.n	8016a32 <USBH_MSC_BOT_Process+0x3a>
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8016a56:	2202      	movs	r2, #2
    USBH_BulkSendData (phost, MSC_Handle->hbot.cbw.data,
 8016a58:	2601      	movs	r6, #1
    MSC_Handle->hbot.cbw.field.LUN = lun;
 8016a5a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    USBH_BulkSendData (phost, MSC_Handle->hbot.cbw.data,
 8016a5e:	f104 0154 	add.w	r1, r4, #84	; 0x54
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8016a62:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    USBH_BulkSendData (phost, MSC_Handle->hbot.cbw.data,
 8016a66:	221f      	movs	r2, #31
 8016a68:	7963      	ldrb	r3, [r4, #5]
 8016a6a:	9600      	str	r6, [sp, #0]
 8016a6c:	f002 f8e8 	bl	8018c40 <USBH_BulkSendData>
    break;
 8016a70:	e7df      	b.n	8016a32 <USBH_MSC_BOT_Process+0x3a>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8016a72:	7961      	ldrb	r1, [r4, #5]
 8016a74:	f7f5 fd30 	bl	800c4d8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8016a78:	2801      	cmp	r0, #1
 8016a7a:	d070      	beq.n	8016b5e <USBH_MSC_BOT_Process+0x166>
    else if(URB_Status == USBH_URB_NOTREADY)
 8016a7c:	2802      	cmp	r0, #2
 8016a7e:	d064      	beq.n	8016b4a <USBH_MSC_BOT_Process+0x152>
    else if(URB_Status == USBH_URB_STALL)
 8016a80:	2805      	cmp	r0, #5
 8016a82:	d1d5      	bne.n	8016a30 <USBH_MSC_BOT_Process+0x38>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8016a84:	230a      	movs	r3, #10
        osMessagePut (phost->os_event, USBH_URB_EVENT, 0U);
 8016a86:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	2102      	movs	r1, #2
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8016a8e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8016a92:	2601      	movs	r6, #1
        osMessagePut (phost->os_event, USBH_URB_EVENT, 0U);
 8016a94:	f006 fcea 	bl	801d46c <osMessagePut>
 8016a98:	e7cb      	b.n	8016a32 <USBH_MSC_BOT_Process+0x3a>
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 8016a9a:	7923      	ldrb	r3, [r4, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8016a9c:	2601      	movs	r6, #1
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 8016a9e:	8962      	ldrh	r2, [r4, #10]
 8016aa0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8016aa4:	f002 f8e4 	bl	8018c70 <USBH_BulkReceiveData>
    MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8016aa8:	2304      	movs	r3, #4
 8016aaa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    break;
 8016aae:	e7c0      	b.n	8016a32 <USBH_MSC_BOT_Process+0x3a>
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.csw.data,
 8016ab0:	7923      	ldrb	r3, [r4, #4]
 8016ab2:	220d      	movs	r2, #13
 8016ab4:	f104 0178 	add.w	r1, r4, #120	; 0x78
  USBH_StatusTypeDef   status = USBH_BUSY;
 8016ab8:	2601      	movs	r6, #1
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.csw.data,
 8016aba:	f002 f8d9 	bl	8018c70 <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8016abe:	2308      	movs	r3, #8
 8016ac0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    break;
 8016ac4:	e7b5      	b.n	8016a32 <USBH_MSC_BOT_Process+0x3a>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8016ac6:	7921      	ldrb	r1, [r4, #4]
 8016ac8:	f7f5 fd06 	bl	800c4d8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8016acc:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8016ace:	4603      	mov	r3, r0
    if(URB_Status == USBH_URB_DONE)
 8016ad0:	f000 8097 	beq.w	8016c02 <USBH_MSC_BOT_Process+0x20a>
    else if(URB_Status == USBH_URB_STALL)
 8016ad4:	2805      	cmp	r0, #5
 8016ad6:	d1ab      	bne.n	8016a30 <USBH_MSC_BOT_Process+0x38>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8016ad8:	2309      	movs	r3, #9
 8016ada:	e7d4      	b.n	8016a86 <USBH_MSC_BOT_Process+0x8e>

  switch (dir)
  {
  case BOT_DIR_IN :
    /* send ClrFeture on Bulk IN endpoint */
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8016adc:	79e1      	ldrb	r1, [r4, #7]
 8016ade:	f001 fe33 	bl	8018748 <USBH_ClrFeature>
    if (error == USBH_OK)
 8016ae2:	b368      	cbz	r0, 8016b40 <USBH_MSC_BOT_Process+0x148>
    else if (error == USBH_UNRECOVERED_ERROR)
 8016ae4:	2804      	cmp	r0, #4
 8016ae6:	d1a3      	bne.n	8016a30 <USBH_MSC_BOT_Process+0x38>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8016ae8:	230b      	movs	r3, #11
  USBH_StatusTypeDef   status = USBH_BUSY;
 8016aea:	2601      	movs	r6, #1
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8016aec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8016af0:	e79f      	b.n	8016a32 <USBH_MSC_BOT_Process+0x3a>

    break;

  case BOT_DIR_OUT :
    /*send ClrFeature on Bulk OUT endpoint */
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8016af2:	79a1      	ldrb	r1, [r4, #6]
 8016af4:	f001 fe28 	bl	8018748 <USBH_ClrFeature>
    if (error == USBH_OK)
 8016af8:	4607      	mov	r7, r0
 8016afa:	2800      	cmp	r0, #0
 8016afc:	d06c      	beq.n	8016bd8 <USBH_MSC_BOT_Process+0x1e0>
      if (error == USBH_UNRECOVERED_ERROR)
 8016afe:	2804      	cmp	r0, #4
 8016b00:	d196      	bne.n	8016a30 <USBH_MSC_BOT_Process+0x38>
 8016b02:	e7f1      	b.n	8016ae8 <USBH_MSC_BOT_Process+0xf0>
    USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 8016b04:	2601      	movs	r6, #1
 8016b06:	7963      	ldrb	r3, [r4, #5]
 8016b08:	8922      	ldrh	r2, [r4, #8]
 8016b0a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8016b0e:	9600      	str	r6, [sp, #0]
 8016b10:	f002 f896 	bl	8018c40 <USBH_BulkSendData>
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8016b14:	2306      	movs	r3, #6
 8016b16:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    break;
 8016b1a:	e78a      	b.n	8016a32 <USBH_MSC_BOT_Process+0x3a>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8016b1c:	7961      	ldrb	r1, [r4, #5]
 8016b1e:	f7f5 fcdb 	bl	800c4d8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8016b22:	2801      	cmp	r0, #1
 8016b24:	d045      	beq.n	8016bb2 <USBH_MSC_BOT_Process+0x1ba>
    else if(URB_Status == USBH_URB_NOTREADY)
 8016b26:	2802      	cmp	r0, #2
 8016b28:	d1aa      	bne.n	8016a80 <USBH_MSC_BOT_Process+0x88>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8016b2a:	2305      	movs	r3, #5
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0U);
 8016b2c:	4601      	mov	r1, r0
 8016b2e:	2200      	movs	r2, #0
 8016b30:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8016b34:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8016b38:	2601      	movs	r6, #1
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0U);
 8016b3a:	f006 fc97 	bl	801d46c <osMessagePut>
 8016b3e:	e778      	b.n	8016a32 <USBH_MSC_BOT_Process+0x3a>
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8016b40:	2307      	movs	r3, #7
  USBH_StatusTypeDef   status = USBH_BUSY;
 8016b42:	2601      	movs	r6, #1
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8016b44:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8016b48:	e773      	b.n	8016a32 <USBH_MSC_BOT_Process+0x3a>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016b4a:	2601      	movs	r6, #1
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0U);
 8016b4c:	4601      	mov	r1, r0
 8016b4e:	2200      	movs	r2, #0
 8016b50:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016b54:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0U);
 8016b58:	f006 fc88 	bl	801d46c <osMessagePut>
 8016b5c:	e769      	b.n	8016a32 <USBH_MSC_BOT_Process+0x3a>
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8016b5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8016b60:	b18b      	cbz	r3, 8016b86 <USBH_MSC_BOT_Process+0x18e>
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8016b62:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 8016b66:	2b00      	cmp	r3, #0
          MSC_Handle->hbot.state = BOT_DATA_IN;
 8016b68:	bfb4      	ite	lt
 8016b6a:	2303      	movlt	r3, #3
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 8016b6c:	2305      	movge	r3, #5
 8016b6e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    osMessagePut (phost->os_event, USBH_URB_EVENT, 0U);
 8016b72:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8016b76:	2200      	movs	r2, #0
 8016b78:	2102      	movs	r1, #2
  USBH_StatusTypeDef   status = USBH_BUSY;
 8016b7a:	2601      	movs	r6, #1
    osMessagePut (phost->os_event, USBH_URB_EVENT, 0U);
 8016b7c:	f006 fc76 	bl	801d46c <osMessagePut>
 8016b80:	e757      	b.n	8016a32 <USBH_MSC_BOT_Process+0x3a>
 8016b82:	2300      	movs	r3, #0
 8016b84:	65e3      	str	r3, [r4, #92]	; 0x5c
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8016b86:	2307      	movs	r3, #7
 8016b88:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8016b8c:	e7f1      	b.n	8016b72 <USBH_MSC_BOT_Process+0x17a>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8016b8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8016b90:	8962      	ldrh	r2, [r4, #10]
 8016b92:	4293      	cmp	r3, r2
 8016b94:	d952      	bls.n	8016c3c <USBH_MSC_BOT_Process+0x244>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8016b96:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8016b9a:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8016b9c:	4411      	add	r1, r2
 8016b9e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016ba0:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d04b      	beq.n	8016c40 <USBH_MSC_BOT_Process+0x248>
        USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 8016ba8:	7923      	ldrb	r3, [r4, #4]
 8016baa:	4628      	mov	r0, r5
 8016bac:	f002 f860 	bl	8018c70 <USBH_BulkReceiveData>
 8016bb0:	e73f      	b.n	8016a32 <USBH_MSC_BOT_Process+0x3a>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8016bb2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8016bb4:	8922      	ldrh	r2, [r4, #8]
 8016bb6:	4293      	cmp	r3, r2
 8016bb8:	d9e3      	bls.n	8016b82 <USBH_MSC_BOT_Process+0x18a>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8016bba:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8016bbe:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8016bc0:	4411      	add	r1, r2
 8016bc2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016bc4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d0dc      	beq.n	8016b86 <USBH_MSC_BOT_Process+0x18e>
        USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 8016bcc:	7963      	ldrb	r3, [r4, #5]
 8016bce:	9000      	str	r0, [sp, #0]
 8016bd0:	4628      	mov	r0, r5
 8016bd2:	f002 f835 	bl	8018c40 <USBH_BulkSendData>
 8016bd6:	e7cc      	b.n	8016b72 <USBH_MSC_BOT_Process+0x17a>
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8016bd8:	7961      	ldrb	r1, [r4, #5]
 8016bda:	4628      	mov	r0, r5
 8016bdc:	f7f5 fca4 	bl	800c528 <USBH_LL_GetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8016be0:	f1c0 0201 	rsb	r2, r0, #1
 8016be4:	7961      	ldrb	r1, [r4, #5]
 8016be6:	4628      	mov	r0, r5
 8016be8:	b2d2      	uxtb	r2, r2
  USBH_StatusTypeDef   status = USBH_BUSY;
 8016bea:	2601      	movs	r6, #1
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8016bec:	f7f5 fc8a 	bl	800c504 <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8016bf0:	463a      	mov	r2, r7
 8016bf2:	4628      	mov	r0, r5
 8016bf4:	7921      	ldrb	r1, [r4, #4]
 8016bf6:	f7f5 fc85 	bl	800c504 <USBH_LL_SetToggle>
      MSC_Handle->hbot.state = BOT_ERROR_IN;
 8016bfa:	2309      	movs	r3, #9
 8016bfc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8016c00:	e717      	b.n	8016a32 <USBH_MSC_BOT_Process+0x3a>
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016c02:	f8d5 2378 	ldr.w	r2, [r5, #888]	; 0x378
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

    /*Checking if the transfer length is different than 13*/
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8016c06:	4628      	mov	r0, r5
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016c08:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016c0c:	69d6      	ldr	r6, [r2, #28]
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8016c0e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8016c12:	7931      	ldrb	r1, [r6, #4]
 8016c14:	f7f5 fc18 	bl	800c448 <USBH_LL_GetLastXferSize>
 8016c18:	280d      	cmp	r0, #13
 8016c1a:	d107      	bne.n	8016c2c <USBH_MSC_BOT_Process+0x234>
    }
    else
    { /* CSW length is Correct */

      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8016c1c:	4b0d      	ldr	r3, [pc, #52]	; (8016c54 <USBH_MSC_BOT_Process+0x25c>)
 8016c1e:	6fb2      	ldr	r2, [r6, #120]	; 0x78
 8016c20:	429a      	cmp	r2, r3
 8016c22:	d103      	bne.n	8016c2c <USBH_MSC_BOT_Process+0x234>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */

        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8016c24:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
 8016c26:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8016c28:	429a      	cmp	r2, r3
 8016c2a:	d00b      	beq.n	8016c44 <USBH_MSC_BOT_Process+0x24c>
        status = USBH_FAIL;
 8016c2c:	2602      	movs	r6, #2
      osMessagePut (phost->os_event, USBH_URB_EVENT, 0U);
 8016c2e:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8016c32:	2200      	movs	r2, #0
 8016c34:	2102      	movs	r1, #2
 8016c36:	f006 fc19 	bl	801d46c <osMessagePut>
 8016c3a:	e6fa      	b.n	8016a32 <USBH_MSC_BOT_Process+0x3a>
 8016c3c:	2300      	movs	r3, #0
 8016c3e:	65e3      	str	r3, [r4, #92]	; 0x5c
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8016c40:	2307      	movs	r3, #7
 8016c42:	e720      	b.n	8016a86 <USBH_MSC_BOT_Process+0x8e>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0U)
 8016c44:	f896 3084 	ldrb.w	r3, [r6, #132]	; 0x84
        status = USBH_OK;
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	bf14      	ite	ne
 8016c4c:	2602      	movne	r6, #2
 8016c4e:	2600      	moveq	r6, #0
 8016c50:	e7ed      	b.n	8016c2e <USBH_MSC_BOT_Process+0x236>
 8016c52:	bf00      	nop
 8016c54:	53425355 	.word	0x53425355

08016c58 <USBH_MSC_SCSI_TestUnitReady>:
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost,
                                                uint8_t lun)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016c58:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8016c5c:	69db      	ldr	r3, [r3, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8016c5e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8016c62:	2a01      	cmp	r2, #1
 8016c64:	d005      	beq.n	8016c72 <USBH_MSC_SCSI_TestUnitReady+0x1a>
 8016c66:	2a02      	cmp	r2, #2
 8016c68:	d101      	bne.n	8016c6e <USBH_MSC_SCSI_TestUnitReady+0x16>
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
    error = USBH_BUSY;
    break;

  case BOT_CMD_WAIT:
    error = USBH_MSC_BOT_Process(phost, lun);
 8016c6a:	f7ff bec5 	b.w	80169f8 <USBH_MSC_BOT_Process>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8016c6e:	2002      	movs	r0, #2
  default:
    break;
  }

  return error;
}
 8016c70:	4770      	bx	lr
{
 8016c72:	b430      	push	{r4, r5}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8016c74:	2100      	movs	r1, #0
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016c76:	200a      	movs	r0, #10
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016c78:	2502      	movs	r5, #2
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016c7e:	f8c3 1063 	str.w	r1, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016c82:	f883 0062 	strb.w	r0, [r3, #98]	; 0x62
    error = USBH_BUSY;
 8016c86:	4610      	mov	r0, r2
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016c88:	f8c3 1067 	str.w	r1, [r3, #103]	; 0x67
 8016c8c:	f8c3 106b 	str.w	r1, [r3, #107]	; 0x6b
 8016c90:	f8c3 106f 	str.w	r1, [r3, #111]	; 0x6f
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016c94:	f883 5052 	strb.w	r5, [r3, #82]	; 0x52
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8016c98:	65d9      	str	r1, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8016c9a:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8016c9e:	f883 1063 	strb.w	r1, [r3, #99]	; 0x63
}
 8016ca2:	bc30      	pop	{r4, r5}
 8016ca4:	4770      	bx	lr
 8016ca6:	bf00      	nop

08016ca8 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
 8016ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016caa:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8016cae:	69dc      	ldr	r4, [r3, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8016cb0:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8016cb4:	2b01      	cmp	r3, #1
 8016cb6:	d010      	beq.n	8016cda <USBH_MSC_SCSI_ReadCapacity+0x32>
 8016cb8:	2b02      	cmp	r3, #2
 8016cba:	d10c      	bne.n	8016cd6 <USBH_MSC_SCSI_ReadCapacity+0x2e>
 8016cbc:	4615      	mov	r5, r2
    error = USBH_BUSY;
    break;

  case BOT_CMD_WAIT:

    error = USBH_MSC_BOT_Process(phost, lun);
 8016cbe:	f7ff fe9b 	bl	80169f8 <USBH_MSC_BOT_Process>

    if(error == USBH_OK)
 8016cc2:	b938      	cbnz	r0, 8016cd4 <USBH_MSC_SCSI_ReadCapacity+0x2c>
    {
      /*assign the capacity*/
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 8016cc4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8016cc8:	6813      	ldr	r3, [r2, #0]
 8016cca:	ba1b      	rev	r3, r3
 8016ccc:	602b      	str	r3, [r5, #0]
                           ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);

      /*assign the page length*/
      capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8016cce:	88d3      	ldrh	r3, [r2, #6]
 8016cd0:	ba5b      	rev16	r3, r3
 8016cd2:	80ab      	strh	r3, [r5, #4]
  default:
    break;
  }

  return error;
}
 8016cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8016cd6:	2001      	movs	r0, #1
}
 8016cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8016cda:	2580      	movs	r5, #128	; 0x80
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016cdc:	2200      	movs	r2, #0
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8016cde:	2108      	movs	r1, #8
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016ce0:	200a      	movs	r0, #10
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8016ce2:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8016ce6:	2725      	movs	r7, #37	; 0x25
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016ce8:	2602      	movs	r6, #2
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8016cea:	f104 0510 	add.w	r5, r4, #16
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016cee:	f884 0062 	strb.w	r0, [r4, #98]	; 0x62
    error = USBH_BUSY;
 8016cf2:	4618      	mov	r0, r3
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016cf4:	f8c4 2063 	str.w	r2, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8016cf8:	65e1      	str	r1, [r4, #92]	; 0x5c
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016cfa:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
 8016cfe:	f8c4 206b 	str.w	r2, [r4, #107]	; 0x6b
 8016d02:	f8c4 206f 	str.w	r2, [r4, #111]	; 0x6f
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016d06:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8016d0a:	f884 7063 	strb.w	r7, [r4, #99]	; 0x63
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016d0e:	f884 6052 	strb.w	r6, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8016d12:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 8016d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016d18 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, uint8_t lun,
                                          SCSI_StdInquiryDataTypeDef *inquiry)
{
 8016d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016d1a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8016d1e:	69dc      	ldr	r4, [r3, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8016d20:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8016d24:	2b01      	cmp	r3, #1
 8016d26:	d03a      	beq.n	8016d9e <USBH_MSC_SCSI_Inquiry+0x86>
 8016d28:	2b02      	cmp	r3, #2
 8016d2a:	d002      	beq.n	8016d32 <USBH_MSC_SCSI_Inquiry+0x1a>
  USBH_StatusTypeDef error = USBH_FAIL;
 8016d2c:	2502      	movs	r5, #2
  default:
    break;
  }

  return error;
}
 8016d2e:	4628      	mov	r0, r5
 8016d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d32:	4616      	mov	r6, r2
    error = USBH_MSC_BOT_Process(phost, lun);
 8016d34:	f7ff fe60 	bl	80169f8 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8016d38:	4605      	mov	r5, r0
 8016d3a:	2800      	cmp	r0, #0
 8016d3c:	d1f7      	bne.n	8016d2e <USBH_MSC_SCSI_Inquiry+0x16>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8016d3e:	4601      	mov	r1, r0
 8016d40:	2222      	movs	r2, #34	; 0x22
 8016d42:	4630      	mov	r0, r6
 8016d44:	f008 fce6 	bl	801f714 <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8016d48:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8016d4c:	781b      	ldrb	r3, [r3, #0]
 8016d4e:	f003 031f 	and.w	r3, r3, #31
 8016d52:	7073      	strb	r3, [r6, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8016d54:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8016d58:	781b      	ldrb	r3, [r3, #0]
 8016d5a:	095b      	lsrs	r3, r3, #5
 8016d5c:	7033      	strb	r3, [r6, #0]
      if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8016d5e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8016d62:	785b      	ldrb	r3, [r3, #1]
 8016d64:	09db      	lsrs	r3, r3, #7
 8016d66:	70b3      	strb	r3, [r6, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8016d68:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8016d6c:	f853 1f08 	ldr.w	r1, [r3, #8]!
 8016d70:	685b      	ldr	r3, [r3, #4]
 8016d72:	f8c6 1003 	str.w	r1, [r6, #3]
 8016d76:	f8c6 3007 	str.w	r3, [r6, #7]
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8016d7a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8016d7e:	f853 7f10 	ldr.w	r7, [r3, #16]!
 8016d82:	6858      	ldr	r0, [r3, #4]
 8016d84:	6899      	ldr	r1, [r3, #8]
 8016d86:	68db      	ldr	r3, [r3, #12]
 8016d88:	6130      	str	r0, [r6, #16]
}
 8016d8a:	4628      	mov	r0, r5
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8016d8c:	60f7      	str	r7, [r6, #12]
 8016d8e:	6171      	str	r1, [r6, #20]
 8016d90:	61b3      	str	r3, [r6, #24]
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8016d92:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8016d96:	6a1b      	ldr	r3, [r3, #32]
 8016d98:	f8c6 301d 	str.w	r3, [r6, #29]
}
 8016d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8016d9e:	014d      	lsls	r5, r1, #5
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8016da0:	2124      	movs	r1, #36	; 0x24
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8016da2:	2200      	movs	r2, #0
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8016da4:	2780      	movs	r7, #128	; 0x80
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016da6:	260a      	movs	r6, #10
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8016da8:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016dac:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    error = USBH_BUSY;
 8016db0:	461d      	mov	r5, r3
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8016db2:	2012      	movs	r0, #18
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8016db4:	65e1      	str	r1, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8016db6:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8016dba:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016dbe:	2102      	movs	r1, #2
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8016dc0:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8016dc4:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
}
 8016dc8:	4628      	mov	r0, r5
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016dca:	f884 6062 	strb.w	r6, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8016dce:	f8c4 2069 	str.w	r2, [r4, #105]	; 0x69
    MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8016dd2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8016dd6:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8016dda:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016dde:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8016de2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8016de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016de8 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_SenseTypeDef *sense_data)
{
 8016de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016dea:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8016dee:	69dc      	ldr	r4, [r3, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8016df0:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8016df4:	2b01      	cmp	r3, #1
 8016df6:	d016      	beq.n	8016e26 <USBH_MSC_SCSI_RequestSense+0x3e>
 8016df8:	2b02      	cmp	r3, #2
 8016dfa:	d112      	bne.n	8016e22 <USBH_MSC_SCSI_RequestSense+0x3a>
 8016dfc:	4615      	mov	r5, r2
    error = USBH_BUSY;
    break;

  case BOT_CMD_WAIT:

    error = USBH_MSC_BOT_Process(phost, lun);
 8016dfe:	f7ff fdfb 	bl	80169f8 <USBH_MSC_BOT_Process>

    if(error == USBH_OK)
 8016e02:	b968      	cbnz	r0, 8016e20 <USBH_MSC_SCSI_RequestSense+0x38>
    {
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8016e04:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8016e08:	789b      	ldrb	r3, [r3, #2]
 8016e0a:	f003 030f 	and.w	r3, r3, #15
 8016e0e:	702b      	strb	r3, [r5, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8016e10:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8016e14:	7b1b      	ldrb	r3, [r3, #12]
 8016e16:	706b      	strb	r3, [r5, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8016e18:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8016e1c:	7b5b      	ldrb	r3, [r3, #13]
 8016e1e:	70ab      	strb	r3, [r5, #2]
  default:
    break;
  }

  return error;
}
 8016e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8016e22:	2002      	movs	r0, #2
}
 8016e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8016e26:	2780      	movs	r7, #128	; 0x80
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016e28:	260a      	movs	r6, #10
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016e2a:	2200      	movs	r2, #0
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8016e2c:	014d      	lsls	r5, r1, #5
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8016e2e:	f04f 0c03 	mov.w	ip, #3
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8016e32:	210e      	movs	r1, #14
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8016e34:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016e38:	2702      	movs	r7, #2
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016e3a:	f884 6062 	strb.w	r6, [r4, #98]	; 0x62
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8016e3e:	f104 0610 	add.w	r6, r4, #16
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8016e42:	65e1      	str	r1, [r4, #92]	; 0x5c
    error = USBH_BUSY;
 8016e44:	4618      	mov	r0, r3
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016e46:	f8c4 2069 	str.w	r2, [r4, #105]	; 0x69
 8016e4a:	f8c4 206d 	str.w	r2, [r4, #109]	; 0x6d
 8016e4e:	f8a4 2071 	strh.w	r2, [r4, #113]	; 0x71
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8016e52:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8016e56:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8016e5a:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8016e5e:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8016e62:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016e66:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8016e6a:	f884 c063 	strb.w	ip, [r4, #99]	; 0x63
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016e6e:	f884 7052 	strb.w	r7, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8016e72:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
}
 8016e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016e78 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8016e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016e7c:	f8d0 4378 	ldr.w	r4, [r0, #888]	; 0x378
{
 8016e80:	9e06      	ldr	r6, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016e82:	69e4      	ldr	r4, [r4, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8016e84:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8016e88:	2d01      	cmp	r5, #1
 8016e8a:	d008      	beq.n	8016e9e <USBH_MSC_SCSI_Write+0x26>
 8016e8c:	2d02      	cmp	r5, #2
 8016e8e:	d002      	beq.n	8016e96 <USBH_MSC_SCSI_Write+0x1e>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8016e90:	2002      	movs	r0, #2
  default:
    break;
  }

  return error;
}
 8016e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    error = USBH_MSC_BOT_Process(phost, lun);
 8016e9a:	f7ff bdad 	b.w	80169f8 <USBH_MSC_BOT_Process>
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8016e9e:	2100      	movs	r1, #0
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8016ea0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8016ea4:	f3c2 4007 	ubfx	r0, r2, #16, #8
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8016ea8:	f3c6 2807 	ubfx	r8, r6, #8, #8
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8016eac:	460f      	mov	r7, r1
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8016eae:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016eb2:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8016eb6:	f36c 0707 	bfi	r7, ip, #0, #8
 8016eba:	f3c2 2c07 	ubfx	ip, r2, #8, #8
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016ebe:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8016ec2:	f360 270f 	bfi	r7, r0, #8, #8
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8016ec6:	f8b4 0098 	ldrh.w	r0, [r4, #152]	; 0x98
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016eca:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8016ece:	f36c 4717 	bfi	r7, ip, #16, #8
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016ed2:	f04f 0c0a 	mov.w	ip, #10
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8016ed6:	fb06 f000 	mul.w	r0, r6, r0
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8016eda:	f362 671f 	bfi	r7, r2, #24, #8
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016ede:	f884 c062 	strb.w	ip, [r4, #98]	; 0x62
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016ee2:	f04f 0c02 	mov.w	ip, #2
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8016ee6:	65e0      	str	r0, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8016ee8:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    error = USBH_BUSY;
 8016eec:	4628      	mov	r0, r5
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016eee:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8016ef2:	f8c4 7065 	str.w	r7, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8016ef6:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8016efa:	f884 806a 	strb.w	r8, [r4, #106]	; 0x6a
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016efe:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = pbuf;
 8016f02:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8016f06:	f884 e063 	strb.w	lr, [r4, #99]	; 0x63
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016f0a:	f884 c052 	strb.w	ip, [r4, #82]	; 0x52
}
 8016f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f12:	bf00      	nop

08016f14 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8016f14:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016f16:	f8d0 4378 	ldr.w	r4, [r0, #888]	; 0x378
{
 8016f1a:	9e05      	ldr	r6, [sp, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016f1c:	69e4      	ldr	r4, [r4, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8016f1e:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8016f22:	2d01      	cmp	r5, #1
 8016f24:	d007      	beq.n	8016f36 <USBH_MSC_SCSI_Read+0x22>
 8016f26:	2d02      	cmp	r5, #2
 8016f28:	d103      	bne.n	8016f32 <USBH_MSC_SCSI_Read+0x1e>
  default:
    break;
  }

  return error;
}
 8016f2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    error = USBH_MSC_BOT_Process(phost, lun);
 8016f2e:	f7ff bd63 	b.w	80169f8 <USBH_MSC_BOT_Process>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8016f32:	2002      	movs	r0, #2
}
 8016f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016f36:	2000      	movs	r0, #0
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8016f38:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8016f3c:	f3c2 4707 	ubfx	r7, r2, #16, #8
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8016f40:	f04f 0e80 	mov.w	lr, #128	; 0x80
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8016f44:	4601      	mov	r1, r0
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016f46:	f8c4 0063 	str.w	r0, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8016f4a:	f884 e060 	strb.w	lr, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8016f4e:	f3c6 2e07 	ubfx	lr, r6, #8, #8
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8016f52:	f36c 0107 	bfi	r1, ip, #0, #8
 8016f56:	f3c2 2c07 	ubfx	ip, r2, #8, #8
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016f5a:	f8c4 0067 	str.w	r0, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8016f5e:	f367 210f 	bfi	r1, r7, #8, #8
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8016f62:	f8b4 7098 	ldrh.w	r7, [r4, #152]	; 0x98
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016f66:	f8c4 006b 	str.w	r0, [r4, #107]	; 0x6b
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8016f6a:	fb06 f707 	mul.w	r7, r6, r7
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8016f6e:	f36c 4117 	bfi	r1, ip, #16, #8
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016f72:	f04f 0c0a 	mov.w	ip, #10
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016f76:	f8c4 006f 	str.w	r0, [r4, #111]	; 0x6f
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8016f7a:	f362 611f 	bfi	r1, r2, #24, #8
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8016f7e:	65e7      	str	r7, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016f80:	f884 c062 	strb.w	ip, [r4, #98]	; 0x62
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016f84:	2702      	movs	r7, #2
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8016f86:	f04f 0c28 	mov.w	ip, #40	; 0x28
    error = USBH_BUSY;
 8016f8a:	4628      	mov	r0, r5
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8016f8c:	f8c4 1065 	str.w	r1, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8016f90:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8016f94:	f884 e06a 	strb.w	lr, [r4, #106]	; 0x6a
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016f98:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = pbuf;
 8016f9c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8016fa0:	f884 c063 	strb.w	ip, [r4, #99]	; 0x63
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016fa4:	f884 7052 	strb.w	r7, [r4, #82]	; 0x52
}
 8016fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016faa:	bf00      	nop

08016fac <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8016fac:	b570      	push	{r4, r5, r6, lr}
 8016fae:	b088      	sub	sp, #32
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8016fb0:	2800      	cmp	r0, #0
 8016fb2:	d044      	beq.n	801703e <USBH_Init+0x92>
 8016fb4:	4604      	mov	r4, r0

  /* Set DRiver ID */
  phost->id = id;

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8016fb6:	2500      	movs	r5, #0
  phost->id = id;
 8016fb8:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
 8016fbc:	460e      	mov	r6, r1
 8016fbe:	223c      	movs	r2, #60	; 0x3c
 8016fc0:	4629      	mov	r1, r5
 8016fc2:	f500 7060 	add.w	r0, r0, #896	; 0x380
  phost->pActiveClass = NULL;
 8016fc6:	f8c4 5378 	str.w	r5, [r4, #888]	; 0x378
  phost->ClassNumber = 0U;
 8016fca:	f8c4 537c 	str.w	r5, [r4, #892]	; 0x37c
 8016fce:	f008 fba1 	bl	801f714 <memset>
 8016fd2:	4629      	mov	r1, r5
 8016fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016fd8:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 8016fdc:	f008 fb9a 	bl	801f714 <memset>
    phost->device.Data[i] = 0U;
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8016fe0:	2301      	movs	r3, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8016fe2:	2140      	movs	r1, #64	; 0x40
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8016fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
  phost->gState = HOST_IDLE;
 8016fe8:	7025      	strb	r5, [r4, #0]
  phost->EnumState = ENUM_IDLE;
 8016fea:	7065      	strb	r5, [r4, #1]
  phost->Timer = 0U;
 8016fec:	f8c4 53bc 	str.w	r5, [r4, #956]	; 0x3bc
  phost->Control.errorcount = 0U;
 8016ff0:	7665      	strb	r5, [r4, #25]
  phost->RequestState = CMD_SEND;
 8016ff2:	70a3      	strb	r3, [r4, #2]
  phost->Control.state = CTRL_SETUP;
 8016ff4:	7623      	strb	r3, [r4, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8016ff6:	71a1      	strb	r1, [r4, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8016ff8:	f8a4 231c 	strh.w	r2, [r4, #796]	; 0x31c
  if(pUsrFunc != NULL)
 8016ffc:	b10e      	cbz	r6, 8017002 <USBH_Init+0x56>
    phost->pUser = pUsrFunc;
 8016ffe:	f8c4 63c8 	str.w	r6, [r4, #968]	; 0x3c8
  osMessageQDef(USBH_Queue, 10, uint16_t);
 8017002:	4d14      	ldr	r5, [pc, #80]	; (8017054 <USBH_Init+0xa8>)
 8017004:	ab01      	add	r3, sp, #4
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 8017006:	ae03      	add	r6, sp, #12
  osMessageQDef(USBH_Queue, 10, uint16_t);
 8017008:	e895 0003 	ldmia.w	r5, {r0, r1}
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 801700c:	3508      	adds	r5, #8
  osMessageQDef(USBH_Queue, 10, uint16_t);
 801700e:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 8017012:	4618      	mov	r0, r3
 8017014:	2100      	movs	r1, #0
 8017016:	f006 fa23 	bl	801d460 <osMessageCreate>
 801701a:	f8c4 03cc 	str.w	r0, [r4, #972]	; 0x3cc
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 801701e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017020:	682d      	ldr	r5, [r5, #0]
 8017022:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8017024:	4621      	mov	r1, r4
 8017026:	a803      	add	r0, sp, #12
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 8017028:	6035      	str	r5, [r6, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 801702a:	f006 f98f 	bl	801d34c <osThreadCreate>
 801702e:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  USBH_LL_Init(phost);
 8017032:	4620      	mov	r0, r4
 8017034:	f7f5 f9a0 	bl	800c378 <USBH_LL_Init>
  return USBH_OK;
 8017038:	2000      	movs	r0, #0
}
 801703a:	b008      	add	sp, #32
 801703c:	bd70      	pop	{r4, r5, r6, pc}
    USBH_ErrLog("Invalid Host handle");
 801703e:	4806      	ldr	r0, [pc, #24]	; (8017058 <USBH_Init+0xac>)
 8017040:	f008 fc18 	bl	801f874 <iprintf>
 8017044:	4805      	ldr	r0, [pc, #20]	; (801705c <USBH_Init+0xb0>)
 8017046:	f008 fc15 	bl	801f874 <iprintf>
 801704a:	200a      	movs	r0, #10
 801704c:	f008 fc2a 	bl	801f8a4 <putchar>
    return USBH_FAIL;
 8017050:	2002      	movs	r0, #2
 8017052:	e7f2      	b.n	801703a <USBH_Init+0x8e>
 8017054:	08020a00 	.word	0x08020a00
 8017058:	08023f48 	.word	0x08023f48
 801705c:	08025c20 	.word	0x08025c20

08017060 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8017060:	b508      	push	{r3, lr}
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 8017062:	b1a9      	cbz	r1, 8017090 <USBH_RegisterClass+0x30>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8017064:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8017068:	b933      	cbnz	r3, 8017078 <USBH_RegisterClass+0x18>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 801706a:	2201      	movs	r2, #1
 801706c:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
 8017070:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
 8017074:	4618      	mov	r0, r3
 8017076:	bd08      	pop	{r3, pc}
      USBH_ErrLog("Max Class Number reached");
 8017078:	480b      	ldr	r0, [pc, #44]	; (80170a8 <USBH_RegisterClass+0x48>)
 801707a:	f008 fbfb 	bl	801f874 <iprintf>
 801707e:	480b      	ldr	r0, [pc, #44]	; (80170ac <USBH_RegisterClass+0x4c>)
 8017080:	f008 fbf8 	bl	801f874 <iprintf>
 8017084:	200a      	movs	r0, #10
 8017086:	f008 fc0d 	bl	801f8a4 <putchar>
      status = USBH_FAIL;
 801708a:	2302      	movs	r3, #2
}
 801708c:	4618      	mov	r0, r3
 801708e:	bd08      	pop	{r3, pc}
    USBH_ErrLog("Invalid Class handle");
 8017090:	4805      	ldr	r0, [pc, #20]	; (80170a8 <USBH_RegisterClass+0x48>)
 8017092:	f008 fbef 	bl	801f874 <iprintf>
 8017096:	4806      	ldr	r0, [pc, #24]	; (80170b0 <USBH_RegisterClass+0x50>)
 8017098:	f008 fbec 	bl	801f874 <iprintf>
 801709c:	200a      	movs	r0, #10
 801709e:	f008 fc01 	bl	801f8a4 <putchar>
    status = USBH_FAIL;
 80170a2:	2302      	movs	r3, #2
 80170a4:	e7e6      	b.n	8017074 <USBH_RegisterClass+0x14>
 80170a6:	bf00      	nop
 80170a8:	08023f48 	.word	0x08023f48
 80170ac:	08025dfc 	.word	0x08025dfc
 80170b0:	08025e18 	.word	0x08025e18

080170b4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80170b4:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80170b6:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 80170ba:	428b      	cmp	r3, r1
 80170bc:	d926      	bls.n	801710c <USBH_SelectInterface+0x58>
 80170be:	4605      	mov	r5, r0
  {
    phost->device.current_interface = interface;
    USBH_UsrLog ("Switching to Interface (#%d)", interface);
 80170c0:	4818      	ldr	r0, [pc, #96]	; (8017124 <USBH_SelectInterface+0x70>)
 80170c2:	460c      	mov	r4, r1
    phost->device.current_interface = interface;
 80170c4:	f885 1320 	strb.w	r1, [r5, #800]	; 0x320
    USBH_UsrLog ("Switching to Interface (#%d)", interface);
 80170c8:	f008 fbd4 	bl	801f874 <iprintf>
 80170cc:	200a      	movs	r0, #10
 80170ce:	f008 fbe9 	bl	801f8a4 <putchar>
    USBH_UsrLog ("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass );
 80170d2:	231a      	movs	r3, #26
 80170d4:	4814      	ldr	r0, [pc, #80]	; (8017128 <USBH_SelectInterface+0x74>)
 80170d6:	fb03 5404 	mla	r4, r3, r4, r5
 80170da:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
 80170de:	f008 fbc9 	bl	801f874 <iprintf>
 80170e2:	200a      	movs	r0, #10
 80170e4:	f008 fbde 	bl	801f8a4 <putchar>
    USBH_UsrLog ("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass );
 80170e8:	f894 1344 	ldrb.w	r1, [r4, #836]	; 0x344
 80170ec:	480f      	ldr	r0, [pc, #60]	; (801712c <USBH_SelectInterface+0x78>)
 80170ee:	f008 fbc1 	bl	801f874 <iprintf>
 80170f2:	200a      	movs	r0, #10
 80170f4:	f008 fbd6 	bl	801f8a4 <putchar>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
 80170f8:	f894 1345 	ldrb.w	r1, [r4, #837]	; 0x345
 80170fc:	480c      	ldr	r0, [pc, #48]	; (8017130 <USBH_SelectInterface+0x7c>)
 80170fe:	f008 fbb9 	bl	801f874 <iprintf>
 8017102:	200a      	movs	r0, #10
 8017104:	f008 fbce 	bl	801f8a4 <putchar>
  USBH_StatusTypeDef   status = USBH_OK;
 8017108:	2000      	movs	r0, #0
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
  }
  return status;
}
 801710a:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ErrLog ("Cannot Select This Interface.");
 801710c:	4809      	ldr	r0, [pc, #36]	; (8017134 <USBH_SelectInterface+0x80>)
 801710e:	f008 fbb1 	bl	801f874 <iprintf>
 8017112:	4809      	ldr	r0, [pc, #36]	; (8017138 <USBH_SelectInterface+0x84>)
 8017114:	f008 fbae 	bl	801f874 <iprintf>
 8017118:	200a      	movs	r0, #10
 801711a:	f008 fbc3 	bl	801f8a4 <putchar>
    status = USBH_FAIL;
 801711e:	2002      	movs	r0, #2
}
 8017120:	bd38      	pop	{r3, r4, r5, pc}
 8017122:	bf00      	nop
 8017124:	08025e30 	.word	0x08025e30
 8017128:	08025e50 	.word	0x08025e50
 801712c:	08025e60 	.word	0x08025e60
 8017130:	08025e70 	.word	0x08025e70
 8017134:	08023f48 	.word	0x08023f48
 8017138:	08025e80 	.word	0x08025e80

0801713c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 801713c:	b430      	push	{r4, r5}
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 801713e:	f890 5343 	ldrb.w	r5, [r0, #835]	; 0x343
 8017142:	f1a1 04ff 	sub.w	r4, r1, #255	; 0xff
 8017146:	428d      	cmp	r5, r1
 8017148:	fab4 f484 	clz	r4, r4
 801714c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8017150:	d008      	beq.n	8017164 <USBH_FindInterface+0x28>
 8017152:	b93c      	cbnz	r4, 8017164 <USBH_FindInterface+0x28>
 8017154:	f890 535d 	ldrb.w	r5, [r0, #861]	; 0x35d
 8017158:	428d      	cmp	r5, r1
 801715a:	d011      	beq.n	8017180 <USBH_FindInterface+0x44>
 801715c:	b984      	cbnz	r4, 8017180 <USBH_FindInterface+0x44>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 801715e:	20ff      	movs	r0, #255	; 0xff
}
 8017160:	bc30      	pop	{r4, r5}
 8017162:	4770      	bx	lr
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8017164:	f890 5344 	ldrb.w	r5, [r0, #836]	; 0x344
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8017168:	4295      	cmp	r5, r2
 801716a:	d001      	beq.n	8017170 <USBH_FindInterface+0x34>
 801716c:	2aff      	cmp	r2, #255	; 0xff
 801716e:	d1f1      	bne.n	8017154 <USBH_FindInterface+0x18>
 8017170:	f890 5345 	ldrb.w	r5, [r0, #837]	; 0x345
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8017174:	429d      	cmp	r5, r3
 8017176:	d001      	beq.n	801717c <USBH_FindInterface+0x40>
 8017178:	2bff      	cmp	r3, #255	; 0xff
 801717a:	d1eb      	bne.n	8017154 <USBH_FindInterface+0x18>
  uint8_t                        if_ix = 0U;
 801717c:	2000      	movs	r0, #0
 801717e:	e7ef      	b.n	8017160 <USBH_FindInterface+0x24>
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8017180:	f890 135e 	ldrb.w	r1, [r0, #862]	; 0x35e
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8017184:	4291      	cmp	r1, r2
 8017186:	d001      	beq.n	801718c <USBH_FindInterface+0x50>
 8017188:	2aff      	cmp	r2, #255	; 0xff
 801718a:	d1e8      	bne.n	801715e <USBH_FindInterface+0x22>
 801718c:	f890 235f 	ldrb.w	r2, [r0, #863]	; 0x35f
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8017190:	429a      	cmp	r2, r3
 8017192:	d001      	beq.n	8017198 <USBH_FindInterface+0x5c>
 8017194:	2bff      	cmp	r3, #255	; 0xff
 8017196:	d1e2      	bne.n	801715e <USBH_FindInterface+0x22>
    if_ix++;
 8017198:	2001      	movs	r0, #1
 801719a:	e7e1      	b.n	8017160 <USBH_FindInterface+0x24>

0801719c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 801719c:	b510      	push	{r4, lr}
 801719e:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80171a0:	f7f5 f91a 	bl	800c3d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80171a4:	2101      	movs	r1, #1
 80171a6:	4620      	mov	r0, r4
 80171a8:	f7f5 f99a 	bl	800c4e0 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 80171ac:	2000      	movs	r0, #0
 80171ae:	bd10      	pop	{r4, pc}

080171b0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80171b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80171b2:	2202      	movs	r2, #2
{
 80171b4:	b087      	sub	sp, #28
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 80171b6:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 80171ba:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80171bc:	f88d 2017 	strb.w	r2, [sp, #23]
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d138      	bne.n	8017236 <USBH_Process+0x86>
 80171c4:	7803      	ldrb	r3, [r0, #0]
 80171c6:	b123      	cbz	r3, 80171d2 <USBH_Process+0x22>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80171c8:	7803      	ldrb	r3, [r0, #0]
 80171ca:	2b03      	cmp	r3, #3
 80171cc:	d001      	beq.n	80171d2 <USBH_Process+0x22>
      phost->gState = HOST_DEV_DISCONNECTED;
 80171ce:	2303      	movs	r3, #3
 80171d0:	7003      	strb	r3, [r0, #0]
  switch (phost->gState)
 80171d2:	7823      	ldrb	r3, [r4, #0]
 80171d4:	2b0b      	cmp	r3, #11
 80171d6:	d82b      	bhi.n	8017230 <USBH_Process+0x80>
 80171d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80171dc:	002a004c 	.word	0x002a004c
 80171e0:	00a30067 	.word	0x00a30067
 80171e4:	00ca002a 	.word	0x00ca002a
 80171e8:	00f400e2 	.word	0x00f400e2
 80171ec:	011c0105 	.word	0x011c0105
 80171f0:	005f0124 	.word	0x005f0124
    if (phost->device.DevDesc.iManufacturer != 0U)
 80171f4:	f894 5330 	ldrb.w	r5, [r4, #816]	; 0x330
 80171f8:	2d00      	cmp	r5, #0
 80171fa:	f000 8251 	beq.w	80176a0 <USBH_Process+0x4f0>
                               phost->device.Data,
 80171fe:	f504 768e 	add.w	r6, r4, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8017202:	4629      	mov	r1, r5
 8017204:	23ff      	movs	r3, #255	; 0xff
 8017206:	4620      	mov	r0, r4
 8017208:	4632      	mov	r2, r6
 801720a:	f000 fde9 	bl	8017de0 <USBH_Get_StringDesc>
 801720e:	4605      	mov	r5, r0
 8017210:	b970      	cbnz	r0, 8017230 <USBH_Process+0x80>
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
 8017212:	4631      	mov	r1, r6
 8017214:	48d6      	ldr	r0, [pc, #856]	; (8017570 <USBH_Process+0x3c0>)
 8017216:	f008 fb2d 	bl	801f874 <iprintf>
     USBH_UsrLog("Manufacturer : N/A");
 801721a:	200a      	movs	r0, #10
 801721c:	f008 fb42 	bl	801f8a4 <putchar>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8017220:	2306      	movs	r3, #6
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 8017222:	462a      	mov	r2, r5
 8017224:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8017228:	7063      	strb	r3, [r4, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 801722a:	2105      	movs	r1, #5
 801722c:	f006 f91e 	bl	801d46c <osMessagePut>
}
 8017230:	2000      	movs	r0, #0
 8017232:	b007      	add	sp, #28
 8017234:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (phost->gState)
 8017236:	7802      	ldrb	r2, [r0, #0]
 8017238:	2a0b      	cmp	r2, #11
 801723a:	d8f9      	bhi.n	8017230 <USBH_Process+0x80>
 801723c:	a101      	add	r1, pc, #4	; (adr r1, 8017244 <USBH_Process+0x94>)
 801723e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017242:	bf00      	nop
 8017244:	08017275 	.word	0x08017275
 8017248:	08017483 	.word	0x08017483
 801724c:	080172ab 	.word	0x080172ab
 8017250:	08017323 	.word	0x08017323
 8017254:	08017231 	.word	0x08017231
 8017258:	08017371 	.word	0x08017371
 801725c:	080173a1 	.word	0x080173a1
 8017260:	080173c5 	.word	0x080173c5
 8017264:	080173e7 	.word	0x080173e7
 8017268:	08017415 	.word	0x08017415
 801726c:	08017425 	.word	0x08017425
 8017270:	0801729b 	.word	0x0801729b
    if (phost->device.is_connected)
 8017274:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8017278:	2b00      	cmp	r3, #0
 801727a:	d0d9      	beq.n	8017230 <USBH_Process+0x80>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801727c:	2501      	movs	r5, #1
      USBH_Delay(200U);
 801727e:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8017280:	7025      	strb	r5, [r4, #0]
      USBH_Delay(200U);
 8017282:	f7f5 f961 	bl	800c548 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8017286:	4620      	mov	r0, r4
 8017288:	f7f5 f8d0 	bl	800c42c <USBH_LL_ResetPort>
      osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 801728c:	4629      	mov	r1, r5
 801728e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8017292:	2200      	movs	r2, #0
 8017294:	f006 f8ea 	bl	801d46c <osMessagePut>
 8017298:	e7ca      	b.n	8017230 <USBH_Process+0x80>
    if(phost->pActiveClass != NULL)
 801729a:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d0c6      	beq.n	8017230 <USBH_Process+0x80>
      phost->pActiveClass->BgndProcess(phost);
 80172a2:	695b      	ldr	r3, [r3, #20]
 80172a4:	4620      	mov	r0, r4
 80172a6:	4798      	blx	r3
 80172a8:	e7c2      	b.n	8017230 <USBH_Process+0x80>
    USBH_UsrLog("USB Device Attached");
 80172aa:	48b2      	ldr	r0, [pc, #712]	; (8017574 <USBH_Process+0x3c4>)
    USBH_OpenPipe (phost,
 80172ac:	2500      	movs	r5, #0
    USBH_UsrLog("USB Device Attached");
 80172ae:	f008 fae1 	bl	801f874 <iprintf>
 80172b2:	200a      	movs	r0, #10
 80172b4:	f008 faf6 	bl	801f8a4 <putchar>
    USBH_Delay(100U);
 80172b8:	2064      	movs	r0, #100	; 0x64
 80172ba:	f7f5 f945 	bl	800c548 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80172be:	4620      	mov	r0, r4
 80172c0:	f7f5 f8a6 	bl	800c410 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 80172c4:	2305      	movs	r3, #5
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80172c6:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80172ca:	4629      	mov	r1, r5
    phost->gState = HOST_ENUMERATION;
 80172cc:	7023      	strb	r3, [r4, #0]
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80172ce:	4620      	mov	r0, r4
 80172d0:	f001 fcf6 	bl	8018cc0 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80172d4:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80172d6:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80172d8:	4620      	mov	r0, r4
 80172da:	f001 fcf1 	bl	8018cc0 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 80172de:	f894 631d 	ldrb.w	r6, [r4, #797]	; 0x31d
 80172e2:	79a7      	ldrb	r7, [r4, #6]
 80172e4:	4601      	mov	r1, r0
 80172e6:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80172ea:	2280      	movs	r2, #128	; 0x80
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80172ec:	7120      	strb	r0, [r4, #4]
    USBH_OpenPipe (phost,
 80172ee:	4620      	mov	r0, r4
 80172f0:	9702      	str	r7, [sp, #8]
 80172f2:	e9cd 6500 	strd	r6, r5, [sp]
 80172f6:	f001 fccd 	bl	8018c94 <USBH_OpenPipe>
    USBH_OpenPipe (phost,
 80172fa:	79a0      	ldrb	r0, [r4, #6]
 80172fc:	f894 631d 	ldrb.w	r6, [r4, #797]	; 0x31d
 8017300:	462a      	mov	r2, r5
 8017302:	7961      	ldrb	r1, [r4, #5]
 8017304:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8017308:	9600      	str	r6, [sp, #0]
 801730a:	e9cd 5001 	strd	r5, r0, [sp, #4]
 801730e:	4620      	mov	r0, r4
 8017310:	f001 fcc0 	bl	8018c94 <USBH_OpenPipe>
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8017314:	462a      	mov	r2, r5
 8017316:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 801731a:	2101      	movs	r1, #1
 801731c:	f006 f8a6 	bl	801d46c <osMessagePut>
    break;
 8017320:	e786      	b.n	8017230 <USBH_Process+0x80>
 8017322:	2100      	movs	r1, #0
 8017324:	223c      	movs	r2, #60	; 0x3c
 8017326:	f504 7060 	add.w	r0, r4, #896	; 0x380
  phost->gState = HOST_IDLE;
 801732a:	460d      	mov	r5, r1
 801732c:	f008 f9f2 	bl	801f714 <memset>
 8017330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017334:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 8017338:	4629      	mov	r1, r5
 801733a:	f008 f9eb 	bl	801f714 <memset>
  phost->RequestState = CMD_SEND;
 801733e:	2301      	movs	r3, #1
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8017340:	2040      	movs	r0, #64	; 0x40
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8017342:	f44f 7180 	mov.w	r1, #256	; 0x100
    if(phost->pActiveClass != NULL)
 8017346:	f8d4 2378 	ldr.w	r2, [r4, #888]	; 0x378
  phost->gState = HOST_IDLE;
 801734a:	7025      	strb	r5, [r4, #0]
  phost->EnumState = ENUM_IDLE;
 801734c:	7065      	strb	r5, [r4, #1]
  phost->Timer = 0U;
 801734e:	f8c4 53bc 	str.w	r5, [r4, #956]	; 0x3bc
  phost->Control.errorcount = 0U;
 8017352:	7665      	strb	r5, [r4, #25]
  phost->RequestState = CMD_SEND;
 8017354:	70a3      	strb	r3, [r4, #2]
  phost->Control.state = CTRL_SETUP;
 8017356:	7623      	strb	r3, [r4, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8017358:	71a0      	strb	r0, [r4, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 801735a:	f8a4 131c 	strh.w	r1, [r4, #796]	; 0x31c
    if(phost->pActiveClass != NULL)
 801735e:	2a00      	cmp	r2, #0
 8017360:	f43f af66 	beq.w	8017230 <USBH_Process+0x80>
      phost->pActiveClass->DeInit(phost);
 8017364:	68d3      	ldr	r3, [r2, #12]
 8017366:	4620      	mov	r0, r4
 8017368:	4798      	blx	r3
      phost->pActiveClass = NULL;
 801736a:	f8c4 5378 	str.w	r5, [r4, #888]	; 0x378
 801736e:	e75f      	b.n	8017230 <USBH_Process+0x80>
  switch (phost->EnumState)
 8017370:	7863      	ldrb	r3, [r4, #1]
 8017372:	2b07      	cmp	r3, #7
 8017374:	f63f af5c 	bhi.w	8017230 <USBH_Process+0x80>
 8017378:	a201      	add	r2, pc, #4	; (adr r2, 8017380 <USBH_Process+0x1d0>)
 801737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801737e:	bf00      	nop
 8017380:	0801748f 	.word	0x0801748f
 8017384:	0801758d 	.word	0x0801758d
 8017388:	0801752d 	.word	0x0801752d
 801738c:	08017609 	.word	0x08017609
 8017390:	080175f3 	.word	0x080175f3
 8017394:	080171f5 	.word	0x080171f5
 8017398:	080175c1 	.word	0x080175c1
 801739c:	080174dd 	.word	0x080174dd
    if(phost->pActiveClass != NULL)
 80173a0:	f8d4 5378 	ldr.w	r5, [r4, #888]	; 0x378
 80173a4:	2d00      	cmp	r5, #0
 80173a6:	f000 8187 	beq.w	80176b8 <USBH_Process+0x508>
      status = phost->pActiveClass->Requests(phost);
 80173aa:	692b      	ldr	r3, [r5, #16]
 80173ac:	4620      	mov	r0, r4
 80173ae:	4798      	blx	r3
 80173b0:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 80173b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	f47f af39 	bne.w	8017230 <USBH_Process+0x80>
        phost->gState  = HOST_CLASS;
 80173be:	230b      	movs	r3, #11
 80173c0:	7023      	strb	r3, [r4, #0]
 80173c2:	e735      	b.n	8017230 <USBH_Process+0x80>
      if(phost->pUser != NULL)
 80173c4:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	f43f af31 	beq.w	8017230 <USBH_Process+0x80>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80173ce:	4620      	mov	r0, r4
 80173d0:	2101      	movs	r1, #1
 80173d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80173d4:	2308      	movs	r3, #8
        osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 80173d6:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80173da:	2200      	movs	r2, #0
        phost->gState = HOST_SET_CONFIGURATION;
 80173dc:	7023      	strb	r3, [r4, #0]
        osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 80173de:	2105      	movs	r1, #5
 80173e0:	f006 f844 	bl	801d46c <osMessagePut>
 80173e4:	e724      	b.n	8017230 <USBH_Process+0x80>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80173e6:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 80173ea:	4620      	mov	r0, r4
 80173ec:	f000 ff64 	bl	80182b8 <USBH_SetCfg>
 80173f0:	b938      	cbnz	r0, 8017402 <USBH_Process+0x252>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80173f2:	2309      	movs	r3, #9
      USBH_UsrLog ("Default configuration set.");
 80173f4:	4860      	ldr	r0, [pc, #384]	; (8017578 <USBH_Process+0x3c8>)
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80173f6:	7023      	strb	r3, [r4, #0]
      USBH_UsrLog ("Default configuration set.");
 80173f8:	f008 fa3c 	bl	801f874 <iprintf>
 80173fc:	200a      	movs	r0, #10
 80173fe:	f008 fa51 	bl	801f8a4 <putchar>
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0U);
 8017402:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8017406:	2200      	movs	r2, #0
 8017408:	2101      	movs	r1, #1
 801740a:	f006 f82f 	bl	801d46c <osMessagePut>
}
 801740e:	2000      	movs	r0, #0
 8017410:	b007      	add	sp, #28
 8017412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8017414:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 8017418:	069b      	lsls	r3, r3, #26
 801741a:	f100 8106 	bmi.w	801762a <USBH_Process+0x47a>
      phost->gState  = HOST_CHECK_CLASS;
 801741e:	230a      	movs	r3, #10
 8017420:	7023      	strb	r3, [r4, #0]
 8017422:	e7ee      	b.n	8017402 <USBH_Process+0x252>
    if(phost->ClassNumber == 0U)
 8017424:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8017428:	2b00      	cmp	r3, #0
 801742a:	f000 80f7 	beq.w	801761c <USBH_Process+0x46c>
      phost->pActiveClass = NULL;
 801742e:	2100      	movs	r1, #0
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8017430:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8017434:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
      phost->pActiveClass = NULL;
 8017438:	f8c4 1378 	str.w	r1, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 801743c:	7919      	ldrb	r1, [r3, #4]
 801743e:	4291      	cmp	r1, r2
 8017440:	f040 810f 	bne.w	8017662 <USBH_Process+0x4b2>
          phost->pActiveClass = phost->pClass[idx];
 8017444:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8017448:	4620      	mov	r0, r4
 801744a:	689b      	ldr	r3, [r3, #8]
 801744c:	4798      	blx	r3
 801744e:	2800      	cmp	r0, #0
 8017450:	f040 80fb 	bne.w	801764a <USBH_Process+0x49a>
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
 8017454:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
          phost->gState  = HOST_CLASS_REQUEST;
 8017458:	2206      	movs	r2, #6
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
 801745a:	4848      	ldr	r0, [pc, #288]	; (801757c <USBH_Process+0x3cc>)
 801745c:	6819      	ldr	r1, [r3, #0]
          phost->gState  = HOST_CLASS_REQUEST;
 801745e:	7022      	strb	r2, [r4, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
 8017460:	f008 fa08 	bl	801f874 <iprintf>
 8017464:	200a      	movs	r0, #10
 8017466:	f008 fa1d 	bl	801f8a4 <putchar>
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801746a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 801746e:	2103      	movs	r1, #3
 8017470:	4620      	mov	r0, r4
 8017472:	4798      	blx	r3
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 8017474:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8017478:	2200      	movs	r2, #0
 801747a:	2105      	movs	r1, #5
 801747c:	f005 fff6 	bl	801d46c <osMessagePut>
    break;
 8017480:	e6d6      	b.n	8017230 <USBH_Process+0x80>
    if (phost->device.PortEnabled == 1U)
 8017482:	2b01      	cmp	r3, #1
 8017484:	f47f aed4 	bne.w	8017230 <USBH_Process+0x80>
      phost->gState = HOST_DEV_ATTACHED;
 8017488:	2302      	movs	r3, #2
 801748a:	7003      	strb	r3, [r0, #0]
 801748c:	e6d0      	b.n	8017230 <USBH_Process+0x80>
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 801748e:	2108      	movs	r1, #8
 8017490:	4620      	mov	r0, r4
 8017492:	f000 f9bb 	bl	801780c <USBH_Get_DevDesc>
 8017496:	4605      	mov	r5, r0
 8017498:	2800      	cmp	r0, #0
 801749a:	f47f aec9 	bne.w	8017230 <USBH_Process+0x80>
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801749e:	f894 0329 	ldrb.w	r0, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80174a2:	2601      	movs	r6, #1
      USBH_OpenPipe (phost,
 80174a4:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80174a8:	2280      	movs	r2, #128	; 0x80
 80174aa:	7921      	ldrb	r1, [r4, #4]
 80174ac:	9501      	str	r5, [sp, #4]
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80174ae:	71a0      	strb	r0, [r4, #6]
      USBH_OpenPipe (phost,
 80174b0:	9002      	str	r0, [sp, #8]
 80174b2:	4620      	mov	r0, r4
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80174b4:	7066      	strb	r6, [r4, #1]
      USBH_OpenPipe (phost,
 80174b6:	f894 631d 	ldrb.w	r6, [r4, #797]	; 0x31d
      USBH_OpenPipe (phost,
 80174ba:	9600      	str	r6, [sp, #0]
 80174bc:	f001 fbea 	bl	8018c94 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 80174c0:	79a7      	ldrb	r7, [r4, #6]
 80174c2:	f894 631d 	ldrb.w	r6, [r4, #797]	; 0x31d
 80174c6:	462a      	mov	r2, r5
 80174c8:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80174cc:	4620      	mov	r0, r4
 80174ce:	7961      	ldrb	r1, [r4, #5]
 80174d0:	9501      	str	r5, [sp, #4]
 80174d2:	9702      	str	r7, [sp, #8]
 80174d4:	9600      	str	r6, [sp, #0]
 80174d6:	f001 fbdd 	bl	8018c94 <USBH_OpenPipe>
 80174da:	e6a9      	b.n	8017230 <USBH_Process+0x80>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80174dc:	f894 5332 	ldrb.w	r5, [r4, #818]	; 0x332
 80174e0:	2d00      	cmp	r5, #0
 80174e2:	f000 80d0 	beq.w	8017686 <USBH_Process+0x4d6>
                               phost->device.Data,
 80174e6:	f504 768e 	add.w	r6, r4, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80174ea:	4629      	mov	r1, r5
 80174ec:	23ff      	movs	r3, #255	; 0xff
 80174ee:	4620      	mov	r0, r4
 80174f0:	4632      	mov	r2, r6
 80174f2:	f000 fc75 	bl	8017de0 <USBH_Get_StringDesc>
 80174f6:	2800      	cmp	r0, #0
 80174f8:	f47f ae9a 	bne.w	8017230 <USBH_Process+0x80>
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
 80174fc:	4631      	mov	r1, r6
 80174fe:	4820      	ldr	r0, [pc, #128]	; (8017580 <USBH_Process+0x3d0>)
 8017500:	f008 f9b8 	bl	801f874 <iprintf>
 8017504:	200a      	movs	r0, #10
 8017506:	f008 f9cd 	bl	801f8a4 <putchar>
      USBH_UsrLog ("Enumeration done.");
 801750a:	481e      	ldr	r0, [pc, #120]	; (8017584 <USBH_Process+0x3d4>)
 801750c:	f008 f9b2 	bl	801f874 <iprintf>
 8017510:	200a      	movs	r0, #10
 8017512:	f008 f9c7 	bl	801f8a4 <putchar>
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8017516:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
      phost->device.current_interface = 0U;
 801751a:	2200      	movs	r2, #0
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 801751c:	2b01      	cmp	r3, #1
      phost->device.current_interface = 0U;
 801751e:	f884 2320 	strb.w	r2, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8017522:	f000 80a7 	beq.w	8017674 <USBH_Process+0x4c4>
        phost->gState  = HOST_INPUT;
 8017526:	2307      	movs	r3, #7
 8017528:	7023      	strb	r3, [r4, #0]
 801752a:	e681      	b.n	8017230 <USBH_Process+0x80>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 801752c:	2101      	movs	r1, #1
 801752e:	4620      	mov	r0, r4
 8017530:	f000 fd9e 	bl	8018070 <USBH_SetAddress>
 8017534:	4605      	mov	r5, r0
 8017536:	2800      	cmp	r0, #0
 8017538:	f47f ae7a 	bne.w	8017230 <USBH_Process+0x80>
      USBH_Delay(2U);
 801753c:	2002      	movs	r0, #2
      phost->EnumState = ENUM_GET_CFG_DESC;
 801753e:	2603      	movs	r6, #3
      USBH_Delay(2U);
 8017540:	f7f5 f802 	bl	800c548 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8017544:	2101      	movs	r1, #1
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8017546:	4810      	ldr	r0, [pc, #64]	; (8017588 <USBH_Process+0x3d8>)
      phost->device.address = USBH_DEVICE_ADDRESS;
 8017548:	f884 131c 	strb.w	r1, [r4, #796]	; 0x31c
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 801754c:	f008 f992 	bl	801f874 <iprintf>
 8017550:	200a      	movs	r0, #10
 8017552:	f008 f9a7 	bl	801f8a4 <putchar>
      USBH_OpenPipe (phost,
 8017556:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 801755a:	7921      	ldrb	r1, [r4, #4]
 801755c:	2280      	movs	r2, #128	; 0x80
 801755e:	9501      	str	r5, [sp, #4]
 8017560:	4620      	mov	r0, r4
 8017562:	79a7      	ldrb	r7, [r4, #6]
      phost->EnumState = ENUM_GET_CFG_DESC;
 8017564:	7066      	strb	r6, [r4, #1]
      USBH_OpenPipe (phost,
 8017566:	f894 631d 	ldrb.w	r6, [r4, #797]	; 0x31d
 801756a:	9702      	str	r7, [sp, #8]
 801756c:	e7a5      	b.n	80174ba <USBH_Process+0x30a>
 801756e:	bf00      	nop
 8017570:	08025c90 	.word	0x08025c90
 8017574:	08025c4c 	.word	0x08025c4c
 8017578:	08025d2c 	.word	0x08025d2c
 801757c:	08025d88 	.word	0x08025d88
 8017580:	08025cc8 	.word	0x08025cc8
 8017584:	08025cf0 	.word	0x08025cf0
 8017588:	08025c78 	.word	0x08025c78
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 801758c:	2112      	movs	r1, #18
 801758e:	4620      	mov	r0, r4
 8017590:	f000 f93c 	bl	801780c <USBH_Get_DevDesc>
 8017594:	2800      	cmp	r0, #0
 8017596:	f47f ae4b 	bne.w	8017230 <USBH_Process+0x80>
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
 801759a:	f8b4 132c 	ldrh.w	r1, [r4, #812]	; 0x32c
 801759e:	484f      	ldr	r0, [pc, #316]	; (80176dc <USBH_Process+0x52c>)
 80175a0:	f008 f968 	bl	801f874 <iprintf>
 80175a4:	200a      	movs	r0, #10
 80175a6:	f008 f97d 	bl	801f8a4 <putchar>
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );
 80175aa:	f8b4 132a 	ldrh.w	r1, [r4, #810]	; 0x32a
 80175ae:	484c      	ldr	r0, [pc, #304]	; (80176e0 <USBH_Process+0x530>)
 80175b0:	f008 f960 	bl	801f874 <iprintf>
 80175b4:	200a      	movs	r0, #10
 80175b6:	f008 f975 	bl	801f8a4 <putchar>
      phost->EnumState = ENUM_SET_ADDR;
 80175ba:	2302      	movs	r3, #2
 80175bc:	7063      	strb	r3, [r4, #1]
 80175be:	e637      	b.n	8017230 <USBH_Process+0x80>
    if (phost->device.DevDesc.iProduct != 0U)
 80175c0:	f894 5331 	ldrb.w	r5, [r4, #817]	; 0x331
 80175c4:	2d00      	cmp	r5, #0
 80175c6:	d06f      	beq.n	80176a8 <USBH_Process+0x4f8>
                               phost->device.Data,
 80175c8:	f504 768e 	add.w	r6, r4, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80175cc:	4629      	mov	r1, r5
 80175ce:	23ff      	movs	r3, #255	; 0xff
 80175d0:	4620      	mov	r0, r4
 80175d2:	4632      	mov	r2, r6
 80175d4:	f000 fc04 	bl	8017de0 <USBH_Get_StringDesc>
 80175d8:	2800      	cmp	r0, #0
 80175da:	f47f ae29 	bne.w	8017230 <USBH_Process+0x80>
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
 80175de:	4631      	mov	r1, r6
 80175e0:	4840      	ldr	r0, [pc, #256]	; (80176e4 <USBH_Process+0x534>)
 80175e2:	f008 f947 	bl	801f874 <iprintf>
 80175e6:	200a      	movs	r0, #10
 80175e8:	f008 f95c 	bl	801f8a4 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80175ec:	2307      	movs	r3, #7
 80175ee:	7063      	strb	r3, [r4, #1]
 80175f0:	e61e      	b.n	8017230 <USBH_Process+0x80>
    if (USBH_Get_CfgDesc(phost,
 80175f2:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 80175f6:	4620      	mov	r0, r4
 80175f8:	f000 fa54 	bl	8017aa4 <USBH_Get_CfgDesc>
 80175fc:	2800      	cmp	r0, #0
 80175fe:	f47f ae17 	bne.w	8017230 <USBH_Process+0x80>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8017602:	2305      	movs	r3, #5
 8017604:	7063      	strb	r3, [r4, #1]
 8017606:	e613      	b.n	8017230 <USBH_Process+0x80>
    if ( USBH_Get_CfgDesc(phost,
 8017608:	2109      	movs	r1, #9
 801760a:	4620      	mov	r0, r4
 801760c:	f000 fa4a 	bl	8017aa4 <USBH_Get_CfgDesc>
 8017610:	2800      	cmp	r0, #0
 8017612:	f47f ae0d 	bne.w	8017230 <USBH_Process+0x80>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8017616:	2304      	movs	r3, #4
 8017618:	7063      	strb	r3, [r4, #1]
 801761a:	e609      	b.n	8017230 <USBH_Process+0x80>
      USBH_UsrLog ("No Class has been registered.");
 801761c:	4832      	ldr	r0, [pc, #200]	; (80176e8 <USBH_Process+0x538>)
 801761e:	f008 f929 	bl	801f874 <iprintf>
 8017622:	200a      	movs	r0, #10
 8017624:	f008 f93e 	bl	801f8a4 <putchar>
 8017628:	e724      	b.n	8017474 <USBH_Process+0x2c4>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 801762a:	2101      	movs	r1, #1
 801762c:	4620      	mov	r0, r4
 801762e:	f000 ff67 	bl	8018500 <USBH_SetFeature>
 8017632:	2800      	cmp	r0, #0
 8017634:	f47f aee5 	bne.w	8017402 <USBH_Process+0x252>
        USBH_UsrLog ("Device remote wakeup enabled");
 8017638:	482c      	ldr	r0, [pc, #176]	; (80176ec <USBH_Process+0x53c>)
 801763a:	f008 f91b 	bl	801f874 <iprintf>
 801763e:	200a      	movs	r0, #10
 8017640:	f008 f930 	bl	801f8a4 <putchar>
        phost->gState  = HOST_CHECK_CLASS;
 8017644:	230a      	movs	r3, #10
 8017646:	7023      	strb	r3, [r4, #0]
 8017648:	e6db      	b.n	8017402 <USBH_Process+0x252>
          phost->gState  = HOST_ABORT_STATE;
 801764a:	220d      	movs	r2, #13
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
 801764c:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8017650:	4827      	ldr	r0, [pc, #156]	; (80176f0 <USBH_Process+0x540>)
          phost->gState  = HOST_ABORT_STATE;
 8017652:	7022      	strb	r2, [r4, #0]
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
 8017654:	6819      	ldr	r1, [r3, #0]
 8017656:	f008 f90d 	bl	801f874 <iprintf>
 801765a:	200a      	movs	r0, #10
 801765c:	f008 f922 	bl	801f8a4 <putchar>
 8017660:	e708      	b.n	8017474 <USBH_Process+0x2c4>
        phost->gState  = HOST_ABORT_STATE;
 8017662:	230d      	movs	r3, #13
        USBH_UsrLog ("No registered class for this device.");
 8017664:	4823      	ldr	r0, [pc, #140]	; (80176f4 <USBH_Process+0x544>)
        phost->gState  = HOST_ABORT_STATE;
 8017666:	7023      	strb	r3, [r4, #0]
        USBH_UsrLog ("No registered class for this device.");
 8017668:	f008 f904 	bl	801f874 <iprintf>
 801766c:	200a      	movs	r0, #10
 801766e:	f008 f919 	bl	801f8a4 <putchar>
 8017672:	e6ff      	b.n	8017474 <USBH_Process+0x2c4>
        USBH_UsrLog ("This device has only 1 configuration.");
 8017674:	4820      	ldr	r0, [pc, #128]	; (80176f8 <USBH_Process+0x548>)
 8017676:	f008 f8fd 	bl	801f874 <iprintf>
 801767a:	200a      	movs	r0, #10
 801767c:	f008 f912 	bl	801f8a4 <putchar>
        phost->gState  = HOST_SET_CONFIGURATION;
 8017680:	2308      	movs	r3, #8
 8017682:	7023      	strb	r3, [r4, #0]
 8017684:	e5d4      	b.n	8017230 <USBH_Process+0x80>
      USBH_UsrLog("Serial Number : N/A");
 8017686:	481d      	ldr	r0, [pc, #116]	; (80176fc <USBH_Process+0x54c>)
 8017688:	f008 f8f4 	bl	801f874 <iprintf>
 801768c:	200a      	movs	r0, #10
 801768e:	f008 f909 	bl	801f8a4 <putchar>
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 8017692:	462a      	mov	r2, r5
 8017694:	2105      	movs	r1, #5
 8017696:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 801769a:	f005 fee7 	bl	801d46c <osMessagePut>
 801769e:	e734      	b.n	801750a <USBH_Process+0x35a>
     USBH_UsrLog("Manufacturer : N/A");
 80176a0:	4817      	ldr	r0, [pc, #92]	; (8017700 <USBH_Process+0x550>)
 80176a2:	f008 f8e7 	bl	801f874 <iprintf>
 80176a6:	e5b8      	b.n	801721a <USBH_Process+0x6a>
      USBH_UsrLog("Product : N/A");
 80176a8:	4816      	ldr	r0, [pc, #88]	; (8017704 <USBH_Process+0x554>)
 80176aa:	f008 f8e3 	bl	801f874 <iprintf>
 80176ae:	200a      	movs	r0, #10
 80176b0:	f008 f8f8 	bl	801f8a4 <putchar>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80176b4:	2307      	movs	r3, #7
 80176b6:	e5b4      	b.n	8017222 <USBH_Process+0x72>
      phost->gState  = HOST_ABORT_STATE;
 80176b8:	230d      	movs	r3, #13
      USBH_ErrLog ("Invalid Class Driver.");
 80176ba:	4813      	ldr	r0, [pc, #76]	; (8017708 <USBH_Process+0x558>)
      phost->gState  = HOST_ABORT_STATE;
 80176bc:	7023      	strb	r3, [r4, #0]
      USBH_ErrLog ("Invalid Class Driver.");
 80176be:	f008 f8d9 	bl	801f874 <iprintf>
 80176c2:	4812      	ldr	r0, [pc, #72]	; (801770c <USBH_Process+0x55c>)
 80176c4:	f008 f8d6 	bl	801f874 <iprintf>
 80176c8:	200a      	movs	r0, #10
 80176ca:	f008 f8eb 	bl	801f8a4 <putchar>
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 80176ce:	462a      	mov	r2, r5
 80176d0:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80176d4:	2105      	movs	r1, #5
 80176d6:	f005 fec9 	bl	801d46c <osMessagePut>
 80176da:	e5a9      	b.n	8017230 <USBH_Process+0x80>
 80176dc:	08025c60 	.word	0x08025c60
 80176e0:	08025c6c 	.word	0x08025c6c
 80176e4:	08025b30 	.word	0x08025b30
 80176e8:	08025d68 	.word	0x08025d68
 80176ec:	08025d48 	.word	0x08025d48
 80176f0:	08025d9c 	.word	0x08025d9c
 80176f4:	08025dbc 	.word	0x08025dbc
 80176f8:	08025d04 	.word	0x08025d04
 80176fc:	08025cdc 	.word	0x08025cdc
 8017700:	08025ca4 	.word	0x08025ca4
 8017704:	08025cb8 	.word	0x08025cb8
 8017708:	08023f48 	.word	0x08023f48
 801770c:	08025de4 	.word	0x08025de4

08017710 <USBH_Process_OS>:
  * @brief  USB Host Thread task
  * @param  pvParameters not used
  * @retval None
  */
static void USBH_Process_OS(void const * argument)
{
 8017710:	b500      	push	{lr}
 8017712:	4604      	mov	r4, r0
 8017714:	b085      	sub	sp, #20
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever );
 8017716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801771a:	f8d4 13cc 	ldr.w	r1, [r4, #972]	; 0x3cc
 801771e:	a801      	add	r0, sp, #4
 8017720:	f005 fed0 	bl	801d4c4 <osMessageGet>

    if( event.status == osEventMessage )
 8017724:	9b01      	ldr	r3, [sp, #4]
 8017726:	2b10      	cmp	r3, #16
 8017728:	d1f5      	bne.n	8017716 <USBH_Process_OS+0x6>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 801772a:	4620      	mov	r0, r4
 801772c:	f7ff fd40 	bl	80171b0 <USBH_Process>
 8017730:	e7f1      	b.n	8017716 <USBH_Process_OS+0x6>
 8017732:	bf00      	nop

08017734 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8017734:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
}
 8017738:	4770      	bx	lr
 801773a:	bf00      	nop

0801773c <USBH_LL_IncTimer>:
  phost->Timer ++;
 801773c:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 8017740:	3201      	adds	r2, #1
 8017742:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8017746:	7802      	ldrb	r2, [r0, #0]
 8017748:	2a0b      	cmp	r2, #11
 801774a:	d000      	beq.n	801774e <USBH_LL_IncTimer+0x12>
}
 801774c:	4770      	bx	lr
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 801774e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8017752:	2b00      	cmp	r3, #0
 8017754:	d0fa      	beq.n	801774c <USBH_LL_IncTimer+0x10>
    phost->pActiveClass->SOFProcess(phost);
 8017756:	699b      	ldr	r3, [r3, #24]
 8017758:	4718      	bx	r3
 801775a:	bf00      	nop

0801775c <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 801775c:	2301      	movs	r3, #1
 801775e:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
}
 8017762:	4770      	bx	lr

08017764 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8017764:	2300      	movs	r3, #0
 8017766:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
}
 801776a:	4770      	bx	lr

0801776c <USBH_LL_Connect>:
  if(phost->gState == HOST_IDLE )
 801776c:	7803      	ldrb	r3, [r0, #0]
{
 801776e:	b510      	push	{r4, lr}
 8017770:	4604      	mov	r4, r0
  if(phost->gState == HOST_IDLE )
 8017772:	b97b      	cbnz	r3, 8017794 <USBH_LL_Connect+0x28>
    phost->device.is_connected = 1U;
 8017774:	2201      	movs	r2, #1
    if(phost->pUser != NULL)
 8017776:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 801777a:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 801777e:	b10b      	cbz	r3, 8017784 <USBH_LL_Connect+0x18>
      phost->pUser(phost, HOST_USER_CONNECTION);
 8017780:	2104      	movs	r1, #4
 8017782:	4798      	blx	r3
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8017784:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8017788:	2200      	movs	r2, #0
 801778a:	2101      	movs	r1, #1
 801778c:	f005 fe6e 	bl	801d46c <osMessagePut>
}
 8017790:	2000      	movs	r0, #0
 8017792:	bd10      	pop	{r4, pc}
    if (phost->device.PortEnabled == 1U)
 8017794:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 8017798:	2b01      	cmp	r3, #1
 801779a:	d1f3      	bne.n	8017784 <USBH_LL_Connect+0x18>
      phost->gState = HOST_DEV_ATTACHED;
 801779c:	2302      	movs	r3, #2
 801779e:	7003      	strb	r3, [r0, #0]
 80177a0:	e7f0      	b.n	8017784 <USBH_LL_Connect+0x18>
 80177a2:	bf00      	nop

080177a4 <USBH_LL_Disconnect>:
{
 80177a4:	b510      	push	{r4, lr}
 80177a6:	4604      	mov	r4, r0
  USBH_LL_Stop(phost);
 80177a8:	f7f4 fe24 	bl	800c3f4 <USBH_LL_Stop>
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80177ac:	7921      	ldrb	r1, [r4, #4]
 80177ae:	4620      	mov	r0, r4
 80177b0:	f001 fada 	bl	8018d68 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80177b4:	7961      	ldrb	r1, [r4, #5]
 80177b6:	4620      	mov	r0, r4
 80177b8:	f001 fad6 	bl	8018d68 <USBH_FreePipe>
  phost->device.is_connected = 0U;
 80177bc:	2200      	movs	r2, #0
  if(phost->pUser != NULL)
 80177be:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
  phost->device.is_connected = 0U;
 80177c2:	f884 231e 	strb.w	r2, [r4, #798]	; 0x31e
  if(phost->pUser != NULL)
 80177c6:	b113      	cbz	r3, 80177ce <USBH_LL_Disconnect+0x2a>
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80177c8:	2105      	movs	r1, #5
 80177ca:	4620      	mov	r0, r4
 80177cc:	4798      	blx	r3
  USBH_UsrLog("USB Device disconnected");
 80177ce:	4809      	ldr	r0, [pc, #36]	; (80177f4 <USBH_LL_Disconnect+0x50>)
 80177d0:	f008 f850 	bl	801f874 <iprintf>
 80177d4:	200a      	movs	r0, #10
 80177d6:	f008 f865 	bl	801f8a4 <putchar>
  USBH_LL_Start(phost);
 80177da:	4620      	mov	r0, r4
 80177dc:	f7f4 fdfc 	bl	800c3d8 <USBH_LL_Start>
  phost->gState = HOST_DEV_DISCONNECTED;
 80177e0:	2303      	movs	r3, #3
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 80177e2:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80177e6:	2200      	movs	r2, #0
  phost->gState = HOST_DEV_DISCONNECTED;
 80177e8:	7023      	strb	r3, [r4, #0]
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 80177ea:	2101      	movs	r1, #1
 80177ec:	f005 fe3e 	bl	801d46c <osMessagePut>
}
 80177f0:	2000      	movs	r0, #0
 80177f2:	bd10      	pop	{r4, pc}
 80177f4:	08025c34 	.word	0x08025c34

080177f8 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 80177f8:	b508      	push	{r3, lr}
  osMessagePut ( phost->os_event, USBH_URB_EVENT, 0U);
 80177fa:	2200      	movs	r2, #0
 80177fc:	2102      	movs	r1, #2
 80177fe:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
 8017802:	f005 fe33 	bl	801d46c <osMessagePut>
  return USBH_OK;
}
 8017806:	2000      	movs	r0, #0
 8017808:	bd08      	pop	{r3, pc}
 801780a:	bf00      	nop

0801780c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 801780c:	b5f0      	push	{r4, r5, r6, r7, lr}
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
  if(phost->RequestState == CMD_SEND)
 801780e:	7885      	ldrb	r5, [r0, #2]
{
 8017810:	b083      	sub	sp, #12
 8017812:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8017814:	460e      	mov	r6, r1
  if(phost->RequestState == CMD_SEND)
 8017816:	2d01      	cmp	r5, #1
 8017818:	d010      	beq.n	801783c <USBH_Get_DevDesc+0x30>
                             uint16_t            length)
{
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 801781a:	2d02      	cmp	r5, #2
 801781c:	d002      	beq.n	8017824 <USBH_Get_DevDesc+0x18>
  status = USBH_BUSY;
 801781e:	2001      	movs	r0, #1
}
 8017820:	b003      	add	sp, #12
 8017822:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8017824:	7e03      	ldrb	r3, [r0, #24]
 8017826:	3b01      	subs	r3, #1
 8017828:	2b0a      	cmp	r3, #10
 801782a:	d8f8      	bhi.n	801781e <USBH_Get_DevDesc+0x12>
 801782c:	e8df f003 	tbb	[pc, r3]
 8017830:	5e523e35 	.word	0x5e523e35
 8017834:	b691786a 	.word	0xb691786a
 8017838:	ab9d      	.short	0xab9d
 801783a:	1b          	.byte	0x1b
 801783b:	00          	.byte	0x00
    phost->Control.setup.b.wValue.w = value_idx;
 801783c:	2300      	movs	r3, #0
                                  phost->device.Data,
 801783e:	f500 778e 	add.w	r7, r0, #284	; 0x11c
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8017842:	4a95      	ldr	r2, [pc, #596]	; (8017a98 <USBH_Get_DevDesc+0x28c>)
    phost->RequestState = CMD_WAIT;
 8017844:	2002      	movs	r0, #2
    phost->Control.setup.b.wLength.w = length;
 8017846:	82e1      	strh	r1, [r4, #22]
    phost->Control.length = length;
 8017848:	81a1      	strh	r1, [r4, #12]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801784a:	2103      	movs	r1, #3
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801784c:	6122      	str	r2, [r4, #16]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801784e:	461a      	mov	r2, r3
    phost->RequestState = CMD_WAIT;
 8017850:	70a0      	strb	r0, [r4, #2]
    phost->Control.state = CTRL_SETUP;
 8017852:	7625      	strb	r5, [r4, #24]
    phost->Control.setup.b.wValue.w = value_idx;
 8017854:	82a3      	strh	r3, [r4, #20]
    phost->Control.buff = buff;
 8017856:	60a7      	str	r7, [r4, #8]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017858:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 801785c:	f005 fe06 	bl	801d46c <osMessagePut>
    status = USBH_BUSY;
 8017860:	4628      	mov	r0, r5
}
 8017862:	b003      	add	sp, #12
 8017864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8017866:	7e43      	ldrb	r3, [r0, #25]
 8017868:	3301      	adds	r3, #1
 801786a:	b2db      	uxtb	r3, r3
 801786c:	2b02      	cmp	r3, #2
 801786e:	7643      	strb	r3, [r0, #25]
 8017870:	f240 80fe 	bls.w	8017a70 <USBH_Get_DevDesc+0x264>
      phost->Control.state = CTRL_SETUP;
      phost->RequestState = CMD_SEND;
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8017874:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8017878:	2106      	movs	r1, #6
 801787a:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 801787c:	2300      	movs	r3, #0
      USBH_ErrLog("Control error");
 801787e:	4887      	ldr	r0, [pc, #540]	; (8017a9c <USBH_Get_DevDesc+0x290>)
      phost->Control.errorcount = 0U;
 8017880:	7663      	strb	r3, [r4, #25]
      USBH_ErrLog("Control error");
 8017882:	f007 fff7 	bl	801f874 <iprintf>
 8017886:	4886      	ldr	r0, [pc, #536]	; (8017aa0 <USBH_Get_DevDesc+0x294>)
 8017888:	f007 fff4 	bl	801f874 <iprintf>
 801788c:	200a      	movs	r0, #10
 801788e:	f008 f809 	bl	801f8a4 <putchar>
        phost->RequestState = CMD_SEND;
 8017892:	2301      	movs	r3, #1
        status = USBH_FAIL;
 8017894:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 8017896:	70a3      	strb	r3, [r4, #2]
 8017898:	e7c2      	b.n	8017820 <USBH_Get_DevDesc+0x14>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801789a:	7942      	ldrb	r2, [r0, #5]
 801789c:	f100 0110 	add.w	r1, r0, #16
 80178a0:	f001 f994 	bl	8018bcc <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 80178a4:	2302      	movs	r3, #2
  USBH_StatusTypeDef status = USBH_BUSY;
 80178a6:	2001      	movs	r0, #1
    phost->Control.state = CTRL_SETUP_WAIT;
 80178a8:	7623      	strb	r3, [r4, #24]
 80178aa:	e7b9      	b.n	8017820 <USBH_Get_DevDesc+0x14>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80178ac:	7941      	ldrb	r1, [r0, #5]
 80178ae:	f7f4 fe13 	bl	800c4d8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80178b2:	2801      	cmp	r0, #1
 80178b4:	f000 80b9 	beq.w	8017a2a <USBH_Get_DevDesc+0x21e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80178b8:	2804      	cmp	r0, #4
 80178ba:	d001      	beq.n	80178c0 <USBH_Get_DevDesc+0xb4>
 80178bc:	2802      	cmp	r0, #2
 80178be:	d1ae      	bne.n	801781e <USBH_Get_DevDesc+0x12>
        phost->Control.state = CTRL_ERROR;
 80178c0:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80178c2:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80178c6:	2200      	movs	r2, #0
 80178c8:	2103      	movs	r1, #3
        phost->Control.state = CTRL_ERROR;
 80178ca:	7623      	strb	r3, [r4, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80178cc:	f005 fdce 	bl	801d46c <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 80178d0:	2001      	movs	r0, #1
 80178d2:	e7a5      	b.n	8017820 <USBH_Get_DevDesc+0x14>
    phost->Control.timer = (uint16_t)phost->Timer;
 80178d4:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
    USBH_CtlReceiveData(phost,
 80178d8:	7903      	ldrb	r3, [r0, #4]
    phost->Control.timer = (uint16_t)phost->Timer;
 80178da:	81c2      	strh	r2, [r0, #14]
    USBH_CtlReceiveData(phost,
 80178dc:	6881      	ldr	r1, [r0, #8]
 80178de:	8982      	ldrh	r2, [r0, #12]
 80178e0:	f001 f99c 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80178e4:	2304      	movs	r3, #4
  USBH_StatusTypeDef status = USBH_BUSY;
 80178e6:	2001      	movs	r0, #1
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80178e8:	7623      	strb	r3, [r4, #24]
 80178ea:	e799      	b.n	8017820 <USBH_Get_DevDesc+0x14>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80178ec:	7901      	ldrb	r1, [r0, #4]
 80178ee:	f7f4 fdf3 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80178f2:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80178f4:	4605      	mov	r5, r0
    if  (URB_Status == USBH_URB_DONE)
 80178f6:	f000 80a9 	beq.w	8017a4c <USBH_Get_DevDesc+0x240>
    if  (URB_Status == USBH_URB_STALL)
 80178fa:	2805      	cmp	r0, #5
 80178fc:	d058      	beq.n	80179b0 <USBH_Get_DevDesc+0x1a4>
      if (URB_Status == USBH_URB_ERROR)
 80178fe:	2804      	cmp	r0, #4
 8017900:	d18d      	bne.n	801781e <USBH_Get_DevDesc+0x12>
 8017902:	e7dd      	b.n	80178c0 <USBH_Get_DevDesc+0xb4>
    USBH_CtlSendData (phost,
 8017904:	2501      	movs	r5, #1
 8017906:	7943      	ldrb	r3, [r0, #5]
 8017908:	8982      	ldrh	r2, [r0, #12]
 801790a:	6881      	ldr	r1, [r0, #8]
 801790c:	9500      	str	r5, [sp, #0]
 801790e:	f001 f96d 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8017912:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8017916:	2306      	movs	r3, #6
  USBH_StatusTypeDef status = USBH_BUSY;
 8017918:	4628      	mov	r0, r5
     phost->Control.timer = (uint16_t)phost->Timer;
 801791a:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 801791c:	7623      	strb	r3, [r4, #24]
 801791e:	e77f      	b.n	8017820 <USBH_Get_DevDesc+0x14>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8017920:	7941      	ldrb	r1, [r0, #5]
 8017922:	f7f4 fdd9 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8017926:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8017928:	4605      	mov	r5, r0
    if  (URB_Status == USBH_URB_DONE)
 801792a:	f000 8099 	beq.w	8017a60 <USBH_Get_DevDesc+0x254>
    else if  (URB_Status == USBH_URB_STALL)
 801792e:	2805      	cmp	r0, #5
 8017930:	f000 80a9 	beq.w	8017a86 <USBH_Get_DevDesc+0x27a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8017934:	2802      	cmp	r0, #2
 8017936:	f000 80a4 	beq.w	8017a82 <USBH_Get_DevDesc+0x276>
      if (URB_Status == USBH_URB_ERROR)
 801793a:	2804      	cmp	r0, #4
 801793c:	f47f af6f 	bne.w	801781e <USBH_Get_DevDesc+0x12>
        phost->Control.state = CTRL_ERROR;
 8017940:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017942:	2200      	movs	r2, #0
 8017944:	2103      	movs	r1, #3
 8017946:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->Control.state = CTRL_ERROR;
 801794a:	7623      	strb	r3, [r4, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801794c:	f005 fd8e 	bl	801d46c <osMessagePut>
 8017950:	e79f      	b.n	8017892 <USBH_Get_DevDesc+0x86>
    USBH_CtlReceiveData (phost,
 8017952:	2200      	movs	r2, #0
 8017954:	7903      	ldrb	r3, [r0, #4]
 8017956:	4611      	mov	r1, r2
 8017958:	f001 f960 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 801795c:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8017960:	2308      	movs	r3, #8
  USBH_StatusTypeDef status = USBH_BUSY;
 8017962:	2001      	movs	r0, #1
    phost->Control.timer = (uint16_t)phost->Timer;
 8017964:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8017966:	7623      	strb	r3, [r4, #24]
 8017968:	e75a      	b.n	8017820 <USBH_Get_DevDesc+0x14>
    USBH_CtlSendData (phost,
 801796a:	2200      	movs	r2, #0
 801796c:	2501      	movs	r5, #1
 801796e:	7943      	ldrb	r3, [r0, #5]
 8017970:	4611      	mov	r1, r2
 8017972:	9500      	str	r5, [sp, #0]
 8017974:	f001 f93a 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8017978:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801797c:	230a      	movs	r3, #10
  USBH_StatusTypeDef status = USBH_BUSY;
 801797e:	4628      	mov	r0, r5
     phost->Control.timer = (uint16_t)phost->Timer;
 8017980:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8017982:	7623      	strb	r3, [r4, #24]
 8017984:	e74c      	b.n	8017820 <USBH_Get_DevDesc+0x14>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8017986:	7941      	ldrb	r1, [r0, #5]
 8017988:	f7f4 fda6 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 801798c:	2801      	cmp	r0, #1
 801798e:	d01b      	beq.n	80179c8 <USBH_Get_DevDesc+0x1bc>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8017990:	2802      	cmp	r0, #2
 8017992:	d074      	beq.n	8017a7e <USBH_Get_DevDesc+0x272>
      if (URB_Status == USBH_URB_ERROR)
 8017994:	2804      	cmp	r0, #4
 8017996:	f47f af42 	bne.w	801781e <USBH_Get_DevDesc+0x12>
 801799a:	e791      	b.n	80178c0 <USBH_Get_DevDesc+0xb4>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 801799c:	7901      	ldrb	r1, [r0, #4]
 801799e:	f7f4 fd9b 	bl	800c4d8 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 80179a2:	2801      	cmp	r0, #1
 80179a4:	d010      	beq.n	80179c8 <USBH_Get_DevDesc+0x1bc>
    else if (URB_Status == USBH_URB_ERROR)
 80179a6:	2804      	cmp	r0, #4
 80179a8:	d08a      	beq.n	80178c0 <USBH_Get_DevDesc+0xb4>
      if(URB_Status == USBH_URB_STALL)
 80179aa:	2805      	cmp	r0, #5
 80179ac:	f47f af37 	bne.w	801781e <USBH_Get_DevDesc+0x12>
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80179b0:	2200      	movs	r2, #0
 80179b2:	2103      	movs	r1, #3
 80179b4:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80179b8:	f005 fd58 	bl	801d46c <osMessagePut>
      phost->RequestState = CMD_SEND;
 80179bc:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 80179be:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 80179c0:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 80179c2:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 80179c4:	7623      	strb	r3, [r4, #24]
 80179c6:	e72b      	b.n	8017820 <USBH_Get_DevDesc+0x14>
      phost->Control.state = CTRL_COMPLETE;
 80179c8:	230d      	movs	r3, #13
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80179ca:	2200      	movs	r2, #0
 80179cc:	2103      	movs	r1, #3
 80179ce:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_COMPLETE;
 80179d2:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80179d4:	f005 fd4a 	bl	801d46c <osMessagePut>
      phost->RequestState = CMD_SEND;
 80179d8:	2201      	movs	r2, #1
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80179da:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
      phost->Control.state =CTRL_IDLE;
 80179de:	2000      	movs	r0, #0
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80179e0:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
  if (length > 8U)
 80179e4:	2e08      	cmp	r6, #8
      phost->RequestState = CMD_SEND;
 80179e6:	70a2      	strb	r2, [r4, #2]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80179e8:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80179ec:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80179f0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
      phost->Control.state =CTRL_IDLE;
 80179f4:	7620      	strb	r0, [r4, #24]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80179f6:	f884 1323 	strb.w	r1, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80179fa:	f8a4 2324 	strh.w	r2, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80179fe:	f8c4 3326 	str.w	r3, [r4, #806]	; 0x326
  if (length > 8U)
 8017a02:	f67f af0d 	bls.w	8017820 <USBH_Get_DevDesc+0x14>
    dev_desc->idVendor           = LE16 (buf +  8);
 8017a06:	f8b4 5124 	ldrh.w	r5, [r4, #292]	; 0x124
    dev_desc->idProduct          = LE16 (buf + 10);
 8017a0a:	f8b4 1126 	ldrh.w	r1, [r4, #294]	; 0x126
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8017a0e:	f8b4 2128 	ldrh.w	r2, [r4, #296]	; 0x128
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8017a12:	f8d4 312a 	ldr.w	r3, [r4, #298]	; 0x12a
    dev_desc->idVendor           = LE16 (buf +  8);
 8017a16:	f8a4 532a 	strh.w	r5, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 8017a1a:	f8a4 132c 	strh.w	r1, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8017a1e:	f8a4 232e 	strh.w	r2, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8017a22:	f8c4 3330 	str.w	r3, [r4, #816]	; 0x330
}
 8017a26:	b003      	add	sp, #12
 8017a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (phost->Control.setup.b.wLength.w != 0U)
 8017a2a:	8ae3      	ldrh	r3, [r4, #22]
 8017a2c:	f994 2010 	ldrsb.w	r2, [r4, #16]
 8017a30:	b1c3      	cbz	r3, 8017a64 <USBH_Get_DevDesc+0x258>
        if (direction == USB_D2H)
 8017a32:	2a00      	cmp	r2, #0
          phost->Control.state = CTRL_DATA_IN;
 8017a34:	bfb4      	ite	lt
 8017a36:	2303      	movlt	r3, #3
          phost->Control.state = CTRL_DATA_OUT;
 8017a38:	2305      	movge	r3, #5
 8017a3a:	7623      	strb	r3, [r4, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017a3c:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8017a40:	2200      	movs	r2, #0
 8017a42:	2103      	movs	r1, #3
 8017a44:	f005 fd12 	bl	801d46c <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8017a48:	2001      	movs	r0, #1
 8017a4a:	e6e9      	b.n	8017820 <USBH_Get_DevDesc+0x14>
      phost->Control.state = CTRL_STATUS_OUT;
 8017a4c:	2309      	movs	r3, #9
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017a4e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8017a52:	2200      	movs	r2, #0
 8017a54:	2103      	movs	r1, #3
      phost->Control.state = CTRL_STATUS_IN;
 8017a56:	7623      	strb	r3, [r4, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017a58:	f005 fd08 	bl	801d46c <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8017a5c:	4628      	mov	r0, r5
 8017a5e:	e6df      	b.n	8017820 <USBH_Get_DevDesc+0x14>
      phost->Control.state = CTRL_STATUS_IN;
 8017a60:	2307      	movs	r3, #7
 8017a62:	e7f4      	b.n	8017a4e <USBH_Get_DevDesc+0x242>
        if (direction == USB_D2H)
 8017a64:	2a00      	cmp	r2, #0
          phost->Control.state = CTRL_STATUS_OUT;
 8017a66:	bfb4      	ite	lt
 8017a68:	2309      	movlt	r3, #9
          phost->Control.state = CTRL_STATUS_IN;
 8017a6a:	2307      	movge	r3, #7
 8017a6c:	7623      	strb	r3, [r4, #24]
 8017a6e:	e7e5      	b.n	8017a3c <USBH_Get_DevDesc+0x230>
      USBH_LL_Stop(phost);
 8017a70:	f7f4 fcc0 	bl	800c3f4 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 8017a74:	2301      	movs	r3, #1
 8017a76:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8017a78:	4618      	mov	r0, r3
      phost->RequestState = CMD_SEND;
 8017a7a:	70a3      	strb	r3, [r4, #2]
 8017a7c:	e6d0      	b.n	8017820 <USBH_Get_DevDesc+0x14>
      phost->Control.state = CTRL_STATUS_OUT;
 8017a7e:	2309      	movs	r3, #9
 8017a80:	e71f      	b.n	80178c2 <USBH_Get_DevDesc+0xb6>
      phost->Control.state = CTRL_DATA_OUT;
 8017a82:	2305      	movs	r3, #5
 8017a84:	e71d      	b.n	80178c2 <USBH_Get_DevDesc+0xb6>
      phost->Control.state = CTRL_STALLED;
 8017a86:	230c      	movs	r3, #12
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017a88:	2200      	movs	r2, #0
 8017a8a:	2103      	movs	r1, #3
 8017a8c:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_STALLED;
 8017a90:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017a92:	f005 fceb 	bl	801d46c <osMessagePut>
 8017a96:	e791      	b.n	80179bc <USBH_Get_DevDesc+0x1b0>
 8017a98:	01000680 	.word	0x01000680
 8017a9c:	08023f48 	.word	0x08023f48
 8017aa0:	08025eac 	.word	0x08025eac

08017aa4 <USBH_Get_CfgDesc>:
{
 8017aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(phost->RequestState == CMD_SEND)
 8017aa8:	7886      	ldrb	r6, [r0, #2]
{
 8017aaa:	b083      	sub	sp, #12
 8017aac:	4605      	mov	r5, r0
 8017aae:	460f      	mov	r7, r1
  if(phost->RequestState == CMD_SEND)
 8017ab0:	2e01      	cmp	r6, #1
  pData = phost->device.CfgDesc_Raw;
 8017ab2:	f100 041c 	add.w	r4, r0, #28
  if(phost->RequestState == CMD_SEND)
 8017ab6:	d011      	beq.n	8017adc <USBH_Get_CfgDesc+0x38>
  switch (phost->RequestState)
 8017ab8:	2e02      	cmp	r6, #2
 8017aba:	d003      	beq.n	8017ac4 <USBH_Get_CfgDesc+0x20>
  status = USBH_BUSY;
 8017abc:	2001      	movs	r0, #1
}
 8017abe:	b003      	add	sp, #12
 8017ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (phost->Control.state)
 8017ac4:	7e03      	ldrb	r3, [r0, #24]
 8017ac6:	3b01      	subs	r3, #1
 8017ac8:	2b0a      	cmp	r3, #10
 8017aca:	d8f7      	bhi.n	8017abc <USBH_Get_CfgDesc+0x18>
 8017acc:	e8df f003 	tbb	[pc, r3]
 8017ad0:	5d513d34 	.word	0x5d513d34
 8017ad4:	b6907769 	.word	0xb6907769
 8017ad8:	aa9c      	.short	0xaa9c
 8017ada:	1a          	.byte	0x1a
 8017adb:	00          	.byte	0x00
    phost->Control.setup.b.wLength.w = length;
 8017adc:	82c7      	strh	r7, [r0, #22]
    phost->Control.setup.b.wValue.w = value_idx;
 8017ade:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8017ae0:	49bc      	ldr	r1, [pc, #752]	; (8017dd4 <USBH_Get_CfgDesc+0x330>)
    phost->RequestState = CMD_WAIT;
 8017ae2:	2002      	movs	r0, #2
    phost->Control.buff = buff;
 8017ae4:	60ac      	str	r4, [r5, #8]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017ae6:	461a      	mov	r2, r3
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8017ae8:	6129      	str	r1, [r5, #16]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017aea:	2103      	movs	r1, #3
    phost->RequestState = CMD_WAIT;
 8017aec:	70a8      	strb	r0, [r5, #2]
    phost->Control.length = length;
 8017aee:	81af      	strh	r7, [r5, #12]
    phost->Control.state = CTRL_SETUP;
 8017af0:	762e      	strb	r6, [r5, #24]
    phost->Control.setup.b.wValue.w = value_idx;
 8017af2:	82ab      	strh	r3, [r5, #20]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017af4:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8017af8:	f005 fcb8 	bl	801d46c <osMessagePut>
    status = USBH_BUSY;
 8017afc:	4630      	mov	r0, r6
}
 8017afe:	b003      	add	sp, #12
 8017b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8017b04:	7e43      	ldrb	r3, [r0, #25]
 8017b06:	3301      	adds	r3, #1
 8017b08:	b2db      	uxtb	r3, r3
 8017b0a:	2b02      	cmp	r3, #2
 8017b0c:	7643      	strb	r3, [r0, #25]
 8017b0e:	f240 814d 	bls.w	8017dac <USBH_Get_CfgDesc+0x308>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8017b12:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8017b16:	2106      	movs	r1, #6
 8017b18:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8017b1a:	2300      	movs	r3, #0
      USBH_ErrLog("Control error");
 8017b1c:	48ae      	ldr	r0, [pc, #696]	; (8017dd8 <USBH_Get_CfgDesc+0x334>)
      phost->Control.errorcount = 0U;
 8017b1e:	766b      	strb	r3, [r5, #25]
      USBH_ErrLog("Control error");
 8017b20:	f007 fea8 	bl	801f874 <iprintf>
 8017b24:	48ad      	ldr	r0, [pc, #692]	; (8017ddc <USBH_Get_CfgDesc+0x338>)
 8017b26:	f007 fea5 	bl	801f874 <iprintf>
 8017b2a:	200a      	movs	r0, #10
 8017b2c:	f007 feba 	bl	801f8a4 <putchar>
        phost->RequestState = CMD_SEND;
 8017b30:	2301      	movs	r3, #1
        status = USBH_FAIL;
 8017b32:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 8017b34:	70ab      	strb	r3, [r5, #2]
 8017b36:	e7c2      	b.n	8017abe <USBH_Get_CfgDesc+0x1a>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8017b38:	7942      	ldrb	r2, [r0, #5]
 8017b3a:	f100 0110 	add.w	r1, r0, #16
 8017b3e:	f001 f845 	bl	8018bcc <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8017b42:	2302      	movs	r3, #2
  USBH_StatusTypeDef status = USBH_BUSY;
 8017b44:	2001      	movs	r0, #1
    phost->Control.state = CTRL_SETUP_WAIT;
 8017b46:	762b      	strb	r3, [r5, #24]
 8017b48:	e7b9      	b.n	8017abe <USBH_Get_CfgDesc+0x1a>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8017b4a:	7941      	ldrb	r1, [r0, #5]
 8017b4c:	f7f4 fcc4 	bl	800c4d8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8017b50:	2801      	cmp	r0, #1
 8017b52:	f000 8108 	beq.w	8017d66 <USBH_Get_CfgDesc+0x2c2>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8017b56:	2804      	cmp	r0, #4
 8017b58:	d001      	beq.n	8017b5e <USBH_Get_CfgDesc+0xba>
 8017b5a:	2802      	cmp	r0, #2
 8017b5c:	d1ae      	bne.n	8017abc <USBH_Get_CfgDesc+0x18>
        phost->Control.state = CTRL_ERROR;
 8017b5e:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017b60:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8017b64:	2200      	movs	r2, #0
 8017b66:	2103      	movs	r1, #3
        phost->Control.state = CTRL_ERROR;
 8017b68:	762b      	strb	r3, [r5, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017b6a:	f005 fc7f 	bl	801d46c <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8017b6e:	2001      	movs	r0, #1
 8017b70:	e7a5      	b.n	8017abe <USBH_Get_CfgDesc+0x1a>
    phost->Control.timer = (uint16_t)phost->Timer;
 8017b72:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
    USBH_CtlReceiveData(phost,
 8017b76:	7903      	ldrb	r3, [r0, #4]
    phost->Control.timer = (uint16_t)phost->Timer;
 8017b78:	81c2      	strh	r2, [r0, #14]
    USBH_CtlReceiveData(phost,
 8017b7a:	6881      	ldr	r1, [r0, #8]
 8017b7c:	8982      	ldrh	r2, [r0, #12]
 8017b7e:	f001 f84d 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8017b82:	2304      	movs	r3, #4
  USBH_StatusTypeDef status = USBH_BUSY;
 8017b84:	2001      	movs	r0, #1
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8017b86:	762b      	strb	r3, [r5, #24]
 8017b88:	e799      	b.n	8017abe <USBH_Get_CfgDesc+0x1a>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8017b8a:	7901      	ldrb	r1, [r0, #4]
 8017b8c:	f7f4 fca4 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8017b90:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8017b92:	4606      	mov	r6, r0
    if  (URB_Status == USBH_URB_DONE)
 8017b94:	f000 80f8 	beq.w	8017d88 <USBH_Get_CfgDesc+0x2e4>
    if  (URB_Status == USBH_URB_STALL)
 8017b98:	2805      	cmp	r0, #5
 8017b9a:	d059      	beq.n	8017c50 <USBH_Get_CfgDesc+0x1ac>
      if (URB_Status == USBH_URB_ERROR)
 8017b9c:	2804      	cmp	r0, #4
 8017b9e:	d18d      	bne.n	8017abc <USBH_Get_CfgDesc+0x18>
 8017ba0:	e7dd      	b.n	8017b5e <USBH_Get_CfgDesc+0xba>
    USBH_CtlSendData (phost,
 8017ba2:	2601      	movs	r6, #1
 8017ba4:	7943      	ldrb	r3, [r0, #5]
 8017ba6:	8982      	ldrh	r2, [r0, #12]
 8017ba8:	6881      	ldr	r1, [r0, #8]
 8017baa:	9600      	str	r6, [sp, #0]
 8017bac:	f001 f81e 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8017bb0:	f8d5 23bc 	ldr.w	r2, [r5, #956]	; 0x3bc
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8017bb4:	2306      	movs	r3, #6
  USBH_StatusTypeDef status = USBH_BUSY;
 8017bb6:	4630      	mov	r0, r6
     phost->Control.timer = (uint16_t)phost->Timer;
 8017bb8:	81ea      	strh	r2, [r5, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8017bba:	762b      	strb	r3, [r5, #24]
 8017bbc:	e77f      	b.n	8017abe <USBH_Get_CfgDesc+0x1a>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8017bbe:	7941      	ldrb	r1, [r0, #5]
 8017bc0:	f7f4 fc8a 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8017bc4:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8017bc6:	4606      	mov	r6, r0
    if  (URB_Status == USBH_URB_DONE)
 8017bc8:	f000 80e8 	beq.w	8017d9c <USBH_Get_CfgDesc+0x2f8>
    else if  (URB_Status == USBH_URB_STALL)
 8017bcc:	2805      	cmp	r0, #5
 8017bce:	f000 80f8 	beq.w	8017dc2 <USBH_Get_CfgDesc+0x31e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8017bd2:	2802      	cmp	r0, #2
 8017bd4:	f000 80f3 	beq.w	8017dbe <USBH_Get_CfgDesc+0x31a>
      if (URB_Status == USBH_URB_ERROR)
 8017bd8:	2804      	cmp	r0, #4
 8017bda:	f47f af6f 	bne.w	8017abc <USBH_Get_CfgDesc+0x18>
        phost->Control.state = CTRL_ERROR;
 8017bde:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017be0:	2200      	movs	r2, #0
 8017be2:	2103      	movs	r1, #3
 8017be4:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
        phost->Control.state = CTRL_ERROR;
 8017be8:	762b      	strb	r3, [r5, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017bea:	f005 fc3f 	bl	801d46c <osMessagePut>
 8017bee:	e79f      	b.n	8017b30 <USBH_Get_CfgDesc+0x8c>
    USBH_CtlReceiveData (phost,
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	7903      	ldrb	r3, [r0, #4]
 8017bf4:	4611      	mov	r1, r2
 8017bf6:	f001 f811 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8017bfa:	f8d5 23bc 	ldr.w	r2, [r5, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8017bfe:	2308      	movs	r3, #8
  USBH_StatusTypeDef status = USBH_BUSY;
 8017c00:	2001      	movs	r0, #1
    phost->Control.timer = (uint16_t)phost->Timer;
 8017c02:	81ea      	strh	r2, [r5, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8017c04:	762b      	strb	r3, [r5, #24]
 8017c06:	e75a      	b.n	8017abe <USBH_Get_CfgDesc+0x1a>
    USBH_CtlSendData (phost,
 8017c08:	2200      	movs	r2, #0
 8017c0a:	2601      	movs	r6, #1
 8017c0c:	7943      	ldrb	r3, [r0, #5]
 8017c0e:	4611      	mov	r1, r2
 8017c10:	9600      	str	r6, [sp, #0]
 8017c12:	f000 ffeb 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8017c16:	f8d5 23bc 	ldr.w	r2, [r5, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8017c1a:	230a      	movs	r3, #10
  USBH_StatusTypeDef status = USBH_BUSY;
 8017c1c:	4630      	mov	r0, r6
     phost->Control.timer = (uint16_t)phost->Timer;
 8017c1e:	81ea      	strh	r2, [r5, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8017c20:	762b      	strb	r3, [r5, #24]
 8017c22:	e74c      	b.n	8017abe <USBH_Get_CfgDesc+0x1a>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8017c24:	7941      	ldrb	r1, [r0, #5]
 8017c26:	f7f4 fc57 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8017c2a:	2801      	cmp	r0, #1
 8017c2c:	d01c      	beq.n	8017c68 <USBH_Get_CfgDesc+0x1c4>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8017c2e:	2802      	cmp	r0, #2
 8017c30:	f000 80c3 	beq.w	8017dba <USBH_Get_CfgDesc+0x316>
      if (URB_Status == USBH_URB_ERROR)
 8017c34:	2804      	cmp	r0, #4
 8017c36:	f47f af41 	bne.w	8017abc <USBH_Get_CfgDesc+0x18>
 8017c3a:	e790      	b.n	8017b5e <USBH_Get_CfgDesc+0xba>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8017c3c:	7901      	ldrb	r1, [r0, #4]
 8017c3e:	f7f4 fc4b 	bl	800c4d8 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8017c42:	2801      	cmp	r0, #1
 8017c44:	d010      	beq.n	8017c68 <USBH_Get_CfgDesc+0x1c4>
    else if (URB_Status == USBH_URB_ERROR)
 8017c46:	2804      	cmp	r0, #4
 8017c48:	d089      	beq.n	8017b5e <USBH_Get_CfgDesc+0xba>
      if(URB_Status == USBH_URB_STALL)
 8017c4a:	2805      	cmp	r0, #5
 8017c4c:	f47f af36 	bne.w	8017abc <USBH_Get_CfgDesc+0x18>
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017c50:	2200      	movs	r2, #0
 8017c52:	2103      	movs	r1, #3
 8017c54:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8017c58:	f005 fc08 	bl	801d46c <osMessagePut>
      phost->RequestState = CMD_SEND;
 8017c5c:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 8017c5e:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 8017c60:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 8017c62:	70aa      	strb	r2, [r5, #2]
      phost->Control.state = CTRL_IDLE;
 8017c64:	762b      	strb	r3, [r5, #24]
 8017c66:	e72a      	b.n	8017abe <USBH_Get_CfgDesc+0x1a>
      phost->Control.state = CTRL_COMPLETE;
 8017c68:	230d      	movs	r3, #13
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	2103      	movs	r1, #3
 8017c6e:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
      phost->Control.state = CTRL_COMPLETE;
 8017c72:	762b      	strb	r3, [r5, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017c74:	f005 fbfa 	bl	801d46c <osMessagePut>
      phost->RequestState = CMD_SEND;
 8017c78:	2001      	movs	r0, #1
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8017c7a:	7f29      	ldrb	r1, [r5, #28]
      phost->Control.state =CTRL_IDLE;
 8017c7c:	2300      	movs	r3, #0
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8017c7e:	7f6a      	ldrb	r2, [r5, #29]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8017c80:	2f09      	cmp	r7, #9
      phost->RequestState = CMD_SEND;
 8017c82:	70a8      	strb	r0, [r5, #2]
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8017c84:	f885 1334 	strb.w	r1, [r5, #820]	; 0x334
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8017c88:	8be8      	ldrh	r0, [r5, #30]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8017c8a:	6a29      	ldr	r1, [r5, #32]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8017c8c:	f885 2335 	strb.w	r2, [r5, #821]	; 0x335
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8017c90:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
      phost->Control.state =CTRL_IDLE;
 8017c94:	762b      	strb	r3, [r5, #24]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8017c96:	f8a5 0336 	strh.w	r0, [r5, #822]	; 0x336
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8017c9a:	f8c5 1338 	str.w	r1, [r5, #824]	; 0x338
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8017c9e:	f885 233c 	strb.w	r2, [r5, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8017ca2:	d914      	bls.n	8017cce <USBH_Get_CfgDesc+0x22a>
 8017ca4:	461f      	mov	r7, r3
 8017ca6:	46ac      	mov	ip, r5
    ptr = USB_LEN_CFG_DESC;
 8017ca8:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8017caa:	f04f 0e1a 	mov.w	lr, #26
 8017cae:	b2fe      	uxtb	r6, r7
 8017cb0:	2e01      	cmp	r6, #1
 8017cb2:	bf8c      	ite	hi
 8017cb4:	2600      	movhi	r6, #0
 8017cb6:	2601      	movls	r6, #1
 8017cb8:	e007      	b.n	8017cca <USBH_Get_CfgDesc+0x226>
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8017cba:	b146      	cbz	r6, 8017cce <USBH_Get_CfgDesc+0x22a>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8017cbc:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8017cbe:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8017cc0:	4413      	add	r3, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8017cc2:	7861      	ldrb	r1, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8017cc4:	b29a      	uxth	r2, r3
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8017cc6:	2904      	cmp	r1, #4
 8017cc8:	d005      	beq.n	8017cd6 <USBH_Get_CfgDesc+0x232>
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8017cca:	4290      	cmp	r0, r2
 8017ccc:	d8f5      	bhi.n	8017cba <USBH_Get_CfgDesc+0x216>
  USBH_StatusTypeDef status = USBH_BUSY;
 8017cce:	2000      	movs	r0, #0
}
 8017cd0:	b003      	add	sp, #12
 8017cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8017cd6:	7823      	ldrb	r3, [r4, #0]
        ep_ix = 0U;
 8017cd8:	2100      	movs	r1, #0
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8017cda:	fb0e f907 	mul.w	r9, lr, r7
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8017cde:	f88c 333e 	strb.w	r3, [ip, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8017ce2:	7863      	ldrb	r3, [r4, #1]
 8017ce4:	f88c 333f 	strb.w	r3, [ip, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8017ce8:	78a3      	ldrb	r3, [r4, #2]
 8017cea:	f88c 3340 	strb.w	r3, [ip, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8017cee:	78e3      	ldrb	r3, [r4, #3]
 8017cf0:	f88c 3341 	strb.w	r3, [ip, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8017cf4:	f894 8004 	ldrb.w	r8, [r4, #4]
 8017cf8:	f88c 8342 	strb.w	r8, [ip, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8017cfc:	7963      	ldrb	r3, [r4, #5]
 8017cfe:	f88c 3343 	strb.w	r3, [ip, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8017d02:	79a3      	ldrb	r3, [r4, #6]
 8017d04:	f88c 3344 	strb.w	r3, [ip, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8017d08:	79e3      	ldrb	r3, [r4, #7]
 8017d0a:	f88c 3345 	strb.w	r3, [ip, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8017d0e:	7a23      	ldrb	r3, [r4, #8]
 8017d10:	f88c 3346 	strb.w	r3, [ip, #838]	; 0x346
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8017d14:	4290      	cmp	r0, r2
 8017d16:	d922      	bls.n	8017d5e <USBH_Get_CfgDesc+0x2ba>
 8017d18:	4541      	cmp	r1, r8
 8017d1a:	d220      	bcs.n	8017d5e <USBH_Get_CfgDesc+0x2ba>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8017d1c:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8017d1e:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8017d20:	4413      	add	r3, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8017d22:	7866      	ldrb	r6, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8017d24:	b29a      	uxth	r2, r3
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8017d26:	2e05      	cmp	r6, #5
 8017d28:	d1f4      	bne.n	8017d14 <USBH_Get_CfgDesc+0x270>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8017d2a:	3101      	adds	r1, #1
 8017d2c:	7826      	ldrb	r6, [r4, #0]
 8017d2e:	eb09 03c1 	add.w	r3, r9, r1, lsl #3
            ep_ix++;
 8017d32:	b2c9      	uxtb	r1, r1
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8017d34:	442b      	add	r3, r5
 8017d36:	f883 6340 	strb.w	r6, [r3, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8017d3a:	7866      	ldrb	r6, [r4, #1]
 8017d3c:	f883 6341 	strb.w	r6, [r3, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8017d40:	78a6      	ldrb	r6, [r4, #2]
 8017d42:	f883 6342 	strb.w	r6, [r3, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8017d46:	78e6      	ldrb	r6, [r4, #3]
 8017d48:	f883 6343 	strb.w	r6, [r3, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8017d4c:	88a6      	ldrh	r6, [r4, #4]
 8017d4e:	f8a3 6344 	strh.w	r6, [r3, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8017d52:	79a6      	ldrb	r6, [r4, #6]
 8017d54:	f883 6346 	strb.w	r6, [r3, #838]	; 0x346
 8017d58:	f89c 8342 	ldrb.w	r8, [ip, #834]	; 0x342
 8017d5c:	e7da      	b.n	8017d14 <USBH_Get_CfgDesc+0x270>
 8017d5e:	3701      	adds	r7, #1
 8017d60:	f10c 0c1a 	add.w	ip, ip, #26
 8017d64:	e7a3      	b.n	8017cae <USBH_Get_CfgDesc+0x20a>
      if (phost->Control.setup.b.wLength.w != 0U)
 8017d66:	8aea      	ldrh	r2, [r5, #22]
 8017d68:	f995 3010 	ldrsb.w	r3, [r5, #16]
 8017d6c:	b1c2      	cbz	r2, 8017da0 <USBH_Get_CfgDesc+0x2fc>
        if (direction == USB_D2H)
 8017d6e:	2b00      	cmp	r3, #0
          phost->Control.state = CTRL_DATA_IN;
 8017d70:	bfb4      	ite	lt
 8017d72:	2303      	movlt	r3, #3
          phost->Control.state = CTRL_DATA_OUT;
 8017d74:	2305      	movge	r3, #5
 8017d76:	762b      	strb	r3, [r5, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017d78:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8017d7c:	2200      	movs	r2, #0
 8017d7e:	2103      	movs	r1, #3
 8017d80:	f005 fb74 	bl	801d46c <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8017d84:	2001      	movs	r0, #1
 8017d86:	e69a      	b.n	8017abe <USBH_Get_CfgDesc+0x1a>
      phost->Control.state = CTRL_STATUS_OUT;
 8017d88:	2309      	movs	r3, #9
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017d8a:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8017d8e:	2200      	movs	r2, #0
 8017d90:	2103      	movs	r1, #3
      phost->Control.state = CTRL_STATUS_IN;
 8017d92:	762b      	strb	r3, [r5, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017d94:	f005 fb6a 	bl	801d46c <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8017d98:	4630      	mov	r0, r6
 8017d9a:	e690      	b.n	8017abe <USBH_Get_CfgDesc+0x1a>
      phost->Control.state = CTRL_STATUS_IN;
 8017d9c:	2307      	movs	r3, #7
 8017d9e:	e7f4      	b.n	8017d8a <USBH_Get_CfgDesc+0x2e6>
        if (direction == USB_D2H)
 8017da0:	2b00      	cmp	r3, #0
          phost->Control.state = CTRL_STATUS_OUT;
 8017da2:	bfb4      	ite	lt
 8017da4:	2309      	movlt	r3, #9
          phost->Control.state = CTRL_STATUS_IN;
 8017da6:	2307      	movge	r3, #7
 8017da8:	762b      	strb	r3, [r5, #24]
 8017daa:	e7e5      	b.n	8017d78 <USBH_Get_CfgDesc+0x2d4>
      USBH_LL_Stop(phost);
 8017dac:	f7f4 fb22 	bl	800c3f4 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 8017db0:	2301      	movs	r3, #1
 8017db2:	762b      	strb	r3, [r5, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8017db4:	4618      	mov	r0, r3
      phost->RequestState = CMD_SEND;
 8017db6:	70ab      	strb	r3, [r5, #2]
 8017db8:	e681      	b.n	8017abe <USBH_Get_CfgDesc+0x1a>
      phost->Control.state = CTRL_STATUS_OUT;
 8017dba:	2309      	movs	r3, #9
 8017dbc:	e6d0      	b.n	8017b60 <USBH_Get_CfgDesc+0xbc>
      phost->Control.state = CTRL_DATA_OUT;
 8017dbe:	2305      	movs	r3, #5
 8017dc0:	e6ce      	b.n	8017b60 <USBH_Get_CfgDesc+0xbc>
      phost->Control.state = CTRL_STALLED;
 8017dc2:	230c      	movs	r3, #12
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017dc4:	2200      	movs	r2, #0
 8017dc6:	2103      	movs	r1, #3
 8017dc8:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
      phost->Control.state = CTRL_STALLED;
 8017dcc:	762b      	strb	r3, [r5, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017dce:	f005 fb4d 	bl	801d46c <osMessagePut>
 8017dd2:	e743      	b.n	8017c5c <USBH_Get_CfgDesc+0x1b8>
 8017dd4:	02000680 	.word	0x02000680
 8017dd8:	08023f48 	.word	0x08023f48
 8017ddc:	08025eac 	.word	0x08025eac

08017de0 <USBH_Get_StringDesc>:
{
 8017de0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(phost->RequestState == CMD_SEND)
 8017de2:	7884      	ldrb	r4, [r0, #2]
{
 8017de4:	b085      	sub	sp, #20
 8017de6:	4605      	mov	r5, r0
                                  phost->device.Data,
 8017de8:	f500 778e 	add.w	r7, r0, #284	; 0x11c
  if(phost->RequestState == CMD_SEND)
 8017dec:	2c01      	cmp	r4, #1
 8017dee:	d011      	beq.n	8017e14 <USBH_Get_StringDesc+0x34>
  switch (phost->RequestState)
 8017df0:	2c02      	cmp	r4, #2
 8017df2:	d002      	beq.n	8017dfa <USBH_Get_StringDesc+0x1a>
  status = USBH_BUSY;
 8017df4:	2001      	movs	r0, #1
}
 8017df6:	b005      	add	sp, #20
 8017df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017dfa:	4616      	mov	r6, r2
  switch (phost->Control.state)
 8017dfc:	7e02      	ldrb	r2, [r0, #24]
 8017dfe:	3a01      	subs	r2, #1
 8017e00:	2a0a      	cmp	r2, #10
 8017e02:	d8f7      	bhi.n	8017df4 <USBH_Get_StringDesc+0x14>
 8017e04:	e8df f002 	tbb	[pc, r2]
 8017e08:	62564239 	.word	0x62564239
 8017e0c:	bb957c6e 	.word	0xbb957c6e
 8017e10:	afa1      	.short	0xafa1
 8017e12:	1f          	.byte	0x1f
 8017e13:	00          	.byte	0x00
  if((status = USBH_GetDescriptor(phost,
 8017e14:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    phost->Control.setup.b.wLength.w = length;
 8017e18:	82c3      	strh	r3, [r0, #22]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8017e1a:	f44f 6cd0 	mov.w	ip, #1664	; 0x680
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8017e1e:	f240 4609 	movw	r6, #1033	; 0x409
    phost->Control.setup.b.wValue.w = value_idx;
 8017e22:	8241      	strh	r1, [r0, #18]
    phost->RequestState = CMD_WAIT;
 8017e24:	2002      	movs	r0, #2
    phost->Control.buff = buff;
 8017e26:	60af      	str	r7, [r5, #8]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017e28:	2200      	movs	r2, #0
    phost->RequestState = CMD_WAIT;
 8017e2a:	70a8      	strb	r0, [r5, #2]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017e2c:	2103      	movs	r1, #3
    phost->Control.length = length;
 8017e2e:	81ab      	strh	r3, [r5, #12]
    phost->Control.state = CTRL_SETUP;
 8017e30:	762c      	strb	r4, [r5, #24]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8017e32:	f8a5 c010 	strh.w	ip, [r5, #16]
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8017e36:	82ae      	strh	r6, [r5, #20]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017e38:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8017e3c:	f005 fb16 	bl	801d46c <osMessagePut>
    status = USBH_BUSY;
 8017e40:	4620      	mov	r0, r4
}
 8017e42:	b005      	add	sp, #20
 8017e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8017e46:	7e43      	ldrb	r3, [r0, #25]
 8017e48:	3301      	adds	r3, #1
 8017e4a:	b2db      	uxtb	r3, r3
 8017e4c:	2b02      	cmp	r3, #2
 8017e4e:	7643      	strb	r3, [r0, #25]
 8017e50:	f240 80f5 	bls.w	801803e <USBH_Get_StringDesc+0x25e>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8017e54:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8017e58:	2106      	movs	r1, #6
 8017e5a:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8017e5c:	2300      	movs	r3, #0
      USBH_ErrLog("Control error");
 8017e5e:	4882      	ldr	r0, [pc, #520]	; (8018068 <USBH_Get_StringDesc+0x288>)
      phost->Control.errorcount = 0U;
 8017e60:	766b      	strb	r3, [r5, #25]
      USBH_ErrLog("Control error");
 8017e62:	f007 fd07 	bl	801f874 <iprintf>
 8017e66:	4881      	ldr	r0, [pc, #516]	; (801806c <USBH_Get_StringDesc+0x28c>)
 8017e68:	f007 fd04 	bl	801f874 <iprintf>
 8017e6c:	200a      	movs	r0, #10
 8017e6e:	f007 fd19 	bl	801f8a4 <putchar>
        phost->RequestState = CMD_SEND;
 8017e72:	2301      	movs	r3, #1
        status = USBH_FAIL;
 8017e74:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 8017e76:	70ab      	strb	r3, [r5, #2]
 8017e78:	e7bd      	b.n	8017df6 <USBH_Get_StringDesc+0x16>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8017e7a:	7942      	ldrb	r2, [r0, #5]
 8017e7c:	f100 0110 	add.w	r1, r0, #16
 8017e80:	f000 fea4 	bl	8018bcc <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8017e84:	2302      	movs	r3, #2
  USBH_StatusTypeDef status = USBH_BUSY;
 8017e86:	2001      	movs	r0, #1
    phost->Control.state = CTRL_SETUP_WAIT;
 8017e88:	762b      	strb	r3, [r5, #24]
 8017e8a:	e7b4      	b.n	8017df6 <USBH_Get_StringDesc+0x16>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8017e8c:	7941      	ldrb	r1, [r0, #5]
 8017e8e:	f7f4 fb23 	bl	800c4d8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8017e92:	2801      	cmp	r0, #1
 8017e94:	f000 80b0 	beq.w	8017ff8 <USBH_Get_StringDesc+0x218>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8017e98:	2804      	cmp	r0, #4
 8017e9a:	d001      	beq.n	8017ea0 <USBH_Get_StringDesc+0xc0>
 8017e9c:	2802      	cmp	r0, #2
 8017e9e:	d1a9      	bne.n	8017df4 <USBH_Get_StringDesc+0x14>
        phost->Control.state = CTRL_ERROR;
 8017ea0:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017ea2:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	2103      	movs	r1, #3
        phost->Control.state = CTRL_ERROR;
 8017eaa:	762b      	strb	r3, [r5, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017eac:	f005 fade 	bl	801d46c <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8017eb0:	2001      	movs	r0, #1
 8017eb2:	e7a0      	b.n	8017df6 <USBH_Get_StringDesc+0x16>
    phost->Control.timer = (uint16_t)phost->Timer;
 8017eb4:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
    USBH_CtlReceiveData(phost,
 8017eb8:	7903      	ldrb	r3, [r0, #4]
    phost->Control.timer = (uint16_t)phost->Timer;
 8017eba:	81c2      	strh	r2, [r0, #14]
    USBH_CtlReceiveData(phost,
 8017ebc:	6881      	ldr	r1, [r0, #8]
 8017ebe:	8982      	ldrh	r2, [r0, #12]
 8017ec0:	f000 feac 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8017ec4:	2304      	movs	r3, #4
  USBH_StatusTypeDef status = USBH_BUSY;
 8017ec6:	2001      	movs	r0, #1
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8017ec8:	762b      	strb	r3, [r5, #24]
 8017eca:	e794      	b.n	8017df6 <USBH_Get_StringDesc+0x16>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8017ecc:	7901      	ldrb	r1, [r0, #4]
 8017ece:	f7f4 fb03 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8017ed2:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8017ed4:	4604      	mov	r4, r0
    if  (URB_Status == USBH_URB_DONE)
 8017ed6:	f000 80a0 	beq.w	801801a <USBH_Get_StringDesc+0x23a>
    if  (URB_Status == USBH_URB_STALL)
 8017eda:	2805      	cmp	r0, #5
 8017edc:	d05a      	beq.n	8017f94 <USBH_Get_StringDesc+0x1b4>
      if (URB_Status == USBH_URB_ERROR)
 8017ede:	2804      	cmp	r0, #4
 8017ee0:	d188      	bne.n	8017df4 <USBH_Get_StringDesc+0x14>
 8017ee2:	e7dd      	b.n	8017ea0 <USBH_Get_StringDesc+0xc0>
    USBH_CtlSendData (phost,
 8017ee4:	2401      	movs	r4, #1
 8017ee6:	7943      	ldrb	r3, [r0, #5]
 8017ee8:	8982      	ldrh	r2, [r0, #12]
 8017eea:	6881      	ldr	r1, [r0, #8]
 8017eec:	9400      	str	r4, [sp, #0]
 8017eee:	f000 fe7d 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8017ef2:	f8d5 23bc 	ldr.w	r2, [r5, #956]	; 0x3bc
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8017ef6:	2306      	movs	r3, #6
  USBH_StatusTypeDef status = USBH_BUSY;
 8017ef8:	4620      	mov	r0, r4
     phost->Control.timer = (uint16_t)phost->Timer;
 8017efa:	81ea      	strh	r2, [r5, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8017efc:	762b      	strb	r3, [r5, #24]
 8017efe:	e77a      	b.n	8017df6 <USBH_Get_StringDesc+0x16>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8017f00:	7941      	ldrb	r1, [r0, #5]
 8017f02:	f7f4 fae9 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8017f06:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8017f08:	4604      	mov	r4, r0
    if  (URB_Status == USBH_URB_DONE)
 8017f0a:	f000 8090 	beq.w	801802e <USBH_Get_StringDesc+0x24e>
    else if  (URB_Status == USBH_URB_STALL)
 8017f0e:	2805      	cmp	r0, #5
 8017f10:	f000 80a0 	beq.w	8018054 <USBH_Get_StringDesc+0x274>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8017f14:	2802      	cmp	r0, #2
 8017f16:	f000 809b 	beq.w	8018050 <USBH_Get_StringDesc+0x270>
      if (URB_Status == USBH_URB_ERROR)
 8017f1a:	2804      	cmp	r0, #4
 8017f1c:	f47f af6a 	bne.w	8017df4 <USBH_Get_StringDesc+0x14>
        phost->Control.state = CTRL_ERROR;
 8017f20:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017f22:	2200      	movs	r2, #0
 8017f24:	2103      	movs	r1, #3
 8017f26:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
        phost->Control.state = CTRL_ERROR;
 8017f2a:	762b      	strb	r3, [r5, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017f2c:	f005 fa9e 	bl	801d46c <osMessagePut>
 8017f30:	e79f      	b.n	8017e72 <USBH_Get_StringDesc+0x92>
    USBH_CtlReceiveData (phost,
 8017f32:	2200      	movs	r2, #0
 8017f34:	7903      	ldrb	r3, [r0, #4]
 8017f36:	4611      	mov	r1, r2
 8017f38:	f000 fe70 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8017f3c:	f8d5 23bc 	ldr.w	r2, [r5, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8017f40:	2308      	movs	r3, #8
  USBH_StatusTypeDef status = USBH_BUSY;
 8017f42:	2001      	movs	r0, #1
    phost->Control.timer = (uint16_t)phost->Timer;
 8017f44:	81ea      	strh	r2, [r5, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8017f46:	762b      	strb	r3, [r5, #24]
 8017f48:	e755      	b.n	8017df6 <USBH_Get_StringDesc+0x16>
    USBH_CtlSendData (phost,
 8017f4a:	2200      	movs	r2, #0
 8017f4c:	2401      	movs	r4, #1
 8017f4e:	7943      	ldrb	r3, [r0, #5]
 8017f50:	4611      	mov	r1, r2
 8017f52:	9400      	str	r4, [sp, #0]
 8017f54:	f000 fe4a 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8017f58:	f8d5 23bc 	ldr.w	r2, [r5, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8017f5c:	230a      	movs	r3, #10
  USBH_StatusTypeDef status = USBH_BUSY;
 8017f5e:	4620      	mov	r0, r4
     phost->Control.timer = (uint16_t)phost->Timer;
 8017f60:	81ea      	strh	r2, [r5, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8017f62:	762b      	strb	r3, [r5, #24]
 8017f64:	e747      	b.n	8017df6 <USBH_Get_StringDesc+0x16>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8017f66:	7941      	ldrb	r1, [r0, #5]
 8017f68:	9303      	str	r3, [sp, #12]
 8017f6a:	f7f4 fab5 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8017f6e:	2801      	cmp	r0, #1
 8017f70:	d01c      	beq.n	8017fac <USBH_Get_StringDesc+0x1cc>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8017f72:	2802      	cmp	r0, #2
 8017f74:	d06a      	beq.n	801804c <USBH_Get_StringDesc+0x26c>
      if (URB_Status == USBH_URB_ERROR)
 8017f76:	2804      	cmp	r0, #4
 8017f78:	f47f af3c 	bne.w	8017df4 <USBH_Get_StringDesc+0x14>
 8017f7c:	e790      	b.n	8017ea0 <USBH_Get_StringDesc+0xc0>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8017f7e:	7901      	ldrb	r1, [r0, #4]
 8017f80:	9303      	str	r3, [sp, #12]
 8017f82:	f7f4 faa9 	bl	800c4d8 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8017f86:	2801      	cmp	r0, #1
 8017f88:	d010      	beq.n	8017fac <USBH_Get_StringDesc+0x1cc>
    else if (URB_Status == USBH_URB_ERROR)
 8017f8a:	2804      	cmp	r0, #4
 8017f8c:	d088      	beq.n	8017ea0 <USBH_Get_StringDesc+0xc0>
      if(URB_Status == USBH_URB_STALL)
 8017f8e:	2805      	cmp	r0, #5
 8017f90:	f47f af30 	bne.w	8017df4 <USBH_Get_StringDesc+0x14>
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017f94:	2200      	movs	r2, #0
 8017f96:	2103      	movs	r1, #3
 8017f98:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8017f9c:	f005 fa66 	bl	801d46c <osMessagePut>
      phost->RequestState = CMD_SEND;
 8017fa0:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 8017fa2:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 8017fa4:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 8017fa6:	70aa      	strb	r2, [r5, #2]
      phost->Control.state = CTRL_IDLE;
 8017fa8:	762b      	strb	r3, [r5, #24]
 8017faa:	e724      	b.n	8017df6 <USBH_Get_StringDesc+0x16>
      phost->Control.state = CTRL_COMPLETE;
 8017fac:	240d      	movs	r4, #13
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017fae:	2200      	movs	r2, #0
 8017fb0:	2103      	movs	r1, #3
 8017fb2:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
      phost->Control.state = CTRL_COMPLETE;
 8017fb6:	762c      	strb	r4, [r5, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8017fb8:	f005 fa58 	bl	801d46c <osMessagePut>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8017fbc:	f895 211d 	ldrb.w	r2, [r5, #285]	; 0x11d
      phost->RequestState = CMD_SEND;
 8017fc0:	2101      	movs	r1, #1
      phost->Control.state =CTRL_IDLE;
 8017fc2:	2000      	movs	r0, #0
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8017fc4:	2a03      	cmp	r2, #3
 8017fc6:	9b03      	ldr	r3, [sp, #12]
      phost->RequestState = CMD_SEND;
 8017fc8:	70a9      	strb	r1, [r5, #2]
      phost->Control.state =CTRL_IDLE;
 8017fca:	7628      	strb	r0, [r5, #24]
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8017fcc:	f47f af13 	bne.w	8017df6 <USBH_Get_StringDesc+0x16>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8017fd0:	f895 211c 	ldrb.w	r2, [r5, #284]	; 0x11c
 8017fd4:	3a02      	subs	r2, #2
 8017fd6:	4293      	cmp	r3, r2
 8017fd8:	bf28      	it	cs
 8017fda:	4613      	movcs	r3, r2
 8017fdc:	b29a      	uxth	r2, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8017fde:	b13b      	cbz	r3, 8017ff0 <USBH_Get_StringDesc+0x210>
      *pdest =  psrc[idx];
 8017fe0:	183b      	adds	r3, r7, r0
    for (idx = 0U; idx < strlength; idx += 2U)
 8017fe2:	3002      	adds	r0, #2
 8017fe4:	b280      	uxth	r0, r0
      *pdest =  psrc[idx];
 8017fe6:	789b      	ldrb	r3, [r3, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
 8017fe8:	4282      	cmp	r2, r0
      *pdest =  psrc[idx];
 8017fea:	f806 3b01 	strb.w	r3, [r6], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8017fee:	d8f7      	bhi.n	8017fe0 <USBH_Get_StringDesc+0x200>
    *pdest = 0U; /* mark end of string */
 8017ff0:	2000      	movs	r0, #0
 8017ff2:	7030      	strb	r0, [r6, #0]
}
 8017ff4:	b005      	add	sp, #20
 8017ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (phost->Control.setup.b.wLength.w != 0U)
 8017ff8:	8aeb      	ldrh	r3, [r5, #22]
 8017ffa:	f995 2010 	ldrsb.w	r2, [r5, #16]
 8017ffe:	b1c3      	cbz	r3, 8018032 <USBH_Get_StringDesc+0x252>
        if (direction == USB_D2H)
 8018000:	2a00      	cmp	r2, #0
          phost->Control.state = CTRL_DATA_IN;
 8018002:	bfb4      	ite	lt
 8018004:	2303      	movlt	r3, #3
          phost->Control.state = CTRL_DATA_OUT;
 8018006:	2305      	movge	r3, #5
 8018008:	762b      	strb	r3, [r5, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801800a:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 801800e:	2200      	movs	r2, #0
 8018010:	2103      	movs	r1, #3
 8018012:	f005 fa2b 	bl	801d46c <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8018016:	2001      	movs	r0, #1
 8018018:	e6ed      	b.n	8017df6 <USBH_Get_StringDesc+0x16>
      phost->Control.state = CTRL_STATUS_OUT;
 801801a:	2309      	movs	r3, #9
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801801c:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8018020:	2200      	movs	r2, #0
 8018022:	2103      	movs	r1, #3
      phost->Control.state = CTRL_STATUS_IN;
 8018024:	762b      	strb	r3, [r5, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018026:	f005 fa21 	bl	801d46c <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 801802a:	4620      	mov	r0, r4
 801802c:	e6e3      	b.n	8017df6 <USBH_Get_StringDesc+0x16>
      phost->Control.state = CTRL_STATUS_IN;
 801802e:	2307      	movs	r3, #7
 8018030:	e7f4      	b.n	801801c <USBH_Get_StringDesc+0x23c>
        if (direction == USB_D2H)
 8018032:	2a00      	cmp	r2, #0
          phost->Control.state = CTRL_STATUS_OUT;
 8018034:	bfb4      	ite	lt
 8018036:	2309      	movlt	r3, #9
          phost->Control.state = CTRL_STATUS_IN;
 8018038:	2307      	movge	r3, #7
 801803a:	762b      	strb	r3, [r5, #24]
 801803c:	e7e5      	b.n	801800a <USBH_Get_StringDesc+0x22a>
      USBH_LL_Stop(phost);
 801803e:	f7f4 f9d9 	bl	800c3f4 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 8018042:	2301      	movs	r3, #1
 8018044:	762b      	strb	r3, [r5, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8018046:	4618      	mov	r0, r3
      phost->RequestState = CMD_SEND;
 8018048:	70ab      	strb	r3, [r5, #2]
 801804a:	e6d4      	b.n	8017df6 <USBH_Get_StringDesc+0x16>
      phost->Control.state = CTRL_STATUS_OUT;
 801804c:	2309      	movs	r3, #9
 801804e:	e728      	b.n	8017ea2 <USBH_Get_StringDesc+0xc2>
      phost->Control.state = CTRL_DATA_OUT;
 8018050:	2305      	movs	r3, #5
 8018052:	e726      	b.n	8017ea2 <USBH_Get_StringDesc+0xc2>
      phost->Control.state = CTRL_STALLED;
 8018054:	230c      	movs	r3, #12
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018056:	2200      	movs	r2, #0
 8018058:	2103      	movs	r1, #3
 801805a:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
      phost->Control.state = CTRL_STALLED;
 801805e:	762b      	strb	r3, [r5, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018060:	f005 fa04 	bl	801d46c <osMessagePut>
 8018064:	e79c      	b.n	8017fa0 <USBH_Get_StringDesc+0x1c0>
 8018066:	bf00      	nop
 8018068:	08023f48 	.word	0x08023f48
 801806c:	08025eac 	.word	0x08025eac

08018070 <USBH_SetAddress>:
{
 8018070:	b570      	push	{r4, r5, r6, lr}
  if(phost->RequestState == CMD_SEND)
 8018072:	7885      	ldrb	r5, [r0, #2]
{
 8018074:	b082      	sub	sp, #8
 8018076:	4604      	mov	r4, r0
  if(phost->RequestState == CMD_SEND)
 8018078:	2d01      	cmp	r5, #1
 801807a:	d010      	beq.n	801809e <USBH_SetAddress+0x2e>
  switch (phost->RequestState)
 801807c:	2d02      	cmp	r5, #2
 801807e:	d002      	beq.n	8018086 <USBH_SetAddress+0x16>
  status = USBH_BUSY;
 8018080:	2001      	movs	r0, #1
}
 8018082:	b002      	add	sp, #8
 8018084:	bd70      	pop	{r4, r5, r6, pc}
  switch (phost->Control.state)
 8018086:	7e03      	ldrb	r3, [r0, #24]
 8018088:	3b01      	subs	r3, #1
 801808a:	2b0a      	cmp	r3, #10
 801808c:	d8f8      	bhi.n	8018080 <USBH_SetAddress+0x10>
 801808e:	e8df f003 	tbb	[pc, r3]
 8018092:	3d34      	.short	0x3d34
 8018094:	77695d51 	.word	0x77695d51
 8018098:	a99bb48f 	.word	0xa99bb48f
 801809c:	1a          	.byte	0x1a
 801809d:	00          	.byte	0x00
    phost->Control.setup.b.wIndex.w = 0U;
 801809e:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80180a0:	f44f 66a0 	mov.w	r6, #1280	; 0x500
    phost->RequestState = CMD_WAIT;
 80180a4:	2002      	movs	r0, #2
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80180a6:	8261      	strh	r1, [r4, #18]
    phost->Control.state = CTRL_SETUP;
 80180a8:	7625      	strb	r5, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80180aa:	461a      	mov	r2, r3
    phost->RequestState = CMD_WAIT;
 80180ac:	70a0      	strb	r0, [r4, #2]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80180ae:	2103      	movs	r1, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80180b0:	8226      	strh	r6, [r4, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 80180b2:	6163      	str	r3, [r4, #20]
    phost->Control.buff = buff;
 80180b4:	60a3      	str	r3, [r4, #8]
    phost->Control.length = length;
 80180b6:	81a3      	strh	r3, [r4, #12]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80180b8:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80180bc:	f005 f9d6 	bl	801d46c <osMessagePut>
    status = USBH_BUSY;
 80180c0:	4628      	mov	r0, r5
}
 80180c2:	b002      	add	sp, #8
 80180c4:	bd70      	pop	{r4, r5, r6, pc}
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80180c6:	7e43      	ldrb	r3, [r0, #25]
 80180c8:	3301      	adds	r3, #1
 80180ca:	b2db      	uxtb	r3, r3
 80180cc:	2b02      	cmp	r3, #2
 80180ce:	7643      	strb	r3, [r0, #25]
 80180d0:	f240 80da 	bls.w	8018288 <USBH_SetAddress+0x218>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80180d4:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 80180d8:	2106      	movs	r1, #6
 80180da:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80180dc:	2300      	movs	r3, #0
      USBH_ErrLog("Control error");
 80180de:	4874      	ldr	r0, [pc, #464]	; (80182b0 <USBH_SetAddress+0x240>)
      phost->Control.errorcount = 0U;
 80180e0:	7663      	strb	r3, [r4, #25]
      USBH_ErrLog("Control error");
 80180e2:	f007 fbc7 	bl	801f874 <iprintf>
 80180e6:	4873      	ldr	r0, [pc, #460]	; (80182b4 <USBH_SetAddress+0x244>)
 80180e8:	f007 fbc4 	bl	801f874 <iprintf>
 80180ec:	200a      	movs	r0, #10
 80180ee:	f007 fbd9 	bl	801f8a4 <putchar>
        phost->RequestState = CMD_SEND;
 80180f2:	2301      	movs	r3, #1
        status = USBH_FAIL;
 80180f4:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 80180f6:	70a3      	strb	r3, [r4, #2]
 80180f8:	e7c3      	b.n	8018082 <USBH_SetAddress+0x12>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80180fa:	7942      	ldrb	r2, [r0, #5]
 80180fc:	f100 0110 	add.w	r1, r0, #16
 8018100:	f000 fd64 	bl	8018bcc <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8018104:	2302      	movs	r3, #2
 8018106:	2001      	movs	r0, #1
 8018108:	7623      	strb	r3, [r4, #24]
 801810a:	e7ba      	b.n	8018082 <USBH_SetAddress+0x12>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801810c:	7941      	ldrb	r1, [r0, #5]
 801810e:	f7f4 f9e3 	bl	800c4d8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8018112:	2801      	cmp	r0, #1
 8018114:	f000 8095 	beq.w	8018242 <USBH_SetAddress+0x1d2>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8018118:	2804      	cmp	r0, #4
 801811a:	d001      	beq.n	8018120 <USBH_SetAddress+0xb0>
 801811c:	2802      	cmp	r0, #2
 801811e:	d1af      	bne.n	8018080 <USBH_SetAddress+0x10>
        phost->Control.state = CTRL_ERROR;
 8018120:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018122:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8018126:	2200      	movs	r2, #0
 8018128:	2103      	movs	r1, #3
        phost->Control.state = CTRL_ERROR;
 801812a:	7623      	strb	r3, [r4, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801812c:	f005 f99e 	bl	801d46c <osMessagePut>
 8018130:	2001      	movs	r0, #1
 8018132:	e7a6      	b.n	8018082 <USBH_SetAddress+0x12>
    phost->Control.timer = (uint16_t)phost->Timer;
 8018134:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
    USBH_CtlReceiveData(phost,
 8018138:	7903      	ldrb	r3, [r0, #4]
    phost->Control.timer = (uint16_t)phost->Timer;
 801813a:	81c2      	strh	r2, [r0, #14]
    USBH_CtlReceiveData(phost,
 801813c:	6881      	ldr	r1, [r0, #8]
 801813e:	8982      	ldrh	r2, [r0, #12]
 8018140:	f000 fd6c 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8018144:	2304      	movs	r3, #4
 8018146:	2001      	movs	r0, #1
 8018148:	7623      	strb	r3, [r4, #24]
 801814a:	e79a      	b.n	8018082 <USBH_SetAddress+0x12>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 801814c:	7901      	ldrb	r1, [r0, #4]
 801814e:	f7f4 f9c3 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8018152:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8018154:	4605      	mov	r5, r0
    if  (URB_Status == USBH_URB_DONE)
 8018156:	f000 8085 	beq.w	8018264 <USBH_SetAddress+0x1f4>
    if  (URB_Status == USBH_URB_STALL)
 801815a:	2805      	cmp	r0, #5
 801815c:	d057      	beq.n	801820e <USBH_SetAddress+0x19e>
      if (URB_Status == USBH_URB_ERROR)
 801815e:	2804      	cmp	r0, #4
 8018160:	d18e      	bne.n	8018080 <USBH_SetAddress+0x10>
 8018162:	e7dd      	b.n	8018120 <USBH_SetAddress+0xb0>
    USBH_CtlSendData (phost,
 8018164:	2501      	movs	r5, #1
 8018166:	7943      	ldrb	r3, [r0, #5]
 8018168:	8982      	ldrh	r2, [r0, #12]
 801816a:	6881      	ldr	r1, [r0, #8]
 801816c:	9500      	str	r5, [sp, #0]
 801816e:	f000 fd3d 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8018172:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8018176:	2306      	movs	r3, #6
 8018178:	4628      	mov	r0, r5
     phost->Control.timer = (uint16_t)phost->Timer;
 801817a:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 801817c:	7623      	strb	r3, [r4, #24]
 801817e:	e780      	b.n	8018082 <USBH_SetAddress+0x12>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8018180:	7941      	ldrb	r1, [r0, #5]
 8018182:	f7f4 f9a9 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8018186:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8018188:	4605      	mov	r5, r0
    if  (URB_Status == USBH_URB_DONE)
 801818a:	d075      	beq.n	8018278 <USBH_SetAddress+0x208>
    else if  (URB_Status == USBH_URB_STALL)
 801818c:	2805      	cmp	r0, #5
 801818e:	f000 8086 	beq.w	801829e <USBH_SetAddress+0x22e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8018192:	2802      	cmp	r0, #2
 8018194:	f000 8081 	beq.w	801829a <USBH_SetAddress+0x22a>
      if (URB_Status == USBH_URB_ERROR)
 8018198:	2804      	cmp	r0, #4
 801819a:	f47f af71 	bne.w	8018080 <USBH_SetAddress+0x10>
        phost->Control.state = CTRL_ERROR;
 801819e:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80181a0:	2200      	movs	r2, #0
 80181a2:	2103      	movs	r1, #3
 80181a4:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->Control.state = CTRL_ERROR;
 80181a8:	7623      	strb	r3, [r4, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80181aa:	f005 f95f 	bl	801d46c <osMessagePut>
 80181ae:	e7a0      	b.n	80180f2 <USBH_SetAddress+0x82>
    USBH_CtlReceiveData (phost,
 80181b0:	2200      	movs	r2, #0
 80181b2:	7903      	ldrb	r3, [r0, #4]
 80181b4:	4611      	mov	r1, r2
 80181b6:	f000 fd31 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 80181ba:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80181be:	2308      	movs	r3, #8
 80181c0:	2001      	movs	r0, #1
    phost->Control.timer = (uint16_t)phost->Timer;
 80181c2:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80181c4:	7623      	strb	r3, [r4, #24]
 80181c6:	e75c      	b.n	8018082 <USBH_SetAddress+0x12>
    USBH_CtlSendData (phost,
 80181c8:	2200      	movs	r2, #0
 80181ca:	2501      	movs	r5, #1
 80181cc:	7943      	ldrb	r3, [r0, #5]
 80181ce:	4611      	mov	r1, r2
 80181d0:	9500      	str	r5, [sp, #0]
 80181d2:	f000 fd0b 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80181d6:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80181da:	230a      	movs	r3, #10
 80181dc:	4628      	mov	r0, r5
     phost->Control.timer = (uint16_t)phost->Timer;
 80181de:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80181e0:	7623      	strb	r3, [r4, #24]
 80181e2:	e74e      	b.n	8018082 <USBH_SetAddress+0x12>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80181e4:	7941      	ldrb	r1, [r0, #5]
 80181e6:	f7f4 f977 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80181ea:	2801      	cmp	r0, #1
 80181ec:	d01b      	beq.n	8018226 <USBH_SetAddress+0x1b6>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80181ee:	2802      	cmp	r0, #2
 80181f0:	d051      	beq.n	8018296 <USBH_SetAddress+0x226>
      if (URB_Status == USBH_URB_ERROR)
 80181f2:	2804      	cmp	r0, #4
 80181f4:	f47f af44 	bne.w	8018080 <USBH_SetAddress+0x10>
 80181f8:	e792      	b.n	8018120 <USBH_SetAddress+0xb0>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80181fa:	7901      	ldrb	r1, [r0, #4]
 80181fc:	f7f4 f96c 	bl	800c4d8 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8018200:	2801      	cmp	r0, #1
 8018202:	d010      	beq.n	8018226 <USBH_SetAddress+0x1b6>
    else if (URB_Status == USBH_URB_ERROR)
 8018204:	2804      	cmp	r0, #4
 8018206:	d08b      	beq.n	8018120 <USBH_SetAddress+0xb0>
      if(URB_Status == USBH_URB_STALL)
 8018208:	2805      	cmp	r0, #5
 801820a:	f47f af39 	bne.w	8018080 <USBH_SetAddress+0x10>
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801820e:	2200      	movs	r2, #0
 8018210:	2103      	movs	r1, #3
 8018212:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8018216:	f005 f929 	bl	801d46c <osMessagePut>
      phost->RequestState = CMD_SEND;
 801821a:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 801821c:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 801821e:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 8018220:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8018222:	7623      	strb	r3, [r4, #24]
 8018224:	e72d      	b.n	8018082 <USBH_SetAddress+0x12>
      phost->Control.state = CTRL_COMPLETE;
 8018226:	230d      	movs	r3, #13
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018228:	2200      	movs	r2, #0
 801822a:	2103      	movs	r1, #3
 801822c:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_COMPLETE;
 8018230:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018232:	f005 f91b 	bl	801d46c <osMessagePut>
      phost->Control.state =CTRL_IDLE;
 8018236:	2300      	movs	r3, #0
      phost->RequestState = CMD_SEND;
 8018238:	2201      	movs	r2, #1
      status = USBH_OK;
 801823a:	4618      	mov	r0, r3
      phost->Control.state =CTRL_IDLE;
 801823c:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 801823e:	70a2      	strb	r2, [r4, #2]
 8018240:	e71f      	b.n	8018082 <USBH_SetAddress+0x12>
      if (phost->Control.setup.b.wLength.w != 0U)
 8018242:	8ae3      	ldrh	r3, [r4, #22]
 8018244:	f994 2010 	ldrsb.w	r2, [r4, #16]
 8018248:	b1c3      	cbz	r3, 801827c <USBH_SetAddress+0x20c>
        if (direction == USB_D2H)
 801824a:	2a00      	cmp	r2, #0
          phost->Control.state = CTRL_DATA_IN;
 801824c:	bfb4      	ite	lt
 801824e:	2303      	movlt	r3, #3
          phost->Control.state = CTRL_DATA_OUT;
 8018250:	2305      	movge	r3, #5
 8018252:	7623      	strb	r3, [r4, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018254:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8018258:	2200      	movs	r2, #0
 801825a:	2103      	movs	r1, #3
 801825c:	f005 f906 	bl	801d46c <osMessagePut>
 8018260:	2001      	movs	r0, #1
 8018262:	e70e      	b.n	8018082 <USBH_SetAddress+0x12>
      phost->Control.state = CTRL_STATUS_OUT;
 8018264:	2309      	movs	r3, #9
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018266:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 801826a:	2200      	movs	r2, #0
 801826c:	2103      	movs	r1, #3
      phost->Control.state = CTRL_STATUS_IN;
 801826e:	7623      	strb	r3, [r4, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018270:	f005 f8fc 	bl	801d46c <osMessagePut>
 8018274:	4628      	mov	r0, r5
 8018276:	e704      	b.n	8018082 <USBH_SetAddress+0x12>
      phost->Control.state = CTRL_STATUS_IN;
 8018278:	2307      	movs	r3, #7
 801827a:	e7f4      	b.n	8018266 <USBH_SetAddress+0x1f6>
        if (direction == USB_D2H)
 801827c:	2a00      	cmp	r2, #0
          phost->Control.state = CTRL_STATUS_OUT;
 801827e:	bfb4      	ite	lt
 8018280:	2309      	movlt	r3, #9
          phost->Control.state = CTRL_STATUS_IN;
 8018282:	2307      	movge	r3, #7
 8018284:	7623      	strb	r3, [r4, #24]
 8018286:	e7e5      	b.n	8018254 <USBH_SetAddress+0x1e4>
      USBH_LL_Stop(phost);
 8018288:	f7f4 f8b4 	bl	800c3f4 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 801828c:	2301      	movs	r3, #1
 801828e:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8018290:	4618      	mov	r0, r3
 8018292:	70a3      	strb	r3, [r4, #2]
 8018294:	e6f5      	b.n	8018082 <USBH_SetAddress+0x12>
      phost->Control.state = CTRL_STATUS_OUT;
 8018296:	2309      	movs	r3, #9
 8018298:	e743      	b.n	8018122 <USBH_SetAddress+0xb2>
      phost->Control.state = CTRL_DATA_OUT;
 801829a:	2305      	movs	r3, #5
 801829c:	e741      	b.n	8018122 <USBH_SetAddress+0xb2>
      phost->Control.state = CTRL_STALLED;
 801829e:	230c      	movs	r3, #12
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80182a0:	2200      	movs	r2, #0
 80182a2:	2103      	movs	r1, #3
 80182a4:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_STALLED;
 80182a8:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80182aa:	f005 f8df 	bl	801d46c <osMessagePut>
 80182ae:	e7b4      	b.n	801821a <USBH_SetAddress+0x1aa>
 80182b0:	08023f48 	.word	0x08023f48
 80182b4:	08025eac 	.word	0x08025eac

080182b8 <USBH_SetCfg>:
{
 80182b8:	b570      	push	{r4, r5, r6, lr}
  if(phost->RequestState == CMD_SEND)
 80182ba:	7885      	ldrb	r5, [r0, #2]
{
 80182bc:	b082      	sub	sp, #8
 80182be:	4604      	mov	r4, r0
  if(phost->RequestState == CMD_SEND)
 80182c0:	2d01      	cmp	r5, #1
 80182c2:	d010      	beq.n	80182e6 <USBH_SetCfg+0x2e>
  switch (phost->RequestState)
 80182c4:	2d02      	cmp	r5, #2
 80182c6:	d002      	beq.n	80182ce <USBH_SetCfg+0x16>
  status = USBH_BUSY;
 80182c8:	2001      	movs	r0, #1
}
 80182ca:	b002      	add	sp, #8
 80182cc:	bd70      	pop	{r4, r5, r6, pc}
  switch (phost->Control.state)
 80182ce:	7e03      	ldrb	r3, [r0, #24]
 80182d0:	3b01      	subs	r3, #1
 80182d2:	2b0a      	cmp	r3, #10
 80182d4:	d8f8      	bhi.n	80182c8 <USBH_SetCfg+0x10>
 80182d6:	e8df f003 	tbb	[pc, r3]
 80182da:	3d34      	.short	0x3d34
 80182dc:	77695d51 	.word	0x77695d51
 80182e0:	a99bb48f 	.word	0xa99bb48f
 80182e4:	1a          	.byte	0x1a
 80182e5:	00          	.byte	0x00
    phost->Control.setup.b.wIndex.w = 0U;
 80182e6:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80182e8:	f44f 6610 	mov.w	r6, #2304	; 0x900
    phost->RequestState = CMD_WAIT;
 80182ec:	2002      	movs	r0, #2
    phost->Control.setup.b.wValue.w = cfg_idx;
 80182ee:	8261      	strh	r1, [r4, #18]
    phost->Control.state = CTRL_SETUP;
 80182f0:	7625      	strb	r5, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80182f2:	461a      	mov	r2, r3
    phost->RequestState = CMD_WAIT;
 80182f4:	70a0      	strb	r0, [r4, #2]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80182f6:	2103      	movs	r1, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80182f8:	8226      	strh	r6, [r4, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 80182fa:	6163      	str	r3, [r4, #20]
    phost->Control.buff = buff;
 80182fc:	60a3      	str	r3, [r4, #8]
    phost->Control.length = length;
 80182fe:	81a3      	strh	r3, [r4, #12]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018300:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8018304:	f005 f8b2 	bl	801d46c <osMessagePut>
    status = USBH_BUSY;
 8018308:	4628      	mov	r0, r5
}
 801830a:	b002      	add	sp, #8
 801830c:	bd70      	pop	{r4, r5, r6, pc}
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801830e:	7e43      	ldrb	r3, [r0, #25]
 8018310:	3301      	adds	r3, #1
 8018312:	b2db      	uxtb	r3, r3
 8018314:	2b02      	cmp	r3, #2
 8018316:	7643      	strb	r3, [r0, #25]
 8018318:	f240 80da 	bls.w	80184d0 <USBH_SetCfg+0x218>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801831c:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8018320:	2106      	movs	r1, #6
 8018322:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8018324:	2300      	movs	r3, #0
      USBH_ErrLog("Control error");
 8018326:	4874      	ldr	r0, [pc, #464]	; (80184f8 <USBH_SetCfg+0x240>)
      phost->Control.errorcount = 0U;
 8018328:	7663      	strb	r3, [r4, #25]
      USBH_ErrLog("Control error");
 801832a:	f007 faa3 	bl	801f874 <iprintf>
 801832e:	4873      	ldr	r0, [pc, #460]	; (80184fc <USBH_SetCfg+0x244>)
 8018330:	f007 faa0 	bl	801f874 <iprintf>
 8018334:	200a      	movs	r0, #10
 8018336:	f007 fab5 	bl	801f8a4 <putchar>
        phost->RequestState = CMD_SEND;
 801833a:	2301      	movs	r3, #1
        status = USBH_FAIL;
 801833c:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 801833e:	70a3      	strb	r3, [r4, #2]
 8018340:	e7c3      	b.n	80182ca <USBH_SetCfg+0x12>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8018342:	7942      	ldrb	r2, [r0, #5]
 8018344:	f100 0110 	add.w	r1, r0, #16
 8018348:	f000 fc40 	bl	8018bcc <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 801834c:	2302      	movs	r3, #2
 801834e:	2001      	movs	r0, #1
 8018350:	7623      	strb	r3, [r4, #24]
 8018352:	e7ba      	b.n	80182ca <USBH_SetCfg+0x12>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8018354:	7941      	ldrb	r1, [r0, #5]
 8018356:	f7f4 f8bf 	bl	800c4d8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 801835a:	2801      	cmp	r0, #1
 801835c:	f000 8095 	beq.w	801848a <USBH_SetCfg+0x1d2>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8018360:	2804      	cmp	r0, #4
 8018362:	d001      	beq.n	8018368 <USBH_SetCfg+0xb0>
 8018364:	2802      	cmp	r0, #2
 8018366:	d1af      	bne.n	80182c8 <USBH_SetCfg+0x10>
        phost->Control.state = CTRL_ERROR;
 8018368:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801836a:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 801836e:	2200      	movs	r2, #0
 8018370:	2103      	movs	r1, #3
        phost->Control.state = CTRL_ERROR;
 8018372:	7623      	strb	r3, [r4, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018374:	f005 f87a 	bl	801d46c <osMessagePut>
 8018378:	2001      	movs	r0, #1
 801837a:	e7a6      	b.n	80182ca <USBH_SetCfg+0x12>
    phost->Control.timer = (uint16_t)phost->Timer;
 801837c:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
    USBH_CtlReceiveData(phost,
 8018380:	7903      	ldrb	r3, [r0, #4]
    phost->Control.timer = (uint16_t)phost->Timer;
 8018382:	81c2      	strh	r2, [r0, #14]
    USBH_CtlReceiveData(phost,
 8018384:	6881      	ldr	r1, [r0, #8]
 8018386:	8982      	ldrh	r2, [r0, #12]
 8018388:	f000 fc48 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 801838c:	2304      	movs	r3, #4
 801838e:	2001      	movs	r0, #1
 8018390:	7623      	strb	r3, [r4, #24]
 8018392:	e79a      	b.n	80182ca <USBH_SetCfg+0x12>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8018394:	7901      	ldrb	r1, [r0, #4]
 8018396:	f7f4 f89f 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 801839a:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 801839c:	4605      	mov	r5, r0
    if  (URB_Status == USBH_URB_DONE)
 801839e:	f000 8085 	beq.w	80184ac <USBH_SetCfg+0x1f4>
    if  (URB_Status == USBH_URB_STALL)
 80183a2:	2805      	cmp	r0, #5
 80183a4:	d057      	beq.n	8018456 <USBH_SetCfg+0x19e>
      if (URB_Status == USBH_URB_ERROR)
 80183a6:	2804      	cmp	r0, #4
 80183a8:	d18e      	bne.n	80182c8 <USBH_SetCfg+0x10>
 80183aa:	e7dd      	b.n	8018368 <USBH_SetCfg+0xb0>
    USBH_CtlSendData (phost,
 80183ac:	2501      	movs	r5, #1
 80183ae:	7943      	ldrb	r3, [r0, #5]
 80183b0:	8982      	ldrh	r2, [r0, #12]
 80183b2:	6881      	ldr	r1, [r0, #8]
 80183b4:	9500      	str	r5, [sp, #0]
 80183b6:	f000 fc19 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80183ba:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80183be:	2306      	movs	r3, #6
 80183c0:	4628      	mov	r0, r5
     phost->Control.timer = (uint16_t)phost->Timer;
 80183c2:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80183c4:	7623      	strb	r3, [r4, #24]
 80183c6:	e780      	b.n	80182ca <USBH_SetCfg+0x12>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80183c8:	7941      	ldrb	r1, [r0, #5]
 80183ca:	f7f4 f885 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80183ce:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80183d0:	4605      	mov	r5, r0
    if  (URB_Status == USBH_URB_DONE)
 80183d2:	d075      	beq.n	80184c0 <USBH_SetCfg+0x208>
    else if  (URB_Status == USBH_URB_STALL)
 80183d4:	2805      	cmp	r0, #5
 80183d6:	f000 8086 	beq.w	80184e6 <USBH_SetCfg+0x22e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80183da:	2802      	cmp	r0, #2
 80183dc:	f000 8081 	beq.w	80184e2 <USBH_SetCfg+0x22a>
      if (URB_Status == USBH_URB_ERROR)
 80183e0:	2804      	cmp	r0, #4
 80183e2:	f47f af71 	bne.w	80182c8 <USBH_SetCfg+0x10>
        phost->Control.state = CTRL_ERROR;
 80183e6:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80183e8:	2200      	movs	r2, #0
 80183ea:	2103      	movs	r1, #3
 80183ec:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->Control.state = CTRL_ERROR;
 80183f0:	7623      	strb	r3, [r4, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80183f2:	f005 f83b 	bl	801d46c <osMessagePut>
 80183f6:	e7a0      	b.n	801833a <USBH_SetCfg+0x82>
    USBH_CtlReceiveData (phost,
 80183f8:	2200      	movs	r2, #0
 80183fa:	7903      	ldrb	r3, [r0, #4]
 80183fc:	4611      	mov	r1, r2
 80183fe:	f000 fc0d 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8018402:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8018406:	2308      	movs	r3, #8
 8018408:	2001      	movs	r0, #1
    phost->Control.timer = (uint16_t)phost->Timer;
 801840a:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 801840c:	7623      	strb	r3, [r4, #24]
 801840e:	e75c      	b.n	80182ca <USBH_SetCfg+0x12>
    USBH_CtlSendData (phost,
 8018410:	2200      	movs	r2, #0
 8018412:	2501      	movs	r5, #1
 8018414:	7943      	ldrb	r3, [r0, #5]
 8018416:	4611      	mov	r1, r2
 8018418:	9500      	str	r5, [sp, #0]
 801841a:	f000 fbe7 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 801841e:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8018422:	230a      	movs	r3, #10
 8018424:	4628      	mov	r0, r5
     phost->Control.timer = (uint16_t)phost->Timer;
 8018426:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8018428:	7623      	strb	r3, [r4, #24]
 801842a:	e74e      	b.n	80182ca <USBH_SetCfg+0x12>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 801842c:	7941      	ldrb	r1, [r0, #5]
 801842e:	f7f4 f853 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8018432:	2801      	cmp	r0, #1
 8018434:	d01b      	beq.n	801846e <USBH_SetCfg+0x1b6>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8018436:	2802      	cmp	r0, #2
 8018438:	d051      	beq.n	80184de <USBH_SetCfg+0x226>
      if (URB_Status == USBH_URB_ERROR)
 801843a:	2804      	cmp	r0, #4
 801843c:	f47f af44 	bne.w	80182c8 <USBH_SetCfg+0x10>
 8018440:	e792      	b.n	8018368 <USBH_SetCfg+0xb0>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8018442:	7901      	ldrb	r1, [r0, #4]
 8018444:	f7f4 f848 	bl	800c4d8 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8018448:	2801      	cmp	r0, #1
 801844a:	d010      	beq.n	801846e <USBH_SetCfg+0x1b6>
    else if (URB_Status == USBH_URB_ERROR)
 801844c:	2804      	cmp	r0, #4
 801844e:	d08b      	beq.n	8018368 <USBH_SetCfg+0xb0>
      if(URB_Status == USBH_URB_STALL)
 8018450:	2805      	cmp	r0, #5
 8018452:	f47f af39 	bne.w	80182c8 <USBH_SetCfg+0x10>
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018456:	2200      	movs	r2, #0
 8018458:	2103      	movs	r1, #3
 801845a:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 801845e:	f005 f805 	bl	801d46c <osMessagePut>
      phost->RequestState = CMD_SEND;
 8018462:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 8018464:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 8018466:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 8018468:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 801846a:	7623      	strb	r3, [r4, #24]
 801846c:	e72d      	b.n	80182ca <USBH_SetCfg+0x12>
      phost->Control.state = CTRL_COMPLETE;
 801846e:	230d      	movs	r3, #13
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018470:	2200      	movs	r2, #0
 8018472:	2103      	movs	r1, #3
 8018474:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_COMPLETE;
 8018478:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801847a:	f004 fff7 	bl	801d46c <osMessagePut>
      phost->Control.state =CTRL_IDLE;
 801847e:	2300      	movs	r3, #0
      phost->RequestState = CMD_SEND;
 8018480:	2201      	movs	r2, #1
      status = USBH_OK;
 8018482:	4618      	mov	r0, r3
      phost->Control.state =CTRL_IDLE;
 8018484:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8018486:	70a2      	strb	r2, [r4, #2]
 8018488:	e71f      	b.n	80182ca <USBH_SetCfg+0x12>
      if (phost->Control.setup.b.wLength.w != 0U)
 801848a:	8ae3      	ldrh	r3, [r4, #22]
 801848c:	f994 2010 	ldrsb.w	r2, [r4, #16]
 8018490:	b1c3      	cbz	r3, 80184c4 <USBH_SetCfg+0x20c>
        if (direction == USB_D2H)
 8018492:	2a00      	cmp	r2, #0
          phost->Control.state = CTRL_DATA_IN;
 8018494:	bfb4      	ite	lt
 8018496:	2303      	movlt	r3, #3
          phost->Control.state = CTRL_DATA_OUT;
 8018498:	2305      	movge	r3, #5
 801849a:	7623      	strb	r3, [r4, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801849c:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80184a0:	2200      	movs	r2, #0
 80184a2:	2103      	movs	r1, #3
 80184a4:	f004 ffe2 	bl	801d46c <osMessagePut>
 80184a8:	2001      	movs	r0, #1
 80184aa:	e70e      	b.n	80182ca <USBH_SetCfg+0x12>
      phost->Control.state = CTRL_STATUS_OUT;
 80184ac:	2309      	movs	r3, #9
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80184ae:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80184b2:	2200      	movs	r2, #0
 80184b4:	2103      	movs	r1, #3
      phost->Control.state = CTRL_STATUS_IN;
 80184b6:	7623      	strb	r3, [r4, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80184b8:	f004 ffd8 	bl	801d46c <osMessagePut>
 80184bc:	4628      	mov	r0, r5
 80184be:	e704      	b.n	80182ca <USBH_SetCfg+0x12>
      phost->Control.state = CTRL_STATUS_IN;
 80184c0:	2307      	movs	r3, #7
 80184c2:	e7f4      	b.n	80184ae <USBH_SetCfg+0x1f6>
        if (direction == USB_D2H)
 80184c4:	2a00      	cmp	r2, #0
          phost->Control.state = CTRL_STATUS_OUT;
 80184c6:	bfb4      	ite	lt
 80184c8:	2309      	movlt	r3, #9
          phost->Control.state = CTRL_STATUS_IN;
 80184ca:	2307      	movge	r3, #7
 80184cc:	7623      	strb	r3, [r4, #24]
 80184ce:	e7e5      	b.n	801849c <USBH_SetCfg+0x1e4>
      USBH_LL_Stop(phost);
 80184d0:	f7f3 ff90 	bl	800c3f4 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 80184d4:	2301      	movs	r3, #1
 80184d6:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 80184d8:	4618      	mov	r0, r3
 80184da:	70a3      	strb	r3, [r4, #2]
 80184dc:	e6f5      	b.n	80182ca <USBH_SetCfg+0x12>
      phost->Control.state = CTRL_STATUS_OUT;
 80184de:	2309      	movs	r3, #9
 80184e0:	e743      	b.n	801836a <USBH_SetCfg+0xb2>
      phost->Control.state = CTRL_DATA_OUT;
 80184e2:	2305      	movs	r3, #5
 80184e4:	e741      	b.n	801836a <USBH_SetCfg+0xb2>
      phost->Control.state = CTRL_STALLED;
 80184e6:	230c      	movs	r3, #12
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80184e8:	2200      	movs	r2, #0
 80184ea:	2103      	movs	r1, #3
 80184ec:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_STALLED;
 80184f0:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80184f2:	f004 ffbb 	bl	801d46c <osMessagePut>
 80184f6:	e7b4      	b.n	8018462 <USBH_SetCfg+0x1aa>
 80184f8:	08023f48 	.word	0x08023f48
 80184fc:	08025eac 	.word	0x08025eac

08018500 <USBH_SetFeature>:
{
 8018500:	b570      	push	{r4, r5, r6, lr}
  if(phost->RequestState == CMD_SEND)
 8018502:	7885      	ldrb	r5, [r0, #2]
{
 8018504:	b082      	sub	sp, #8
 8018506:	4604      	mov	r4, r0
  if(phost->RequestState == CMD_SEND)
 8018508:	2d01      	cmp	r5, #1
 801850a:	d010      	beq.n	801852e <USBH_SetFeature+0x2e>
  switch (phost->RequestState)
 801850c:	2d02      	cmp	r5, #2
 801850e:	d002      	beq.n	8018516 <USBH_SetFeature+0x16>
  status = USBH_BUSY;
 8018510:	2001      	movs	r0, #1
}
 8018512:	b002      	add	sp, #8
 8018514:	bd70      	pop	{r4, r5, r6, pc}
  switch (phost->Control.state)
 8018516:	7e03      	ldrb	r3, [r0, #24]
 8018518:	3b01      	subs	r3, #1
 801851a:	2b0a      	cmp	r3, #10
 801851c:	d8f8      	bhi.n	8018510 <USBH_SetFeature+0x10>
 801851e:	e8df f003 	tbb	[pc, r3]
 8018522:	3d34      	.short	0x3d34
 8018524:	77695d51 	.word	0x77695d51
 8018528:	a99bb48f 	.word	0xa99bb48f
 801852c:	1a          	.byte	0x1a
 801852d:	00          	.byte	0x00
    phost->Control.setup.b.wIndex.w = 0U;
 801852e:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8018530:	f44f 7640 	mov.w	r6, #768	; 0x300
    phost->RequestState = CMD_WAIT;
 8018534:	2002      	movs	r0, #2
    phost->Control.setup.b.wValue.w = wValue;
 8018536:	8261      	strh	r1, [r4, #18]
    phost->Control.state = CTRL_SETUP;
 8018538:	7625      	strb	r5, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801853a:	461a      	mov	r2, r3
    phost->RequestState = CMD_WAIT;
 801853c:	70a0      	strb	r0, [r4, #2]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801853e:	2103      	movs	r1, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8018540:	8226      	strh	r6, [r4, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8018542:	6163      	str	r3, [r4, #20]
    phost->Control.buff = buff;
 8018544:	60a3      	str	r3, [r4, #8]
    phost->Control.length = length;
 8018546:	81a3      	strh	r3, [r4, #12]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018548:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 801854c:	f004 ff8e 	bl	801d46c <osMessagePut>
    status = USBH_BUSY;
 8018550:	4628      	mov	r0, r5
}
 8018552:	b002      	add	sp, #8
 8018554:	bd70      	pop	{r4, r5, r6, pc}
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8018556:	7e43      	ldrb	r3, [r0, #25]
 8018558:	3301      	adds	r3, #1
 801855a:	b2db      	uxtb	r3, r3
 801855c:	2b02      	cmp	r3, #2
 801855e:	7643      	strb	r3, [r0, #25]
 8018560:	f240 80da 	bls.w	8018718 <USBH_SetFeature+0x218>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8018564:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8018568:	2106      	movs	r1, #6
 801856a:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 801856c:	2300      	movs	r3, #0
      USBH_ErrLog("Control error");
 801856e:	4874      	ldr	r0, [pc, #464]	; (8018740 <USBH_SetFeature+0x240>)
      phost->Control.errorcount = 0U;
 8018570:	7663      	strb	r3, [r4, #25]
      USBH_ErrLog("Control error");
 8018572:	f007 f97f 	bl	801f874 <iprintf>
 8018576:	4873      	ldr	r0, [pc, #460]	; (8018744 <USBH_SetFeature+0x244>)
 8018578:	f007 f97c 	bl	801f874 <iprintf>
 801857c:	200a      	movs	r0, #10
 801857e:	f007 f991 	bl	801f8a4 <putchar>
        phost->RequestState = CMD_SEND;
 8018582:	2301      	movs	r3, #1
        status = USBH_FAIL;
 8018584:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 8018586:	70a3      	strb	r3, [r4, #2]
 8018588:	e7c3      	b.n	8018512 <USBH_SetFeature+0x12>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801858a:	7942      	ldrb	r2, [r0, #5]
 801858c:	f100 0110 	add.w	r1, r0, #16
 8018590:	f000 fb1c 	bl	8018bcc <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8018594:	2302      	movs	r3, #2
 8018596:	2001      	movs	r0, #1
 8018598:	7623      	strb	r3, [r4, #24]
 801859a:	e7ba      	b.n	8018512 <USBH_SetFeature+0x12>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801859c:	7941      	ldrb	r1, [r0, #5]
 801859e:	f7f3 ff9b 	bl	800c4d8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80185a2:	2801      	cmp	r0, #1
 80185a4:	f000 8095 	beq.w	80186d2 <USBH_SetFeature+0x1d2>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80185a8:	2804      	cmp	r0, #4
 80185aa:	d001      	beq.n	80185b0 <USBH_SetFeature+0xb0>
 80185ac:	2802      	cmp	r0, #2
 80185ae:	d1af      	bne.n	8018510 <USBH_SetFeature+0x10>
        phost->Control.state = CTRL_ERROR;
 80185b0:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80185b2:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80185b6:	2200      	movs	r2, #0
 80185b8:	2103      	movs	r1, #3
        phost->Control.state = CTRL_ERROR;
 80185ba:	7623      	strb	r3, [r4, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80185bc:	f004 ff56 	bl	801d46c <osMessagePut>
 80185c0:	2001      	movs	r0, #1
 80185c2:	e7a6      	b.n	8018512 <USBH_SetFeature+0x12>
    phost->Control.timer = (uint16_t)phost->Timer;
 80185c4:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
    USBH_CtlReceiveData(phost,
 80185c8:	7903      	ldrb	r3, [r0, #4]
    phost->Control.timer = (uint16_t)phost->Timer;
 80185ca:	81c2      	strh	r2, [r0, #14]
    USBH_CtlReceiveData(phost,
 80185cc:	6881      	ldr	r1, [r0, #8]
 80185ce:	8982      	ldrh	r2, [r0, #12]
 80185d0:	f000 fb24 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80185d4:	2304      	movs	r3, #4
 80185d6:	2001      	movs	r0, #1
 80185d8:	7623      	strb	r3, [r4, #24]
 80185da:	e79a      	b.n	8018512 <USBH_SetFeature+0x12>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80185dc:	7901      	ldrb	r1, [r0, #4]
 80185de:	f7f3 ff7b 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80185e2:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80185e4:	4605      	mov	r5, r0
    if  (URB_Status == USBH_URB_DONE)
 80185e6:	f000 8085 	beq.w	80186f4 <USBH_SetFeature+0x1f4>
    if  (URB_Status == USBH_URB_STALL)
 80185ea:	2805      	cmp	r0, #5
 80185ec:	d057      	beq.n	801869e <USBH_SetFeature+0x19e>
      if (URB_Status == USBH_URB_ERROR)
 80185ee:	2804      	cmp	r0, #4
 80185f0:	d18e      	bne.n	8018510 <USBH_SetFeature+0x10>
 80185f2:	e7dd      	b.n	80185b0 <USBH_SetFeature+0xb0>
    USBH_CtlSendData (phost,
 80185f4:	2501      	movs	r5, #1
 80185f6:	7943      	ldrb	r3, [r0, #5]
 80185f8:	8982      	ldrh	r2, [r0, #12]
 80185fa:	6881      	ldr	r1, [r0, #8]
 80185fc:	9500      	str	r5, [sp, #0]
 80185fe:	f000 faf5 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8018602:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8018606:	2306      	movs	r3, #6
 8018608:	4628      	mov	r0, r5
     phost->Control.timer = (uint16_t)phost->Timer;
 801860a:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 801860c:	7623      	strb	r3, [r4, #24]
 801860e:	e780      	b.n	8018512 <USBH_SetFeature+0x12>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8018610:	7941      	ldrb	r1, [r0, #5]
 8018612:	f7f3 ff61 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8018616:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8018618:	4605      	mov	r5, r0
    if  (URB_Status == USBH_URB_DONE)
 801861a:	d075      	beq.n	8018708 <USBH_SetFeature+0x208>
    else if  (URB_Status == USBH_URB_STALL)
 801861c:	2805      	cmp	r0, #5
 801861e:	f000 8086 	beq.w	801872e <USBH_SetFeature+0x22e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8018622:	2802      	cmp	r0, #2
 8018624:	f000 8081 	beq.w	801872a <USBH_SetFeature+0x22a>
      if (URB_Status == USBH_URB_ERROR)
 8018628:	2804      	cmp	r0, #4
 801862a:	f47f af71 	bne.w	8018510 <USBH_SetFeature+0x10>
        phost->Control.state = CTRL_ERROR;
 801862e:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018630:	2200      	movs	r2, #0
 8018632:	2103      	movs	r1, #3
 8018634:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->Control.state = CTRL_ERROR;
 8018638:	7623      	strb	r3, [r4, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801863a:	f004 ff17 	bl	801d46c <osMessagePut>
 801863e:	e7a0      	b.n	8018582 <USBH_SetFeature+0x82>
    USBH_CtlReceiveData (phost,
 8018640:	2200      	movs	r2, #0
 8018642:	7903      	ldrb	r3, [r0, #4]
 8018644:	4611      	mov	r1, r2
 8018646:	f000 fae9 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 801864a:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 801864e:	2308      	movs	r3, #8
 8018650:	2001      	movs	r0, #1
    phost->Control.timer = (uint16_t)phost->Timer;
 8018652:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8018654:	7623      	strb	r3, [r4, #24]
 8018656:	e75c      	b.n	8018512 <USBH_SetFeature+0x12>
    USBH_CtlSendData (phost,
 8018658:	2200      	movs	r2, #0
 801865a:	2501      	movs	r5, #1
 801865c:	7943      	ldrb	r3, [r0, #5]
 801865e:	4611      	mov	r1, r2
 8018660:	9500      	str	r5, [sp, #0]
 8018662:	f000 fac3 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8018666:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801866a:	230a      	movs	r3, #10
 801866c:	4628      	mov	r0, r5
     phost->Control.timer = (uint16_t)phost->Timer;
 801866e:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8018670:	7623      	strb	r3, [r4, #24]
 8018672:	e74e      	b.n	8018512 <USBH_SetFeature+0x12>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8018674:	7941      	ldrb	r1, [r0, #5]
 8018676:	f7f3 ff2f 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 801867a:	2801      	cmp	r0, #1
 801867c:	d01b      	beq.n	80186b6 <USBH_SetFeature+0x1b6>
    else if  (URB_Status == USBH_URB_NOTREADY)
 801867e:	2802      	cmp	r0, #2
 8018680:	d051      	beq.n	8018726 <USBH_SetFeature+0x226>
      if (URB_Status == USBH_URB_ERROR)
 8018682:	2804      	cmp	r0, #4
 8018684:	f47f af44 	bne.w	8018510 <USBH_SetFeature+0x10>
 8018688:	e792      	b.n	80185b0 <USBH_SetFeature+0xb0>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 801868a:	7901      	ldrb	r1, [r0, #4]
 801868c:	f7f3 ff24 	bl	800c4d8 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8018690:	2801      	cmp	r0, #1
 8018692:	d010      	beq.n	80186b6 <USBH_SetFeature+0x1b6>
    else if (URB_Status == USBH_URB_ERROR)
 8018694:	2804      	cmp	r0, #4
 8018696:	d08b      	beq.n	80185b0 <USBH_SetFeature+0xb0>
      if(URB_Status == USBH_URB_STALL)
 8018698:	2805      	cmp	r0, #5
 801869a:	f47f af39 	bne.w	8018510 <USBH_SetFeature+0x10>
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801869e:	2200      	movs	r2, #0
 80186a0:	2103      	movs	r1, #3
 80186a2:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80186a6:	f004 fee1 	bl	801d46c <osMessagePut>
      phost->RequestState = CMD_SEND;
 80186aa:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 80186ac:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 80186ae:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 80186b0:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 80186b2:	7623      	strb	r3, [r4, #24]
 80186b4:	e72d      	b.n	8018512 <USBH_SetFeature+0x12>
      phost->Control.state = CTRL_COMPLETE;
 80186b6:	230d      	movs	r3, #13
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80186b8:	2200      	movs	r2, #0
 80186ba:	2103      	movs	r1, #3
 80186bc:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_COMPLETE;
 80186c0:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80186c2:	f004 fed3 	bl	801d46c <osMessagePut>
      phost->Control.state =CTRL_IDLE;
 80186c6:	2300      	movs	r3, #0
      phost->RequestState = CMD_SEND;
 80186c8:	2201      	movs	r2, #1
      status = USBH_OK;
 80186ca:	4618      	mov	r0, r3
      phost->Control.state =CTRL_IDLE;
 80186cc:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 80186ce:	70a2      	strb	r2, [r4, #2]
 80186d0:	e71f      	b.n	8018512 <USBH_SetFeature+0x12>
      if (phost->Control.setup.b.wLength.w != 0U)
 80186d2:	8ae3      	ldrh	r3, [r4, #22]
 80186d4:	f994 2010 	ldrsb.w	r2, [r4, #16]
 80186d8:	b1c3      	cbz	r3, 801870c <USBH_SetFeature+0x20c>
        if (direction == USB_D2H)
 80186da:	2a00      	cmp	r2, #0
          phost->Control.state = CTRL_DATA_IN;
 80186dc:	bfb4      	ite	lt
 80186de:	2303      	movlt	r3, #3
          phost->Control.state = CTRL_DATA_OUT;
 80186e0:	2305      	movge	r3, #5
 80186e2:	7623      	strb	r3, [r4, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80186e4:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80186e8:	2200      	movs	r2, #0
 80186ea:	2103      	movs	r1, #3
 80186ec:	f004 febe 	bl	801d46c <osMessagePut>
 80186f0:	2001      	movs	r0, #1
 80186f2:	e70e      	b.n	8018512 <USBH_SetFeature+0x12>
      phost->Control.state = CTRL_STATUS_OUT;
 80186f4:	2309      	movs	r3, #9
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80186f6:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80186fa:	2200      	movs	r2, #0
 80186fc:	2103      	movs	r1, #3
      phost->Control.state = CTRL_STATUS_IN;
 80186fe:	7623      	strb	r3, [r4, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018700:	f004 feb4 	bl	801d46c <osMessagePut>
 8018704:	4628      	mov	r0, r5
 8018706:	e704      	b.n	8018512 <USBH_SetFeature+0x12>
      phost->Control.state = CTRL_STATUS_IN;
 8018708:	2307      	movs	r3, #7
 801870a:	e7f4      	b.n	80186f6 <USBH_SetFeature+0x1f6>
        if (direction == USB_D2H)
 801870c:	2a00      	cmp	r2, #0
          phost->Control.state = CTRL_STATUS_OUT;
 801870e:	bfb4      	ite	lt
 8018710:	2309      	movlt	r3, #9
          phost->Control.state = CTRL_STATUS_IN;
 8018712:	2307      	movge	r3, #7
 8018714:	7623      	strb	r3, [r4, #24]
 8018716:	e7e5      	b.n	80186e4 <USBH_SetFeature+0x1e4>
      USBH_LL_Stop(phost);
 8018718:	f7f3 fe6c 	bl	800c3f4 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 801871c:	2301      	movs	r3, #1
 801871e:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8018720:	4618      	mov	r0, r3
 8018722:	70a3      	strb	r3, [r4, #2]
 8018724:	e6f5      	b.n	8018512 <USBH_SetFeature+0x12>
      phost->Control.state = CTRL_STATUS_OUT;
 8018726:	2309      	movs	r3, #9
 8018728:	e743      	b.n	80185b2 <USBH_SetFeature+0xb2>
      phost->Control.state = CTRL_DATA_OUT;
 801872a:	2305      	movs	r3, #5
 801872c:	e741      	b.n	80185b2 <USBH_SetFeature+0xb2>
      phost->Control.state = CTRL_STALLED;
 801872e:	230c      	movs	r3, #12
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018730:	2200      	movs	r2, #0
 8018732:	2103      	movs	r1, #3
 8018734:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_STALLED;
 8018738:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801873a:	f004 fe97 	bl	801d46c <osMessagePut>
 801873e:	e7b4      	b.n	80186aa <USBH_SetFeature+0x1aa>
 8018740:	08023f48 	.word	0x08023f48
 8018744:	08025eac 	.word	0x08025eac

08018748 <USBH_ClrFeature>:
{
 8018748:	b570      	push	{r4, r5, r6, lr}
  if(phost->RequestState == CMD_SEND)
 801874a:	7885      	ldrb	r5, [r0, #2]
{
 801874c:	b082      	sub	sp, #8
 801874e:	4604      	mov	r4, r0
  if(phost->RequestState == CMD_SEND)
 8018750:	2d01      	cmp	r5, #1
 8018752:	d010      	beq.n	8018776 <USBH_ClrFeature+0x2e>
  switch (phost->RequestState)
 8018754:	2d02      	cmp	r5, #2
 8018756:	d002      	beq.n	801875e <USBH_ClrFeature+0x16>
  status = USBH_BUSY;
 8018758:	2001      	movs	r0, #1
}
 801875a:	b002      	add	sp, #8
 801875c:	bd70      	pop	{r4, r5, r6, pc}
  switch (phost->Control.state)
 801875e:	7e03      	ldrb	r3, [r0, #24]
 8018760:	3b01      	subs	r3, #1
 8018762:	2b0a      	cmp	r3, #10
 8018764:	d8f8      	bhi.n	8018758 <USBH_ClrFeature+0x10>
 8018766:	e8df f003 	tbb	[pc, r3]
 801876a:	3d34      	.short	0x3d34
 801876c:	77695d51 	.word	0x77695d51
 8018770:	a99bb48f 	.word	0xa99bb48f
 8018774:	1a          	.byte	0x1a
 8018775:	00          	.byte	0x00
    phost->Control.setup.b.wLength.w = 0U;
 8018776:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8018778:	f44f 7681 	mov.w	r6, #258	; 0x102
    phost->RequestState = CMD_WAIT;
 801877c:	2002      	movs	r0, #2
    phost->Control.setup.b.wIndex.w = ep_num;
 801877e:	82a1      	strh	r1, [r4, #20]
    phost->Control.state = CTRL_SETUP;
 8018780:	7625      	strb	r5, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018782:	461a      	mov	r2, r3
    phost->RequestState = CMD_WAIT;
 8018784:	70a0      	strb	r0, [r4, #2]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018786:	2103      	movs	r1, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8018788:	6126      	str	r6, [r4, #16]
    phost->Control.setup.b.wLength.w = 0U;
 801878a:	82e3      	strh	r3, [r4, #22]
    phost->Control.buff = buff;
 801878c:	60a3      	str	r3, [r4, #8]
    phost->Control.length = length;
 801878e:	81a3      	strh	r3, [r4, #12]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018790:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8018794:	f004 fe6a 	bl	801d46c <osMessagePut>
    status = USBH_BUSY;
 8018798:	4628      	mov	r0, r5
}
 801879a:	b002      	add	sp, #8
 801879c:	bd70      	pop	{r4, r5, r6, pc}
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801879e:	7e43      	ldrb	r3, [r0, #25]
 80187a0:	3301      	adds	r3, #1
 80187a2:	b2db      	uxtb	r3, r3
 80187a4:	2b02      	cmp	r3, #2
 80187a6:	7643      	strb	r3, [r0, #25]
 80187a8:	f240 80da 	bls.w	8018960 <USBH_ClrFeature+0x218>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80187ac:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 80187b0:	2106      	movs	r1, #6
 80187b2:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80187b4:	2300      	movs	r3, #0
      USBH_ErrLog("Control error");
 80187b6:	4874      	ldr	r0, [pc, #464]	; (8018988 <USBH_ClrFeature+0x240>)
      phost->Control.errorcount = 0U;
 80187b8:	7663      	strb	r3, [r4, #25]
      USBH_ErrLog("Control error");
 80187ba:	f007 f85b 	bl	801f874 <iprintf>
 80187be:	4873      	ldr	r0, [pc, #460]	; (801898c <USBH_ClrFeature+0x244>)
 80187c0:	f007 f858 	bl	801f874 <iprintf>
 80187c4:	200a      	movs	r0, #10
 80187c6:	f007 f86d 	bl	801f8a4 <putchar>
        phost->RequestState = CMD_SEND;
 80187ca:	2301      	movs	r3, #1
        status = USBH_FAIL;
 80187cc:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 80187ce:	70a3      	strb	r3, [r4, #2]
 80187d0:	e7c3      	b.n	801875a <USBH_ClrFeature+0x12>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80187d2:	7942      	ldrb	r2, [r0, #5]
 80187d4:	f100 0110 	add.w	r1, r0, #16
 80187d8:	f000 f9f8 	bl	8018bcc <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 80187dc:	2302      	movs	r3, #2
 80187de:	2001      	movs	r0, #1
 80187e0:	7623      	strb	r3, [r4, #24]
 80187e2:	e7ba      	b.n	801875a <USBH_ClrFeature+0x12>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80187e4:	7941      	ldrb	r1, [r0, #5]
 80187e6:	f7f3 fe77 	bl	800c4d8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80187ea:	2801      	cmp	r0, #1
 80187ec:	f000 8095 	beq.w	801891a <USBH_ClrFeature+0x1d2>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80187f0:	2804      	cmp	r0, #4
 80187f2:	d001      	beq.n	80187f8 <USBH_ClrFeature+0xb0>
 80187f4:	2802      	cmp	r0, #2
 80187f6:	d1af      	bne.n	8018758 <USBH_ClrFeature+0x10>
        phost->Control.state = CTRL_ERROR;
 80187f8:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80187fa:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80187fe:	2200      	movs	r2, #0
 8018800:	2103      	movs	r1, #3
        phost->Control.state = CTRL_ERROR;
 8018802:	7623      	strb	r3, [r4, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018804:	f004 fe32 	bl	801d46c <osMessagePut>
 8018808:	2001      	movs	r0, #1
 801880a:	e7a6      	b.n	801875a <USBH_ClrFeature+0x12>
    phost->Control.timer = (uint16_t)phost->Timer;
 801880c:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
    USBH_CtlReceiveData(phost,
 8018810:	7903      	ldrb	r3, [r0, #4]
    phost->Control.timer = (uint16_t)phost->Timer;
 8018812:	81c2      	strh	r2, [r0, #14]
    USBH_CtlReceiveData(phost,
 8018814:	6881      	ldr	r1, [r0, #8]
 8018816:	8982      	ldrh	r2, [r0, #12]
 8018818:	f000 fa00 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 801881c:	2304      	movs	r3, #4
 801881e:	2001      	movs	r0, #1
 8018820:	7623      	strb	r3, [r4, #24]
 8018822:	e79a      	b.n	801875a <USBH_ClrFeature+0x12>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8018824:	7901      	ldrb	r1, [r0, #4]
 8018826:	f7f3 fe57 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 801882a:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 801882c:	4605      	mov	r5, r0
    if  (URB_Status == USBH_URB_DONE)
 801882e:	f000 8085 	beq.w	801893c <USBH_ClrFeature+0x1f4>
    if  (URB_Status == USBH_URB_STALL)
 8018832:	2805      	cmp	r0, #5
 8018834:	d057      	beq.n	80188e6 <USBH_ClrFeature+0x19e>
      if (URB_Status == USBH_URB_ERROR)
 8018836:	2804      	cmp	r0, #4
 8018838:	d18e      	bne.n	8018758 <USBH_ClrFeature+0x10>
 801883a:	e7dd      	b.n	80187f8 <USBH_ClrFeature+0xb0>
    USBH_CtlSendData (phost,
 801883c:	2501      	movs	r5, #1
 801883e:	7943      	ldrb	r3, [r0, #5]
 8018840:	8982      	ldrh	r2, [r0, #12]
 8018842:	6881      	ldr	r1, [r0, #8]
 8018844:	9500      	str	r5, [sp, #0]
 8018846:	f000 f9d1 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 801884a:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 801884e:	2306      	movs	r3, #6
 8018850:	4628      	mov	r0, r5
     phost->Control.timer = (uint16_t)phost->Timer;
 8018852:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8018854:	7623      	strb	r3, [r4, #24]
 8018856:	e780      	b.n	801875a <USBH_ClrFeature+0x12>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8018858:	7941      	ldrb	r1, [r0, #5]
 801885a:	f7f3 fe3d 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 801885e:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8018860:	4605      	mov	r5, r0
    if  (URB_Status == USBH_URB_DONE)
 8018862:	d075      	beq.n	8018950 <USBH_ClrFeature+0x208>
    else if  (URB_Status == USBH_URB_STALL)
 8018864:	2805      	cmp	r0, #5
 8018866:	f000 8086 	beq.w	8018976 <USBH_ClrFeature+0x22e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 801886a:	2802      	cmp	r0, #2
 801886c:	f000 8081 	beq.w	8018972 <USBH_ClrFeature+0x22a>
      if (URB_Status == USBH_URB_ERROR)
 8018870:	2804      	cmp	r0, #4
 8018872:	f47f af71 	bne.w	8018758 <USBH_ClrFeature+0x10>
        phost->Control.state = CTRL_ERROR;
 8018876:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018878:	2200      	movs	r2, #0
 801887a:	2103      	movs	r1, #3
 801887c:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->Control.state = CTRL_ERROR;
 8018880:	7623      	strb	r3, [r4, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018882:	f004 fdf3 	bl	801d46c <osMessagePut>
 8018886:	e7a0      	b.n	80187ca <USBH_ClrFeature+0x82>
    USBH_CtlReceiveData (phost,
 8018888:	2200      	movs	r2, #0
 801888a:	7903      	ldrb	r3, [r0, #4]
 801888c:	4611      	mov	r1, r2
 801888e:	f000 f9c5 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8018892:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8018896:	2308      	movs	r3, #8
 8018898:	2001      	movs	r0, #1
    phost->Control.timer = (uint16_t)phost->Timer;
 801889a:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 801889c:	7623      	strb	r3, [r4, #24]
 801889e:	e75c      	b.n	801875a <USBH_ClrFeature+0x12>
    USBH_CtlSendData (phost,
 80188a0:	2200      	movs	r2, #0
 80188a2:	2501      	movs	r5, #1
 80188a4:	7943      	ldrb	r3, [r0, #5]
 80188a6:	4611      	mov	r1, r2
 80188a8:	9500      	str	r5, [sp, #0]
 80188aa:	f000 f99f 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80188ae:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80188b2:	230a      	movs	r3, #10
 80188b4:	4628      	mov	r0, r5
     phost->Control.timer = (uint16_t)phost->Timer;
 80188b6:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80188b8:	7623      	strb	r3, [r4, #24]
 80188ba:	e74e      	b.n	801875a <USBH_ClrFeature+0x12>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80188bc:	7941      	ldrb	r1, [r0, #5]
 80188be:	f7f3 fe0b 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80188c2:	2801      	cmp	r0, #1
 80188c4:	d01b      	beq.n	80188fe <USBH_ClrFeature+0x1b6>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80188c6:	2802      	cmp	r0, #2
 80188c8:	d051      	beq.n	801896e <USBH_ClrFeature+0x226>
      if (URB_Status == USBH_URB_ERROR)
 80188ca:	2804      	cmp	r0, #4
 80188cc:	f47f af44 	bne.w	8018758 <USBH_ClrFeature+0x10>
 80188d0:	e792      	b.n	80187f8 <USBH_ClrFeature+0xb0>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80188d2:	7901      	ldrb	r1, [r0, #4]
 80188d4:	f7f3 fe00 	bl	800c4d8 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 80188d8:	2801      	cmp	r0, #1
 80188da:	d010      	beq.n	80188fe <USBH_ClrFeature+0x1b6>
    else if (URB_Status == USBH_URB_ERROR)
 80188dc:	2804      	cmp	r0, #4
 80188de:	d08b      	beq.n	80187f8 <USBH_ClrFeature+0xb0>
      if(URB_Status == USBH_URB_STALL)
 80188e0:	2805      	cmp	r0, #5
 80188e2:	f47f af39 	bne.w	8018758 <USBH_ClrFeature+0x10>
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80188e6:	2200      	movs	r2, #0
 80188e8:	2103      	movs	r1, #3
 80188ea:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80188ee:	f004 fdbd 	bl	801d46c <osMessagePut>
      phost->RequestState = CMD_SEND;
 80188f2:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 80188f4:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 80188f6:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 80188f8:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 80188fa:	7623      	strb	r3, [r4, #24]
 80188fc:	e72d      	b.n	801875a <USBH_ClrFeature+0x12>
      phost->Control.state = CTRL_COMPLETE;
 80188fe:	230d      	movs	r3, #13
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018900:	2200      	movs	r2, #0
 8018902:	2103      	movs	r1, #3
 8018904:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_COMPLETE;
 8018908:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801890a:	f004 fdaf 	bl	801d46c <osMessagePut>
      phost->Control.state =CTRL_IDLE;
 801890e:	2300      	movs	r3, #0
      phost->RequestState = CMD_SEND;
 8018910:	2201      	movs	r2, #1
      status = USBH_OK;
 8018912:	4618      	mov	r0, r3
      phost->Control.state =CTRL_IDLE;
 8018914:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8018916:	70a2      	strb	r2, [r4, #2]
 8018918:	e71f      	b.n	801875a <USBH_ClrFeature+0x12>
      if (phost->Control.setup.b.wLength.w != 0U)
 801891a:	8ae3      	ldrh	r3, [r4, #22]
 801891c:	f994 2010 	ldrsb.w	r2, [r4, #16]
 8018920:	b1c3      	cbz	r3, 8018954 <USBH_ClrFeature+0x20c>
        if (direction == USB_D2H)
 8018922:	2a00      	cmp	r2, #0
          phost->Control.state = CTRL_DATA_IN;
 8018924:	bfb4      	ite	lt
 8018926:	2303      	movlt	r3, #3
          phost->Control.state = CTRL_DATA_OUT;
 8018928:	2305      	movge	r3, #5
 801892a:	7623      	strb	r3, [r4, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801892c:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8018930:	2200      	movs	r2, #0
 8018932:	2103      	movs	r1, #3
 8018934:	f004 fd9a 	bl	801d46c <osMessagePut>
 8018938:	2001      	movs	r0, #1
 801893a:	e70e      	b.n	801875a <USBH_ClrFeature+0x12>
      phost->Control.state = CTRL_STATUS_OUT;
 801893c:	2309      	movs	r3, #9
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 801893e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8018942:	2200      	movs	r2, #0
 8018944:	2103      	movs	r1, #3
      phost->Control.state = CTRL_STATUS_IN;
 8018946:	7623      	strb	r3, [r4, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018948:	f004 fd90 	bl	801d46c <osMessagePut>
 801894c:	4628      	mov	r0, r5
 801894e:	e704      	b.n	801875a <USBH_ClrFeature+0x12>
      phost->Control.state = CTRL_STATUS_IN;
 8018950:	2307      	movs	r3, #7
 8018952:	e7f4      	b.n	801893e <USBH_ClrFeature+0x1f6>
        if (direction == USB_D2H)
 8018954:	2a00      	cmp	r2, #0
          phost->Control.state = CTRL_STATUS_OUT;
 8018956:	bfb4      	ite	lt
 8018958:	2309      	movlt	r3, #9
          phost->Control.state = CTRL_STATUS_IN;
 801895a:	2307      	movge	r3, #7
 801895c:	7623      	strb	r3, [r4, #24]
 801895e:	e7e5      	b.n	801892c <USBH_ClrFeature+0x1e4>
      USBH_LL_Stop(phost);
 8018960:	f7f3 fd48 	bl	800c3f4 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 8018964:	2301      	movs	r3, #1
 8018966:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8018968:	4618      	mov	r0, r3
 801896a:	70a3      	strb	r3, [r4, #2]
 801896c:	e6f5      	b.n	801875a <USBH_ClrFeature+0x12>
      phost->Control.state = CTRL_STATUS_OUT;
 801896e:	2309      	movs	r3, #9
 8018970:	e743      	b.n	80187fa <USBH_ClrFeature+0xb2>
      phost->Control.state = CTRL_DATA_OUT;
 8018972:	2305      	movs	r3, #5
 8018974:	e741      	b.n	80187fa <USBH_ClrFeature+0xb2>
      phost->Control.state = CTRL_STALLED;
 8018976:	230c      	movs	r3, #12
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018978:	2200      	movs	r2, #0
 801897a:	2103      	movs	r1, #3
 801897c:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_STALLED;
 8018980:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018982:	f004 fd73 	bl	801d46c <osMessagePut>
 8018986:	e7b4      	b.n	80188f2 <USBH_ClrFeature+0x1aa>
 8018988:	08023f48 	.word	0x08023f48
 801898c:	08025eac 	.word	0x08025eac

08018990 <USBH_CtlReq>:
{
 8018990:	b530      	push	{r4, r5, lr}
  switch (phost->RequestState)
 8018992:	7884      	ldrb	r4, [r0, #2]
{
 8018994:	b083      	sub	sp, #12
 8018996:	4605      	mov	r5, r0
  switch (phost->RequestState)
 8018998:	2c01      	cmp	r4, #1
 801899a:	d010      	beq.n	80189be <USBH_CtlReq+0x2e>
 801899c:	2c02      	cmp	r4, #2
 801899e:	d002      	beq.n	80189a6 <USBH_CtlReq+0x16>
  status = USBH_BUSY;
 80189a0:	2001      	movs	r0, #1
}
 80189a2:	b003      	add	sp, #12
 80189a4:	bd30      	pop	{r4, r5, pc}
  switch (phost->Control.state)
 80189a6:	7e03      	ldrb	r3, [r0, #24]
 80189a8:	3b01      	subs	r3, #1
 80189aa:	2b0a      	cmp	r3, #10
 80189ac:	d8f8      	bhi.n	80189a0 <USBH_CtlReq+0x10>
 80189ae:	e8df f003 	tbb	[pc, r3]
 80189b2:	372e      	.short	0x372e
 80189b4:	7163574b 	.word	0x7163574b
 80189b8:	a395ae89 	.word	0xa395ae89
 80189bc:	14          	.byte	0x14
 80189bd:	00          	.byte	0x00
    phost->RequestState = CMD_WAIT;
 80189be:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 80189c0:	6081      	str	r1, [r0, #8]
    phost->Control.length = length;
 80189c2:	8182      	strh	r2, [r0, #12]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80189c4:	2103      	movs	r1, #3
    phost->Control.state = CTRL_SETUP;
 80189c6:	7604      	strb	r4, [r0, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80189c8:	2200      	movs	r2, #0
    phost->RequestState = CMD_WAIT;
 80189ca:	7083      	strb	r3, [r0, #2]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80189cc:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
 80189d0:	f004 fd4c 	bl	801d46c <osMessagePut>
    status = USBH_BUSY;
 80189d4:	4620      	mov	r0, r4
}
 80189d6:	b003      	add	sp, #12
 80189d8:	bd30      	pop	{r4, r5, pc}
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80189da:	7e43      	ldrb	r3, [r0, #25]
 80189dc:	3301      	adds	r3, #1
 80189de:	b2db      	uxtb	r3, r3
 80189e0:	2b02      	cmp	r3, #2
 80189e2:	7643      	strb	r3, [r0, #25]
 80189e4:	f240 80da 	bls.w	8018b9c <USBH_CtlReq+0x20c>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80189e8:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 80189ec:	2106      	movs	r1, #6
 80189ee:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80189f0:	2300      	movs	r3, #0
      USBH_ErrLog("Control error");
 80189f2:	4874      	ldr	r0, [pc, #464]	; (8018bc4 <USBH_CtlReq+0x234>)
      phost->Control.errorcount = 0U;
 80189f4:	766b      	strb	r3, [r5, #25]
      USBH_ErrLog("Control error");
 80189f6:	f006 ff3d 	bl	801f874 <iprintf>
 80189fa:	4873      	ldr	r0, [pc, #460]	; (8018bc8 <USBH_CtlReq+0x238>)
 80189fc:	f006 ff3a 	bl	801f874 <iprintf>
 8018a00:	200a      	movs	r0, #10
 8018a02:	f006 ff4f 	bl	801f8a4 <putchar>
        phost->RequestState = CMD_SEND;
 8018a06:	2301      	movs	r3, #1
        status = USBH_FAIL;
 8018a08:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 8018a0a:	70ab      	strb	r3, [r5, #2]
 8018a0c:	e7c9      	b.n	80189a2 <USBH_CtlReq+0x12>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8018a0e:	7942      	ldrb	r2, [r0, #5]
 8018a10:	f100 0110 	add.w	r1, r0, #16
 8018a14:	f000 f8da 	bl	8018bcc <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8018a18:	2302      	movs	r3, #2
 8018a1a:	2001      	movs	r0, #1
 8018a1c:	762b      	strb	r3, [r5, #24]
 8018a1e:	e7c0      	b.n	80189a2 <USBH_CtlReq+0x12>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8018a20:	7941      	ldrb	r1, [r0, #5]
 8018a22:	f7f3 fd59 	bl	800c4d8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8018a26:	2801      	cmp	r0, #1
 8018a28:	f000 8095 	beq.w	8018b56 <USBH_CtlReq+0x1c6>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8018a2c:	2804      	cmp	r0, #4
 8018a2e:	d001      	beq.n	8018a34 <USBH_CtlReq+0xa4>
 8018a30:	2802      	cmp	r0, #2
 8018a32:	d1b5      	bne.n	80189a0 <USBH_CtlReq+0x10>
        phost->Control.state = CTRL_ERROR;
 8018a34:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018a36:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8018a3a:	2200      	movs	r2, #0
 8018a3c:	2103      	movs	r1, #3
        phost->Control.state = CTRL_ERROR;
 8018a3e:	762b      	strb	r3, [r5, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018a40:	f004 fd14 	bl	801d46c <osMessagePut>
 8018a44:	2001      	movs	r0, #1
 8018a46:	e7ac      	b.n	80189a2 <USBH_CtlReq+0x12>
    phost->Control.timer = (uint16_t)phost->Timer;
 8018a48:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
    USBH_CtlReceiveData(phost,
 8018a4c:	7903      	ldrb	r3, [r0, #4]
    phost->Control.timer = (uint16_t)phost->Timer;
 8018a4e:	81c2      	strh	r2, [r0, #14]
    USBH_CtlReceiveData(phost,
 8018a50:	6881      	ldr	r1, [r0, #8]
 8018a52:	8982      	ldrh	r2, [r0, #12]
 8018a54:	f000 f8e2 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8018a58:	2304      	movs	r3, #4
 8018a5a:	2001      	movs	r0, #1
 8018a5c:	762b      	strb	r3, [r5, #24]
 8018a5e:	e7a0      	b.n	80189a2 <USBH_CtlReq+0x12>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8018a60:	7901      	ldrb	r1, [r0, #4]
 8018a62:	f7f3 fd39 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8018a66:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8018a68:	4604      	mov	r4, r0
    if  (URB_Status == USBH_URB_DONE)
 8018a6a:	f000 8085 	beq.w	8018b78 <USBH_CtlReq+0x1e8>
    if  (URB_Status == USBH_URB_STALL)
 8018a6e:	2805      	cmp	r0, #5
 8018a70:	d057      	beq.n	8018b22 <USBH_CtlReq+0x192>
      if (URB_Status == USBH_URB_ERROR)
 8018a72:	2804      	cmp	r0, #4
 8018a74:	d194      	bne.n	80189a0 <USBH_CtlReq+0x10>
 8018a76:	e7dd      	b.n	8018a34 <USBH_CtlReq+0xa4>
    USBH_CtlSendData (phost,
 8018a78:	2401      	movs	r4, #1
 8018a7a:	7943      	ldrb	r3, [r0, #5]
 8018a7c:	8982      	ldrh	r2, [r0, #12]
 8018a7e:	6881      	ldr	r1, [r0, #8]
 8018a80:	9400      	str	r4, [sp, #0]
 8018a82:	f000 f8b3 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8018a86:	f8d5 23bc 	ldr.w	r2, [r5, #956]	; 0x3bc
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8018a8a:	2306      	movs	r3, #6
 8018a8c:	4620      	mov	r0, r4
     phost->Control.timer = (uint16_t)phost->Timer;
 8018a8e:	81ea      	strh	r2, [r5, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8018a90:	762b      	strb	r3, [r5, #24]
 8018a92:	e786      	b.n	80189a2 <USBH_CtlReq+0x12>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8018a94:	7941      	ldrb	r1, [r0, #5]
 8018a96:	f7f3 fd1f 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8018a9a:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8018a9c:	4604      	mov	r4, r0
    if  (URB_Status == USBH_URB_DONE)
 8018a9e:	d075      	beq.n	8018b8c <USBH_CtlReq+0x1fc>
    else if  (URB_Status == USBH_URB_STALL)
 8018aa0:	2805      	cmp	r0, #5
 8018aa2:	f000 8086 	beq.w	8018bb2 <USBH_CtlReq+0x222>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8018aa6:	2802      	cmp	r0, #2
 8018aa8:	f000 8081 	beq.w	8018bae <USBH_CtlReq+0x21e>
      if (URB_Status == USBH_URB_ERROR)
 8018aac:	2804      	cmp	r0, #4
 8018aae:	f47f af77 	bne.w	80189a0 <USBH_CtlReq+0x10>
        phost->Control.state = CTRL_ERROR;
 8018ab2:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018ab4:	2200      	movs	r2, #0
 8018ab6:	2103      	movs	r1, #3
 8018ab8:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
        phost->Control.state = CTRL_ERROR;
 8018abc:	762b      	strb	r3, [r5, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018abe:	f004 fcd5 	bl	801d46c <osMessagePut>
 8018ac2:	e7a0      	b.n	8018a06 <USBH_CtlReq+0x76>
    USBH_CtlReceiveData (phost,
 8018ac4:	2200      	movs	r2, #0
 8018ac6:	7903      	ldrb	r3, [r0, #4]
 8018ac8:	4611      	mov	r1, r2
 8018aca:	f000 f8a7 	bl	8018c1c <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8018ace:	f8d5 23bc 	ldr.w	r2, [r5, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8018ad2:	2308      	movs	r3, #8
 8018ad4:	2001      	movs	r0, #1
    phost->Control.timer = (uint16_t)phost->Timer;
 8018ad6:	81ea      	strh	r2, [r5, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8018ad8:	762b      	strb	r3, [r5, #24]
 8018ada:	e762      	b.n	80189a2 <USBH_CtlReq+0x12>
    USBH_CtlSendData (phost,
 8018adc:	2200      	movs	r2, #0
 8018ade:	2401      	movs	r4, #1
 8018ae0:	7943      	ldrb	r3, [r0, #5]
 8018ae2:	4611      	mov	r1, r2
 8018ae4:	9400      	str	r4, [sp, #0]
 8018ae6:	f000 f881 	bl	8018bec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8018aea:	f8d5 23bc 	ldr.w	r2, [r5, #956]	; 0x3bc
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8018aee:	230a      	movs	r3, #10
 8018af0:	4620      	mov	r0, r4
     phost->Control.timer = (uint16_t)phost->Timer;
 8018af2:	81ea      	strh	r2, [r5, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8018af4:	762b      	strb	r3, [r5, #24]
 8018af6:	e754      	b.n	80189a2 <USBH_CtlReq+0x12>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8018af8:	7941      	ldrb	r1, [r0, #5]
 8018afa:	f7f3 fced 	bl	800c4d8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8018afe:	2801      	cmp	r0, #1
 8018b00:	d01b      	beq.n	8018b3a <USBH_CtlReq+0x1aa>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8018b02:	2802      	cmp	r0, #2
 8018b04:	d051      	beq.n	8018baa <USBH_CtlReq+0x21a>
      if (URB_Status == USBH_URB_ERROR)
 8018b06:	2804      	cmp	r0, #4
 8018b08:	f47f af4a 	bne.w	80189a0 <USBH_CtlReq+0x10>
 8018b0c:	e792      	b.n	8018a34 <USBH_CtlReq+0xa4>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8018b0e:	7901      	ldrb	r1, [r0, #4]
 8018b10:	f7f3 fce2 	bl	800c4d8 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8018b14:	2801      	cmp	r0, #1
 8018b16:	d010      	beq.n	8018b3a <USBH_CtlReq+0x1aa>
    else if (URB_Status == USBH_URB_ERROR)
 8018b18:	2804      	cmp	r0, #4
 8018b1a:	d08b      	beq.n	8018a34 <USBH_CtlReq+0xa4>
      if(URB_Status == USBH_URB_STALL)
 8018b1c:	2805      	cmp	r0, #5
 8018b1e:	f47f af3f 	bne.w	80189a0 <USBH_CtlReq+0x10>
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018b22:	2200      	movs	r2, #0
 8018b24:	2103      	movs	r1, #3
 8018b26:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8018b2a:	f004 fc9f 	bl	801d46c <osMessagePut>
      phost->RequestState = CMD_SEND;
 8018b2e:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 8018b30:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 8018b32:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 8018b34:	70aa      	strb	r2, [r5, #2]
      phost->Control.state = CTRL_IDLE;
 8018b36:	762b      	strb	r3, [r5, #24]
 8018b38:	e733      	b.n	80189a2 <USBH_CtlReq+0x12>
      phost->Control.state = CTRL_COMPLETE;
 8018b3a:	230d      	movs	r3, #13
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018b3c:	2200      	movs	r2, #0
 8018b3e:	2103      	movs	r1, #3
 8018b40:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
      phost->Control.state = CTRL_COMPLETE;
 8018b44:	762b      	strb	r3, [r5, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018b46:	f004 fc91 	bl	801d46c <osMessagePut>
      phost->Control.state =CTRL_IDLE;
 8018b4a:	2300      	movs	r3, #0
      phost->RequestState = CMD_SEND;
 8018b4c:	2201      	movs	r2, #1
      status = USBH_OK;
 8018b4e:	4618      	mov	r0, r3
      phost->Control.state =CTRL_IDLE;
 8018b50:	762b      	strb	r3, [r5, #24]
      phost->RequestState = CMD_SEND;
 8018b52:	70aa      	strb	r2, [r5, #2]
 8018b54:	e725      	b.n	80189a2 <USBH_CtlReq+0x12>
      if (phost->Control.setup.b.wLength.w != 0U)
 8018b56:	8aeb      	ldrh	r3, [r5, #22]
 8018b58:	f995 2010 	ldrsb.w	r2, [r5, #16]
 8018b5c:	b1c3      	cbz	r3, 8018b90 <USBH_CtlReq+0x200>
        if (direction == USB_D2H)
 8018b5e:	2a00      	cmp	r2, #0
          phost->Control.state = CTRL_DATA_IN;
 8018b60:	bfb4      	ite	lt
 8018b62:	2303      	movlt	r3, #3
          phost->Control.state = CTRL_DATA_OUT;
 8018b64:	2305      	movge	r3, #5
 8018b66:	762b      	strb	r3, [r5, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018b68:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8018b6c:	2200      	movs	r2, #0
 8018b6e:	2103      	movs	r1, #3
 8018b70:	f004 fc7c 	bl	801d46c <osMessagePut>
 8018b74:	2001      	movs	r0, #1
 8018b76:	e714      	b.n	80189a2 <USBH_CtlReq+0x12>
      phost->Control.state = CTRL_STATUS_OUT;
 8018b78:	2309      	movs	r3, #9
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018b7a:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8018b7e:	2200      	movs	r2, #0
 8018b80:	2103      	movs	r1, #3
      phost->Control.state = CTRL_STATUS_IN;
 8018b82:	762b      	strb	r3, [r5, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018b84:	f004 fc72 	bl	801d46c <osMessagePut>
 8018b88:	4620      	mov	r0, r4
 8018b8a:	e70a      	b.n	80189a2 <USBH_CtlReq+0x12>
      phost->Control.state = CTRL_STATUS_IN;
 8018b8c:	2307      	movs	r3, #7
 8018b8e:	e7f4      	b.n	8018b7a <USBH_CtlReq+0x1ea>
        if (direction == USB_D2H)
 8018b90:	2a00      	cmp	r2, #0
          phost->Control.state = CTRL_STATUS_OUT;
 8018b92:	bfb4      	ite	lt
 8018b94:	2309      	movlt	r3, #9
          phost->Control.state = CTRL_STATUS_IN;
 8018b96:	2307      	movge	r3, #7
 8018b98:	762b      	strb	r3, [r5, #24]
 8018b9a:	e7e5      	b.n	8018b68 <USBH_CtlReq+0x1d8>
      USBH_LL_Stop(phost);
 8018b9c:	f7f3 fc2a 	bl	800c3f4 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 8018ba0:	2301      	movs	r3, #1
 8018ba2:	762b      	strb	r3, [r5, #24]
      phost->RequestState = CMD_SEND;
 8018ba4:	4618      	mov	r0, r3
 8018ba6:	70ab      	strb	r3, [r5, #2]
 8018ba8:	e6fb      	b.n	80189a2 <USBH_CtlReq+0x12>
      phost->Control.state = CTRL_STATUS_OUT;
 8018baa:	2309      	movs	r3, #9
 8018bac:	e743      	b.n	8018a36 <USBH_CtlReq+0xa6>
      phost->Control.state = CTRL_DATA_OUT;
 8018bae:	2305      	movs	r3, #5
 8018bb0:	e741      	b.n	8018a36 <USBH_CtlReq+0xa6>
      phost->Control.state = CTRL_STALLED;
 8018bb2:	230c      	movs	r3, #12
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018bb4:	2200      	movs	r2, #0
 8018bb6:	2103      	movs	r1, #3
 8018bb8:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
      phost->Control.state = CTRL_STALLED;
 8018bbc:	762b      	strb	r3, [r5, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8018bbe:	f004 fc55 	bl	801d46c <osMessagePut>
 8018bc2:	e7b4      	b.n	8018b2e <USBH_CtlReq+0x19e>
 8018bc4:	08023f48 	.word	0x08023f48
 8018bc8:	08025eac 	.word	0x08025eac

08018bcc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8018bcc:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8018bce:	2400      	movs	r4, #0
{
 8018bd0:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8018bd2:	2508      	movs	r5, #8
 8018bd4:	9101      	str	r1, [sp, #4]
 8018bd6:	4623      	mov	r3, r4
 8018bd8:	4611      	mov	r1, r2
 8018bda:	9403      	str	r4, [sp, #12]
 8018bdc:	9400      	str	r4, [sp, #0]
 8018bde:	4622      	mov	r2, r4
 8018be0:	9502      	str	r5, [sp, #8]
 8018be2:	f7f3 fc5d 	bl	800c4a0 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8018be6:	4620      	mov	r0, r4
 8018be8:	b005      	add	sp, #20
 8018bea:	bd30      	pop	{r4, r5, pc}

08018bec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8018bec:	b570      	push	{r4, r5, r6, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8018bee:	f890 631d 	ldrb.w	r6, [r0, #797]	; 0x31d
{
 8018bf2:	b084      	sub	sp, #16
 8018bf4:	461d      	mov	r5, r3
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8018bf6:	2300      	movs	r3, #0
  if(phost->device.speed != USBH_SPEED_HIGH)
 8018bf8:	2e00      	cmp	r6, #0
{
 8018bfa:	f89d 4020 	ldrb.w	r4, [sp, #32]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8018bfe:	f04f 0601 	mov.w	r6, #1
 8018c02:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8018c04:	bf18      	it	ne
 8018c06:	461c      	movne	r4, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8018c08:	461a      	mov	r2, r3
 8018c0a:	e9cd 6100 	strd	r6, r1, [sp]
 8018c0e:	9403      	str	r4, [sp, #12]
 8018c10:	4629      	mov	r1, r5
 8018c12:	f7f3 fc45 	bl	800c4a0 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8018c16:	2000      	movs	r0, #0
 8018c18:	b004      	add	sp, #16
 8018c1a:	bd70      	pop	{r4, r5, r6, pc}

08018c1c <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8018c1c:	b570      	push	{r4, r5, r6, lr}
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8018c1e:	2400      	movs	r4, #0
{
 8018c20:	b084      	sub	sp, #16
 8018c22:	461e      	mov	r6, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8018c24:	2501      	movs	r5, #1
 8018c26:	4623      	mov	r3, r4
 8018c28:	9403      	str	r4, [sp, #12]
 8018c2a:	9500      	str	r5, [sp, #0]
 8018c2c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8018c30:	4631      	mov	r1, r6
 8018c32:	462a      	mov	r2, r5
 8018c34:	f7f3 fc34 	bl	800c4a0 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8018c38:	4620      	mov	r0, r4
 8018c3a:	b004      	add	sp, #16
 8018c3c:	bd70      	pop	{r4, r5, r6, pc}
 8018c3e:	bf00      	nop

08018c40 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8018c40:	b570      	push	{r4, r5, r6, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8018c42:	f890 631d 	ldrb.w	r6, [r0, #797]	; 0x31d
{
 8018c46:	b084      	sub	sp, #16
 8018c48:	461d      	mov	r5, r3
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8018c4a:	2302      	movs	r3, #2
  if(phost->device.speed != USBH_SPEED_HIGH)
 8018c4c:	2e00      	cmp	r6, #0
{
 8018c4e:	f89d 4020 	ldrb.w	r4, [sp, #32]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8018c52:	f04f 0601 	mov.w	r6, #1
 8018c56:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8018c58:	bf18      	it	ne
 8018c5a:	2400      	movne	r4, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8018c5c:	2200      	movs	r2, #0
 8018c5e:	e9cd 6100 	strd	r6, r1, [sp]
 8018c62:	9403      	str	r4, [sp, #12]
 8018c64:	4629      	mov	r1, r5
 8018c66:	f7f3 fc1b 	bl	800c4a0 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8018c6a:	2000      	movs	r0, #0
 8018c6c:	b004      	add	sp, #16
 8018c6e:	bd70      	pop	{r4, r5, r6, pc}

08018c70 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8018c70:	b570      	push	{r4, r5, r6, lr}
 8018c72:	461e      	mov	r6, r3
 8018c74:	b084      	sub	sp, #16
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8018c76:	2400      	movs	r4, #0
 8018c78:	2501      	movs	r5, #1
 8018c7a:	2302      	movs	r3, #2
 8018c7c:	9403      	str	r4, [sp, #12]
 8018c7e:	9500      	str	r5, [sp, #0]
 8018c80:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8018c84:	4631      	mov	r1, r6
 8018c86:	462a      	mov	r2, r5
 8018c88:	f7f3 fc0a 	bl	800c4a0 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8018c8c:	4620      	mov	r0, r4
 8018c8e:	b004      	add	sp, #16
 8018c90:	bd70      	pop	{r4, r5, r6, pc}
 8018c92:	bf00      	nop

08018c94 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8018c94:	b530      	push	{r4, r5, lr}
 8018c96:	b085      	sub	sp, #20
 8018c98:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8018c9c:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24

  USBH_LL_OpenPipe(phost,
 8018ca0:	9400      	str	r4, [sp, #0]
{
 8018ca2:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  USBH_LL_OpenPipe(phost,
 8018ca6:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8018caa:	f7f3 fbd1 	bl	800c450 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8018cae:	2000      	movs	r0, #0
 8018cb0:	b005      	add	sp, #20
 8018cb2:	bd30      	pop	{r4, r5, pc}

08018cb4 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8018cb4:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8018cb6:	f7f3 fbe5 	bl	800c484 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8018cba:	2000      	movs	r0, #0
 8018cbc:	bd08      	pop	{r3, pc}
 8018cbe:	bf00      	nop

08018cc0 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8018cc0:	4603      	mov	r3, r0
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8018cc2:	f8d0 0380 	ldr.w	r0, [r0, #896]	; 0x380
 8018cc6:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8018cca:	d02a      	beq.n	8018d22 <USBH_AllocPipe+0x62>
 8018ccc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8018cd0:	0410      	lsls	r0, r2, #16
 8018cd2:	d52d      	bpl.n	8018d30 <USBH_AllocPipe+0x70>
 8018cd4:	f8d3 2388 	ldr.w	r2, [r3, #904]	; 0x388
 8018cd8:	0412      	lsls	r2, r2, #16
 8018cda:	d52c      	bpl.n	8018d36 <USBH_AllocPipe+0x76>
 8018cdc:	f8d3 238c 	ldr.w	r2, [r3, #908]	; 0x38c
 8018ce0:	0410      	lsls	r0, r2, #16
 8018ce2:	d52b      	bpl.n	8018d3c <USBH_AllocPipe+0x7c>
 8018ce4:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8018ce8:	0412      	lsls	r2, r2, #16
 8018cea:	d52a      	bpl.n	8018d42 <USBH_AllocPipe+0x82>
 8018cec:	f8d3 2394 	ldr.w	r2, [r3, #916]	; 0x394
 8018cf0:	0410      	lsls	r0, r2, #16
 8018cf2:	d529      	bpl.n	8018d48 <USBH_AllocPipe+0x88>
 8018cf4:	f8d3 2398 	ldr.w	r2, [r3, #920]	; 0x398
 8018cf8:	0412      	lsls	r2, r2, #16
 8018cfa:	d52b      	bpl.n	8018d54 <USBH_AllocPipe+0x94>
 8018cfc:	f8d3 239c 	ldr.w	r2, [r3, #924]	; 0x39c
 8018d00:	0410      	lsls	r0, r2, #16
 8018d02:	d52a      	bpl.n	8018d5a <USBH_AllocPipe+0x9a>
 8018d04:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 8018d08:	0412      	lsls	r2, r2, #16
 8018d0a:	d520      	bpl.n	8018d4e <USBH_AllocPipe+0x8e>
 8018d0c:	f8d3 23a4 	ldr.w	r2, [r3, #932]	; 0x3a4
 8018d10:	0410      	lsls	r0, r2, #16
 8018d12:	d505      	bpl.n	8018d20 <USBH_AllocPipe+0x60>
 8018d14:	f8d3 23a8 	ldr.w	r2, [r3, #936]	; 0x3a8
 8018d18:	0412      	lsls	r2, r2, #16
 8018d1a:	d521      	bpl.n	8018d60 <USBH_AllocPipe+0xa0>
 8018d1c:	20ff      	movs	r0, #255	; 0xff
}
 8018d1e:	4770      	bx	lr
  for (idx = 0U ; idx < 11U ; idx++)
 8018d20:	2009      	movs	r0, #9
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8018d22:	4602      	mov	r2, r0
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8018d24:	32e0      	adds	r2, #224	; 0xe0
 8018d26:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8018d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018d2e:	4770      	bx	lr
  for (idx = 0U ; idx < 11U ; idx++)
 8018d30:	2001      	movs	r0, #1
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8018d32:	4602      	mov	r2, r0
 8018d34:	e7f6      	b.n	8018d24 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8018d36:	2002      	movs	r0, #2
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8018d38:	4602      	mov	r2, r0
 8018d3a:	e7f3      	b.n	8018d24 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8018d3c:	2003      	movs	r0, #3
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8018d3e:	4602      	mov	r2, r0
 8018d40:	e7f0      	b.n	8018d24 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8018d42:	2004      	movs	r0, #4
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8018d44:	4602      	mov	r2, r0
 8018d46:	e7ed      	b.n	8018d24 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8018d48:	2005      	movs	r0, #5
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8018d4a:	4602      	mov	r2, r0
 8018d4c:	e7ea      	b.n	8018d24 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8018d4e:	2008      	movs	r0, #8
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8018d50:	4602      	mov	r2, r0
 8018d52:	e7e7      	b.n	8018d24 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8018d54:	2006      	movs	r0, #6
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8018d56:	4602      	mov	r2, r0
 8018d58:	e7e4      	b.n	8018d24 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8018d5a:	2007      	movs	r0, #7
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8018d5c:	4602      	mov	r2, r0
 8018d5e:	e7e1      	b.n	8018d24 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8018d60:	200a      	movs	r0, #10
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8018d62:	4602      	mov	r2, r0
 8018d64:	e7de      	b.n	8018d24 <USBH_AllocPipe+0x64>
 8018d66:	bf00      	nop

08018d68 <USBH_FreePipe>:
   if(idx < 11U)
 8018d68:	290a      	cmp	r1, #10
 8018d6a:	d807      	bhi.n	8018d7c <USBH_FreePipe+0x14>
 8018d6c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8018d70:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8018d74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018d78:	f8c0 3380 	str.w	r3, [r0, #896]	; 0x380
}
 8018d7c:	2000      	movs	r0, #0
 8018d7e:	4770      	bx	lr

08018d80 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8018d80:	4b03      	ldr	r3, [pc, #12]	; (8018d90 <disk_status+0x10>)
 8018d82:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8018d86:	4403      	add	r3, r0
 8018d88:	6852      	ldr	r2, [r2, #4]
 8018d8a:	7b18      	ldrb	r0, [r3, #12]
 8018d8c:	6853      	ldr	r3, [r2, #4]
 8018d8e:	4718      	bx	r3
 8018d90:	20006254 	.word	0x20006254

08018d94 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8018d94:	4b08      	ldr	r3, [pc, #32]	; (8018db8 <disk_initialize+0x24>)
 8018d96:	5c1a      	ldrb	r2, [r3, r0]
 8018d98:	b95a      	cbnz	r2, 8018db2 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8018d9a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8018d9e:	1819      	adds	r1, r3, r0
{
 8018da0:	b410      	push	{r4}
    disk.is_initialized[pdrv] = 1;
 8018da2:	2401      	movs	r4, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8018da4:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 8018da6:	541c      	strb	r4, [r3, r0]
  }
  return stat;
}
 8018da8:	f85d 4b04 	ldr.w	r4, [sp], #4
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8018dac:	7b08      	ldrb	r0, [r1, #12]
 8018dae:	6813      	ldr	r3, [r2, #0]
 8018db0:	4718      	bx	r3
}
 8018db2:	2000      	movs	r0, #0
 8018db4:	4770      	bx	lr
 8018db6:	bf00      	nop
 8018db8:	20006254 	.word	0x20006254

08018dbc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8018dbc:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8018dbe:	4c05      	ldr	r4, [pc, #20]	; (8018dd4 <disk_read+0x18>)
 8018dc0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8018dc4:	4404      	add	r4, r0
 8018dc6:	686d      	ldr	r5, [r5, #4]
 8018dc8:	7b20      	ldrb	r0, [r4, #12]
 8018dca:	68ac      	ldr	r4, [r5, #8]
 8018dcc:	46a4      	mov	ip, r4
  return res;
}
 8018dce:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8018dd0:	4760      	bx	ip
 8018dd2:	bf00      	nop
 8018dd4:	20006254 	.word	0x20006254

08018dd8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8018dd8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8018dda:	4c05      	ldr	r4, [pc, #20]	; (8018df0 <disk_write+0x18>)
 8018ddc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8018de0:	4404      	add	r4, r0
 8018de2:	686d      	ldr	r5, [r5, #4]
 8018de4:	7b20      	ldrb	r0, [r4, #12]
 8018de6:	68ec      	ldr	r4, [r5, #12]
 8018de8:	46a4      	mov	ip, r4
  return res;
}
 8018dea:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8018dec:	4760      	bx	ip
 8018dee:	bf00      	nop
 8018df0:	20006254 	.word	0x20006254

08018df4 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8018df4:	4b05      	ldr	r3, [pc, #20]	; (8018e0c <disk_ioctl+0x18>)
{
 8018df6:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8018df8:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8018dfc:	4403      	add	r3, r0
 8018dfe:	6864      	ldr	r4, [r4, #4]
 8018e00:	7b18      	ldrb	r0, [r3, #12]
 8018e02:	6923      	ldr	r3, [r4, #16]
  return res;
}
 8018e04:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8018e08:	4718      	bx	r3
 8018e0a:	bf00      	nop
 8018e0c:	20006254 	.word	0x20006254

08018e10 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8018e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e14:	440a      	add	r2, r1
 8018e16:	460c      	mov	r4, r1
 8018e18:	4680      	mov	r8, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8018e1a:	4e35      	ldr	r6, [pc, #212]	; (8018ef0 <pattern_matching+0xe0>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8018e1c:	42a2      	cmp	r2, r4
 8018e1e:	d00f      	beq.n	8018e40 <pattern_matching+0x30>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8018e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e24:	b288      	uxth	r0, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8018e26:	4431      	add	r1, r6
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8018e28:	f1a0 0561 	sub.w	r5, r0, #97	; 0x61
 8018e2c:	2d19      	cmp	r5, #25
 8018e2e:	d9f5      	bls.n	8018e1c <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8018e30:	287f      	cmp	r0, #127	; 0x7f
 8018e32:	bf88      	it	hi
 8018e34:	f811 0c80 	ldrbhi.w	r0, [r1, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8018e38:	2800      	cmp	r0, #0
 8018e3a:	d1ef      	bne.n	8018e1c <pattern_matching+0xc>
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 8018e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8018e40:	1c1f      	adds	r7, r3, #0
 8018e42:	f898 9000 	ldrb.w	r9, [r8]
 8018e46:	bf18      	it	ne
 8018e48:	2701      	movne	r7, #1
 8018e4a:	f1b9 0f00 	cmp.w	r9, #0
 8018e4e:	d100      	bne.n	8018e52 <pattern_matching+0x42>
 8018e50:	bb67      	cbnz	r7, 8018eac <pattern_matching+0x9c>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8018e52:	4e27      	ldr	r6, [pc, #156]	; (8018ef0 <pattern_matching+0xe0>)
 8018e54:	4640      	mov	r0, r8
{
 8018e56:	464a      	mov	r2, r9
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8018e58:	4625      	mov	r5, r4
 8018e5a:	e00f      	b.n	8018e7c <pattern_matching+0x6c>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8018e5c:	3b20      	subs	r3, #32
 8018e5e:	b29b      	uxth	r3, r3
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8018e60:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018e64:	b28a      	uxth	r2, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8018e66:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
 8018e6a:	f1bc 0f19 	cmp.w	ip, #25
 8018e6e:	d814      	bhi.n	8018e9a <pattern_matching+0x8a>
 8018e70:	3a20      	subs	r2, #32
 8018e72:	b292      	uxth	r2, r2
			if (pc != nc) break;	/* Branch mismatched? */
 8018e74:	429a      	cmp	r2, r3
 8018e76:	d135      	bne.n	8018ee4 <pattern_matching+0xd4>
 8018e78:	f810 2f01 	ldrb.w	r2, [r0, #1]!
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8018e7c:	2a3f      	cmp	r2, #63	; 0x3f
 8018e7e:	d018      	beq.n	8018eb2 <pattern_matching+0xa2>
 8018e80:	2a2a      	cmp	r2, #42	; 0x2a
 8018e82:	d016      	beq.n	8018eb2 <pattern_matching+0xa2>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8018e84:	b293      	uxth	r3, r2
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8018e86:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8018e8a:	2919      	cmp	r1, #25
 8018e8c:	d9e6      	bls.n	8018e5c <pattern_matching+0x4c>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8018e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8018e90:	d9e6      	bls.n	8018e60 <pattern_matching+0x50>
 8018e92:	4432      	add	r2, r6
 8018e94:	f812 3c80 	ldrb.w	r3, [r2, #-128]
 8018e98:	e7e2      	b.n	8018e60 <pattern_matching+0x50>
 8018e9a:	2a7f      	cmp	r2, #127	; 0x7f
 8018e9c:	d902      	bls.n	8018ea4 <pattern_matching+0x94>
 8018e9e:	4431      	add	r1, r6
 8018ea0:	f811 2c80 	ldrb.w	r2, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
 8018ea4:	429a      	cmp	r2, r3
 8018ea6:	d11d      	bne.n	8018ee4 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8018ea8:	2a00      	cmp	r2, #0
 8018eaa:	d1e5      	bne.n	8018e78 <pattern_matching+0x68>
	if (!*pat && inf) return 1;		/* (short circuit) */
 8018eac:	2001      	movs	r0, #1
}
 8018eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018eb2:	4601      	mov	r1, r0
				nm = nx = 0;
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	f811 cb01 	ldrb.w	ip, [r1], #1
 8018eba:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 8018ebc:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 8018ec0:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
 8018ec2:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
 8018ec6:	bf0c      	ite	eq
 8018ec8:	3201      	addeq	r2, #1
 8018eca:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 8018ecc:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 8018ed0:	bf18      	it	ne
 8018ed2:	f1bc 0f2a 	cmpne.w	ip, #42	; 0x2a
 8018ed6:	d0f1      	beq.n	8018ebc <pattern_matching+0xac>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8018ed8:	4629      	mov	r1, r5
 8018eda:	f7ff ff99 	bl	8018e10 <pattern_matching>
 8018ede:	2800      	cmp	r0, #0
 8018ee0:	d1e4      	bne.n	8018eac <pattern_matching+0x9c>
				nc = *np; break;	/* Branch mismatched */
 8018ee2:	782a      	ldrb	r2, [r5, #0]
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8018ee4:	3401      	adds	r4, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8018ee6:	b10a      	cbz	r2, 8018eec <pattern_matching+0xdc>
 8018ee8:	2f00      	cmp	r7, #0
 8018eea:	d1b3      	bne.n	8018e54 <pattern_matching+0x44>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8018eec:	2000      	movs	r0, #0
 8018eee:	e7a5      	b.n	8018e3c <pattern_matching+0x2c>
 8018ef0:	08025ebc 	.word	0x08025ebc

08018ef4 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
 8018ef4:	2300      	movs	r3, #0
{
 8018ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8018efa:	6807      	ldr	r7, [r0, #0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8018efc:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8018efe:	69c2      	ldr	r2, [r0, #28]
 8018f00:	2a00      	cmp	r2, #0
 8018f02:	d069      	beq.n	8018fd8 <get_fileinfo+0xe4>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8018f04:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8018f06:	460d      	mov	r5, r1
 8018f08:	4680      	mov	r8, r0
 8018f0a:	3201      	adds	r2, #1
 8018f0c:	d068      	beq.n	8018fe0 <get_fileinfo+0xec>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	8818      	ldrh	r0, [r3, #0]
 8018f12:	2800      	cmp	r0, #0
 8018f14:	d062      	beq.n	8018fdc <get_fileinfo+0xe8>
 8018f16:	f101 0615 	add.w	r6, r1, #21
 8018f1a:	2401      	movs	r4, #1
 8018f1c:	e000      	b.n	8018f20 <get_fileinfo+0x2c>
 8018f1e:	4614      	mov	r4, r2
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8018f20:	2100      	movs	r1, #0
 8018f22:	f004 f96b 	bl	801d1fc <ff_convert>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8018f26:	2800      	cmp	r0, #0
 8018f28:	d058      	beq.n	8018fdc <get_fileinfo+0xe8>
 8018f2a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8018f2e:	f104 0201 	add.w	r2, r4, #1
 8018f32:	d053      	beq.n	8018fdc <get_fileinfo+0xe8>
				fno->fname[i++] = (TCHAR)w;
 8018f34:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8018f3e:	2800      	cmp	r0, #0
 8018f40:	d1ed      	bne.n	8018f1e <get_fileinfo+0x2a>
			fno->fname[i] = 0;	/* Terminate the LFN */
 8018f42:	442c      	add	r4, r5
 8018f44:	2300      	movs	r3, #0
 8018f46:	75a3      	strb	r3, [r4, #22]
 8018f48:	7daf      	ldrb	r7, [r5, #22]
		c = (TCHAR)dp->dir[i++];
 8018f4a:	f8d8 1020 	ldr.w	r1, [r8, #32]
	i = j = 0;
 8018f4e:	2000      	movs	r0, #0
			fno->altname[j++] = '.';
 8018f50:	f04f 082e 	mov.w	r8, #46	; 0x2e
 8018f54:	f101 0c0b 	add.w	ip, r1, #11
		c = (TCHAR)dp->dir[i++];
 8018f58:	460a      	mov	r2, r1
 8018f5a:	f812 3b01 	ldrb.w	r3, [r2], #1
		if (c == ' ') continue;				/* Skip padding spaces */
 8018f5e:	2b20      	cmp	r3, #32
 8018f60:	d01b      	beq.n	8018f9a <get_fileinfo+0xa6>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8018f62:	2b05      	cmp	r3, #5
 8018f64:	eba2 0601 	sub.w	r6, r2, r1
 8018f68:	bf08      	it	eq
 8018f6a:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 8018f6c:	2e09      	cmp	r6, #9
 8018f6e:	d039      	beq.n	8018fe4 <get_fileinfo+0xf0>
		fno->altname[j] = c;
 8018f70:	182c      	adds	r4, r5, r0
 8018f72:	7263      	strb	r3, [r4, #9]
		if (!lfv) {
 8018f74:	b987      	cbnz	r7, 8018f98 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8018f76:	f1a3 0e41 	sub.w	lr, r3, #65	; 0x41
 8018f7a:	f1be 0f19 	cmp.w	lr, #25
 8018f7e:	d80a      	bhi.n	8018f96 <get_fileinfo+0xa2>
 8018f80:	2e08      	cmp	r6, #8
 8018f82:	f891 e00c 	ldrb.w	lr, [r1, #12]
 8018f86:	bf8c      	ite	hi
 8018f88:	2610      	movhi	r6, #16
 8018f8a:	2608      	movls	r6, #8
 8018f8c:	ea1e 0f06 	tst.w	lr, r6
 8018f90:	d001      	beq.n	8018f96 <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 8018f92:	3320      	adds	r3, #32
 8018f94:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
 8018f96:	75a3      	strb	r3, [r4, #22]
		j++;
 8018f98:	3001      	adds	r0, #1
	while (i < 11) {		/* Copy name body and extension */
 8018f9a:	4562      	cmp	r2, ip
 8018f9c:	d1dd      	bne.n	8018f5a <get_fileinfo+0x66>
		fno->fname[j] = 0;
 8018f9e:	182c      	adds	r4, r5, r0
	if (!lfv) {
 8018fa0:	b927      	cbnz	r7, 8018fac <get_fileinfo+0xb8>
		fno->fname[j] = 0;
 8018fa2:	75a7      	strb	r7, [r4, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8018fa4:	7b0b      	ldrb	r3, [r1, #12]
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	bf08      	it	eq
 8018faa:	462c      	moveq	r4, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
 8018fac:	2300      	movs	r3, #0
 8018fae:	7263      	strb	r3, [r4, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8018fb0:	7acb      	ldrb	r3, [r1, #11]
 8018fb2:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[2];
 8018fb4:	8bc8      	ldrh	r0, [r1, #30]
	rv = rv << 8 | ptr[1];
 8018fb6:	7f4a      	ldrb	r2, [r1, #29]
	rv = rv << 8 | ptr[0];
 8018fb8:	7f0b      	ldrb	r3, [r1, #28]
	rv = rv << 8 | ptr[1];
 8018fba:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8018fbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8018fc2:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[2];
 8018fc4:	8b08      	ldrh	r0, [r1, #24]
	rv = rv << 8 | ptr[1];
 8018fc6:	7dca      	ldrb	r2, [r1, #23]
	rv = rv << 8 | ptr[0];
 8018fc8:	7d8b      	ldrb	r3, [r1, #22]
	rv = rv << 8 | ptr[1];
 8018fca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8018fce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8018fd2:	0c1a      	lsrs	r2, r3, #16
 8018fd4:	80eb      	strh	r3, [r5, #6]
 8018fd6:	80aa      	strh	r2, [r5, #4]
}
 8018fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			i = j = 0;
 8018fdc:	2400      	movs	r4, #0
 8018fde:	e7b0      	b.n	8018f42 <get_fileinfo+0x4e>
 8018fe0:	461f      	mov	r7, r3
 8018fe2:	e7b2      	b.n	8018f4a <get_fileinfo+0x56>
			if (!lfv) fno->fname[j] = '.';
 8018fe4:	182c      	adds	r4, r5, r0
 8018fe6:	b90f      	cbnz	r7, 8018fec <get_fileinfo+0xf8>
 8018fe8:	f884 8016 	strb.w	r8, [r4, #22]
			fno->altname[j++] = '.';
 8018fec:	3001      	adds	r0, #1
 8018fee:	f884 8009 	strb.w	r8, [r4, #9]
 8018ff2:	e7bd      	b.n	8018f70 <get_fileinfo+0x7c>

08018ff4 <move_window.part.7>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8018ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8018ff8:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8018ffa:	4604      	mov	r4, r0
 8018ffc:	460e      	mov	r6, r1
 8018ffe:	f100 073c 	add.w	r7, r0, #60	; 0x3c
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019002:	b96b      	cbnz	r3, 8019020 <move_window.part.7+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019004:	4632      	mov	r2, r6
 8019006:	4639      	mov	r1, r7
 8019008:	2301      	movs	r3, #1
 801900a:	7860      	ldrb	r0, [r4, #1]
 801900c:	f7ff fed6 	bl	8018dbc <disk_read>
 8019010:	2800      	cmp	r0, #0
 8019012:	bf1a      	itte	ne
 8019014:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
 8019018:	2001      	movne	r0, #1
 801901a:	2000      	moveq	r0, #0
			fs->winsect = sector;
 801901c:	63a6      	str	r6, [r4, #56]	; 0x38
 801901e:	e01f      	b.n	8019060 <move_window.part.7+0x6c>
		wsect = fs->winsect;	/* Current sector number */
 8019020:	6b85      	ldr	r5, [r0, #56]	; 0x38
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019022:	2301      	movs	r3, #1
 8019024:	4639      	mov	r1, r7
 8019026:	7840      	ldrb	r0, [r0, #1]
 8019028:	462a      	mov	r2, r5
 801902a:	f7ff fed5 	bl	8018dd8 <disk_write>
 801902e:	b9b0      	cbnz	r0, 801905e <move_window.part.7+0x6a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019030:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019032:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8019034:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 8019036:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019038:	4293      	cmp	r3, r2
 801903a:	d2e3      	bcs.n	8019004 <move_window.part.7+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801903c:	f894 8002 	ldrb.w	r8, [r4, #2]
 8019040:	f1b8 0f01 	cmp.w	r8, #1
 8019044:	7860      	ldrb	r0, [r4, #1]
 8019046:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 801904a:	f04f 0301 	mov.w	r3, #1
 801904e:	4639      	mov	r1, r7
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019050:	d9d8      	bls.n	8019004 <move_window.part.7+0x10>
					wsect += fs->fsize;
 8019052:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8019054:	4415      	add	r5, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8019056:	462a      	mov	r2, r5
 8019058:	f7ff febe 	bl	8018dd8 <disk_write>
 801905c:	e7f0      	b.n	8019040 <move_window.part.7+0x4c>
			res = FR_DISK_ERR;
 801905e:	2001      	movs	r0, #1
}
 8019060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019064 <sync_fs>:
{
 8019064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019066:	78c3      	ldrb	r3, [r0, #3]
{
 8019068:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801906a:	b95b      	cbnz	r3, 8019084 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801906c:	7823      	ldrb	r3, [r4, #0]
 801906e:	2b03      	cmp	r3, #3
 8019070:	d029      	beq.n	80190c6 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8019072:	2200      	movs	r2, #0
 8019074:	7860      	ldrb	r0, [r4, #1]
 8019076:	4611      	mov	r1, r2
 8019078:	f7ff febc 	bl	8018df4 <disk_ioctl>
			res = FR_DISK_ERR;
 801907c:	3000      	adds	r0, #0
 801907e:	bf18      	it	ne
 8019080:	2001      	movne	r0, #1
}
 8019082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8019084:	6b85      	ldr	r5, [r0, #56]	; 0x38
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019086:	f100 073c 	add.w	r7, r0, #60	; 0x3c
 801908a:	2301      	movs	r3, #1
 801908c:	7840      	ldrb	r0, [r0, #1]
 801908e:	462a      	mov	r2, r5
 8019090:	4639      	mov	r1, r7
 8019092:	f7ff fea1 	bl	8018dd8 <disk_write>
 8019096:	2800      	cmp	r0, #0
 8019098:	d158      	bne.n	801914c <sync_fs+0xe8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801909a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801909c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801909e:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 80190a0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80190a2:	429a      	cmp	r2, r3
 80190a4:	d2e2      	bcs.n	801906c <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80190a6:	78a6      	ldrb	r6, [r4, #2]
 80190a8:	2e01      	cmp	r6, #1
 80190aa:	d801      	bhi.n	80190b0 <sync_fs+0x4c>
 80190ac:	e7de      	b.n	801906c <sync_fs+0x8>
 80190ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 80190b0:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80190b2:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80190b4:	2301      	movs	r3, #1
 80190b6:	4639      	mov	r1, r7
 80190b8:	462a      	mov	r2, r5
 80190ba:	7860      	ldrb	r0, [r4, #1]
 80190bc:	f7ff fe8c 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80190c0:	2e01      	cmp	r6, #1
 80190c2:	d1f4      	bne.n	80190ae <sync_fs+0x4a>
 80190c4:	e7d2      	b.n	801906c <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80190c6:	7925      	ldrb	r5, [r4, #4]
 80190c8:	2d01      	cmp	r5, #1
 80190ca:	d1d2      	bne.n	8019072 <sync_fs+0xe>
		*d++ = (BYTE)val;
 80190cc:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80190d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80190d4:	2100      	movs	r1, #0
	*ptr++ = (BYTE)val; val >>= 8;
 80190d6:	2700      	movs	r7, #0
 80190d8:	4618      	mov	r0, r3
 80190da:	f006 fb1b 	bl	801f714 <memset>
 80190de:	4603      	mov	r3, r0
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80190e0:	69a0      	ldr	r0, [r4, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 80190e2:	463e      	mov	r6, r7
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80190e4:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80190e6:	4619      	mov	r1, r3
	*ptr++ = (BYTE)val; val >>= 8;
 80190e8:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80190ec:	f360 0707 	bfi	r7, r0, #0, #8
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80190f0:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 80190f2:	f362 0607 	bfi	r6, r2, #0, #8
 80190f6:	f36c 270f 	bfi	r7, ip, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80190fa:	ea4f 4c10 	mov.w	ip, r0, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 80190fe:	0a15      	lsrs	r5, r2, #8
 8019100:	f36c 4717 	bfi	r7, ip, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8019104:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8019106:	f365 260f 	bfi	r6, r5, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801910a:	0c15      	lsrs	r5, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801910c:	f360 671f 	bfi	r7, r0, #24, #8
			fs->winsect = fs->volbase + 1;
 8019110:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 8019112:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8019114:	f365 4617 	bfi	r6, r5, #16, #8
			fs->winsect = fs->volbase + 1;
 8019118:	3001      	adds	r0, #1
	*ptr++ = (BYTE)val; val >>= 8;
 801911a:	2555      	movs	r5, #85	; 0x55
	*ptr++ = (BYTE)val; val >>= 8;
 801911c:	f8c4 7224 	str.w	r7, [r4, #548]	; 0x224
 8019120:	f362 661f 	bfi	r6, r2, #24, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8019124:	f884 523a 	strb.w	r5, [r4, #570]	; 0x23a
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8019128:	4602      	mov	r2, r0
			fs->winsect = fs->volbase + 1;
 801912a:	63a0      	str	r0, [r4, #56]	; 0x38
	*ptr++ = (BYTE)val;
 801912c:	27aa      	movs	r7, #170	; 0xaa
	*ptr++ = (BYTE)val; val >>= 8;
 801912e:	4808      	ldr	r0, [pc, #32]	; (8019150 <sync_fs+0xec>)
 8019130:	4d08      	ldr	r5, [pc, #32]	; (8019154 <sync_fs+0xf0>)
 8019132:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
 8019136:	f8c4 6228 	str.w	r6, [r4, #552]	; 0x228
	*ptr++ = (BYTE)val;
 801913a:	f884 723b 	strb.w	r7, [r4, #571]	; 0x23b
	*ptr++ = (BYTE)val; val >>= 8;
 801913e:	63e5      	str	r5, [r4, #60]	; 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8019140:	7860      	ldrb	r0, [r4, #1]
 8019142:	f7ff fe49 	bl	8018dd8 <disk_write>
			fs->fsi_flag = 0;
 8019146:	2300      	movs	r3, #0
 8019148:	7123      	strb	r3, [r4, #4]
 801914a:	e792      	b.n	8019072 <sync_fs+0xe>
			res = FR_DISK_ERR;
 801914c:	2001      	movs	r0, #1
}
 801914e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019150:	61417272 	.word	0x61417272
 8019154:	41615252 	.word	0x41615252

08019158 <put_fat.part.9>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8019158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
 801915c:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 801915e:	4604      	mov	r4, r0
 8019160:	460d      	mov	r5, r1
 8019162:	4617      	mov	r7, r2
		switch (fs->fs_type) {
 8019164:	2b02      	cmp	r3, #2
 8019166:	f000 808b 	beq.w	8019280 <put_fat.part.9+0x128>
 801916a:	2b03      	cmp	r3, #3
 801916c:	d062      	beq.n	8019234 <put_fat.part.9+0xdc>
 801916e:	2b01      	cmp	r3, #1
 8019170:	d002      	beq.n	8019178 <put_fat.part.9+0x20>
	FRESULT res = FR_INT_ERR;
 8019172:	2002      	movs	r0, #2
}
 8019174:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bc = (UINT)clst; bc += bc / 2;
 8019178:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801917c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 801917e:	f8d0 a038 	ldr.w	sl, [r0, #56]	; 0x38
 8019182:	f100 063c 	add.w	r6, r0, #60	; 0x3c
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019186:	eb02 2958 	add.w	r9, r2, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 801918a:	45d1      	cmp	r9, sl
 801918c:	f040 80f0 	bne.w	8019370 <put_fat.part.9+0x218>
			p = fs->win + bc++ % SS(fs);
 8019190:	f108 0901 	add.w	r9, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8019194:	f015 0a01 	ands.w	sl, r5, #1
			p = fs->win + bc++ % SS(fs);
 8019198:	f3c8 0808 	ubfx	r8, r8, #0, #9
 801919c:	ea4f 2259 	mov.w	r2, r9, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80191a0:	f000 8116 	beq.w	80193d0 <put_fat.part.9+0x278>
 80191a4:	f816 3008 	ldrb.w	r3, [r6, r8]
			fs->wflag = 1;
 80191a8:	2101      	movs	r1, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80191aa:	f003 030f 	and.w	r3, r3, #15
 80191ae:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 80191b2:	f806 3008 	strb.w	r3, [r6, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80191b6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 80191b8:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80191bc:	4415      	add	r5, r2
			fs->wflag = 1;
 80191be:	70e1      	strb	r1, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80191c0:	4545      	cmp	r5, r8
 80191c2:	f000 8122 	beq.w	801940a <put_fat.part.9+0x2b2>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80191c6:	2301      	movs	r3, #1
 80191c8:	4642      	mov	r2, r8
 80191ca:	4631      	mov	r1, r6
 80191cc:	7860      	ldrb	r0, [r4, #1]
 80191ce:	f7ff fe03 	bl	8018dd8 <disk_write>
 80191d2:	2800      	cmp	r0, #0
 80191d4:	f040 80f9 	bne.w	80193ca <put_fat.part.9+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80191d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80191da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80191dc:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 80191e0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80191e2:	429a      	cmp	r2, r3
 80191e4:	d212      	bcs.n	801920c <put_fat.part.9+0xb4>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80191e6:	f894 b002 	ldrb.w	fp, [r4, #2]
 80191ea:	f1bb 0f01 	cmp.w	fp, #1
 80191ee:	d801      	bhi.n	80191f4 <put_fat.part.9+0x9c>
 80191f0:	e00c      	b.n	801920c <put_fat.part.9+0xb4>
 80191f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 80191f4:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80191f6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80191fa:	2301      	movs	r3, #1
 80191fc:	4631      	mov	r1, r6
 80191fe:	4642      	mov	r2, r8
 8019200:	7860      	ldrb	r0, [r4, #1]
 8019202:	f7ff fde9 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019206:	f1bb 0f01 	cmp.w	fp, #1
 801920a:	d1f2      	bne.n	80191f2 <put_fat.part.9+0x9a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801920c:	2301      	movs	r3, #1
 801920e:	462a      	mov	r2, r5
 8019210:	4631      	mov	r1, r6
 8019212:	7860      	ldrb	r0, [r4, #1]
 8019214:	f7ff fdd2 	bl	8018dbc <disk_read>
 8019218:	2800      	cmp	r0, #0
 801921a:	f040 80a3 	bne.w	8019364 <put_fat.part.9+0x20c>
			p = fs->win + bc % SS(fs);
 801921e:	f3c9 0908 	ubfx	r9, r9, #0, #9
			fs->winsect = sector;
 8019222:	63a5      	str	r5, [r4, #56]	; 0x38
			p = fs->win + bc % SS(fs);
 8019224:	444e      	add	r6, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8019226:	f1ba 0f00 	cmp.w	sl, #0
 801922a:	f000 80df 	beq.w	80193ec <put_fat.part.9+0x294>
 801922e:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8019232:	e0e1      	b.n	80193f8 <put_fat.part.9+0x2a0>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8019234:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8019236:	f100 063c 	add.w	r6, r0, #60	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 801923a:	f8d0 9038 	ldr.w	r9, [r0, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801923e:	eb03 18d1 	add.w	r8, r3, r1, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019242:	45c8      	cmp	r8, r9
 8019244:	d161      	bne.n	801930a <put_fat.part.9+0x1b2>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8019246:	00ad      	lsls	r5, r5, #2
 8019248:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
	*ptr++ = (BYTE)val; val >>= 8;
 801924c:	2300      	movs	r3, #0
			fs->wflag = 1;
 801924e:	2101      	movs	r1, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8019250:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
			fs->wflag = 1;
 8019254:	4618      	mov	r0, r3
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8019256:	1972      	adds	r2, r6, r5
	rv = rv << 8 | ptr[2];
 8019258:	8852      	ldrh	r2, [r2, #2]
	rv = rv << 8 | ptr[0];
 801925a:	0412      	lsls	r2, r2, #16
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801925c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8019260:	433a      	orrs	r2, r7
	*ptr++ = (BYTE)val; val >>= 8;
 8019262:	0a17      	lsrs	r7, r2, #8
 8019264:	f362 0307 	bfi	r3, r2, #0, #8
 8019268:	f367 230f 	bfi	r3, r7, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801926c:	0c17      	lsrs	r7, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801926e:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8019270:	f367 4317 	bfi	r3, r7, #16, #8
 8019274:	f362 631f 	bfi	r3, r2, #24, #8
 8019278:	5173      	str	r3, [r6, r5]
			fs->wflag = 1;
 801927a:	70e1      	strb	r1, [r4, #3]
}
 801927c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8019280:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8019282:	f100 063c 	add.w	r6, r0, #60	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019286:	f8d0 9038 	ldr.w	r9, [r0, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801928a:	eb03 2811 	add.w	r8, r3, r1, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801928e:	45c8      	cmp	r8, r9
 8019290:	d02e      	beq.n	80192f0 <put_fat.part.9+0x198>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019292:	78c3      	ldrb	r3, [r0, #3]
 8019294:	7840      	ldrb	r0, [r0, #1]
 8019296:	b313      	cbz	r3, 80192de <put_fat.part.9+0x186>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019298:	2301      	movs	r3, #1
 801929a:	464a      	mov	r2, r9
 801929c:	4631      	mov	r1, r6
 801929e:	f7ff fd9b 	bl	8018dd8 <disk_write>
 80192a2:	2800      	cmp	r0, #0
 80192a4:	f040 8091 	bne.w	80193ca <put_fat.part.9+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80192a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80192aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80192ac:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 80192b0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80192b2:	429a      	cmp	r2, r3
 80192b4:	d212      	bcs.n	80192dc <put_fat.part.9+0x184>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80192b6:	f894 a002 	ldrb.w	sl, [r4, #2]
 80192ba:	f1ba 0f01 	cmp.w	sl, #1
 80192be:	d801      	bhi.n	80192c4 <put_fat.part.9+0x16c>
 80192c0:	e00c      	b.n	80192dc <put_fat.part.9+0x184>
 80192c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 80192c4:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80192c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80192ca:	2301      	movs	r3, #1
 80192cc:	4631      	mov	r1, r6
 80192ce:	464a      	mov	r2, r9
 80192d0:	7860      	ldrb	r0, [r4, #1]
 80192d2:	f7ff fd81 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80192d6:	f1ba 0f01 	cmp.w	sl, #1
 80192da:	d1f2      	bne.n	80192c2 <put_fat.part.9+0x16a>
 80192dc:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80192de:	2301      	movs	r3, #1
 80192e0:	4642      	mov	r2, r8
 80192e2:	4631      	mov	r1, r6
 80192e4:	f7ff fd6a 	bl	8018dbc <disk_read>
 80192e8:	2800      	cmp	r0, #0
 80192ea:	d13b      	bne.n	8019364 <put_fat.part.9+0x20c>
			fs->winsect = sector;
 80192ec:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80192f0:	006d      	lsls	r5, r5, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80192f2:	f3c7 2207 	ubfx	r2, r7, #8, #8
			fs->wflag = 1;
 80192f6:	2301      	movs	r3, #1
 80192f8:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80192fa:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 80192fe:	5577      	strb	r7, [r6, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8019300:	442e      	add	r6, r5
	*ptr++ = (BYTE)val;
 8019302:	7072      	strb	r2, [r6, #1]
			fs->wflag = 1;
 8019304:	70e3      	strb	r3, [r4, #3]
}
 8019306:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801930a:	78c3      	ldrb	r3, [r0, #3]
 801930c:	7840      	ldrb	r0, [r0, #1]
 801930e:	b313      	cbz	r3, 8019356 <put_fat.part.9+0x1fe>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019310:	2301      	movs	r3, #1
 8019312:	464a      	mov	r2, r9
 8019314:	4631      	mov	r1, r6
 8019316:	f7ff fd5f 	bl	8018dd8 <disk_write>
 801931a:	2800      	cmp	r0, #0
 801931c:	d155      	bne.n	80193ca <put_fat.part.9+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801931e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019322:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8019326:	70e0      	strb	r0, [r4, #3]
 8019328:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801932a:	429a      	cmp	r2, r3
 801932c:	d213      	bcs.n	8019356 <put_fat.part.9+0x1fe>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801932e:	f894 a002 	ldrb.w	sl, [r4, #2]
 8019332:	f1ba 0f01 	cmp.w	sl, #1
 8019336:	d802      	bhi.n	801933e <put_fat.part.9+0x1e6>
 8019338:	e00d      	b.n	8019356 <put_fat.part.9+0x1fe>
 801933a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801933c:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 801933e:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019340:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8019344:	2301      	movs	r3, #1
 8019346:	4631      	mov	r1, r6
 8019348:	464a      	mov	r2, r9
 801934a:	f7ff fd45 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801934e:	f1ba 0f01 	cmp.w	sl, #1
 8019352:	d1f2      	bne.n	801933a <put_fat.part.9+0x1e2>
 8019354:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019356:	2301      	movs	r3, #1
 8019358:	4642      	mov	r2, r8
 801935a:	4631      	mov	r1, r6
 801935c:	f7ff fd2e 	bl	8018dbc <disk_read>
 8019360:	2800      	cmp	r0, #0
 8019362:	d04f      	beq.n	8019404 <put_fat.part.9+0x2ac>
			fs->winsect = sector;
 8019364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 8019368:	2001      	movs	r0, #1
			fs->winsect = sector;
 801936a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 801936c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019370:	78c2      	ldrb	r2, [r0, #3]
 8019372:	7840      	ldrb	r0, [r0, #1]
 8019374:	b1fa      	cbz	r2, 80193b6 <put_fat.part.9+0x25e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019376:	4652      	mov	r2, sl
 8019378:	4631      	mov	r1, r6
 801937a:	f7ff fd2d 	bl	8018dd8 <disk_write>
 801937e:	bb20      	cbnz	r0, 80193ca <put_fat.part.9+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019380:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019384:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 8019388:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801938a:	429a      	cmp	r2, r3
 801938c:	d212      	bcs.n	80193b4 <put_fat.part.9+0x25c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801938e:	f894 b002 	ldrb.w	fp, [r4, #2]
 8019392:	f1bb 0f01 	cmp.w	fp, #1
 8019396:	d801      	bhi.n	801939c <put_fat.part.9+0x244>
 8019398:	e00c      	b.n	80193b4 <put_fat.part.9+0x25c>
 801939a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 801939c:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801939e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80193a2:	2301      	movs	r3, #1
 80193a4:	4631      	mov	r1, r6
 80193a6:	4652      	mov	r2, sl
 80193a8:	7860      	ldrb	r0, [r4, #1]
 80193aa:	f7ff fd15 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80193ae:	f1bb 0f01 	cmp.w	fp, #1
 80193b2:	d1f2      	bne.n	801939a <put_fat.part.9+0x242>
 80193b4:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80193b6:	2301      	movs	r3, #1
 80193b8:	464a      	mov	r2, r9
 80193ba:	4631      	mov	r1, r6
 80193bc:	f7ff fcfe 	bl	8018dbc <disk_read>
 80193c0:	2800      	cmp	r0, #0
 80193c2:	d1cf      	bne.n	8019364 <put_fat.part.9+0x20c>
			fs->winsect = sector;
 80193c4:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 80193c8:	e6e2      	b.n	8019190 <put_fat.part.9+0x38>
	FRESULT res = FR_INT_ERR;
 80193ca:	2001      	movs	r0, #1
}
 80193cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80193d0:	f806 7008 	strb.w	r7, [r6, r8]
			fs->wflag = 1;
 80193d4:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80193d6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 80193d8:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80193dc:	4415      	add	r5, r2
			fs->wflag = 1;
 80193de:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80193e0:	45a8      	cmp	r8, r5
 80193e2:	f47f aef0 	bne.w	80191c6 <put_fat.part.9+0x6e>
			p = fs->win + bc % SS(fs);
 80193e6:	f3c9 0908 	ubfx	r9, r9, #0, #9
 80193ea:	444e      	add	r6, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80193ec:	7833      	ldrb	r3, [r6, #0]
 80193ee:	f3c7 2203 	ubfx	r2, r7, #8, #4
 80193f2:	f023 070f 	bic.w	r7, r3, #15
 80193f6:	4317      	orrs	r7, r2
			fs->wflag = 1;
 80193f8:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80193fa:	7037      	strb	r7, [r6, #0]
			fs->wflag = 1;
 80193fc:	2000      	movs	r0, #0
 80193fe:	70e3      	strb	r3, [r4, #3]
}
 8019400:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8019404:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8019408:	e71d      	b.n	8019246 <put_fat.part.9+0xee>
			p = fs->win + bc % SS(fs);
 801940a:	f3c9 0908 	ubfx	r9, r9, #0, #9
 801940e:	444e      	add	r6, r9
 8019410:	e70d      	b.n	801922e <put_fat.part.9+0xd6>
 8019412:	bf00      	nop

08019414 <remove_chain>:
{
 8019414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8019418:	2901      	cmp	r1, #1
{
 801941a:	b085      	sub	sp, #20
 801941c:	9000      	str	r0, [sp, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801941e:	d914      	bls.n	801944a <remove_chain+0x36>
	FATFS *fs = obj->fs;
 8019420:	6804      	ldr	r4, [r0, #0]
 8019422:	460d      	mov	r5, r1
 8019424:	4606      	mov	r6, r0
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8019426:	6a23      	ldr	r3, [r4, #32]
 8019428:	428b      	cmp	r3, r1
 801942a:	d90e      	bls.n	801944a <remove_chain+0x36>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801942c:	b98a      	cbnz	r2, 8019452 <remove_chain+0x3e>
 801942e:	46a3      	mov	fp, r4
 8019430:	f104 0a3c 	add.w	sl, r4, #60	; 0x3c
 8019434:	465e      	mov	r6, fp
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019436:	429d      	cmp	r5, r3
 8019438:	d207      	bcs.n	801944a <remove_chain+0x36>
		switch (fs->fs_type) {
 801943a:	7833      	ldrb	r3, [r6, #0]
 801943c:	2b02      	cmp	r3, #2
 801943e:	f000 8106 	beq.w	801964e <remove_chain+0x23a>
 8019442:	2b03      	cmp	r3, #3
 8019444:	d068      	beq.n	8019518 <remove_chain+0x104>
 8019446:	2b01      	cmp	r3, #1
 8019448:	d014      	beq.n	8019474 <remove_chain+0x60>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801944a:	2002      	movs	r0, #2
}
 801944c:	b005      	add	sp, #20
 801944e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8019452:	4293      	cmp	r3, r2
 8019454:	d9f9      	bls.n	801944a <remove_chain+0x36>
 8019456:	2a01      	cmp	r2, #1
 8019458:	d9f7      	bls.n	801944a <remove_chain+0x36>
 801945a:	4611      	mov	r1, r2
 801945c:	4620      	mov	r0, r4
 801945e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019462:	f7ff fe79 	bl	8019158 <put_fat.part.9>
		if (res != FR_OK) return res;
 8019466:	2800      	cmp	r0, #0
 8019468:	d1f0      	bne.n	801944c <remove_chain+0x38>
 801946a:	f8d6 b000 	ldr.w	fp, [r6]
 801946e:	f8db 3020 	ldr.w	r3, [fp, #32]
 8019472:	e7dd      	b.n	8019430 <remove_chain+0x1c>
			bc = (UINT)clst; bc += bc / 2;
 8019474:	eb05 0755 	add.w	r7, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019478:	6af2      	ldr	r2, [r6, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 801947a:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801947e:	eb02 2857 	add.w	r8, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019482:	45c8      	cmp	r8, r9
 8019484:	f040 8127 	bne.w	80196d6 <remove_chain+0x2c2>
			wc = fs->win[bc++ % SS(fs)];
 8019488:	f3c7 0308 	ubfx	r3, r7, #0, #9
 801948c:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801948e:	eb02 2857 	add.w	r8, r2, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8019492:	4433      	add	r3, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019494:	45c8      	cmp	r8, r9
			wc = fs->win[bc++ % SS(fs)];
 8019496:	f893 b03c 	ldrb.w	fp, [r3, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 801949a:	f000 8260 	beq.w	801995e <remove_chain+0x54a>
 801949e:	f106 023c 	add.w	r2, r6, #60	; 0x3c
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80194a2:	78f3      	ldrb	r3, [r6, #3]
 80194a4:	7870      	ldrb	r0, [r6, #1]
 80194a6:	4611      	mov	r1, r2
 80194a8:	9201      	str	r2, [sp, #4]
 80194aa:	b333      	cbz	r3, 80194fa <remove_chain+0xe6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80194ac:	2301      	movs	r3, #1
 80194ae:	464a      	mov	r2, r9
 80194b0:	f7ff fc92 	bl	8018dd8 <disk_write>
 80194b4:	2800      	cmp	r0, #0
 80194b6:	f040 816f 	bne.w	8019798 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80194ba:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80194bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80194be:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 80194c2:	70f0      	strb	r0, [r6, #3]
 80194c4:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80194c6:	429a      	cmp	r2, r3
 80194c8:	d217      	bcs.n	80194fa <remove_chain+0xe6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80194ca:	f896 c002 	ldrb.w	ip, [r6, #2]
 80194ce:	4662      	mov	r2, ip
 80194d0:	2a01      	cmp	r2, #1
 80194d2:	d912      	bls.n	80194fa <remove_chain+0xe6>
 80194d4:	9402      	str	r4, [sp, #8]
 80194d6:	4664      	mov	r4, ip
 80194d8:	9503      	str	r5, [sp, #12]
 80194da:	9d01      	ldr	r5, [sp, #4]
 80194dc:	e001      	b.n	80194e2 <remove_chain+0xce>
 80194de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80194e0:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 80194e2:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80194e4:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80194e6:	2301      	movs	r3, #1
 80194e8:	4629      	mov	r1, r5
 80194ea:	464a      	mov	r2, r9
 80194ec:	f7ff fc74 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80194f0:	2c01      	cmp	r4, #1
 80194f2:	d1f4      	bne.n	80194de <remove_chain+0xca>
 80194f4:	7870      	ldrb	r0, [r6, #1]
 80194f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80194fa:	9901      	ldr	r1, [sp, #4]
 80194fc:	2301      	movs	r3, #1
 80194fe:	4642      	mov	r2, r8
 8019500:	f7ff fc5c 	bl	8018dbc <disk_read>
 8019504:	2800      	cmp	r0, #0
 8019506:	f000 8228 	beq.w	801995a <remove_chain+0x546>
			fs->winsect = sector;
 801950a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801950e:	2001      	movs	r0, #1
			fs->winsect = sector;
 8019510:	63b3      	str	r3, [r6, #56]	; 0x38
}
 8019512:	b005      	add	sp, #20
 8019514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019518:	6af7      	ldr	r7, [r6, #44]	; 0x2c
 801951a:	f106 083c 	add.w	r8, r6, #60	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 801951e:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019522:	eb07 17d5 	add.w	r7, r7, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019526:	454f      	cmp	r7, r9
 8019528:	f040 8107 	bne.w	801973a <remove_chain+0x326>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801952c:	00ab      	lsls	r3, r5, #2
 801952e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8019532:	eb08 0203 	add.w	r2, r8, r3
	rv = rv << 8 | ptr[0];
 8019536:	f818 7003 	ldrb.w	r7, [r8, r3]
	rv = rv << 8 | ptr[1];
 801953a:	f892 b001 	ldrb.w	fp, [r2, #1]
	rv = rv << 8 | ptr[2];
 801953e:	8853      	ldrh	r3, [r2, #2]
	rv = rv << 8 | ptr[1];
 8019540:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
	rv = rv << 8 | ptr[0];
 8019544:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8019548:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
 801954c:	2f00      	cmp	r7, #0
 801954e:	f000 8214 	beq.w	801997a <remove_chain+0x566>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8019552:	2f01      	cmp	r7, #1
 8019554:	f43f af79 	beq.w	801944a <remove_chain+0x36>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8019558:	6a23      	ldr	r3, [r4, #32]
 801955a:	42ab      	cmp	r3, r5
 801955c:	f67f af75 	bls.w	801944a <remove_chain+0x36>
		switch (fs->fs_type) {
 8019560:	7823      	ldrb	r3, [r4, #0]
 8019562:	2b02      	cmp	r3, #2
 8019564:	f000 8165 	beq.w	8019832 <remove_chain+0x41e>
 8019568:	2b03      	cmp	r3, #3
 801956a:	f000 8119 	beq.w	80197a0 <remove_chain+0x38c>
 801956e:	2b01      	cmp	r3, #1
 8019570:	f47f af6b 	bne.w	801944a <remove_chain+0x36>
			bc = (UINT)clst; bc += bc / 2;
 8019574:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019578:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 801957a:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801957e:	eb02 2856 	add.w	r8, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019582:	45c8      	cmp	r8, r9
 8019584:	d02e      	beq.n	80195e4 <remove_chain+0x1d0>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019586:	78e2      	ldrb	r2, [r4, #3]
 8019588:	7860      	ldrb	r0, [r4, #1]
 801958a:	b30a      	cbz	r2, 80195d0 <remove_chain+0x1bc>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801958c:	464a      	mov	r2, r9
 801958e:	4651      	mov	r1, sl
 8019590:	f7ff fc22 	bl	8018dd8 <disk_write>
 8019594:	2800      	cmp	r0, #0
 8019596:	f040 80ff 	bne.w	8019798 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801959a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801959c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801959e:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 80195a2:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80195a4:	429a      	cmp	r2, r3
 80195a6:	d212      	bcs.n	80195ce <remove_chain+0x1ba>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80195a8:	f894 b002 	ldrb.w	fp, [r4, #2]
 80195ac:	f1bb 0f01 	cmp.w	fp, #1
 80195b0:	d801      	bhi.n	80195b6 <remove_chain+0x1a2>
 80195b2:	e00c      	b.n	80195ce <remove_chain+0x1ba>
 80195b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 80195b6:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80195b8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80195bc:	2301      	movs	r3, #1
 80195be:	4651      	mov	r1, sl
 80195c0:	464a      	mov	r2, r9
 80195c2:	7860      	ldrb	r0, [r4, #1]
 80195c4:	f7ff fc08 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80195c8:	f1bb 0f01 	cmp.w	fp, #1
 80195cc:	d1f2      	bne.n	80195b4 <remove_chain+0x1a0>
 80195ce:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80195d0:	2301      	movs	r3, #1
 80195d2:	4642      	mov	r2, r8
 80195d4:	4651      	mov	r1, sl
 80195d6:	f7ff fbf1 	bl	8018dbc <disk_read>
 80195da:	2800      	cmp	r0, #0
 80195dc:	f040 8168 	bne.w	80198b0 <remove_chain+0x49c>
			fs->winsect = sector;
 80195e0:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
			p = fs->win + bc++ % SS(fs);
 80195e4:	f106 0801 	add.w	r8, r6, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80195e8:	f015 0901 	ands.w	r9, r5, #1
			p = fs->win + bc++ % SS(fs);
 80195ec:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80195f0:	ea4f 2258 	mov.w	r2, r8, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80195f4:	f000 8171 	beq.w	80198da <remove_chain+0x4c6>
 80195f8:	f81a 3006 	ldrb.w	r3, [sl, r6]
 80195fc:	f003 030f 	and.w	r3, r3, #15
 8019600:	f80a 3006 	strb.w	r3, [sl, r6]
			fs->wflag = 1;
 8019604:	f04f 0301 	mov.w	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 801960a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801960c:	4416      	add	r6, r2
			fs->wflag = 1;
 801960e:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019610:	42b5      	cmp	r5, r6
 8019612:	f040 816c 	bne.w	80198ee <remove_chain+0x4da>
			p = fs->win + bc % SS(fs);
 8019616:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801961a:	2300      	movs	r3, #0
			p = fs->win + bc % SS(fs);
 801961c:	44d0      	add	r8, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801961e:	f888 3000 	strb.w	r3, [r8]
			fs->wflag = 1;
 8019622:	f04f 0301 	mov.w	r3, #1
 8019626:	70e3      	strb	r3, [r4, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8019628:	6a22      	ldr	r2, [r4, #32]
 801962a:	69a3      	ldr	r3, [r4, #24]
 801962c:	1e91      	subs	r1, r2, #2
 801962e:	428b      	cmp	r3, r1
 8019630:	d205      	bcs.n	801963e <remove_chain+0x22a>
			fs->fsi_flag |= 1;
 8019632:	7921      	ldrb	r1, [r4, #4]
			fs->free_clst++;
 8019634:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
 8019636:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
 801963a:	61a3      	str	r3, [r4, #24]
			fs->fsi_flag |= 1;
 801963c:	7121      	strb	r1, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801963e:	42ba      	cmp	r2, r7
 8019640:	f240 819b 	bls.w	801997a <remove_chain+0x566>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8019644:	9b00      	ldr	r3, [sp, #0]
 8019646:	463d      	mov	r5, r7
 8019648:	681e      	ldr	r6, [r3, #0]
 801964a:	6a33      	ldr	r3, [r6, #32]
 801964c:	e6f3      	b.n	8019436 <remove_chain+0x22>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801964e:	6af7      	ldr	r7, [r6, #44]	; 0x2c
 8019650:	f106 083c 	add.w	r8, r6, #60	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019654:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019658:	eb07 2715 	add.w	r7, r7, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801965c:	454f      	cmp	r7, r9
 801965e:	d02e      	beq.n	80196be <remove_chain+0x2aa>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019660:	78f3      	ldrb	r3, [r6, #3]
 8019662:	7870      	ldrb	r0, [r6, #1]
 8019664:	b313      	cbz	r3, 80196ac <remove_chain+0x298>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019666:	2301      	movs	r3, #1
 8019668:	464a      	mov	r2, r9
 801966a:	4641      	mov	r1, r8
 801966c:	f7ff fbb4 	bl	8018dd8 <disk_write>
 8019670:	2800      	cmp	r0, #0
 8019672:	f040 8091 	bne.w	8019798 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019676:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8019678:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801967a:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 801967e:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019680:	429a      	cmp	r2, r3
 8019682:	d212      	bcs.n	80196aa <remove_chain+0x296>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019684:	f896 b002 	ldrb.w	fp, [r6, #2]
 8019688:	f1bb 0f01 	cmp.w	fp, #1
 801968c:	d801      	bhi.n	8019692 <remove_chain+0x27e>
 801968e:	e00c      	b.n	80196aa <remove_chain+0x296>
 8019690:	6a73      	ldr	r3, [r6, #36]	; 0x24
					wsect += fs->fsize;
 8019692:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019694:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8019698:	2301      	movs	r3, #1
 801969a:	4641      	mov	r1, r8
 801969c:	464a      	mov	r2, r9
 801969e:	7870      	ldrb	r0, [r6, #1]
 80196a0:	f7ff fb9a 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80196a4:	f1bb 0f01 	cmp.w	fp, #1
 80196a8:	d1f2      	bne.n	8019690 <remove_chain+0x27c>
 80196aa:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80196ac:	2301      	movs	r3, #1
 80196ae:	463a      	mov	r2, r7
 80196b0:	4641      	mov	r1, r8
 80196b2:	f7ff fb83 	bl	8018dbc <disk_read>
 80196b6:	2800      	cmp	r0, #0
 80196b8:	f47f af27 	bne.w	801950a <remove_chain+0xf6>
			fs->winsect = sector;
 80196bc:	63b7      	str	r7, [r6, #56]	; 0x38
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80196be:	006b      	lsls	r3, r5, #1
 80196c0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80196c4:	eb08 0203 	add.w	r2, r8, r3
	rv = rv << 8 | ptr[0];
 80196c8:	f818 7003 	ldrb.w	r7, [r8, r3]
 80196cc:	f892 b001 	ldrb.w	fp, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80196d0:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 80196d4:	e73a      	b.n	801954c <remove_chain+0x138>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80196d6:	78f2      	ldrb	r2, [r6, #3]
 80196d8:	f106 0b3c 	add.w	fp, r6, #60	; 0x3c
 80196dc:	7870      	ldrb	r0, [r6, #1]
 80196de:	b1fa      	cbz	r2, 8019720 <remove_chain+0x30c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80196e0:	464a      	mov	r2, r9
 80196e2:	4659      	mov	r1, fp
 80196e4:	f7ff fb78 	bl	8018dd8 <disk_write>
 80196e8:	2800      	cmp	r0, #0
 80196ea:	d155      	bne.n	8019798 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80196ec:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80196ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80196f0:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 80196f4:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80196f6:	429a      	cmp	r2, r3
 80196f8:	d211      	bcs.n	801971e <remove_chain+0x30a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80196fa:	78b2      	ldrb	r2, [r6, #2]
 80196fc:	2a01      	cmp	r2, #1
 80196fe:	d90e      	bls.n	801971e <remove_chain+0x30a>
 8019700:	9401      	str	r4, [sp, #4]
 8019702:	4614      	mov	r4, r2
 8019704:	e000      	b.n	8019708 <remove_chain+0x2f4>
 8019706:	6a73      	ldr	r3, [r6, #36]	; 0x24
					wsect += fs->fsize;
 8019708:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801970a:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801970c:	2301      	movs	r3, #1
 801970e:	4659      	mov	r1, fp
 8019710:	464a      	mov	r2, r9
 8019712:	7870      	ldrb	r0, [r6, #1]
 8019714:	f7ff fb60 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019718:	2c01      	cmp	r4, #1
 801971a:	d1f4      	bne.n	8019706 <remove_chain+0x2f2>
 801971c:	9c01      	ldr	r4, [sp, #4]
 801971e:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019720:	4659      	mov	r1, fp
 8019722:	2301      	movs	r3, #1
 8019724:	4642      	mov	r2, r8
 8019726:	f7ff fb49 	bl	8018dbc <disk_read>
 801972a:	2800      	cmp	r0, #0
 801972c:	f47f aeed 	bne.w	801950a <remove_chain+0xf6>
			fs->winsect = sector;
 8019730:	46c1      	mov	r9, r8
 8019732:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8019734:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38
 8019738:	e6a6      	b.n	8019488 <remove_chain+0x74>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801973a:	78f3      	ldrb	r3, [r6, #3]
 801973c:	7870      	ldrb	r0, [r6, #1]
 801973e:	b30b      	cbz	r3, 8019784 <remove_chain+0x370>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019740:	2301      	movs	r3, #1
 8019742:	464a      	mov	r2, r9
 8019744:	4641      	mov	r1, r8
 8019746:	f7ff fb47 	bl	8018dd8 <disk_write>
 801974a:	bb28      	cbnz	r0, 8019798 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801974c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 801974e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019750:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8019754:	70f0      	strb	r0, [r6, #3]
 8019756:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019758:	429a      	cmp	r2, r3
 801975a:	d213      	bcs.n	8019784 <remove_chain+0x370>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801975c:	f896 b002 	ldrb.w	fp, [r6, #2]
 8019760:	f1bb 0f01 	cmp.w	fp, #1
 8019764:	d802      	bhi.n	801976c <remove_chain+0x358>
 8019766:	e00d      	b.n	8019784 <remove_chain+0x370>
 8019768:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801976a:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 801976c:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801976e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8019772:	2301      	movs	r3, #1
 8019774:	4641      	mov	r1, r8
 8019776:	464a      	mov	r2, r9
 8019778:	f7ff fb2e 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801977c:	f1bb 0f01 	cmp.w	fp, #1
 8019780:	d1f2      	bne.n	8019768 <remove_chain+0x354>
 8019782:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019784:	2301      	movs	r3, #1
 8019786:	463a      	mov	r2, r7
 8019788:	4641      	mov	r1, r8
 801978a:	f7ff fb17 	bl	8018dbc <disk_read>
 801978e:	2800      	cmp	r0, #0
 8019790:	f47f aebb 	bne.w	801950a <remove_chain+0xf6>
			fs->winsect = sector;
 8019794:	63b7      	str	r7, [r6, #56]	; 0x38
 8019796:	e6c9      	b.n	801952c <remove_chain+0x118>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8019798:	2001      	movs	r0, #1
}
 801979a:	b005      	add	sp, #20
 801979c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80197a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 80197a2:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80197a6:	eb06 16d5 	add.w	r6, r6, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80197aa:	4546      	cmp	r6, r8
 80197ac:	d02d      	beq.n	801980a <remove_chain+0x3f6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80197ae:	78e3      	ldrb	r3, [r4, #3]
 80197b0:	7860      	ldrb	r0, [r4, #1]
 80197b2:	b313      	cbz	r3, 80197fa <remove_chain+0x3e6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80197b4:	2301      	movs	r3, #1
 80197b6:	4642      	mov	r2, r8
 80197b8:	4651      	mov	r1, sl
 80197ba:	f7ff fb0d 	bl	8018dd8 <disk_write>
 80197be:	2800      	cmp	r0, #0
 80197c0:	d1ea      	bne.n	8019798 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80197c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80197c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80197c6:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 80197ca:	70e0      	strb	r0, [r4, #3]
 80197cc:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80197ce:	429a      	cmp	r2, r3
 80197d0:	d213      	bcs.n	80197fa <remove_chain+0x3e6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80197d2:	f894 9002 	ldrb.w	r9, [r4, #2]
 80197d6:	f1b9 0f01 	cmp.w	r9, #1
 80197da:	d802      	bhi.n	80197e2 <remove_chain+0x3ce>
 80197dc:	e00d      	b.n	80197fa <remove_chain+0x3e6>
 80197de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80197e0:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80197e2:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80197e4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80197e8:	2301      	movs	r3, #1
 80197ea:	4651      	mov	r1, sl
 80197ec:	4642      	mov	r2, r8
 80197ee:	f7ff faf3 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80197f2:	f1b9 0f01 	cmp.w	r9, #1
 80197f6:	d1f2      	bne.n	80197de <remove_chain+0x3ca>
 80197f8:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80197fa:	2301      	movs	r3, #1
 80197fc:	4632      	mov	r2, r6
 80197fe:	4651      	mov	r1, sl
 8019800:	f7ff fadc 	bl	8018dbc <disk_read>
 8019804:	2800      	cmp	r0, #0
 8019806:	d153      	bne.n	80198b0 <remove_chain+0x49c>
			fs->winsect = sector;
 8019808:	63a6      	str	r6, [r4, #56]	; 0x38
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801980a:	00ad      	lsls	r5, r5, #2
	*ptr++ = (BYTE)val; val >>= 8;
 801980c:	f04f 0100 	mov.w	r1, #0
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8019810:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8019814:	eb0a 0205 	add.w	r2, sl, r5
	rv = rv << 8 | ptr[2];
 8019818:	8853      	ldrh	r3, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801981a:	f80a 1005 	strb.w	r1, [sl, r5]
	*ptr++ = (BYTE)val; val >>= 8;
 801981e:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8019820:	7051      	strb	r1, [r2, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8019822:	7091      	strb	r1, [r2, #2]
 8019824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
 8019828:	70d3      	strb	r3, [r2, #3]
			fs->wflag = 1;
 801982a:	f04f 0301 	mov.w	r3, #1
 801982e:	70e3      	strb	r3, [r4, #3]
 8019830:	e6fa      	b.n	8019628 <remove_chain+0x214>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8019832:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019834:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8019838:	eb06 2615 	add.w	r6, r6, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801983c:	4546      	cmp	r6, r8
 801983e:	d03e      	beq.n	80198be <remove_chain+0x4aa>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019840:	78e3      	ldrb	r3, [r4, #3]
 8019842:	7860      	ldrb	r0, [r4, #1]
 8019844:	b30b      	cbz	r3, 801988a <remove_chain+0x476>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019846:	2301      	movs	r3, #1
 8019848:	4642      	mov	r2, r8
 801984a:	4651      	mov	r1, sl
 801984c:	f7ff fac4 	bl	8018dd8 <disk_write>
 8019850:	2800      	cmp	r0, #0
 8019852:	d1a1      	bne.n	8019798 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019854:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019858:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 801985c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801985e:	429a      	cmp	r2, r3
 8019860:	d212      	bcs.n	8019888 <remove_chain+0x474>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019862:	f894 9002 	ldrb.w	r9, [r4, #2]
 8019866:	f1b9 0f01 	cmp.w	r9, #1
 801986a:	d801      	bhi.n	8019870 <remove_chain+0x45c>
 801986c:	e00c      	b.n	8019888 <remove_chain+0x474>
 801986e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 8019870:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019872:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8019876:	2301      	movs	r3, #1
 8019878:	4651      	mov	r1, sl
 801987a:	4642      	mov	r2, r8
 801987c:	7860      	ldrb	r0, [r4, #1]
 801987e:	f7ff faab 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019882:	f1b9 0f01 	cmp.w	r9, #1
 8019886:	d1f2      	bne.n	801986e <remove_chain+0x45a>
 8019888:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801988a:	2301      	movs	r3, #1
 801988c:	4632      	mov	r2, r6
 801988e:	4651      	mov	r1, sl
 8019890:	f7ff fa94 	bl	8018dbc <disk_read>
 8019894:	b960      	cbnz	r0, 80198b0 <remove_chain+0x49c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8019896:	006d      	lsls	r5, r5, #1
			fs->winsect = sector;
 8019898:	63a6      	str	r6, [r4, #56]	; 0x38
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801989a:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 801989e:	eb0a 0305 	add.w	r3, sl, r5
	*ptr++ = (BYTE)val; val >>= 8;
 80198a2:	f80a 0005 	strb.w	r0, [sl, r5]
	*ptr++ = (BYTE)val;
 80198a6:	7058      	strb	r0, [r3, #1]
			fs->wflag = 1;
 80198a8:	f04f 0301 	mov.w	r3, #1
 80198ac:	70e3      	strb	r3, [r4, #3]
 80198ae:	e6bb      	b.n	8019628 <remove_chain+0x214>
			fs->winsect = sector;
 80198b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 80198b4:	2001      	movs	r0, #1
			fs->winsect = sector;
 80198b6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80198b8:	b005      	add	sp, #20
 80198ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80198be:	006d      	lsls	r5, r5, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80198c0:	f04f 0200 	mov.w	r2, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80198c4:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 80198c8:	eb0a 0305 	add.w	r3, sl, r5
	*ptr++ = (BYTE)val; val >>= 8;
 80198cc:	f80a 2005 	strb.w	r2, [sl, r5]
	*ptr++ = (BYTE)val;
 80198d0:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
 80198d2:	f04f 0301 	mov.w	r3, #1
 80198d6:	70e3      	strb	r3, [r4, #3]
 80198d8:	e6a6      	b.n	8019628 <remove_chain+0x214>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80198da:	f80a 9006 	strb.w	r9, [sl, r6]
			fs->wflag = 1;
 80198de:	f04f 0301 	mov.w	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80198e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 80198e4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80198e6:	4416      	add	r6, r2
			fs->wflag = 1;
 80198e8:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80198ea:	42ae      	cmp	r6, r5
 80198ec:	d047      	beq.n	801997e <remove_chain+0x56a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80198ee:	2301      	movs	r3, #1
 80198f0:	462a      	mov	r2, r5
 80198f2:	4651      	mov	r1, sl
 80198f4:	7860      	ldrb	r0, [r4, #1]
 80198f6:	f7ff fa6f 	bl	8018dd8 <disk_write>
 80198fa:	2800      	cmp	r0, #0
 80198fc:	f47f af4c 	bne.w	8019798 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019900:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019904:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8019906:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019908:	429a      	cmp	r2, r3
 801990a:	d212      	bcs.n	8019932 <remove_chain+0x51e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801990c:	f894 b002 	ldrb.w	fp, [r4, #2]
 8019910:	f1bb 0f01 	cmp.w	fp, #1
 8019914:	d801      	bhi.n	801991a <remove_chain+0x506>
 8019916:	e00c      	b.n	8019932 <remove_chain+0x51e>
 8019918:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 801991a:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801991c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8019920:	2301      	movs	r3, #1
 8019922:	4651      	mov	r1, sl
 8019924:	462a      	mov	r2, r5
 8019926:	7860      	ldrb	r0, [r4, #1]
 8019928:	f7ff fa56 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801992c:	f1bb 0f01 	cmp.w	fp, #1
 8019930:	d1f2      	bne.n	8019918 <remove_chain+0x504>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019932:	2301      	movs	r3, #1
 8019934:	4632      	mov	r2, r6
 8019936:	4651      	mov	r1, sl
 8019938:	7860      	ldrb	r0, [r4, #1]
 801993a:	f7ff fa3f 	bl	8018dbc <disk_read>
 801993e:	2800      	cmp	r0, #0
 8019940:	d1b6      	bne.n	80198b0 <remove_chain+0x49c>
			p = fs->win + bc % SS(fs);
 8019942:	f3c8 0808 	ubfx	r8, r8, #0, #9
			fs->winsect = sector;
 8019946:	63a6      	str	r6, [r4, #56]	; 0x38
			p = fs->win + bc % SS(fs);
 8019948:	44d0      	add	r8, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801994a:	f1b9 0f00 	cmp.w	r9, #0
 801994e:	d11a      	bne.n	8019986 <remove_chain+0x572>
 8019950:	f898 3000 	ldrb.w	r3, [r8]
 8019954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019958:	e661      	b.n	801961e <remove_chain+0x20a>
			fs->winsect = sector;
 801995a:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38
			wc |= fs->win[bc % SS(fs)] << 8;
 801995e:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8019962:	07eb      	lsls	r3, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8019964:	443e      	add	r6, r7
 8019966:	f896 703c 	ldrb.w	r7, [r6, #60]	; 0x3c
 801996a:	ea4b 2b07 	orr.w	fp, fp, r7, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801996e:	bf4c      	ite	mi
 8019970:	ea4f 171b 	movmi.w	r7, fp, lsr #4
 8019974:	f3cb 070b 	ubfxpl	r7, fp, #0, #12
 8019978:	e5e8      	b.n	801954c <remove_chain+0x138>
	return FR_OK;
 801997a:	2000      	movs	r0, #0
 801997c:	e566      	b.n	801944c <remove_chain+0x38>
			p = fs->win + bc % SS(fs);
 801997e:	f3c8 0808 	ubfx	r8, r8, #0, #9
 8019982:	44d0      	add	r8, sl
 8019984:	e7e4      	b.n	8019950 <remove_chain+0x53c>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8019986:	4603      	mov	r3, r0
 8019988:	e649      	b.n	801961e <remove_chain+0x20a>
 801998a:	bf00      	nop

0801998c <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801998c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8019990:	d239      	bcs.n	8019a06 <dir_sdi+0x7a>
{
 8019992:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019996:	460d      	mov	r5, r1
 8019998:	b085      	sub	sp, #20
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801999a:	06e9      	lsls	r1, r5, #27
 801999c:	d12f      	bne.n	80199fe <dir_sdi+0x72>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801999e:	6884      	ldr	r4, [r0, #8]
 80199a0:	4680      	mov	r8, r0
	dp->dptr = ofs;				/* Set current offset */
 80199a2:	6145      	str	r5, [r0, #20]
	FATFS *fs = dp->obj.fs;
 80199a4:	f8d0 b000 	ldr.w	fp, [r0]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80199a8:	bb84      	cbnz	r4, 8019a0c <dir_sdi+0x80>
 80199aa:	f89b 3000 	ldrb.w	r3, [fp]
 80199ae:	2b02      	cmp	r3, #2
 80199b0:	d902      	bls.n	80199b8 <dir_sdi+0x2c>
		clst = fs->dirbase;
 80199b2:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80199b6:	bb43      	cbnz	r3, 8019a0a <dir_sdi+0x7e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80199b8:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 80199bc:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80199c0:	d91d      	bls.n	80199fe <dir_sdi+0x72>
		dp->sect = fs->dirbase;
 80199c2:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
 80199c6:	f8c8 201c 	str.w	r2, [r8, #28]
	dp->clust = clst;					/* Current cluster# */
 80199ca:	f8c8 4018 	str.w	r4, [r8, #24]
	if (!dp->sect) return FR_INT_ERR;
 80199ce:	b1b2      	cbz	r2, 80199fe <dir_sdi+0x72>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80199d0:	f3c5 0108 	ubfx	r1, r5, #0, #9
 80199d4:	f10b 033c 	add.w	r3, fp, #60	; 0x3c
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80199d8:	eb02 2555 	add.w	r5, r2, r5, lsr #9
	return FR_OK;
 80199dc:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80199de:	440b      	add	r3, r1
 80199e0:	e9c8 5307 	strd	r5, r3, [r8, #28]
}
 80199e4:	b005      	add	sp, #20
 80199e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199ea:	f8dd 8000 	ldr.w	r8, [sp]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80199ee:	3b02      	subs	r3, #2
	clst -= 2;
 80199f0:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80199f2:	4299      	cmp	r1, r3
 80199f4:	f0c0 8153 	bcc.w	8019c9e <dir_sdi+0x312>
		dp->sect = clust2sect(fs, clst);
 80199f8:	2300      	movs	r3, #0
 80199fa:	e9c8 4306 	strd	r4, r3, [r8, #24]
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80199fe:	2002      	movs	r0, #2
}
 8019a00:	b005      	add	sp, #20
 8019a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 8019a06:	2002      	movs	r0, #2
}
 8019a08:	4770      	bx	lr
 8019a0a:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8019a0c:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8019a10:	ea4f 2a43 	mov.w	sl, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8019a14:	4555      	cmp	r5, sl
 8019a16:	f0c0 814d 	bcc.w	8019cb4 <dir_sdi+0x328>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019a1a:	2c01      	cmp	r4, #1
 8019a1c:	d9ef      	bls.n	80199fe <dir_sdi+0x72>
 8019a1e:	f8db 3020 	ldr.w	r3, [fp, #32]
 8019a22:	42a3      	cmp	r3, r4
 8019a24:	d9eb      	bls.n	80199fe <dir_sdi+0x72>
 8019a26:	465e      	mov	r6, fp
 8019a28:	f8cd 8000 	str.w	r8, [sp]
		switch (fs->fs_type) {
 8019a2c:	7833      	ldrb	r3, [r6, #0]
 8019a2e:	2b02      	cmp	r3, #2
 8019a30:	f000 80a3 	beq.w	8019b7a <dir_sdi+0x1ee>
 8019a34:	2b03      	cmp	r3, #3
 8019a36:	d043      	beq.n	8019ac0 <dir_sdi+0x134>
 8019a38:	2b01      	cmp	r3, #1
 8019a3a:	d1e0      	bne.n	80199fe <dir_sdi+0x72>
			bc = (UINT)clst; bc += bc / 2;
 8019a3c:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019a40:	6af2      	ldr	r2, [r6, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019a42:	f8d6 8038 	ldr.w	r8, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019a46:	eb02 2957 	add.w	r9, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019a4a:	45c1      	cmp	r9, r8
 8019a4c:	f000 80db 	beq.w	8019c06 <dir_sdi+0x27a>
 8019a50:	f106 013c 	add.w	r1, r6, #60	; 0x3c
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019a54:	78f2      	ldrb	r2, [r6, #3]
 8019a56:	7870      	ldrb	r0, [r6, #1]
 8019a58:	9101      	str	r1, [sp, #4]
 8019a5a:	b31a      	cbz	r2, 8019aa4 <dir_sdi+0x118>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019a5c:	4642      	mov	r2, r8
 8019a5e:	f7ff f9bb 	bl	8018dd8 <disk_write>
 8019a62:	2800      	cmp	r0, #0
 8019a64:	f040 8124 	bne.w	8019cb0 <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019a68:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8019a6a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019a6c:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8019a70:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019a72:	429a      	cmp	r2, r3
 8019a74:	d214      	bcs.n	8019aa0 <dir_sdi+0x114>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019a76:	78b2      	ldrb	r2, [r6, #2]
 8019a78:	2a01      	cmp	r2, #1
 8019a7a:	d911      	bls.n	8019aa0 <dir_sdi+0x114>
 8019a7c:	9402      	str	r4, [sp, #8]
 8019a7e:	4614      	mov	r4, r2
 8019a80:	9503      	str	r5, [sp, #12]
 8019a82:	9d01      	ldr	r5, [sp, #4]
 8019a84:	e000      	b.n	8019a88 <dir_sdi+0xfc>
 8019a86:	6a73      	ldr	r3, [r6, #36]	; 0x24
					wsect += fs->fsize;
 8019a88:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019a8a:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8019a8c:	2301      	movs	r3, #1
 8019a8e:	4629      	mov	r1, r5
 8019a90:	4642      	mov	r2, r8
 8019a92:	7870      	ldrb	r0, [r6, #1]
 8019a94:	f7ff f9a0 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019a98:	2c01      	cmp	r4, #1
 8019a9a:	d1f4      	bne.n	8019a86 <dir_sdi+0xfa>
 8019a9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8019aa0:	7870      	ldrb	r0, [r6, #1]
 8019aa2:	9901      	ldr	r1, [sp, #4]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019aa4:	2301      	movs	r3, #1
 8019aa6:	464a      	mov	r2, r9
 8019aa8:	f7ff f988 	bl	8018dbc <disk_read>
 8019aac:	2800      	cmp	r0, #0
 8019aae:	f000 80a6 	beq.w	8019bfe <dir_sdi+0x272>
			fs->winsect = sector;
 8019ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019ab6:	2001      	movs	r0, #1
			fs->winsect = sector;
 8019ab8:	63b3      	str	r3, [r6, #56]	; 0x38
}
 8019aba:	b005      	add	sp, #20
 8019abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019ac0:	6af7      	ldr	r7, [r6, #44]	; 0x2c
 8019ac2:	f106 083c 	add.w	r8, r6, #60	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019ac6:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019aca:	eb07 17d4 	add.w	r7, r7, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019ace:	454f      	cmp	r7, r9
 8019ad0:	d02d      	beq.n	8019b2e <dir_sdi+0x1a2>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019ad2:	78f3      	ldrb	r3, [r6, #3]
 8019ad4:	7870      	ldrb	r0, [r6, #1]
 8019ad6:	b313      	cbz	r3, 8019b1e <dir_sdi+0x192>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019ad8:	2301      	movs	r3, #1
 8019ada:	464a      	mov	r2, r9
 8019adc:	4641      	mov	r1, r8
 8019ade:	f7ff f97b 	bl	8018dd8 <disk_write>
 8019ae2:	2800      	cmp	r0, #0
 8019ae4:	f040 80e4 	bne.w	8019cb0 <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019ae8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8019aea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019aec:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8019af0:	70f0      	strb	r0, [r6, #3]
 8019af2:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019af4:	429a      	cmp	r2, r3
 8019af6:	d212      	bcs.n	8019b1e <dir_sdi+0x192>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019af8:	78b2      	ldrb	r2, [r6, #2]
 8019afa:	2a01      	cmp	r2, #1
 8019afc:	d90f      	bls.n	8019b1e <dir_sdi+0x192>
 8019afe:	9401      	str	r4, [sp, #4]
 8019b00:	4614      	mov	r4, r2
 8019b02:	e001      	b.n	8019b08 <dir_sdi+0x17c>
 8019b04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019b06:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8019b08:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019b0a:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8019b0c:	2301      	movs	r3, #1
 8019b0e:	4641      	mov	r1, r8
 8019b10:	464a      	mov	r2, r9
 8019b12:	f7ff f961 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019b16:	2c01      	cmp	r4, #1
 8019b18:	d1f4      	bne.n	8019b04 <dir_sdi+0x178>
 8019b1a:	9c01      	ldr	r4, [sp, #4]
 8019b1c:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019b1e:	2301      	movs	r3, #1
 8019b20:	463a      	mov	r2, r7
 8019b22:	4641      	mov	r1, r8
 8019b24:	f7ff f94a 	bl	8018dbc <disk_read>
 8019b28:	2800      	cmp	r0, #0
 8019b2a:	d1c2      	bne.n	8019ab2 <dir_sdi+0x126>
			fs->winsect = sector;
 8019b2c:	63b7      	str	r7, [r6, #56]	; 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8019b2e:	00a4      	lsls	r4, r4, #2
 8019b30:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8019b34:	eb08 0204 	add.w	r2, r8, r4
	rv = rv << 8 | ptr[0];
 8019b38:	f818 4004 	ldrb.w	r4, [r8, r4]
	rv = rv << 8 | ptr[2];
 8019b3c:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8019b3e:	7853      	ldrb	r3, [r2, #1]
 8019b40:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8019b44:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8019b48:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8019b4c:	2c01      	cmp	r4, #1
 8019b4e:	f67f af56 	bls.w	80199fe <dir_sdi+0x72>
 8019b52:	f8db 3020 	ldr.w	r3, [fp, #32]
 8019b56:	42a3      	cmp	r3, r4
 8019b58:	f67f af51 	bls.w	80199fe <dir_sdi+0x72>
			ofs -= csz;
 8019b5c:	eba5 050a 	sub.w	r5, r5, sl
		while (ofs >= csz) {				/* Follow cluster chain */
 8019b60:	45aa      	cmp	sl, r5
 8019b62:	f63f af42 	bhi.w	80199ea <dir_sdi+0x5e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8019b66:	9b00      	ldr	r3, [sp, #0]
 8019b68:	681e      	ldr	r6, [r3, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019b6a:	6a33      	ldr	r3, [r6, #32]
 8019b6c:	42a3      	cmp	r3, r4
 8019b6e:	f67f af46 	bls.w	80199fe <dir_sdi+0x72>
		switch (fs->fs_type) {
 8019b72:	7833      	ldrb	r3, [r6, #0]
 8019b74:	2b02      	cmp	r3, #2
 8019b76:	f47f af5d 	bne.w	8019a34 <dir_sdi+0xa8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019b7a:	6af7      	ldr	r7, [r6, #44]	; 0x2c
 8019b7c:	f106 083c 	add.w	r8, r6, #60	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019b80:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019b84:	eb07 2714 	add.w	r7, r7, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019b88:	454f      	cmp	r7, r9
 8019b8a:	d02d      	beq.n	8019be8 <dir_sdi+0x25c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019b8c:	78f3      	ldrb	r3, [r6, #3]
 8019b8e:	7870      	ldrb	r0, [r6, #1]
 8019b90:	b30b      	cbz	r3, 8019bd6 <dir_sdi+0x24a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019b92:	2301      	movs	r3, #1
 8019b94:	464a      	mov	r2, r9
 8019b96:	4641      	mov	r1, r8
 8019b98:	f7ff f91e 	bl	8018dd8 <disk_write>
 8019b9c:	2800      	cmp	r0, #0
 8019b9e:	f040 8087 	bne.w	8019cb0 <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019ba2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8019ba4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019ba6:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8019baa:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019bac:	429a      	cmp	r2, r3
 8019bae:	d211      	bcs.n	8019bd4 <dir_sdi+0x248>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019bb0:	78b2      	ldrb	r2, [r6, #2]
 8019bb2:	2a01      	cmp	r2, #1
 8019bb4:	d90e      	bls.n	8019bd4 <dir_sdi+0x248>
 8019bb6:	9401      	str	r4, [sp, #4]
 8019bb8:	4614      	mov	r4, r2
 8019bba:	e000      	b.n	8019bbe <dir_sdi+0x232>
 8019bbc:	6a73      	ldr	r3, [r6, #36]	; 0x24
					wsect += fs->fsize;
 8019bbe:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019bc0:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8019bc2:	2301      	movs	r3, #1
 8019bc4:	4641      	mov	r1, r8
 8019bc6:	464a      	mov	r2, r9
 8019bc8:	7870      	ldrb	r0, [r6, #1]
 8019bca:	f7ff f905 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019bce:	2c01      	cmp	r4, #1
 8019bd0:	d1f4      	bne.n	8019bbc <dir_sdi+0x230>
 8019bd2:	9c01      	ldr	r4, [sp, #4]
 8019bd4:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019bd6:	2301      	movs	r3, #1
 8019bd8:	463a      	mov	r2, r7
 8019bda:	4641      	mov	r1, r8
 8019bdc:	f7ff f8ee 	bl	8018dbc <disk_read>
 8019be0:	2800      	cmp	r0, #0
 8019be2:	f47f af66 	bne.w	8019ab2 <dir_sdi+0x126>
			fs->winsect = sector;
 8019be6:	63b7      	str	r7, [r6, #56]	; 0x38
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8019be8:	0064      	lsls	r4, r4, #1
 8019bea:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8019bee:	eb08 0304 	add.w	r3, r8, r4
	rv = rv << 8 | ptr[0];
 8019bf2:	f818 4004 	ldrb.w	r4, [r8, r4]
 8019bf6:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8019bf8:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8019bfc:	e7a6      	b.n	8019b4c <dir_sdi+0x1c0>
			fs->winsect = sector;
 8019bfe:	46c8      	mov	r8, r9
 8019c00:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8019c02:	f8c6 9038 	str.w	r9, [r6, #56]	; 0x38
			wc = fs->win[bc++ % SS(fs)];
 8019c06:	1c79      	adds	r1, r7, #1
 8019c08:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019c0c:	eb02 2951 	add.w	r9, r2, r1, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8019c10:	4433      	add	r3, r6
 8019c12:	9101      	str	r1, [sp, #4]
 8019c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019c18:	45c1      	cmp	r9, r8
			wc = fs->win[bc++ % SS(fs)];
 8019c1a:	9302      	str	r3, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019c1c:	d030      	beq.n	8019c80 <dir_sdi+0x2f4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019c1e:	78f3      	ldrb	r3, [r6, #3]
 8019c20:	f106 073c 	add.w	r7, r6, #60	; 0x3c
 8019c24:	7870      	ldrb	r0, [r6, #1]
 8019c26:	b30b      	cbz	r3, 8019c6c <dir_sdi+0x2e0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019c28:	2301      	movs	r3, #1
 8019c2a:	4642      	mov	r2, r8
 8019c2c:	4639      	mov	r1, r7
 8019c2e:	f7ff f8d3 	bl	8018dd8 <disk_write>
 8019c32:	2800      	cmp	r0, #0
 8019c34:	d13c      	bne.n	8019cb0 <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019c36:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8019c38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019c3a:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8019c3e:	70f0      	strb	r0, [r6, #3]
 8019c40:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019c42:	429a      	cmp	r2, r3
 8019c44:	d212      	bcs.n	8019c6c <dir_sdi+0x2e0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019c46:	78b2      	ldrb	r2, [r6, #2]
 8019c48:	2a01      	cmp	r2, #1
 8019c4a:	d90f      	bls.n	8019c6c <dir_sdi+0x2e0>
 8019c4c:	9403      	str	r4, [sp, #12]
 8019c4e:	4614      	mov	r4, r2
 8019c50:	e001      	b.n	8019c56 <dir_sdi+0x2ca>
 8019c52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019c54:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8019c56:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019c58:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8019c5a:	2301      	movs	r3, #1
 8019c5c:	4639      	mov	r1, r7
 8019c5e:	4642      	mov	r2, r8
 8019c60:	f7ff f8ba 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019c64:	2c01      	cmp	r4, #1
 8019c66:	d1f4      	bne.n	8019c52 <dir_sdi+0x2c6>
 8019c68:	9c03      	ldr	r4, [sp, #12]
 8019c6a:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019c6c:	4639      	mov	r1, r7
 8019c6e:	2301      	movs	r3, #1
 8019c70:	464a      	mov	r2, r9
 8019c72:	f7ff f8a3 	bl	8018dbc <disk_read>
 8019c76:	2800      	cmp	r0, #0
 8019c78:	f47f af1b 	bne.w	8019ab2 <dir_sdi+0x126>
			fs->winsect = sector;
 8019c7c:	f8c6 9038 	str.w	r9, [r6, #56]	; 0x38
			wc |= fs->win[bc % SS(fs)] << 8;
 8019c80:	9b01      	ldr	r3, [sp, #4]
 8019c82:	9a02      	ldr	r2, [sp, #8]
 8019c84:	f3c3 0708 	ubfx	r7, r3, #0, #9
 8019c88:	443e      	add	r6, r7
 8019c8a:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
 8019c8e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8019c92:	07e2      	lsls	r2, r4, #31
 8019c94:	bf4c      	ite	mi
 8019c96:	091c      	lsrmi	r4, r3, #4
 8019c98:	f3c3 040b 	ubfxpl	r4, r3, #0, #12
 8019c9c:	e756      	b.n	8019b4c <dir_sdi+0x1c0>
	return clst * fs->csize + fs->database;
 8019c9e:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8019ca2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8019ca6:	fb01 3202 	mla	r2, r1, r2, r3
		dp->sect = clust2sect(fs, clst);
 8019caa:	f8c8 201c 	str.w	r2, [r8, #28]
 8019cae:	e68c      	b.n	80199ca <dir_sdi+0x3e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019cb0:	2001      	movs	r0, #1
 8019cb2:	e6a5      	b.n	8019a00 <dir_sdi+0x74>
 8019cb4:	f8db 3020 	ldr.w	r3, [fp, #32]
 8019cb8:	e699      	b.n	80199ee <dir_sdi+0x62>
 8019cba:	bf00      	nop

08019cbc <get_fat.isra.10>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019cbc:	2901      	cmp	r1, #1
 8019cbe:	d932      	bls.n	8019d26 <get_fat.isra.10+0x6a>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8019cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019cc4:	6a03      	ldr	r3, [r0, #32]
 8019cc6:	4299      	cmp	r1, r3
 8019cc8:	d22a      	bcs.n	8019d20 <get_fat.isra.10+0x64>
		switch (fs->fs_type) {
 8019cca:	7803      	ldrb	r3, [r0, #0]
 8019ccc:	4606      	mov	r6, r0
 8019cce:	460c      	mov	r4, r1
 8019cd0:	2b02      	cmp	r3, #2
 8019cd2:	d041      	beq.n	8019d58 <get_fat.isra.10+0x9c>
 8019cd4:	2b03      	cmp	r3, #3
 8019cd6:	d028      	beq.n	8019d2a <get_fat.isra.10+0x6e>
 8019cd8:	2b01      	cmp	r3, #1
 8019cda:	d121      	bne.n	8019d20 <get_fat.isra.10+0x64>
			bc = (UINT)clst; bc += bc / 2;
 8019cdc:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019ce0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019ce2:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019ce6:	eb02 2557 	add.w	r5, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019cea:	4545      	cmp	r5, r8
 8019cec:	f040 80a5 	bne.w	8019e3a <get_fat.isra.10+0x17e>
			wc = fs->win[bc++ % SS(fs)];
 8019cf0:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8019cf4:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019cf6:	eb02 2957 	add.w	r9, r2, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8019cfa:	4433      	add	r3, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019cfc:	45c1      	cmp	r9, r8
			wc = fs->win[bc++ % SS(fs)];
 8019cfe:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019d02:	f040 80ca 	bne.w	8019e9a <get_fat.isra.10+0x1de>
			wc |= fs->win[bc % SS(fs)] << 8;
 8019d06:	f3c7 0008 	ubfx	r0, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8019d0a:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8019d0c:	4430      	add	r0, r6
 8019d0e:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8019d12:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8019d16:	bf4c      	ite	mi
 8019d18:	0900      	lsrmi	r0, r0, #4
 8019d1a:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8019d1e:	e000      	b.n	8019d22 <get_fat.isra.10+0x66>
			val = 1;	/* Internal error */
 8019d20:	2001      	movs	r0, #1
}
 8019d22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		val = 1;	/* Internal error */
 8019d26:	2001      	movs	r0, #1
}
 8019d28:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019d2a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8019d2c:	f100 073c 	add.w	r7, r0, #60	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019d30:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019d34:	eb05 15d1 	add.w	r5, r5, r1, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019d38:	4545      	cmp	r5, r8
 8019d3a:	d14e      	bne.n	8019dda <get_fat.isra.10+0x11e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8019d3c:	00a1      	lsls	r1, r4, #2
 8019d3e:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
 8019d42:	187a      	adds	r2, r7, r1
	rv = rv << 8 | ptr[0];
 8019d44:	5c78      	ldrb	r0, [r7, r1]
	rv = rv << 8 | ptr[1];
 8019d46:	7853      	ldrb	r3, [r2, #1]
	rv = rv << 8 | ptr[2];
 8019d48:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8019d4a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8019d4e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8019d52:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8019d56:	e7e4      	b.n	8019d22 <get_fat.isra.10+0x66>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019d58:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8019d5a:	f100 073c 	add.w	r7, r0, #60	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019d5e:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019d62:	eb05 2511 	add.w	r5, r5, r1, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019d66:	4545      	cmp	r5, r8
 8019d68:	d02e      	beq.n	8019dc8 <get_fat.isra.10+0x10c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019d6a:	78c3      	ldrb	r3, [r0, #3]
 8019d6c:	7840      	ldrb	r0, [r0, #1]
 8019d6e:	b313      	cbz	r3, 8019db6 <get_fat.isra.10+0xfa>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019d70:	2301      	movs	r3, #1
 8019d72:	4642      	mov	r2, r8
 8019d74:	4639      	mov	r1, r7
 8019d76:	f7ff f82f 	bl	8018dd8 <disk_write>
 8019d7a:	2800      	cmp	r0, #0
 8019d7c:	f040 80c1 	bne.w	8019f02 <get_fat.isra.10+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019d80:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8019d82:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019d84:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8019d88:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019d8a:	429a      	cmp	r2, r3
 8019d8c:	d212      	bcs.n	8019db4 <get_fat.isra.10+0xf8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019d8e:	f896 9002 	ldrb.w	r9, [r6, #2]
 8019d92:	f1b9 0f01 	cmp.w	r9, #1
 8019d96:	d801      	bhi.n	8019d9c <get_fat.isra.10+0xe0>
 8019d98:	e00c      	b.n	8019db4 <get_fat.isra.10+0xf8>
 8019d9a:	6a73      	ldr	r3, [r6, #36]	; 0x24
					wsect += fs->fsize;
 8019d9c:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019d9e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8019da2:	2301      	movs	r3, #1
 8019da4:	4639      	mov	r1, r7
 8019da6:	4642      	mov	r2, r8
 8019da8:	7870      	ldrb	r0, [r6, #1]
 8019daa:	f7ff f815 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019dae:	f1b9 0f01 	cmp.w	r9, #1
 8019db2:	d1f2      	bne.n	8019d9a <get_fat.isra.10+0xde>
 8019db4:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019db6:	2301      	movs	r3, #1
 8019db8:	462a      	mov	r2, r5
 8019dba:	4639      	mov	r1, r7
 8019dbc:	f7fe fffe 	bl	8018dbc <disk_read>
 8019dc0:	2800      	cmp	r0, #0
 8019dc2:	f040 809a 	bne.w	8019efa <get_fat.isra.10+0x23e>
			fs->winsect = sector;
 8019dc6:	63b5      	str	r5, [r6, #56]	; 0x38
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8019dc8:	0061      	lsls	r1, r4, #1
 8019dca:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 8019dce:	187b      	adds	r3, r7, r1
	rv = rv << 8 | ptr[0];
 8019dd0:	5c78      	ldrb	r0, [r7, r1]
 8019dd2:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8019dd4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8019dd8:	e7a3      	b.n	8019d22 <get_fat.isra.10+0x66>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019dda:	78c3      	ldrb	r3, [r0, #3]
 8019ddc:	7840      	ldrb	r0, [r0, #1]
 8019dde:	b31b      	cbz	r3, 8019e28 <get_fat.isra.10+0x16c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019de0:	2301      	movs	r3, #1
 8019de2:	4642      	mov	r2, r8
 8019de4:	4639      	mov	r1, r7
 8019de6:	f7fe fff7 	bl	8018dd8 <disk_write>
 8019dea:	2800      	cmp	r0, #0
 8019dec:	f040 8089 	bne.w	8019f02 <get_fat.isra.10+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019df0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8019df2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019df4:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8019df8:	70f0      	strb	r0, [r6, #3]
 8019dfa:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019dfc:	429a      	cmp	r2, r3
 8019dfe:	d213      	bcs.n	8019e28 <get_fat.isra.10+0x16c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019e00:	f896 9002 	ldrb.w	r9, [r6, #2]
 8019e04:	f1b9 0f01 	cmp.w	r9, #1
 8019e08:	d802      	bhi.n	8019e10 <get_fat.isra.10+0x154>
 8019e0a:	e00d      	b.n	8019e28 <get_fat.isra.10+0x16c>
 8019e0c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019e0e:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8019e10:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019e12:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8019e16:	2301      	movs	r3, #1
 8019e18:	4639      	mov	r1, r7
 8019e1a:	4642      	mov	r2, r8
 8019e1c:	f7fe ffdc 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019e20:	f1b9 0f01 	cmp.w	r9, #1
 8019e24:	d1f2      	bne.n	8019e0c <get_fat.isra.10+0x150>
 8019e26:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019e28:	2301      	movs	r3, #1
 8019e2a:	462a      	mov	r2, r5
 8019e2c:	4639      	mov	r1, r7
 8019e2e:	f7fe ffc5 	bl	8018dbc <disk_read>
 8019e32:	2800      	cmp	r0, #0
 8019e34:	d161      	bne.n	8019efa <get_fat.isra.10+0x23e>
			fs->winsect = sector;
 8019e36:	63b5      	str	r5, [r6, #56]	; 0x38
 8019e38:	e780      	b.n	8019d3c <get_fat.isra.10+0x80>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019e3a:	78c2      	ldrb	r2, [r0, #3]
 8019e3c:	f100 093c 	add.w	r9, r0, #60	; 0x3c
 8019e40:	7840      	ldrb	r0, [r0, #1]
 8019e42:	b302      	cbz	r2, 8019e86 <get_fat.isra.10+0x1ca>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019e44:	4642      	mov	r2, r8
 8019e46:	4649      	mov	r1, r9
 8019e48:	f7fe ffc6 	bl	8018dd8 <disk_write>
 8019e4c:	2800      	cmp	r0, #0
 8019e4e:	d158      	bne.n	8019f02 <get_fat.isra.10+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019e50:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8019e52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019e54:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8019e58:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019e5a:	429a      	cmp	r2, r3
 8019e5c:	d212      	bcs.n	8019e84 <get_fat.isra.10+0x1c8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019e5e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8019e62:	f1ba 0f01 	cmp.w	sl, #1
 8019e66:	d801      	bhi.n	8019e6c <get_fat.isra.10+0x1b0>
 8019e68:	e00c      	b.n	8019e84 <get_fat.isra.10+0x1c8>
 8019e6a:	6a73      	ldr	r3, [r6, #36]	; 0x24
					wsect += fs->fsize;
 8019e6c:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019e6e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8019e72:	2301      	movs	r3, #1
 8019e74:	4649      	mov	r1, r9
 8019e76:	4642      	mov	r2, r8
 8019e78:	7870      	ldrb	r0, [r6, #1]
 8019e7a:	f7fe ffad 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019e7e:	f1ba 0f01 	cmp.w	sl, #1
 8019e82:	d1f2      	bne.n	8019e6a <get_fat.isra.10+0x1ae>
 8019e84:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019e86:	4649      	mov	r1, r9
 8019e88:	2301      	movs	r3, #1
 8019e8a:	462a      	mov	r2, r5
 8019e8c:	f7fe ff96 	bl	8018dbc <disk_read>
 8019e90:	bb98      	cbnz	r0, 8019efa <get_fat.isra.10+0x23e>
			fs->winsect = sector;
 8019e92:	46a8      	mov	r8, r5
 8019e94:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8019e96:	63b5      	str	r5, [r6, #56]	; 0x38
 8019e98:	e72a      	b.n	8019cf0 <get_fat.isra.10+0x34>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019e9a:	78f3      	ldrb	r3, [r6, #3]
 8019e9c:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
 8019ea0:	7870      	ldrb	r0, [r6, #1]
 8019ea2:	b30b      	cbz	r3, 8019ee8 <get_fat.isra.10+0x22c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019ea4:	2301      	movs	r3, #1
 8019ea6:	4642      	mov	r2, r8
 8019ea8:	4651      	mov	r1, sl
 8019eaa:	f7fe ff95 	bl	8018dd8 <disk_write>
 8019eae:	bb40      	cbnz	r0, 8019f02 <get_fat.isra.10+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019eb0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8019eb2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019eb4:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8019eb8:	70f0      	strb	r0, [r6, #3]
 8019eba:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019ebc:	429a      	cmp	r2, r3
 8019ebe:	d213      	bcs.n	8019ee8 <get_fat.isra.10+0x22c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019ec0:	f896 b002 	ldrb.w	fp, [r6, #2]
 8019ec4:	f1bb 0f01 	cmp.w	fp, #1
 8019ec8:	d802      	bhi.n	8019ed0 <get_fat.isra.10+0x214>
 8019eca:	e00d      	b.n	8019ee8 <get_fat.isra.10+0x22c>
 8019ecc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019ece:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8019ed0:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019ed2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8019ed6:	2301      	movs	r3, #1
 8019ed8:	4651      	mov	r1, sl
 8019eda:	4642      	mov	r2, r8
 8019edc:	f7fe ff7c 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019ee0:	f1bb 0f01 	cmp.w	fp, #1
 8019ee4:	d1f2      	bne.n	8019ecc <get_fat.isra.10+0x210>
 8019ee6:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019ee8:	4651      	mov	r1, sl
 8019eea:	2301      	movs	r3, #1
 8019eec:	464a      	mov	r2, r9
 8019eee:	f7fe ff65 	bl	8018dbc <disk_read>
 8019ef2:	b910      	cbnz	r0, 8019efa <get_fat.isra.10+0x23e>
			fs->winsect = sector;
 8019ef4:	f8c6 9038 	str.w	r9, [r6, #56]	; 0x38
 8019ef8:	e705      	b.n	8019d06 <get_fat.isra.10+0x4a>
 8019efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019efe:	63b0      	str	r0, [r6, #56]	; 0x38
 8019f00:	e70f      	b.n	8019d22 <get_fat.isra.10+0x66>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8019f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f06:	e70c      	b.n	8019d22 <get_fat.isra.10+0x66>

08019f08 <create_chain>:
{
 8019f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f0c:	b087      	sub	sp, #28
 8019f0e:	4682      	mov	sl, r0
	FATFS *fs = obj->fs;
 8019f10:	f8d0 b000 	ldr.w	fp, [r0]
	if (clst == 0) {	/* Create a new chain */
 8019f14:	9101      	str	r1, [sp, #4]
 8019f16:	2900      	cmp	r1, #0
 8019f18:	f040 8193 	bne.w	801a242 <create_chain+0x33a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8019f1c:	f8db 8014 	ldr.w	r8, [fp, #20]
 8019f20:	f8db 3020 	ldr.w	r3, [fp, #32]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8019f24:	f1b8 0f00 	cmp.w	r8, #0
 8019f28:	d020      	beq.n	8019f6c <create_chain+0x64>
 8019f2a:	4598      	cmp	r8, r3
 8019f2c:	bf28      	it	cs
 8019f2e:	f04f 0801 	movcs.w	r8, #1
 8019f32:	4644      	mov	r4, r8
 8019f34:	46d1      	mov	r9, sl
			ncl++;							/* Next cluster */
 8019f36:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8019f38:	429c      	cmp	r4, r3
 8019f3a:	d31a      	bcc.n	8019f72 <create_chain+0x6a>
				if (ncl > scl) return 0;	/* No free cluster */
 8019f3c:	f1b8 0f01 	cmp.w	r8, #1
 8019f40:	f240 817a 	bls.w	801a238 <create_chain+0x330>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8019f44:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 8019f48:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019f4a:	6a2b      	ldr	r3, [r5, #32]
 8019f4c:	42a3      	cmp	r3, r4
 8019f4e:	d908      	bls.n	8019f62 <create_chain+0x5a>
		switch (fs->fs_type) {
 8019f50:	782b      	ldrb	r3, [r5, #0]
 8019f52:	2b02      	cmp	r3, #2
 8019f54:	f000 8128 	beq.w	801a1a8 <create_chain+0x2a0>
 8019f58:	2b03      	cmp	r3, #3
 8019f5a:	f000 80ac 	beq.w	801a0b6 <create_chain+0x1ae>
 8019f5e:	2b01      	cmp	r3, #1
 8019f60:	d00c      	beq.n	8019f7c <create_chain+0x74>
			val = 1;	/* Internal error */
 8019f62:	2401      	movs	r4, #1
}
 8019f64:	4620      	mov	r0, r4
 8019f66:	b007      	add	sp, #28
 8019f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8019f6c:	f04f 0801 	mov.w	r8, #1
 8019f70:	e7df      	b.n	8019f32 <create_chain+0x2a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019f72:	2c01      	cmp	r4, #1
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8019f74:	f8d9 5000 	ldr.w	r5, [r9]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019f78:	d9f3      	bls.n	8019f62 <create_chain+0x5a>
 8019f7a:	e7e6      	b.n	8019f4a <create_chain+0x42>
			bc = (UINT)clst; bc += bc / 2;
 8019f7c:	eb04 0654 	add.w	r6, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019f80:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019f82:	f8d5 a038 	ldr.w	sl, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019f86:	eb02 2756 	add.w	r7, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019f8a:	4557      	cmp	r7, sl
 8019f8c:	d036      	beq.n	8019ffc <create_chain+0xf4>
 8019f8e:	f105 013c 	add.w	r1, r5, #60	; 0x3c
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019f92:	78ea      	ldrb	r2, [r5, #3]
 8019f94:	7868      	ldrb	r0, [r5, #1]
 8019f96:	9102      	str	r1, [sp, #8]
 8019f98:	b332      	cbz	r2, 8019fe8 <create_chain+0xe0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019f9a:	4652      	mov	r2, sl
 8019f9c:	f7fe ff1c 	bl	8018dd8 <disk_write>
 8019fa0:	2800      	cmp	r0, #0
 8019fa2:	f040 8162 	bne.w	801a26a <create_chain+0x362>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019fa6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8019fa8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019faa:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 8019fae:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019fb0:	429a      	cmp	r2, r3
 8019fb2:	d217      	bcs.n	8019fe4 <create_chain+0xdc>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019fb4:	78aa      	ldrb	r2, [r5, #2]
 8019fb6:	2a01      	cmp	r2, #1
 8019fb8:	d914      	bls.n	8019fe4 <create_chain+0xdc>
 8019fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8019fbe:	4690      	mov	r8, r2
 8019fc0:	9404      	str	r4, [sp, #16]
 8019fc2:	9c02      	ldr	r4, [sp, #8]
 8019fc4:	e000      	b.n	8019fc8 <create_chain+0xc0>
 8019fc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					wsect += fs->fsize;
 8019fc8:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019fca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8019fce:	2301      	movs	r3, #1
 8019fd0:	4621      	mov	r1, r4
 8019fd2:	4652      	mov	r2, sl
 8019fd4:	7868      	ldrb	r0, [r5, #1]
 8019fd6:	f7fe feff 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019fda:	f1b8 0f01 	cmp.w	r8, #1
 8019fde:	d1f2      	bne.n	8019fc6 <create_chain+0xbe>
 8019fe0:	e9dd 8403 	ldrd	r8, r4, [sp, #12]
 8019fe4:	7868      	ldrb	r0, [r5, #1]
 8019fe6:	9902      	ldr	r1, [sp, #8]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019fe8:	2301      	movs	r3, #1
 8019fea:	463a      	mov	r2, r7
 8019fec:	f7fe fee6 	bl	8018dbc <disk_read>
 8019ff0:	2800      	cmp	r0, #0
 8019ff2:	f040 8110 	bne.w	801a216 <create_chain+0x30e>
			fs->winsect = sector;
 8019ff6:	46ba      	mov	sl, r7
 8019ff8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8019ffa:	63af      	str	r7, [r5, #56]	; 0x38
			wc = fs->win[bc++ % SS(fs)];
 8019ffc:	f3c6 0308 	ubfx	r3, r6, #0, #9
 801a000:	3601      	adds	r6, #1
 801a002:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801a004:	eb02 2756 	add.w	r7, r2, r6, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 801a008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a00c:	4557      	cmp	r7, sl
			wc = fs->win[bc++ % SS(fs)];
 801a00e:	9302      	str	r3, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a010:	d03a      	beq.n	801a088 <create_chain+0x180>
 801a012:	f105 023c 	add.w	r2, r5, #60	; 0x3c
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801a016:	78eb      	ldrb	r3, [r5, #3]
 801a018:	7868      	ldrb	r0, [r5, #1]
 801a01a:	4611      	mov	r1, r2
 801a01c:	9203      	str	r2, [sp, #12]
 801a01e:	b34b      	cbz	r3, 801a074 <create_chain+0x16c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801a020:	2301      	movs	r3, #1
 801a022:	4652      	mov	r2, sl
 801a024:	f7fe fed8 	bl	8018dd8 <disk_write>
 801a028:	2800      	cmp	r0, #0
 801a02a:	f040 811e 	bne.w	801a26a <create_chain+0x362>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801a02e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801a030:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a032:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 801a036:	70e8      	strb	r0, [r5, #3]
 801a038:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801a03a:	429a      	cmp	r2, r3
 801a03c:	d21a      	bcs.n	801a074 <create_chain+0x16c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a03e:	f895 c002 	ldrb.w	ip, [r5, #2]
 801a042:	4662      	mov	r2, ip
 801a044:	2a01      	cmp	r2, #1
 801a046:	d915      	bls.n	801a074 <create_chain+0x16c>
 801a048:	f8cd 8010 	str.w	r8, [sp, #16]
 801a04c:	46e0      	mov	r8, ip
 801a04e:	9405      	str	r4, [sp, #20]
 801a050:	9c03      	ldr	r4, [sp, #12]
 801a052:	e001      	b.n	801a058 <create_chain+0x150>
 801a054:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a056:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 801a058:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a05a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 801a05e:	2301      	movs	r3, #1
 801a060:	4621      	mov	r1, r4
 801a062:	4652      	mov	r2, sl
 801a064:	f7fe feb8 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a068:	f1b8 0f01 	cmp.w	r8, #1
 801a06c:	d1f2      	bne.n	801a054 <create_chain+0x14c>
 801a06e:	7868      	ldrb	r0, [r5, #1]
 801a070:	e9dd 8404 	ldrd	r8, r4, [sp, #16]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801a074:	9903      	ldr	r1, [sp, #12]
 801a076:	2301      	movs	r3, #1
 801a078:	463a      	mov	r2, r7
 801a07a:	f7fe fe9f 	bl	8018dbc <disk_read>
 801a07e:	2800      	cmp	r0, #0
 801a080:	f040 80c9 	bne.w	801a216 <create_chain+0x30e>
 801a084:	9b02      	ldr	r3, [sp, #8]
			fs->winsect = sector;
 801a086:	63af      	str	r7, [r5, #56]	; 0x38
			wc |= fs->win[bc % SS(fs)] << 8;
 801a088:	f3c6 0608 	ubfx	r6, r6, #0, #9
 801a08c:	4435      	add	r5, r6
 801a08e:	f895 703c 	ldrb.w	r7, [r5, #60]	; 0x3c
 801a092:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801a096:	07e3      	lsls	r3, r4, #31
 801a098:	bf4c      	ite	mi
 801a09a:	093f      	lsrmi	r7, r7, #4
 801a09c:	f3c7 070b 	ubfxpl	r7, r7, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 801a0a0:	2f00      	cmp	r7, #0
 801a0a2:	d051      	beq.n	801a148 <create_chain+0x240>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801a0a4:	2f01      	cmp	r7, #1
 801a0a6:	f000 80e6 	beq.w	801a276 <create_chain+0x36e>
			if (ncl == scl) return 0;		/* No free cluster */
 801a0aa:	45a0      	cmp	r8, r4
 801a0ac:	f000 80c4 	beq.w	801a238 <create_chain+0x330>
 801a0b0:	f8db 3020 	ldr.w	r3, [fp, #32]
 801a0b4:	e73f      	b.n	8019f36 <create_chain+0x2e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801a0b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801a0b8:	f105 063c 	add.w	r6, r5, #60	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a0bc:	6baf      	ldr	r7, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801a0be:	eb03 1ad4 	add.w	sl, r3, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a0c2:	45ba      	cmp	sl, r7
 801a0c4:	d031      	beq.n	801a12a <create_chain+0x222>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801a0c6:	78eb      	ldrb	r3, [r5, #3]
 801a0c8:	7868      	ldrb	r0, [r5, #1]
 801a0ca:	b32b      	cbz	r3, 801a118 <create_chain+0x210>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801a0cc:	2301      	movs	r3, #1
 801a0ce:	463a      	mov	r2, r7
 801a0d0:	4631      	mov	r1, r6
 801a0d2:	f7fe fe81 	bl	8018dd8 <disk_write>
 801a0d6:	2800      	cmp	r0, #0
 801a0d8:	f040 80c7 	bne.w	801a26a <create_chain+0x362>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801a0dc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801a0de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a0e0:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 801a0e2:	70e8      	strb	r0, [r5, #3]
 801a0e4:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801a0e6:	429a      	cmp	r2, r3
 801a0e8:	d216      	bcs.n	801a118 <create_chain+0x210>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a0ea:	78aa      	ldrb	r2, [r5, #2]
 801a0ec:	2a01      	cmp	r2, #1
 801a0ee:	d913      	bls.n	801a118 <create_chain+0x210>
 801a0f0:	f8cd 8008 	str.w	r8, [sp, #8]
 801a0f4:	4690      	mov	r8, r2
 801a0f6:	e001      	b.n	801a0fc <create_chain+0x1f4>
 801a0f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a0fa:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 801a0fc:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a0fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 801a102:	2301      	movs	r3, #1
 801a104:	4631      	mov	r1, r6
 801a106:	463a      	mov	r2, r7
 801a108:	f7fe fe66 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a10c:	f1b8 0f01 	cmp.w	r8, #1
 801a110:	d1f2      	bne.n	801a0f8 <create_chain+0x1f0>
 801a112:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801a116:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801a118:	2301      	movs	r3, #1
 801a11a:	4652      	mov	r2, sl
 801a11c:	4631      	mov	r1, r6
 801a11e:	f7fe fe4d 	bl	8018dbc <disk_read>
 801a122:	2800      	cmp	r0, #0
 801a124:	d177      	bne.n	801a216 <create_chain+0x30e>
			fs->winsect = sector;
 801a126:	f8c5 a038 	str.w	sl, [r5, #56]	; 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801a12a:	00a3      	lsls	r3, r4, #2
 801a12c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801a130:	18f2      	adds	r2, r6, r3
	rv = rv << 8 | ptr[0];
 801a132:	5cf7      	ldrb	r7, [r6, r3]
	rv = rv << 8 | ptr[2];
 801a134:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 801a136:	7853      	ldrb	r3, [r2, #1]
 801a138:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 801a13c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801a140:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 801a144:	2f00      	cmp	r7, #0
 801a146:	d1ad      	bne.n	801a0a4 <create_chain+0x19c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801a148:	f8db 3020 	ldr.w	r3, [fp, #32]
 801a14c:	42a3      	cmp	r3, r4
 801a14e:	f67f af08 	bls.w	8019f62 <create_chain+0x5a>
 801a152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a156:	4621      	mov	r1, r4
 801a158:	4658      	mov	r0, fp
 801a15a:	f7fe fffd 	bl	8019158 <put_fat.part.9>
		if (res == FR_OK && clst != 0) {
 801a15e:	b970      	cbnz	r0, 801a17e <create_chain+0x276>
 801a160:	9a01      	ldr	r2, [sp, #4]
 801a162:	b162      	cbz	r2, 801a17e <create_chain+0x276>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801a164:	2a01      	cmp	r2, #1
 801a166:	f67f aefc 	bls.w	8019f62 <create_chain+0x5a>
 801a16a:	f8db 3020 	ldr.w	r3, [fp, #32]
 801a16e:	429a      	cmp	r2, r3
 801a170:	f4bf aef7 	bcs.w	8019f62 <create_chain+0x5a>
 801a174:	4611      	mov	r1, r2
 801a176:	4658      	mov	r0, fp
 801a178:	4622      	mov	r2, r4
 801a17a:	f7fe ffed 	bl	8019158 <put_fat.part.9>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801a17e:	2800      	cmp	r0, #0
 801a180:	d170      	bne.n	801a264 <create_chain+0x35c>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801a182:	f8db 3020 	ldr.w	r3, [fp, #32]
 801a186:	f8db 2018 	ldr.w	r2, [fp, #24]
 801a18a:	3b02      	subs	r3, #2
		fs->last_clst = ncl;
 801a18c:	f8cb 4014 	str.w	r4, [fp, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801a190:	429a      	cmp	r2, r3
 801a192:	d802      	bhi.n	801a19a <create_chain+0x292>
 801a194:	3a01      	subs	r2, #1
 801a196:	f8cb 2018 	str.w	r2, [fp, #24]
		fs->fsi_flag |= 1;
 801a19a:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801a19e:	f043 0301 	orr.w	r3, r3, #1
 801a1a2:	f88b 3004 	strb.w	r3, [fp, #4]
 801a1a6:	e6dd      	b.n	8019f64 <create_chain+0x5c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801a1a8:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 801a1aa:	f105 073c 	add.w	r7, r5, #60	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a1ae:	f8d5 a038 	ldr.w	sl, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801a1b2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a1b6:	4556      	cmp	r6, sl
 801a1b8:	d035      	beq.n	801a226 <create_chain+0x31e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801a1ba:	78eb      	ldrb	r3, [r5, #3]
 801a1bc:	7868      	ldrb	r0, [r5, #1]
 801a1be:	b323      	cbz	r3, 801a20a <create_chain+0x302>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801a1c0:	2301      	movs	r3, #1
 801a1c2:	4652      	mov	r2, sl
 801a1c4:	4639      	mov	r1, r7
 801a1c6:	f7fe fe07 	bl	8018dd8 <disk_write>
 801a1ca:	2800      	cmp	r0, #0
 801a1cc:	d14d      	bne.n	801a26a <create_chain+0x362>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801a1ce:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801a1d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a1d2:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 801a1d6:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801a1d8:	429a      	cmp	r2, r3
 801a1da:	d215      	bcs.n	801a208 <create_chain+0x300>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a1dc:	78aa      	ldrb	r2, [r5, #2]
 801a1de:	2a01      	cmp	r2, #1
 801a1e0:	d912      	bls.n	801a208 <create_chain+0x300>
 801a1e2:	f8cd 8008 	str.w	r8, [sp, #8]
 801a1e6:	4690      	mov	r8, r2
 801a1e8:	e000      	b.n	801a1ec <create_chain+0x2e4>
 801a1ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					wsect += fs->fsize;
 801a1ec:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a1ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 801a1f2:	2301      	movs	r3, #1
 801a1f4:	4639      	mov	r1, r7
 801a1f6:	4652      	mov	r2, sl
 801a1f8:	7868      	ldrb	r0, [r5, #1]
 801a1fa:	f7fe fded 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a1fe:	f1b8 0f01 	cmp.w	r8, #1
 801a202:	d1f2      	bne.n	801a1ea <create_chain+0x2e2>
 801a204:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801a208:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801a20a:	2301      	movs	r3, #1
 801a20c:	4632      	mov	r2, r6
 801a20e:	4639      	mov	r1, r7
 801a210:	f7fe fdd4 	bl	8018dbc <disk_read>
 801a214:	b130      	cbz	r0, 801a224 <create_chain+0x31c>
			fs->winsect = sector;
 801a216:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 801a21a:	4620      	mov	r0, r4
			fs->winsect = sector;
 801a21c:	63ac      	str	r4, [r5, #56]	; 0x38
}
 801a21e:	b007      	add	sp, #28
 801a220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 801a224:	63ae      	str	r6, [r5, #56]	; 0x38
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801a226:	0063      	lsls	r3, r4, #1
 801a228:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801a22c:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 801a22e:	5cff      	ldrb	r7, [r7, r3]
 801a230:	7853      	ldrb	r3, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801a232:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 801a236:	e733      	b.n	801a0a0 <create_chain+0x198>
				if (ncl > scl) return 0;	/* No free cluster */
 801a238:	2400      	movs	r4, #0
}
 801a23a:	4620      	mov	r0, r4
 801a23c:	b007      	add	sp, #28
 801a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801a242:	4658      	mov	r0, fp
 801a244:	f7ff fd3a 	bl	8019cbc <get_fat.isra.10>
		if (cs < 2) return 1;				/* Invalid FAT value */
 801a248:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801a24a:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 801a24c:	f67f ae89 	bls.w	8019f62 <create_chain+0x5a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801a250:	1c42      	adds	r2, r0, #1
 801a252:	d00a      	beq.n	801a26a <create_chain+0x362>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801a254:	f8db 3020 	ldr.w	r3, [fp, #32]
 801a258:	4283      	cmp	r3, r0
 801a25a:	f63f ae83 	bhi.w	8019f64 <create_chain+0x5c>
 801a25e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a262:	e666      	b.n	8019f32 <create_chain+0x2a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801a264:	2801      	cmp	r0, #1
 801a266:	f47f ae7c 	bne.w	8019f62 <create_chain+0x5a>
 801a26a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 801a26e:	4620      	mov	r0, r4
 801a270:	b007      	add	sp, #28
 801a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a276:	463c      	mov	r4, r7
 801a278:	e674      	b.n	8019f64 <create_chain+0x5c>
 801a27a:	bf00      	nop

0801a27c <dir_next.constprop.15>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 801a27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801a27e:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801a280:	6944      	ldr	r4, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801a282:	b1b3      	cbz	r3, 801a2b2 <dir_next.constprop.15+0x36>
 801a284:	3420      	adds	r4, #32
 801a286:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 801a28a:	d212      	bcs.n	801a2b2 <dir_next.constprop.15+0x36>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801a28c:	f3c4 0708 	ubfx	r7, r4, #0, #9
 801a290:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 801a292:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801a294:	b93f      	cbnz	r7, 801a2a6 <dir_next.constprop.15+0x2a>
		dp->sect++;				/* Next sector */
 801a296:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 801a298:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 801a29a:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 801a29c:	b959      	cbnz	r1, 801a2b6 <dir_next.constprop.15+0x3a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801a29e:	8933      	ldrh	r3, [r6, #8]
 801a2a0:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 801a2a4:	d921      	bls.n	801a2ea <dir_next.constprop.15+0x6e>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a2a6:	363c      	adds	r6, #60	; 0x3c
	dp->dptr = ofs;						/* Current entry */
 801a2a8:	616c      	str	r4, [r5, #20]
	return FR_OK;
 801a2aa:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a2ac:	443e      	add	r6, r7
 801a2ae:	622e      	str	r6, [r5, #32]
}
 801a2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801a2b2:	2004      	movs	r0, #4
}
 801a2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801a2b6:	8973      	ldrh	r3, [r6, #10]
 801a2b8:	3b01      	subs	r3, #1
 801a2ba:	ea13 2354 	ands.w	r3, r3, r4, lsr #9
 801a2be:	d1f2      	bne.n	801a2a6 <dir_next.constprop.15+0x2a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801a2c0:	4630      	mov	r0, r6
 801a2c2:	f7ff fcfb 	bl	8019cbc <get_fat.isra.10>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801a2c6:	2801      	cmp	r0, #1
 801a2c8:	d915      	bls.n	801a2f6 <dir_next.constprop.15+0x7a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801a2ca:	1c43      	adds	r3, r0, #1
 801a2cc:	d011      	beq.n	801a2f2 <dir_next.constprop.15+0x76>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801a2ce:	6a33      	ldr	r3, [r6, #32]
 801a2d0:	4298      	cmp	r0, r3
 801a2d2:	d20a      	bcs.n	801a2ea <dir_next.constprop.15+0x6e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a2d4:	3b02      	subs	r3, #2
	clst -= 2;
 801a2d6:	1e82      	subs	r2, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 801a2d8:	61a8      	str	r0, [r5, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a2da:	429a      	cmp	r2, r3
 801a2dc:	d20d      	bcs.n	801a2fa <dir_next.constprop.15+0x7e>
	return clst * fs->csize + fs->database;
 801a2de:	8973      	ldrh	r3, [r6, #10]
 801a2e0:	6b71      	ldr	r1, [r6, #52]	; 0x34
 801a2e2:	fb02 1303 	mla	r3, r2, r3, r1
				dp->sect = clust2sect(fs, clst);
 801a2e6:	61eb      	str	r3, [r5, #28]
 801a2e8:	e7dd      	b.n	801a2a6 <dir_next.constprop.15+0x2a>
				dp->sect = 0; return FR_NO_FILE;
 801a2ea:	2300      	movs	r3, #0
 801a2ec:	2004      	movs	r0, #4
 801a2ee:	61eb      	str	r3, [r5, #28]
}
 801a2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801a2f2:	2001      	movs	r0, #1
}
 801a2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801a2f6:	2002      	movs	r0, #2
}
 801a2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a2fa:	463b      	mov	r3, r7
 801a2fc:	e7f3      	b.n	801a2e6 <dir_next.constprop.15+0x6a>
 801a2fe:	bf00      	nop

0801a300 <dir_read.constprop.14>:
FRESULT dir_read (
 801a300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 801a304:	69c5      	ldr	r5, [r0, #28]
FRESULT dir_read (
 801a306:	b083      	sub	sp, #12
 801a308:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 801a30a:	6806      	ldr	r6, [r0, #0]
	while (dp->sect) {
 801a30c:	2d00      	cmp	r5, #0
 801a30e:	d06d      	beq.n	801a3ec <dir_read.constprop.14+0xec>
	BYTE ord = 0xFF, sum = 0xFF;
 801a310:	23ff      	movs	r3, #255	; 0xff
 801a312:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801a316:	f8df b494 	ldr.w	fp, [pc, #1172]	; 801a7ac <dir_read.constprop.14+0x4ac>
	BYTE ord = 0xFF, sum = 0xFF;
 801a31a:	4699      	mov	r9, r3
 801a31c:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a31e:	6bb7      	ldr	r7, [r6, #56]	; 0x38
 801a320:	42af      	cmp	r7, r5
 801a322:	d035      	beq.n	801a390 <dir_read.constprop.14+0x90>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801a324:	78f3      	ldrb	r3, [r6, #3]
 801a326:	7870      	ldrb	r0, [r6, #1]
 801a328:	b313      	cbz	r3, 801a370 <dir_read.constprop.14+0x70>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801a32a:	2301      	movs	r3, #1
 801a32c:	463a      	mov	r2, r7
 801a32e:	4651      	mov	r1, sl
 801a330:	f7fe fd52 	bl	8018dd8 <disk_write>
 801a334:	2800      	cmp	r0, #0
 801a336:	f040 8116 	bne.w	801a566 <dir_read.constprop.14+0x266>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801a33a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 801a33c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a33e:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 801a340:	70f0      	strb	r0, [r6, #3]
 801a342:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801a344:	429a      	cmp	r2, r3
 801a346:	d213      	bcs.n	801a370 <dir_read.constprop.14+0x70>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a348:	f896 8002 	ldrb.w	r8, [r6, #2]
 801a34c:	f1b8 0f01 	cmp.w	r8, #1
 801a350:	d802      	bhi.n	801a358 <dir_read.constprop.14+0x58>
 801a352:	e00d      	b.n	801a370 <dir_read.constprop.14+0x70>
 801a354:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a356:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 801a358:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a35a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 801a35e:	2301      	movs	r3, #1
 801a360:	4651      	mov	r1, sl
 801a362:	463a      	mov	r2, r7
 801a364:	f7fe fd38 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a368:	f1b8 0f01 	cmp.w	r8, #1
 801a36c:	d1f2      	bne.n	801a354 <dir_read.constprop.14+0x54>
 801a36e:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801a370:	2301      	movs	r3, #1
 801a372:	462a      	mov	r2, r5
 801a374:	4651      	mov	r1, sl
 801a376:	f7fe fd21 	bl	8018dbc <disk_read>
 801a37a:	b140      	cbz	r0, 801a38e <dir_read.constprop.14+0x8e>
			fs->winsect = sector;
 801a37c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 801a380:	2001      	movs	r0, #1
			fs->winsect = sector;
 801a382:	63b3      	str	r3, [r6, #56]	; 0x38
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801a384:	2300      	movs	r3, #0
 801a386:	61e3      	str	r3, [r4, #28]
}
 801a388:	b003      	add	sp, #12
 801a38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 801a38e:	63b5      	str	r5, [r6, #56]	; 0x38
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801a390:	6a22      	ldr	r2, [r4, #32]
 801a392:	7811      	ldrb	r1, [r2, #0]
		if (c == 0) {
 801a394:	b351      	cbz	r1, 801a3ec <dir_read.constprop.14+0xec>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801a396:	7ad3      	ldrb	r3, [r2, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801a398:	29e5      	cmp	r1, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801a39a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a39e:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801a3a0:	d005      	beq.n	801a3ae <dir_read.constprop.14+0xae>
 801a3a2:	292e      	cmp	r1, #46	; 0x2e
 801a3a4:	d003      	beq.n	801a3ae <dir_read.constprop.14+0xae>
 801a3a6:	f023 0020 	bic.w	r0, r3, #32
 801a3aa:	2808      	cmp	r0, #8
 801a3ac:	d125      	bne.n	801a3fa <dir_read.constprop.14+0xfa>
 801a3ae:	6967      	ldr	r7, [r4, #20]
				ord = 0xFF;
 801a3b0:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801a3b4:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801a3b6:	69e5      	ldr	r5, [r4, #28]
 801a3b8:	455f      	cmp	r7, fp
 801a3ba:	d817      	bhi.n	801a3ec <dir_read.constprop.14+0xec>
 801a3bc:	b1b5      	cbz	r5, 801a3ec <dir_read.constprop.14+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801a3be:	f3c7 0208 	ubfx	r2, r7, #0, #9
	FATFS *fs = dp->obj.fs;
 801a3c2:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801a3c4:	b9a2      	cbnz	r2, 801a3f0 <dir_read.constprop.14+0xf0>
		dp->sect++;				/* Next sector */
 801a3c6:	3501      	adds	r5, #1
		if (!dp->clust) {		/* Static table */
 801a3c8:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 801a3ca:	61e5      	str	r5, [r4, #28]
		if (!dp->clust) {		/* Static table */
 801a3cc:	2900      	cmp	r1, #0
 801a3ce:	f040 80bc 	bne.w	801a54a <dir_read.constprop.14+0x24a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801a3d2:	891a      	ldrh	r2, [r3, #8]
 801a3d4:	ebb2 1f57 	cmp.w	r2, r7, lsr #5
 801a3d8:	d908      	bls.n	801a3ec <dir_read.constprop.14+0xec>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a3da:	333c      	adds	r3, #60	; 0x3c
	dp->dptr = ofs;						/* Current entry */
 801a3dc:	6167      	str	r7, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a3de:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 801a3e0:	2d00      	cmp	r5, #0
 801a3e2:	d19c      	bne.n	801a31e <dir_read.constprop.14+0x1e>
				res = FR_DISK_ERR;
 801a3e4:	2000      	movs	r0, #0
}
 801a3e6:	b003      	add	sp, #12
 801a3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 801a3ec:	2004      	movs	r0, #4
 801a3ee:	e7c9      	b.n	801a384 <dir_read.constprop.14+0x84>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a3f0:	333c      	adds	r3, #60	; 0x3c
	dp->dptr = ofs;						/* Current entry */
 801a3f2:	6167      	str	r7, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a3f4:	441a      	add	r2, r3
 801a3f6:	6222      	str	r2, [r4, #32]
 801a3f8:	e791      	b.n	801a31e <dir_read.constprop.14+0x1e>
				if (a == AM_LFN) {			/* An LFN entry is found */
 801a3fa:	2b0f      	cmp	r3, #15
 801a3fc:	f040 80cd 	bne.w	801a59a <dir_read.constprop.14+0x29a>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801a400:	0648      	lsls	r0, r1, #25
 801a402:	6967      	ldr	r7, [r4, #20]
 801a404:	f140 80b1 	bpl.w	801a56a <dir_read.constprop.14+0x26a>
						sum = dp->dir[LDIR_Chksum];
 801a408:	7b53      	ldrb	r3, [r2, #13]
						c &= (BYTE)~LLEF; ord = c;
 801a40a:	f001 09bf 	and.w	r9, r1, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 801a40e:	6327      	str	r7, [r4, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
 801a410:	9300      	str	r3, [sp, #0]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801a412:	7b53      	ldrb	r3, [r2, #13]
 801a414:	9900      	ldr	r1, [sp, #0]
 801a416:	428b      	cmp	r3, r1
 801a418:	d1ca      	bne.n	801a3b0 <dir_read.constprop.14+0xb0>
	rv = rv << 8 | ptr[0];
 801a41a:	7ed1      	ldrb	r1, [r2, #27]
 801a41c:	7e93      	ldrb	r3, [r2, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801a41e:	ea53 2301 	orrs.w	r3, r3, r1, lsl #8
 801a422:	d1c5      	bne.n	801a3b0 <dir_read.constprop.14+0xb0>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801a424:	7813      	ldrb	r3, [r2, #0]
	rv = rv << 8 | ptr[0];
 801a426:	7891      	ldrb	r1, [r2, #2]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801a428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	rv = rv << 8 | ptr[0];
 801a42c:	7850      	ldrb	r0, [r2, #1]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801a42e:	3b01      	subs	r3, #1
	rv = rv << 8 | ptr[0];
 801a430:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801a434:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801a438:	eb03 0381 	add.w	r3, r3, r1, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a43c:	2bfe      	cmp	r3, #254	; 0xfe
 801a43e:	d8b7      	bhi.n	801a3b0 <dir_read.constprop.14+0xb0>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801a440:	f8d6 c00c 	ldr.w	ip, [r6, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a444:	1c59      	adds	r1, r3, #1
 801a446:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
	rv = rv << 8 | ptr[0];
 801a44a:	f892 e004 	ldrb.w	lr, [r2, #4]
 801a44e:	78d5      	ldrb	r5, [r2, #3]
 801a450:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
		if (wc) {
 801a454:	2800      	cmp	r0, #0
 801a456:	f040 80af 	bne.w	801a5b8 <dir_read.constprop.14+0x2b8>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a45a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a45e:	429d      	cmp	r5, r3
 801a460:	d1a6      	bne.n	801a3b0 <dir_read.constprop.14+0xb0>
	rv = rv << 8 | ptr[0];
 801a462:	7993      	ldrb	r3, [r2, #6]
 801a464:	f892 8005 	ldrb.w	r8, [r2, #5]
 801a468:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a46c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a470:	4598      	cmp	r8, r3
 801a472:	d19d      	bne.n	801a3b0 <dir_read.constprop.14+0xb0>
	rv = rv << 8 | ptr[0];
 801a474:	7a13      	ldrb	r3, [r2, #8]
 801a476:	f892 e007 	ldrb.w	lr, [r2, #7]
 801a47a:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a47e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a482:	459e      	cmp	lr, r3
 801a484:	d194      	bne.n	801a3b0 <dir_read.constprop.14+0xb0>
	rv = rv << 8 | ptr[0];
 801a486:	7a93      	ldrb	r3, [r2, #10]
 801a488:	7a55      	ldrb	r5, [r2, #9]
 801a48a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a48e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a492:	429d      	cmp	r5, r3
 801a494:	d18c      	bne.n	801a3b0 <dir_read.constprop.14+0xb0>
	rv = rv << 8 | ptr[0];
 801a496:	7bd3      	ldrb	r3, [r2, #15]
 801a498:	f892 800e 	ldrb.w	r8, [r2, #14]
 801a49c:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a4a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a4a4:	4598      	cmp	r8, r3
 801a4a6:	d183      	bne.n	801a3b0 <dir_read.constprop.14+0xb0>
	rv = rv << 8 | ptr[0];
 801a4a8:	7c53      	ldrb	r3, [r2, #17]
 801a4aa:	f892 e010 	ldrb.w	lr, [r2, #16]
 801a4ae:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a4b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a4b6:	459e      	cmp	lr, r3
 801a4b8:	f47f af7a 	bne.w	801a3b0 <dir_read.constprop.14+0xb0>
	rv = rv << 8 | ptr[0];
 801a4bc:	7cd3      	ldrb	r3, [r2, #19]
 801a4be:	7c95      	ldrb	r5, [r2, #18]
 801a4c0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a4c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a4c8:	429d      	cmp	r5, r3
 801a4ca:	f47f af71 	bne.w	801a3b0 <dir_read.constprop.14+0xb0>
	rv = rv << 8 | ptr[0];
 801a4ce:	7d53      	ldrb	r3, [r2, #21]
 801a4d0:	f892 e014 	ldrb.w	lr, [r2, #20]
 801a4d4:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a4d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a4dc:	459e      	cmp	lr, r3
 801a4de:	f47f af67 	bne.w	801a3b0 <dir_read.constprop.14+0xb0>
	rv = rv << 8 | ptr[0];
 801a4e2:	7dd3      	ldrb	r3, [r2, #23]
 801a4e4:	7d95      	ldrb	r5, [r2, #22]
 801a4e6:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a4ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a4ee:	429d      	cmp	r5, r3
 801a4f0:	f47f af5e 	bne.w	801a3b0 <dir_read.constprop.14+0xb0>
	rv = rv << 8 | ptr[0];
 801a4f4:	7e53      	ldrb	r3, [r2, #25]
 801a4f6:	f892 e018 	ldrb.w	lr, [r2, #24]
 801a4fa:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a4fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a502:	459e      	cmp	lr, r3
 801a504:	f47f af54 	bne.w	801a3b0 <dir_read.constprop.14+0xb0>
	rv = rv << 8 | ptr[0];
 801a508:	7f53      	ldrb	r3, [r2, #29]
 801a50a:	7f15      	ldrb	r5, [r2, #28]
 801a50c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a510:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a514:	429d      	cmp	r5, r3
 801a516:	f47f af4b 	bne.w	801a3b0 <dir_read.constprop.14+0xb0>
	rv = rv << 8 | ptr[0];
 801a51a:	7fd3      	ldrb	r3, [r2, #31]
 801a51c:	f892 e01e 	ldrb.w	lr, [r2, #30]
 801a520:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a528:	459e      	cmp	lr, r3
 801a52a:	f47f af41 	bne.w	801a3b0 <dir_read.constprop.14+0xb0>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801a52e:	7813      	ldrb	r3, [r2, #0]
 801a530:	065a      	lsls	r2, r3, #25
 801a532:	d505      	bpl.n	801a540 <dir_read.constprop.14+0x240>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801a534:	29ff      	cmp	r1, #255	; 0xff
 801a536:	f000 8137 	beq.w	801a7a8 <dir_read.constprop.14+0x4a8>
		lfnbuf[i] = 0;
 801a53a:	2300      	movs	r3, #0
 801a53c:	f82c 3011 	strh.w	r3, [ip, r1, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801a540:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801a544:	fa5f f989 	uxtb.w	r9, r9
 801a548:	e734      	b.n	801a3b4 <dir_read.constprop.14+0xb4>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801a54a:	895a      	ldrh	r2, [r3, #10]
 801a54c:	3a01      	subs	r2, #1
 801a54e:	ea12 2857 	ands.w	r8, r2, r7, lsr #9
 801a552:	f47f af42 	bne.w	801a3da <dir_read.constprop.14+0xda>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801a556:	4618      	mov	r0, r3
 801a558:	9301      	str	r3, [sp, #4]
 801a55a:	f7ff fbaf 	bl	8019cbc <get_fat.isra.10>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801a55e:	2801      	cmp	r0, #1
 801a560:	d919      	bls.n	801a596 <dir_read.constprop.14+0x296>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801a562:	1c43      	adds	r3, r0, #1
 801a564:	d105      	bne.n	801a572 <dir_read.constprop.14+0x272>
				dp->sect = 0; return FR_NO_FILE;
 801a566:	2001      	movs	r0, #1
 801a568:	e70c      	b.n	801a384 <dir_read.constprop.14+0x84>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801a56a:	4549      	cmp	r1, r9
 801a56c:	f47f af20 	bne.w	801a3b0 <dir_read.constprop.14+0xb0>
 801a570:	e74f      	b.n	801a412 <dir_read.constprop.14+0x112>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801a572:	9b01      	ldr	r3, [sp, #4]
 801a574:	6a1a      	ldr	r2, [r3, #32]
 801a576:	4290      	cmp	r0, r2
 801a578:	f4bf af38 	bcs.w	801a3ec <dir_read.constprop.14+0xec>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a57c:	3a02      	subs	r2, #2
	clst -= 2;
 801a57e:	1e81      	subs	r1, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 801a580:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a582:	4291      	cmp	r1, r2
 801a584:	d312      	bcc.n	801a5ac <dir_read.constprop.14+0x2ac>
 801a586:	463a      	mov	r2, r7
 801a588:	461f      	mov	r7, r3
				dp->sect = clust2sect(fs, clst);
 801a58a:	f8c4 801c 	str.w	r8, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a58e:	373c      	adds	r7, #60	; 0x3c
	dp->dptr = ofs;						/* Current entry */
 801a590:	6162      	str	r2, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a592:	6227      	str	r7, [r4, #32]
 801a594:	e726      	b.n	801a3e4 <dir_read.constprop.14+0xe4>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801a596:	2002      	movs	r0, #2
 801a598:	e6f4      	b.n	801a384 <dir_read.constprop.14+0x84>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801a59a:	f1b9 0f00 	cmp.w	r9, #0
 801a59e:	f000 80b8 	beq.w	801a712 <dir_read.constprop.14+0x412>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801a5a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a5a6:	2000      	movs	r0, #0
 801a5a8:	6323      	str	r3, [r4, #48]	; 0x30
 801a5aa:	e6ed      	b.n	801a388 <dir_read.constprop.14+0x88>
	return clst * fs->csize + fs->database;
 801a5ac:	895d      	ldrh	r5, [r3, #10]
 801a5ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a5b0:	fb01 2505 	mla	r5, r1, r5, r2
				dp->sect = clust2sect(fs, clst);
 801a5b4:	61e5      	str	r5, [r4, #28]
 801a5b6:	e710      	b.n	801a3da <dir_read.constprop.14+0xda>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a5b8:	29ff      	cmp	r1, #255	; 0xff
 801a5ba:	f000 80f5 	beq.w	801a7a8 <dir_read.constprop.14+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a5be:	f82c 5011 	strh.w	r5, [ip, r1, lsl #1]
 801a5c2:	0048      	lsls	r0, r1, #1
	rv = rv << 8 | ptr[0];
 801a5c4:	f892 e006 	ldrb.w	lr, [r2, #6]
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a5c8:	1c99      	adds	r1, r3, #2
	rv = rv << 8 | ptr[0];
 801a5ca:	f892 8005 	ldrb.w	r8, [r2, #5]
 801a5ce:	ea48 280e 	orr.w	r8, r8, lr, lsl #8
		if (wc) {
 801a5d2:	2d00      	cmp	r5, #0
 801a5d4:	f43f af4a 	beq.w	801a46c <dir_read.constprop.14+0x16c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a5d8:	29ff      	cmp	r1, #255	; 0xff
 801a5da:	f000 80e5 	beq.w	801a7a8 <dir_read.constprop.14+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a5de:	4460      	add	r0, ip
 801a5e0:	1cd9      	adds	r1, r3, #3
 801a5e2:	f8a0 8002 	strh.w	r8, [r0, #2]
	rv = rv << 8 | ptr[0];
 801a5e6:	7a15      	ldrb	r5, [r2, #8]
 801a5e8:	f892 e007 	ldrb.w	lr, [r2, #7]
 801a5ec:	ea4e 2e05 	orr.w	lr, lr, r5, lsl #8
		if (wc) {
 801a5f0:	f1b8 0f00 	cmp.w	r8, #0
 801a5f4:	f43f af43 	beq.w	801a47e <dir_read.constprop.14+0x17e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a5f8:	29ff      	cmp	r1, #255	; 0xff
 801a5fa:	f000 80d5 	beq.w	801a7a8 <dir_read.constprop.14+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a5fe:	f8a0 e004 	strh.w	lr, [r0, #4]
 801a602:	1d19      	adds	r1, r3, #4
	rv = rv << 8 | ptr[0];
 801a604:	f892 800a 	ldrb.w	r8, [r2, #10]
 801a608:	7a55      	ldrb	r5, [r2, #9]
 801a60a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
		if (wc) {
 801a60e:	f1be 0f00 	cmp.w	lr, #0
 801a612:	f43f af3c 	beq.w	801a48e <dir_read.constprop.14+0x18e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a616:	29ff      	cmp	r1, #255	; 0xff
 801a618:	f000 80c6 	beq.w	801a7a8 <dir_read.constprop.14+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a61c:	80c5      	strh	r5, [r0, #6]
 801a61e:	1d59      	adds	r1, r3, #5
	rv = rv << 8 | ptr[0];
 801a620:	f892 e00f 	ldrb.w	lr, [r2, #15]
 801a624:	f892 800e 	ldrb.w	r8, [r2, #14]
 801a628:	ea48 280e 	orr.w	r8, r8, lr, lsl #8
		if (wc) {
 801a62c:	2d00      	cmp	r5, #0
 801a62e:	f43f af37 	beq.w	801a4a0 <dir_read.constprop.14+0x1a0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a632:	29ff      	cmp	r1, #255	; 0xff
 801a634:	f000 80b8 	beq.w	801a7a8 <dir_read.constprop.14+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a638:	f8a0 8008 	strh.w	r8, [r0, #8]
 801a63c:	1d99      	adds	r1, r3, #6
	rv = rv << 8 | ptr[0];
 801a63e:	7c55      	ldrb	r5, [r2, #17]
 801a640:	f892 e010 	ldrb.w	lr, [r2, #16]
 801a644:	ea4e 2e05 	orr.w	lr, lr, r5, lsl #8
		if (wc) {
 801a648:	f1b8 0f00 	cmp.w	r8, #0
 801a64c:	f43f af31 	beq.w	801a4b2 <dir_read.constprop.14+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a650:	29ff      	cmp	r1, #255	; 0xff
 801a652:	f000 80a9 	beq.w	801a7a8 <dir_read.constprop.14+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a656:	f8a0 e00a 	strh.w	lr, [r0, #10]
 801a65a:	1dd9      	adds	r1, r3, #7
	rv = rv << 8 | ptr[0];
 801a65c:	f892 8013 	ldrb.w	r8, [r2, #19]
 801a660:	7c95      	ldrb	r5, [r2, #18]
 801a662:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
		if (wc) {
 801a666:	f1be 0f00 	cmp.w	lr, #0
 801a66a:	f43f af2b 	beq.w	801a4c4 <dir_read.constprop.14+0x1c4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a66e:	29ff      	cmp	r1, #255	; 0xff
 801a670:	f000 809a 	beq.w	801a7a8 <dir_read.constprop.14+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a674:	8185      	strh	r5, [r0, #12]
 801a676:	f103 0108 	add.w	r1, r3, #8
	rv = rv << 8 | ptr[0];
 801a67a:	f892 8015 	ldrb.w	r8, [r2, #21]
 801a67e:	f892 e014 	ldrb.w	lr, [r2, #20]
 801a682:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
		if (wc) {
 801a686:	2d00      	cmp	r5, #0
 801a688:	f43f af26 	beq.w	801a4d8 <dir_read.constprop.14+0x1d8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a68c:	29ff      	cmp	r1, #255	; 0xff
 801a68e:	f000 808b 	beq.w	801a7a8 <dir_read.constprop.14+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a692:	f8a0 e00e 	strh.w	lr, [r0, #14]
 801a696:	f103 0109 	add.w	r1, r3, #9
	rv = rv << 8 | ptr[0];
 801a69a:	f892 8017 	ldrb.w	r8, [r2, #23]
 801a69e:	7d95      	ldrb	r5, [r2, #22]
 801a6a0:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
		if (wc) {
 801a6a4:	f1be 0f00 	cmp.w	lr, #0
 801a6a8:	f43f af1f 	beq.w	801a4ea <dir_read.constprop.14+0x1ea>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a6ac:	29ff      	cmp	r1, #255	; 0xff
 801a6ae:	f43f ae7f 	beq.w	801a3b0 <dir_read.constprop.14+0xb0>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a6b2:	8205      	strh	r5, [r0, #16]
 801a6b4:	f103 010a 	add.w	r1, r3, #10
	rv = rv << 8 | ptr[0];
 801a6b8:	f892 8019 	ldrb.w	r8, [r2, #25]
 801a6bc:	f892 e018 	ldrb.w	lr, [r2, #24]
 801a6c0:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
		if (wc) {
 801a6c4:	2d00      	cmp	r5, #0
 801a6c6:	f43f af1a 	beq.w	801a4fe <dir_read.constprop.14+0x1fe>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a6ca:	29ff      	cmp	r1, #255	; 0xff
 801a6cc:	d06c      	beq.n	801a7a8 <dir_read.constprop.14+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a6ce:	f8a0 e012 	strh.w	lr, [r0, #18]
 801a6d2:	f103 010b 	add.w	r1, r3, #11
	rv = rv << 8 | ptr[0];
 801a6d6:	f892 801d 	ldrb.w	r8, [r2, #29]
 801a6da:	7f15      	ldrb	r5, [r2, #28]
 801a6dc:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
		if (wc) {
 801a6e0:	f1be 0f00 	cmp.w	lr, #0
 801a6e4:	f43f af14 	beq.w	801a510 <dir_read.constprop.14+0x210>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a6e8:	29ff      	cmp	r1, #255	; 0xff
 801a6ea:	d05d      	beq.n	801a7a8 <dir_read.constprop.14+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a6ec:	8285      	strh	r5, [r0, #20]
 801a6ee:	f103 010c 	add.w	r1, r3, #12
	rv = rv << 8 | ptr[0];
 801a6f2:	f892 801f 	ldrb.w	r8, [r2, #31]
 801a6f6:	f892 e01e 	ldrb.w	lr, [r2, #30]
 801a6fa:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
		if (wc) {
 801a6fe:	2d00      	cmp	r5, #0
 801a700:	f43f af10 	beq.w	801a524 <dir_read.constprop.14+0x224>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a704:	29ff      	cmp	r1, #255	; 0xff
 801a706:	d04f      	beq.n	801a7a8 <dir_read.constprop.14+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a708:	f103 010d 	add.w	r1, r3, #13
 801a70c:	f8a0 e016 	strh.w	lr, [r0, #22]
 801a710:	e70d      	b.n	801a52e <dir_read.constprop.14+0x22e>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801a712:	7811      	ldrb	r1, [r2, #0]
 801a714:	7856      	ldrb	r6, [r2, #1]
 801a716:	01cb      	lsls	r3, r1, #7
 801a718:	7895      	ldrb	r5, [r2, #2]
 801a71a:	78d0      	ldrb	r0, [r2, #3]
 801a71c:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
 801a720:	1999      	adds	r1, r3, r6
 801a722:	7916      	ldrb	r6, [r2, #4]
 801a724:	f3c1 0346 	ubfx	r3, r1, #1, #7
 801a728:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 801a72c:	fa55 f183 	uxtab	r1, r5, r3
 801a730:	7955      	ldrb	r5, [r2, #5]
 801a732:	f3c1 0346 	ubfx	r3, r1, #1, #7
 801a736:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 801a73a:	fa50 f183 	uxtab	r1, r0, r3
 801a73e:	7990      	ldrb	r0, [r2, #6]
 801a740:	f3c1 0346 	ubfx	r3, r1, #1, #7
 801a744:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 801a748:	fa56 f183 	uxtab	r1, r6, r3
 801a74c:	79d6      	ldrb	r6, [r2, #7]
 801a74e:	f3c1 0346 	ubfx	r3, r1, #1, #7
 801a752:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 801a756:	fa55 f183 	uxtab	r1, r5, r3
 801a75a:	7a15      	ldrb	r5, [r2, #8]
 801a75c:	f3c1 0346 	ubfx	r3, r1, #1, #7
 801a760:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 801a764:	fa50 f183 	uxtab	r1, r0, r3
 801a768:	7a50      	ldrb	r0, [r2, #9]
 801a76a:	f3c1 0346 	ubfx	r3, r1, #1, #7
 801a76e:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 801a772:	7a91      	ldrb	r1, [r2, #10]
 801a774:	fa56 f283 	uxtab	r2, r6, r3
 801a778:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801a77c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801a780:	fa55 f283 	uxtab	r2, r5, r3
 801a784:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801a788:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801a78c:	fa50 f283 	uxtab	r2, r0, r3
 801a790:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801a794:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801a798:	9a00      	ldr	r2, [sp, #0]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801a79a:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801a79e:	b2db      	uxtb	r3, r3
 801a7a0:	4293      	cmp	r3, r2
 801a7a2:	f47f aefe 	bne.w	801a5a2 <dir_read.constprop.14+0x2a2>
 801a7a6:	e61d      	b.n	801a3e4 <dir_read.constprop.14+0xe4>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801a7a8:	4689      	mov	r9, r1
 801a7aa:	e603      	b.n	801a3b4 <dir_read.constprop.14+0xb4>
 801a7ac:	001fffff 	.word	0x001fffff

0801a7b0 <dir_find>:
{
 801a7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801a7b4:	2100      	movs	r1, #0
{
 801a7b6:	b087      	sub	sp, #28
 801a7b8:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 801a7ba:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801a7bc:	f7ff f8e6 	bl	801998c <dir_sdi>
	if (res != FR_OK) return res;
 801a7c0:	4683      	mov	fp, r0
 801a7c2:	2800      	cmp	r0, #0
 801a7c4:	d13d      	bne.n	801a842 <dir_find+0x92>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a7c6:	23ff      	movs	r3, #255	; 0xff
 801a7c8:	69e7      	ldr	r7, [r4, #28]
 801a7ca:	461d      	mov	r5, r3
 801a7cc:	9301      	str	r3, [sp, #4]
 801a7ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a7d2:	46a8      	mov	r8, r5
 801a7d4:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a7d6:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 801a7d8:	42af      	cmp	r7, r5
 801a7da:	d037      	beq.n	801a84c <dir_find+0x9c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801a7dc:	78f3      	ldrb	r3, [r6, #3]
 801a7de:	f106 093c 	add.w	r9, r6, #60	; 0x3c
 801a7e2:	7870      	ldrb	r0, [r6, #1]
 801a7e4:	b313      	cbz	r3, 801a82c <dir_find+0x7c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801a7e6:	2301      	movs	r3, #1
 801a7e8:	462a      	mov	r2, r5
 801a7ea:	4649      	mov	r1, r9
 801a7ec:	f7fe faf4 	bl	8018dd8 <disk_write>
 801a7f0:	2800      	cmp	r0, #0
 801a7f2:	f040 80bf 	bne.w	801a974 <dir_find+0x1c4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801a7f6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 801a7f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a7fa:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 801a7fc:	70f0      	strb	r0, [r6, #3]
 801a7fe:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801a800:	429a      	cmp	r2, r3
 801a802:	d213      	bcs.n	801a82c <dir_find+0x7c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a804:	f896 a002 	ldrb.w	sl, [r6, #2]
 801a808:	f1ba 0f01 	cmp.w	sl, #1
 801a80c:	d802      	bhi.n	801a814 <dir_find+0x64>
 801a80e:	e00d      	b.n	801a82c <dir_find+0x7c>
 801a810:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a812:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 801a814:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a816:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 801a81a:	2301      	movs	r3, #1
 801a81c:	4649      	mov	r1, r9
 801a81e:	462a      	mov	r2, r5
 801a820:	f7fe fada 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a824:	f1ba 0f01 	cmp.w	sl, #1
 801a828:	d1f2      	bne.n	801a810 <dir_find+0x60>
 801a82a:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801a82c:	4649      	mov	r1, r9
 801a82e:	2301      	movs	r3, #1
 801a830:	463a      	mov	r2, r7
 801a832:	f7fe fac3 	bl	8018dbc <disk_read>
 801a836:	b140      	cbz	r0, 801a84a <dir_find+0x9a>
			fs->winsect = sector;
 801a838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 801a83c:	f04f 0b01 	mov.w	fp, #1
			fs->winsect = sector;
 801a840:	63b3      	str	r3, [r6, #56]	; 0x38
}
 801a842:	4658      	mov	r0, fp
 801a844:	b007      	add	sp, #28
 801a846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 801a84a:	63b7      	str	r7, [r6, #56]	; 0x38
		c = dp->dir[DIR_Name];
 801a84c:	6a27      	ldr	r7, [r4, #32]
 801a84e:	783d      	ldrb	r5, [r7, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801a850:	b345      	cbz	r5, 801a8a4 <dir_find+0xf4>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801a852:	7afa      	ldrb	r2, [r7, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801a854:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801a856:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 801a85a:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801a85c:	d003      	beq.n	801a866 <dir_find+0xb6>
 801a85e:	0712      	lsls	r2, r2, #28
 801a860:	d526      	bpl.n	801a8b0 <dir_find+0x100>
 801a862:	2b0f      	cmp	r3, #15
 801a864:	d065      	beq.n	801a932 <dir_find+0x182>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a86a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 801a86e:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801a870:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801a872:	4ba2      	ldr	r3, [pc, #648]	; (801aafc <dir_find+0x34c>)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801a874:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801a876:	69e7      	ldr	r7, [r4, #28]
 801a878:	429d      	cmp	r5, r3
 801a87a:	d813      	bhi.n	801a8a4 <dir_find+0xf4>
 801a87c:	b197      	cbz	r7, 801a8a4 <dir_find+0xf4>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801a87e:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 801a882:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801a884:	b94a      	cbnz	r2, 801a89a <dir_find+0xea>
		dp->sect++;				/* Next sector */
 801a886:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 801a888:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 801a88a:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 801a88c:	2900      	cmp	r1, #0
 801a88e:	d163      	bne.n	801a958 <dir_find+0x1a8>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801a890:	8919      	ldrh	r1, [r3, #8]
 801a892:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 801a896:	f240 80bc 	bls.w	801aa12 <dir_find+0x262>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a89a:	333c      	adds	r3, #60	; 0x3c
	dp->dptr = ofs;						/* Current entry */
 801a89c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a89e:	4413      	add	r3, r2
 801a8a0:	6223      	str	r3, [r4, #32]
 801a8a2:	e798      	b.n	801a7d6 <dir_find+0x26>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801a8a4:	f04f 0b04 	mov.w	fp, #4
}
 801a8a8:	4658      	mov	r0, fp
 801a8aa:	b007      	add	sp, #28
 801a8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 801a8b0:	2b0f      	cmp	r3, #15
 801a8b2:	d03e      	beq.n	801a932 <dir_find+0x182>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a8b4:	f1b8 0f00 	cmp.w	r8, #0
 801a8b8:	d05f      	beq.n	801a97a <dir_find+0x1ca>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a8ba:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801a8be:	07da      	lsls	r2, r3, #31
 801a8c0:	d4d1      	bmi.n	801a866 <dir_find+0xb6>
	} while (--cnt && r == 0);
 801a8c2:	783a      	ldrb	r2, [r7, #0]
 801a8c4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 801a8c8:	429a      	cmp	r2, r3
 801a8ca:	d1cc      	bne.n	801a866 <dir_find+0xb6>
 801a8cc:	787a      	ldrb	r2, [r7, #1]
 801a8ce:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801a8d2:	429a      	cmp	r2, r3
 801a8d4:	d1c7      	bne.n	801a866 <dir_find+0xb6>
 801a8d6:	78ba      	ldrb	r2, [r7, #2]
 801a8d8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801a8dc:	429a      	cmp	r2, r3
 801a8de:	d1c2      	bne.n	801a866 <dir_find+0xb6>
 801a8e0:	78fa      	ldrb	r2, [r7, #3]
 801a8e2:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801a8e6:	429a      	cmp	r2, r3
 801a8e8:	d1bd      	bne.n	801a866 <dir_find+0xb6>
 801a8ea:	793a      	ldrb	r2, [r7, #4]
 801a8ec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a8f0:	429a      	cmp	r2, r3
 801a8f2:	d1b8      	bne.n	801a866 <dir_find+0xb6>
 801a8f4:	797a      	ldrb	r2, [r7, #5]
 801a8f6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 801a8fa:	429a      	cmp	r2, r3
 801a8fc:	d1b3      	bne.n	801a866 <dir_find+0xb6>
 801a8fe:	79ba      	ldrb	r2, [r7, #6]
 801a900:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801a904:	429a      	cmp	r2, r3
 801a906:	d1ae      	bne.n	801a866 <dir_find+0xb6>
 801a908:	79fa      	ldrb	r2, [r7, #7]
 801a90a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801a90e:	429a      	cmp	r2, r3
 801a910:	d1a9      	bne.n	801a866 <dir_find+0xb6>
 801a912:	7a3a      	ldrb	r2, [r7, #8]
 801a914:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a918:	429a      	cmp	r2, r3
 801a91a:	d1a4      	bne.n	801a866 <dir_find+0xb6>
 801a91c:	7a7a      	ldrb	r2, [r7, #9]
 801a91e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801a922:	429a      	cmp	r2, r3
 801a924:	d19f      	bne.n	801a866 <dir_find+0xb6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a926:	7aba      	ldrb	r2, [r7, #10]
 801a928:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801a92c:	429a      	cmp	r2, r3
 801a92e:	d19a      	bne.n	801a866 <dir_find+0xb6>
 801a930:	e787      	b.n	801a842 <dir_find+0x92>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801a932:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801a936:	065b      	lsls	r3, r3, #25
 801a938:	d49a      	bmi.n	801a870 <dir_find+0xc0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801a93a:	0668      	lsls	r0, r5, #25
 801a93c:	d56e      	bpl.n	801aa1c <dir_find+0x26c>
						sum = dp->dir[LDIR_Chksum];
 801a93e:	7b7a      	ldrb	r2, [r7, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801a940:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801a944:	6963      	ldr	r3, [r4, #20]
						sum = dp->dir[LDIR_Chksum];
 801a946:	9201      	str	r2, [sp, #4]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801a948:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801a94a:	7b7b      	ldrb	r3, [r7, #13]
 801a94c:	9a01      	ldr	r2, [sp, #4]
 801a94e:	4293      	cmp	r3, r2
 801a950:	d07e      	beq.n	801aa50 <dir_find+0x2a0>
 801a952:	f04f 08ff 	mov.w	r8, #255	; 0xff
 801a956:	e78b      	b.n	801a870 <dir_find+0xc0>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801a958:	8958      	ldrh	r0, [r3, #10]
 801a95a:	3801      	subs	r0, #1
 801a95c:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 801a960:	d19b      	bne.n	801a89a <dir_find+0xea>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801a962:	4618      	mov	r0, r3
 801a964:	9203      	str	r2, [sp, #12]
 801a966:	9302      	str	r3, [sp, #8]
 801a968:	f7ff f9a8 	bl	8019cbc <get_fat.isra.10>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801a96c:	2801      	cmp	r0, #1
 801a96e:	d96a      	bls.n	801aa46 <dir_find+0x296>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801a970:	1c43      	adds	r3, r0, #1
 801a972:	d158      	bne.n	801aa26 <dir_find+0x276>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801a974:	f04f 0b01 	mov.w	fp, #1
 801a978:	e763      	b.n	801a842 <dir_find+0x92>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801a97a:	783b      	ldrb	r3, [r7, #0]
 801a97c:	787a      	ldrb	r2, [r7, #1]
 801a97e:	01d9      	lsls	r1, r3, #7
 801a980:	78b8      	ldrb	r0, [r7, #2]
 801a982:	f897 c004 	ldrb.w	ip, [r7, #4]
 801a986:	ea41 0153 	orr.w	r1, r1, r3, lsr #1
 801a98a:	78fb      	ldrb	r3, [r7, #3]
 801a98c:	79bd      	ldrb	r5, [r7, #6]
 801a98e:	4411      	add	r1, r2
 801a990:	f3c1 0246 	ubfx	r2, r1, #1, #7
 801a994:	ea42 11c1 	orr.w	r1, r2, r1, lsl #7
 801a998:	fa50 f281 	uxtab	r2, r0, r1
 801a99c:	7978      	ldrb	r0, [r7, #5]
 801a99e:	f3c2 0146 	ubfx	r1, r2, #1, #7
 801a9a2:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
 801a9a6:	7a3a      	ldrb	r2, [r7, #8]
 801a9a8:	fa53 f181 	uxtab	r1, r3, r1
 801a9ac:	f3c1 0346 	ubfx	r3, r1, #1, #7
 801a9b0:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
 801a9b4:	fa5c f381 	uxtab	r3, ip, r1
 801a9b8:	f3c3 0146 	ubfx	r1, r3, #1, #7
 801a9bc:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
 801a9c0:	79fb      	ldrb	r3, [r7, #7]
 801a9c2:	fa50 f181 	uxtab	r1, r0, r1
 801a9c6:	f3c1 0046 	ubfx	r0, r1, #1, #7
 801a9ca:	ea40 11c1 	orr.w	r1, r0, r1, lsl #7
 801a9ce:	fa55 f081 	uxtab	r0, r5, r1
 801a9d2:	f3c0 0146 	ubfx	r1, r0, #1, #7
 801a9d6:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 801a9da:	7a78      	ldrb	r0, [r7, #9]
 801a9dc:	fa53 f181 	uxtab	r1, r3, r1
 801a9e0:	f3c1 0346 	ubfx	r3, r1, #1, #7
 801a9e4:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 801a9e8:	7ab9      	ldrb	r1, [r7, #10]
 801a9ea:	fa52 f383 	uxtab	r3, r2, r3
 801a9ee:	f3c3 0246 	ubfx	r2, r3, #1, #7
 801a9f2:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 801a9f6:	fa50 f283 	uxtab	r2, r0, r3
 801a9fa:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801a9fe:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801aa02:	9a01      	ldr	r2, [sp, #4]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801aa04:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801aa08:	b2db      	uxtb	r3, r3
 801aa0a:	429a      	cmp	r2, r3
 801aa0c:	f47f af55 	bne.w	801a8ba <dir_find+0x10a>
 801aa10:	e717      	b.n	801a842 <dir_find+0x92>
				dp->sect = 0; return FR_NO_FILE;
 801aa12:	2300      	movs	r3, #0
 801aa14:	f04f 0b04 	mov.w	fp, #4
 801aa18:	61e3      	str	r3, [r4, #28]
 801aa1a:	e712      	b.n	801a842 <dir_find+0x92>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801aa1c:	45a8      	cmp	r8, r5
 801aa1e:	d094      	beq.n	801a94a <dir_find+0x19a>
 801aa20:	f04f 08ff 	mov.w	r8, #255	; 0xff
 801aa24:	e724      	b.n	801a870 <dir_find+0xc0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801aa26:	9b02      	ldr	r3, [sp, #8]
 801aa28:	6a19      	ldr	r1, [r3, #32]
 801aa2a:	4288      	cmp	r0, r1
 801aa2c:	d2f1      	bcs.n	801aa12 <dir_find+0x262>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801aa2e:	3902      	subs	r1, #2
	clst -= 2;
 801aa30:	1e87      	subs	r7, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 801aa32:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801aa34:	428f      	cmp	r7, r1
 801aa36:	9a03      	ldr	r2, [sp, #12]
 801aa38:	d208      	bcs.n	801aa4c <dir_find+0x29c>
	return clst * fs->csize + fs->database;
 801aa3a:	8958      	ldrh	r0, [r3, #10]
 801aa3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801aa3e:	fb07 1700 	mla	r7, r7, r0, r1
				dp->sect = clust2sect(fs, clst);
 801aa42:	61e7      	str	r7, [r4, #28]
 801aa44:	e729      	b.n	801a89a <dir_find+0xea>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801aa46:	f04f 0b02 	mov.w	fp, #2
 801aa4a:	e6fa      	b.n	801a842 <dir_find+0x92>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801aa4c:	4617      	mov	r7, r2
 801aa4e:	e7f8      	b.n	801aa42 <dir_find+0x292>
	rv = rv << 8 | ptr[0];
 801aa50:	7efa      	ldrb	r2, [r7, #27]
 801aa52:	7ebb      	ldrb	r3, [r7, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801aa54:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 801aa58:	f47f af7b 	bne.w	801a952 <dir_find+0x1a2>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801aa5c:	f897 9000 	ldrb.w	r9, [r7]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801aa60:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801aa62:	68f1      	ldr	r1, [r6, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801aa64:	f009 093f 	and.w	r9, r9, #63	; 0x3f
 801aa68:	9505      	str	r5, [sp, #20]
 801aa6a:	f8df a098 	ldr.w	sl, [pc, #152]	; 801ab04 <dir_find+0x354>
 801aa6e:	460d      	mov	r5, r1
 801aa70:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801aa74:	9104      	str	r1, [sp, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801aa76:	9602      	str	r6, [sp, #8]
 801aa78:	4610      	mov	r0, r2
 801aa7a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801aa7e:	9403      	str	r4, [sp, #12]
 801aa80:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 801aa84:	e011      	b.n	801aaaa <dir_find+0x2fa>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801aa86:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
 801aa8a:	4640      	mov	r0, r8
 801aa8c:	d81f      	bhi.n	801aace <dir_find+0x31e>
 801aa8e:	f002 fbd7 	bl	801d240 <ff_wtoupper>
 801aa92:	4604      	mov	r4, r0
 801aa94:	f835 0019 	ldrh.w	r0, [r5, r9, lsl #1]
 801aa98:	46b1      	mov	r9, r6
 801aa9a:	f002 fbd1 	bl	801d240 <ff_wtoupper>
 801aa9e:	4284      	cmp	r4, r0
	rv = rv << 8 | ptr[0];
 801aaa0:	4640      	mov	r0, r8
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801aaa2:	d114      	bne.n	801aace <dir_find+0x31e>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801aaa4:	4b16      	ldr	r3, [pc, #88]	; (801ab00 <dir_find+0x350>)
 801aaa6:	4553      	cmp	r3, sl
 801aaa8:	d016      	beq.n	801aad8 <dir_find+0x328>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801aaaa:	f81a 3b01 	ldrb.w	r3, [sl], #1
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801aaae:	f109 0601 	add.w	r6, r9, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801aab2:	eb07 0c03 	add.w	ip, r7, r3
	rv = rv << 8 | ptr[0];
 801aab6:	f817 8003 	ldrb.w	r8, [r7, r3]
 801aaba:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801aabe:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (wc) {
 801aac2:	2800      	cmp	r0, #0
 801aac4:	d1df      	bne.n	801aa86 <dir_find+0x2d6>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801aac6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aaca:	4598      	cmp	r8, r3
 801aacc:	d0ea      	beq.n	801aaa4 <dir_find+0x2f4>
 801aace:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801aad2:	f04f 08ff 	mov.w	r8, #255	; 0xff
 801aad6:	e6cb      	b.n	801a870 <dir_find+0xc0>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801aad8:	783b      	ldrb	r3, [r7, #0]
 801aada:	9e02      	ldr	r6, [sp, #8]
 801aadc:	0659      	lsls	r1, r3, #25
 801aade:	9d05      	ldr	r5, [sp, #20]
 801aae0:	9c03      	ldr	r4, [sp, #12]
 801aae2:	d500      	bpl.n	801aae6 <dir_find+0x336>
 801aae4:	b918      	cbnz	r0, 801aaee <dir_find+0x33e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801aae6:	3d01      	subs	r5, #1
 801aae8:	fa5f f885 	uxtb.w	r8, r5
 801aaec:	e6c0      	b.n	801a870 <dir_find+0xc0>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801aaee:	9b04      	ldr	r3, [sp, #16]
 801aaf0:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d0f6      	beq.n	801aae6 <dir_find+0x336>
 801aaf8:	e72b      	b.n	801a952 <dir_find+0x1a2>
 801aafa:	bf00      	nop
 801aafc:	001fffff 	.word	0x001fffff
 801ab00:	08025f49 	.word	0x08025f49
 801ab04:	08025f3c 	.word	0x08025f3c

0801ab08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801ab08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FDID *obj = &dp->obj;
	FATFS *fs = obj->fs;


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801ab0c:	780b      	ldrb	r3, [r1, #0]
{
 801ab0e:	b083      	sub	sp, #12
 801ab10:	460f      	mov	r7, r1
 801ab12:	4606      	mov	r6, r0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801ab14:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 801ab16:	f8d0 b000 	ldr.w	fp, [r0]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801ab1a:	d03d      	beq.n	801ab98 <follow_path+0x90>
 801ab1c:	2b5c      	cmp	r3, #92	; 0x5c
 801ab1e:	d03b      	beq.n	801ab98 <follow_path+0x90>
		obj->sclust = fs->cdir;				/* Start from current directory */
 801ab20:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ab24:	6083      	str	r3, [r0, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801ab26:	7838      	ldrb	r0, [r7, #0]
 801ab28:	281f      	cmp	r0, #31
 801ab2a:	d93e      	bls.n	801abaa <follow_path+0xa2>
	FATFS *fs = obj->fs;
 801ab2c:	465b      	mov	r3, fp
		w = p[si++];					/* Get a character */
 801ab2e:	b280      	uxth	r0, r0
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801ab30:	68dd      	ldr	r5, [r3, #12]
		if (w < ' ') break;				/* Break if end of the path name */
 801ab32:	281f      	cmp	r0, #31
 801ab34:	f240 817e 	bls.w	801ae34 <follow_path+0x32c>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801ab38:	282f      	cmp	r0, #47	; 0x2f
 801ab3a:	d040      	beq.n	801abbe <follow_path+0xb6>
 801ab3c:	285c      	cmp	r0, #92	; 0x5c
 801ab3e:	d03e      	beq.n	801abbe <follow_path+0xb6>
 801ab40:	f1a5 0902 	sub.w	r9, r5, #2
 801ab44:	46b8      	mov	r8, r7
		w = p[si++];					/* Get a character */
 801ab46:	2401      	movs	r4, #1
 801ab48:	e00f      	b.n	801ab6a <follow_path+0x62>
		lfn[di++] = w;					/* Store the Unicode character */
 801ab4a:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 801ab4e:	1c63      	adds	r3, r4, #1
 801ab50:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 801ab54:	281f      	cmp	r0, #31
 801ab56:	f240 814f 	bls.w	801adf8 <follow_path+0x2f0>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801ab5a:	282f      	cmp	r0, #47	; 0x2f
 801ab5c:	d031      	beq.n	801abc2 <follow_path+0xba>
 801ab5e:	285c      	cmp	r0, #92	; 0x5c
 801ab60:	d02f      	beq.n	801abc2 <follow_path+0xba>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801ab62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ab66:	d011      	beq.n	801ab8c <follow_path+0x84>
 801ab68:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801ab6a:	2101      	movs	r1, #1
 801ab6c:	f002 fb46 	bl	801d1fc <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801ab70:	b160      	cbz	r0, 801ab8c <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801ab72:	287f      	cmp	r0, #127	; 0x7f
 801ab74:	d8e9      	bhi.n	801ab4a <follow_path+0x42>
	while (*str && *str != chr) str++;
 801ab76:	2822      	cmp	r0, #34	; 0x22
 801ab78:	d008      	beq.n	801ab8c <follow_path+0x84>
 801ab7a:	232a      	movs	r3, #42	; 0x2a
 801ab7c:	4ac8      	ldr	r2, [pc, #800]	; (801aea0 <follow_path+0x398>)
 801ab7e:	e003      	b.n	801ab88 <follow_path+0x80>
 801ab80:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d0e0      	beq.n	801ab4a <follow_path+0x42>
 801ab88:	4298      	cmp	r0, r3
 801ab8a:	d1f9      	bne.n	801ab80 <follow_path+0x78>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801ab8c:	2006      	movs	r0, #6
			}
		}
	}

	return res;
}
 801ab8e:	b003      	add	sp, #12
 801ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801ab94:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 801ab98:	2b2f      	cmp	r3, #47	; 0x2f
 801ab9a:	d0fb      	beq.n	801ab94 <follow_path+0x8c>
 801ab9c:	2b5c      	cmp	r3, #92	; 0x5c
 801ab9e:	d0f9      	beq.n	801ab94 <follow_path+0x8c>
		obj->sclust = 0;					/* Start from root directory */
 801aba0:	2300      	movs	r3, #0
 801aba2:	60b3      	str	r3, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801aba4:	7838      	ldrb	r0, [r7, #0]
 801aba6:	281f      	cmp	r0, #31
 801aba8:	d8c0      	bhi.n	801ab2c <follow_path+0x24>
		dp->fn[NSFLAG] = NS_NONAME;
 801abaa:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 801abac:	4630      	mov	r0, r6
 801abae:	2100      	movs	r1, #0
		dp->fn[NSFLAG] = NS_NONAME;
 801abb0:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
 801abb4:	b003      	add	sp, #12
 801abb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 801abba:	f7fe bee7 	b.w	801998c <dir_sdi>
		w = p[si++];					/* Get a character */
 801abbe:	2301      	movs	r3, #1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801abc0:	2400      	movs	r4, #0
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801abc2:	5cfa      	ldrb	r2, [r7, r3]
 801abc4:	18f9      	adds	r1, r7, r3
 801abc6:	2a2f      	cmp	r2, #47	; 0x2f
 801abc8:	d002      	beq.n	801abd0 <follow_path+0xc8>
 801abca:	2a5c      	cmp	r2, #92	; 0x5c
 801abcc:	f040 814f 	bne.w	801ae6e <follow_path+0x366>
 801abd0:	3301      	adds	r3, #1
 801abd2:	443b      	add	r3, r7
 801abd4:	461f      	mov	r7, r3
 801abd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801abda:	2a2f      	cmp	r2, #47	; 0x2f
 801abdc:	d0fa      	beq.n	801abd4 <follow_path+0xcc>
 801abde:	2a5c      	cmp	r2, #92	; 0x5c
 801abe0:	d0f8      	beq.n	801abd4 <follow_path+0xcc>
	if ((di == 1 && lfn[di - 1] == '.') ||
 801abe2:	2c01      	cmp	r4, #1
	while (*str && *str != chr) str++;
 801abe4:	f04f 0220 	mov.w	r2, #32
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801abe8:	f04f 0900 	mov.w	r9, #0
	if ((di == 1 && lfn[di - 1] == '.') ||
 801abec:	f000 810c 	beq.w	801ae08 <follow_path+0x300>
 801abf0:	2c02      	cmp	r4, #2
 801abf2:	f040 8128 	bne.w	801ae46 <follow_path+0x33e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 801abf6:	886b      	ldrh	r3, [r5, #2]
 801abf8:	2b2e      	cmp	r3, #46	; 0x2e
 801abfa:	f000 812c 	beq.w	801ae56 <follow_path+0x34e>
		if (w != ' ' && w != '.') break;
 801abfe:	2b20      	cmp	r3, #32
 801ac00:	d001      	beq.n	801ac06 <follow_path+0xfe>
 801ac02:	2b2e      	cmp	r3, #46	; 0x2e
 801ac04:	d10d      	bne.n	801ac22 <follow_path+0x11a>
 801ac06:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801ac0a:	4423      	add	r3, r4
 801ac0c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801ac10:	3c01      	subs	r4, #1
 801ac12:	f000 810f 	beq.w	801ae34 <follow_path+0x32c>
		w = lfn[di - 1];
 801ac16:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
		if (w != ' ' && w != '.') break;
 801ac1a:	2a20      	cmp	r2, #32
 801ac1c:	d0f8      	beq.n	801ac10 <follow_path+0x108>
 801ac1e:	2a2e      	cmp	r2, #46	; 0x2e
 801ac20:	d0f6      	beq.n	801ac10 <follow_path+0x108>
	lfn[di] = 0;						/* LFN is created */
 801ac22:	2100      	movs	r1, #0
		*d++ = (BYTE)val;
 801ac24:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 801ac28:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 801ac2c:	f825 1014 	strh.w	r1, [r5, r4, lsl #1]
		*d++ = (BYTE)val;
 801ac30:	f04f 0120 	mov.w	r1, #32
 801ac34:	6272      	str	r2, [r6, #36]	; 0x24
 801ac36:	f886 102c 	strb.w	r1, [r6, #44]	; 0x2c
 801ac3a:	f886 102d 	strb.w	r1, [r6, #45]	; 0x2d
 801ac3e:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
 801ac42:	62b2      	str	r2, [r6, #40]	; 0x28
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801ac44:	8828      	ldrh	r0, [r5, #0]
 801ac46:	282e      	cmp	r0, #46	; 0x2e
 801ac48:	d007      	beq.n	801ac5a <follow_path+0x152>
 801ac4a:	f1a0 0220 	sub.w	r2, r0, #32
 801ac4e:	fab2 f282 	clz	r2, r2
 801ac52:	0952      	lsrs	r2, r2, #5
 801ac54:	2a00      	cmp	r2, #0
 801ac56:	f000 8108 	beq.w	801ae6a <follow_path+0x362>
 801ac5a:	462a      	mov	r2, r5
 801ac5c:	f04f 0800 	mov.w	r8, #0
 801ac60:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 801ac64:	f108 0801 	add.w	r8, r8, #1
 801ac68:	2820      	cmp	r0, #32
 801ac6a:	d0f9      	beq.n	801ac60 <follow_path+0x158>
 801ac6c:	282e      	cmp	r0, #46	; 0x2e
 801ac6e:	d0f7      	beq.n	801ac60 <follow_path+0x158>
	if (si) cf |= NS_LOSS | NS_LFN;
 801ac70:	f049 0903 	orr.w	r9, r9, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801ac74:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 801ac78:	2a2e      	cmp	r2, #46	; 0x2e
 801ac7a:	d001      	beq.n	801ac80 <follow_path+0x178>
 801ac7c:	3c01      	subs	r4, #1
 801ac7e:	d1f9      	bne.n	801ac74 <follow_path+0x16c>
		dp->fn[i++] = (BYTE)w;
 801ac80:	2208      	movs	r2, #8
 801ac82:	4639      	mov	r1, r7
 801ac84:	f04f 0a00 	mov.w	sl, #0
 801ac88:	4637      	mov	r7, r6
		w = lfn[si++];					/* Get an LFN character */
 801ac8a:	f108 0801 	add.w	r8, r8, #1
 801ac8e:	462e      	mov	r6, r5
		dp->fn[i++] = (BYTE)w;
 801ac90:	4653      	mov	r3, sl
 801ac92:	4615      	mov	r5, r2
 801ac94:	460a      	mov	r2, r1
		if (!w) break;					/* Break on end of the LFN */
 801ac96:	b168      	cbz	r0, 801acb4 <follow_path+0x1ac>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801ac98:	2820      	cmp	r0, #32
 801ac9a:	d003      	beq.n	801aca4 <follow_path+0x19c>
 801ac9c:	282e      	cmp	r0, #46	; 0x2e
 801ac9e:	d145      	bne.n	801ad2c <follow_path+0x224>
 801aca0:	45a0      	cmp	r8, r4
 801aca2:	d043      	beq.n	801ad2c <follow_path+0x224>
			cf |= NS_LOSS | NS_LFN; continue;
 801aca4:	f049 0903 	orr.w	r9, r9, #3
 801aca8:	f836 0018 	ldrh.w	r0, [r6, r8, lsl #1]
		w = lfn[si++];					/* Get an LFN character */
 801acac:	f108 0801 	add.w	r8, r8, #1
		if (!w) break;					/* Break on end of the LFN */
 801acb0:	2800      	cmp	r0, #0
 801acb2:	d1f1      	bne.n	801ac98 <follow_path+0x190>
 801acb4:	463e      	mov	r6, r7
 801acb6:	4617      	mov	r7, r2
 801acb8:	462a      	mov	r2, r5
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801acba:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
 801acbe:	29e5      	cmp	r1, #229	; 0xe5
 801acc0:	d102      	bne.n	801acc8 <follow_path+0x1c0>
 801acc2:	2105      	movs	r1, #5
 801acc4:	f886 1024 	strb.w	r1, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
 801acc8:	2a08      	cmp	r2, #8
 801acca:	d101      	bne.n	801acd0 <follow_path+0x1c8>
 801accc:	009b      	lsls	r3, r3, #2
 801acce:	b2db      	uxtb	r3, r3
 801acd0:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801acd4:	2a0c      	cmp	r2, #12
 801acd6:	f000 80b3 	beq.w	801ae40 <follow_path+0x338>
 801acda:	f003 0303 	and.w	r3, r3, #3
 801acde:	2b03      	cmp	r3, #3
 801ace0:	f000 80ae 	beq.w	801ae40 <follow_path+0x338>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801ace4:	f019 0f02 	tst.w	r9, #2
 801ace8:	d107      	bne.n	801acfa <follow_path+0x1f2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801acea:	2b01      	cmp	r3, #1
 801acec:	bf08      	it	eq
 801acee:	f049 0910 	orreq.w	r9, r9, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801acf2:	2a04      	cmp	r2, #4
 801acf4:	bf08      	it	eq
 801acf6:	f049 0908 	orreq.w	r9, r9, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801acfa:	f886 902f 	strb.w	r9, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 801acfe:	4630      	mov	r0, r6
 801ad00:	f7ff fd56 	bl	801a7b0 <dir_find>
			ns = dp->fn[NSFLAG];
 801ad04:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 801ad08:	b378      	cbz	r0, 801ad6a <follow_path+0x262>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801ad0a:	2804      	cmp	r0, #4
 801ad0c:	f47f af3f 	bne.w	801ab8e <follow_path+0x86>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801ad10:	0699      	lsls	r1, r3, #26
 801ad12:	f003 0204 	and.w	r2, r3, #4
 801ad16:	f140 80c9 	bpl.w	801aeac <follow_path+0x3a4>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801ad1a:	2a00      	cmp	r2, #0
 801ad1c:	d041      	beq.n	801ada2 <follow_path+0x29a>
						dp->fn[NSFLAG] = NS_NONAME;
 801ad1e:	2380      	movs	r3, #128	; 0x80
						res = FR_OK;
 801ad20:	2000      	movs	r0, #0
						dp->fn[NSFLAG] = NS_NONAME;
 801ad22:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
 801ad26:	b003      	add	sp, #12
 801ad28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801ad2c:	45aa      	cmp	sl, r5
 801ad2e:	d23b      	bcs.n	801ada8 <follow_path+0x2a0>
 801ad30:	eba8 0104 	sub.w	r1, r8, r4
 801ad34:	fab1 f181 	clz	r1, r1
 801ad38:	0949      	lsrs	r1, r1, #5
 801ad3a:	2900      	cmp	r1, #0
 801ad3c:	d134      	bne.n	801ada8 <follow_path+0x2a0>
		if (w >= 0x80) {				/* Non ASCII character */
 801ad3e:	287f      	cmp	r0, #127	; 0x7f
 801ad40:	d841      	bhi.n	801adc6 <follow_path+0x2be>
	while (*str && *str != chr) str++;
 801ad42:	282b      	cmp	r0, #43	; 0x2b
 801ad44:	d04e      	beq.n	801ade4 <follow_path+0x2dc>
 801ad46:	212c      	movs	r1, #44	; 0x2c
 801ad48:	f8df c15c 	ldr.w	ip, [pc, #348]	; 801aea8 <follow_path+0x3a0>
 801ad4c:	4281      	cmp	r1, r0
 801ad4e:	d049      	beq.n	801ade4 <follow_path+0x2dc>
 801ad50:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 801ad54:	2900      	cmp	r1, #0
 801ad56:	d1f9      	bne.n	801ad4c <follow_path+0x244>
				if (IsUpper(w)) {		/* ASCII large capital */
 801ad58:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 801ad5c:	2919      	cmp	r1, #25
 801ad5e:	f200 8088 	bhi.w	801ae72 <follow_path+0x36a>
					b |= 2;
 801ad62:	f043 0302 	orr.w	r3, r3, #2
 801ad66:	b2c0      	uxtb	r0, r0
 801ad68:	e03f      	b.n	801adea <follow_path+0x2e2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801ad6a:	075a      	lsls	r2, r3, #29
 801ad6c:	f53f af0f 	bmi.w	801ab8e <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801ad70:	79b3      	ldrb	r3, [r6, #6]
 801ad72:	06db      	lsls	r3, r3, #27
 801ad74:	f140 809e 	bpl.w	801aeb4 <follow_path+0x3ac>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801ad78:	6972      	ldr	r2, [r6, #20]
 801ad7a:	f10b 033c 	add.w	r3, fp, #60	; 0x3c
	if (fs->fs_type == FS_FAT32) {
 801ad7e:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801ad82:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 801ad86:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801ad88:	4413      	add	r3, r2
	rv = rv << 8 | ptr[0];
 801ad8a:	7ed8      	ldrb	r0, [r3, #27]
 801ad8c:	7e9a      	ldrb	r2, [r3, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 801ad8e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 801ad92:	d105      	bne.n	801ada0 <follow_path+0x298>
	rv = rv << 8 | ptr[0];
 801ad94:	7d59      	ldrb	r1, [r3, #21]
 801ad96:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801ad98:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801ad9c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801ada0:	60b2      	str	r2, [r6, #8]
 801ada2:	6833      	ldr	r3, [r6, #0]
 801ada4:	7838      	ldrb	r0, [r7, #0]
 801ada6:	e6c2      	b.n	801ab2e <follow_path+0x26>
			if (ni == 11) {				/* Long extension */
 801ada8:	2d0b      	cmp	r5, #11
 801adaa:	d06b      	beq.n	801ae84 <follow_path+0x37c>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801adac:	45a0      	cmp	r8, r4
 801adae:	d003      	beq.n	801adb8 <follow_path+0x2b0>
 801adb0:	f049 0903 	orr.w	r9, r9, #3
			if (si > di) break;			/* No extension */
 801adb4:	f63f af7e 	bhi.w	801acb4 <follow_path+0x1ac>
			b <<= 2; continue;
 801adb8:	009b      	lsls	r3, r3, #2
 801adba:	46a0      	mov	r8, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801adbc:	250b      	movs	r5, #11
 801adbe:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 801adc2:	b2db      	uxtb	r3, r3
 801adc4:	e770      	b.n	801aca8 <follow_path+0x1a0>
 801adc6:	e9cd 3200 	strd	r3, r2, [sp]
 801adca:	f049 0902 	orr.w	r9, r9, #2
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801adce:	f002 fa15 	bl	801d1fc <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801add2:	e9dd 3200 	ldrd	r3, r2, [sp]
 801add6:	b128      	cbz	r0, 801ade4 <follow_path+0x2dc>
 801add8:	4932      	ldr	r1, [pc, #200]	; (801aea4 <follow_path+0x39c>)
 801adda:	4408      	add	r0, r1
 801addc:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801ade0:	2800      	cmp	r0, #0
 801ade2:	d1ae      	bne.n	801ad42 <follow_path+0x23a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801ade4:	f049 0903 	orr.w	r9, r9, #3
 801ade8:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 801adea:	eb07 010a 	add.w	r1, r7, sl
 801adee:	f10a 0a01 	add.w	sl, sl, #1
 801adf2:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 801adf6:	e757      	b.n	801aca8 <follow_path+0x1a0>
	if ((di == 1 && lfn[di - 1] == '.') ||
 801adf8:	2c01      	cmp	r4, #1
	*path = &p[si];						/* Return pointer to the next segment */
 801adfa:	441f      	add	r7, r3
 801adfc:	f04f 0224 	mov.w	r2, #36	; 0x24
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801ae00:	f04f 0904 	mov.w	r9, #4
	if ((di == 1 && lfn[di - 1] == '.') ||
 801ae04:	f47f aef4 	bne.w	801abf0 <follow_path+0xe8>
 801ae08:	882b      	ldrh	r3, [r5, #0]
 801ae0a:	2b2e      	cmp	r3, #46	; 0x2e
 801ae0c:	f47f aef7 	bne.w	801abfe <follow_path+0xf6>
		lfn[di] = 0;
 801ae10:	2100      	movs	r1, #0
			dp->fn[i] = (i < di) ? '.' : ' ';
 801ae12:	f242 032e 	movw	r3, #8238	; 0x202e
		lfn[di] = 0;
 801ae16:	8069      	strh	r1, [r5, #2]
			dp->fn[i] = (i < di) ? '.' : ' ';
 801ae18:	84b3      	strh	r3, [r6, #36]	; 0x24
 801ae1a:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
 801ae1e:	f04f 0120 	mov.w	r1, #32
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 801ae22:	f886 202f 	strb.w	r2, [r6, #47]	; 0x2f
			dp->fn[i] = (i < di) ? '.' : ' ';
 801ae26:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
 801ae2a:	f8c6 3026 	str.w	r3, [r6, #38]	; 0x26
 801ae2e:	f8c6 302a 	str.w	r3, [r6, #42]	; 0x2a
 801ae32:	e764      	b.n	801acfe <follow_path+0x1f6>
	lfn[di] = 0;						/* LFN is created */
 801ae34:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801ae36:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 801ae38:	802b      	strh	r3, [r5, #0]
}
 801ae3a:	b003      	add	sp, #12
 801ae3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801ae40:	f049 0902 	orr.w	r9, r9, #2
 801ae44:	e759      	b.n	801acfa <follow_path+0x1f2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801ae46:	2c00      	cmp	r4, #0
 801ae48:	d0f4      	beq.n	801ae34 <follow_path+0x32c>
 801ae4a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801ae4e:	4423      	add	r3, r4
 801ae50:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 801ae54:	e6d3      	b.n	801abfe <follow_path+0xf6>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 801ae56:	8829      	ldrh	r1, [r5, #0]
 801ae58:	292e      	cmp	r1, #46	; 0x2e
 801ae5a:	f47f aed0 	bne.w	801abfe <follow_path+0xf6>
		lfn[di] = 0;
 801ae5e:	2100      	movs	r1, #0
			dp->fn[i] = (i < di) ? '.' : ' ';
 801ae60:	f642 632e 	movw	r3, #11822	; 0x2e2e
		lfn[di] = 0;
 801ae64:	80a9      	strh	r1, [r5, #4]
			dp->fn[i] = (i < di) ? '.' : ' ';
 801ae66:	84b3      	strh	r3, [r6, #36]	; 0x24
 801ae68:	e7d7      	b.n	801ae1a <follow_path+0x312>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801ae6a:	4690      	mov	r8, r2
 801ae6c:	e702      	b.n	801ac74 <follow_path+0x16c>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801ae6e:	460f      	mov	r7, r1
 801ae70:	e6b7      	b.n	801abe2 <follow_path+0xda>
					if (IsLower(w)) {	/* ASCII small capital */
 801ae72:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 801ae76:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 801ae78:	bf9c      	itt	ls
 801ae7a:	3820      	subls	r0, #32
 801ae7c:	f043 0301 	orrls.w	r3, r3, #1
 801ae80:	b2c0      	uxtb	r0, r0
 801ae82:	e7b2      	b.n	801adea <follow_path+0x2e2>
 801ae84:	463e      	mov	r6, r7
 801ae86:	4617      	mov	r7, r2
				cf |= NS_LOSS | NS_LFN; break;
 801ae88:	f049 0903 	orr.w	r9, r9, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801ae8c:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 801ae90:	2ae5      	cmp	r2, #229	; 0xe5
 801ae92:	f47f af1d 	bne.w	801acd0 <follow_path+0x1c8>
 801ae96:	2205      	movs	r2, #5
 801ae98:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
 801ae9c:	e718      	b.n	801acd0 <follow_path+0x1c8>
 801ae9e:	bf00      	nop
 801aea0:	08025f4d 	.word	0x08025f4d
 801aea4:	08025ebc 	.word	0x08025ebc
 801aea8:	08025f59 	.word	0x08025f59
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801aeac:	2a00      	cmp	r2, #0
 801aeae:	bf08      	it	eq
 801aeb0:	2005      	moveq	r0, #5
 801aeb2:	e66c      	b.n	801ab8e <follow_path+0x86>
 801aeb4:	2005      	movs	r0, #5
 801aeb6:	e66a      	b.n	801ab8e <follow_path+0x86>

0801aeb8 <dir_register>:
{
 801aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801aebc:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 801aec0:	b091      	sub	sp, #68	; 0x44
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801aec2:	f013 06a0 	ands.w	r6, r3, #160	; 0xa0
 801aec6:	f040 82d7 	bne.w	801b478 <dir_register+0x5c0>
	FATFS *fs = dp->obj.fs;
 801aeca:	6803      	ldr	r3, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801aecc:	68df      	ldr	r7, [r3, #12]
	FATFS *fs = dp->obj.fs;
 801aece:	9302      	str	r3, [sp, #8]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801aed0:	883b      	ldrh	r3, [r7, #0]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	f000 834f 	beq.w	801b576 <dir_register+0x6be>
 801aed8:	463b      	mov	r3, r7
 801aeda:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 801aede:	3601      	adds	r6, #1
 801aee0:	2a00      	cmp	r2, #0
 801aee2:	d1fa      	bne.n	801aeda <dir_register+0x22>
	mem_cpy(sn, dp->fn, 12);
 801aee4:	4683      	mov	fp, r0
 801aee6:	4682      	mov	sl, r0
 801aee8:	ab0d      	add	r3, sp, #52	; 0x34
 801aeea:	f85b 0f24 	ldr.w	r0, [fp, #36]!
 801aeee:	f8db 2008 	ldr.w	r2, [fp, #8]
 801aef2:	f8db 1004 	ldr.w	r1, [fp, #4]
 801aef6:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801aef8:	f89d 503f 	ldrb.w	r5, [sp, #63]	; 0x3f
 801aefc:	07ea      	lsls	r2, r5, #31
 801aefe:	d460      	bmi.n	801afc2 <dir_register+0x10a>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801af00:	07aa      	lsls	r2, r5, #30
 801af02:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801af06:	f140 82af 	bpl.w	801b468 <dir_register+0x5b0>
 801af0a:	f106 030c 	add.w	r3, r6, #12
 801af0e:	4abd      	ldr	r2, [pc, #756]	; (801b204 <dir_register+0x34c>)
 801af10:	fba2 2303 	umull	r2, r3, r2, r3
 801af14:	089b      	lsrs	r3, r3, #2
 801af16:	3301      	adds	r3, #1
 801af18:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 801af1a:	2100      	movs	r1, #0
 801af1c:	4650      	mov	r0, sl
 801af1e:	f7fe fd35 	bl	801998c <dir_sdi>
	if (res == FR_OK) {
 801af22:	9001      	str	r0, [sp, #4]
 801af24:	4605      	mov	r5, r0
 801af26:	2800      	cmp	r0, #0
 801af28:	f040 82ba 	bne.w	801b4a0 <dir_register+0x5e8>
 801af2c:	f108 033c 	add.w	r3, r8, #60	; 0x3c
 801af30:	f8da 901c 	ldr.w	r9, [sl, #28]
 801af34:	f8d8 6038 	ldr.w	r6, [r8, #56]	; 0x38
 801af38:	9304      	str	r3, [sp, #16]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801af3a:	f8cd b020 	str.w	fp, [sp, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 801af3e:	454e      	cmp	r6, r9
 801af40:	f000 81b4 	beq.w	801b2ac <dir_register+0x3f4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801af44:	f898 3003 	ldrb.w	r3, [r8, #3]
 801af48:	f898 0001 	ldrb.w	r0, [r8, #1]
 801af4c:	b33b      	cbz	r3, 801af9e <dir_register+0xe6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801af4e:	9f04      	ldr	r7, [sp, #16]
 801af50:	2301      	movs	r3, #1
 801af52:	4632      	mov	r2, r6
 801af54:	4639      	mov	r1, r7
 801af56:	f7fd ff3f 	bl	8018dd8 <disk_write>
 801af5a:	2800      	cmp	r0, #0
 801af5c:	f040 8275 	bne.w	801b44a <dir_register+0x592>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801af60:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801af64:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 801af68:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 801af6a:	f888 0003 	strb.w	r0, [r8, #3]
 801af6e:	f898 0001 	ldrb.w	r0, [r8, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801af72:	429a      	cmp	r2, r3
 801af74:	d213      	bcs.n	801af9e <dir_register+0xe6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801af76:	f898 4002 	ldrb.w	r4, [r8, #2]
 801af7a:	2c01      	cmp	r4, #1
 801af7c:	d804      	bhi.n	801af88 <dir_register+0xd0>
 801af7e:	e00e      	b.n	801af9e <dir_register+0xe6>
 801af80:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 801af84:	f898 0001 	ldrb.w	r0, [r8, #1]
					wsect += fs->fsize;
 801af88:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801af8a:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801af8c:	2301      	movs	r3, #1
 801af8e:	4639      	mov	r1, r7
 801af90:	4632      	mov	r2, r6
 801af92:	f7fd ff21 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801af96:	2c01      	cmp	r4, #1
 801af98:	d1f2      	bne.n	801af80 <dir_register+0xc8>
 801af9a:	f898 0001 	ldrb.w	r0, [r8, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801af9e:	2301      	movs	r3, #1
 801afa0:	464a      	mov	r2, r9
 801afa2:	9904      	ldr	r1, [sp, #16]
 801afa4:	f7fd ff0a 	bl	8018dbc <disk_read>
 801afa8:	2800      	cmp	r0, #0
 801afaa:	f000 817d 	beq.w	801b2a8 <dir_register+0x3f0>
			fs->winsect = sector;
 801afae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 801afb2:	2201      	movs	r2, #1
			fs->winsect = sector;
 801afb4:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
				res = FR_DISK_ERR;
 801afb8:	9201      	str	r2, [sp, #4]
}
 801afba:	9801      	ldr	r0, [sp, #4]
 801afbc:	b011      	add	sp, #68	; 0x44
 801afbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801afc2:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
 801afc4:	f04f 0801 	mov.w	r8, #1
				if (sr & 0x10000) sr ^= 0x11021;
 801afc8:	4c8f      	ldr	r4, [pc, #572]	; (801b208 <dir_register+0x350>)
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801afca:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801afce:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
 801afd2:	9501      	str	r5, [sp, #4]
			*d++ = *s++;
 801afd4:	f89d 103e 	ldrb.w	r1, [sp, #62]	; 0x3e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801afd8:	f1b8 0f05 	cmp.w	r8, #5
			*d++ = *s++;
 801afdc:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801afe0:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
 801afe4:	f88a 102e 	strb.w	r1, [sl, #46]	; 0x2e
 801afe8:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
 801afec:	f88a 002d 	strb.w	r0, [sl, #45]	; 0x2d
 801aff0:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 801aff4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801aff8:	e9ca 2309 	strd	r2, r3, [sl, #36]	; 0x24
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801affc:	f240 8182 	bls.w	801b304 <dir_register+0x44c>
 801b000:	3f02      	subs	r7, #2
 801b002:	4643      	mov	r3, r8
 801b004:	e08a      	b.n	801b11c <dir_register+0x264>
				sr = (sr << 1) + (wc & 1);
 801b006:	f002 0501 	and.w	r5, r2, #1
				wc >>= 1;
 801b00a:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 801b00c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b010:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b014:	03eb      	lsls	r3, r5, #15
				wc >>= 1;
 801b016:	ea4f 0392 	mov.w	r3, r2, lsr #2
				if (sr & 0x10000) sr ^= 0x11021;
 801b01a:	bf48      	it	mi
 801b01c:	4065      	eormi	r5, r4
				sr = (sr << 1) + (wc & 1);
 801b01e:	f003 0301 	and.w	r3, r3, #1
 801b022:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b026:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 801b028:	ea4f 05d2 	mov.w	r5, r2, lsr #3
				if (sr & 0x10000) sr ^= 0x11021;
 801b02c:	bf48      	it	mi
 801b02e:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 801b030:	f005 0501 	and.w	r5, r5, #1
 801b034:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b038:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 801b03a:	ea4f 1012 	mov.w	r0, r2, lsr #4
				if (sr & 0x10000) sr ^= 0x11021;
 801b03e:	bf48      	it	mi
 801b040:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 801b042:	f000 0001 	and.w	r0, r0, #1
 801b046:	eb05 0543 	add.w	r5, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b04a:	03eb      	lsls	r3, r5, #15
				wc >>= 1;
 801b04c:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 801b050:	bf48      	it	mi
 801b052:	4065      	eormi	r5, r4
				sr = (sr << 1) + (wc & 1);
 801b054:	f003 0301 	and.w	r3, r3, #1
 801b058:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b05c:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 801b05e:	ea4f 1592 	mov.w	r5, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 801b062:	bf48      	it	mi
 801b064:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 801b066:	f005 0501 	and.w	r5, r5, #1
 801b06a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b06e:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 801b070:	ea4f 10d2 	mov.w	r0, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 801b074:	bf48      	it	mi
 801b076:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 801b078:	f000 0001 	and.w	r0, r0, #1
 801b07c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b080:	03eb      	lsls	r3, r5, #15
				wc >>= 1;
 801b082:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 801b086:	bf48      	it	mi
 801b088:	4065      	eormi	r5, r4
				sr = (sr << 1) + (wc & 1);
 801b08a:	f003 0301 	and.w	r3, r3, #1
 801b08e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b092:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 801b094:	ea4f 2552 	mov.w	r5, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 801b098:	bf48      	it	mi
 801b09a:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 801b09c:	f005 0501 	and.w	r5, r5, #1
 801b0a0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b0a4:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 801b0a6:	ea4f 2092 	mov.w	r0, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 801b0aa:	bf48      	it	mi
 801b0ac:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 801b0ae:	f000 0001 	and.w	r0, r0, #1
 801b0b2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b0b6:	03eb      	lsls	r3, r5, #15
				wc >>= 1;
 801b0b8:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 801b0bc:	bf48      	it	mi
 801b0be:	4065      	eormi	r5, r4
				sr = (sr << 1) + (wc & 1);
 801b0c0:	f003 0301 	and.w	r3, r3, #1
 801b0c4:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b0c8:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 801b0ca:	ea4f 3512 	mov.w	r5, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 801b0ce:	bf48      	it	mi
 801b0d0:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 801b0d2:	f005 0501 	and.w	r5, r5, #1
 801b0d6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b0da:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 801b0dc:	ea4f 3052 	mov.w	r0, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 801b0e0:	bf48      	it	mi
 801b0e2:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 801b0e4:	f000 0001 	and.w	r0, r0, #1
 801b0e8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b0ec:	03eb      	lsls	r3, r5, #15
				wc >>= 1;
 801b0ee:	ea4f 3392 	mov.w	r3, r2, lsr #14
 801b0f2:	ea4f 32d2 	mov.w	r2, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 801b0f6:	bf48      	it	mi
 801b0f8:	4065      	eormi	r5, r4
				sr = (sr << 1) + (wc & 1);
 801b0fa:	f003 0301 	and.w	r3, r3, #1
 801b0fe:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b102:	03c5      	lsls	r5, r0, #15
 801b104:	bf48      	it	mi
 801b106:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 801b108:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b10c:	03dd      	lsls	r5, r3, #15
 801b10e:	bf48      	it	mi
 801b110:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 801b112:	eb02 0343 	add.w	r3, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801b116:	03d8      	lsls	r0, r3, #15
 801b118:	bf48      	it	mi
 801b11a:	4063      	eormi	r3, r4
		while (*lfn) {	/* Create a CRC */
 801b11c:	f837 2f02 	ldrh.w	r2, [r7, #2]!
 801b120:	2a00      	cmp	r2, #0
 801b122:	f47f af70 	bne.w	801b006 <dir_register+0x14e>
		c = (BYTE)((seq % 16) + '0');
 801b126:	f003 020f 	and.w	r2, r3, #15
 801b12a:	f102 0e30 	add.w	lr, r2, #48	; 0x30
		if (c > '9') c += 7;
 801b12e:	f1be 0f39 	cmp.w	lr, #57	; 0x39
 801b132:	bf88      	it	hi
 801b134:	f102 0e37 	addhi.w	lr, r2, #55	; 0x37
	} while (seq);
 801b138:	091a      	lsrs	r2, r3, #4
		ns[i--] = c;
 801b13a:	f88d e033 	strb.w	lr, [sp, #51]	; 0x33
	} while (seq);
 801b13e:	f000 8159 	beq.w	801b3f4 <dir_register+0x53c>
		c = (BYTE)((seq % 16) + '0');
 801b142:	f002 020f 	and.w	r2, r2, #15
 801b146:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 801b14a:	2839      	cmp	r0, #57	; 0x39
 801b14c:	bf88      	it	hi
 801b14e:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 801b152:	0a1a      	lsrs	r2, r3, #8
		ns[i--] = c;
 801b154:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
	} while (seq);
 801b158:	f000 8154 	beq.w	801b404 <dir_register+0x54c>
		c = (BYTE)((seq % 16) + '0');
 801b15c:	f002 020f 	and.w	r2, r2, #15
 801b160:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 801b164:	2839      	cmp	r0, #57	; 0x39
 801b166:	bf88      	it	hi
 801b168:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 801b16c:	0b1a      	lsrs	r2, r3, #12
		ns[i--] = c;
 801b16e:	f88d 0031 	strb.w	r0, [sp, #49]	; 0x31
	} while (seq);
 801b172:	f000 8160 	beq.w	801b436 <dir_register+0x57e>
		c = (BYTE)((seq % 16) + '0');
 801b176:	f002 020f 	and.w	r2, r2, #15
 801b17a:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 801b17e:	2839      	cmp	r0, #57	; 0x39
 801b180:	bf88      	it	hi
 801b182:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 801b186:	0c1a      	lsrs	r2, r3, #16
		ns[i--] = c;
 801b188:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
	} while (seq);
 801b18c:	f000 8158 	beq.w	801b440 <dir_register+0x588>
		c = (BYTE)((seq % 16) + '0');
 801b190:	f002 020f 	and.w	r2, r2, #15
 801b194:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 801b198:	2839      	cmp	r0, #57	; 0x39
 801b19a:	bf88      	it	hi
 801b19c:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 801b1a0:	0d1a      	lsrs	r2, r3, #20
		ns[i--] = c;
 801b1a2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
	} while (seq);
 801b1a6:	f000 8162 	beq.w	801b46e <dir_register+0x5b6>
		c = (BYTE)((seq % 16) + '0');
 801b1aa:	f002 020f 	and.w	r2, r2, #15
 801b1ae:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 801b1b2:	2839      	cmp	r0, #57	; 0x39
 801b1b4:	bf88      	it	hi
 801b1b6:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 801b1ba:	0e1a      	lsrs	r2, r3, #24
		ns[i--] = c;
 801b1bc:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
	} while (seq);
 801b1c0:	f000 815d 	beq.w	801b47e <dir_register+0x5c6>
		c = (BYTE)((seq % 16) + '0');
 801b1c4:	f002 020f 	and.w	r2, r2, #15
 801b1c8:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 801b1cc:	2839      	cmp	r0, #57	; 0x39
 801b1ce:	bf88      	it	hi
 801b1d0:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 801b1d4:	0f1b      	lsrs	r3, r3, #28
		ns[i--] = c;
 801b1d6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	} while (seq);
 801b1da:	f000 8155 	beq.w	801b488 <dir_register+0x5d0>
		c = (BYTE)((seq % 16) + '0');
 801b1de:	b2db      	uxtb	r3, r3
 801b1e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
		if (c > '9') c += 7;
 801b1e4:	2a39      	cmp	r2, #57	; 0x39
 801b1e6:	bf88      	it	hi
 801b1e8:	f103 0237 	addhi.w	r2, r3, #55	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801b1ec:	2920      	cmp	r1, #32
		ns[i--] = c;
 801b1ee:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801b1f2:	f000 81b7 	beq.w	801b564 <dir_register+0x6ac>
		ns[i--] = c;
 801b1f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801b1fa:	f10a 0125 	add.w	r1, sl, #37	; 0x25
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801b1fe:	2200      	movs	r2, #0
 801b200:	e008      	b.n	801b214 <dir_register+0x35c>
 801b202:	bf00      	nop
 801b204:	4ec4ec4f 	.word	0x4ec4ec4f
 801b208:	00011021 	.word	0x00011021
 801b20c:	7807      	ldrb	r7, [r0, #0]
 801b20e:	2f20      	cmp	r7, #32
 801b210:	d007      	beq.n	801b222 <dir_register+0x36a>
 801b212:	461a      	mov	r2, r3
 801b214:	1c53      	adds	r3, r2, #1
 801b216:	4608      	mov	r0, r1
 801b218:	f102 0c02 	add.w	ip, r2, #2
 801b21c:	3101      	adds	r1, #1
 801b21e:	429d      	cmp	r5, r3
 801b220:	d8f4      	bhi.n	801b20c <dir_register+0x354>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b222:	2d07      	cmp	r5, #7
 801b224:	d970      	bls.n	801b308 <dir_register+0x450>
 801b226:	2120      	movs	r1, #32
	} while (j < 8);
 801b228:	f1bc 0f07 	cmp.w	ip, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b22c:	7001      	strb	r1, [r0, #0]
	} while (j < 8);
 801b22e:	d82c      	bhi.n	801b28a <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b230:	1cd1      	adds	r1, r2, #3
 801b232:	2020      	movs	r0, #32
	} while (j < 8);
 801b234:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b236:	f80b 000c 	strb.w	r0, [fp, ip]
	} while (j < 8);
 801b23a:	d026      	beq.n	801b28a <dir_register+0x3d2>
 801b23c:	3204      	adds	r2, #4
 801b23e:	4459      	add	r1, fp
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b240:	2020      	movs	r0, #32
	} while (j < 8);
 801b242:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b244:	7008      	strb	r0, [r1, #0]
	} while (j < 8);
 801b246:	d020      	beq.n	801b28a <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b248:	1d19      	adds	r1, r3, #4
 801b24a:	2020      	movs	r0, #32
	} while (j < 8);
 801b24c:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b24e:	f80b 0002 	strb.w	r0, [fp, r2]
	} while (j < 8);
 801b252:	d01a      	beq.n	801b28a <dir_register+0x3d2>
 801b254:	4459      	add	r1, fp
 801b256:	1d5a      	adds	r2, r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b258:	2020      	movs	r0, #32
	} while (j < 8);
 801b25a:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b25c:	7008      	strb	r0, [r1, #0]
	} while (j < 8);
 801b25e:	d014      	beq.n	801b28a <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b260:	1d99      	adds	r1, r3, #6
 801b262:	2020      	movs	r0, #32
	} while (j < 8);
 801b264:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b266:	f80b 0002 	strb.w	r0, [fp, r2]
	} while (j < 8);
 801b26a:	d00e      	beq.n	801b28a <dir_register+0x3d2>
 801b26c:	4459      	add	r1, fp
 801b26e:	1dda      	adds	r2, r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b270:	2020      	movs	r0, #32
	} while (j < 8);
 801b272:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b274:	7008      	strb	r0, [r1, #0]
	} while (j < 8);
 801b276:	d008      	beq.n	801b28a <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b278:	f04f 0e20 	mov.w	lr, #32
	} while (j < 8);
 801b27c:	3301      	adds	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b27e:	f80b e002 	strb.w	lr, [fp, r2]
	} while (j < 8);
 801b282:	d102      	bne.n	801b28a <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b284:	2320      	movs	r3, #32
 801b286:	f88a 302b 	strb.w	r3, [sl, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801b28a:	4650      	mov	r0, sl
 801b28c:	f7ff fa90 	bl	801a7b0 <dir_find>
			if (res != FR_OK) break;
 801b290:	2800      	cmp	r0, #0
 801b292:	f040 80dd 	bne.w	801b450 <dir_register+0x598>
		for (n = 1; n < 100; n++) {
 801b296:	f108 0801 	add.w	r8, r8, #1
 801b29a:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 801b29e:	f000 80a3 	beq.w	801b3e8 <dir_register+0x530>
 801b2a2:	f8d9 700c 	ldr.w	r7, [r9, #12]
 801b2a6:	e695      	b.n	801afd4 <dir_register+0x11c>
			fs->winsect = sector;
 801b2a8:	f8c8 9038 	str.w	r9, [r8, #56]	; 0x38
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801b2ac:	f8da 3020 	ldr.w	r3, [sl, #32]
 801b2b0:	781c      	ldrb	r4, [r3, #0]
 801b2b2:	2ce5      	cmp	r4, #229	; 0xe5
 801b2b4:	d003      	beq.n	801b2be <dir_register+0x406>
 801b2b6:	fab4 f484 	clz	r4, r4
 801b2ba:	0964      	lsrs	r4, r4, #5
 801b2bc:	b124      	cbz	r4, 801b2c8 <dir_register+0x410>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801b2be:	1c6c      	adds	r4, r5, #1
 801b2c0:	9b03      	ldr	r3, [sp, #12]
 801b2c2:	42a3      	cmp	r3, r4
 801b2c4:	f000 8159 	beq.w	801b57a <dir_register+0x6c2>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801b2c8:	f8da 5014 	ldr.w	r5, [sl, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801b2cc:	4ac4      	ldr	r2, [pc, #784]	; (801b5e0 <dir_register+0x728>)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801b2ce:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801b2d0:	f8da 301c 	ldr.w	r3, [sl, #28]
 801b2d4:	4295      	cmp	r5, r2
 801b2d6:	f200 8087 	bhi.w	801b3e8 <dir_register+0x530>
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	f000 8084 	beq.w	801b3e8 <dir_register+0x530>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801b2e0:	f3c5 0b08 	ubfx	fp, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 801b2e4:	f8da 6000 	ldr.w	r6, [sl]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801b2e8:	f1bb 0f00 	cmp.w	fp, #0
 801b2ec:	d070      	beq.n	801b3d0 <dir_register+0x518>
 801b2ee:	f106 073c 	add.w	r7, r6, #60	; 0x3c
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801b2f2:	445f      	add	r7, fp
 801b2f4:	464e      	mov	r6, r9
	dp->dptr = ofs;						/* Current entry */
 801b2f6:	f8ca 5014 	str.w	r5, [sl, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801b2fa:	4699      	mov	r9, r3
 801b2fc:	f8ca 7020 	str.w	r7, [sl, #32]
 801b300:	4625      	mov	r5, r4
 801b302:	e61c      	b.n	801af3e <dir_register+0x86>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801b304:	4643      	mov	r3, r8
 801b306:	e70e      	b.n	801b126 <dir_register+0x26e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b308:	277e      	movs	r7, #126	; 0x7e
	} while (j < 8);
 801b30a:	f1bc 0f07 	cmp.w	ip, #7
 801b30e:	f105 0101 	add.w	r1, r5, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b312:	7007      	strb	r7, [r0, #0]
	} while (j < 8);
 801b314:	d8b9      	bhi.n	801b28a <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b316:	2908      	cmp	r1, #8
 801b318:	d08a      	beq.n	801b230 <dir_register+0x378>
 801b31a:	aa10      	add	r2, sp, #64	; 0x40
 801b31c:	1c98      	adds	r0, r3, #2
 801b31e:	3502      	adds	r5, #2
 801b320:	4411      	add	r1, r2
	} while (j < 8);
 801b322:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b324:	f811 2c14 	ldrb.w	r2, [r1, #-20]
 801b328:	f80b 200c 	strb.w	r2, [fp, ip]
	} while (j < 8);
 801b32c:	d0ad      	beq.n	801b28a <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b32e:	2d07      	cmp	r5, #7
 801b330:	f103 0203 	add.w	r2, r3, #3
 801b334:	eb0b 0100 	add.w	r1, fp, r0
 801b338:	d882      	bhi.n	801b240 <dir_register+0x388>
 801b33a:	af10      	add	r7, sp, #64	; 0x40
	} while (j < 8);
 801b33c:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b33e:	f105 0101 	add.w	r1, r5, #1
 801b342:	442f      	add	r7, r5
 801b344:	f817 7c14 	ldrb.w	r7, [r7, #-20]
 801b348:	f80b 7000 	strb.w	r7, [fp, r0]
	} while (j < 8);
 801b34c:	d09d      	beq.n	801b28a <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b34e:	2908      	cmp	r1, #8
 801b350:	f43f af7a 	beq.w	801b248 <dir_register+0x390>
 801b354:	a810      	add	r0, sp, #64	; 0x40
 801b356:	1caf      	adds	r7, r5, #2
 801b358:	4401      	add	r1, r0
 801b35a:	1d18      	adds	r0, r3, #4
 801b35c:	f811 1c14 	ldrb.w	r1, [r1, #-20]
	} while (j < 8);
 801b360:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b362:	f80b 1002 	strb.w	r1, [fp, r2]
	} while (j < 8);
 801b366:	d090      	beq.n	801b28a <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b368:	2f08      	cmp	r7, #8
 801b36a:	f103 0205 	add.w	r2, r3, #5
 801b36e:	eb0b 0100 	add.w	r1, fp, r0
 801b372:	f43f af71 	beq.w	801b258 <dir_register+0x3a0>
 801b376:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 801b378:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b37a:	440f      	add	r7, r1
 801b37c:	f105 0103 	add.w	r1, r5, #3
 801b380:	f817 7c14 	ldrb.w	r7, [r7, #-20]
 801b384:	f80b 7000 	strb.w	r7, [fp, r0]
	} while (j < 8);
 801b388:	f43f af7f 	beq.w	801b28a <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b38c:	2908      	cmp	r1, #8
 801b38e:	f43f af67 	beq.w	801b260 <dir_register+0x3a8>
 801b392:	a810      	add	r0, sp, #64	; 0x40
 801b394:	3504      	adds	r5, #4
 801b396:	4401      	add	r1, r0
 801b398:	1d98      	adds	r0, r3, #6
 801b39a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
	} while (j < 8);
 801b39e:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b3a0:	f80b 1002 	strb.w	r1, [fp, r2]
	} while (j < 8);
 801b3a4:	f43f af71 	beq.w	801b28a <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b3a8:	2d08      	cmp	r5, #8
 801b3aa:	f103 0207 	add.w	r2, r3, #7
 801b3ae:	eb0b 0100 	add.w	r1, fp, r0
 801b3b2:	f43f af5d 	beq.w	801b270 <dir_register+0x3b8>
 801b3b6:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 801b3b8:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b3ba:	4429      	add	r1, r5
 801b3bc:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 801b3c0:	f80b 1000 	strb.w	r1, [fp, r0]
	} while (j < 8);
 801b3c4:	f43f af61 	beq.w	801b28a <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b3c8:	2d06      	cmp	r5, #6
 801b3ca:	f43f af57 	beq.w	801b27c <dir_register+0x3c4>
 801b3ce:	e753      	b.n	801b278 <dir_register+0x3c0>
		dp->sect++;				/* Next sector */
 801b3d0:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 801b3d2:	f8da 1018 	ldr.w	r1, [sl, #24]
		dp->sect++;				/* Next sector */
 801b3d6:	f8ca 301c 	str.w	r3, [sl, #28]
		if (!dp->clust) {		/* Static table */
 801b3da:	bb11      	cbnz	r1, 801b422 <dir_register+0x56a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801b3dc:	8932      	ldrh	r2, [r6, #8]
 801b3de:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 801b3e2:	d823      	bhi.n	801b42c <dir_register+0x574>
				dp->sect = 0; return FR_NO_FILE;
 801b3e4:	f8ca 101c 	str.w	r1, [sl, #28]
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801b3e8:	2307      	movs	r3, #7
 801b3ea:	9301      	str	r3, [sp, #4]
}
 801b3ec:	9801      	ldr	r0, [sp, #4]
 801b3ee:	b011      	add	sp, #68	; 0x44
 801b3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 801b3f4:	237e      	movs	r3, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801b3f6:	2920      	cmp	r1, #32
	ns[i] = '~';
 801b3f8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801b3fc:	f000 82e5 	beq.w	801b9ca <dir_register+0xb12>
		ns[i--] = c;
 801b400:	2506      	movs	r5, #6
 801b402:	e6fa      	b.n	801b1fa <dir_register+0x342>
	ns[i] = '~';
 801b404:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 801b406:	2505      	movs	r5, #5
	ns[i] = '~';
 801b408:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801b40c:	2920      	cmp	r1, #32
 801b40e:	f47f aef4 	bne.w	801b1fa <dir_register+0x342>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b412:	237e      	movs	r3, #126	; 0x7e
 801b414:	1c69      	adds	r1, r5, #1
 801b416:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801b41a:	2300      	movs	r3, #0
 801b41c:	f04f 0c01 	mov.w	ip, #1
 801b420:	e77b      	b.n	801b31a <dir_register+0x462>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801b422:	8972      	ldrh	r2, [r6, #10]
 801b424:	3a01      	subs	r2, #1
 801b426:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 801b42a:	d03d      	beq.n	801b4a8 <dir_register+0x5f0>
 801b42c:	f106 073c 	add.w	r7, r6, #60	; 0x3c
 801b430:	f8d8 9038 	ldr.w	r9, [r8, #56]	; 0x38
 801b434:	e75d      	b.n	801b2f2 <dir_register+0x43a>
	ns[i] = '~';
 801b436:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 801b438:	2504      	movs	r5, #4
	ns[i] = '~';
 801b43a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 801b43e:	e7e5      	b.n	801b40c <dir_register+0x554>
 801b440:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 801b442:	2503      	movs	r5, #3
	ns[i] = '~';
 801b444:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 801b448:	e7e0      	b.n	801b40c <dir_register+0x554>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801b44a:	2301      	movs	r3, #1
 801b44c:	9301      	str	r3, [sp, #4]
 801b44e:	e5b4      	b.n	801afba <dir_register+0x102>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801b450:	2804      	cmp	r0, #4
 801b452:	9d01      	ldr	r5, [sp, #4]
 801b454:	9001      	str	r0, [sp, #4]
 801b456:	f47f adb0 	bne.w	801afba <dir_register+0x102>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801b45a:	07aa      	lsls	r2, r5, #30
		dp->fn[NSFLAG] = sn[NSFLAG];
 801b45c:	f88a 502f 	strb.w	r5, [sl, #47]	; 0x2f
 801b460:	f8da 8000 	ldr.w	r8, [sl]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801b464:	f53f ad51 	bmi.w	801af0a <dir_register+0x52>
 801b468:	2301      	movs	r3, #1
 801b46a:	9303      	str	r3, [sp, #12]
 801b46c:	e555      	b.n	801af1a <dir_register+0x62>
	ns[i] = '~';
 801b46e:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 801b470:	2502      	movs	r5, #2
	ns[i] = '~';
 801b472:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 801b476:	e7c9      	b.n	801b40c <dir_register+0x554>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801b478:	2306      	movs	r3, #6
 801b47a:	9301      	str	r3, [sp, #4]
 801b47c:	e59d      	b.n	801afba <dir_register+0x102>
	ns[i] = '~';
 801b47e:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 801b480:	2501      	movs	r5, #1
	ns[i] = '~';
 801b482:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801b486:	e7c1      	b.n	801b40c <dir_register+0x554>
 801b488:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b48a:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 801b48e:	2002      	movs	r0, #2
	ns[i] = '~';
 801b490:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b494:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
 801b498:	4605      	mov	r5, r0
 801b49a:	f88a 1025 	strb.w	r1, [sl, #37]	; 0x25
 801b49e:	e746      	b.n	801b32e <dir_register+0x476>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801b4a0:	2804      	cmp	r0, #4
 801b4a2:	f47f ad8a 	bne.w	801afba <dir_register+0x102>
 801b4a6:	e79f      	b.n	801b3e8 <dir_register+0x530>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801b4a8:	4630      	mov	r0, r6
 801b4aa:	f7fe fc07 	bl	8019cbc <get_fat.isra.10>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801b4ae:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801b4b0:	9005      	str	r0, [sp, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801b4b2:	f240 82b6 	bls.w	801ba22 <dir_register+0xb6a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801b4b6:	1c43      	adds	r3, r0, #1
 801b4b8:	d0c7      	beq.n	801b44a <dir_register+0x592>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801b4ba:	6a33      	ldr	r3, [r6, #32]
 801b4bc:	4298      	cmp	r0, r3
 801b4be:	f0c0 8289 	bcc.w	801b9d4 <dir_register+0xb1c>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801b4c2:	f8da 1018 	ldr.w	r1, [sl, #24]
 801b4c6:	4650      	mov	r0, sl
 801b4c8:	f7fe fd1e 	bl	8019f08 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801b4cc:	9005      	str	r0, [sp, #20]
 801b4ce:	2800      	cmp	r0, #0
 801b4d0:	d08a      	beq.n	801b3e8 <dir_register+0x530>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801b4d2:	2801      	cmp	r0, #1
 801b4d4:	f000 82a5 	beq.w	801ba22 <dir_register+0xb6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b4d8:	1c43      	adds	r3, r0, #1
 801b4da:	d0b6      	beq.n	801b44a <dir_register+0x592>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b4dc:	78f3      	ldrb	r3, [r6, #3]
 801b4de:	f106 073c 	add.w	r7, r6, #60	; 0x3c
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	f040 82a3 	bne.w	801ba2e <dir_register+0xb76>
	clst -= 2;
 801b4e8:	9b05      	ldr	r3, [sp, #20]
 801b4ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b4ee:	2100      	movs	r1, #0
 801b4f0:	4638      	mov	r0, r7
 801b4f2:	3b02      	subs	r3, #2
 801b4f4:	9307      	str	r3, [sp, #28]
 801b4f6:	f004 f90d 	bl	801f714 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b4fa:	6a33      	ldr	r3, [r6, #32]
 801b4fc:	9807      	ldr	r0, [sp, #28]
 801b4fe:	1e99      	subs	r1, r3, #2
 801b500:	8972      	ldrh	r2, [r6, #10]
 801b502:	4288      	cmp	r0, r1
 801b504:	f0c0 82bc 	bcc.w	801ba80 <dir_register+0xbc8>
 801b508:	f04f 0900 	mov.w	r9, #0
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b50c:	f8c6 9038 	str.w	r9, [r6, #56]	; 0x38
 801b510:	2a00      	cmp	r2, #0
 801b512:	f000 82b2 	beq.w	801ba7a <dir_register+0xbc2>
 801b516:	2300      	movs	r3, #0
 801b518:	9409      	str	r4, [sp, #36]	; 0x24
 801b51a:	9306      	str	r3, [sp, #24]
						fs->wflag = 1;
 801b51c:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b520:	464a      	mov	r2, r9
 801b522:	4639      	mov	r1, r7
 801b524:	7870      	ldrb	r0, [r6, #1]
						fs->wflag = 1;
 801b526:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b528:	2301      	movs	r3, #1
 801b52a:	f7fd fc55 	bl	8018dd8 <disk_write>
 801b52e:	2800      	cmp	r0, #0
 801b530:	d18b      	bne.n	801b44a <dir_register+0x592>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b532:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 801b534:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801b536:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 801b53a:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b53c:	429a      	cmp	r2, r3
 801b53e:	f080 825d 	bcs.w	801b9fc <dir_register+0xb44>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b542:	78b4      	ldrb	r4, [r6, #2]
 801b544:	2c01      	cmp	r4, #1
 801b546:	f240 8259 	bls.w	801b9fc <dir_register+0xb44>
					wsect += fs->fsize;
 801b54a:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b54c:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801b54e:	2301      	movs	r3, #1
 801b550:	4639      	mov	r1, r7
 801b552:	464a      	mov	r2, r9
 801b554:	7870      	ldrb	r0, [r6, #1]
 801b556:	f7fd fc3f 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b55a:	2c01      	cmp	r4, #1
 801b55c:	f000 824e 	beq.w	801b9fc <dir_register+0xb44>
 801b560:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801b562:	e7f2      	b.n	801b54a <dir_register+0x692>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b564:	f242 0020 	movw	r0, #8224	; 0x2020
 801b568:	f10a 0126 	add.w	r1, sl, #38	; 0x26
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801b56c:	2300      	movs	r3, #0
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b56e:	2203      	movs	r2, #3
 801b570:	f8aa 0024 	strh.w	r0, [sl, #36]	; 0x24
 801b574:	e664      	b.n	801b240 <dir_register+0x388>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801b576:	461e      	mov	r6, r3
 801b578:	e4b4      	b.n	801aee4 <dir_register+0x2c>
 801b57a:	f8dd b020 	ldr.w	fp, [sp, #32]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801b57e:	2d00      	cmp	r5, #0
 801b580:	d16b      	bne.n	801b65a <dir_register+0x7a2>
	if (sector != fs->winsect) {	/* Window offset changed? */
 801b582:	9b02      	ldr	r3, [sp, #8]
		res = move_window(fs, dp->sect);
 801b584:	f8da 601c 	ldr.w	r6, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 801b588:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 801b58a:	461a      	mov	r2, r3
 801b58c:	42a6      	cmp	r6, r4
 801b58e:	d033      	beq.n	801b5f8 <dir_register+0x740>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b590:	461d      	mov	r5, r3
 801b592:	78db      	ldrb	r3, [r3, #3]
 801b594:	f102 073c 	add.w	r7, r2, #60	; 0x3c
 801b598:	7850      	ldrb	r0, [r2, #1]
 801b59a:	b32b      	cbz	r3, 801b5e8 <dir_register+0x730>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b59c:	2301      	movs	r3, #1
 801b59e:	4622      	mov	r2, r4
 801b5a0:	4639      	mov	r1, r7
 801b5a2:	f7fd fc19 	bl	8018dd8 <disk_write>
 801b5a6:	2800      	cmp	r0, #0
 801b5a8:	f47f af4f 	bne.w	801b44a <dir_register+0x592>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b5ac:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801b5ae:	4629      	mov	r1, r5
 801b5b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b5b2:	1aa2      	subs	r2, r4, r2
			fs->wflag = 0;
 801b5b4:	70e8      	strb	r0, [r5, #3]
 801b5b6:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b5b8:	429a      	cmp	r2, r3
 801b5ba:	d215      	bcs.n	801b5e8 <dir_register+0x730>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b5bc:	78ad      	ldrb	r5, [r5, #2]
 801b5be:	2d01      	cmp	r5, #1
 801b5c0:	d912      	bls.n	801b5e8 <dir_register+0x730>
 801b5c2:	4688      	mov	r8, r1
					wsect += fs->fsize;
 801b5c4:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b5c6:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801b5c8:	2301      	movs	r3, #1
 801b5ca:	4639      	mov	r1, r7
 801b5cc:	4622      	mov	r2, r4
 801b5ce:	f7fd fc03 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b5d2:	2d01      	cmp	r5, #1
 801b5d4:	d006      	beq.n	801b5e4 <dir_register+0x72c>
 801b5d6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 801b5da:	f898 0001 	ldrb.w	r0, [r8, #1]
 801b5de:	e7f1      	b.n	801b5c4 <dir_register+0x70c>
 801b5e0:	001fffff 	.word	0x001fffff
 801b5e4:	9b02      	ldr	r3, [sp, #8]
 801b5e6:	7858      	ldrb	r0, [r3, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b5e8:	4639      	mov	r1, r7
 801b5ea:	2301      	movs	r3, #1
 801b5ec:	4632      	mov	r2, r6
 801b5ee:	f7fd fbe5 	bl	8018dbc <disk_read>
 801b5f2:	bb58      	cbnz	r0, 801b64c <dir_register+0x794>
			fs->winsect = sector;
 801b5f4:	9b02      	ldr	r3, [sp, #8]
 801b5f6:	639e      	str	r6, [r3, #56]	; 0x38
 801b5f8:	2220      	movs	r2, #32
 801b5fa:	2100      	movs	r1, #0
 801b5fc:	f8da 0020 	ldr.w	r0, [sl, #32]
 801b600:	f004 f888 	bl	801f714 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801b604:	f8da 3020 	ldr.w	r3, [sl, #32]
 801b608:	f10a 0228 	add.w	r2, sl, #40	; 0x28
 801b60c:	4293      	cmp	r3, r2
 801b60e:	d203      	bcs.n	801b618 <dir_register+0x760>
 801b610:	1d1a      	adds	r2, r3, #4
 801b612:	4593      	cmp	fp, r2
 801b614:	f0c0 81c0 	bcc.w	801b998 <dir_register+0xae0>
			*d++ = *s++;
 801b618:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 801b61c:	601a      	str	r2, [r3, #0]
 801b61e:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
 801b622:	605a      	str	r2, [r3, #4]
 801b624:	f89a 202c 	ldrb.w	r2, [sl, #44]	; 0x2c
 801b628:	721a      	strb	r2, [r3, #8]
 801b62a:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
 801b62e:	725a      	strb	r2, [r3, #9]
 801b630:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
 801b634:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 801b636:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801b638:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
 801b63c:	f8da 1020 	ldr.w	r1, [sl, #32]
 801b640:	f003 0318 	and.w	r3, r3, #24
 801b644:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 801b646:	9b02      	ldr	r3, [sp, #8]
 801b648:	70da      	strb	r2, [r3, #3]
 801b64a:	e4b6      	b.n	801afba <dir_register+0x102>
				res = FR_DISK_ERR;
 801b64c:	2201      	movs	r2, #1
			fs->winsect = sector;
 801b64e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 801b652:	9201      	str	r2, [sp, #4]
			fs->winsect = sector;
 801b654:	9a02      	ldr	r2, [sp, #8]
 801b656:	6393      	str	r3, [r2, #56]	; 0x38
 801b658:	e4af      	b.n	801afba <dir_register+0x102>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801b65a:	f8da 1014 	ldr.w	r1, [sl, #20]
 801b65e:	4650      	mov	r0, sl
 801b660:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 801b664:	f7fe f992 	bl	801998c <dir_sdi>
		if (res == FR_OK) {
 801b668:	2800      	cmp	r0, #0
 801b66a:	f040 8192 	bne.w	801b992 <dir_register+0xada>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801b66e:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b672:	f04f 0901 	mov.w	r9, #1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801b676:	f89a 1025 	ldrb.w	r1, [sl, #37]	; 0x25
 801b67a:	01d3      	lsls	r3, r2, #7
 801b67c:	f89a 4026 	ldrb.w	r4, [sl, #38]	; 0x26
 801b680:	f89a 0027 	ldrb.w	r0, [sl, #39]	; 0x27
 801b684:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 801b688:	9e02      	ldr	r6, [sp, #8]
 801b68a:	f8cd b010 	str.w	fp, [sp, #16]
 801b68e:	185a      	adds	r2, r3, r1
 801b690:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 801b694:	f106 083c 	add.w	r8, r6, #60	; 0x3c
 801b698:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801b69c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801b6a0:	fa54 f283 	uxtab	r2, r4, r3
 801b6a4:	f89a 4029 	ldrb.w	r4, [sl, #41]	; 0x29
 801b6a8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801b6ac:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801b6b0:	fa50 f283 	uxtab	r2, r0, r3
 801b6b4:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
 801b6b8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801b6bc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801b6c0:	fa51 f283 	uxtab	r2, r1, r3
 801b6c4:	f89a 102b 	ldrb.w	r1, [sl, #43]	; 0x2b
 801b6c8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801b6cc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801b6d0:	fa54 f283 	uxtab	r2, r4, r3
 801b6d4:	f89a 402c 	ldrb.w	r4, [sl, #44]	; 0x2c
 801b6d8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801b6dc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801b6e0:	fa50 f283 	uxtab	r2, r0, r3
 801b6e4:	f89a 002d 	ldrb.w	r0, [sl, #45]	; 0x2d
 801b6e8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801b6ec:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801b6f0:	fa51 f283 	uxtab	r2, r1, r3
 801b6f4:	f89a 102e 	ldrb.w	r1, [sl, #46]	; 0x2e
 801b6f8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801b6fc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801b700:	fa54 f283 	uxtab	r2, r4, r3
 801b704:	4634      	mov	r4, r6
 801b706:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801b70a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801b70e:	fa50 f383 	uxtab	r3, r0, r3
 801b712:	f3c3 0246 	ubfx	r2, r3, #1, #7
 801b716:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 801b71a:	fa51 f183 	uxtab	r1, r1, r3
 801b71e:	b2cb      	uxtb	r3, r1
 801b720:	9303      	str	r3, [sp, #12]
				res = move_window(fs, dp->sect);
 801b722:	f8da b01c 	ldr.w	fp, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 801b726:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801b728:	45b3      	cmp	fp, r6
 801b72a:	d01e      	beq.n	801b76a <dir_register+0x8b2>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b72c:	78e3      	ldrb	r3, [r4, #3]
 801b72e:	7860      	ldrb	r0, [r4, #1]
 801b730:	b18b      	cbz	r3, 801b756 <dir_register+0x89e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b732:	2301      	movs	r3, #1
 801b734:	4632      	mov	r2, r6
 801b736:	4641      	mov	r1, r8
 801b738:	f7fd fb4e 	bl	8018dd8 <disk_write>
 801b73c:	2800      	cmp	r0, #0
 801b73e:	f47f ae84 	bne.w	801b44a <dir_register+0x592>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b742:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801b744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b746:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 801b748:	70e0      	strb	r0, [r4, #3]
 801b74a:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b74c:	429a      	cmp	r2, r3
 801b74e:	d202      	bcs.n	801b756 <dir_register+0x89e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b750:	78a7      	ldrb	r7, [r4, #2]
 801b752:	2f01      	cmp	r7, #1
 801b754:	d85d      	bhi.n	801b812 <dir_register+0x95a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b756:	2301      	movs	r3, #1
 801b758:	465a      	mov	r2, fp
 801b75a:	4641      	mov	r1, r8
 801b75c:	f7fd fb2e 	bl	8018dbc <disk_read>
 801b760:	2800      	cmp	r0, #0
 801b762:	f47f af73 	bne.w	801b64c <dir_register+0x794>
			fs->winsect = sector;
 801b766:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801b76a:	b2ee      	uxtb	r6, r5
 801b76c:	f8da 3020 	ldr.w	r3, [sl, #32]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801b770:	9f03      	ldr	r7, [sp, #12]
	dir[LDIR_Type] = 0;
 801b772:	2000      	movs	r0, #0
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801b774:	1e72      	subs	r2, r6, #1
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801b776:	68e1      	ldr	r1, [r4, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801b778:	735f      	strb	r7, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801b77a:	f04f 0c0f 	mov.w	ip, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801b77e:	eb02 0742 	add.w	r7, r2, r2, lsl #1
	dir[LDIR_Type] = 0;
 801b782:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 801b784:	7698      	strb	r0, [r3, #26]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801b786:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	*ptr++ = (BYTE)val;
 801b78a:	76d8      	strb	r0, [r3, #27]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801b78c:	f883 c00b 	strb.w	ip, [r3, #11]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b790:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801b794:	0057      	lsls	r7, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 801b796:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801b79a:	f883 c001 	strb.w	ip, [r3, #1]
	*ptr++ = (BYTE)val;
 801b79e:	7098      	strb	r0, [r3, #2]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b7a0:	f1bc 0f00 	cmp.w	ip, #0
 801b7a4:	d140      	bne.n	801b828 <dir_register+0x970>
	*ptr++ = (BYTE)val; val >>= 8;
 801b7a6:	22ff      	movs	r2, #255	; 0xff
 801b7a8:	70da      	strb	r2, [r3, #3]
	*ptr++ = (BYTE)val;
 801b7aa:	711a      	strb	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 801b7ac:	22ff      	movs	r2, #255	; 0xff
 801b7ae:	715a      	strb	r2, [r3, #5]
	*ptr++ = (BYTE)val;
 801b7b0:	719a      	strb	r2, [r3, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 801b7b2:	22ff      	movs	r2, #255	; 0xff
 801b7b4:	71da      	strb	r2, [r3, #7]
	*ptr++ = (BYTE)val;
 801b7b6:	721a      	strb	r2, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 801b7b8:	22ff      	movs	r2, #255	; 0xff
 801b7ba:	725a      	strb	r2, [r3, #9]
	*ptr++ = (BYTE)val;
 801b7bc:	729a      	strb	r2, [r3, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 801b7be:	22ff      	movs	r2, #255	; 0xff
 801b7c0:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE)val;
 801b7c2:	73da      	strb	r2, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 801b7c4:	22ff      	movs	r2, #255	; 0xff
 801b7c6:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 801b7c8:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 801b7ca:	22ff      	movs	r2, #255	; 0xff
 801b7cc:	749a      	strb	r2, [r3, #18]
	*ptr++ = (BYTE)val;
 801b7ce:	74da      	strb	r2, [r3, #19]
	*ptr++ = (BYTE)val; val >>= 8;
 801b7d0:	22ff      	movs	r2, #255	; 0xff
 801b7d2:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 801b7d4:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 801b7d6:	22ff      	movs	r2, #255	; 0xff
 801b7d8:	759a      	strb	r2, [r3, #22]
	*ptr++ = (BYTE)val;
 801b7da:	75da      	strb	r2, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 801b7dc:	22ff      	movs	r2, #255	; 0xff
 801b7de:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 801b7e0:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 801b7e2:	22ff      	movs	r2, #255	; 0xff
 801b7e4:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val;
 801b7e6:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 801b7e8:	22ff      	movs	r2, #255	; 0xff
 801b7ea:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 801b7ec:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801b7ee:	f046 0640 	orr.w	r6, r6, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801b7f2:	701e      	strb	r6, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 801b7f4:	4650      	mov	r0, sl
				fs->wflag = 1;
 801b7f6:	f884 9003 	strb.w	r9, [r4, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801b7fa:	f7fe fd3f 	bl	801a27c <dir_next.constprop.15>
			} while (res == FR_OK && --nent);
 801b7fe:	2800      	cmp	r0, #0
 801b800:	f040 80c7 	bne.w	801b992 <dir_register+0xada>
 801b804:	3d01      	subs	r5, #1
 801b806:	d18c      	bne.n	801b722 <dir_register+0x86a>
 801b808:	f8dd b010 	ldr.w	fp, [sp, #16]
 801b80c:	e6b9      	b.n	801b582 <dir_register+0x6ca>
 801b80e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b810:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 801b812:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b814:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801b816:	2301      	movs	r3, #1
 801b818:	4641      	mov	r1, r8
 801b81a:	4632      	mov	r2, r6
 801b81c:	f7fd fadc 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b820:	2f01      	cmp	r7, #1
 801b822:	d1f4      	bne.n	801b80e <dir_register+0x956>
 801b824:	7860      	ldrb	r0, [r4, #1]
 801b826:	e796      	b.n	801b756 <dir_register+0x89e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b828:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b82c:	4584      	cmp	ip, r0
 801b82e:	d0ba      	beq.n	801b7a6 <dir_register+0x8ee>
 801b830:	3201      	adds	r2, #1
 801b832:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801b836:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 801b838:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b83c:	f883 c003 	strb.w	ip, [r3, #3]
	*ptr++ = (BYTE)val;
 801b840:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b844:	f1bc 0f00 	cmp.w	ip, #0
 801b848:	d0b0      	beq.n	801b7ac <dir_register+0x8f4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b84a:	4584      	cmp	ip, r0
 801b84c:	d0ae      	beq.n	801b7ac <dir_register+0x8f4>
 801b84e:	440a      	add	r2, r1
 801b850:	f8b2 c002 	ldrh.w	ip, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801b854:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b858:	f883 c005 	strb.w	ip, [r3, #5]
	*ptr++ = (BYTE)val;
 801b85c:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b860:	f1bc 0f00 	cmp.w	ip, #0
 801b864:	d0a5      	beq.n	801b7b2 <dir_register+0x8fa>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b866:	4584      	cmp	ip, r0
 801b868:	d0a3      	beq.n	801b7b2 <dir_register+0x8fa>
 801b86a:	f8b2 c004 	ldrh.w	ip, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 801b86e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b872:	f883 c007 	strb.w	ip, [r3, #7]
	*ptr++ = (BYTE)val;
 801b876:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b87a:	f1bc 0f00 	cmp.w	ip, #0
 801b87e:	d09b      	beq.n	801b7b8 <dir_register+0x900>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b880:	4584      	cmp	ip, r0
 801b882:	d099      	beq.n	801b7b8 <dir_register+0x900>
 801b884:	f8b2 c006 	ldrh.w	ip, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 801b888:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b88c:	f883 c009 	strb.w	ip, [r3, #9]
	*ptr++ = (BYTE)val;
 801b890:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b894:	f1bc 0f00 	cmp.w	ip, #0
 801b898:	d091      	beq.n	801b7be <dir_register+0x906>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b89a:	4584      	cmp	ip, r0
 801b89c:	d08f      	beq.n	801b7be <dir_register+0x906>
 801b89e:	f8b2 c008 	ldrh.w	ip, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 801b8a2:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801b8a6:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val;
 801b8aa:	73d8      	strb	r0, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b8ac:	f1bc 0f00 	cmp.w	ip, #0
 801b8b0:	d088      	beq.n	801b7c4 <dir_register+0x90c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b8b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b8b6:	4584      	cmp	ip, r0
 801b8b8:	d084      	beq.n	801b7c4 <dir_register+0x90c>
 801b8ba:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 801b8be:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b8c2:	f883 c010 	strb.w	ip, [r3, #16]
	*ptr++ = (BYTE)val;
 801b8c6:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b8ca:	f1bc 0f00 	cmp.w	ip, #0
 801b8ce:	f43f af7c 	beq.w	801b7ca <dir_register+0x912>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b8d2:	4584      	cmp	ip, r0
 801b8d4:	f43f af79 	beq.w	801b7ca <dir_register+0x912>
 801b8d8:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 801b8dc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b8e0:	f883 c012 	strb.w	ip, [r3, #18]
	*ptr++ = (BYTE)val;
 801b8e4:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b8e8:	f1bc 0f00 	cmp.w	ip, #0
 801b8ec:	f43f af70 	beq.w	801b7d0 <dir_register+0x918>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b8f0:	4584      	cmp	ip, r0
 801b8f2:	f43f af6d 	beq.w	801b7d0 <dir_register+0x918>
 801b8f6:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 801b8fa:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b8fe:	f883 c014 	strb.w	ip, [r3, #20]
	*ptr++ = (BYTE)val;
 801b902:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b906:	f1bc 0f00 	cmp.w	ip, #0
 801b90a:	f43f af64 	beq.w	801b7d6 <dir_register+0x91e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b90e:	4584      	cmp	ip, r0
 801b910:	f43f af61 	beq.w	801b7d6 <dir_register+0x91e>
 801b914:	f8b2 c010 	ldrh.w	ip, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 801b918:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b91c:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val;
 801b920:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b924:	f1bc 0f00 	cmp.w	ip, #0
 801b928:	f43f af58 	beq.w	801b7dc <dir_register+0x924>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b92c:	4584      	cmp	ip, r0
 801b92e:	f43f af55 	beq.w	801b7dc <dir_register+0x924>
 801b932:	8a50      	ldrh	r0, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 801b934:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 801b938:	7618      	strb	r0, [r3, #24]
	*ptr++ = (BYTE)val;
 801b93a:	f883 c019 	strb.w	ip, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b93e:	2800      	cmp	r0, #0
 801b940:	f43f af4f 	beq.w	801b7e2 <dir_register+0x92a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b944:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801b948:	4560      	cmp	r0, ip
 801b94a:	f43f af4a 	beq.w	801b7e2 <dir_register+0x92a>
 801b94e:	8a90      	ldrh	r0, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 801b950:	ea4f 2e10 	mov.w	lr, r0, lsr #8
 801b954:	7718      	strb	r0, [r3, #28]
	*ptr++ = (BYTE)val;
 801b956:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b95a:	2800      	cmp	r0, #0
 801b95c:	f43f af44 	beq.w	801b7e8 <dir_register+0x930>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b960:	4560      	cmp	r0, ip
 801b962:	f43f af41 	beq.w	801b7e8 <dir_register+0x930>
 801b966:	f8b2 e016 	ldrh.w	lr, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b96a:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 801b96e:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 801b972:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801b976:	f883 e01e 	strb.w	lr, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b97a:	b292      	uxth	r2, r2
	*ptr++ = (BYTE)val;
 801b97c:	f883 c01f 	strb.w	ip, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b980:	4282      	cmp	r2, r0
 801b982:	f63f af34 	bhi.w	801b7ee <dir_register+0x936>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801b986:	4439      	add	r1, r7
 801b988:	8b4a      	ldrh	r2, [r1, #26]
 801b98a:	2a00      	cmp	r2, #0
 801b98c:	f43f af2f 	beq.w	801b7ee <dir_register+0x936>
 801b990:	e72f      	b.n	801b7f2 <dir_register+0x93a>
 801b992:	9001      	str	r0, [sp, #4]
 801b994:	f7ff bb11 	b.w	801afba <dir_register+0x102>
			*d++ = *s++;
 801b998:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
 801b99c:	701a      	strb	r2, [r3, #0]
 801b99e:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
 801b9a2:	705a      	strb	r2, [r3, #1]
 801b9a4:	f89a 2026 	ldrb.w	r2, [sl, #38]	; 0x26
 801b9a8:	709a      	strb	r2, [r3, #2]
 801b9aa:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
 801b9ae:	70da      	strb	r2, [r3, #3]
 801b9b0:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 801b9b4:	711a      	strb	r2, [r3, #4]
 801b9b6:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 801b9ba:	715a      	strb	r2, [r3, #5]
 801b9bc:	f89a 202a 	ldrb.w	r2, [sl, #42]	; 0x2a
 801b9c0:	719a      	strb	r2, [r3, #6]
 801b9c2:	f89a 202b 	ldrb.w	r2, [sl, #43]	; 0x2b
 801b9c6:	71da      	strb	r2, [r3, #7]
 801b9c8:	e62c      	b.n	801b624 <dir_register+0x76c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b9ca:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
 801b9ce:	2107      	movs	r1, #7
		ns[i--] = c;
 801b9d0:	2506      	movs	r5, #6
 801b9d2:	e522      	b.n	801b41a <dir_register+0x562>
 801b9d4:	1e82      	subs	r2, r0, #2
 801b9d6:	f106 073c 	add.w	r7, r6, #60	; 0x3c
 801b9da:	4611      	mov	r1, r2
 801b9dc:	9207      	str	r2, [sp, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b9de:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 801b9e0:	9a05      	ldr	r2, [sp, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b9e2:	4299      	cmp	r1, r3
				dp->clust = clst;		/* Initialize data for new cluster */
 801b9e4:	f8ca 2018 	str.w	r2, [sl, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b9e8:	d21f      	bcs.n	801ba2a <dir_register+0xb72>
	return clst * fs->csize + fs->database;
 801b9ea:	8972      	ldrh	r2, [r6, #10]
 801b9ec:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801b9ee:	fb01 3302 	mla	r3, r1, r2, r3
 801b9f2:	f8d8 9038 	ldr.w	r9, [r8, #56]	; 0x38
				dp->sect = clust2sect(fs, clst);
 801b9f6:	f8ca 301c 	str.w	r3, [sl, #28]
 801b9fa:	e47a      	b.n	801b2f2 <dir_register+0x43a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b9fc:	9b06      	ldr	r3, [sp, #24]
 801b9fe:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 801ba00:	3301      	adds	r3, #1
 801ba02:	3201      	adds	r2, #1
 801ba04:	4619      	mov	r1, r3
 801ba06:	9306      	str	r3, [sp, #24]
 801ba08:	8973      	ldrh	r3, [r6, #10]
 801ba0a:	4691      	mov	r9, r2
 801ba0c:	63b2      	str	r2, [r6, #56]	; 0x38
 801ba0e:	4299      	cmp	r1, r3
 801ba10:	f4ff ad84 	bcc.w	801b51c <dir_register+0x664>
 801ba14:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ba16:	6a33      	ldr	r3, [r6, #32]
					fs->winsect -= n;							/* Restore window offset */
 801ba18:	9906      	ldr	r1, [sp, #24]
 801ba1a:	1a52      	subs	r2, r2, r1
 801ba1c:	9907      	ldr	r1, [sp, #28]
 801ba1e:	63b2      	str	r2, [r6, #56]	; 0x38
 801ba20:	e7dd      	b.n	801b9de <dir_register+0xb26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801ba22:	2302      	movs	r3, #2
 801ba24:	9301      	str	r3, [sp, #4]
 801ba26:	f7ff bac8 	b.w	801afba <dir_register+0x102>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801ba2a:	2300      	movs	r3, #0
 801ba2c:	e7e1      	b.n	801b9f2 <dir_register+0xb3a>
		wsect = fs->winsect;	/* Current sector number */
 801ba2e:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801ba32:	2301      	movs	r3, #1
 801ba34:	4639      	mov	r1, r7
 801ba36:	7870      	ldrb	r0, [r6, #1]
 801ba38:	464a      	mov	r2, r9
 801ba3a:	f7fd f9cd 	bl	8018dd8 <disk_write>
 801ba3e:	2800      	cmp	r0, #0
 801ba40:	f47f ad03 	bne.w	801b44a <dir_register+0x592>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801ba44:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 801ba46:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801ba48:	eba9 0303 	sub.w	r3, r9, r3
			fs->wflag = 0;
 801ba4c:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801ba4e:	4293      	cmp	r3, r2
 801ba50:	f4bf ad4a 	bcs.w	801b4e8 <dir_register+0x630>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801ba54:	78b3      	ldrb	r3, [r6, #2]
 801ba56:	9306      	str	r3, [sp, #24]
 801ba58:	9b06      	ldr	r3, [sp, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 801ba5a:	4639      	mov	r1, r7
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801ba5c:	2b01      	cmp	r3, #1
 801ba5e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801ba62:	9306      	str	r3, [sp, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 801ba64:	f04f 0301 	mov.w	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801ba68:	f67f ad3e 	bls.w	801b4e8 <dir_register+0x630>
					wsect += fs->fsize;
 801ba6c:	6a72      	ldr	r2, [r6, #36]	; 0x24
					disk_write(fs->drv, fs->win, wsect, 1);
 801ba6e:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 801ba70:	4491      	add	r9, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 801ba72:	464a      	mov	r2, r9
 801ba74:	f7fd f9b0 	bl	8018dd8 <disk_write>
 801ba78:	e7ee      	b.n	801ba58 <dir_register+0xba0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801ba7a:	9206      	str	r2, [sp, #24]
 801ba7c:	464a      	mov	r2, r9
 801ba7e:	e7cb      	b.n	801ba18 <dir_register+0xb60>
	return clst * fs->csize + fs->database;
 801ba80:	6b71      	ldr	r1, [r6, #52]	; 0x34
 801ba82:	9807      	ldr	r0, [sp, #28]
 801ba84:	fb02 1900 	mla	r9, r2, r0, r1
 801ba88:	e540      	b.n	801b50c <dir_register+0x654>
 801ba8a:	bf00      	nop

0801ba8c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801ba8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801ba90:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
 801ba92:	6805      	ldr	r5, [r0, #0]
{
 801ba94:	b085      	sub	sp, #20
	*rfs = 0;
 801ba96:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 801ba98:	2d00      	cmp	r5, #0
 801ba9a:	f000 81dd 	beq.w	801be58 <find_volume+0x3cc>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801ba9e:	782e      	ldrb	r6, [r5, #0]
 801baa0:	2e1f      	cmp	r6, #31
 801baa2:	d95d      	bls.n	801bb60 <find_volume+0xd4>
 801baa4:	2e3a      	cmp	r6, #58	; 0x3a
 801baa6:	d05b      	beq.n	801bb60 <find_volume+0xd4>
 801baa8:	462c      	mov	r4, r5
 801baaa:	e001      	b.n	801bab0 <find_volume+0x24>
 801baac:	2b3a      	cmp	r3, #58	; 0x3a
 801baae:	d003      	beq.n	801bab8 <find_volume+0x2c>
 801bab0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801bab4:	2b1f      	cmp	r3, #31
 801bab6:	d8f9      	bhi.n	801baac <find_volume+0x20>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801bab8:	2b3a      	cmp	r3, #58	; 0x3a
 801baba:	d03e      	beq.n	801bb3a <find_volume+0xae>
		vol = CurrVol;	/* Current drive */
 801babc:	4bb4      	ldr	r3, [pc, #720]	; (801bd90 <find_volume+0x304>)
 801babe:	781e      	ldrb	r6, [r3, #0]
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801bac0:	4bb4      	ldr	r3, [pc, #720]	; (801bd94 <find_volume+0x308>)
 801bac2:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801bac6:	2c00      	cmp	r4, #0
 801bac8:	d046      	beq.n	801bb58 <find_volume+0xcc>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801baca:	6920      	ldr	r0, [r4, #16]
 801bacc:	4615      	mov	r5, r2
 801bace:	460f      	mov	r7, r1
 801bad0:	f001 fc16 	bl	801d300 <ff_req_grant>
 801bad4:	b918      	cbnz	r0, 801bade <find_volume+0x52>

	ENTER_FF(fs);						/* Lock the volume */
 801bad6:	200f      	movs	r0, #15
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 801bad8:	b005      	add	sp, #20
 801bada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	*rfs = fs;							/* Return pointer to the file system object */
 801bade:	603c      	str	r4, [r7, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801bae0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 801bae4:	7823      	ldrb	r3, [r4, #0]
 801bae6:	b163      	cbz	r3, 801bb02 <find_volume+0x76>
		stat = disk_status(fs->drv);
 801bae8:	7860      	ldrb	r0, [r4, #1]
 801baea:	f7fd f949 	bl	8018d80 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801baee:	07c1      	lsls	r1, r0, #31
 801baf0:	d407      	bmi.n	801bb02 <find_volume+0x76>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801baf2:	2d00      	cmp	r5, #0
 801baf4:	f000 814a 	beq.w	801bd8c <find_volume+0x300>
 801baf8:	f010 0004 	ands.w	r0, r0, #4
 801bafc:	d0ec      	beq.n	801bad8 <find_volume+0x4c>
				return FR_WRITE_PROTECTED;
 801bafe:	200a      	movs	r0, #10
 801bb00:	e7ea      	b.n	801bad8 <find_volume+0x4c>
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801bb02:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 801bb04:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801bb06:	7060      	strb	r0, [r4, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 801bb08:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801bb0a:	f7fd f943 	bl	8018d94 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801bb0e:	07c2      	lsls	r2, r0, #31
 801bb10:	f100 813a 	bmi.w	801bd88 <find_volume+0x2fc>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801bb14:	b10d      	cbz	r5, 801bb1a <find_volume+0x8e>
 801bb16:	0743      	lsls	r3, r0, #29
 801bb18:	d4f1      	bmi.n	801bafe <find_volume+0x72>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801bb1a:	2200      	movs	r2, #0
 801bb1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801bb20:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 801bb24:	2301      	movs	r3, #1
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801bb26:	70e2      	strb	r2, [r4, #3]
 801bb28:	63a5      	str	r5, [r4, #56]	; 0x38
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801bb2a:	4631      	mov	r1, r6
 801bb2c:	7860      	ldrb	r0, [r4, #1]
 801bb2e:	f7fd f945 	bl	8018dbc <disk_read>
 801bb32:	b1c0      	cbz	r0, 801bb66 <find_volume+0xda>
			fs->winsect = sector;
 801bb34:	63a5      	str	r5, [r4, #56]	; 0x38
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801bb36:	2001      	movs	r0, #1
 801bb38:	e7ce      	b.n	801bad8 <find_volume+0x4c>
			i = *tp++ - '0';
 801bb3a:	3501      	adds	r5, #1
 801bb3c:	3e30      	subs	r6, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801bb3e:	42ac      	cmp	r4, r5
 801bb40:	f040 818a 	bne.w	801be58 <find_volume+0x3cc>
 801bb44:	2e01      	cmp	r6, #1
 801bb46:	f200 8187 	bhi.w	801be58 <find_volume+0x3cc>
					*path = ++tt;
 801bb4a:	3401      	adds	r4, #1
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801bb4c:	4b91      	ldr	r3, [pc, #580]	; (801bd94 <find_volume+0x308>)
					*path = ++tt;
 801bb4e:	6004      	str	r4, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801bb50:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801bb54:	2c00      	cmp	r4, #0
 801bb56:	d1b8      	bne.n	801baca <find_volume+0x3e>
 801bb58:	200c      	movs	r0, #12
}
 801bb5a:	b005      	add	sp, #20
 801bb5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801bb60:	4633      	mov	r3, r6
 801bb62:	462c      	mov	r4, r5
 801bb64:	e7a8      	b.n	801bab8 <find_volume+0x2c>
	rv = rv << 8 | ptr[0];
 801bb66:	f894 223b 	ldrb.w	r2, [r4, #571]	; 0x23b
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801bb6a:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 801bb6e:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
			fs->winsect = sector;
 801bb72:	63a0      	str	r0, [r4, #56]	; 0x38
	rv = rv << 8 | ptr[0];
 801bb74:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801bb78:	4288      	cmp	r0, r1
 801bb7a:	f040 8101 	bne.w	801bd80 <find_volume+0x2f4>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801bb7e:	f894 703c 	ldrb.w	r7, [r4, #60]	; 0x3c
 801bb82:	2fe9      	cmp	r7, #233	; 0xe9
 801bb84:	d006      	beq.n	801bb94 <find_volume+0x108>
 801bb86:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801bb88:	4883      	ldr	r0, [pc, #524]	; (801bd98 <find_volume+0x30c>)
 801bb8a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801bb8e:	4281      	cmp	r1, r0
 801bb90:	f040 810c 	bne.w	801bdac <find_volume+0x320>
	rv = rv << 8 | ptr[2];
 801bb94:	f8b4 5074 	ldrh.w	r5, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 801bb98:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 801bb9c:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 801bba0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801bba4:	4d7d      	ldr	r5, [pc, #500]	; (801bd9c <find_volume+0x310>)
	rv = rv << 8 | ptr[0];
 801bba6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801bbaa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801bbae:	42a9      	cmp	r1, r5
 801bbb0:	d00d      	beq.n	801bbce <find_volume+0x142>
	rv = rv << 8 | ptr[2];
 801bbb2:	f8b4 5090 	ldrh.w	r5, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 801bbb6:	f894 008f 	ldrb.w	r0, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 801bbba:	f894 108e 	ldrb.w	r1, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 801bbbe:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801bbc2:	4d77      	ldr	r5, [pc, #476]	; (801bda0 <find_volume+0x314>)
	rv = rv << 8 | ptr[0];
 801bbc4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801bbc8:	42a9      	cmp	r1, r5
 801bbca:	f040 80ef 	bne.w	801bdac <find_volume+0x320>
	bsect = 0;
 801bbce:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[0];
 801bbd0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801bbd4:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 801bbd8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801bbdc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801bbe0:	f040 80ce 	bne.w	801bd80 <find_volume+0x2f4>
	rv = rv << 8 | ptr[0];
 801bbe4:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
 801bbe8:	f894 1052 	ldrb.w	r1, [r4, #82]	; 0x52
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801bbec:	ea51 2100 	orrs.w	r1, r1, r0, lsl #8
 801bbf0:	d109      	bne.n	801bc06 <find_volume+0x17a>
	rv = rv << 8 | ptr[2];
 801bbf2:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
	rv = rv << 8 | ptr[1];
 801bbf6:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 801bbfa:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
	rv = rv << 8 | ptr[1];
 801bbfe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	rv = rv << 8 | ptr[0];
 801bc02:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801bc06:	f894 704c 	ldrb.w	r7, [r4, #76]	; 0x4c
		fs->fsize = fasize;
 801bc0a:	6261      	str	r1, [r4, #36]	; 0x24
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801bc0c:	1e78      	subs	r0, r7, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801bc0e:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801bc10:	2801      	cmp	r0, #1
 801bc12:	f200 80b5 	bhi.w	801bd80 <find_volume+0x2f4>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801bc16:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 801bc1a:	fa1f f089 	uxth.w	r0, r9
 801bc1e:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801bc20:	2800      	cmp	r0, #0
 801bc22:	f000 80ad 	beq.w	801bd80 <find_volume+0x2f4>
 801bc26:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 801bc2a:	ea10 0f09 	tst.w	r0, r9
 801bc2e:	f040 80a7 	bne.w	801bd80 <find_volume+0x2f4>
	rv = rv << 8 | ptr[0];
 801bc32:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 801bc36:	f894 604d 	ldrb.w	r6, [r4, #77]	; 0x4d
 801bc3a:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
 801bc3e:	b236      	sxth	r6, r6
 801bc40:	fa1f fe86 	uxth.w	lr, r6
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801bc44:	f01e 0f0f 	tst.w	lr, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801bc48:	f8a4 e008 	strh.w	lr, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801bc4c:	f040 8098 	bne.w	801bd80 <find_volume+0x2f4>
	rv = rv << 8 | ptr[0];
 801bc50:	f894 c050 	ldrb.w	ip, [r4, #80]	; 0x50
 801bc54:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801bc58:	ea50 200c 	orrs.w	r0, r0, ip, lsl #8
 801bc5c:	d109      	bne.n	801bc72 <find_volume+0x1e6>
	rv = rv << 8 | ptr[2];
 801bc5e:	f8b4 805e 	ldrh.w	r8, [r4, #94]	; 0x5e
	rv = rv << 8 | ptr[1];
 801bc62:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
	rv = rv << 8 | ptr[0];
 801bc66:	f894 c05c 	ldrb.w	ip, [r4, #92]	; 0x5c
	rv = rv << 8 | ptr[1];
 801bc6a:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
	rv = rv << 8 | ptr[0];
 801bc6e:	ea4c 2000 	orr.w	r0, ip, r0, lsl #8
	rv = rv << 8 | ptr[0];
 801bc72:	f894 804b 	ldrb.w	r8, [r4, #75]	; 0x4b
 801bc76:	f894 c04a 	ldrb.w	ip, [r4, #74]	; 0x4a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801bc7a:	ea5c 2c08 	orrs.w	ip, ip, r8, lsl #8
 801bc7e:	d07f      	beq.n	801bd80 <find_volume+0x2f4>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801bc80:	fb01 f707 	mul.w	r7, r1, r7
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801bc84:	eb0c 181e 	add.w	r8, ip, lr, lsr #4
 801bc88:	44b8      	add	r8, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801bc8a:	4540      	cmp	r0, r8
 801bc8c:	d378      	bcc.n	801bd80 <find_volume+0x2f4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801bc8e:	eba0 0008 	sub.w	r0, r0, r8
 801bc92:	fbb0 f0f9 	udiv	r0, r0, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801bc96:	2800      	cmp	r0, #0
 801bc98:	d072      	beq.n	801bd80 <find_volume+0x2f4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801bc9a:	f64f 79f5 	movw	r9, #65525	; 0xfff5
 801bc9e:	4548      	cmp	r0, r9
 801bca0:	f200 81b6 	bhi.w	801c010 <find_volume+0x584>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801bca4:	f640 79f5 	movw	r9, #4085	; 0xff5
 801bca8:	eb0c 0205 	add.w	r2, ip, r5
 801bcac:	eb08 0605 	add.w	r6, r8, r5
 801bcb0:	1c83      	adds	r3, r0, #2
 801bcb2:	4548      	cmp	r0, r9
 801bcb4:	f200 81e2 	bhi.w	801c07c <find_volume+0x5f0>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801bcb8:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801bcba:	6366      	str	r6, [r4, #52]	; 0x34
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801bcbc:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801bcc0:	f1be 0f00 	cmp.w	lr, #0
 801bcc4:	d05c      	beq.n	801bd80 <find_volume+0x2f4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801bcc6:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 801bcca:	f003 0301 	and.w	r3, r3, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801bcce:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801bcd0:	2001      	movs	r0, #1
 801bcd2:	eb03 0355 	add.w	r3, r3, r5, lsr #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801bcd6:	6322      	str	r2, [r4, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801bcd8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801bcdc:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 801bce0:	d34e      	bcc.n	801bd80 <find_volume+0x2f4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801bce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 801bce6:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801bce8:	e9c4 3305 	strd	r3, r3, [r4, #20]
		fs->fsi_flag = 0x80;
 801bcec:	7122      	strb	r2, [r4, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 801bcee:	4d2d      	ldr	r5, [pc, #180]	; (801bda4 <find_volume+0x318>)
	fs->cdir = 0;			/* Initialize current directory */
 801bcf0:	2100      	movs	r1, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 801bcf2:	4a2d      	ldr	r2, [pc, #180]	; (801bda8 <find_volume+0x31c>)
	fs->id = ++Fsid;		/* File system mount ID */
 801bcf4:	882b      	ldrh	r3, [r5, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 801bcf6:	7020      	strb	r0, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801bcf8:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 801bcfa:	6810      	ldr	r0, [r2, #0]
	fs->cdir = 0;			/* Initialize current directory */
 801bcfc:	61e1      	str	r1, [r4, #28]
	fs->id = ++Fsid;		/* File system mount ID */
 801bcfe:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 801bd00:	42a0      	cmp	r0, r4
 801bd02:	f04f 0000 	mov.w	r0, #0
	fs->id = ++Fsid;		/* File system mount ID */
 801bd06:	802b      	strh	r3, [r5, #0]
 801bd08:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 801bd0a:	6913      	ldr	r3, [r2, #16]
 801bd0c:	bf08      	it	eq
 801bd0e:	6011      	streq	r1, [r2, #0]
 801bd10:	429c      	cmp	r4, r3
 801bd12:	f47f aee1 	bne.w	801bad8 <find_volume+0x4c>
 801bd16:	6110      	str	r0, [r2, #16]
 801bd18:	e6de      	b.n	801bad8 <find_volume+0x4c>
			fs->winsect = sector;
 801bd1a:	63a5      	str	r5, [r4, #56]	; 0x38
	rv = rv << 8 | ptr[0];
 801bd1c:	f894 223b 	ldrb.w	r2, [r4, #571]	; 0x23b
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801bd20:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 801bd24:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
 801bd28:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801bd2c:	4288      	cmp	r0, r1
 801bd2e:	d127      	bne.n	801bd80 <find_volume+0x2f4>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801bd30:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 801bd34:	29e9      	cmp	r1, #233	; 0xe9
 801bd36:	d005      	beq.n	801bd44 <find_volume+0x2b8>
 801bd38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801bd3a:	4817      	ldr	r0, [pc, #92]	; (801bd98 <find_volume+0x30c>)
 801bd3c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801bd40:	4281      	cmp	r1, r0
 801bd42:	d11d      	bne.n	801bd80 <find_volume+0x2f4>
	rv = rv << 8 | ptr[2];
 801bd44:	f8b4 6074 	ldrh.w	r6, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 801bd48:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 801bd4c:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 801bd50:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801bd54:	4e11      	ldr	r6, [pc, #68]	; (801bd9c <find_volume+0x310>)
	rv = rv << 8 | ptr[0];
 801bd56:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801bd5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801bd5e:	42b1      	cmp	r1, r6
 801bd60:	f43f af36 	beq.w	801bbd0 <find_volume+0x144>
	rv = rv << 8 | ptr[2];
 801bd64:	f8b4 6090 	ldrh.w	r6, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 801bd68:	f894 008f 	ldrb.w	r0, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 801bd6c:	f894 108e 	ldrb.w	r1, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 801bd70:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801bd74:	4e0a      	ldr	r6, [pc, #40]	; (801bda0 <find_volume+0x314>)
	rv = rv << 8 | ptr[0];
 801bd76:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801bd7a:	42b1      	cmp	r1, r6
 801bd7c:	f43f af28 	beq.w	801bbd0 <find_volume+0x144>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801bd80:	200d      	movs	r0, #13
}
 801bd82:	b005      	add	sp, #20
 801bd84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801bd88:	2003      	movs	r0, #3
 801bd8a:	e6a5      	b.n	801bad8 <find_volume+0x4c>
			return FR_OK;				/* The file system object is valid */
 801bd8c:	4628      	mov	r0, r5
 801bd8e:	e6a3      	b.n	801bad8 <find_volume+0x4c>
 801bd90:	20006224 	.word	0x20006224
 801bd94:	20006228 	.word	0x20006228
 801bd98:	009000eb 	.word	0x009000eb
 801bd9c:	00544146 	.word	0x00544146
 801bda0:	33544146 	.word	0x33544146
 801bda4:	20006250 	.word	0x20006250
 801bda8:	20006230 	.word	0x20006230
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801bdac:	f894 51fe 	ldrb.w	r5, [r4, #510]	; 0x1fe
 801bdb0:	b14d      	cbz	r5, 801bdc6 <find_volume+0x33a>
	rv = rv << 8 | ptr[2];
 801bdb2:	f8b4 0204 	ldrh.w	r0, [r4, #516]	; 0x204
	rv = rv << 8 | ptr[1];
 801bdb6:	f894 1203 	ldrb.w	r1, [r4, #515]	; 0x203
	rv = rv << 8 | ptr[0];
 801bdba:	f894 5202 	ldrb.w	r5, [r4, #514]	; 0x202
	rv = rv << 8 | ptr[1];
 801bdbe:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	rv = rv << 8 | ptr[0];
 801bdc2:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801bdc6:	f894 020e 	ldrb.w	r0, [r4, #526]	; 0x20e
 801bdca:	b148      	cbz	r0, 801bde0 <find_volume+0x354>
	rv = rv << 8 | ptr[2];
 801bdcc:	f8b4 c214 	ldrh.w	ip, [r4, #532]	; 0x214
	rv = rv << 8 | ptr[1];
 801bdd0:	f894 0213 	ldrb.w	r0, [r4, #531]	; 0x213
	rv = rv << 8 | ptr[0];
 801bdd4:	f894 1212 	ldrb.w	r1, [r4, #530]	; 0x212
	rv = rv << 8 | ptr[1];
 801bdd8:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 801bddc:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801bde0:	f894 121e 	ldrb.w	r1, [r4, #542]	; 0x21e
 801bde4:	9001      	str	r0, [sp, #4]
 801bde6:	2900      	cmp	r1, #0
 801bde8:	f000 80d6 	beq.w	801bf98 <find_volume+0x50c>
	rv = rv << 8 | ptr[2];
 801bdec:	f8b4 c224 	ldrh.w	ip, [r4, #548]	; 0x224
	rv = rv << 8 | ptr[1];
 801bdf0:	f894 0223 	ldrb.w	r0, [r4, #547]	; 0x223
	rv = rv << 8 | ptr[0];
 801bdf4:	f894 1222 	ldrb.w	r1, [r4, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 801bdf8:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 801bdfc:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801be00:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
 801be04:	9002      	str	r0, [sp, #8]
 801be06:	b149      	cbz	r1, 801be1c <find_volume+0x390>
	rv = rv << 8 | ptr[2];
 801be08:	f8b4 c234 	ldrh.w	ip, [r4, #564]	; 0x234
	rv = rv << 8 | ptr[1];
 801be0c:	f894 0233 	ldrb.w	r0, [r4, #563]	; 0x233
	rv = rv << 8 | ptr[0];
 801be10:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
	rv = rv << 8 | ptr[1];
 801be14:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 801be18:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801be1c:	9103      	str	r1, [sp, #12]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801be1e:	b9ed      	cbnz	r5, 801be5c <find_volume+0x3d0>
			bsect = br[i];
 801be20:	9d01      	ldr	r5, [sp, #4]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801be22:	bb85      	cbnz	r5, 801be86 <find_volume+0x3fa>
			bsect = br[i];
 801be24:	9d02      	ldr	r5, [sp, #8]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801be26:	2d00      	cmp	r5, #0
 801be28:	d171      	bne.n	801bf0e <find_volume+0x482>
			bsect = br[i];
 801be2a:	9d03      	ldr	r5, [sp, #12]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801be2c:	2d00      	cmp	r5, #0
 801be2e:	d0a7      	beq.n	801bd80 <find_volume+0x2f4>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801be30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801be34:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801be36:	42bd      	cmp	r5, r7
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801be38:	70e3      	strb	r3, [r4, #3]
 801be3a:	63a7      	str	r7, [r4, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 801be3c:	f43f af6e 	beq.w	801bd1c <find_volume+0x290>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801be40:	4631      	mov	r1, r6
 801be42:	2301      	movs	r3, #1
 801be44:	462a      	mov	r2, r5
 801be46:	7860      	ldrb	r0, [r4, #1]
 801be48:	f7fc ffb8 	bl	8018dbc <disk_read>
 801be4c:	2800      	cmp	r0, #0
 801be4e:	f43f af64 	beq.w	801bd1a <find_volume+0x28e>
			fs->winsect = sector;
 801be52:	63a7      	str	r7, [r4, #56]	; 0x38
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801be54:	2001      	movs	r0, #1
 801be56:	e63f      	b.n	801bad8 <find_volume+0x4c>
	if (vol < 0) return FR_INVALID_DRIVE;
 801be58:	200b      	movs	r0, #11
 801be5a:	e63d      	b.n	801bad8 <find_volume+0x4c>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801be5c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801be60:	2100      	movs	r1, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801be62:	4545      	cmp	r5, r8
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801be64:	70e1      	strb	r1, [r4, #3]
 801be66:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 801be6a:	f000 80a5 	beq.w	801bfb8 <find_volume+0x52c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801be6e:	2301      	movs	r3, #1
 801be70:	462a      	mov	r2, r5
 801be72:	4631      	mov	r1, r6
 801be74:	7860      	ldrb	r0, [r4, #1]
 801be76:	f7fc ffa1 	bl	8018dbc <disk_read>
 801be7a:	2800      	cmp	r0, #0
 801be7c:	f000 808e 	beq.w	801bf9c <find_volume+0x510>
			fs->winsect = sector;
 801be80:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 801be84:	e7cc      	b.n	801be20 <find_volume+0x394>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801be86:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801be8a:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801be8c:	42bd      	cmp	r5, r7
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801be8e:	70e3      	strb	r3, [r4, #3]
 801be90:	63a7      	str	r7, [r4, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 801be92:	d009      	beq.n	801bea8 <find_volume+0x41c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801be94:	2301      	movs	r3, #1
 801be96:	462a      	mov	r2, r5
 801be98:	4631      	mov	r1, r6
 801be9a:	7860      	ldrb	r0, [r4, #1]
 801be9c:	f7fc ff8e 	bl	8018dbc <disk_read>
 801bea0:	2800      	cmp	r0, #0
 801bea2:	f040 80b1 	bne.w	801c008 <find_volume+0x57c>
			fs->winsect = sector;
 801bea6:	63a5      	str	r5, [r4, #56]	; 0x38
	rv = rv << 8 | ptr[0];
 801bea8:	f894 223b 	ldrb.w	r2, [r4, #571]	; 0x23b
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801beac:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 801beb0:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
 801beb4:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801beb8:	4288      	cmp	r0, r1
 801beba:	d1b3      	bne.n	801be24 <find_volume+0x398>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801bebc:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 801bec0:	29e9      	cmp	r1, #233	; 0xe9
 801bec2:	d005      	beq.n	801bed0 <find_volume+0x444>
 801bec4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801bec6:	4897      	ldr	r0, [pc, #604]	; (801c124 <find_volume+0x698>)
 801bec8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801becc:	4281      	cmp	r1, r0
 801bece:	d1a9      	bne.n	801be24 <find_volume+0x398>
	rv = rv << 8 | ptr[2];
 801bed0:	f8b4 7074 	ldrh.w	r7, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 801bed4:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 801bed8:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 801bedc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801bee0:	4f91      	ldr	r7, [pc, #580]	; (801c128 <find_volume+0x69c>)
	rv = rv << 8 | ptr[0];
 801bee2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801bee6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801beea:	42b9      	cmp	r1, r7
 801beec:	f43f ae70 	beq.w	801bbd0 <find_volume+0x144>
	rv = rv << 8 | ptr[2];
 801bef0:	f8b4 7090 	ldrh.w	r7, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 801bef4:	f894 008f 	ldrb.w	r0, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 801bef8:	f894 108e 	ldrb.w	r1, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 801befc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801bf00:	4f8a      	ldr	r7, [pc, #552]	; (801c12c <find_volume+0x6a0>)
	rv = rv << 8 | ptr[0];
 801bf02:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801bf06:	42b9      	cmp	r1, r7
 801bf08:	f43f ae62 	beq.w	801bbd0 <find_volume+0x144>
 801bf0c:	e78a      	b.n	801be24 <find_volume+0x398>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801bf0e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801bf12:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801bf14:	42bd      	cmp	r5, r7
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801bf16:	70e3      	strb	r3, [r4, #3]
 801bf18:	63a7      	str	r7, [r4, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 801bf1a:	d008      	beq.n	801bf2e <find_volume+0x4a2>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801bf1c:	2301      	movs	r3, #1
 801bf1e:	462a      	mov	r2, r5
 801bf20:	4631      	mov	r1, r6
 801bf22:	7860      	ldrb	r0, [r4, #1]
 801bf24:	f7fc ff4a 	bl	8018dbc <disk_read>
 801bf28:	2800      	cmp	r0, #0
 801bf2a:	d16f      	bne.n	801c00c <find_volume+0x580>
			fs->winsect = sector;
 801bf2c:	63a5      	str	r5, [r4, #56]	; 0x38
	rv = rv << 8 | ptr[0];
 801bf2e:	f894 223b 	ldrb.w	r2, [r4, #571]	; 0x23b
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801bf32:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 801bf36:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
 801bf3a:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801bf3e:	4288      	cmp	r0, r1
 801bf40:	f47f af73 	bne.w	801be2a <find_volume+0x39e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801bf44:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 801bf48:	29e9      	cmp	r1, #233	; 0xe9
 801bf4a:	d006      	beq.n	801bf5a <find_volume+0x4ce>
 801bf4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801bf4e:	4875      	ldr	r0, [pc, #468]	; (801c124 <find_volume+0x698>)
 801bf50:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801bf54:	4281      	cmp	r1, r0
 801bf56:	f47f af68 	bne.w	801be2a <find_volume+0x39e>
	rv = rv << 8 | ptr[2];
 801bf5a:	f8b4 7074 	ldrh.w	r7, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 801bf5e:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 801bf62:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 801bf66:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801bf6a:	4f6f      	ldr	r7, [pc, #444]	; (801c128 <find_volume+0x69c>)
	rv = rv << 8 | ptr[0];
 801bf6c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801bf70:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801bf74:	42b9      	cmp	r1, r7
 801bf76:	f43f ae2b 	beq.w	801bbd0 <find_volume+0x144>
	rv = rv << 8 | ptr[2];
 801bf7a:	f8b4 7090 	ldrh.w	r7, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 801bf7e:	f894 008f 	ldrb.w	r0, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 801bf82:	f894 108e 	ldrb.w	r1, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 801bf86:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801bf8a:	4f68      	ldr	r7, [pc, #416]	; (801c12c <find_volume+0x6a0>)
	rv = rv << 8 | ptr[0];
 801bf8c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801bf90:	42b9      	cmp	r1, r7
 801bf92:	f43f ae1d 	beq.w	801bbd0 <find_volume+0x144>
 801bf96:	e748      	b.n	801be2a <find_volume+0x39e>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801bf98:	4608      	mov	r0, r1
 801bf9a:	e731      	b.n	801be00 <find_volume+0x374>
	rv = rv << 8 | ptr[0];
 801bf9c:	f894 223b 	ldrb.w	r2, [r4, #571]	; 0x23b
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801bfa0:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 801bfa4:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
			fs->winsect = sector;
 801bfa8:	63a5      	str	r5, [r4, #56]	; 0x38
	rv = rv << 8 | ptr[0];
 801bfaa:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801bfae:	4288      	cmp	r0, r1
 801bfb0:	f47f af36 	bne.w	801be20 <find_volume+0x394>
 801bfb4:	f894 703c 	ldrb.w	r7, [r4, #60]	; 0x3c
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801bfb8:	2fe9      	cmp	r7, #233	; 0xe9
 801bfba:	d006      	beq.n	801bfca <find_volume+0x53e>
 801bfbc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801bfbe:	4859      	ldr	r0, [pc, #356]	; (801c124 <find_volume+0x698>)
 801bfc0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801bfc4:	4281      	cmp	r1, r0
 801bfc6:	f47f af2b 	bne.w	801be20 <find_volume+0x394>
	rv = rv << 8 | ptr[2];
 801bfca:	f8b4 7074 	ldrh.w	r7, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 801bfce:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 801bfd2:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 801bfd6:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801bfda:	4f53      	ldr	r7, [pc, #332]	; (801c128 <find_volume+0x69c>)
	rv = rv << 8 | ptr[0];
 801bfdc:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801bfe0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801bfe4:	42b9      	cmp	r1, r7
 801bfe6:	f43f adf3 	beq.w	801bbd0 <find_volume+0x144>
	rv = rv << 8 | ptr[2];
 801bfea:	f8b4 7090 	ldrh.w	r7, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 801bfee:	f894 008f 	ldrb.w	r0, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 801bff2:	f894 108e 	ldrb.w	r1, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 801bff6:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801bffa:	4f4c      	ldr	r7, [pc, #304]	; (801c12c <find_volume+0x6a0>)
	rv = rv << 8 | ptr[0];
 801bffc:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801c000:	42b9      	cmp	r1, r7
 801c002:	f43f ade5 	beq.w	801bbd0 <find_volume+0x144>
 801c006:	e70b      	b.n	801be20 <find_volume+0x394>
			fs->winsect = sector;
 801c008:	63a7      	str	r7, [r4, #56]	; 0x38
 801c00a:	e70b      	b.n	801be24 <find_volume+0x398>
 801c00c:	63a7      	str	r7, [r4, #56]	; 0x38
 801c00e:	e70c      	b.n	801be2a <find_volume+0x39e>
	rv = rv << 8 | ptr[0];
 801c010:	f894 e067 	ldrb.w	lr, [r4, #103]	; 0x67
 801c014:	3002      	adds	r0, #2
 801c016:	f894 7066 	ldrb.w	r7, [r4, #102]	; 0x66
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801c01a:	44ac      	add	ip, r5
		fs->database = bsect + sysect;					/* Data start sector */
 801c01c:	44a8      	add	r8, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801c01e:	6220      	str	r0, [r4, #32]
	rv = rv << 8 | ptr[0];
 801c020:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801c024:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 801c028:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801c02c:	433e      	orrs	r6, r7
		fs->volbase = bsect;							/* Volume start sector */
 801c02e:	62a5      	str	r5, [r4, #40]	; 0x28
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801c030:	b236      	sxth	r6, r6
 801c032:	2e00      	cmp	r6, #0
 801c034:	f47f aea4 	bne.w	801bd80 <find_volume+0x2f4>
	rv = rv << 8 | ptr[2];
 801c038:	f8b4 c06a 	ldrh.w	ip, [r4, #106]	; 0x6a
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801c03c:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[1];
 801c03e:	f894 7069 	ldrb.w	r7, [r4, #105]	; 0x69
	rv = rv << 8 | ptr[0];
 801c042:	f894 6068 	ldrb.w	r6, [r4, #104]	; 0x68
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801c046:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
	rv = rv << 8 | ptr[1];
 801c04a:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801c04e:	ebb1 2f50 	cmp.w	r1, r0, lsr #9
	rv = rv << 8 | ptr[0];
 801c052:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801c056:	6326      	str	r6, [r4, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801c058:	f4ff ae92 	bcc.w	801bd80 <find_volume+0x2f4>
	rv = rv << 8 | ptr[0];
 801c05c:	f894 706d 	ldrb.w	r7, [r4, #109]	; 0x6d
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801c060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	rv = rv << 8 | ptr[0];
 801c064:	f894 106c 	ldrb.w	r1, [r4, #108]	; 0x6c
		fs->fsi_flag = 0x80;
 801c068:	2680      	movs	r6, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801c06a:	61a0      	str	r0, [r4, #24]
	rv = rv << 8 | ptr[0];
 801c06c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801c070:	6160      	str	r0, [r4, #20]
		fs->fsi_flag = 0x80;
 801c072:	7126      	strb	r6, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801c074:	2901      	cmp	r1, #1
 801c076:	d00e      	beq.n	801c096 <find_volume+0x60a>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801c078:	2003      	movs	r0, #3
 801c07a:	e638      	b.n	801bcee <find_volume+0x262>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801c07c:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801c07e:	6366      	str	r6, [r4, #52]	; 0x34
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801c080:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801c084:	f1be 0f00 	cmp.w	lr, #0
 801c088:	f43f ae7a 	beq.w	801bd80 <find_volume+0x2f4>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801c08c:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801c08e:	005b      	lsls	r3, r3, #1
 801c090:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801c092:	6322      	str	r2, [r4, #48]	; 0x30
 801c094:	e620      	b.n	801bcd8 <find_volume+0x24c>
			&& move_window(fs, bsect + 1) == FR_OK)
 801c096:	1c69      	adds	r1, r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 801c098:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c09a:	4281      	cmp	r1, r0
 801c09c:	d138      	bne.n	801c110 <find_volume+0x684>
	rv = rv << 8 | ptr[0];
 801c09e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801c0a2:	f64a 2255 	movw	r2, #43605	; 0xaa55
			fs->fsi_flag = 0;
 801c0a6:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801c0a8:	4293      	cmp	r3, r2
			fs->fsi_flag = 0;
 801c0aa:	7121      	strb	r1, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801c0ac:	d1e4      	bne.n	801c078 <find_volume+0x5ec>
	rv = rv << 8 | ptr[2];
 801c0ae:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
	rv = rv << 8 | ptr[1];
 801c0b0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
	rv = rv << 8 | ptr[0];
 801c0b4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	rv = rv << 8 | ptr[1];
 801c0b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801c0bc:	491c      	ldr	r1, [pc, #112]	; (801c130 <find_volume+0x6a4>)
	rv = rv << 8 | ptr[0];
 801c0be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801c0c2:	428b      	cmp	r3, r1
 801c0c4:	d1d8      	bne.n	801c078 <find_volume+0x5ec>
	rv = rv << 8 | ptr[2];
 801c0c6:	f8b4 1222 	ldrh.w	r1, [r4, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 801c0ca:	f894 2221 	ldrb.w	r2, [r4, #545]	; 0x221
	rv = rv << 8 | ptr[0];
 801c0ce:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
	rv = rv << 8 | ptr[1];
 801c0d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801c0d6:	4917      	ldr	r1, [pc, #92]	; (801c134 <find_volume+0x6a8>)
	rv = rv << 8 | ptr[0];
 801c0d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801c0dc:	428b      	cmp	r3, r1
 801c0de:	d1cb      	bne.n	801c078 <find_volume+0x5ec>
	rv = rv << 8 | ptr[1];
 801c0e0:	f894 2225 	ldrb.w	r2, [r4, #549]	; 0x225
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801c0e4:	2003      	movs	r0, #3
	rv = rv << 8 | ptr[1];
 801c0e6:	f894 3229 	ldrb.w	r3, [r4, #553]	; 0x229
	rv = rv << 8 | ptr[2];
 801c0ea:	f8b4 5226 	ldrh.w	r5, [r4, #550]	; 0x226
 801c0ee:	f8b4 122a 	ldrh.w	r1, [r4, #554]	; 0x22a
	rv = rv << 8 | ptr[1];
 801c0f2:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
	rv = rv << 8 | ptr[0];
 801c0f6:	f894 2224 	ldrb.w	r2, [r4, #548]	; 0x224
	rv = rv << 8 | ptr[1];
 801c0fa:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 801c0fe:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 801c102:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 801c106:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801c10a:	e9c4 3205 	strd	r3, r2, [r4, #20]
 801c10e:	e5ee      	b.n	801bcee <find_volume+0x262>
 801c110:	4620      	mov	r0, r4
 801c112:	f7fc ff6f 	bl	8018ff4 <move_window.part.7>
			&& move_window(fs, bsect + 1) == FR_OK)
 801c116:	2800      	cmp	r0, #0
 801c118:	d1ae      	bne.n	801c078 <find_volume+0x5ec>
 801c11a:	f894 223b 	ldrb.w	r2, [r4, #571]	; 0x23b
 801c11e:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
 801c122:	e7bc      	b.n	801c09e <find_volume+0x612>
 801c124:	009000eb 	.word	0x009000eb
 801c128:	00544146 	.word	0x00544146
 801c12c:	33544146 	.word	0x33544146
 801c130:	41615252 	.word	0x41615252
 801c134:	61417272 	.word	0x61417272

0801c138 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801c138:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c13a:	b083      	sub	sp, #12
 801c13c:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 801c140:	2900      	cmp	r1, #0
 801c142:	d059      	beq.n	801c1f8 <f_mount+0xc0>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801c144:	780c      	ldrb	r4, [r1, #0]
 801c146:	2c3a      	cmp	r4, #58	; 0x3a
 801c148:	d065      	beq.n	801c216 <f_mount+0xde>
 801c14a:	2c1f      	cmp	r4, #31
 801c14c:	d963      	bls.n	801c216 <f_mount+0xde>
 801c14e:	4608      	mov	r0, r1
 801c150:	e001      	b.n	801c156 <f_mount+0x1e>
 801c152:	2b3a      	cmp	r3, #58	; 0x3a
 801c154:	d003      	beq.n	801c15e <f_mount+0x26>
 801c156:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801c15a:	2b1f      	cmp	r3, #31
 801c15c:	d8f9      	bhi.n	801c152 <f_mount+0x1a>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801c15e:	2b3a      	cmp	r3, #58	; 0x3a
 801c160:	d043      	beq.n	801c1ea <f_mount+0xb2>
		vol = CurrVol;	/* Current drive */
 801c162:	4b2f      	ldr	r3, [pc, #188]	; (801c220 <f_mount+0xe8>)
 801c164:	781d      	ldrb	r5, [r3, #0]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
	cfs = FatFs[vol];					/* Pointer to fs object */
 801c166:	4e2f      	ldr	r6, [pc, #188]	; (801c224 <f_mount+0xec>)
 801c168:	4617      	mov	r7, r2
 801c16a:	f856 4025 	ldr.w	r4, [r6, r5, lsl #2]

	if (cfs) {
 801c16e:	b164      	cbz	r4, 801c18a <f_mount+0x52>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801c170:	4b2d      	ldr	r3, [pc, #180]	; (801c228 <f_mount+0xf0>)
 801c172:	681a      	ldr	r2, [r3, #0]
 801c174:	4294      	cmp	r4, r2
 801c176:	d041      	beq.n	801c1fc <f_mount+0xc4>
 801c178:	691a      	ldr	r2, [r3, #16]
 801c17a:	42a2      	cmp	r2, r4
 801c17c:	d043      	beq.n	801c206 <f_mount+0xce>
#if _FS_LOCK != 0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801c17e:	6920      	ldr	r0, [r4, #16]
 801c180:	f001 f8b8 	bl	801d2f4 <ff_del_syncobj>
 801c184:	b368      	cbz	r0, 801c1e2 <f_mount+0xaa>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801c186:	2300      	movs	r3, #0
 801c188:	7023      	strb	r3, [r4, #0]
	}

	if (fs) {
 801c18a:	9901      	ldr	r1, [sp, #4]
 801c18c:	b319      	cbz	r1, 801c1d6 <f_mount+0x9e>
		fs->fs_type = 0;				/* Clear new fs object */
 801c18e:	2300      	movs	r3, #0
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801c190:	b2e8      	uxtb	r0, r5
		fs->fs_type = 0;				/* Clear new fs object */
 801c192:	f801 3b10 	strb.w	r3, [r1], #16
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801c196:	f001 f89d 	bl	801d2d4 <ff_cre_syncobj>
 801c19a:	b310      	cbz	r0, 801c1e2 <f_mount+0xaa>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801c19c:	9b01      	ldr	r3, [sp, #4]
 801c19e:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d03a      	beq.n	801c21c <f_mount+0xe4>
 801c1a6:	f117 32ff 	adds.w	r2, r7, #4294967295	; 0xffffffff
 801c1aa:	bf18      	it	ne
 801c1ac:	2201      	movne	r2, #1
 801c1ae:	2a00      	cmp	r2, #0
 801c1b0:	d134      	bne.n	801c21c <f_mount+0xe4>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801c1b2:	a901      	add	r1, sp, #4
 801c1b4:	4668      	mov	r0, sp
 801c1b6:	f7ff fc69 	bl	801ba8c <find_volume>
	LEAVE_FF(fs, res);
 801c1ba:	9b01      	ldr	r3, [sp, #4]
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801c1bc:	4604      	mov	r4, r0
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801c1be:	b16b      	cbz	r3, 801c1dc <f_mount+0xa4>
 801c1c0:	f1a0 020b 	sub.w	r2, r0, #11
 801c1c4:	b2d2      	uxtb	r2, r2
 801c1c6:	2a01      	cmp	r2, #1
 801c1c8:	d908      	bls.n	801c1dc <f_mount+0xa4>
 801c1ca:	280f      	cmp	r0, #15
 801c1cc:	d006      	beq.n	801c1dc <f_mount+0xa4>
		ff_rel_grant(fs->sobj);
 801c1ce:	6918      	ldr	r0, [r3, #16]
 801c1d0:	f001 f8a0 	bl	801d314 <ff_rel_grant>
 801c1d4:	e002      	b.n	801c1dc <f_mount+0xa4>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801c1d6:	460c      	mov	r4, r1
	FatFs[vol] = fs;					/* Register new fs object */
 801c1d8:	f846 1025 	str.w	r1, [r6, r5, lsl #2]
}
 801c1dc:	4620      	mov	r0, r4
 801c1de:	b003      	add	sp, #12
 801c1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801c1e2:	2402      	movs	r4, #2
}
 801c1e4:	4620      	mov	r0, r4
 801c1e6:	b003      	add	sp, #12
 801c1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			i = *tp++ - '0';
 801c1ea:	3101      	adds	r1, #1
 801c1ec:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801c1f0:	4288      	cmp	r0, r1
 801c1f2:	d101      	bne.n	801c1f8 <f_mount+0xc0>
 801c1f4:	2d01      	cmp	r5, #1
 801c1f6:	d9b6      	bls.n	801c166 <f_mount+0x2e>
	if (vol < 0) return FR_INVALID_DRIVE;
 801c1f8:	240b      	movs	r4, #11
 801c1fa:	e7ef      	b.n	801c1dc <f_mount+0xa4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801c1fc:	2200      	movs	r2, #0
 801c1fe:	601a      	str	r2, [r3, #0]
 801c200:	691a      	ldr	r2, [r3, #16]
 801c202:	42a2      	cmp	r2, r4
 801c204:	d1bb      	bne.n	801c17e <f_mount+0x46>
 801c206:	2200      	movs	r2, #0
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801c208:	6920      	ldr	r0, [r4, #16]
		if (Files[i].fs == fs) Files[i].fs = 0;
 801c20a:	611a      	str	r2, [r3, #16]
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801c20c:	f001 f872 	bl	801d2f4 <ff_del_syncobj>
 801c210:	2800      	cmp	r0, #0
 801c212:	d1b8      	bne.n	801c186 <f_mount+0x4e>
 801c214:	e7e5      	b.n	801c1e2 <f_mount+0xaa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801c216:	4623      	mov	r3, r4
 801c218:	4608      	mov	r0, r1
 801c21a:	e7a0      	b.n	801c15e <f_mount+0x26>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801c21c:	2400      	movs	r4, #0
 801c21e:	e7dd      	b.n	801c1dc <f_mount+0xa4>
 801c220:	20006224 	.word	0x20006224
 801c224:	20006228 	.word	0x20006228
 801c228:	20006230 	.word	0x20006230

0801c22c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801c22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c230:	b093      	sub	sp, #76	; 0x4c
 801c232:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801c234:	2800      	cmp	r0, #0
 801c236:	d04b      	beq.n	801c2d0 <f_open+0xa4>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801c238:	f002 073f 	and.w	r7, r2, #63	; 0x3f
 801c23c:	4604      	mov	r4, r0
 801c23e:	4615      	mov	r5, r2
	res = find_volume(&path, &fs, mode);
 801c240:	a903      	add	r1, sp, #12
 801c242:	a801      	add	r0, sp, #4
 801c244:	463a      	mov	r2, r7
 801c246:	f7ff fc21 	bl	801ba8c <find_volume>
	if (res == FR_OK) {
 801c24a:	4606      	mov	r6, r0
 801c24c:	b140      	cbz	r0, 801c260 <f_open+0x34>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801c24e:	2200      	movs	r2, #0

	LEAVE_FF(fs, res);
 801c250:	9b03      	ldr	r3, [sp, #12]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801c252:	6022      	str	r2, [r4, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801c254:	2b00      	cmp	r3, #0
 801c256:	d140      	bne.n	801c2da <f_open+0xae>
}
 801c258:	4630      	mov	r0, r6
 801c25a:	b013      	add	sp, #76	; 0x4c
 801c25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 801c260:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 801c262:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
 801c266:	9304      	str	r3, [sp, #16]
		INIT_NAMBUF(fs);
 801c268:	f001 f856 	bl	801d318 <ff_memalloc>
 801c26c:	9b03      	ldr	r3, [sp, #12]
 801c26e:	4680      	mov	r8, r0
 801c270:	2800      	cmp	r0, #0
 801c272:	d03d      	beq.n	801c2f0 <f_open+0xc4>
 801c274:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801c276:	a804      	add	r0, sp, #16
 801c278:	9901      	ldr	r1, [sp, #4]
 801c27a:	f7fe fc45 	bl	801ab08 <follow_path>
 801c27e:	f005 031c 	and.w	r3, r5, #28
		if (res == FR_OK) {
 801c282:	2800      	cmp	r0, #0
 801c284:	d13c      	bne.n	801c300 <f_open+0xd4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801c286:	f99d 203f 	ldrsb.w	r2, [sp, #63]	; 0x3f
 801c28a:	2a00      	cmp	r2, #0
 801c28c:	f2c0 80bd 	blt.w	801c40a <f_open+0x1de>
		if (Files[i].fs) {	/* Existing entry */
 801c290:	f8df 9404 	ldr.w	r9, [pc, #1028]	; 801c698 <f_open+0x46c>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c294:	f027 0001 	bic.w	r0, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801c298:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 801c29a:	f8d9 a000 	ldr.w	sl, [r9]
				Files[i].clu == dp->obj.sclust &&
 801c29e:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 801c2a2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 801c2a6:	f1ba 0f00 	cmp.w	sl, #0
 801c2aa:	f000 815b 	beq.w	801c564 <f_open+0x338>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801c2ae:	4552      	cmp	r2, sl
 801c2b0:	f000 8175 	beq.w	801c59e <f_open+0x372>
		if (Files[i].fs) {	/* Existing entry */
 801c2b4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801c2b8:	2900      	cmp	r1, #0
 801c2ba:	f000 8119 	beq.w	801c4f0 <f_open+0x2c4>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801c2be:	428a      	cmp	r2, r1
 801c2c0:	f000 8178 	beq.w	801c5b4 <f_open+0x388>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801c2c4:	2012      	movs	r0, #18
		FREE_NAMBUF();
 801c2c6:	4606      	mov	r6, r0
 801c2c8:	4640      	mov	r0, r8
 801c2ca:	f001 f827 	bl	801d31c <ff_memfree>
 801c2ce:	e7be      	b.n	801c24e <f_open+0x22>
	if (!fp) return FR_INVALID_OBJECT;
 801c2d0:	2609      	movs	r6, #9
}
 801c2d2:	4630      	mov	r0, r6
 801c2d4:	b013      	add	sp, #76	; 0x4c
 801c2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801c2da:	f1a6 020b 	sub.w	r2, r6, #11
 801c2de:	b2d2      	uxtb	r2, r2
 801c2e0:	2a01      	cmp	r2, #1
 801c2e2:	d9b9      	bls.n	801c258 <f_open+0x2c>
 801c2e4:	2e0f      	cmp	r6, #15
 801c2e6:	d0b7      	beq.n	801c258 <f_open+0x2c>
		ff_rel_grant(fs->sobj);
 801c2e8:	6918      	ldr	r0, [r3, #16]
 801c2ea:	f001 f813 	bl	801d314 <ff_rel_grant>
 801c2ee:	e7b3      	b.n	801c258 <f_open+0x2c>
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	f000 8088 	beq.w	801c406 <f_open+0x1da>
		ff_rel_grant(fs->sobj);
 801c2f6:	6918      	ldr	r0, [r3, #16]
		INIT_NAMBUF(fs);
 801c2f8:	2611      	movs	r6, #17
		ff_rel_grant(fs->sobj);
 801c2fa:	f001 f80b 	bl	801d314 <ff_rel_grant>
 801c2fe:	e7ab      	b.n	801c258 <f_open+0x2c>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801c300:	2b00      	cmp	r3, #0
 801c302:	d0e0      	beq.n	801c2c6 <f_open+0x9a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801c304:	2804      	cmp	r0, #4
 801c306:	d1de      	bne.n	801c2c6 <f_open+0x9a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801c308:	f8df 938c 	ldr.w	r9, [pc, #908]	; 801c698 <f_open+0x46c>
 801c30c:	f8d9 3000 	ldr.w	r3, [r9]
 801c310:	b11b      	cbz	r3, 801c31a <f_open+0xee>
 801c312:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c316:	2b00      	cmp	r3, #0
 801c318:	d1d4      	bne.n	801c2c4 <f_open+0x98>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801c31a:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801c31c:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801c320:	f7fe fdca 	bl	801aeb8 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801c324:	2800      	cmp	r0, #0
 801c326:	d1ce      	bne.n	801c2c6 <f_open+0x9a>
				dw = GET_FATTIME();
 801c328:	f7e7 fbe2 	bl	8003af0 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801c32c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 801c32e:	b2c5      	uxtb	r5, r0
	*ptr++ = (BYTE)val; val >>= 8;
 801c330:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801c334:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val;
 801c338:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 801c33a:	739d      	strb	r5, [r3, #14]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801c33c:	f04f 0c20 	mov.w	ip, #32
	*ptr++ = (BYTE)val; val >>= 8;
 801c340:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 801c342:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 801c344:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801c346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801c348:	f8dd a00c 	ldr.w	sl, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 801c34c:	759d      	strb	r5, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 801c34e:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 801c350:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 801c352:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801c354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c356:	f883 c00b 	strb.w	ip, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801c35a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 801c35c:	f89a 2000 	ldrb.w	r2, [sl]
	rv = rv << 8 | ptr[0];
 801c360:	7ed9      	ldrb	r1, [r3, #27]
 801c362:	7e9d      	ldrb	r5, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 801c364:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 801c366:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
	if (fs->fs_type == FS_FAT32) {
 801c36a:	f000 8153 	beq.w	801c614 <f_open+0x3e8>
	*ptr++ = (BYTE)val; val >>= 8;
 801c36e:	2200      	movs	r2, #0
 801c370:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 801c372:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 801c374:	f89a 1000 	ldrb.w	r1, [sl]
 801c378:	2903      	cmp	r1, #3
 801c37a:	f000 8148 	beq.w	801c60e <f_open+0x3e2>
					st_dword(dj.dir + DIR_FileSize, 0);
 801c37e:	990c      	ldr	r1, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 801c380:	2200      	movs	r2, #0
					fs->wflag = 1;
 801c382:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 801c384:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 801c386:	f88a 3003 	strb.w	r3, [sl, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 801c38a:	b18d      	cbz	r5, 801c3b0 <f_open+0x184>
						res = remove_chain(&dj.obj, cl, 0);
 801c38c:	a804      	add	r0, sp, #16
 801c38e:	4629      	mov	r1, r5
						dw = fs->winsect;
 801c390:	f8da b038 	ldr.w	fp, [sl, #56]	; 0x38
						res = remove_chain(&dj.obj, cl, 0);
 801c394:	f7fd f83e 	bl	8019414 <remove_chain>
						if (res == FR_OK) {
 801c398:	2800      	cmp	r0, #0
 801c39a:	d194      	bne.n	801c2c6 <f_open+0x9a>
							res = move_window(fs, dw);
 801c39c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801c3a0:	3d01      	subs	r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 801c3a2:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 801c3a6:	459b      	cmp	fp, r3
 801c3a8:	f040 8167 	bne.w	801c67a <f_open+0x44e>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801c3ac:	f8ca 5014 	str.w	r5, [sl, #20]
 801c3b0:	9a04      	ldr	r2, [sp, #16]
 801c3b2:	f8dd c018 	ldr.w	ip, [sp, #24]
 801c3b6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
				mode |= FA_MODIFIED;
 801c3ba:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 801c3be:	f027 0001 	bic.w	r0, r7, #1
		if (Files[i].fs == dp->obj.fs &&
 801c3c2:	f8d9 1000 	ldr.w	r1, [r9]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801c3c6:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
			fp->dir_ptr = dj.dir;
 801c3ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
		if (Files[i].fs == dp->obj.fs &&
 801c3cc:	428a      	cmp	r2, r1
			fp->dir_ptr = dj.dir;
 801c3ce:	e9c4 3509 	strd	r3, r5, [r4, #36]	; 0x24
		if (Files[i].fs == dp->obj.fs &&
 801c3d2:	f000 80b4 	beq.w	801c53e <f_open+0x312>
 801c3d6:	f8d9 e010 	ldr.w	lr, [r9, #16]
 801c3da:	4572      	cmp	r2, lr
 801c3dc:	d017      	beq.n	801c40e <f_open+0x1e2>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801c3de:	2900      	cmp	r1, #0
 801c3e0:	f000 80f3 	beq.w	801c5ca <f_open+0x39e>
 801c3e4:	f1be 0f00 	cmp.w	lr, #0
 801c3e8:	f000 8133 	beq.w	801c652 <f_open+0x426>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c3ec:	2300      	movs	r3, #0
		FREE_NAMBUF();
 801c3ee:	4640      	mov	r0, r8
 801c3f0:	2602      	movs	r6, #2
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c3f2:	6123      	str	r3, [r4, #16]
		FREE_NAMBUF();
 801c3f4:	f000 ff92 	bl	801d31c <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801c3f8:	2200      	movs	r2, #0
	LEAVE_FF(fs, res);
 801c3fa:	9b03      	ldr	r3, [sp, #12]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801c3fc:	6022      	str	r2, [r4, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	f43f af2a 	beq.w	801c258 <f_open+0x2c>
 801c404:	e770      	b.n	801c2e8 <f_open+0xbc>
		INIT_NAMBUF(fs);
 801c406:	2611      	movs	r6, #17
 801c408:	e726      	b.n	801c258 <f_open+0x2c>
				res = FR_INVALID_NAME;
 801c40a:	2006      	movs	r0, #6
 801c40c:	e75b      	b.n	801c2c6 <f_open+0x9a>
		if (Files[i].fs == dp->obj.fs &&
 801c40e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801c412:	4563      	cmp	r3, ip
 801c414:	d1e3      	bne.n	801c3de <f_open+0x1b2>
			Files[i].clu == dp->obj.sclust &&
 801c416:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801c41a:	455b      	cmp	r3, fp
 801c41c:	d1df      	bne.n	801c3de <f_open+0x1b2>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801c41e:	f04f 0e01 	mov.w	lr, #1
 801c422:	ea4f 130e 	mov.w	r3, lr, lsl #4
 801c426:	eb09 0203 	add.w	r2, r9, r3
 801c42a:	8992      	ldrh	r2, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801c42c:	2800      	cmp	r0, #0
 801c42e:	d17a      	bne.n	801c526 <f_open+0x2fa>
 801c430:	3201      	adds	r2, #1
 801c432:	f10e 0101 	add.w	r1, lr, #1
 801c436:	b292      	uxth	r2, r2
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c438:	6121      	str	r1, [r4, #16]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801c43a:	444b      	add	r3, r9
	if (fs->fs_type == FS_FAT32) {
 801c43c:	f89a 1000 	ldrb.w	r1, [sl]
	rv = rv << 8 | ptr[0];
 801c440:	7ee8      	ldrb	r0, [r5, #27]
 801c442:	f895 901a 	ldrb.w	r9, [r5, #26]
	if (fs->fs_type == FS_FAT32) {
 801c446:	2903      	cmp	r1, #3
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801c448:	819a      	strh	r2, [r3, #12]
	cl = ld_word(dir + DIR_FstClusLO);
 801c44a:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 801c44e:	d105      	bne.n	801c45c <f_open+0x230>
	rv = rv << 8 | ptr[0];
 801c450:	7d6a      	ldrb	r2, [r5, #21]
 801c452:	7d2b      	ldrb	r3, [r5, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801c454:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c458:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801c45c:	f8c4 9008 	str.w	r9, [r4, #8]
			fp->cltbl = 0;			/* Disable fast seek mode */
 801c460:	2300      	movs	r3, #0
	rv = rv << 8 | ptr[2];
 801c462:	8be8      	ldrh	r0, [r5, #30]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801c464:	f104 0b30 	add.w	fp, r4, #48	; 0x30
	rv = rv << 8 | ptr[1];
 801c468:	7f6a      	ldrb	r2, [r5, #29]
 801c46a:	4619      	mov	r1, r3
	rv = rv << 8 | ptr[0];
 801c46c:	7f2d      	ldrb	r5, [r5, #28]
	rv = rv << 8 | ptr[1];
 801c46e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
			fp->obj.id = fs->id;
 801c472:	f8ba c006 	ldrh.w	ip, [sl, #6]
 801c476:	4658      	mov	r0, fp
			fp->obj.fs = fs;	 	/* Validate the file object */
 801c478:	f8c4 a000 	str.w	sl, [r4]
	rv = rv << 8 | ptr[0];
 801c47c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
			fp->cltbl = 0;			/* Disable fast seek mode */
 801c480:	62e3      	str	r3, [r4, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 801c482:	7563      	strb	r3, [r4, #21]
 801c484:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801c488:	60e5      	str	r5, [r4, #12]
			fp->obj.id = fs->id;
 801c48a:	f8a4 c004 	strh.w	ip, [r4, #4]
			fp->sect = 0;			/* Invalidate current data sector */
 801c48e:	6223      	str	r3, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801c490:	61a3      	str	r3, [r4, #24]
			fp->flag = mode;		/* Set file access mode */
 801c492:	7527      	strb	r7, [r4, #20]
 801c494:	f003 f93e 	bl	801f714 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801c498:	06b8      	lsls	r0, r7, #26
 801c49a:	d51e      	bpl.n	801c4da <f_open+0x2ae>
 801c49c:	b1ed      	cbz	r5, 801c4da <f_open+0x2ae>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801c49e:	f8ba 700a 	ldrh.w	r7, [sl, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801c4a2:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801c4a4:	027f      	lsls	r7, r7, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801c4a6:	42af      	cmp	r7, r5
 801c4a8:	f080 80bb 	bcs.w	801c622 <f_open+0x3f6>
					clst = get_fat(&fp->obj, clst);
 801c4ac:	4649      	mov	r1, r9
 801c4ae:	6820      	ldr	r0, [r4, #0]
 801c4b0:	f7fd fc04 	bl	8019cbc <get_fat.isra.10>
					if (clst <= 1) res = FR_INT_ERR;
 801c4b4:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 801c4b6:	4681      	mov	r9, r0
 801c4b8:	eba5 0507 	sub.w	r5, r5, r7
					if (clst <= 1) res = FR_INT_ERR;
 801c4bc:	d915      	bls.n	801c4ea <f_open+0x2be>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801c4be:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801c4c2:	bf18      	it	ne
 801c4c4:	42af      	cmpne	r7, r5
 801c4c6:	d3f1      	bcc.n	801c4ac <f_open+0x280>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801c4c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
				fp->clust = clst;
 801c4cc:	61e0      	str	r0, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 801c4ce:	bf0c      	ite	eq
 801c4d0:	2001      	moveq	r0, #1
 801c4d2:	2000      	movne	r0, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801c4d4:	f040 80a7 	bne.w	801c626 <f_open+0x3fa>
 801c4d8:	e6f5      	b.n	801c2c6 <f_open+0x9a>
		FREE_NAMBUF();
 801c4da:	4640      	mov	r0, r8
 801c4dc:	f000 ff1e 	bl	801d31c <ff_memfree>
	LEAVE_FF(fs, res);
 801c4e0:	9b03      	ldr	r3, [sp, #12]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	f43f aeb8 	beq.w	801c258 <f_open+0x2c>
 801c4e8:	e6fe      	b.n	801c2e8 <f_open+0xbc>
				fp->clust = clst;
 801c4ea:	61e0      	str	r0, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 801c4ec:	2002      	movs	r0, #2
 801c4ee:	e6ea      	b.n	801c2c6 <f_open+0x9a>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801c4f0:	b133      	cbz	r3, 801c500 <f_open+0x2d4>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801c4f2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801c4f6:	f013 0f11 	tst.w	r3, #17
 801c4fa:	d01c      	beq.n	801c536 <f_open+0x30a>
					res = FR_DENIED;
 801c4fc:	2007      	movs	r0, #7
 801c4fe:	e6e2      	b.n	801c2c6 <f_open+0x9a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801c500:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801c504:	06d9      	lsls	r1, r3, #27
 801c506:	d445      	bmi.n	801c594 <f_open+0x368>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801c508:	07a9      	lsls	r1, r5, #30
 801c50a:	d506      	bpl.n	801c51a <f_open+0x2ee>
 801c50c:	07db      	lsls	r3, r3, #31
 801c50e:	d504      	bpl.n	801c51a <f_open+0x2ee>
		FREE_NAMBUF();
 801c510:	4640      	mov	r0, r8
						res = FR_DENIED;
 801c512:	2607      	movs	r6, #7
		FREE_NAMBUF();
 801c514:	f000 ff02 	bl	801d31c <ff_memfree>
 801c518:	e76e      	b.n	801c3f8 <f_open+0x1cc>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801c51a:	072d      	lsls	r5, r5, #28
 801c51c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801c520:	f57f af4f 	bpl.w	801c3c2 <f_open+0x196>
 801c524:	e749      	b.n	801c3ba <f_open+0x18e>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801c526:	2a00      	cmp	r2, #0
 801c528:	f47f af60 	bne.w	801c3ec <f_open+0x1c0>
 801c52c:	f10e 0101 	add.w	r1, lr, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801c530:	f44f 7280 	mov.w	r2, #256	; 0x100
 801c534:	e780      	b.n	801c438 <f_open+0x20c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801c536:	076b      	lsls	r3, r5, #29
 801c538:	d50e      	bpl.n	801c558 <f_open+0x32c>
 801c53a:	2008      	movs	r0, #8
 801c53c:	e6c3      	b.n	801c2c6 <f_open+0x9a>
		if (Files[i].fs == dp->obj.fs &&
 801c53e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c542:	459c      	cmp	ip, r3
 801c544:	f47f af47 	bne.w	801c3d6 <f_open+0x1aa>
			Files[i].clu == dp->obj.sclust &&
 801c548:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801c54c:	459b      	cmp	fp, r3
 801c54e:	f47f af42 	bne.w	801c3d6 <f_open+0x1aa>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801c552:	f04f 0e00 	mov.w	lr, #0
 801c556:	e764      	b.n	801c422 <f_open+0x1f6>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801c558:	072d      	lsls	r5, r5, #28
 801c55a:	f53f aee5 	bmi.w	801c328 <f_open+0xfc>
 801c55e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801c562:	e72e      	b.n	801c3c2 <f_open+0x196>
		if (Files[i].fs) {	/* Existing entry */
 801c564:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801c568:	2900      	cmp	r1, #0
 801c56a:	d0c1      	beq.n	801c4f0 <f_open+0x2c4>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801c56c:	4291      	cmp	r1, r2
 801c56e:	d1bf      	bne.n	801c4f0 <f_open+0x2c4>
 801c570:	f8d9 1014 	ldr.w	r1, [r9, #20]
 801c574:	4561      	cmp	r1, ip
 801c576:	d1bb      	bne.n	801c4f0 <f_open+0x2c4>
				Files[i].clu == dp->obj.sclust &&
 801c578:	f8d9 1018 	ldr.w	r1, [r9, #24]
 801c57c:	458b      	cmp	fp, r1
 801c57e:	d1b7      	bne.n	801c4f0 <f_open+0x2c4>
 801c580:	2101      	movs	r1, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801c582:	b928      	cbnz	r0, 801c590 <f_open+0x364>
 801c584:	eb09 1101 	add.w	r1, r9, r1, lsl #4
 801c588:	8989      	ldrh	r1, [r1, #12]
 801c58a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 801c58e:	d1af      	bne.n	801c4f0 <f_open+0x2c4>
 801c590:	2010      	movs	r0, #16
 801c592:	e698      	b.n	801c2c6 <f_open+0x9a>
		FREE_NAMBUF();
 801c594:	4640      	mov	r0, r8
					res = FR_NO_FILE;
 801c596:	2604      	movs	r6, #4
		FREE_NAMBUF();
 801c598:	f000 fec0 	bl	801d31c <ff_memfree>
 801c59c:	e72c      	b.n	801c3f8 <f_open+0x1cc>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801c59e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c5a2:	458c      	cmp	ip, r1
 801c5a4:	d025      	beq.n	801c5f2 <f_open+0x3c6>
		if (Files[i].fs) {	/* Existing entry */
 801c5a6:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801c5aa:	2900      	cmp	r1, #0
 801c5ac:	d0a0      	beq.n	801c4f0 <f_open+0x2c4>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801c5ae:	4291      	cmp	r1, r2
 801c5b0:	f47f ae88 	bne.w	801c2c4 <f_open+0x98>
 801c5b4:	f8d9 1014 	ldr.w	r1, [r9, #20]
 801c5b8:	458c      	cmp	ip, r1
 801c5ba:	f47f ae83 	bne.w	801c2c4 <f_open+0x98>
				Files[i].clu == dp->obj.sclust &&
 801c5be:	f8d9 1018 	ldr.w	r1, [r9, #24]
 801c5c2:	4559      	cmp	r1, fp
 801c5c4:	f47f ae7e 	bne.w	801c2c4 <f_open+0x98>
 801c5c8:	e7da      	b.n	801c580 <f_open+0x354>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801c5ca:	468e      	mov	lr, r1
 801c5cc:	2101      	movs	r1, #1
		Files[i].fs = dp->obj.fs;
 801c5ce:	ea4f 130e 	mov.w	r3, lr, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801c5d2:	2800      	cmp	r0, #0
		Files[i].ctr = 0;
 801c5d4:	f04f 0e00 	mov.w	lr, #0
		Files[i].fs = dp->obj.fs;
 801c5d8:	eb09 0003 	add.w	r0, r9, r3
 801c5dc:	f849 2003 	str.w	r2, [r9, r3]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801c5e0:	bf14      	ite	ne
 801c5e2:	f44f 7280 	movne.w	r2, #256	; 0x100
 801c5e6:	2201      	moveq	r2, #1
		Files[i].ctr = 0;
 801c5e8:	f8a0 e00c 	strh.w	lr, [r0, #12]
		Files[i].ofs = dp->dptr;
 801c5ec:	e9c0 cb01 	strd	ip, fp, [r0, #4]
 801c5f0:	e722      	b.n	801c438 <f_open+0x20c>
				Files[i].clu == dp->obj.sclust &&
 801c5f2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801c5f6:	458b      	cmp	fp, r1
 801c5f8:	d04b      	beq.n	801c692 <f_open+0x466>
		if (Files[i].fs) {	/* Existing entry */
 801c5fa:	f8d9 e010 	ldr.w	lr, [r9, #16]
 801c5fe:	f1be 0f00 	cmp.w	lr, #0
 801c602:	f43f af75 	beq.w	801c4f0 <f_open+0x2c4>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801c606:	45d6      	cmp	lr, sl
 801c608:	f47f ae5c 	bne.w	801c2c4 <f_open+0x98>
 801c60c:	e7d2      	b.n	801c5b4 <f_open+0x388>
	*ptr++ = (BYTE)val; val >>= 8;
 801c60e:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 801c610:	755a      	strb	r2, [r3, #21]
 801c612:	e6b4      	b.n	801c37e <f_open+0x152>
	rv = rv << 8 | ptr[0];
 801c614:	7d59      	ldrb	r1, [r3, #21]
 801c616:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801c618:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801c61c:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 801c620:	e6a5      	b.n	801c36e <f_open+0x142>
				fp->clust = clst;
 801c622:	f8c4 901c 	str.w	r9, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801c626:	f3c5 0308 	ubfx	r3, r5, #0, #9
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	f43f af55 	beq.w	801c4da <f_open+0x2ae>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801c630:	9803      	ldr	r0, [sp, #12]
	clst -= 2;
 801c632:	f1a9 0902 	sub.w	r9, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801c636:	6a03      	ldr	r3, [r0, #32]
 801c638:	3b02      	subs	r3, #2
 801c63a:	4599      	cmp	r9, r3
 801c63c:	d204      	bcs.n	801c648 <f_open+0x41c>
	return clst * fs->csize + fs->database;
 801c63e:	8942      	ldrh	r2, [r0, #10]
 801c640:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801c642:	fb09 3202 	mla	r2, r9, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 801c646:	b942      	cbnz	r2, 801c65a <f_open+0x42e>
		FREE_NAMBUF();
 801c648:	4640      	mov	r0, r8
						res = FR_INT_ERR;
 801c64a:	2602      	movs	r6, #2
		FREE_NAMBUF();
 801c64c:	f000 fe66 	bl	801d31c <ff_memfree>
 801c650:	e6d2      	b.n	801c3f8 <f_open+0x1cc>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801c652:	2102      	movs	r1, #2
 801c654:	f04f 0e01 	mov.w	lr, #1
 801c658:	e7b9      	b.n	801c5ce <f_open+0x3a2>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801c65a:	eb02 2255 	add.w	r2, r2, r5, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801c65e:	4659      	mov	r1, fp
 801c660:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801c662:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801c664:	7840      	ldrb	r0, [r0, #1]
 801c666:	f7fc fba9 	bl	8018dbc <disk_read>
 801c66a:	2800      	cmp	r0, #0
 801c66c:	f43f af35 	beq.w	801c4da <f_open+0x2ae>
		FREE_NAMBUF();
 801c670:	4640      	mov	r0, r8
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801c672:	2601      	movs	r6, #1
		FREE_NAMBUF();
 801c674:	f000 fe52 	bl	801d31c <ff_memfree>
 801c678:	e6be      	b.n	801c3f8 <f_open+0x1cc>
 801c67a:	4650      	mov	r0, sl
 801c67c:	4659      	mov	r1, fp
 801c67e:	f7fc fcb9 	bl	8018ff4 <move_window.part.7>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801c682:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801c686:	f8ca 5014 	str.w	r5, [sl, #20]
		if (res == FR_OK) {
 801c68a:	2800      	cmp	r0, #0
 801c68c:	f43f ae90 	beq.w	801c3b0 <f_open+0x184>
 801c690:	e619      	b.n	801c2c6 <f_open+0x9a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801c692:	4631      	mov	r1, r6
 801c694:	e775      	b.n	801c582 <f_open+0x356>
 801c696:	bf00      	nop
 801c698:	20006230 	.word	0x20006230

0801c69c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801c69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6a0:	469b      	mov	fp, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 801c6a2:	2300      	movs	r3, #0
{
 801c6a4:	b08b      	sub	sp, #44	; 0x2c
	*br = 0;	/* Clear read byte counter */
 801c6a6:	f8cb 3000 	str.w	r3, [fp]
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 801c6aa:	b150      	cbz	r0, 801c6c2 <f_read+0x26>
 801c6ac:	6803      	ldr	r3, [r0, #0]
 801c6ae:	4607      	mov	r7, r0
 801c6b0:	b13b      	cbz	r3, 801c6c2 <f_read+0x26>
 801c6b2:	4689      	mov	r9, r1
 801c6b4:	7819      	ldrb	r1, [r3, #0]
 801c6b6:	b121      	cbz	r1, 801c6c2 <f_read+0x26>
 801c6b8:	4614      	mov	r4, r2
 801c6ba:	88d9      	ldrh	r1, [r3, #6]
 801c6bc:	8882      	ldrh	r2, [r0, #4]
 801c6be:	4291      	cmp	r1, r2
 801c6c0:	d005      	beq.n	801c6ce <f_read+0x32>
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 801c6c2:	f04f 0a09 	mov.w	sl, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 801c6c6:	4650      	mov	r0, sl
 801c6c8:	b00b      	add	sp, #44	; 0x2c
 801c6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 801c6ce:	7858      	ldrb	r0, [r3, #1]
 801c6d0:	f7fc fb56 	bl	8018d80 <disk_status>
 801c6d4:	07c1      	lsls	r1, r0, #31
 801c6d6:	d4f4      	bmi.n	801c6c2 <f_read+0x26>
		*fs = obj->fs;			/* Owner file sytem object */
 801c6d8:	683b      	ldr	r3, [r7, #0]
 801c6da:	9300      	str	r3, [sp, #0]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801c6dc:	b123      	cbz	r3, 801c6e8 <f_read+0x4c>
 801c6de:	6918      	ldr	r0, [r3, #16]
 801c6e0:	461d      	mov	r5, r3
 801c6e2:	f000 fe0d 	bl	801d300 <ff_req_grant>
 801c6e6:	b910      	cbnz	r0, 801c6ee <f_read+0x52>
		ENTER_FF(obj->fs);		/* Lock file system */
 801c6e8:	f04f 0a0f 	mov.w	sl, #15
 801c6ec:	e7eb      	b.n	801c6c6 <f_read+0x2a>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801c6ee:	f897 a015 	ldrb.w	sl, [r7, #21]
 801c6f2:	f1ba 0f00 	cmp.w	sl, #0
 801c6f6:	d00a      	beq.n	801c70e <f_read+0x72>
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801c6f8:	f1aa 030b 	sub.w	r3, sl, #11
 801c6fc:	2b01      	cmp	r3, #1
 801c6fe:	d9e2      	bls.n	801c6c6 <f_read+0x2a>
 801c700:	f1ba 0f0f 	cmp.w	sl, #15
 801c704:	d0df      	beq.n	801c6c6 <f_read+0x2a>
		ff_rel_grant(fs->sobj);
 801c706:	6928      	ldr	r0, [r5, #16]
 801c708:	f000 fe04 	bl	801d314 <ff_rel_grant>
 801c70c:	e7db      	b.n	801c6c6 <f_read+0x2a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801c70e:	7d3b      	ldrb	r3, [r7, #20]
 801c710:	07da      	lsls	r2, r3, #31
 801c712:	d406      	bmi.n	801c722 <f_read+0x86>
		ff_rel_grant(fs->sobj);
 801c714:	9b00      	ldr	r3, [sp, #0]
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801c716:	f04f 0a07 	mov.w	sl, #7
		ff_rel_grant(fs->sobj);
 801c71a:	6918      	ldr	r0, [r3, #16]
 801c71c:	f000 fdfa 	bl	801d314 <ff_rel_grant>
 801c720:	e7d1      	b.n	801c6c6 <f_read+0x2a>
	remain = fp->obj.objsize - fp->fptr;
 801c722:	69b9      	ldr	r1, [r7, #24]
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	1a5a      	subs	r2, r3, r1
 801c728:	42a2      	cmp	r2, r4
 801c72a:	4610      	mov	r0, r2
 801c72c:	bf28      	it	cs
 801c72e:	4620      	movcs	r0, r4
	for ( ;  btr;								/* Repeat until all data read */
 801c730:	2800      	cmp	r0, #0
 801c732:	f000 80d7 	beq.w	801c8e4 <f_read+0x248>
 801c736:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c73a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801c73e:	f8cd a00c 	str.w	sl, [sp, #12]
 801c742:	4682      	mov	sl, r0
 801c744:	9301      	str	r3, [sp, #4]
 801c746:	425b      	negs	r3, r3
 801c748:	9208      	str	r2, [sp, #32]
 801c74a:	f003 0303 	and.w	r3, r3, #3
 801c74e:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 801c752:	9304      	str	r3, [sp, #16]
 801c754:	3330      	adds	r3, #48	; 0x30
 801c756:	9207      	str	r2, [sp, #28]
 801c758:	9309      	str	r3, [sp, #36]	; 0x24
 801c75a:	0893      	lsrs	r3, r2, #2
 801c75c:	9306      	str	r3, [sp, #24]
 801c75e:	f022 0303 	bic.w	r3, r2, #3
 801c762:	9305      	str	r3, [sp, #20]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801c764:	f3c1 0308 	ubfx	r3, r1, #0, #9
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d149      	bne.n	801c800 <f_read+0x164>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801c76c:	9b00      	ldr	r3, [sp, #0]
 801c76e:	895e      	ldrh	r6, [r3, #10]
 801c770:	0a4b      	lsrs	r3, r1, #9
 801c772:	3e01      	subs	r6, #1
			if (csect == 0) {					/* On the cluster boundary? */
 801c774:	401e      	ands	r6, r3
 801c776:	f000 80ba 	beq.w	801c8ee <f_read+0x252>
 801c77a:	69f8      	ldr	r0, [r7, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801c77c:	9a00      	ldr	r2, [sp, #0]
	clst -= 2;
 801c77e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801c780:	6a13      	ldr	r3, [r2, #32]
 801c782:	3b02      	subs	r3, #2
 801c784:	4298      	cmp	r0, r3
 801c786:	f080 80de 	bcs.w	801c946 <f_read+0x2aa>
	return clst * fs->csize + fs->database;
 801c78a:	8953      	ldrh	r3, [r2, #10]
 801c78c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801c78e:	fb03 f500 	mul.w	r5, r3, r0
 801c792:	9202      	str	r2, [sp, #8]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801c794:	eb15 0802 	adds.w	r8, r5, r2
 801c798:	f000 80d5 	beq.w	801c946 <f_read+0x2aa>
			if (cc) {							/* Read maximum contiguous sectors directly */
 801c79c:	ea5f 245a 	movs.w	r4, sl, lsr #9
			sect += csect;
 801c7a0:	44b0      	add	r8, r6
			if (cc) {							/* Read maximum contiguous sectors directly */
 801c7a2:	d016      	beq.n	801c7d2 <f_read+0x136>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801c7a4:	1932      	adds	r2, r6, r4
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c7a6:	9800      	ldr	r0, [sp, #0]
 801c7a8:	4649      	mov	r1, r9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801c7aa:	429a      	cmp	r2, r3
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c7ac:	7840      	ldrb	r0, [r0, #1]
 801c7ae:	4642      	mov	r2, r8
					cc = fs->csize - csect;
 801c7b0:	bf88      	it	hi
 801c7b2:	1b9c      	subhi	r4, r3, r6
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c7b4:	4623      	mov	r3, r4
 801c7b6:	f7fc fb01 	bl	8018dbc <disk_read>
 801c7ba:	2800      	cmp	r0, #0
 801c7bc:	f000 80cc 	beq.w	801c958 <f_read+0x2bc>
 801c7c0:	f04f 0a01 	mov.w	sl, #1
		ff_rel_grant(fs->sobj);
 801c7c4:	9800      	ldr	r0, [sp, #0]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c7c6:	f887 a015 	strb.w	sl, [r7, #21]
		ff_rel_grant(fs->sobj);
 801c7ca:	6900      	ldr	r0, [r0, #16]
 801c7cc:	f000 fda2 	bl	801d314 <ff_rel_grant>
 801c7d0:	e779      	b.n	801c6c6 <f_read+0x2a>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801c7d2:	6a3a      	ldr	r2, [r7, #32]
 801c7d4:	4542      	cmp	r2, r8
 801c7d6:	d00e      	beq.n	801c7f6 <f_read+0x15a>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801c7d8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801c7dc:	9900      	ldr	r1, [sp, #0]
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	7848      	ldrb	r0, [r1, #1]
 801c7e2:	f2c0 80bf 	blt.w	801c964 <f_read+0x2c8>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801c7e6:	2301      	movs	r3, #1
 801c7e8:	4642      	mov	r2, r8
 801c7ea:	9901      	ldr	r1, [sp, #4]
 801c7ec:	f7fc fae6 	bl	8018dbc <disk_read>
 801c7f0:	2800      	cmp	r0, #0
 801c7f2:	f040 8124 	bne.w	801ca3e <f_read+0x3a2>
 801c7f6:	69bb      	ldr	r3, [r7, #24]
			fp->sect = sect;
 801c7f8:	f8c7 8020 	str.w	r8, [r7, #32]
 801c7fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801c800:	f5c3 7400 	rsb	r4, r3, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801c804:	9d01      	ldr	r5, [sp, #4]
 801c806:	1d1a      	adds	r2, r3, #4
 801c808:	f109 0104 	add.w	r1, r9, #4
 801c80c:	4554      	cmp	r4, sl
 801c80e:	eb05 0003 	add.w	r0, r5, r3
 801c812:	442a      	add	r2, r5
 801c814:	bf28      	it	cs
 801c816:	4654      	movcs	r4, sl
 801c818:	4288      	cmp	r0, r1
 801c81a:	bf38      	it	cc
 801c81c:	4591      	cmpcc	r9, r2
 801c81e:	d375      	bcc.n	801c90c <f_read+0x270>
 801c820:	2c0b      	cmp	r4, #11
 801c822:	d973      	bls.n	801c90c <f_read+0x270>
 801c824:	4242      	negs	r2, r0
 801c826:	1e66      	subs	r6, r4, #1
 801c828:	f012 0203 	ands.w	r2, r2, #3
 801c82c:	d06b      	beq.n	801c906 <f_read+0x26a>
			*d++ = *s++;
 801c82e:	7801      	ldrb	r1, [r0, #0]
 801c830:	2a01      	cmp	r2, #1
 801c832:	f100 0501 	add.w	r5, r0, #1
 801c836:	f109 0801 	add.w	r8, r9, #1
 801c83a:	f889 1000 	strb.w	r1, [r9]
 801c83e:	d05f      	beq.n	801c900 <f_read+0x264>
 801c840:	7841      	ldrb	r1, [r0, #1]
 801c842:	2a03      	cmp	r2, #3
 801c844:	f100 0502 	add.w	r5, r0, #2
 801c848:	f109 0802 	add.w	r8, r9, #2
		} while (--cnt);
 801c84c:	f1a4 0602 	sub.w	r6, r4, #2
			*d++ = *s++;
 801c850:	f889 1001 	strb.w	r1, [r9, #1]
 801c854:	d154      	bne.n	801c900 <f_read+0x264>
 801c856:	7881      	ldrb	r1, [r0, #2]
 801c858:	f109 0803 	add.w	r8, r9, #3
 801c85c:	3003      	adds	r0, #3
		} while (--cnt);
 801c85e:	1ee6      	subs	r6, r4, #3
 801c860:	9d01      	ldr	r5, [sp, #4]
			*d++ = *s++;
 801c862:	f889 1002 	strb.w	r1, [r9, #2]
 801c866:	4413      	add	r3, r2
 801c868:	eba4 0e02 	sub.w	lr, r4, r2
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801c86c:	2100      	movs	r1, #0
 801c86e:	444a      	add	r2, r9
 801c870:	442b      	add	r3, r5
 801c872:	ea4f 0c9e 	mov.w	ip, lr, lsr #2
 801c876:	3101      	adds	r1, #1
			*d++ = *s++;
 801c878:	f853 5b04 	ldr.w	r5, [r3], #4
 801c87c:	458c      	cmp	ip, r1
 801c87e:	f842 5b04 	str.w	r5, [r2], #4
 801c882:	d8f8      	bhi.n	801c876 <f_read+0x1da>
 801c884:	f02e 0303 	bic.w	r3, lr, #3
 801c888:	459e      	cmp	lr, r3
 801c88a:	eba6 0603 	sub.w	r6, r6, r3
 801c88e:	eb08 0203 	add.w	r2, r8, r3
 801c892:	eb00 0103 	add.w	r1, r0, r3
 801c896:	d016      	beq.n	801c8c6 <f_read+0x22a>
 801c898:	5cc0      	ldrb	r0, [r0, r3]
		} while (--cnt);
 801c89a:	2e01      	cmp	r6, #1
			*d++ = *s++;
 801c89c:	f808 0003 	strb.w	r0, [r8, r3]
		} while (--cnt);
 801c8a0:	d011      	beq.n	801c8c6 <f_read+0x22a>
			*d++ = *s++;
 801c8a2:	784b      	ldrb	r3, [r1, #1]
		} while (--cnt);
 801c8a4:	2e02      	cmp	r6, #2
			*d++ = *s++;
 801c8a6:	7053      	strb	r3, [r2, #1]
		} while (--cnt);
 801c8a8:	d00d      	beq.n	801c8c6 <f_read+0x22a>
			*d++ = *s++;
 801c8aa:	788b      	ldrb	r3, [r1, #2]
		} while (--cnt);
 801c8ac:	2e03      	cmp	r6, #3
			*d++ = *s++;
 801c8ae:	7093      	strb	r3, [r2, #2]
		} while (--cnt);
 801c8b0:	d009      	beq.n	801c8c6 <f_read+0x22a>
			*d++ = *s++;
 801c8b2:	78cb      	ldrb	r3, [r1, #3]
		} while (--cnt);
 801c8b4:	2e04      	cmp	r6, #4
			*d++ = *s++;
 801c8b6:	70d3      	strb	r3, [r2, #3]
		} while (--cnt);
 801c8b8:	d005      	beq.n	801c8c6 <f_read+0x22a>
			*d++ = *s++;
 801c8ba:	790b      	ldrb	r3, [r1, #4]
		} while (--cnt);
 801c8bc:	2e05      	cmp	r6, #5
			*d++ = *s++;
 801c8be:	7113      	strb	r3, [r2, #4]
		} while (--cnt);
 801c8c0:	d001      	beq.n	801c8c6 <f_read+0x22a>
			*d++ = *s++;
 801c8c2:	794b      	ldrb	r3, [r1, #5]
 801c8c4:	7153      	strb	r3, [r2, #5]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801c8c6:	69b9      	ldr	r1, [r7, #24]
	for ( ;  btr;								/* Repeat until all data read */
 801c8c8:	ebba 0a04 	subs.w	sl, sl, r4
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801c8cc:	f8db 3000 	ldr.w	r3, [fp]
 801c8d0:	44a1      	add	r9, r4
 801c8d2:	4421      	add	r1, r4
 801c8d4:	4423      	add	r3, r4
 801c8d6:	61b9      	str	r1, [r7, #24]
 801c8d8:	f8cb 3000 	str.w	r3, [fp]
	for ( ;  btr;								/* Repeat until all data read */
 801c8dc:	f47f af42 	bne.w	801c764 <f_read+0xc8>
 801c8e0:	f8dd a00c 	ldr.w	sl, [sp, #12]
		ff_rel_grant(fs->sobj);
 801c8e4:	9b00      	ldr	r3, [sp, #0]
 801c8e6:	6918      	ldr	r0, [r3, #16]
 801c8e8:	f000 fd14 	bl	801d314 <ff_rel_grant>
 801c8ec:	e6eb      	b.n	801c6c6 <f_read+0x2a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801c8ee:	b9b9      	cbnz	r1, 801c920 <f_read+0x284>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801c8f0:	68b8      	ldr	r0, [r7, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801c8f2:	2801      	cmp	r0, #1
 801c8f4:	d927      	bls.n	801c946 <f_read+0x2aa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c8f6:	1c43      	adds	r3, r0, #1
 801c8f8:	f000 80a1 	beq.w	801ca3e <f_read+0x3a2>
				fp->clust = clst;				/* Update current cluster */
 801c8fc:	61f8      	str	r0, [r7, #28]
 801c8fe:	e73d      	b.n	801c77c <f_read+0xe0>
			*d++ = *s++;
 801c900:	4628      	mov	r0, r5
 801c902:	9d01      	ldr	r5, [sp, #4]
 801c904:	e7af      	b.n	801c866 <f_read+0x1ca>
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801c906:	46c8      	mov	r8, r9
 801c908:	4626      	mov	r6, r4
 801c90a:	e7ac      	b.n	801c866 <f_read+0x1ca>
 801c90c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 801c910:	1901      	adds	r1, r0, r4
			*d++ = *s++;
 801c912:	f810 2b01 	ldrb.w	r2, [r0], #1
		} while (--cnt);
 801c916:	4288      	cmp	r0, r1
			*d++ = *s++;
 801c918:	f803 2f01 	strb.w	r2, [r3, #1]!
		} while (--cnt);
 801c91c:	d1f9      	bne.n	801c912 <f_read+0x276>
 801c91e:	e7d2      	b.n	801c8c6 <f_read+0x22a>
					if (fp->cltbl) {
 801c920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c922:	6838      	ldr	r0, [r7, #0]
 801c924:	b372      	cbz	r2, 801c984 <f_read+0x2e8>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801c926:	8940      	ldrh	r0, [r0, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801c928:	1d11      	adds	r1, r2, #4
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801c92a:	6852      	ldr	r2, [r2, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801c92c:	fbb3 f3f0 	udiv	r3, r3, r0
		if (ncl == 0) return 0;	/* End of table? (error) */
 801c930:	b14a      	cbz	r2, 801c946 <f_read+0x2aa>
		if (cl < ncl) break;	/* In this fragment? */
 801c932:	4293      	cmp	r3, r2
 801c934:	d202      	bcs.n	801c93c <f_read+0x2a0>
 801c936:	e022      	b.n	801c97e <f_read+0x2e2>
 801c938:	429a      	cmp	r2, r3
 801c93a:	d820      	bhi.n	801c97e <f_read+0x2e2>
		cl -= ncl; tbl++;		/* Next fragment */
 801c93c:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801c93e:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 801c942:	2a00      	cmp	r2, #0
 801c944:	d1f8      	bne.n	801c938 <f_read+0x29c>
			if (!sect) ABORT(fs, FR_INT_ERR);
 801c946:	f04f 0a02 	mov.w	sl, #2
		ff_rel_grant(fs->sobj);
 801c94a:	9b00      	ldr	r3, [sp, #0]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801c94c:	f887 a015 	strb.w	sl, [r7, #21]
		ff_rel_grant(fs->sobj);
 801c950:	6918      	ldr	r0, [r3, #16]
 801c952:	f000 fcdf 	bl	801d314 <ff_rel_grant>
 801c956:	e6b6      	b.n	801c6c6 <f_read+0x2a>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801c958:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	db15      	blt.n	801c98c <f_read+0x2f0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801c960:	0264      	lsls	r4, r4, #9
				continue;
 801c962:	e7b0      	b.n	801c8c6 <f_read+0x22a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c964:	2301      	movs	r3, #1
 801c966:	9901      	ldr	r1, [sp, #4]
 801c968:	f7fc fa36 	bl	8018dd8 <disk_write>
 801c96c:	2800      	cmp	r0, #0
 801c96e:	d166      	bne.n	801ca3e <f_read+0x3a2>
					fp->flag &= (BYTE)~FA_DIRTY;
 801c970:	7d3b      	ldrb	r3, [r7, #20]
 801c972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c976:	753b      	strb	r3, [r7, #20]
 801c978:	9b00      	ldr	r3, [sp, #0]
 801c97a:	7858      	ldrb	r0, [r3, #1]
 801c97c:	e733      	b.n	801c7e6 <f_read+0x14a>
	return cl + *tbl;	/* Return the cluster number */
 801c97e:	6848      	ldr	r0, [r1, #4]
 801c980:	4418      	add	r0, r3
 801c982:	e7b6      	b.n	801c8f2 <f_read+0x256>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801c984:	69f9      	ldr	r1, [r7, #28]
 801c986:	f7fd f999 	bl	8019cbc <get_fat.isra.10>
 801c98a:	e7b2      	b.n	801c8f2 <f_read+0x256>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801c98c:	6a3a      	ldr	r2, [r7, #32]
 801c98e:	eba2 0308 	sub.w	r3, r2, r8
 801c992:	42a3      	cmp	r3, r4
 801c994:	d2e4      	bcs.n	801c960 <f_read+0x2c4>
 801c996:	9902      	ldr	r1, [sp, #8]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801c998:	eb09 2343 	add.w	r3, r9, r3, lsl #9
 801c99c:	9808      	ldr	r0, [sp, #32]
 801c99e:	1a52      	subs	r2, r2, r1
 801c9a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 801c9a4:	1b92      	subs	r2, r2, r6
 801c9a6:	46f4      	mov	ip, lr
 801c9a8:	1b52      	subs	r2, r2, r5
 801c9aa:	0252      	lsls	r2, r2, #9
 801c9ac:	eb09 0102 	add.w	r1, r9, r2
 801c9b0:	4288      	cmp	r0, r1
 801c9b2:	d903      	bls.n	801c9bc <f_read+0x320>
 801c9b4:	1d11      	adds	r1, r2, #4
 801c9b6:	4449      	add	r1, r9
 801c9b8:	458e      	cmp	lr, r1
 801c9ba:	d349      	bcc.n	801ca50 <f_read+0x3b4>
 801c9bc:	9804      	ldr	r0, [sp, #16]
 801c9be:	2800      	cmp	r0, #0
 801c9c0:	d054      	beq.n	801ca6c <f_read+0x3d0>
			*d++ = *s++;
 801c9c2:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 801c9c6:	2801      	cmp	r0, #1
 801c9c8:	f107 0c31 	add.w	ip, r7, #49	; 0x31
 801c9cc:	f103 0601 	add.w	r6, r3, #1
 801c9d0:	7019      	strb	r1, [r3, #0]
 801c9d2:	d047      	beq.n	801ca64 <f_read+0x3c8>
 801c9d4:	f897 1031 	ldrb.w	r1, [r7, #49]	; 0x31
 801c9d8:	2803      	cmp	r0, #3
 801c9da:	f107 0c32 	add.w	ip, r7, #50	; 0x32
 801c9de:	f103 0602 	add.w	r6, r3, #2
 801c9e2:	7059      	strb	r1, [r3, #1]
 801c9e4:	d147      	bne.n	801ca76 <f_read+0x3da>
 801c9e6:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 801c9ea:	1cde      	adds	r6, r3, #3
 801c9ec:	f107 0c33 	add.w	ip, r7, #51	; 0x33
 801c9f0:	f240 15fd 	movw	r5, #509	; 0x1fd
 801c9f4:	7099      	strb	r1, [r3, #2]
 801c9f6:	4603      	mov	r3, r0
 801c9f8:	4413      	add	r3, r2
 801c9fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c9fc:	f8dd e018 	ldr.w	lr, [sp, #24]
 801ca00:	18b9      	adds	r1, r7, r2
 801ca02:	444b      	add	r3, r9
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801ca04:	2200      	movs	r2, #0
 801ca06:	3201      	adds	r2, #1
			*d++ = *s++;
 801ca08:	f851 0b04 	ldr.w	r0, [r1], #4
 801ca0c:	4596      	cmp	lr, r2
 801ca0e:	f843 0b04 	str.w	r0, [r3], #4
 801ca12:	d8f8      	bhi.n	801ca06 <f_read+0x36a>
 801ca14:	9905      	ldr	r1, [sp, #20]
 801ca16:	9807      	ldr	r0, [sp, #28]
 801ca18:	1a6d      	subs	r5, r5, r1
 801ca1a:	1873      	adds	r3, r6, r1
 801ca1c:	4281      	cmp	r1, r0
 801ca1e:	eb0c 0201 	add.w	r2, ip, r1
 801ca22:	d09d      	beq.n	801c960 <f_read+0x2c4>
 801ca24:	4608      	mov	r0, r1
		} while (--cnt);
 801ca26:	2d01      	cmp	r5, #1
			*d++ = *s++;
 801ca28:	f81c 1001 	ldrb.w	r1, [ip, r1]
 801ca2c:	5431      	strb	r1, [r6, r0]
		} while (--cnt);
 801ca2e:	d097      	beq.n	801c960 <f_read+0x2c4>
			*d++ = *s++;
 801ca30:	7851      	ldrb	r1, [r2, #1]
		} while (--cnt);
 801ca32:	2d02      	cmp	r5, #2
			*d++ = *s++;
 801ca34:	7059      	strb	r1, [r3, #1]
		} while (--cnt);
 801ca36:	d093      	beq.n	801c960 <f_read+0x2c4>
			*d++ = *s++;
 801ca38:	7892      	ldrb	r2, [r2, #2]
 801ca3a:	709a      	strb	r2, [r3, #2]
 801ca3c:	e790      	b.n	801c960 <f_read+0x2c4>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801ca3e:	f04f 0a01 	mov.w	sl, #1
		ff_rel_grant(fs->sobj);
 801ca42:	9b00      	ldr	r3, [sp, #0]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801ca44:	f887 a015 	strb.w	sl, [r7, #21]
		ff_rel_grant(fs->sobj);
 801ca48:	6918      	ldr	r0, [r3, #16]
 801ca4a:	f000 fc63 	bl	801d314 <ff_rel_grant>
 801ca4e:	e63a      	b.n	801c6c6 <f_read+0x2a>
 801ca50:	3b01      	subs	r3, #1
 801ca52:	f507 710c 	add.w	r1, r7, #560	; 0x230
			*d++ = *s++;
 801ca56:	f81c 2b01 	ldrb.w	r2, [ip], #1
		} while (--cnt);
 801ca5a:	4561      	cmp	r1, ip
			*d++ = *s++;
 801ca5c:	f803 2f01 	strb.w	r2, [r3, #1]!
		} while (--cnt);
 801ca60:	d1f9      	bne.n	801ca56 <f_read+0x3ba>
 801ca62:	e77d      	b.n	801c960 <f_read+0x2c4>
			*d++ = *s++;
 801ca64:	f240 15ff 	movw	r5, #511	; 0x1ff
 801ca68:	4603      	mov	r3, r0
 801ca6a:	e7c5      	b.n	801c9f8 <f_read+0x35c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801ca6c:	461e      	mov	r6, r3
 801ca6e:	f44f 7500 	mov.w	r5, #512	; 0x200
 801ca72:	4603      	mov	r3, r0
 801ca74:	e7c0      	b.n	801c9f8 <f_read+0x35c>
			*d++ = *s++;
 801ca76:	f44f 75ff 	mov.w	r5, #510	; 0x1fe
 801ca7a:	4603      	mov	r3, r0
 801ca7c:	e7bc      	b.n	801c9f8 <f_read+0x35c>
 801ca7e:	bf00      	nop

0801ca80 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801ca80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 801ca84:	b138      	cbz	r0, 801ca96 <f_close+0x16>
 801ca86:	6803      	ldr	r3, [r0, #0]
 801ca88:	b12b      	cbz	r3, 801ca96 <f_close+0x16>
 801ca8a:	781a      	ldrb	r2, [r3, #0]
 801ca8c:	b11a      	cbz	r2, 801ca96 <f_close+0x16>
 801ca8e:	88d9      	ldrh	r1, [r3, #6]
 801ca90:	8882      	ldrh	r2, [r0, #4]
 801ca92:	4291      	cmp	r1, r2
 801ca94:	d003      	beq.n	801ca9e <f_close+0x1e>
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 801ca96:	2509      	movs	r5, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 801ca98:	4628      	mov	r0, r5
 801ca9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca9e:	4604      	mov	r4, r0
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 801caa0:	7858      	ldrb	r0, [r3, #1]
 801caa2:	f7fc f96d 	bl	8018d80 <disk_status>
 801caa6:	07c1      	lsls	r1, r0, #31
 801caa8:	d4f5      	bmi.n	801ca96 <f_close+0x16>
		*fs = obj->fs;			/* Owner file sytem object */
 801caaa:	6826      	ldr	r6, [r4, #0]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801caac:	b11e      	cbz	r6, 801cab6 <f_close+0x36>
 801caae:	6930      	ldr	r0, [r6, #16]
 801cab0:	f000 fc26 	bl	801d300 <ff_req_grant>
 801cab4:	b918      	cbnz	r0, 801cabe <f_close+0x3e>
		ENTER_FF(obj->fs);		/* Lock file system */
 801cab6:	250f      	movs	r5, #15
}
 801cab8:	4628      	mov	r0, r5
 801caba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801cabe:	7d23      	ldrb	r3, [r4, #20]
 801cac0:	065a      	lsls	r2, r3, #25
 801cac2:	d426      	bmi.n	801cb12 <f_close+0x92>
		ff_rel_grant(fs->sobj);
 801cac4:	6930      	ldr	r0, [r6, #16]
 801cac6:	f000 fc25 	bl	801d314 <ff_rel_grant>
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 801caca:	6823      	ldr	r3, [r4, #0]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d0e2      	beq.n	801ca96 <f_close+0x16>
 801cad0:	781a      	ldrb	r2, [r3, #0]
 801cad2:	2a00      	cmp	r2, #0
 801cad4:	d0df      	beq.n	801ca96 <f_close+0x16>
 801cad6:	88d9      	ldrh	r1, [r3, #6]
 801cad8:	88a2      	ldrh	r2, [r4, #4]
 801cada:	4291      	cmp	r1, r2
 801cadc:	d1db      	bne.n	801ca96 <f_close+0x16>
 801cade:	7858      	ldrb	r0, [r3, #1]
 801cae0:	f7fc f94e 	bl	8018d80 <disk_status>
 801cae4:	f010 0501 	ands.w	r5, r0, #1
 801cae8:	d1d5      	bne.n	801ca96 <f_close+0x16>
		*fs = obj->fs;			/* Owner file sytem object */
 801caea:	6826      	ldr	r6, [r4, #0]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801caec:	2e00      	cmp	r6, #0
 801caee:	d0e2      	beq.n	801cab6 <f_close+0x36>
 801caf0:	6930      	ldr	r0, [r6, #16]
 801caf2:	f000 fc05 	bl	801d300 <ff_req_grant>
 801caf6:	2800      	cmp	r0, #0
 801caf8:	d0dd      	beq.n	801cab6 <f_close+0x36>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801cafa:	6923      	ldr	r3, [r4, #16]
 801cafc:	3b01      	subs	r3, #1
 801cafe:	2b01      	cmp	r3, #1
 801cb00:	f240 8097 	bls.w	801cc32 <f_close+0x1b2>
		res = FR_INT_ERR;			/* Invalid index nunber */
 801cb04:	2502      	movs	r5, #2
		ff_rel_grant(fs->sobj);
 801cb06:	6930      	ldr	r0, [r6, #16]
 801cb08:	f000 fc04 	bl	801d314 <ff_rel_grant>
}
 801cb0c:	4628      	mov	r0, r5
 801cb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801cb12:	061b      	lsls	r3, r3, #24
 801cb14:	d47b      	bmi.n	801cc0e <f_close+0x18e>
			tm = GET_FATTIME();				/* Modified time */
 801cb16:	f7e6 ffeb 	bl	8003af0 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 801cb1a:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801cb1e:	6bb7      	ldr	r7, [r6, #56]	; 0x38
			tm = GET_FATTIME();				/* Modified time */
 801cb20:	4605      	mov	r5, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801cb22:	45b8      	cmp	r8, r7
 801cb24:	d037      	beq.n	801cb96 <f_close+0x116>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801cb26:	78f3      	ldrb	r3, [r6, #3]
 801cb28:	f106 093c 	add.w	r9, r6, #60	; 0x3c
 801cb2c:	7870      	ldrb	r0, [r6, #1]
 801cb2e:	b303      	cbz	r3, 801cb72 <f_close+0xf2>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801cb30:	2301      	movs	r3, #1
 801cb32:	463a      	mov	r2, r7
 801cb34:	4649      	mov	r1, r9
 801cb36:	f7fc f94f 	bl	8018dd8 <disk_write>
 801cb3a:	bb18      	cbnz	r0, 801cb84 <f_close+0x104>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801cb3c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 801cb3e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801cb40:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 801cb42:	70f0      	strb	r0, [r6, #3]
 801cb44:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801cb46:	429a      	cmp	r2, r3
 801cb48:	d213      	bcs.n	801cb72 <f_close+0xf2>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801cb4a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801cb4e:	f1ba 0f01 	cmp.w	sl, #1
 801cb52:	d802      	bhi.n	801cb5a <f_close+0xda>
 801cb54:	e00d      	b.n	801cb72 <f_close+0xf2>
 801cb56:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801cb58:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 801cb5a:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801cb5c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 801cb60:	2301      	movs	r3, #1
 801cb62:	4649      	mov	r1, r9
 801cb64:	463a      	mov	r2, r7
 801cb66:	f7fc f937 	bl	8018dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801cb6a:	f1ba 0f01 	cmp.w	sl, #1
 801cb6e:	d1f2      	bne.n	801cb56 <f_close+0xd6>
 801cb70:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801cb72:	4649      	mov	r1, r9
 801cb74:	2301      	movs	r3, #1
 801cb76:	4642      	mov	r2, r8
 801cb78:	f7fc f920 	bl	8018dbc <disk_read>
 801cb7c:	b148      	cbz	r0, 801cb92 <f_close+0x112>
			fs->winsect = sector;
 801cb7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cb82:	63b3      	str	r3, [r6, #56]	; 0x38
{
 801cb84:	2501      	movs	r5, #1
		ff_rel_grant(fs->sobj);
 801cb86:	6930      	ldr	r0, [r6, #16]
 801cb88:	f000 fbc4 	bl	801d314 <ff_rel_grant>
	if (res == FR_OK)
 801cb8c:	2d00      	cmp	r5, #0
 801cb8e:	d183      	bne.n	801ca98 <f_close+0x18>
 801cb90:	e79b      	b.n	801caca <f_close+0x4a>
			fs->winsect = sector;
 801cb92:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38
					dir = fp->dir_ptr;
 801cb96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801cb98:	7ada      	ldrb	r2, [r3, #11]
 801cb9a:	f042 0220 	orr.w	r2, r2, #32
 801cb9e:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801cba0:	68a2      	ldr	r2, [r4, #8]
 801cba2:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801cba4:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801cba8:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 801cbaa:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 801cbac:	7809      	ldrb	r1, [r1, #0]
 801cbae:	2903      	cmp	r1, #3
 801cbb0:	d103      	bne.n	801cbba <f_close+0x13a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801cbb2:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801cbb4:	0a11      	lsrs	r1, r2, #8
 801cbb6:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 801cbb8:	7559      	strb	r1, [r3, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801cbba:	68e2      	ldr	r2, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 801cbbc:	2100      	movs	r1, #0
 801cbbe:	0a2f      	lsrs	r7, r5, #8
 801cbc0:	759d      	strb	r5, [r3, #22]
 801cbc2:	0a10      	lsrs	r0, r2, #8
 801cbc4:	f362 0107 	bfi	r1, r2, #0, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801cbc8:	75df      	strb	r7, [r3, #23]
 801cbca:	0c17      	lsrs	r7, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801cbcc:	f360 210f 	bfi	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801cbd0:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 801cbd2:	0c28      	lsrs	r0, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801cbd4:	f367 4117 	bfi	r1, r7, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801cbd8:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 801cbda:	2700      	movs	r7, #0
	*ptr++ = (BYTE)val; val >>= 8;
 801cbdc:	7618      	strb	r0, [r3, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 801cbde:	f362 611f 	bfi	r1, r2, #24, #8
					fs->wflag = 1;
 801cbe2:	2201      	movs	r2, #1
	*ptr++ = (BYTE)val;
 801cbe4:	765d      	strb	r5, [r3, #25]
					res = sync_fs(fs);					/* Restore it to the directory */
 801cbe6:	4630      	mov	r0, r6
	*ptr++ = (BYTE)val; val >>= 8;
 801cbe8:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 801cbea:	749f      	strb	r7, [r3, #18]
	*ptr++ = (BYTE)val;
 801cbec:	74df      	strb	r7, [r3, #19]
					fs->wflag = 1;
 801cbee:	70f2      	strb	r2, [r6, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801cbf0:	f7fc fa38 	bl	8019064 <sync_fs>
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801cbf4:	f1a0 030b 	sub.w	r3, r0, #11
					fp->flag &= (BYTE)~FA_MODIFIED;
 801cbf8:	7d22      	ldrb	r2, [r4, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 801cbfa:	4605      	mov	r5, r0
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801cbfc:	b2db      	uxtb	r3, r3
					fp->flag &= (BYTE)~FA_MODIFIED;
 801cbfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801cc02:	2b01      	cmp	r3, #1
					fp->flag &= (BYTE)~FA_MODIFIED;
 801cc04:	7522      	strb	r2, [r4, #20]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801cc06:	d9c1      	bls.n	801cb8c <f_close+0x10c>
 801cc08:	280f      	cmp	r0, #15
 801cc0a:	d0bf      	beq.n	801cb8c <f_close+0x10c>
 801cc0c:	e7bb      	b.n	801cb86 <f_close+0x106>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801cc0e:	2301      	movs	r3, #1
 801cc10:	6a22      	ldr	r2, [r4, #32]
 801cc12:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801cc16:	7870      	ldrb	r0, [r6, #1]
 801cc18:	f7fc f8de 	bl	8018dd8 <disk_write>
 801cc1c:	b120      	cbz	r0, 801cc28 <f_close+0x1a8>
		ff_rel_grant(fs->sobj);
 801cc1e:	6930      	ldr	r0, [r6, #16]
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801cc20:	2501      	movs	r5, #1
		ff_rel_grant(fs->sobj);
 801cc22:	f000 fb77 	bl	801d314 <ff_rel_grant>
 801cc26:	e737      	b.n	801ca98 <f_close+0x18>
				fp->flag &= (BYTE)~FA_DIRTY;
 801cc28:	7d23      	ldrb	r3, [r4, #20]
 801cc2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cc2e:	7523      	strb	r3, [r4, #20]
 801cc30:	e771      	b.n	801cb16 <f_close+0x96>
		n = Files[i].ctr;
 801cc32:	011b      	lsls	r3, r3, #4
 801cc34:	4908      	ldr	r1, [pc, #32]	; (801cc58 <f_close+0x1d8>)
 801cc36:	18c8      	adds	r0, r1, r3
 801cc38:	8982      	ldrh	r2, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801cc3a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801cc3e:	d007      	beq.n	801cc50 <f_close+0x1d0>
		if (n > 0) n--;				/* Decrement read mode open count */
 801cc40:	b13a      	cbz	r2, 801cc52 <f_close+0x1d2>
 801cc42:	3a01      	subs	r2, #1
 801cc44:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 801cc46:	8182      	strh	r2, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801cc48:	b11a      	cbz	r2, 801cc52 <f_close+0x1d2>
				fp->obj.fs = 0;			/* Invalidate file object */
 801cc4a:	2500      	movs	r5, #0
 801cc4c:	6025      	str	r5, [r4, #0]
 801cc4e:	e75a      	b.n	801cb06 <f_close+0x86>
		Files[i].ctr = n;
 801cc50:	8185      	strh	r5, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801cc52:	2200      	movs	r2, #0
 801cc54:	50ca      	str	r2, [r1, r3]
 801cc56:	e7f8      	b.n	801cc4a <f_close+0x1ca>
 801cc58:	20006230 	.word	0x20006230

0801cc5c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801cc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc60:	b084      	sub	sp, #16
 801cc62:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801cc64:	2800      	cmp	r0, #0
 801cc66:	d054      	beq.n	801cd12 <f_opendir+0xb6>
 801cc68:	4605      	mov	r5, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 801cc6a:	2200      	movs	r2, #0
 801cc6c:	a903      	add	r1, sp, #12
 801cc6e:	a801      	add	r0, sp, #4
 801cc70:	f7fe ff0c 	bl	801ba8c <find_volume>
	if (res == FR_OK) {
 801cc74:	4604      	mov	r4, r0
 801cc76:	b170      	cbz	r0, 801cc96 <f_opendir+0x3a>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801cc78:	2200      	movs	r2, #0

	LEAVE_FF(fs, res);
 801cc7a:	9b03      	ldr	r3, [sp, #12]
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801cc7c:	602a      	str	r2, [r5, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801cc7e:	b133      	cbz	r3, 801cc8e <f_opendir+0x32>
 801cc80:	f1a4 020b 	sub.w	r2, r4, #11
 801cc84:	b2d2      	uxtb	r2, r2
 801cc86:	2a01      	cmp	r2, #1
 801cc88:	d901      	bls.n	801cc8e <f_opendir+0x32>
 801cc8a:	2c0f      	cmp	r4, #15
 801cc8c:	d13d      	bne.n	801cd0a <f_opendir+0xae>
}
 801cc8e:	4620      	mov	r0, r4
 801cc90:	b004      	add	sp, #16
 801cc92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		obj->fs = fs;
 801cc96:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 801cc98:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
 801cc9c:	602b      	str	r3, [r5, #0]
		INIT_NAMBUF(fs);
 801cc9e:	f000 fb3b 	bl	801d318 <ff_memalloc>
 801cca2:	9b03      	ldr	r3, [sp, #12]
 801cca4:	4606      	mov	r6, r0
 801cca6:	2800      	cmp	r0, #0
 801cca8:	d038      	beq.n	801cd1c <f_opendir+0xc0>
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801ccaa:	4628      	mov	r0, r5
 801ccac:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 801ccae:	60de      	str	r6, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801ccb0:	f7fd ff2a 	bl	801ab08 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 801ccb4:	4604      	mov	r4, r0
 801ccb6:	2800      	cmp	r0, #0
 801ccb8:	d136      	bne.n	801cd28 <f_opendir+0xcc>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801ccba:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	db40      	blt.n	801cd44 <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801ccc2:	79ab      	ldrb	r3, [r5, #6]
 801ccc4:	06db      	lsls	r3, r3, #27
 801ccc6:	d53f      	bpl.n	801cd48 <f_opendir+0xec>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801ccc8:	9a03      	ldr	r2, [sp, #12]
 801ccca:	6a29      	ldr	r1, [r5, #32]
	if (fs->fs_type == FS_FAT32) {
 801cccc:	7810      	ldrb	r0, [r2, #0]
	rv = rv << 8 | ptr[0];
 801ccce:	7ecc      	ldrb	r4, [r1, #27]
 801ccd0:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 801ccd2:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 801ccd4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	if (fs->fs_type == FS_FAT32) {
 801ccd8:	d105      	bne.n	801cce6 <f_opendir+0x8a>
	rv = rv << 8 | ptr[0];
 801ccda:	7d48      	ldrb	r0, [r1, #21]
 801ccdc:	7d09      	ldrb	r1, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801ccde:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 801cce2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801cce6:	60ab      	str	r3, [r5, #8]
				obj->id = fs->id;
 801cce8:	88d3      	ldrh	r3, [r2, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801ccea:	2100      	movs	r1, #0
 801ccec:	4628      	mov	r0, r5
				obj->id = fs->id;
 801ccee:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801ccf0:	f7fc fe4c 	bl	801998c <dir_sdi>
				if (res == FR_OK) {
 801ccf4:	4604      	mov	r4, r0
 801ccf6:	b9b8      	cbnz	r0, 801cd28 <f_opendir+0xcc>
					if (obj->sclust) {
 801ccf8:	68ab      	ldr	r3, [r5, #8]
 801ccfa:	bb53      	cbnz	r3, 801cd52 <f_opendir+0xf6>
						obj->lockid = 0;	/* Root directory need not to be locked */
 801ccfc:	6128      	str	r0, [r5, #16]
		FREE_NAMBUF();
 801ccfe:	4630      	mov	r0, r6
 801cd00:	f000 fb0c 	bl	801d31c <ff_memfree>
	LEAVE_FF(fs, res);
 801cd04:	9b03      	ldr	r3, [sp, #12]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	d0c1      	beq.n	801cc8e <f_opendir+0x32>
		ff_rel_grant(fs->sobj);
 801cd0a:	6918      	ldr	r0, [r3, #16]
 801cd0c:	f000 fb02 	bl	801d314 <ff_rel_grant>
 801cd10:	e7bd      	b.n	801cc8e <f_opendir+0x32>
	if (!dp) return FR_INVALID_OBJECT;
 801cd12:	2409      	movs	r4, #9
}
 801cd14:	4620      	mov	r0, r4
 801cd16:	b004      	add	sp, #16
 801cd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801cd1c:	b183      	cbz	r3, 801cd40 <f_opendir+0xe4>
		ff_rel_grant(fs->sobj);
 801cd1e:	6918      	ldr	r0, [r3, #16]
		INIT_NAMBUF(fs);
 801cd20:	2411      	movs	r4, #17
		ff_rel_grant(fs->sobj);
 801cd22:	f000 faf7 	bl	801d314 <ff_rel_grant>
 801cd26:	e7b2      	b.n	801cc8e <f_opendir+0x32>
		FREE_NAMBUF();
 801cd28:	4630      	mov	r0, r6
 801cd2a:	f000 faf7 	bl	801d31c <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801cd2e:	2c04      	cmp	r4, #4
 801cd30:	d1a2      	bne.n	801cc78 <f_opendir+0x1c>
 801cd32:	2405      	movs	r4, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801cd34:	2200      	movs	r2, #0
	LEAVE_FF(fs, res);
 801cd36:	9b03      	ldr	r3, [sp, #12]
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801cd38:	602a      	str	r2, [r5, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d0a7      	beq.n	801cc8e <f_opendir+0x32>
 801cd3e:	e7e4      	b.n	801cd0a <f_opendir+0xae>
		INIT_NAMBUF(fs);
 801cd40:	2411      	movs	r4, #17
 801cd42:	e7a4      	b.n	801cc8e <f_opendir+0x32>
 801cd44:	9a03      	ldr	r2, [sp, #12]
 801cd46:	e7cf      	b.n	801cce8 <f_opendir+0x8c>
		FREE_NAMBUF();
 801cd48:	4630      	mov	r0, r6
					res = FR_NO_PATH;
 801cd4a:	2405      	movs	r4, #5
		FREE_NAMBUF();
 801cd4c:	f000 fae6 	bl	801d31c <ff_memfree>
 801cd50:	e7f0      	b.n	801cd34 <f_opendir+0xd8>
		if (Files[i].fs == dp->obj.fs &&
 801cd52:	4a26      	ldr	r2, [pc, #152]	; (801cdec <f_opendir+0x190>)
 801cd54:	6828      	ldr	r0, [r5, #0]
 801cd56:	f8d2 8000 	ldr.w	r8, [r2]
 801cd5a:	4540      	cmp	r0, r8
 801cd5c:	d029      	beq.n	801cdb2 <f_opendir+0x156>
 801cd5e:	f8d2 e010 	ldr.w	lr, [r2, #16]
 801cd62:	4586      	cmp	lr, r0
 801cd64:	d00c      	beq.n	801cd80 <f_opendir+0x124>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801cd66:	f1b8 0f00 	cmp.w	r8, #0
 801cd6a:	d02b      	beq.n	801cdc4 <f_opendir+0x168>
 801cd6c:	f1be 0f00 	cmp.w	lr, #0
 801cd70:	d03a      	beq.n	801cde8 <f_opendir+0x18c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801cd72:	2300      	movs	r3, #0
		FREE_NAMBUF();
 801cd74:	4630      	mov	r0, r6
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801cd76:	2412      	movs	r4, #18
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801cd78:	612b      	str	r3, [r5, #16]
		FREE_NAMBUF();
 801cd7a:	f000 facf 	bl	801d31c <ff_memfree>
 801cd7e:	e7d9      	b.n	801cd34 <f_opendir+0xd8>
		if (Files[i].fs == dp->obj.fs &&
 801cd80:	6957      	ldr	r7, [r2, #20]
 801cd82:	42bb      	cmp	r3, r7
 801cd84:	d1ef      	bne.n	801cd66 <f_opendir+0x10a>
			Files[i].clu == dp->obj.sclust &&
 801cd86:	6997      	ldr	r7, [r2, #24]
 801cd88:	46bc      	mov	ip, r7
 801cd8a:	696f      	ldr	r7, [r5, #20]
 801cd8c:	45bc      	cmp	ip, r7
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801cd8e:	bf08      	it	eq
 801cd90:	2101      	moveq	r1, #1
			Files[i].clu == dp->obj.sclust &&
 801cd92:	d1e8      	bne.n	801cd66 <f_opendir+0x10a>
 801cd94:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 801cd98:	eb02 030e 	add.w	r3, r2, lr
 801cd9c:	899f      	ldrh	r7, [r3, #12]
 801cd9e:	3701      	adds	r7, #1
 801cda0:	b2bf      	uxth	r7, r7
	return i + 1;
 801cda2:	3101      	adds	r1, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801cda4:	4472      	add	r2, lr
		FREE_NAMBUF();
 801cda6:	4630      	mov	r0, r6
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801cda8:	6129      	str	r1, [r5, #16]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801cdaa:	8197      	strh	r7, [r2, #12]
		FREE_NAMBUF();
 801cdac:	f000 fab6 	bl	801d31c <ff_memfree>
 801cdb0:	e7a8      	b.n	801cd04 <f_opendir+0xa8>
		if (Files[i].fs == dp->obj.fs &&
 801cdb2:	6857      	ldr	r7, [r2, #4]
 801cdb4:	42bb      	cmp	r3, r7
 801cdb6:	d1d2      	bne.n	801cd5e <f_opendir+0x102>
			Files[i].clu == dp->obj.sclust &&
 801cdb8:	6969      	ldr	r1, [r5, #20]
 801cdba:	6897      	ldr	r7, [r2, #8]
 801cdbc:	42b9      	cmp	r1, r7
 801cdbe:	d1ce      	bne.n	801cd5e <f_opendir+0x102>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801cdc0:	4621      	mov	r1, r4
 801cdc2:	e7e7      	b.n	801cd94 <f_opendir+0x138>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801cdc4:	4641      	mov	r1, r8
		Files[i].fs = dp->obj.fs;
 801cdc6:	ea4f 1e01 	mov.w	lr, r1, lsl #4
		Files[i].ctr = 0;
 801cdca:	f04f 0800 	mov.w	r8, #0
 801cdce:	2701      	movs	r7, #1
		Files[i].fs = dp->obj.fs;
 801cdd0:	eb02 0c0e 	add.w	ip, r2, lr
 801cdd4:	f842 000e 	str.w	r0, [r2, lr]
		Files[i].clu = dp->obj.sclust;
 801cdd8:	f8cc 3004 	str.w	r3, [ip, #4]
		Files[i].ofs = dp->dptr;
 801cddc:	696b      	ldr	r3, [r5, #20]
		Files[i].ctr = 0;
 801cdde:	f8ac 800c 	strh.w	r8, [ip, #12]
		Files[i].ofs = dp->dptr;
 801cde2:	f8cc 3008 	str.w	r3, [ip, #8]
 801cde6:	e7dc      	b.n	801cda2 <f_opendir+0x146>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801cde8:	2101      	movs	r1, #1
 801cdea:	e7ec      	b.n	801cdc6 <f_opendir+0x16a>
 801cdec:	20006230 	.word	0x20006230

0801cdf0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801cdf0:	b570      	push	{r4, r5, r6, lr}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 801cdf2:	b138      	cbz	r0, 801ce04 <f_closedir+0x14>
 801cdf4:	6803      	ldr	r3, [r0, #0]
 801cdf6:	b12b      	cbz	r3, 801ce04 <f_closedir+0x14>
 801cdf8:	781a      	ldrb	r2, [r3, #0]
 801cdfa:	b11a      	cbz	r2, 801ce04 <f_closedir+0x14>
 801cdfc:	88d9      	ldrh	r1, [r3, #6]
 801cdfe:	8882      	ldrh	r2, [r0, #4]
 801ce00:	4291      	cmp	r1, r2
 801ce02:	d002      	beq.n	801ce0a <f_closedir+0x1a>
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 801ce04:	2409      	movs	r4, #9
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 801ce06:	4620      	mov	r0, r4
 801ce08:	bd70      	pop	{r4, r5, r6, pc}
 801ce0a:	4605      	mov	r5, r0
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 801ce0c:	7858      	ldrb	r0, [r3, #1]
 801ce0e:	f7fb ffb7 	bl	8018d80 <disk_status>
 801ce12:	07c3      	lsls	r3, r0, #31
 801ce14:	d4f6      	bmi.n	801ce04 <f_closedir+0x14>
		*fs = obj->fs;			/* Owner file sytem object */
 801ce16:	682e      	ldr	r6, [r5, #0]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801ce18:	b11e      	cbz	r6, 801ce22 <f_closedir+0x32>
 801ce1a:	6930      	ldr	r0, [r6, #16]
 801ce1c:	f000 fa70 	bl	801d300 <ff_req_grant>
 801ce20:	b908      	cbnz	r0, 801ce26 <f_closedir+0x36>
		ENTER_FF(obj->fs);		/* Lock file system */
 801ce22:	240f      	movs	r4, #15
 801ce24:	e7ef      	b.n	801ce06 <f_closedir+0x16>
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801ce26:	692b      	ldr	r3, [r5, #16]
 801ce28:	b16b      	cbz	r3, 801ce46 <f_closedir+0x56>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801ce2a:	3b01      	subs	r3, #1
 801ce2c:	2b01      	cmp	r3, #1
 801ce2e:	d90d      	bls.n	801ce4c <f_closedir+0x5c>
		res = FR_INT_ERR;			/* Invalid index nunber */
 801ce30:	2402      	movs	r4, #2
		ff_rel_grant(fs->sobj);
 801ce32:	6930      	ldr	r0, [r6, #16]
 801ce34:	f000 fa6e 	bl	801d314 <ff_rel_grant>
}
 801ce38:	4620      	mov	r0, r4
 801ce3a:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 801ce3c:	18ca      	adds	r2, r1, r3
 801ce3e:	2000      	movs	r0, #0
 801ce40:	8190      	strh	r0, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801ce42:	2200      	movs	r2, #0
 801ce44:	50ca      	str	r2, [r1, r3]
			dp->obj.fs = 0;			/* Invalidate directory object */
 801ce46:	2400      	movs	r4, #0
 801ce48:	602c      	str	r4, [r5, #0]
 801ce4a:	e7f2      	b.n	801ce32 <f_closedir+0x42>
		n = Files[i].ctr;
 801ce4c:	011b      	lsls	r3, r3, #4
 801ce4e:	4907      	ldr	r1, [pc, #28]	; (801ce6c <f_closedir+0x7c>)
 801ce50:	18ca      	adds	r2, r1, r3
 801ce52:	8992      	ldrh	r2, [r2, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801ce54:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801ce58:	d0f0      	beq.n	801ce3c <f_closedir+0x4c>
		if (n > 0) n--;				/* Decrement read mode open count */
 801ce5a:	2a00      	cmp	r2, #0
 801ce5c:	d0f1      	beq.n	801ce42 <f_closedir+0x52>
 801ce5e:	3a01      	subs	r2, #1
		Files[i].ctr = n;
 801ce60:	18c8      	adds	r0, r1, r3
		if (n > 0) n--;				/* Decrement read mode open count */
 801ce62:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 801ce64:	8182      	strh	r2, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801ce66:	2a00      	cmp	r2, #0
 801ce68:	d1ed      	bne.n	801ce46 <f_closedir+0x56>
 801ce6a:	e7ea      	b.n	801ce42 <f_closedir+0x52>
 801ce6c:	20006230 	.word	0x20006230

0801ce70 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801ce70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 801ce74:	b138      	cbz	r0, 801ce86 <f_readdir+0x16>
 801ce76:	6803      	ldr	r3, [r0, #0]
 801ce78:	b12b      	cbz	r3, 801ce86 <f_readdir+0x16>
 801ce7a:	781a      	ldrb	r2, [r3, #0]
 801ce7c:	b11a      	cbz	r2, 801ce86 <f_readdir+0x16>
 801ce7e:	88dc      	ldrh	r4, [r3, #6]
 801ce80:	8882      	ldrh	r2, [r0, #4]
 801ce82:	4294      	cmp	r4, r2
 801ce84:	d003      	beq.n	801ce8e <f_readdir+0x1e>
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 801ce86:	2509      	movs	r5, #9
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 801ce88:	4628      	mov	r0, r5
 801ce8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce8e:	4604      	mov	r4, r0
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 801ce90:	7858      	ldrb	r0, [r3, #1]
 801ce92:	460e      	mov	r6, r1
 801ce94:	f7fb ff74 	bl	8018d80 <disk_status>
 801ce98:	07c3      	lsls	r3, r0, #31
 801ce9a:	d4f4      	bmi.n	801ce86 <f_readdir+0x16>
		*fs = obj->fs;			/* Owner file sytem object */
 801ce9c:	6827      	ldr	r7, [r4, #0]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801ce9e:	b11f      	cbz	r7, 801cea8 <f_readdir+0x38>
 801cea0:	6938      	ldr	r0, [r7, #16]
 801cea2:	f000 fa2d 	bl	801d300 <ff_req_grant>
 801cea6:	b908      	cbnz	r0, 801ceac <f_readdir+0x3c>
		ENTER_FF(obj->fs);		/* Lock file system */
 801cea8:	250f      	movs	r5, #15
 801ceaa:	e7ed      	b.n	801ce88 <f_readdir+0x18>
		if (!fno) {
 801ceac:	b366      	cbz	r6, 801cf08 <f_readdir+0x98>
			INIT_NAMBUF(fs);
 801ceae:	f44f 7000 	mov.w	r0, #512	; 0x200
 801ceb2:	f000 fa31 	bl	801d318 <ff_memalloc>
 801ceb6:	4680      	mov	r8, r0
 801ceb8:	2800      	cmp	r0, #0
 801ceba:	d039      	beq.n	801cf30 <f_readdir+0xc0>
 801cebc:	60f8      	str	r0, [r7, #12]
			res = dir_read(dp, 0);			/* Read an item */
 801cebe:	4620      	mov	r0, r4
 801cec0:	f7fd fa1e 	bl	801a300 <dir_read.constprop.14>
			if (res == FR_OK) {				/* A valid entry is found */
 801cec4:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 801cec8:	4605      	mov	r5, r0
			if (res == FR_OK) {				/* A valid entry is found */
 801ceca:	d109      	bne.n	801cee0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801cecc:	4631      	mov	r1, r6
 801cece:	4620      	mov	r0, r4
 801ced0:	f7fc f810 	bl	8018ef4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801ced4:	4620      	mov	r0, r4
 801ced6:	f7fd f9d1 	bl	801a27c <dir_next.constprop.15>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801ceda:	2804      	cmp	r0, #4
				res = dir_next(dp, 0);		/* Increment index for next */
 801cedc:	4605      	mov	r5, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801cede:	d022      	beq.n	801cf26 <f_readdir+0xb6>
 801cee0:	f1a5 040b 	sub.w	r4, r5, #11
			FREE_NAMBUF();
 801cee4:	4640      	mov	r0, r8
 801cee6:	b2e4      	uxtb	r4, r4
 801cee8:	2d0f      	cmp	r5, #15
 801ceea:	bf18      	it	ne
 801ceec:	2c01      	cmpne	r4, #1
 801ceee:	bf8c      	ite	hi
 801cef0:	2401      	movhi	r4, #1
 801cef2:	2400      	movls	r4, #0
 801cef4:	f000 fa12 	bl	801d31c <ff_memfree>
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801cef8:	2c00      	cmp	r4, #0
 801cefa:	d0c5      	beq.n	801ce88 <f_readdir+0x18>
		ff_rel_grant(fs->sobj);
 801cefc:	6938      	ldr	r0, [r7, #16]
 801cefe:	f000 fa09 	bl	801d314 <ff_rel_grant>
}
 801cf02:	4628      	mov	r0, r5
 801cf04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801cf08:	4620      	mov	r0, r4
 801cf0a:	4631      	mov	r1, r6
 801cf0c:	f7fc fd3e 	bl	801998c <dir_sdi>
 801cf10:	f1a0 040b 	sub.w	r4, r0, #11
 801cf14:	4605      	mov	r5, r0
 801cf16:	b2e4      	uxtb	r4, r4
 801cf18:	280f      	cmp	r0, #15
 801cf1a:	bf18      	it	ne
 801cf1c:	2c01      	cmpne	r4, #1
 801cf1e:	bf8c      	ite	hi
 801cf20:	2401      	movhi	r4, #1
 801cf22:	2400      	movls	r4, #0
 801cf24:	e7e8      	b.n	801cef8 <f_readdir+0x88>
			FREE_NAMBUF();
 801cf26:	4640      	mov	r0, r8
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801cf28:	2500      	movs	r5, #0
			FREE_NAMBUF();
 801cf2a:	f000 f9f7 	bl	801d31c <ff_memfree>
 801cf2e:	e7e5      	b.n	801cefc <f_readdir+0x8c>
		ff_rel_grant(fs->sobj);
 801cf30:	6938      	ldr	r0, [r7, #16]
			INIT_NAMBUF(fs);
 801cf32:	2511      	movs	r5, #17
		ff_rel_grant(fs->sobj);
 801cf34:	f000 f9ee 	bl	801d314 <ff_rel_grant>
 801cf38:	e7a6      	b.n	801ce88 <f_readdir+0x18>
 801cf3a:	bf00      	nop

0801cf3c <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 801cf3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf40:	fab1 f881 	clz	r8, r1
 801cf44:	4607      	mov	r7, r0
 801cf46:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 801cf48:	4d31      	ldr	r5, [pc, #196]	; (801d010 <f_findnext+0xd4>)
 801cf4a:	ea4f 1858 	mov.w	r8, r8, lsr #5
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 801cf4e:	4631      	mov	r1, r6
 801cf50:	4638      	mov	r0, r7
 801cf52:	f7ff ff8d 	bl	801ce70 <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 801cf56:	2800      	cmp	r0, #0
 801cf58:	d143      	bne.n	801cfe2 <f_findnext+0xa6>
 801cf5a:	f1b8 0f00 	cmp.w	r8, #0
 801cf5e:	d140      	bne.n	801cfe2 <f_findnext+0xa6>
 801cf60:	7db3      	ldrb	r3, [r6, #22]
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d050      	beq.n	801d008 <f_findnext+0xcc>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801cf66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801cf68:	f106 0116 	add.w	r1, r6, #22
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 801cf6c:	4604      	mov	r4, r0
 801cf6e:	f814 2b01 	ldrb.w	r2, [r4], #1
 801cf72:	2a3f      	cmp	r2, #63	; 0x3f
 801cf74:	d01a      	beq.n	801cfac <f_findnext+0x70>
 801cf76:	2a2a      	cmp	r2, #42	; 0x2a
 801cf78:	d018      	beq.n	801cfac <f_findnext+0x70>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 801cf7a:	b293      	uxth	r3, r2
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801cf7c:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 801cf80:	2819      	cmp	r0, #25
 801cf82:	d83b      	bhi.n	801cffc <f_findnext+0xc0>
 801cf84:	3b20      	subs	r3, #32
 801cf86:	b29b      	uxth	r3, r3
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 801cf88:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cf8c:	b290      	uxth	r0, r2
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801cf8e:	f1a0 0c61 	sub.w	ip, r0, #97	; 0x61
 801cf92:	f1bc 0f19 	cmp.w	ip, #25
 801cf96:	d826      	bhi.n	801cfe6 <f_findnext+0xaa>
 801cf98:	3820      	subs	r0, #32
			if (pc != nc) break;	/* Branch mismatched? */
 801cf9a:	b280      	uxth	r0, r0
 801cf9c:	4298      	cmp	r0, r3
 801cf9e:	d1d6      	bne.n	801cf4e <f_findnext+0x12>
{
 801cfa0:	4620      	mov	r0, r4
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 801cfa2:	4604      	mov	r4, r0
 801cfa4:	f814 2b01 	ldrb.w	r2, [r4], #1
 801cfa8:	2a3f      	cmp	r2, #63	; 0x3f
 801cfaa:	d1e4      	bne.n	801cf76 <f_findnext+0x3a>
				nm = nx = 0;
 801cfac:	2300      	movs	r3, #0
 801cfae:	f890 e000 	ldrb.w	lr, [r0]
 801cfb2:	46a4      	mov	ip, r4
 801cfb4:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 801cfb6:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 801cfba:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
 801cfbc:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
 801cfc0:	bf0c      	ite	eq
 801cfc2:	3201      	addeq	r2, #1
 801cfc4:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 801cfc6:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 801cfca:	bf18      	it	ne
 801cfcc:	f1be 0f2a 	cmpne.w	lr, #42	; 0x2a
 801cfd0:	bf0c      	ite	eq
 801cfd2:	2401      	moveq	r4, #1
 801cfd4:	2400      	movne	r4, #0
 801cfd6:	d0ee      	beq.n	801cfb6 <f_findnext+0x7a>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 801cfd8:	f7fb ff1a 	bl	8018e10 <pattern_matching>
 801cfdc:	2800      	cmp	r0, #0
 801cfde:	d0b6      	beq.n	801cf4e <f_findnext+0x12>
 801cfe0:	4620      	mov	r0, r4
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 801cfe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 801cfe6:	287f      	cmp	r0, #127	; 0x7f
 801cfe8:	d902      	bls.n	801cff0 <f_findnext+0xb4>
 801cfea:	442a      	add	r2, r5
 801cfec:	f812 0c80 	ldrb.w	r0, [r2, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
 801cff0:	4298      	cmp	r0, r3
 801cff2:	d1ac      	bne.n	801cf4e <f_findnext+0x12>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 801cff4:	2800      	cmp	r0, #0
 801cff6:	d0f4      	beq.n	801cfe2 <f_findnext+0xa6>
{
 801cff8:	4620      	mov	r0, r4
 801cffa:	e7d2      	b.n	801cfa2 <f_findnext+0x66>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 801cffc:	2b7f      	cmp	r3, #127	; 0x7f
 801cffe:	d9c3      	bls.n	801cf88 <f_findnext+0x4c>
 801d000:	442a      	add	r2, r5
 801d002:	f812 3c80 	ldrb.w	r3, [r2, #-128]
 801d006:	e7bf      	b.n	801cf88 <f_findnext+0x4c>
 801d008:	4640      	mov	r0, r8
}
 801d00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d00e:	bf00      	nop
 801d010:	08025ebc 	.word	0x08025ebc

0801d014 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 801d014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d018:	b083      	sub	sp, #12
 801d01a:	4605      	mov	r5, r0
 801d01c:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 801d01e:	6343      	str	r3, [r0, #52]	; 0x34
 801d020:	9200      	str	r2, [sp, #0]
	res = find_volume(&path, &fs, 0);
 801d022:	a901      	add	r1, sp, #4
 801d024:	2200      	movs	r2, #0
 801d026:	4668      	mov	r0, sp
 801d028:	f7fe fd30 	bl	801ba8c <find_volume>
	if (res == FR_OK) {
 801d02c:	b170      	cbz	r0, 801d04c <f_findfirst+0x38>
 801d02e:	4604      	mov	r4, r0
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801d030:	2200      	movs	r2, #0
	LEAVE_FF(fs, res);
 801d032:	9b01      	ldr	r3, [sp, #4]
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801d034:	602a      	str	r2, [r5, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801d036:	b12b      	cbz	r3, 801d044 <f_findfirst+0x30>
 801d038:	2c0c      	cmp	r4, #12
 801d03a:	d003      	beq.n	801d044 <f_findfirst+0x30>
 801d03c:	f004 02fb 	and.w	r2, r4, #251	; 0xfb
 801d040:	2a0b      	cmp	r2, #11
 801d042:	d151      	bne.n	801d0e8 <f_findfirst+0xd4>
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 801d044:	4620      	mov	r0, r4
 801d046:	b003      	add	sp, #12
 801d048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		obj->fs = fs;
 801d04c:	9b01      	ldr	r3, [sp, #4]
		INIT_NAMBUF(fs);
 801d04e:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
 801d052:	602b      	str	r3, [r5, #0]
		INIT_NAMBUF(fs);
 801d054:	f000 f960 	bl	801d318 <ff_memalloc>
 801d058:	9b01      	ldr	r3, [sp, #4]
 801d05a:	4607      	mov	r7, r0
 801d05c:	2800      	cmp	r0, #0
 801d05e:	d032      	beq.n	801d0c6 <f_findfirst+0xb2>
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801d060:	4628      	mov	r0, r5
 801d062:	9900      	ldr	r1, [sp, #0]
		INIT_NAMBUF(fs);
 801d064:	60df      	str	r7, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801d066:	f7fd fd4f 	bl	801ab08 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 801d06a:	4604      	mov	r4, r0
 801d06c:	2800      	cmp	r0, #0
 801d06e:	d130      	bne.n	801d0d2 <f_findfirst+0xbe>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801d070:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 801d074:	2b00      	cmp	r3, #0
 801d076:	db47      	blt.n	801d108 <f_findfirst+0xf4>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801d078:	79ab      	ldrb	r3, [r5, #6]
 801d07a:	06db      	lsls	r3, r3, #27
 801d07c:	d546      	bpl.n	801d10c <f_findfirst+0xf8>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801d07e:	9a01      	ldr	r2, [sp, #4]
 801d080:	6a29      	ldr	r1, [r5, #32]
	if (fs->fs_type == FS_FAT32) {
 801d082:	7810      	ldrb	r0, [r2, #0]
	rv = rv << 8 | ptr[0];
 801d084:	7ecc      	ldrb	r4, [r1, #27]
 801d086:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 801d088:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 801d08a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	if (fs->fs_type == FS_FAT32) {
 801d08e:	d105      	bne.n	801d09c <f_findfirst+0x88>
	rv = rv << 8 | ptr[0];
 801d090:	7d48      	ldrb	r0, [r1, #21]
 801d092:	7d09      	ldrb	r1, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801d094:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 801d098:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801d09c:	60ab      	str	r3, [r5, #8]
				obj->id = fs->id;
 801d09e:	88d3      	ldrh	r3, [r2, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801d0a0:	2100      	movs	r1, #0
 801d0a2:	4628      	mov	r0, r5
				obj->id = fs->id;
 801d0a4:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801d0a6:	f7fc fc71 	bl	801998c <dir_sdi>
				if (res == FR_OK) {
 801d0aa:	4604      	mov	r4, r0
 801d0ac:	b988      	cbnz	r0, 801d0d2 <f_findfirst+0xbe>
					if (obj->sclust) {
 801d0ae:	68ab      	ldr	r3, [r5, #8]
 801d0b0:	bb8b      	cbnz	r3, 801d116 <f_findfirst+0x102>
						obj->lockid = 0;	/* Root directory need not to be locked */
 801d0b2:	612b      	str	r3, [r5, #16]
		FREE_NAMBUF();
 801d0b4:	4638      	mov	r0, r7
 801d0b6:	f000 f931 	bl	801d31c <ff_memfree>
	LEAVE_FF(fs, res);
 801d0ba:	9b01      	ldr	r3, [sp, #4]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801d0bc:	b1cb      	cbz	r3, 801d0f2 <f_findfirst+0xde>
		ff_rel_grant(fs->sobj);
 801d0be:	6918      	ldr	r0, [r3, #16]
 801d0c0:	f000 f928 	bl	801d314 <ff_rel_grant>
 801d0c4:	e015      	b.n	801d0f2 <f_findfirst+0xde>
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801d0c6:	b1eb      	cbz	r3, 801d104 <f_findfirst+0xf0>
		ff_rel_grant(fs->sobj);
 801d0c8:	6918      	ldr	r0, [r3, #16]
		INIT_NAMBUF(fs);
 801d0ca:	2411      	movs	r4, #17
		ff_rel_grant(fs->sobj);
 801d0cc:	f000 f922 	bl	801d314 <ff_rel_grant>
 801d0d0:	e7b8      	b.n	801d044 <f_findfirst+0x30>
		FREE_NAMBUF();
 801d0d2:	4638      	mov	r0, r7
 801d0d4:	f000 f922 	bl	801d31c <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801d0d8:	2c04      	cmp	r4, #4
 801d0da:	d1a9      	bne.n	801d030 <f_findfirst+0x1c>
 801d0dc:	2405      	movs	r4, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801d0de:	2200      	movs	r2, #0
	LEAVE_FF(fs, res);
 801d0e0:	9b01      	ldr	r3, [sp, #4]
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801d0e2:	602a      	str	r2, [r5, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d0ad      	beq.n	801d044 <f_findfirst+0x30>
		ff_rel_grant(fs->sobj);
 801d0e8:	6918      	ldr	r0, [r3, #16]
 801d0ea:	f000 f913 	bl	801d314 <ff_rel_grant>
	if (res == FR_OK) {
 801d0ee:	2c00      	cmp	r4, #0
 801d0f0:	d1a8      	bne.n	801d044 <f_findfirst+0x30>
		res = f_findnext(dp, fno);	/* Find the first item */
 801d0f2:	4631      	mov	r1, r6
 801d0f4:	4628      	mov	r0, r5
 801d0f6:	f7ff ff21 	bl	801cf3c <f_findnext>
 801d0fa:	4604      	mov	r4, r0
}
 801d0fc:	4620      	mov	r0, r4
 801d0fe:	b003      	add	sp, #12
 801d100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		INIT_NAMBUF(fs);
 801d104:	2411      	movs	r4, #17
 801d106:	e79d      	b.n	801d044 <f_findfirst+0x30>
 801d108:	9a01      	ldr	r2, [sp, #4]
 801d10a:	e7c8      	b.n	801d09e <f_findfirst+0x8a>
		FREE_NAMBUF();
 801d10c:	4638      	mov	r0, r7
					res = FR_NO_PATH;
 801d10e:	2405      	movs	r4, #5
		FREE_NAMBUF();
 801d110:	f000 f904 	bl	801d31c <ff_memfree>
 801d114:	e7e3      	b.n	801d0de <f_findfirst+0xca>
		if (Files[i].fs == dp->obj.fs &&
 801d116:	4a25      	ldr	r2, [pc, #148]	; (801d1ac <f_findfirst+0x198>)
 801d118:	f8d5 e000 	ldr.w	lr, [r5]
 801d11c:	6810      	ldr	r0, [r2, #0]
 801d11e:	4586      	cmp	lr, r0
 801d120:	d028      	beq.n	801d174 <f_findfirst+0x160>
 801d122:	6914      	ldr	r4, [r2, #16]
 801d124:	4574      	cmp	r4, lr
 801d126:	d009      	beq.n	801d13c <f_findfirst+0x128>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801d128:	b368      	cbz	r0, 801d186 <f_findfirst+0x172>
 801d12a:	2c00      	cmp	r4, #0
 801d12c:	d03c      	beq.n	801d1a8 <f_findfirst+0x194>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801d12e:	2300      	movs	r3, #0
		FREE_NAMBUF();
 801d130:	4638      	mov	r0, r7
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801d132:	2412      	movs	r4, #18
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801d134:	612b      	str	r3, [r5, #16]
		FREE_NAMBUF();
 801d136:	f000 f8f1 	bl	801d31c <ff_memfree>
 801d13a:	e7d0      	b.n	801d0de <f_findfirst+0xca>
		if (Files[i].fs == dp->obj.fs &&
 801d13c:	6951      	ldr	r1, [r2, #20]
 801d13e:	428b      	cmp	r3, r1
 801d140:	d1f2      	bne.n	801d128 <f_findfirst+0x114>
			Files[i].clu == dp->obj.sclust &&
 801d142:	6991      	ldr	r1, [r2, #24]
 801d144:	468c      	mov	ip, r1
 801d146:	6969      	ldr	r1, [r5, #20]
 801d148:	458c      	cmp	ip, r1
 801d14a:	d1ed      	bne.n	801d128 <f_findfirst+0x114>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801d14c:	2401      	movs	r4, #1
 801d14e:	ea4f 1804 	mov.w	r8, r4, lsl #4
 801d152:	eb02 0308 	add.w	r3, r2, r8
 801d156:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 801d15a:	f10c 0c01 	add.w	ip, ip, #1
 801d15e:	fa1f fc8c 	uxth.w	ip, ip
	return i + 1;
 801d162:	3401      	adds	r4, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801d164:	4442      	add	r2, r8
		FREE_NAMBUF();
 801d166:	4638      	mov	r0, r7
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801d168:	612c      	str	r4, [r5, #16]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801d16a:	f8a2 c00c 	strh.w	ip, [r2, #12]
		FREE_NAMBUF();
 801d16e:	f000 f8d5 	bl	801d31c <ff_memfree>
 801d172:	e7a2      	b.n	801d0ba <f_findfirst+0xa6>
		if (Files[i].fs == dp->obj.fs &&
 801d174:	6851      	ldr	r1, [r2, #4]
 801d176:	428b      	cmp	r3, r1
 801d178:	d1d3      	bne.n	801d122 <f_findfirst+0x10e>
			Files[i].clu == dp->obj.sclust &&
 801d17a:	6969      	ldr	r1, [r5, #20]
 801d17c:	468c      	mov	ip, r1
 801d17e:	6891      	ldr	r1, [r2, #8]
 801d180:	458c      	cmp	ip, r1
 801d182:	d1ce      	bne.n	801d122 <f_findfirst+0x10e>
 801d184:	e7e3      	b.n	801d14e <f_findfirst+0x13a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801d186:	4604      	mov	r4, r0
		Files[i].fs = dp->obj.fs;
 801d188:	ea4f 1804 	mov.w	r8, r4, lsl #4
		Files[i].ctr = 0;
 801d18c:	f04f 0900 	mov.w	r9, #0
 801d190:	f04f 0c01 	mov.w	ip, #1
		Files[i].fs = dp->obj.fs;
 801d194:	eb02 0008 	add.w	r0, r2, r8
 801d198:	f842 e008 	str.w	lr, [r2, r8]
		Files[i].clu = dp->obj.sclust;
 801d19c:	6043      	str	r3, [r0, #4]
		Files[i].ofs = dp->dptr;
 801d19e:	696b      	ldr	r3, [r5, #20]
		Files[i].ctr = 0;
 801d1a0:	f8a0 900c 	strh.w	r9, [r0, #12]
		Files[i].ofs = dp->dptr;
 801d1a4:	6083      	str	r3, [r0, #8]
 801d1a6:	e7dc      	b.n	801d162 <f_findfirst+0x14e>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801d1a8:	2401      	movs	r4, #1
 801d1aa:	e7ed      	b.n	801d188 <f_findfirst+0x174>
 801d1ac:	20006230 	.word	0x20006230

0801d1b0 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 801d1b0:	4b11      	ldr	r3, [pc, #68]	; (801d1f8 <FATFS_LinkDriver+0x48>)
 801d1b2:	7b9a      	ldrb	r2, [r3, #14]
 801d1b4:	2a01      	cmp	r2, #1
 801d1b6:	d901      	bls.n	801d1bc <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 801d1b8:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 801d1ba:	4770      	bx	lr
{
 801d1bc:	b4f0      	push	{r4, r5, r6, r7}
    disk.is_initialized[disk.nbr] = 0;
 801d1be:	f893 c00e 	ldrb.w	ip, [r3, #14]
 801d1c2:	2400      	movs	r4, #0
    disk.drv[disk.nbr] = drv;
 801d1c4:	7b9e      	ldrb	r6, [r3, #14]
    path[1] = ':';
 801d1c6:	273a      	movs	r7, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 801d1c8:	7b9d      	ldrb	r5, [r3, #14]
    disk.is_initialized[disk.nbr] = 0;
 801d1ca:	fa5f fc8c 	uxtb.w	ip, ip
    DiskNum = disk.nbr++;
 801d1ce:	7b9a      	ldrb	r2, [r3, #14]
    disk.drv[disk.nbr] = drv;
 801d1d0:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 801d1d4:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 801d1d6:	f803 400c 	strb.w	r4, [r3, ip]
    DiskNum = disk.nbr++;
 801d1da:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 801d1dc:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 801d1de:	732c      	strb	r4, [r5, #12]
    path[2] = '/';
 801d1e0:	252f      	movs	r5, #47	; 0x2f
    DiskNum = disk.nbr++;
 801d1e2:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 801d1e4:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 801d1e6:	b2c0      	uxtb	r0, r0
 801d1e8:	7398      	strb	r0, [r3, #14]
    path[3] = 0;
 801d1ea:	4620      	mov	r0, r4
 801d1ec:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 801d1ee:	704f      	strb	r7, [r1, #1]
    path[2] = '/';
 801d1f0:	708d      	strb	r5, [r1, #2]
    path[0] = DiskNum + '0';
 801d1f2:	700a      	strb	r2, [r1, #0]
}
 801d1f4:	bcf0      	pop	{r4, r5, r6, r7}
 801d1f6:	4770      	bx	lr
 801d1f8:	20006254 	.word	0x20006254

0801d1fc <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801d1fc:	287f      	cmp	r0, #127	; 0x7f
 801d1fe:	d918      	bls.n	801d232 <ff_convert+0x36>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 801d200:	b981      	cbnz	r1, 801d224 <ff_convert+0x28>
 801d202:	4b0e      	ldr	r3, [pc, #56]	; (801d23c <ff_convert+0x40>)
{
 801d204:	b410      	push	{r4}
 801d206:	e001      	b.n	801d20c <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801d208:	2980      	cmp	r1, #128	; 0x80
 801d20a:	d015      	beq.n	801d238 <ff_convert+0x3c>
				if (chr == Tbl[c]) break;
 801d20c:	f833 2b02 	ldrh.w	r2, [r3], #2
 801d210:	b28c      	uxth	r4, r1
 801d212:	3101      	adds	r1, #1
 801d214:	4282      	cmp	r2, r0
 801d216:	d1f7      	bne.n	801d208 <ff_convert+0xc>
 801d218:	f104 0080 	add.w	r0, r4, #128	; 0x80
 801d21c:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 801d21e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d222:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801d224:	28ff      	cmp	r0, #255	; 0xff
 801d226:	d805      	bhi.n	801d234 <ff_convert+0x38>
 801d228:	4b04      	ldr	r3, [pc, #16]	; (801d23c <ff_convert+0x40>)
 801d22a:	3880      	subs	r0, #128	; 0x80
 801d22c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801d230:	4770      	bx	lr
}
 801d232:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801d234:	2000      	movs	r0, #0
 801d236:	4770      	bx	lr
 801d238:	2000      	movs	r0, #0
 801d23a:	e7f0      	b.n	801d21e <ff_convert+0x22>
 801d23c:	08025f60 	.word	0x08025f60

0801d240 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801d240:	4b22      	ldr	r3, [pc, #136]	; (801d2cc <ff_wtoupper+0x8c>)
 801d242:	4a23      	ldr	r2, [pc, #140]	; (801d2d0 <ff_wtoupper+0x90>)
 801d244:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 801d248:	bf38      	it	cc
 801d24a:	4613      	movcc	r3, r2
{
 801d24c:	b470      	push	{r4, r5, r6}
 801d24e:	3304      	adds	r3, #4
 801d250:	e001      	b.n	801d256 <ff_wtoupper+0x16>
 801d252:	3304      	adds	r3, #4
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 801d254:	b1ca      	cbz	r2, 801d28a <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
 801d256:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801d25a:	461e      	mov	r6, r3
		if (!bc || chr < bc) break;
 801d25c:	b199      	cbz	r1, 801d286 <ff_wtoupper+0x46>
 801d25e:	4288      	cmp	r0, r1
 801d260:	d311      	bcc.n	801d286 <ff_wtoupper+0x46>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801d262:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 801d266:	b2d4      	uxtb	r4, r2
 801d268:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 801d26a:	1865      	adds	r5, r4, r1
 801d26c:	42a8      	cmp	r0, r5
 801d26e:	daf0      	bge.n	801d252 <ff_wtoupper+0x12>
			switch (cmd) {
 801d270:	2a08      	cmp	r2, #8
 801d272:	d808      	bhi.n	801d286 <ff_wtoupper+0x46>
 801d274:	e8df f002 	tbb	[pc, r2]
 801d278:	1d1a1410 	.word	0x1d1a1410
 801d27c:	05262320 	.word	0x05262320
 801d280:	0c          	.byte	0x0c
 801d281:	00          	.byte	0x00
			case 7: chr -= 80; break;				/* Shift -80 */
 801d282:	3850      	subs	r0, #80	; 0x50
 801d284:	b280      	uxth	r0, r0
	}

	return chr;
}
 801d286:	bc70      	pop	{r4, r5, r6}
 801d288:	4770      	bx	lr
		if (!cmd) p += nc;
 801d28a:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 801d28e:	e7de      	b.n	801d24e <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801d290:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 801d294:	b280      	uxth	r0, r0
 801d296:	e7f6      	b.n	801d286 <ff_wtoupper+0x46>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801d298:	1a41      	subs	r1, r0, r1
 801d29a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 801d29e:	e7f2      	b.n	801d286 <ff_wtoupper+0x46>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801d2a0:	1a41      	subs	r1, r0, r1
 801d2a2:	f001 0301 	and.w	r3, r1, #1
 801d2a6:	1ac0      	subs	r0, r0, r3
 801d2a8:	b280      	uxth	r0, r0
 801d2aa:	e7ec      	b.n	801d286 <ff_wtoupper+0x46>
			case 2: chr -= 16; break;				/* Shift -16 */
 801d2ac:	3810      	subs	r0, #16
 801d2ae:	b280      	uxth	r0, r0
 801d2b0:	e7e9      	b.n	801d286 <ff_wtoupper+0x46>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801d2b2:	3820      	subs	r0, #32
 801d2b4:	b280      	uxth	r0, r0
 801d2b6:	e7e6      	b.n	801d286 <ff_wtoupper+0x46>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801d2b8:	3830      	subs	r0, #48	; 0x30
 801d2ba:	b280      	uxth	r0, r0
 801d2bc:	e7e3      	b.n	801d286 <ff_wtoupper+0x46>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801d2be:	381a      	subs	r0, #26
 801d2c0:	b280      	uxth	r0, r0
 801d2c2:	e7e0      	b.n	801d286 <ff_wtoupper+0x46>
			case 6:	chr += 8; break;				/* Shift +8 */
 801d2c4:	3008      	adds	r0, #8
 801d2c6:	b280      	uxth	r0, r0
 801d2c8:	e7dd      	b.n	801d286 <ff_wtoupper+0x46>
 801d2ca:	bf00      	nop
 801d2cc:	08026254 	.word	0x08026254
 801d2d0:	08026060 	.word	0x08026060

0801d2d4 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801d2d4:	b510      	push	{r4, lr}
 801d2d6:	b082      	sub	sp, #8

    int ret;

    osSemaphoreDef(SEM);
 801d2d8:	2300      	movs	r3, #0
{
 801d2da:	460c      	mov	r4, r1
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801d2dc:	2101      	movs	r1, #1
    osSemaphoreDef(SEM);
 801d2de:	a802      	add	r0, sp, #8
 801d2e0:	f840 3d04 	str.w	r3, [r0, #-4]!
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801d2e4:	f000 f84a 	bl	801d37c <osSemaphoreCreate>
 801d2e8:	6020      	str	r0, [r4, #0]
    ret = (*sobj != NULL);

    return ret;
}
 801d2ea:	3000      	adds	r0, #0
 801d2ec:	bf18      	it	ne
 801d2ee:	2001      	movne	r0, #1
 801d2f0:	b002      	add	sp, #8
 801d2f2:	bd10      	pop	{r4, pc}

0801d2f4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801d2f4:	b508      	push	{r3, lr}
    osSemaphoreDelete (sobj);
 801d2f6:	f000 f8a9 	bl	801d44c <osSemaphoreDelete>
    return 1;
}
 801d2fa:	2001      	movs	r0, #1
 801d2fc:	bd08      	pop	{r3, pc}
 801d2fe:	bf00      	nop

0801d300 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801d300:	b508      	push	{r3, lr}
  int ret = 0;

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801d302:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d306:	f000 f84d 	bl	801d3a4 <osSemaphoreWait>
  {
    ret = 1;
  }

  return ret;
}
 801d30a:	fab0 f080 	clz	r0, r0
 801d30e:	0940      	lsrs	r0, r0, #5
 801d310:	bd08      	pop	{r3, pc}
 801d312:	bf00      	nop

0801d314 <ff_rel_grant>:

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
  osSemaphoreRelease(sobj);
 801d314:	f000 b872 	b.w	801d3fc <osSemaphoreRelease>

0801d318 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 801d318:	f002 b9c8 	b.w	801f6ac <malloc>

0801d31c <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 801d31c:	f002 b9ce 	b.w	801f6bc <free>

0801d320 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801d320:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 801d322:	f001 f9fd 	bl	801e720 <vTaskStartScheduler>
  
  return osOK;
}
 801d326:	2000      	movs	r0, #0
 801d328:	bd08      	pop	{r3, pc}
 801d32a:	bf00      	nop

0801d32c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 801d32c:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 801d32e:	f001 fdb1 	bl	801ee94 <xTaskGetSchedulerState>
  else
    return 1;
#else
	return (-1);
#endif	
}
 801d332:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 801d336:	bf18      	it	ne
 801d338:	2001      	movne	r0, #1
 801d33a:	bd08      	pop	{r3, pc}

0801d33c <osKernelSysTick>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801d33c:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 801d340:	b90b      	cbnz	r3, 801d346 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 801d342:	f001 baef 	b.w	801e924 <xTaskGetTickCount>
    return xTaskGetTickCountFromISR();
 801d346:	f001 baf3 	b.w	801e930 <xTaskGetTickCountFromISR>
 801d34a:	bf00      	nop

0801d34c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801d34c:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801d34e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 801d352:	b085      	sub	sp, #20
 801d354:	4602      	mov	r2, r0
 801d356:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 801d358:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801d35a:	ad03      	add	r5, sp, #12
 801d35c:	6811      	ldr	r1, [r2, #0]
    fpriority += (priority - osPriorityIdle);
 801d35e:	bf14      	ite	ne
 801d360:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801d362:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801d364:	8a12      	ldrh	r2, [r2, #16]
 801d366:	6840      	ldr	r0, [r0, #4]
 801d368:	e9cd 4500 	strd	r4, r5, [sp]
 801d36c:	f001 f89e 	bl	801e4ac <xTaskCreate>
 801d370:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801d372:	bf0c      	ite	eq
 801d374:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 801d376:	2000      	movne	r0, #0
}
 801d378:	b005      	add	sp, #20
 801d37a:	bd30      	pop	{r4, r5, pc}

0801d37c <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801d37c:	2901      	cmp	r1, #1
{ 
 801d37e:	4608      	mov	r0, r1
  if (count == 1) {
 801d380:	d001      	beq.n	801d386 <osSemaphoreCreate+0xa>
    vSemaphoreCreateBinary(sema);
    return sema;
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 801d382:	f000 b983 	b.w	801d68c <xQueueCreateCountingSemaphore>
{ 
 801d386:	b510      	push	{r4, lr}
    vSemaphoreCreateBinary(sema);
 801d388:	2203      	movs	r2, #3
 801d38a:	2100      	movs	r1, #0
 801d38c:	f000 f938 	bl	801d600 <xQueueGenericCreate>
 801d390:	4604      	mov	r4, r0
 801d392:	b120      	cbz	r0, 801d39e <osSemaphoreCreate+0x22>
 801d394:	2300      	movs	r3, #0
 801d396:	461a      	mov	r2, r3
 801d398:	4619      	mov	r1, r3
 801d39a:	f000 f999 	bl	801d6d0 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 801d39e:	4620      	mov	r0, r4
 801d3a0:	bd10      	pop	{r4, pc}
 801d3a2:	bf00      	nop

0801d3a4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 801d3a4:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801d3a6:	2400      	movs	r4, #0
{
 801d3a8:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 801d3aa:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 801d3ac:	b300      	cbz	r0, 801d3f0 <osSemaphoreWait+0x4c>
 801d3ae:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801d3b2:	b933      	cbnz	r3, 801d3c2 <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801d3b4:	f000 fdc2 	bl	801df3c <xQueueSemaphoreTake>
 801d3b8:	2801      	cmp	r0, #1
 801d3ba:	d116      	bne.n	801d3ea <osSemaphoreWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 801d3bc:	2000      	movs	r0, #0
}
 801d3be:	b002      	add	sp, #8
 801d3c0:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801d3c2:	aa01      	add	r2, sp, #4
 801d3c4:	4621      	mov	r1, r4
 801d3c6:	f000 ff4b 	bl	801e260 <xQueueReceiveFromISR>
 801d3ca:	2801      	cmp	r0, #1
 801d3cc:	d10d      	bne.n	801d3ea <osSemaphoreWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 801d3ce:	9b01      	ldr	r3, [sp, #4]
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	d0f3      	beq.n	801d3bc <osSemaphoreWait+0x18>
 801d3d4:	4b08      	ldr	r3, [pc, #32]	; (801d3f8 <osSemaphoreWait+0x54>)
 801d3d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d3da:	601a      	str	r2, [r3, #0]
 801d3dc:	f3bf 8f4f 	dsb	sy
 801d3e0:	f3bf 8f6f 	isb	sy
  return osOK;
 801d3e4:	4620      	mov	r0, r4
}
 801d3e6:	b002      	add	sp, #8
 801d3e8:	bd10      	pop	{r4, pc}
      return osErrorOS;
 801d3ea:	20ff      	movs	r0, #255	; 0xff
}
 801d3ec:	b002      	add	sp, #8
 801d3ee:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 801d3f0:	2080      	movs	r0, #128	; 0x80
}
 801d3f2:	b002      	add	sp, #8
 801d3f4:	bd10      	pop	{r4, pc}
 801d3f6:	bf00      	nop
 801d3f8:	e000ed04 	.word	0xe000ed04

0801d3fc <osSemaphoreRelease>:
 801d3fc:	b510      	push	{r4, lr}
 801d3fe:	2400      	movs	r4, #0
 801d400:	b082      	sub	sp, #8
 801d402:	9401      	str	r4, [sp, #4]
 801d404:	f3ef 8305 	mrs	r3, IPSR
 801d408:	b14b      	cbz	r3, 801d41e <osSemaphoreRelease+0x22>
 801d40a:	a901      	add	r1, sp, #4
 801d40c:	f000 fbc8 	bl	801dba0 <xQueueGiveFromISR>
 801d410:	2801      	cmp	r0, #1
 801d412:	d10a      	bne.n	801d42a <osSemaphoreRelease+0x2e>
 801d414:	9b01      	ldr	r3, [sp, #4]
 801d416:	b95b      	cbnz	r3, 801d430 <osSemaphoreRelease+0x34>
 801d418:	2000      	movs	r0, #0
 801d41a:	b002      	add	sp, #8
 801d41c:	bd10      	pop	{r4, pc}
 801d41e:	461a      	mov	r2, r3
 801d420:	4619      	mov	r1, r3
 801d422:	f000 f955 	bl	801d6d0 <xQueueGenericSend>
 801d426:	2801      	cmp	r0, #1
 801d428:	d0f6      	beq.n	801d418 <osSemaphoreRelease+0x1c>
 801d42a:	20ff      	movs	r0, #255	; 0xff
 801d42c:	b002      	add	sp, #8
 801d42e:	bd10      	pop	{r4, pc}
 801d430:	4b05      	ldr	r3, [pc, #20]	; (801d448 <osSemaphoreRelease+0x4c>)
 801d432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d436:	601a      	str	r2, [r3, #0]
 801d438:	f3bf 8f4f 	dsb	sy
 801d43c:	f3bf 8f6f 	isb	sy
 801d440:	4620      	mov	r0, r4
 801d442:	b002      	add	sp, #8
 801d444:	bd10      	pop	{r4, pc}
 801d446:	bf00      	nop
 801d448:	e000ed04 	.word	0xe000ed04

0801d44c <osSemaphoreDelete>:
 801d44c:	b510      	push	{r4, lr}
 801d44e:	f3ef 8405 	mrs	r4, IPSR
 801d452:	b91c      	cbnz	r4, 801d45c <osSemaphoreDelete+0x10>
 801d454:	f000 ff66 	bl	801e324 <vQueueDelete>
 801d458:	4620      	mov	r0, r4
 801d45a:	bd10      	pop	{r4, pc}
 801d45c:	2082      	movs	r0, #130	; 0x82
 801d45e:	bd10      	pop	{r4, pc}

0801d460 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801d460:	2200      	movs	r2, #0
 801d462:	e9d0 0100 	ldrd	r0, r1, [r0]
 801d466:	f000 b8cb 	b.w	801d600 <xQueueGenericCreate>
 801d46a:	bf00      	nop

0801d46c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801d46c:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 801d46e:	2400      	movs	r4, #0
{
 801d470:	b084      	sub	sp, #16
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 801d472:	42a2      	cmp	r2, r4
 801d474:	bf08      	it	eq
 801d476:	2201      	moveq	r2, #1
{
 801d478:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 801d47a:	9403      	str	r4, [sp, #12]
 801d47c:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 801d480:	b15b      	cbz	r3, 801d49a <osMessagePut+0x2e>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801d482:	4623      	mov	r3, r4
 801d484:	aa03      	add	r2, sp, #12
 801d486:	a901      	add	r1, sp, #4
 801d488:	f000 fae6 	bl	801da58 <xQueueGenericSendFromISR>
 801d48c:	2801      	cmp	r0, #1
 801d48e:	d109      	bne.n	801d4a4 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 801d490:	9b03      	ldr	r3, [sp, #12]
 801d492:	b953      	cbnz	r3, 801d4aa <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 801d494:	2000      	movs	r0, #0
}
 801d496:	b004      	add	sp, #16
 801d498:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801d49a:	a901      	add	r1, sp, #4
 801d49c:	f000 f918 	bl	801d6d0 <xQueueGenericSend>
 801d4a0:	2801      	cmp	r0, #1
 801d4a2:	d0f7      	beq.n	801d494 <osMessagePut+0x28>
      return osErrorOS;
 801d4a4:	20ff      	movs	r0, #255	; 0xff
}
 801d4a6:	b004      	add	sp, #16
 801d4a8:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 801d4aa:	4b05      	ldr	r3, [pc, #20]	; (801d4c0 <osMessagePut+0x54>)
 801d4ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d4b0:	601a      	str	r2, [r3, #0]
 801d4b2:	f3bf 8f4f 	dsb	sy
 801d4b6:	f3bf 8f6f 	isb	sy
  return osOK;
 801d4ba:	4620      	mov	r0, r4
}
 801d4bc:	b004      	add	sp, #16
 801d4be:	bd10      	pop	{r4, pc}
 801d4c0:	e000ed04 	.word	0xe000ed04

0801d4c4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801d4c4:	b530      	push	{r4, r5, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 801d4c6:	2300      	movs	r3, #0
{
 801d4c8:	b085      	sub	sp, #20
 801d4ca:	4604      	mov	r4, r0
  event.value.v = 0;
 801d4cc:	e9cd 3102 	strd	r3, r1, [sp, #8]
  
  if (queue_id == NULL) {
 801d4d0:	b369      	cbz	r1, 801d52e <osMessageGet+0x6a>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 801d4d2:	9300      	str	r3, [sp, #0]
 801d4d4:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801d4d8:	b99b      	cbnz	r3, 801d502 <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801d4da:	4608      	mov	r0, r1
 801d4dc:	a902      	add	r1, sp, #8
 801d4de:	4615      	mov	r5, r2
 801d4e0:	f000 fbbe 	bl	801dc60 <xQueueReceive>
 801d4e4:	2801      	cmp	r0, #1
 801d4e6:	d02d      	beq.n	801d544 <osMessageGet+0x80>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801d4e8:	2d00      	cmp	r5, #0
 801d4ea:	bf0c      	ite	eq
 801d4ec:	2300      	moveq	r3, #0
 801d4ee:	2340      	movne	r3, #64	; 0x40
 801d4f0:	9301      	str	r3, [sp, #4]
    }
  }
  
  return event;
 801d4f2:	ab04      	add	r3, sp, #16
 801d4f4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801d4f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801d4fc:	4620      	mov	r0, r4
 801d4fe:	b005      	add	sp, #20
 801d500:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801d502:	466a      	mov	r2, sp
 801d504:	4608      	mov	r0, r1
 801d506:	a902      	add	r1, sp, #8
 801d508:	f000 feaa 	bl	801e260 <xQueueReceiveFromISR>
      event.status = osOK;
 801d50c:	2801      	cmp	r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 801d50e:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 801d510:	bf0c      	ite	eq
 801d512:	2210      	moveq	r2, #16
 801d514:	2200      	movne	r2, #0
 801d516:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d0ea      	beq.n	801d4f2 <osMessageGet+0x2e>
 801d51c:	4b0b      	ldr	r3, [pc, #44]	; (801d54c <osMessageGet+0x88>)
 801d51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d522:	601a      	str	r2, [r3, #0]
 801d524:	f3bf 8f4f 	dsb	sy
 801d528:	f3bf 8f6f 	isb	sy
 801d52c:	e7e1      	b.n	801d4f2 <osMessageGet+0x2e>
    event.status = osErrorParameter;
 801d52e:	ab04      	add	r3, sp, #16
 801d530:	2280      	movs	r2, #128	; 0x80
 801d532:	f843 2d0c 	str.w	r2, [r3, #-12]!
    return event;
 801d536:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d53a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801d53e:	4620      	mov	r0, r4
 801d540:	b005      	add	sp, #20
 801d542:	bd30      	pop	{r4, r5, pc}
      event.status = osEventMessage;
 801d544:	2310      	movs	r3, #16
 801d546:	9301      	str	r3, [sp, #4]
 801d548:	e7d3      	b.n	801d4f2 <osMessageGet+0x2e>
 801d54a:	bf00      	nop
 801d54c:	e000ed04 	.word	0xe000ed04

0801d550 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 801d550:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 801d552:	f001 fc9f 	bl	801ee94 <xTaskGetSchedulerState>
 801d556:	2801      	cmp	r0, #1
 801d558:	d003      	beq.n	801d562 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 801d55a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 801d55e:	f001 bea9 	b.w	801f2b4 <xPortSysTickHandler>
}
 801d562:	bd08      	pop	{r3, pc}

0801d564 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801d564:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801d568:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801d56c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801d56e:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801d570:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801d572:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801d574:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801d578:	4770      	bx	lr
 801d57a:	bf00      	nop

0801d57c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 801d57c:	2300      	movs	r3, #0
 801d57e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801d580:	4770      	bx	lr
 801d582:	bf00      	nop

0801d584 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 801d584:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 801d586:	6802      	ldr	r2, [r0, #0]
{
 801d588:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801d58a:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 801d58c:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801d58e:	e9c1 3401 	strd	r3, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801d592:	689c      	ldr	r4, [r3, #8]
 801d594:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801d596:	6099      	str	r1, [r3, #8]
}
 801d598:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 801d59c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801d59e:	6002      	str	r2, [r0, #0]
}
 801d5a0:	4770      	bx	lr
 801d5a2:	bf00      	nop

0801d5a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801d5a4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801d5a6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801d5a8:	1c6b      	adds	r3, r5, #1
 801d5aa:	d011      	beq.n	801d5d0 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801d5ac:	f100 0208 	add.w	r2, r0, #8
 801d5b0:	e000      	b.n	801d5b4 <vListInsert+0x10>
 801d5b2:	461a      	mov	r2, r3
 801d5b4:	6853      	ldr	r3, [r2, #4]
 801d5b6:	681c      	ldr	r4, [r3, #0]
 801d5b8:	42ac      	cmp	r4, r5
 801d5ba:	d9fa      	bls.n	801d5b2 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 801d5bc:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 801d5be:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 801d5c0:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801d5c2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801d5c4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 801d5c6:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 801d5c8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801d5ca:	6004      	str	r4, [r0, #0]
}
 801d5cc:	bc30      	pop	{r4, r5}
 801d5ce:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 801d5d0:	6902      	ldr	r2, [r0, #16]
 801d5d2:	6853      	ldr	r3, [r2, #4]
 801d5d4:	e7f2      	b.n	801d5bc <vListInsert+0x18>
 801d5d6:	bf00      	nop

0801d5d8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 801d5d8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801d5da:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
{
 801d5de:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801d5e0:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801d5e2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801d5e4:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 801d5e6:	4284      	cmp	r4, r0

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 801d5e8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801d5ec:	604a      	str	r2, [r1, #4]
	( pxList->uxNumberOfItems )--;
 801d5ee:	681a      	ldr	r2, [r3, #0]
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801d5f0:	bf08      	it	eq
 801d5f2:	6059      	streq	r1, [r3, #4]
	pxItemToRemove->pvContainer = NULL;
 801d5f4:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 801d5f6:	3a01      	subs	r2, #1
	pxItemToRemove->pvContainer = NULL;
 801d5f8:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 801d5fa:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 801d5fc:	6818      	ldr	r0, [r3, #0]
}
 801d5fe:	4770      	bx	lr

0801d600 <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801d600:	b950      	cbnz	r0, 801d618 <xQueueGenericCreate+0x18>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801d602:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d606:	b672      	cpsid	i
 801d608:	f383 8811 	msr	BASEPRI, r3
 801d60c:	f3bf 8f6f 	isb	sy
 801d610:	f3bf 8f4f 	dsb	sy
 801d614:	b662      	cpsie	i
 801d616:	e7fe      	b.n	801d616 <xQueueGenericCreate+0x16>
	{
 801d618:	b570      	push	{r4, r5, r6, lr}
 801d61a:	4606      	mov	r6, r0
 801d61c:	460d      	mov	r5, r1

		if( uxItemSize == ( UBaseType_t ) 0 )
 801d61e:	b151      	cbz	r1, 801d636 <xQueueGenericCreate+0x36>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801d620:	fb01 f000 	mul.w	r0, r1, r0
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801d624:	3048      	adds	r0, #72	; 0x48
 801d626:	f001 ff3d 	bl	801f4a4 <pvPortMalloc>

		if( pxNewQueue != NULL )
 801d62a:	4604      	mov	r4, r0
 801d62c:	b358      	cbz	r0, 801d686 <xQueueGenericCreate+0x86>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 801d62e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801d632:	6003      	str	r3, [r0, #0]
 801d634:	e005      	b.n	801d642 <xQueueGenericCreate+0x42>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801d636:	2048      	movs	r0, #72	; 0x48
 801d638:	f001 ff34 	bl	801f4a4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 801d63c:	4604      	mov	r4, r0
 801d63e:	b310      	cbz	r0, 801d686 <xQueueGenericCreate+0x86>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801d640:	6024      	str	r4, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
 801d642:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 801d646:	f001 fdc5 	bl	801f1d4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801d64a:	6822      	ldr	r2, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
 801d64c:	25ff      	movs	r5, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801d64e:	2000      	movs	r0, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801d650:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801d652:	63a0      	str	r0, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801d654:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
 801d658:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801d65c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801d660:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 801d664:	fb03 f301 	mul.w	r3, r3, r1
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801d668:	1a59      	subs	r1, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801d66a:	4413      	add	r3, r2
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801d66c:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801d66e:	6063      	str	r3, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801d670:	60e2      	str	r2, [r4, #12]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801d672:	f7ff ff77 	bl	801d564 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801d676:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801d67a:	f7ff ff73 	bl	801d564 <vListInitialise>
	taskEXIT_CRITICAL();
 801d67e:	f001 fdcf 	bl	801f220 <vPortExitCritical>
	}
 801d682:	4620      	mov	r0, r4
 801d684:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801d686:	2400      	movs	r4, #0
	}
 801d688:	4620      	mov	r0, r4
 801d68a:	bd70      	pop	{r4, r5, r6, pc}

0801d68c <xQueueCreateCountingSemaphore>:

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801d68c:	b950      	cbnz	r0, 801d6a4 <xQueueCreateCountingSemaphore+0x18>
 801d68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d692:	b672      	cpsid	i
 801d694:	f383 8811 	msr	BASEPRI, r3
 801d698:	f3bf 8f6f 	isb	sy
 801d69c:	f3bf 8f4f 	dsb	sy
 801d6a0:	b662      	cpsie	i
 801d6a2:	e7fe      	b.n	801d6a2 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 801d6a4:	4288      	cmp	r0, r1
 801d6a6:	d20a      	bcs.n	801d6be <xQueueCreateCountingSemaphore+0x32>
 801d6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d6ac:	b672      	cpsid	i
 801d6ae:	f383 8811 	msr	BASEPRI, r3
 801d6b2:	f3bf 8f6f 	isb	sy
 801d6b6:	f3bf 8f4f 	dsb	sy
 801d6ba:	b662      	cpsie	i
 801d6bc:	e7fe      	b.n	801d6bc <xQueueCreateCountingSemaphore+0x30>
	{
 801d6be:	b510      	push	{r4, lr}

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801d6c0:	2202      	movs	r2, #2
 801d6c2:	460c      	mov	r4, r1
 801d6c4:	2100      	movs	r1, #0
 801d6c6:	f7ff ff9b 	bl	801d600 <xQueueGenericCreate>

		if( xHandle != NULL )
 801d6ca:	b100      	cbz	r0, 801d6ce <xQueueCreateCountingSemaphore+0x42>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801d6cc:	6384      	str	r4, [r0, #56]	; 0x38
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
	}
 801d6ce:	bd10      	pop	{r4, pc}

0801d6d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801d6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6d4:	b085      	sub	sp, #20
 801d6d6:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 801d6d8:	2800      	cmp	r0, #0
 801d6da:	f000 811a 	beq.w	801d912 <xQueueGenericSend+0x242>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801d6de:	2900      	cmp	r1, #0
 801d6e0:	f000 8108 	beq.w	801d8f4 <xQueueGenericSend+0x224>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801d6e4:	2b02      	cmp	r3, #2
 801d6e6:	d10d      	bne.n	801d704 <xQueueGenericSend+0x34>
 801d6e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d6ea:	2a01      	cmp	r2, #1
 801d6ec:	d00a      	beq.n	801d704 <xQueueGenericSend+0x34>
 801d6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d6f2:	b672      	cpsid	i
 801d6f4:	f383 8811 	msr	BASEPRI, r3
 801d6f8:	f3bf 8f6f 	isb	sy
 801d6fc:	f3bf 8f4f 	dsb	sy
 801d700:	b662      	cpsie	i
 801d702:	e7fe      	b.n	801d702 <xQueueGenericSend+0x32>
 801d704:	4604      	mov	r4, r0
 801d706:	461f      	mov	r7, r3
 801d708:	4688      	mov	r8, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801d70a:	f001 fbc3 	bl	801ee94 <xTaskGetSchedulerState>
 801d70e:	b960      	cbnz	r0, 801d72a <xQueueGenericSend+0x5a>
 801d710:	9b01      	ldr	r3, [sp, #4]
 801d712:	b153      	cbz	r3, 801d72a <xQueueGenericSend+0x5a>
 801d714:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d718:	b672      	cpsid	i
 801d71a:	f383 8811 	msr	BASEPRI, r3
 801d71e:	f3bf 8f6f 	isb	sy
 801d722:	f3bf 8f4f 	dsb	sy
 801d726:	b662      	cpsie	i
 801d728:	e7fe      	b.n	801d728 <xQueueGenericSend+0x58>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801d72a:	f001 fd53 	bl	801f1d4 <vPortEnterCritical>
 801d72e:	f1a7 0602 	sub.w	r6, r7, #2
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801d732:	6ba2      	ldr	r2, [r4, #56]	; 0x38
{
 801d734:	2500      	movs	r5, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801d736:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d738:	fab6 f686 	clz	r6, r6

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 801d73c:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801d73e:	429a      	cmp	r2, r3
 801d740:	ea4f 1656 	mov.w	r6, r6, lsr #5
 801d744:	d371      	bcc.n	801d82a <xQueueGenericSend+0x15a>
 801d746:	2e00      	cmp	r6, #0
 801d748:	d16f      	bne.n	801d82a <xQueueGenericSend+0x15a>
				if( xTicksToWait == ( TickType_t ) 0 )
 801d74a:	9b01      	ldr	r3, [sp, #4]
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	f000 80f4 	beq.w	801d93a <xQueueGenericSend+0x26a>
				else if( xEntryTimeSet == pdFALSE )
 801d752:	b915      	cbnz	r5, 801d75a <xQueueGenericSend+0x8a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801d754:	a802      	add	r0, sp, #8
 801d756:	f001 fb41 	bl	801eddc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801d75a:	f001 fd61 	bl	801f220 <vPortExitCritical>
		vTaskSuspendAll();
 801d75e:	f001 f8d9 	bl	801e914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801d762:	f001 fd37 	bl	801f1d4 <vPortEnterCritical>
 801d766:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801d76a:	2bff      	cmp	r3, #255	; 0xff
 801d76c:	d101      	bne.n	801d772 <xQueueGenericSend+0xa2>
 801d76e:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 801d772:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801d776:	2bff      	cmp	r3, #255	; 0xff
 801d778:	d101      	bne.n	801d77e <xQueueGenericSend+0xae>
 801d77a:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 801d77e:	f001 fd4f 	bl	801f220 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801d782:	a901      	add	r1, sp, #4
 801d784:	a802      	add	r0, sp, #8
 801d786:	f001 fb35 	bl	801edf4 <xTaskCheckForTimeOut>
 801d78a:	2800      	cmp	r0, #0
 801d78c:	f040 8115 	bne.w	801d9ba <xQueueGenericSend+0x2ea>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801d790:	f001 fd20 	bl	801f1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801d794:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801d796:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d798:	429a      	cmp	r2, r3
 801d79a:	d05a      	beq.n	801d852 <xQueueGenericSend+0x182>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 801d79c:	f001 fd40 	bl	801f220 <vPortExitCritical>
	taskENTER_CRITICAL();
 801d7a0:	f001 fd18 	bl	801f1d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801d7a4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 801d7a8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801d7aa:	2d00      	cmp	r5, #0
 801d7ac:	dd11      	ble.n	801d7d2 <xQueueGenericSend+0x102>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d7ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d7b0:	b17b      	cbz	r3, 801d7d2 <xQueueGenericSend+0x102>
 801d7b2:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 801d7b6:	e001      	b.n	801d7bc <xQueueGenericSend+0xec>
 801d7b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d7ba:	b153      	cbz	r3, 801d7d2 <xQueueGenericSend+0x102>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801d7bc:	4650      	mov	r0, sl
 801d7be:	f001 fac5 	bl	801ed4c <xTaskRemoveFromEventList>
 801d7c2:	b108      	cbz	r0, 801d7c8 <xQueueGenericSend+0xf8>
						vTaskMissedYield();
 801d7c4:	f001 fb60 	bl	801ee88 <vTaskMissedYield>
 801d7c8:	3d01      	subs	r5, #1
 801d7ca:	b2eb      	uxtb	r3, r5
 801d7cc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	d1f2      	bne.n	801d7b8 <xQueueGenericSend+0xe8>
		pxQueue->cTxLock = queueUNLOCKED;
 801d7d2:	23ff      	movs	r3, #255	; 0xff
 801d7d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 801d7d8:	f001 fd22 	bl	801f220 <vPortExitCritical>
	taskENTER_CRITICAL();
 801d7dc:	f001 fcfa 	bl	801f1d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801d7e0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 801d7e4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801d7e6:	2d00      	cmp	r5, #0
 801d7e8:	dd11      	ble.n	801d80e <xQueueGenericSend+0x13e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801d7ea:	6923      	ldr	r3, [r4, #16]
 801d7ec:	b17b      	cbz	r3, 801d80e <xQueueGenericSend+0x13e>
 801d7ee:	f104 0a10 	add.w	sl, r4, #16
 801d7f2:	e001      	b.n	801d7f8 <xQueueGenericSend+0x128>
 801d7f4:	6923      	ldr	r3, [r4, #16]
 801d7f6:	b153      	cbz	r3, 801d80e <xQueueGenericSend+0x13e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801d7f8:	4650      	mov	r0, sl
 801d7fa:	f001 faa7 	bl	801ed4c <xTaskRemoveFromEventList>
 801d7fe:	b108      	cbz	r0, 801d804 <xQueueGenericSend+0x134>
					vTaskMissedYield();
 801d800:	f001 fb42 	bl	801ee88 <vTaskMissedYield>
 801d804:	3d01      	subs	r5, #1
 801d806:	b2eb      	uxtb	r3, r5
 801d808:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	d1f2      	bne.n	801d7f4 <xQueueGenericSend+0x124>
		pxQueue->cRxLock = queueUNLOCKED;
 801d80e:	23ff      	movs	r3, #255	; 0xff
 801d810:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 801d814:	f001 fd04 	bl	801f220 <vPortExitCritical>
				( void ) xTaskResumeAll();
 801d818:	f001 f940 	bl	801ea9c <xTaskResumeAll>
		taskENTER_CRITICAL();
 801d81c:	f001 fcda 	bl	801f1d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801d820:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801d822:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d824:	2501      	movs	r5, #1
 801d826:	429a      	cmp	r2, r3
 801d828:	d28d      	bcs.n	801d746 <xQueueGenericSend+0x76>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801d82a:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801d82c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801d82e:	2a00      	cmp	r2, #0
 801d830:	f040 8087 	bne.w	801d942 <xQueueGenericSend+0x272>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801d834:	6826      	ldr	r6, [r4, #0]
 801d836:	3501      	adds	r5, #1
 801d838:	2e00      	cmp	r6, #0
 801d83a:	d075      	beq.n	801d928 <xQueueGenericSend+0x258>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801d83c:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d83e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d840:	2b00      	cmp	r3, #0
 801d842:	f040 8093 	bne.w	801d96c <xQueueGenericSend+0x29c>
				taskEXIT_CRITICAL();
 801d846:	f001 fceb 	bl	801f220 <vPortExitCritical>
				return pdPASS;
 801d84a:	2001      	movs	r0, #1
}
 801d84c:	b005      	add	sp, #20
 801d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801d852:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 801d856:	f001 fce3 	bl	801f220 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801d85a:	9901      	ldr	r1, [sp, #4]
 801d85c:	4650      	mov	r0, sl
 801d85e:	f001 fa23 	bl	801eca8 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 801d862:	f001 fcb7 	bl	801f1d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801d866:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801d86a:	fa4f fb83 	sxtb.w	fp, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801d86e:	f1bb 0f00 	cmp.w	fp, #0
 801d872:	dd13      	ble.n	801d89c <xQueueGenericSend+0x1cc>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d874:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d876:	b18a      	cbz	r2, 801d89c <xQueueGenericSend+0x1cc>
 801d878:	f104 0524 	add.w	r5, r4, #36	; 0x24
 801d87c:	e001      	b.n	801d882 <xQueueGenericSend+0x1b2>
 801d87e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d880:	b162      	cbz	r2, 801d89c <xQueueGenericSend+0x1cc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801d882:	4628      	mov	r0, r5
 801d884:	f001 fa62 	bl	801ed4c <xTaskRemoveFromEventList>
 801d888:	b108      	cbz	r0, 801d88e <xQueueGenericSend+0x1be>
						vTaskMissedYield();
 801d88a:	f001 fafd 	bl	801ee88 <vTaskMissedYield>
 801d88e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801d892:	b2db      	uxtb	r3, r3
 801d894:	fa4f fb83 	sxtb.w	fp, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801d898:	2b00      	cmp	r3, #0
 801d89a:	d1f0      	bne.n	801d87e <xQueueGenericSend+0x1ae>
		pxQueue->cTxLock = queueUNLOCKED;
 801d89c:	23ff      	movs	r3, #255	; 0xff
 801d89e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 801d8a2:	f001 fcbd 	bl	801f220 <vPortExitCritical>
	taskENTER_CRITICAL();
 801d8a6:	f001 fc95 	bl	801f1d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801d8aa:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 801d8ae:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801d8b0:	2d00      	cmp	r5, #0
 801d8b2:	dc0a      	bgt.n	801d8ca <xQueueGenericSend+0x1fa>
 801d8b4:	e00c      	b.n	801d8d0 <xQueueGenericSend+0x200>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801d8b6:	4650      	mov	r0, sl
 801d8b8:	f001 fa48 	bl	801ed4c <xTaskRemoveFromEventList>
 801d8bc:	b108      	cbz	r0, 801d8c2 <xQueueGenericSend+0x1f2>
					vTaskMissedYield();
 801d8be:	f001 fae3 	bl	801ee88 <vTaskMissedYield>
 801d8c2:	3d01      	subs	r5, #1
 801d8c4:	b2eb      	uxtb	r3, r5
 801d8c6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801d8c8:	b113      	cbz	r3, 801d8d0 <xQueueGenericSend+0x200>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801d8ca:	6923      	ldr	r3, [r4, #16]
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	d1f2      	bne.n	801d8b6 <xQueueGenericSend+0x1e6>
		pxQueue->cRxLock = queueUNLOCKED;
 801d8d0:	23ff      	movs	r3, #255	; 0xff
 801d8d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 801d8d6:	f001 fca3 	bl	801f220 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 801d8da:	f001 f8df 	bl	801ea9c <xTaskResumeAll>
 801d8de:	2800      	cmp	r0, #0
 801d8e0:	d19c      	bne.n	801d81c <xQueueGenericSend+0x14c>
					portYIELD_WITHIN_API();
 801d8e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801d8e6:	4a5b      	ldr	r2, [pc, #364]	; (801da54 <xQueueGenericSend+0x384>)
 801d8e8:	6013      	str	r3, [r2, #0]
 801d8ea:	f3bf 8f4f 	dsb	sy
 801d8ee:	f3bf 8f6f 	isb	sy
 801d8f2:	e793      	b.n	801d81c <xQueueGenericSend+0x14c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801d8f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801d8f6:	2a00      	cmp	r2, #0
 801d8f8:	f43f aef4 	beq.w	801d6e4 <xQueueGenericSend+0x14>
 801d8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d900:	b672      	cpsid	i
 801d902:	f383 8811 	msr	BASEPRI, r3
 801d906:	f3bf 8f6f 	isb	sy
 801d90a:	f3bf 8f4f 	dsb	sy
 801d90e:	b662      	cpsie	i
 801d910:	e7fe      	b.n	801d910 <xQueueGenericSend+0x240>
 801d912:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d916:	b672      	cpsid	i
 801d918:	f383 8811 	msr	BASEPRI, r3
 801d91c:	f3bf 8f6f 	isb	sy
 801d920:	f3bf 8f4f 	dsb	sy
 801d924:	b662      	cpsie	i
 801d926:	e7fe      	b.n	801d926 <xQueueGenericSend+0x256>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801d928:	6860      	ldr	r0, [r4, #4]
 801d92a:	f001 fb1b 	bl	801ef64 <xTaskPriorityDisinherit>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801d92e:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d930:	6a63      	ldr	r3, [r4, #36]	; 0x24
				pxQueue->pxMutexHolder = NULL;
 801d932:	6066      	str	r6, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d934:	b9d3      	cbnz	r3, 801d96c <xQueueGenericSend+0x29c>
					else if( xYieldRequired != pdFALSE )
 801d936:	bb00      	cbnz	r0, 801d97a <xQueueGenericSend+0x2aa>
 801d938:	e785      	b.n	801d846 <xQueueGenericSend+0x176>
					taskEXIT_CRITICAL();
 801d93a:	f001 fc71 	bl	801f220 <vPortExitCritical>
					return errQUEUE_FULL;
 801d93e:	4630      	mov	r0, r6
 801d940:	e784      	b.n	801d84c <xQueueGenericSend+0x17c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801d942:	4641      	mov	r1, r8
	else if( xPosition == queueSEND_TO_BACK )
 801d944:	bb17      	cbnz	r7, 801d98c <xQueueGenericSend+0x2bc>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801d946:	68a0      	ldr	r0, [r4, #8]
 801d948:	3501      	adds	r5, #1
 801d94a:	f001 febf 	bl	801f6cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801d94e:	68a3      	ldr	r3, [r4, #8]
 801d950:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801d952:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801d954:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801d956:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801d958:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801d95a:	f4ff af6f 	bcc.w	801d83c <xQueueGenericSend+0x16c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801d95e:	63a5      	str	r5, [r4, #56]	; 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801d960:	6822      	ldr	r2, [r4, #0]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d962:	6a63      	ldr	r3, [r4, #36]	; 0x24
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801d964:	60a2      	str	r2, [r4, #8]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d966:	2b00      	cmp	r3, #0
 801d968:	f43f af6d 	beq.w	801d846 <xQueueGenericSend+0x176>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801d96c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801d970:	f001 f9ec 	bl	801ed4c <xTaskRemoveFromEventList>
 801d974:	2800      	cmp	r0, #0
 801d976:	f43f af66 	beq.w	801d846 <xQueueGenericSend+0x176>
						queueYIELD_IF_USING_PREEMPTION();
 801d97a:	4b36      	ldr	r3, [pc, #216]	; (801da54 <xQueueGenericSend+0x384>)
 801d97c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d980:	601a      	str	r2, [r3, #0]
 801d982:	f3bf 8f4f 	dsb	sy
 801d986:	f3bf 8f6f 	isb	sy
 801d98a:	e75c      	b.n	801d846 <xQueueGenericSend+0x176>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801d98c:	68e0      	ldr	r0, [r4, #12]
 801d98e:	f001 fe9d 	bl	801f6cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801d992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d994:	68e2      	ldr	r2, [r4, #12]
 801d996:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801d998:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801d99a:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801d99c:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801d99e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801d9a0:	d202      	bcs.n	801d9a8 <xQueueGenericSend+0x2d8>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801d9a2:	6862      	ldr	r2, [r4, #4]
 801d9a4:	4413      	add	r3, r2
 801d9a6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801d9a8:	2f02      	cmp	r7, #2
 801d9aa:	d020      	beq.n	801d9ee <xQueueGenericSend+0x31e>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801d9ac:	3501      	adds	r5, #1
 801d9ae:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d9b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	f43f af47 	beq.w	801d846 <xQueueGenericSend+0x176>
 801d9b8:	e7d8      	b.n	801d96c <xQueueGenericSend+0x29c>
	taskENTER_CRITICAL();
 801d9ba:	f001 fc0b 	bl	801f1d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801d9be:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 801d9c2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801d9c4:	2d00      	cmp	r5, #0
 801d9c6:	dd1c      	ble.n	801da02 <xQueueGenericSend+0x332>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d9c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d9ca:	b1d3      	cbz	r3, 801da02 <xQueueGenericSend+0x332>
 801d9cc:	f104 0624 	add.w	r6, r4, #36	; 0x24
 801d9d0:	e005      	b.n	801d9de <xQueueGenericSend+0x30e>
 801d9d2:	3d01      	subs	r5, #1
 801d9d4:	b2eb      	uxtb	r3, r5
 801d9d6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801d9d8:	b19b      	cbz	r3, 801da02 <xQueueGenericSend+0x332>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d9da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d9dc:	b18b      	cbz	r3, 801da02 <xQueueGenericSend+0x332>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801d9de:	4630      	mov	r0, r6
 801d9e0:	f001 f9b4 	bl	801ed4c <xTaskRemoveFromEventList>
 801d9e4:	2800      	cmp	r0, #0
 801d9e6:	d0f4      	beq.n	801d9d2 <xQueueGenericSend+0x302>
						vTaskMissedYield();
 801d9e8:	f001 fa4e 	bl	801ee88 <vTaskMissedYield>
 801d9ec:	e7f1      	b.n	801d9d2 <xQueueGenericSend+0x302>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801d9ee:	2d00      	cmp	r5, #0
 801d9f0:	f47f af24 	bne.w	801d83c <xQueueGenericSend+0x16c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801d9f4:	2301      	movs	r3, #1
 801d9f6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d9f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d9fa:	2b00      	cmp	r3, #0
 801d9fc:	f43f af23 	beq.w	801d846 <xQueueGenericSend+0x176>
 801da00:	e7b4      	b.n	801d96c <xQueueGenericSend+0x29c>
		pxQueue->cTxLock = queueUNLOCKED;
 801da02:	23ff      	movs	r3, #255	; 0xff
 801da04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 801da08:	f001 fc0a 	bl	801f220 <vPortExitCritical>
	taskENTER_CRITICAL();
 801da0c:	f001 fbe2 	bl	801f1d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801da10:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 801da14:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801da16:	2d00      	cmp	r5, #0
 801da18:	dd12      	ble.n	801da40 <xQueueGenericSend+0x370>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801da1a:	6923      	ldr	r3, [r4, #16]
 801da1c:	b183      	cbz	r3, 801da40 <xQueueGenericSend+0x370>
 801da1e:	f104 0610 	add.w	r6, r4, #16
 801da22:	e005      	b.n	801da30 <xQueueGenericSend+0x360>
 801da24:	3d01      	subs	r5, #1
 801da26:	b2eb      	uxtb	r3, r5
 801da28:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801da2a:	b14b      	cbz	r3, 801da40 <xQueueGenericSend+0x370>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801da2c:	6923      	ldr	r3, [r4, #16]
 801da2e:	b13b      	cbz	r3, 801da40 <xQueueGenericSend+0x370>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801da30:	4630      	mov	r0, r6
 801da32:	f001 f98b 	bl	801ed4c <xTaskRemoveFromEventList>
 801da36:	2800      	cmp	r0, #0
 801da38:	d0f4      	beq.n	801da24 <xQueueGenericSend+0x354>
					vTaskMissedYield();
 801da3a:	f001 fa25 	bl	801ee88 <vTaskMissedYield>
 801da3e:	e7f1      	b.n	801da24 <xQueueGenericSend+0x354>
		pxQueue->cRxLock = queueUNLOCKED;
 801da40:	23ff      	movs	r3, #255	; 0xff
 801da42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 801da46:	f001 fbeb 	bl	801f220 <vPortExitCritical>
			( void ) xTaskResumeAll();
 801da4a:	f001 f827 	bl	801ea9c <xTaskResumeAll>
			return errQUEUE_FULL;
 801da4e:	2000      	movs	r0, #0
 801da50:	e6fc      	b.n	801d84c <xQueueGenericSend+0x17c>
 801da52:	bf00      	nop
 801da54:	e000ed04 	.word	0xe000ed04

0801da58 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 801da58:	2800      	cmp	r0, #0
 801da5a:	d040      	beq.n	801dade <xQueueGenericSendFromISR+0x86>
{
 801da5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801da60:	b379      	cbz	r1, 801dac2 <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801da62:	2b02      	cmp	r3, #2
 801da64:	d10d      	bne.n	801da82 <xQueueGenericSendFromISR+0x2a>
 801da66:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 801da68:	2c01      	cmp	r4, #1
 801da6a:	d00a      	beq.n	801da82 <xQueueGenericSendFromISR+0x2a>
 801da6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801da70:	b672      	cpsid	i
 801da72:	f383 8811 	msr	BASEPRI, r3
 801da76:	f3bf 8f6f 	isb	sy
 801da7a:	f3bf 8f4f 	dsb	sy
 801da7e:	b662      	cpsie	i
 801da80:	e7fe      	b.n	801da80 <xQueueGenericSendFromISR+0x28>
 801da82:	4604      	mov	r4, r0
 801da84:	4699      	mov	r9, r3
 801da86:	4690      	mov	r8, r2
 801da88:	468a      	mov	sl, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801da8a:	f001 fcb1 	bl	801f3f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801da8e:	f3ef 8611 	mrs	r6, BASEPRI
 801da92:	f04f 0350 	mov.w	r3, #80	; 0x50
 801da96:	b672      	cpsid	i
 801da98:	f383 8811 	msr	BASEPRI, r3
 801da9c:	f3bf 8f6f 	isb	sy
 801daa0:	f3bf 8f4f 	dsb	sy
 801daa4:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801daa6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801daa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801daaa:	429a      	cmp	r2, r3
 801daac:	d322      	bcc.n	801daf4 <xQueueGenericSendFromISR+0x9c>
 801daae:	f1a9 0002 	sub.w	r0, r9, #2
 801dab2:	fab0 f080 	clz	r0, r0
 801dab6:	0940      	lsrs	r0, r0, #5
 801dab8:	b9e0      	cbnz	r0, 801daf4 <xQueueGenericSendFromISR+0x9c>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801daba:	f386 8811 	msr	BASEPRI, r6
}
 801dabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801dac2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801dac4:	2c00      	cmp	r4, #0
 801dac6:	d0cc      	beq.n	801da62 <xQueueGenericSendFromISR+0xa>
	__asm volatile
 801dac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dacc:	b672      	cpsid	i
 801dace:	f383 8811 	msr	BASEPRI, r3
 801dad2:	f3bf 8f6f 	isb	sy
 801dad6:	f3bf 8f4f 	dsb	sy
 801dada:	b662      	cpsie	i
 801dadc:	e7fe      	b.n	801dadc <xQueueGenericSendFromISR+0x84>
 801dade:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dae2:	b672      	cpsid	i
 801dae4:	f383 8811 	msr	BASEPRI, r3
 801dae8:	f3bf 8f6f 	isb	sy
 801daec:	f3bf 8f4f 	dsb	sy
 801daf0:	b662      	cpsie	i
 801daf2:	e7fe      	b.n	801daf2 <xQueueGenericSendFromISR+0x9a>
			const int8_t cTxLock = pxQueue->cTxLock;
 801daf4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801daf8:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cTxLock = pxQueue->cTxLock;
 801dafa:	b26d      	sxtb	r5, r5
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801dafc:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801dafe:	b9ba      	cbnz	r2, 801db30 <xQueueGenericSendFromISR+0xd8>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801db00:	f8d4 9000 	ldr.w	r9, [r4]
 801db04:	f1b9 0f00 	cmp.w	r9, #0
 801db08:	d00c      	beq.n	801db24 <xQueueGenericSendFromISR+0xcc>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801db0a:	3701      	adds	r7, #1
			if( cTxLock == queueUNLOCKED )
 801db0c:	1c6b      	adds	r3, r5, #1
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801db0e:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 801db10:	d01f      	beq.n	801db52 <xQueueGenericSendFromISR+0xfa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801db12:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 801db14:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801db16:	b25b      	sxtb	r3, r3
 801db18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 801db1c:	f386 8811 	msr	BASEPRI, r6
}
 801db20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801db24:	6860      	ldr	r0, [r4, #4]
 801db26:	f001 fa1d 	bl	801ef64 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 801db2a:	f8c4 9004 	str.w	r9, [r4, #4]
 801db2e:	e7ec      	b.n	801db0a <xQueueGenericSendFromISR+0xb2>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801db30:	4651      	mov	r1, sl
	else if( xPosition == queueSEND_TO_BACK )
 801db32:	f1b9 0f00 	cmp.w	r9, #0
 801db36:	d110      	bne.n	801db5a <xQueueGenericSendFromISR+0x102>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801db38:	68a0      	ldr	r0, [r4, #8]
 801db3a:	f001 fdc7 	bl	801f6cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801db3e:	68a3      	ldr	r3, [r4, #8]
 801db40:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801db42:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801db44:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801db46:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801db48:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801db4a:	d3de      	bcc.n	801db0a <xQueueGenericSendFromISR+0xb2>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801db4c:	6823      	ldr	r3, [r4, #0]
 801db4e:	60a3      	str	r3, [r4, #8]
 801db50:	e7db      	b.n	801db0a <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801db52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801db54:	b9b3      	cbnz	r3, 801db84 <xQueueGenericSendFromISR+0x12c>
			xReturn = pdPASS;
 801db56:	2001      	movs	r0, #1
 801db58:	e7af      	b.n	801daba <xQueueGenericSendFromISR+0x62>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801db5a:	68e0      	ldr	r0, [r4, #12]
 801db5c:	f001 fdb6 	bl	801f6cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801db60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801db62:	68e2      	ldr	r2, [r4, #12]
 801db64:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801db66:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801db68:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801db6a:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801db6c:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801db6e:	d202      	bcs.n	801db76 <xQueueGenericSendFromISR+0x11e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801db70:	6862      	ldr	r2, [r4, #4]
 801db72:	4413      	add	r3, r2
 801db74:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801db76:	f1b9 0f02 	cmp.w	r9, #2
 801db7a:	d1c6      	bne.n	801db0a <xQueueGenericSendFromISR+0xb2>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801db7c:	2f00      	cmp	r7, #0
 801db7e:	d0c4      	beq.n	801db0a <xQueueGenericSendFromISR+0xb2>
				--uxMessagesWaiting;
 801db80:	3f01      	subs	r7, #1
 801db82:	e7c2      	b.n	801db0a <xQueueGenericSendFromISR+0xb2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801db84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801db88:	f001 f8e0 	bl	801ed4c <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 801db8c:	f1b8 0f00 	cmp.w	r8, #0
 801db90:	d0e1      	beq.n	801db56 <xQueueGenericSendFromISR+0xfe>
 801db92:	2800      	cmp	r0, #0
 801db94:	d0df      	beq.n	801db56 <xQueueGenericSendFromISR+0xfe>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801db96:	2001      	movs	r0, #1
 801db98:	f8c8 0000 	str.w	r0, [r8]
 801db9c:	e78d      	b.n	801daba <xQueueGenericSendFromISR+0x62>
 801db9e:	bf00      	nop

0801dba0 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 801dba0:	2800      	cmp	r0, #0
 801dba2:	d032      	beq.n	801dc0a <xQueueGiveFromISR+0x6a>
	configASSERT( pxQueue->uxItemSize == 0 );
 801dba4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801dba6:	b153      	cbz	r3, 801dbbe <xQueueGiveFromISR+0x1e>
	__asm volatile
 801dba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dbac:	b672      	cpsid	i
 801dbae:	f383 8811 	msr	BASEPRI, r3
 801dbb2:	f3bf 8f6f 	isb	sy
 801dbb6:	f3bf 8f4f 	dsb	sy
 801dbba:	b662      	cpsie	i
 801dbbc:	e7fe      	b.n	801dbbc <xQueueGiveFromISR+0x1c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 801dbbe:	6803      	ldr	r3, [r0, #0]
 801dbc0:	b373      	cbz	r3, 801dc20 <xQueueGiveFromISR+0x80>
{
 801dbc2:	b570      	push	{r4, r5, r6, lr}
 801dbc4:	4604      	mov	r4, r0
 801dbc6:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801dbc8:	f001 fc12 	bl	801f3f0 <vPortValidateInterruptPriority>
	__asm volatile
 801dbcc:	f3ef 8611 	mrs	r6, BASEPRI
 801dbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dbd4:	b672      	cpsid	i
 801dbd6:	f383 8811 	msr	BASEPRI, r3
 801dbda:	f3bf 8f6f 	isb	sy
 801dbde:	f3bf 8f4f 	dsb	sy
 801dbe2:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801dbe4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 801dbe6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801dbe8:	4293      	cmp	r3, r2
 801dbea:	d92b      	bls.n	801dc44 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 801dbec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801dbf0:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 801dbf2:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801dbf4:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 801dbf6:	1c5a      	adds	r2, r3, #1
 801dbf8:	d020      	beq.n	801dc3c <xQueueGiveFromISR+0x9c>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801dbfa:	3301      	adds	r3, #1
			xReturn = pdPASS;
 801dbfc:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801dbfe:	b25b      	sxtb	r3, r3
 801dc00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 801dc04:	f386 8811 	msr	BASEPRI, r6
}
 801dc08:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 801dc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dc0e:	b672      	cpsid	i
 801dc10:	f383 8811 	msr	BASEPRI, r3
 801dc14:	f3bf 8f6f 	isb	sy
 801dc18:	f3bf 8f4f 	dsb	sy
 801dc1c:	b662      	cpsie	i
 801dc1e:	e7fe      	b.n	801dc1e <xQueueGiveFromISR+0x7e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 801dc20:	6843      	ldr	r3, [r0, #4]
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	d0cd      	beq.n	801dbc2 <xQueueGiveFromISR+0x22>
 801dc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dc2a:	b672      	cpsid	i
 801dc2c:	f383 8811 	msr	BASEPRI, r3
 801dc30:	f3bf 8f6f 	isb	sy
 801dc34:	f3bf 8f4f 	dsb	sy
 801dc38:	b662      	cpsie	i
 801dc3a:	e7fe      	b.n	801dc3a <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801dc3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dc3e:	b91b      	cbnz	r3, 801dc48 <xQueueGiveFromISR+0xa8>
			xReturn = pdPASS;
 801dc40:	2001      	movs	r0, #1
 801dc42:	e7df      	b.n	801dc04 <xQueueGiveFromISR+0x64>
			xReturn = errQUEUE_FULL;
 801dc44:	2000      	movs	r0, #0
 801dc46:	e7dd      	b.n	801dc04 <xQueueGiveFromISR+0x64>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801dc48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801dc4c:	f001 f87e 	bl	801ed4c <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 801dc50:	2d00      	cmp	r5, #0
 801dc52:	d0f5      	beq.n	801dc40 <xQueueGiveFromISR+0xa0>
 801dc54:	2800      	cmp	r0, #0
 801dc56:	d0f3      	beq.n	801dc40 <xQueueGiveFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801dc58:	2001      	movs	r0, #1
 801dc5a:	6028      	str	r0, [r5, #0]
 801dc5c:	e7d2      	b.n	801dc04 <xQueueGiveFromISR+0x64>
 801dc5e:	bf00      	nop

0801dc60 <xQueueReceive>:
{
 801dc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dc64:	b084      	sub	sp, #16
 801dc66:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 801dc68:	2800      	cmp	r0, #0
 801dc6a:	f000 814b 	beq.w	801df04 <xQueueReceive+0x2a4>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801dc6e:	2900      	cmp	r1, #0
 801dc70:	f000 8139 	beq.w	801dee6 <xQueueReceive+0x286>
 801dc74:	4604      	mov	r4, r0
 801dc76:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801dc78:	f001 f90c 	bl	801ee94 <xTaskGetSchedulerState>
 801dc7c:	b960      	cbnz	r0, 801dc98 <xQueueReceive+0x38>
 801dc7e:	9b01      	ldr	r3, [sp, #4]
 801dc80:	b153      	cbz	r3, 801dc98 <xQueueReceive+0x38>
 801dc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dc86:	b672      	cpsid	i
 801dc88:	f383 8811 	msr	BASEPRI, r3
 801dc8c:	f3bf 8f6f 	isb	sy
 801dc90:	f3bf 8f4f 	dsb	sy
 801dc94:	b662      	cpsie	i
 801dc96:	e7fe      	b.n	801dc96 <xQueueReceive+0x36>
		taskENTER_CRITICAL();
 801dc98:	f001 fa9c 	bl	801f1d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801dc9c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801dc9e:	2d00      	cmp	r5, #0
 801dca0:	f040 80b8 	bne.w	801de14 <xQueueReceive+0x1b4>
				if( xTicksToWait == ( TickType_t ) 0 )
 801dca4:	9b01      	ldr	r3, [sp, #4]
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	d068      	beq.n	801dd7c <xQueueReceive+0x11c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801dcaa:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 801dcac:	46a8      	mov	r8, r5
 801dcae:	f104 0624 	add.w	r6, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 801dcb2:	f8df 9284 	ldr.w	r9, [pc, #644]	; 801df38 <xQueueReceive+0x2d8>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801dcb6:	f001 f891 	bl	801eddc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801dcba:	f001 fab1 	bl	801f220 <vPortExitCritical>
		vTaskSuspendAll();
 801dcbe:	f000 fe29 	bl	801e914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801dcc2:	f001 fa87 	bl	801f1d4 <vPortEnterCritical>
 801dcc6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801dcca:	2bff      	cmp	r3, #255	; 0xff
 801dccc:	f000 8108 	beq.w	801dee0 <xQueueReceive+0x280>
 801dcd0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801dcd4:	2bff      	cmp	r3, #255	; 0xff
 801dcd6:	f000 8100 	beq.w	801deda <xQueueReceive+0x27a>
 801dcda:	f001 faa1 	bl	801f220 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801dcde:	a901      	add	r1, sp, #4
 801dce0:	a802      	add	r0, sp, #8
 801dce2:	f001 f887 	bl	801edf4 <xTaskCheckForTimeOut>
 801dce6:	2800      	cmp	r0, #0
 801dce8:	d14e      	bne.n	801dd88 <xQueueReceive+0x128>
	taskENTER_CRITICAL();
 801dcea:	f001 fa73 	bl	801f1d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801dcee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801dcf0:	2b00      	cmp	r3, #0
 801dcf2:	f000 80a8 	beq.w	801de46 <xQueueReceive+0x1e6>
	taskEXIT_CRITICAL();
 801dcf6:	f001 fa93 	bl	801f220 <vPortExitCritical>
	taskENTER_CRITICAL();
 801dcfa:	f001 fa6b 	bl	801f1d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801dcfe:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 801dd02:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801dd04:	2d00      	cmp	r5, #0
 801dd06:	dc0a      	bgt.n	801dd1e <xQueueReceive+0xbe>
 801dd08:	e00c      	b.n	801dd24 <xQueueReceive+0xc4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801dd0a:	4630      	mov	r0, r6
 801dd0c:	f001 f81e 	bl	801ed4c <xTaskRemoveFromEventList>
 801dd10:	b108      	cbz	r0, 801dd16 <xQueueReceive+0xb6>
						vTaskMissedYield();
 801dd12:	f001 f8b9 	bl	801ee88 <vTaskMissedYield>
 801dd16:	3d01      	subs	r5, #1
 801dd18:	b2eb      	uxtb	r3, r5
 801dd1a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801dd1c:	b113      	cbz	r3, 801dd24 <xQueueReceive+0xc4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801dd1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	d1f2      	bne.n	801dd0a <xQueueReceive+0xaa>
		pxQueue->cTxLock = queueUNLOCKED;
 801dd24:	23ff      	movs	r3, #255	; 0xff
 801dd26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 801dd2a:	f001 fa79 	bl	801f220 <vPortExitCritical>
	taskENTER_CRITICAL();
 801dd2e:	f001 fa51 	bl	801f1d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801dd32:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 801dd36:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801dd38:	2d00      	cmp	r5, #0
 801dd3a:	dd10      	ble.n	801dd5e <xQueueReceive+0xfe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801dd3c:	6923      	ldr	r3, [r4, #16]
 801dd3e:	b173      	cbz	r3, 801dd5e <xQueueReceive+0xfe>
 801dd40:	f104 0a10 	add.w	sl, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801dd44:	4650      	mov	r0, sl
 801dd46:	f001 f801 	bl	801ed4c <xTaskRemoveFromEventList>
 801dd4a:	b108      	cbz	r0, 801dd50 <xQueueReceive+0xf0>
					vTaskMissedYield();
 801dd4c:	f001 f89c 	bl	801ee88 <vTaskMissedYield>
 801dd50:	3d01      	subs	r5, #1
 801dd52:	b2eb      	uxtb	r3, r5
 801dd54:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801dd56:	b113      	cbz	r3, 801dd5e <xQueueReceive+0xfe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801dd58:	6923      	ldr	r3, [r4, #16]
 801dd5a:	2b00      	cmp	r3, #0
 801dd5c:	d1f2      	bne.n	801dd44 <xQueueReceive+0xe4>
		pxQueue->cRxLock = queueUNLOCKED;
 801dd5e:	23ff      	movs	r3, #255	; 0xff
 801dd60:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 801dd64:	f001 fa5c 	bl	801f220 <vPortExitCritical>
				( void ) xTaskResumeAll();
 801dd68:	f000 fe98 	bl	801ea9c <xTaskResumeAll>
		taskENTER_CRITICAL();
 801dd6c:	f001 fa32 	bl	801f1d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801dd70:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801dd72:	2d00      	cmp	r5, #0
 801dd74:	d14e      	bne.n	801de14 <xQueueReceive+0x1b4>
				if( xTicksToWait == ( TickType_t ) 0 )
 801dd76:	9b01      	ldr	r3, [sp, #4]
 801dd78:	2b00      	cmp	r3, #0
 801dd7a:	d19e      	bne.n	801dcba <xQueueReceive+0x5a>
					taskEXIT_CRITICAL();
 801dd7c:	f001 fa50 	bl	801f220 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801dd80:	2000      	movs	r0, #0
}
 801dd82:	b004      	add	sp, #16
 801dd84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskENTER_CRITICAL();
 801dd88:	f001 fa24 	bl	801f1d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801dd8c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 801dd90:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801dd92:	2d00      	cmp	r5, #0
 801dd94:	dc0a      	bgt.n	801ddac <xQueueReceive+0x14c>
 801dd96:	e00c      	b.n	801ddb2 <xQueueReceive+0x152>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801dd98:	4630      	mov	r0, r6
 801dd9a:	f000 ffd7 	bl	801ed4c <xTaskRemoveFromEventList>
 801dd9e:	b108      	cbz	r0, 801dda4 <xQueueReceive+0x144>
						vTaskMissedYield();
 801dda0:	f001 f872 	bl	801ee88 <vTaskMissedYield>
 801dda4:	3d01      	subs	r5, #1
 801dda6:	b2eb      	uxtb	r3, r5
 801dda8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801ddaa:	b113      	cbz	r3, 801ddb2 <xQueueReceive+0x152>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ddac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	d1f2      	bne.n	801dd98 <xQueueReceive+0x138>
		pxQueue->cTxLock = queueUNLOCKED;
 801ddb2:	23ff      	movs	r3, #255	; 0xff
 801ddb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 801ddb8:	f001 fa32 	bl	801f220 <vPortExitCritical>
	taskENTER_CRITICAL();
 801ddbc:	f001 fa0a 	bl	801f1d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801ddc0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 801ddc4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ddc6:	2d00      	cmp	r5, #0
 801ddc8:	dd11      	ble.n	801ddee <xQueueReceive+0x18e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ddca:	6923      	ldr	r3, [r4, #16]
 801ddcc:	b17b      	cbz	r3, 801ddee <xQueueReceive+0x18e>
 801ddce:	f104 0a10 	add.w	sl, r4, #16
 801ddd2:	e001      	b.n	801ddd8 <xQueueReceive+0x178>
 801ddd4:	6923      	ldr	r3, [r4, #16]
 801ddd6:	b153      	cbz	r3, 801ddee <xQueueReceive+0x18e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ddd8:	4650      	mov	r0, sl
 801ddda:	f000 ffb7 	bl	801ed4c <xTaskRemoveFromEventList>
 801ddde:	b108      	cbz	r0, 801dde4 <xQueueReceive+0x184>
					vTaskMissedYield();
 801dde0:	f001 f852 	bl	801ee88 <vTaskMissedYield>
 801dde4:	3d01      	subs	r5, #1
 801dde6:	b2eb      	uxtb	r3, r5
 801dde8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	d1f2      	bne.n	801ddd4 <xQueueReceive+0x174>
		pxQueue->cRxLock = queueUNLOCKED;
 801ddee:	23ff      	movs	r3, #255	; 0xff
 801ddf0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 801ddf4:	f001 fa14 	bl	801f220 <vPortExitCritical>
			( void ) xTaskResumeAll();
 801ddf8:	f000 fe50 	bl	801ea9c <xTaskResumeAll>
	taskENTER_CRITICAL();
 801ddfc:	f001 f9ea 	bl	801f1d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801de00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801de02:	2b00      	cmp	r3, #0
 801de04:	d0ba      	beq.n	801dd7c <xQueueReceive+0x11c>
	taskEXIT_CRITICAL();
 801de06:	f001 fa0b 	bl	801f220 <vPortExitCritical>
		taskENTER_CRITICAL();
 801de0a:	f001 f9e3 	bl	801f1d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801de0e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801de10:	2d00      	cmp	r5, #0
 801de12:	d0b0      	beq.n	801dd76 <xQueueReceive+0x116>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801de14:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801de16:	b15a      	cbz	r2, 801de30 <xQueueReceive+0x1d0>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801de18:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801de1a:	6863      	ldr	r3, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801de1c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801de1e:	4299      	cmp	r1, r3
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801de20:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801de22:	d302      	bcc.n	801de2a <xQueueReceive+0x1ca>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801de24:	6823      	ldr	r3, [r4, #0]
 801de26:	4619      	mov	r1, r3
 801de28:	60e3      	str	r3, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801de2a:	4638      	mov	r0, r7
 801de2c:	f001 fc4e 	bl	801f6cc <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801de30:	3d01      	subs	r5, #1
 801de32:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801de34:	6923      	ldr	r3, [r4, #16]
 801de36:	2b00      	cmp	r3, #0
 801de38:	d16f      	bne.n	801df1a <xQueueReceive+0x2ba>
				taskEXIT_CRITICAL();
 801de3a:	f001 f9f1 	bl	801f220 <vPortExitCritical>
				return pdPASS;
 801de3e:	2001      	movs	r0, #1
}
 801de40:	b004      	add	sp, #16
 801de42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 801de46:	f001 f9eb 	bl	801f220 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801de4a:	9901      	ldr	r1, [sp, #4]
 801de4c:	4630      	mov	r0, r6
 801de4e:	f000 ff2b 	bl	801eca8 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 801de52:	f001 f9bf 	bl	801f1d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801de56:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 801de5a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801de5c:	2d00      	cmp	r5, #0
 801de5e:	dc0a      	bgt.n	801de76 <xQueueReceive+0x216>
 801de60:	e00c      	b.n	801de7c <xQueueReceive+0x21c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801de62:	4630      	mov	r0, r6
 801de64:	f000 ff72 	bl	801ed4c <xTaskRemoveFromEventList>
 801de68:	b108      	cbz	r0, 801de6e <xQueueReceive+0x20e>
						vTaskMissedYield();
 801de6a:	f001 f80d 	bl	801ee88 <vTaskMissedYield>
 801de6e:	3d01      	subs	r5, #1
 801de70:	b2eb      	uxtb	r3, r5
 801de72:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801de74:	b113      	cbz	r3, 801de7c <xQueueReceive+0x21c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801de76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801de78:	2b00      	cmp	r3, #0
 801de7a:	d1f2      	bne.n	801de62 <xQueueReceive+0x202>
		pxQueue->cTxLock = queueUNLOCKED;
 801de7c:	23ff      	movs	r3, #255	; 0xff
 801de7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 801de82:	f001 f9cd 	bl	801f220 <vPortExitCritical>
	taskENTER_CRITICAL();
 801de86:	f001 f9a5 	bl	801f1d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801de8a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 801de8e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801de90:	2d00      	cmp	r5, #0
 801de92:	dd10      	ble.n	801deb6 <xQueueReceive+0x256>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801de94:	6923      	ldr	r3, [r4, #16]
 801de96:	b173      	cbz	r3, 801deb6 <xQueueReceive+0x256>
 801de98:	f104 0a10 	add.w	sl, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801de9c:	4650      	mov	r0, sl
 801de9e:	f000 ff55 	bl	801ed4c <xTaskRemoveFromEventList>
 801dea2:	b108      	cbz	r0, 801dea8 <xQueueReceive+0x248>
					vTaskMissedYield();
 801dea4:	f000 fff0 	bl	801ee88 <vTaskMissedYield>
 801dea8:	3d01      	subs	r5, #1
 801deaa:	b2eb      	uxtb	r3, r5
 801deac:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801deae:	b113      	cbz	r3, 801deb6 <xQueueReceive+0x256>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801deb0:	6923      	ldr	r3, [r4, #16]
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	d1f2      	bne.n	801de9c <xQueueReceive+0x23c>
		pxQueue->cRxLock = queueUNLOCKED;
 801deb6:	23ff      	movs	r3, #255	; 0xff
 801deb8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 801debc:	f001 f9b0 	bl	801f220 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 801dec0:	f000 fdec 	bl	801ea9c <xTaskResumeAll>
 801dec4:	2800      	cmp	r0, #0
 801dec6:	d1a0      	bne.n	801de0a <xQueueReceive+0x1aa>
					portYIELD_WITHIN_API();
 801dec8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801decc:	f8c9 3000 	str.w	r3, [r9]
 801ded0:	f3bf 8f4f 	dsb	sy
 801ded4:	f3bf 8f6f 	isb	sy
 801ded8:	e797      	b.n	801de0a <xQueueReceive+0x1aa>
		prvLockQueue( pxQueue );
 801deda:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 801dede:	e6fc      	b.n	801dcda <xQueueReceive+0x7a>
 801dee0:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 801dee4:	e6f4      	b.n	801dcd0 <xQueueReceive+0x70>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801dee6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801dee8:	2b00      	cmp	r3, #0
 801deea:	f43f aec3 	beq.w	801dc74 <xQueueReceive+0x14>
 801deee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801def2:	b672      	cpsid	i
 801def4:	f383 8811 	msr	BASEPRI, r3
 801def8:	f3bf 8f6f 	isb	sy
 801defc:	f3bf 8f4f 	dsb	sy
 801df00:	b662      	cpsie	i
 801df02:	e7fe      	b.n	801df02 <xQueueReceive+0x2a2>
 801df04:	f04f 0350 	mov.w	r3, #80	; 0x50
 801df08:	b672      	cpsid	i
 801df0a:	f383 8811 	msr	BASEPRI, r3
 801df0e:	f3bf 8f6f 	isb	sy
 801df12:	f3bf 8f4f 	dsb	sy
 801df16:	b662      	cpsie	i
 801df18:	e7fe      	b.n	801df18 <xQueueReceive+0x2b8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801df1a:	f104 0010 	add.w	r0, r4, #16
 801df1e:	f000 ff15 	bl	801ed4c <xTaskRemoveFromEventList>
 801df22:	2800      	cmp	r0, #0
 801df24:	d089      	beq.n	801de3a <xQueueReceive+0x1da>
						queueYIELD_IF_USING_PREEMPTION();
 801df26:	4b04      	ldr	r3, [pc, #16]	; (801df38 <xQueueReceive+0x2d8>)
 801df28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801df2c:	601a      	str	r2, [r3, #0]
 801df2e:	f3bf 8f4f 	dsb	sy
 801df32:	f3bf 8f6f 	isb	sy
 801df36:	e780      	b.n	801de3a <xQueueReceive+0x1da>
 801df38:	e000ed04 	.word	0xe000ed04

0801df3c <xQueueSemaphoreTake>:
{
 801df3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801df40:	b085      	sub	sp, #20
 801df42:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 801df44:	b160      	cbz	r0, 801df60 <xQueueSemaphoreTake+0x24>
	configASSERT( pxQueue->uxItemSize == 0 );
 801df46:	6c05      	ldr	r5, [r0, #64]	; 0x40
 801df48:	b1ad      	cbz	r5, 801df76 <xQueueSemaphoreTake+0x3a>
 801df4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801df4e:	b672      	cpsid	i
 801df50:	f383 8811 	msr	BASEPRI, r3
 801df54:	f3bf 8f6f 	isb	sy
 801df58:	f3bf 8f4f 	dsb	sy
 801df5c:	b662      	cpsie	i
 801df5e:	e7fe      	b.n	801df5e <xQueueSemaphoreTake+0x22>
 801df60:	f04f 0350 	mov.w	r3, #80	; 0x50
 801df64:	b672      	cpsid	i
 801df66:	f383 8811 	msr	BASEPRI, r3
 801df6a:	f3bf 8f6f 	isb	sy
 801df6e:	f3bf 8f4f 	dsb	sy
 801df72:	b662      	cpsie	i
 801df74:	e7fe      	b.n	801df74 <xQueueSemaphoreTake+0x38>
 801df76:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801df78:	f000 ff8c 	bl	801ee94 <xTaskGetSchedulerState>
 801df7c:	b960      	cbnz	r0, 801df98 <xQueueSemaphoreTake+0x5c>
 801df7e:	9d01      	ldr	r5, [sp, #4]
 801df80:	b155      	cbz	r5, 801df98 <xQueueSemaphoreTake+0x5c>
 801df82:	f04f 0350 	mov.w	r3, #80	; 0x50
 801df86:	b672      	cpsid	i
 801df88:	f383 8811 	msr	BASEPRI, r3
 801df8c:	f3bf 8f6f 	isb	sy
 801df90:	f3bf 8f4f 	dsb	sy
 801df94:	b662      	cpsie	i
 801df96:	e7fe      	b.n	801df96 <xQueueSemaphoreTake+0x5a>
		taskENTER_CRITICAL();
 801df98:	f001 f91c 	bl	801f1d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801df9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801df9e:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 801dfa0:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 801dfa2:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 801e25c <xQueueSemaphoreTake+0x320>
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	f040 80b3 	bne.w	801e112 <xQueueSemaphoreTake+0x1d6>
				if( xTicksToWait == ( TickType_t ) 0 )
 801dfac:	9b01      	ldr	r3, [sp, #4]
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	f000 8129 	beq.w	801e206 <xQueueSemaphoreTake+0x2ca>
				else if( xEntryTimeSet == pdFALSE )
 801dfb4:	b916      	cbnz	r6, 801dfbc <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801dfb6:	a802      	add	r0, sp, #8
 801dfb8:	f000 ff10 	bl	801eddc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801dfbc:	f001 f930 	bl	801f220 <vPortExitCritical>
		vTaskSuspendAll();
 801dfc0:	f000 fca8 	bl	801e914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801dfc4:	f001 f906 	bl	801f1d4 <vPortEnterCritical>
 801dfc8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801dfcc:	2bff      	cmp	r3, #255	; 0xff
 801dfce:	d101      	bne.n	801dfd4 <xQueueSemaphoreTake+0x98>
 801dfd0:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 801dfd4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801dfd8:	2bff      	cmp	r3, #255	; 0xff
 801dfda:	d101      	bne.n	801dfe0 <xQueueSemaphoreTake+0xa4>
 801dfdc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801dfe0:	f001 f91e 	bl	801f220 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801dfe4:	a901      	add	r1, sp, #4
 801dfe6:	a802      	add	r0, sp, #8
 801dfe8:	f000 ff04 	bl	801edf4 <xTaskCheckForTimeOut>
 801dfec:	2800      	cmp	r0, #0
 801dfee:	d144      	bne.n	801e07a <xQueueSemaphoreTake+0x13e>
	taskENTER_CRITICAL();
 801dff0:	f001 f8f0 	bl	801f1d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801dff4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801dff6:	2b00      	cmp	r3, #0
 801dff8:	f000 809d 	beq.w	801e136 <xQueueSemaphoreTake+0x1fa>
	taskEXIT_CRITICAL();
 801dffc:	f001 f910 	bl	801f220 <vPortExitCritical>
	taskENTER_CRITICAL();
 801e000:	f001 f8e8 	bl	801f1d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801e004:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 801e008:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801e00a:	2e00      	cmp	r6, #0
 801e00c:	dd10      	ble.n	801e030 <xQueueSemaphoreTake+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801e00e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e010:	b173      	cbz	r3, 801e030 <xQueueSemaphoreTake+0xf4>
 801e012:	f104 0924 	add.w	r9, r4, #36	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801e016:	4648      	mov	r0, r9
 801e018:	f000 fe98 	bl	801ed4c <xTaskRemoveFromEventList>
 801e01c:	2800      	cmp	r0, #0
 801e01e:	f040 8087 	bne.w	801e130 <xQueueSemaphoreTake+0x1f4>
 801e022:	3e01      	subs	r6, #1
 801e024:	b2f3      	uxtb	r3, r6
 801e026:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801e028:	b113      	cbz	r3, 801e030 <xQueueSemaphoreTake+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801e02a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d1f2      	bne.n	801e016 <xQueueSemaphoreTake+0xda>
		pxQueue->cTxLock = queueUNLOCKED;
 801e030:	23ff      	movs	r3, #255	; 0xff
 801e032:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 801e036:	f001 f8f3 	bl	801f220 <vPortExitCritical>
	taskENTER_CRITICAL();
 801e03a:	f001 f8cb 	bl	801f1d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801e03e:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 801e042:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801e044:	2e00      	cmp	r6, #0
 801e046:	dd10      	ble.n	801e06a <xQueueSemaphoreTake+0x12e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e048:	6923      	ldr	r3, [r4, #16]
 801e04a:	b173      	cbz	r3, 801e06a <xQueueSemaphoreTake+0x12e>
 801e04c:	f104 0910 	add.w	r9, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e050:	4648      	mov	r0, r9
 801e052:	f000 fe7b 	bl	801ed4c <xTaskRemoveFromEventList>
 801e056:	2800      	cmp	r0, #0
 801e058:	f040 80bf 	bne.w	801e1da <xQueueSemaphoreTake+0x29e>
 801e05c:	3e01      	subs	r6, #1
 801e05e:	b2f3      	uxtb	r3, r6
 801e060:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801e062:	b113      	cbz	r3, 801e06a <xQueueSemaphoreTake+0x12e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e064:	6923      	ldr	r3, [r4, #16]
 801e066:	2b00      	cmp	r3, #0
 801e068:	d1f2      	bne.n	801e050 <xQueueSemaphoreTake+0x114>
		pxQueue->cRxLock = queueUNLOCKED;
 801e06a:	23ff      	movs	r3, #255	; 0xff
 801e06c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 801e070:	f001 f8d6 	bl	801f220 <vPortExitCritical>
				( void ) xTaskResumeAll();
 801e074:	f000 fd12 	bl	801ea9c <xTaskResumeAll>
 801e078:	e044      	b.n	801e104 <xQueueSemaphoreTake+0x1c8>
	taskENTER_CRITICAL();
 801e07a:	f001 f8ab 	bl	801f1d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801e07e:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 801e082:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801e084:	2e00      	cmp	r6, #0
 801e086:	dd11      	ble.n	801e0ac <xQueueSemaphoreTake+0x170>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801e088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e08a:	b17b      	cbz	r3, 801e0ac <xQueueSemaphoreTake+0x170>
 801e08c:	f104 0924 	add.w	r9, r4, #36	; 0x24
 801e090:	e001      	b.n	801e096 <xQueueSemaphoreTake+0x15a>
 801e092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e094:	b153      	cbz	r3, 801e0ac <xQueueSemaphoreTake+0x170>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801e096:	4648      	mov	r0, r9
 801e098:	f000 fe58 	bl	801ed4c <xTaskRemoveFromEventList>
 801e09c:	b108      	cbz	r0, 801e0a2 <xQueueSemaphoreTake+0x166>
						vTaskMissedYield();
 801e09e:	f000 fef3 	bl	801ee88 <vTaskMissedYield>
 801e0a2:	3e01      	subs	r6, #1
 801e0a4:	b2f3      	uxtb	r3, r6
 801e0a6:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d1f2      	bne.n	801e092 <xQueueSemaphoreTake+0x156>
		pxQueue->cTxLock = queueUNLOCKED;
 801e0ac:	23ff      	movs	r3, #255	; 0xff
 801e0ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 801e0b2:	f001 f8b5 	bl	801f220 <vPortExitCritical>
	taskENTER_CRITICAL();
 801e0b6:	f001 f88d 	bl	801f1d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801e0ba:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 801e0be:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801e0c0:	2e00      	cmp	r6, #0
 801e0c2:	dd11      	ble.n	801e0e8 <xQueueSemaphoreTake+0x1ac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e0c4:	6923      	ldr	r3, [r4, #16]
 801e0c6:	b17b      	cbz	r3, 801e0e8 <xQueueSemaphoreTake+0x1ac>
 801e0c8:	f104 0910 	add.w	r9, r4, #16
 801e0cc:	e001      	b.n	801e0d2 <xQueueSemaphoreTake+0x196>
 801e0ce:	6923      	ldr	r3, [r4, #16]
 801e0d0:	b153      	cbz	r3, 801e0e8 <xQueueSemaphoreTake+0x1ac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e0d2:	4648      	mov	r0, r9
 801e0d4:	f000 fe3a 	bl	801ed4c <xTaskRemoveFromEventList>
 801e0d8:	b108      	cbz	r0, 801e0de <xQueueSemaphoreTake+0x1a2>
					vTaskMissedYield();
 801e0da:	f000 fed5 	bl	801ee88 <vTaskMissedYield>
 801e0de:	3e01      	subs	r6, #1
 801e0e0:	b2f3      	uxtb	r3, r6
 801e0e2:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801e0e4:	2b00      	cmp	r3, #0
 801e0e6:	d1f2      	bne.n	801e0ce <xQueueSemaphoreTake+0x192>
		pxQueue->cRxLock = queueUNLOCKED;
 801e0e8:	23ff      	movs	r3, #255	; 0xff
 801e0ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 801e0ee:	f001 f897 	bl	801f220 <vPortExitCritical>
			( void ) xTaskResumeAll();
 801e0f2:	f000 fcd3 	bl	801ea9c <xTaskResumeAll>
	taskENTER_CRITICAL();
 801e0f6:	f001 f86d 	bl	801f1d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801e0fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	d07b      	beq.n	801e1f8 <xQueueSemaphoreTake+0x2bc>
	taskEXIT_CRITICAL();
 801e100:	f001 f88e 	bl	801f220 <vPortExitCritical>
		taskENTER_CRITICAL();
 801e104:	f001 f866 	bl	801f1d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801e108:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e10a:	2601      	movs	r6, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	f43f af4d 	beq.w	801dfac <xQueueSemaphoreTake+0x70>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801e112:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801e114:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801e116:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801e118:	b912      	cbnz	r2, 801e120 <xQueueSemaphoreTake+0x1e4>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 801e11a:	f000 ffe3 	bl	801f0e4 <pvTaskIncrementMutexHeldCount>
 801e11e:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e120:	6923      	ldr	r3, [r4, #16]
 801e122:	2b00      	cmp	r3, #0
 801e124:	f040 808a 	bne.w	801e23c <xQueueSemaphoreTake+0x300>
				taskEXIT_CRITICAL();
 801e128:	f001 f87a 	bl	801f220 <vPortExitCritical>
				return pdPASS;
 801e12c:	2501      	movs	r5, #1
 801e12e:	e066      	b.n	801e1fe <xQueueSemaphoreTake+0x2c2>
						vTaskMissedYield();
 801e130:	f000 feaa 	bl	801ee88 <vTaskMissedYield>
 801e134:	e775      	b.n	801e022 <xQueueSemaphoreTake+0xe6>
	taskEXIT_CRITICAL();
 801e136:	f001 f873 	bl	801f220 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801e13a:	6823      	ldr	r3, [r4, #0]
 801e13c:	2b00      	cmp	r3, #0
 801e13e:	d052      	beq.n	801e1e6 <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801e140:	f104 0924 	add.w	r9, r4, #36	; 0x24
 801e144:	9901      	ldr	r1, [sp, #4]
 801e146:	4648      	mov	r0, r9
 801e148:	f000 fdae 	bl	801eca8 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 801e14c:	f001 f842 	bl	801f1d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801e150:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 801e154:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801e156:	2e00      	cmp	r6, #0
 801e158:	dc04      	bgt.n	801e164 <xQueueSemaphoreTake+0x228>
 801e15a:	e011      	b.n	801e180 <xQueueSemaphoreTake+0x244>
 801e15c:	3e01      	subs	r6, #1
 801e15e:	b2f3      	uxtb	r3, r6
 801e160:	b25e      	sxtb	r6, r3
 801e162:	b16b      	cbz	r3, 801e180 <xQueueSemaphoreTake+0x244>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801e164:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e166:	b15b      	cbz	r3, 801e180 <xQueueSemaphoreTake+0x244>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801e168:	4648      	mov	r0, r9
 801e16a:	f000 fdef 	bl	801ed4c <xTaskRemoveFromEventList>
 801e16e:	2800      	cmp	r0, #0
 801e170:	d0f4      	beq.n	801e15c <xQueueSemaphoreTake+0x220>
 801e172:	3e01      	subs	r6, #1
						vTaskMissedYield();
 801e174:	f000 fe88 	bl	801ee88 <vTaskMissedYield>
 801e178:	b2f3      	uxtb	r3, r6
 801e17a:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	d1f1      	bne.n	801e164 <xQueueSemaphoreTake+0x228>
		pxQueue->cTxLock = queueUNLOCKED;
 801e180:	23ff      	movs	r3, #255	; 0xff
 801e182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 801e186:	f001 f84b 	bl	801f220 <vPortExitCritical>
	taskENTER_CRITICAL();
 801e18a:	f001 f823 	bl	801f1d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801e18e:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 801e192:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801e194:	2e00      	cmp	r6, #0
 801e196:	dd0e      	ble.n	801e1b6 <xQueueSemaphoreTake+0x27a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e198:	6923      	ldr	r3, [r4, #16]
 801e19a:	b163      	cbz	r3, 801e1b6 <xQueueSemaphoreTake+0x27a>
 801e19c:	f104 0910 	add.w	r9, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e1a0:	4648      	mov	r0, r9
 801e1a2:	f000 fdd3 	bl	801ed4c <xTaskRemoveFromEventList>
 801e1a6:	b9d8      	cbnz	r0, 801e1e0 <xQueueSemaphoreTake+0x2a4>
 801e1a8:	3e01      	subs	r6, #1
 801e1aa:	b2f3      	uxtb	r3, r6
 801e1ac:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801e1ae:	b113      	cbz	r3, 801e1b6 <xQueueSemaphoreTake+0x27a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e1b0:	6923      	ldr	r3, [r4, #16]
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	d1f4      	bne.n	801e1a0 <xQueueSemaphoreTake+0x264>
		pxQueue->cRxLock = queueUNLOCKED;
 801e1b6:	23ff      	movs	r3, #255	; 0xff
 801e1b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 801e1bc:	f001 f830 	bl	801f220 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 801e1c0:	f000 fc6c 	bl	801ea9c <xTaskResumeAll>
 801e1c4:	2800      	cmp	r0, #0
 801e1c6:	d19d      	bne.n	801e104 <xQueueSemaphoreTake+0x1c8>
					portYIELD_WITHIN_API();
 801e1c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801e1cc:	f8c8 3000 	str.w	r3, [r8]
 801e1d0:	f3bf 8f4f 	dsb	sy
 801e1d4:	f3bf 8f6f 	isb	sy
 801e1d8:	e794      	b.n	801e104 <xQueueSemaphoreTake+0x1c8>
					vTaskMissedYield();
 801e1da:	f000 fe55 	bl	801ee88 <vTaskMissedYield>
 801e1de:	e73d      	b.n	801e05c <xQueueSemaphoreTake+0x120>
 801e1e0:	f000 fe52 	bl	801ee88 <vTaskMissedYield>
 801e1e4:	e7e0      	b.n	801e1a8 <xQueueSemaphoreTake+0x26c>
						taskENTER_CRITICAL();
 801e1e6:	f000 fff5 	bl	801f1d4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 801e1ea:	6860      	ldr	r0, [r4, #4]
 801e1ec:	f000 fe62 	bl	801eeb4 <xTaskPriorityInherit>
 801e1f0:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 801e1f2:	f001 f815 	bl	801f220 <vPortExitCritical>
 801e1f6:	e7a3      	b.n	801e140 <xQueueSemaphoreTake+0x204>
	taskEXIT_CRITICAL();
 801e1f8:	f001 f812 	bl	801f220 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 801e1fc:	b97d      	cbnz	r5, 801e21e <xQueueSemaphoreTake+0x2e2>
}
 801e1fe:	4628      	mov	r0, r5
 801e200:	b005      	add	sp, #20
 801e202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 801e206:	b1b5      	cbz	r5, 801e236 <xQueueSemaphoreTake+0x2fa>
 801e208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e20c:	b672      	cpsid	i
 801e20e:	f383 8811 	msr	BASEPRI, r3
 801e212:	f3bf 8f6f 	isb	sy
 801e216:	f3bf 8f4f 	dsb	sy
 801e21a:	b662      	cpsie	i
 801e21c:	e7fe      	b.n	801e21c <xQueueSemaphoreTake+0x2e0>
						taskENTER_CRITICAL();
 801e21e:	f000 ffd9 	bl	801f1d4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801e222:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e224:	b119      	cbz	r1, 801e22e <xQueueSemaphoreTake+0x2f2>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801e226:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801e228:	6819      	ldr	r1, [r3, #0]
 801e22a:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 801e22e:	6860      	ldr	r0, [r4, #4]
				return errQUEUE_EMPTY;
 801e230:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 801e232:	f000 fef5 	bl	801f020 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 801e236:	f000 fff3 	bl	801f220 <vPortExitCritical>
 801e23a:	e7e0      	b.n	801e1fe <xQueueSemaphoreTake+0x2c2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e23c:	f104 0010 	add.w	r0, r4, #16
 801e240:	f000 fd84 	bl	801ed4c <xTaskRemoveFromEventList>
 801e244:	2800      	cmp	r0, #0
 801e246:	f43f af6f 	beq.w	801e128 <xQueueSemaphoreTake+0x1ec>
						queueYIELD_IF_USING_PREEMPTION();
 801e24a:	4b04      	ldr	r3, [pc, #16]	; (801e25c <xQueueSemaphoreTake+0x320>)
 801e24c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e250:	601a      	str	r2, [r3, #0]
 801e252:	f3bf 8f4f 	dsb	sy
 801e256:	f3bf 8f6f 	isb	sy
 801e25a:	e765      	b.n	801e128 <xQueueSemaphoreTake+0x1ec>
 801e25c:	e000ed04 	.word	0xe000ed04

0801e260 <xQueueReceiveFromISR>:
{
 801e260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 801e264:	b1c8      	cbz	r0, 801e29a <xQueueReceiveFromISR+0x3a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801e266:	2900      	cmp	r1, #0
 801e268:	d03d      	beq.n	801e2e6 <xQueueReceiveFromISR+0x86>
 801e26a:	4604      	mov	r4, r0
 801e26c:	4690      	mov	r8, r2
 801e26e:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801e270:	f001 f8be 	bl	801f3f0 <vPortValidateInterruptPriority>
	__asm volatile
 801e274:	f3ef 8711 	mrs	r7, BASEPRI
 801e278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e27c:	b672      	cpsid	i
 801e27e:	f383 8811 	msr	BASEPRI, r3
 801e282:	f3bf 8f6f 	isb	sy
 801e286:	f3bf 8f4f 	dsb	sy
 801e28a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801e28c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801e28e:	b97d      	cbnz	r5, 801e2b0 <xQueueReceiveFromISR+0x50>
			xReturn = pdFAIL;
 801e290:	4628      	mov	r0, r5
	__asm volatile
 801e292:	f387 8811 	msr	BASEPRI, r7
}
 801e296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 801e29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e29e:	b672      	cpsid	i
 801e2a0:	f383 8811 	msr	BASEPRI, r3
 801e2a4:	f3bf 8f6f 	isb	sy
 801e2a8:	f3bf 8f4f 	dsb	sy
 801e2ac:	b662      	cpsie	i
 801e2ae:	e7fe      	b.n	801e2ae <xQueueReceiveFromISR+0x4e>
			const int8_t cRxLock = pxQueue->cRxLock;
 801e2b0:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801e2b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 801e2b6:	b276      	sxtb	r6, r6
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801e2b8:	b15a      	cbz	r2, 801e2d2 <xQueueReceiveFromISR+0x72>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801e2ba:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801e2bc:	6863      	ldr	r3, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801e2be:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801e2c0:	4299      	cmp	r1, r3
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801e2c2:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801e2c4:	d302      	bcc.n	801e2cc <xQueueReceiveFromISR+0x6c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801e2c6:	6823      	ldr	r3, [r4, #0]
 801e2c8:	4619      	mov	r1, r3
 801e2ca:	60e3      	str	r3, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801e2cc:	4648      	mov	r0, r9
 801e2ce:	f001 f9fd 	bl	801f6cc <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801e2d2:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 801e2d4:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801e2d6:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 801e2d8:	d013      	beq.n	801e302 <xQueueReceiveFromISR+0xa2>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801e2da:	1c73      	adds	r3, r6, #1
			xReturn = pdPASS;
 801e2dc:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801e2de:	b25b      	sxtb	r3, r3
 801e2e0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801e2e4:	e7d5      	b.n	801e292 <xQueueReceiveFromISR+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801e2e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	d0be      	beq.n	801e26a <xQueueReceiveFromISR+0xa>
 801e2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e2f0:	b672      	cpsid	i
 801e2f2:	f383 8811 	msr	BASEPRI, r3
 801e2f6:	f3bf 8f6f 	isb	sy
 801e2fa:	f3bf 8f4f 	dsb	sy
 801e2fe:	b662      	cpsie	i
 801e300:	e7fe      	b.n	801e300 <xQueueReceiveFromISR+0xa0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e302:	6923      	ldr	r3, [r4, #16]
 801e304:	b90b      	cbnz	r3, 801e30a <xQueueReceiveFromISR+0xaa>
			xReturn = pdPASS;
 801e306:	2001      	movs	r0, #1
 801e308:	e7c3      	b.n	801e292 <xQueueReceiveFromISR+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e30a:	f104 0010 	add.w	r0, r4, #16
 801e30e:	f000 fd1d 	bl	801ed4c <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 801e312:	f1b8 0f00 	cmp.w	r8, #0
 801e316:	d0f6      	beq.n	801e306 <xQueueReceiveFromISR+0xa6>
 801e318:	2800      	cmp	r0, #0
 801e31a:	d0f4      	beq.n	801e306 <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 801e31c:	2001      	movs	r0, #1
 801e31e:	f8c8 0000 	str.w	r0, [r8]
 801e322:	e7b6      	b.n	801e292 <xQueueReceiveFromISR+0x32>

0801e324 <vQueueDelete>:
	configASSERT( pxQueue );
 801e324:	b1d0      	cbz	r0, 801e35c <vQueueDelete+0x38>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801e326:	4b20      	ldr	r3, [pc, #128]	; (801e3a8 <vQueueDelete+0x84>)
 801e328:	685a      	ldr	r2, [r3, #4]
 801e32a:	4290      	cmp	r0, r2
 801e32c:	d021      	beq.n	801e372 <vQueueDelete+0x4e>
 801e32e:	68da      	ldr	r2, [r3, #12]
 801e330:	4290      	cmp	r0, r2
 801e332:	d036      	beq.n	801e3a2 <vQueueDelete+0x7e>
 801e334:	695a      	ldr	r2, [r3, #20]
 801e336:	4290      	cmp	r0, r2
 801e338:	d031      	beq.n	801e39e <vQueueDelete+0x7a>
 801e33a:	69da      	ldr	r2, [r3, #28]
 801e33c:	4290      	cmp	r0, r2
 801e33e:	d02c      	beq.n	801e39a <vQueueDelete+0x76>
 801e340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e342:	4290      	cmp	r0, r2
 801e344:	d027      	beq.n	801e396 <vQueueDelete+0x72>
 801e346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e348:	4290      	cmp	r0, r2
 801e34a:	d022      	beq.n	801e392 <vQueueDelete+0x6e>
 801e34c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e34e:	4290      	cmp	r0, r2
 801e350:	d01d      	beq.n	801e38e <vQueueDelete+0x6a>
 801e352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e354:	4290      	cmp	r0, r2
 801e356:	d018      	beq.n	801e38a <vQueueDelete+0x66>
		vPortFree( pxQueue );
 801e358:	f001 b942 	b.w	801f5e0 <vPortFree>
 801e35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e360:	b672      	cpsid	i
 801e362:	f383 8811 	msr	BASEPRI, r3
 801e366:	f3bf 8f6f 	isb	sy
 801e36a:	f3bf 8f4f 	dsb	sy
 801e36e:	b662      	cpsie	i
 801e370:	e7fe      	b.n	801e370 <vQueueDelete+0x4c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801e372:	2200      	movs	r2, #0
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801e374:	2100      	movs	r1, #0
{
 801e376:	b410      	push	{r4}

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801e378:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801e37c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801e380:	6061      	str	r1, [r4, #4]
}
 801e382:	f85d 4b04 	ldr.w	r4, [sp], #4
		vPortFree( pxQueue );
 801e386:	f001 b92b 	b.w	801f5e0 <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801e38a:	2207      	movs	r2, #7
 801e38c:	e7f2      	b.n	801e374 <vQueueDelete+0x50>
 801e38e:	2206      	movs	r2, #6
 801e390:	e7f0      	b.n	801e374 <vQueueDelete+0x50>
 801e392:	2205      	movs	r2, #5
 801e394:	e7ee      	b.n	801e374 <vQueueDelete+0x50>
 801e396:	2204      	movs	r2, #4
 801e398:	e7ec      	b.n	801e374 <vQueueDelete+0x50>
 801e39a:	2203      	movs	r2, #3
 801e39c:	e7ea      	b.n	801e374 <vQueueDelete+0x50>
 801e39e:	2202      	movs	r2, #2
 801e3a0:	e7e8      	b.n	801e374 <vQueueDelete+0x50>
 801e3a2:	2201      	movs	r2, #1
 801e3a4:	e7e6      	b.n	801e374 <vQueueDelete+0x50>
 801e3a6:	bf00      	nop
 801e3a8:	20013240 	.word	0x20013240

0801e3ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801e3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801e3ae:	4b1b      	ldr	r3, [pc, #108]	; (801e41c <prvAddCurrentTaskToDelayedList+0x70>)
{
 801e3b0:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801e3b2:	4d1b      	ldr	r5, [pc, #108]	; (801e420 <prvAddCurrentTaskToDelayedList+0x74>)
{
 801e3b4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 801e3b6:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801e3b8:	6828      	ldr	r0, [r5, #0]
 801e3ba:	3004      	adds	r0, #4
 801e3bc:	f7ff f90c 	bl	801d5d8 <uxListRemove>
 801e3c0:	b940      	cbnz	r0, 801e3d4 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801e3c2:	682b      	ldr	r3, [r5, #0]
 801e3c4:	2201      	movs	r2, #1
 801e3c6:	4917      	ldr	r1, [pc, #92]	; (801e424 <prvAddCurrentTaskToDelayedList+0x78>)
 801e3c8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801e3ca:	680b      	ldr	r3, [r1, #0]
 801e3cc:	4082      	lsls	r2, r0
 801e3ce:	ea23 0302 	bic.w	r3, r3, r2
 801e3d2:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801e3d4:	1c72      	adds	r2, r6, #1
 801e3d6:	d101      	bne.n	801e3dc <prvAddCurrentTaskToDelayedList+0x30>
 801e3d8:	07fb      	lsls	r3, r7, #31
 801e3da:	d417      	bmi.n	801e40c <prvAddCurrentTaskToDelayedList+0x60>
 801e3dc:	19a4      	adds	r4, r4, r6
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801e3de:	682b      	ldr	r3, [r5, #0]
 801e3e0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 801e3e2:	d20b      	bcs.n	801e3fc <prvAddCurrentTaskToDelayedList+0x50>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801e3e4:	4b10      	ldr	r3, [pc, #64]	; (801e428 <prvAddCurrentTaskToDelayedList+0x7c>)
 801e3e6:	6818      	ldr	r0, [r3, #0]
 801e3e8:	6829      	ldr	r1, [r5, #0]
 801e3ea:	3104      	adds	r1, #4
 801e3ec:	f7ff f8da 	bl	801d5a4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 801e3f0:	4b0e      	ldr	r3, [pc, #56]	; (801e42c <prvAddCurrentTaskToDelayedList+0x80>)
 801e3f2:	681a      	ldr	r2, [r3, #0]
 801e3f4:	42a2      	cmp	r2, r4
 801e3f6:	d900      	bls.n	801e3fa <prvAddCurrentTaskToDelayedList+0x4e>
				{
					xNextTaskUnblockTime = xTimeToWake;
 801e3f8:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801e3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801e3fc:	4b0c      	ldr	r3, [pc, #48]	; (801e430 <prvAddCurrentTaskToDelayedList+0x84>)
 801e3fe:	6818      	ldr	r0, [r3, #0]
 801e400:	6829      	ldr	r1, [r5, #0]
}
 801e402:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801e406:	3104      	adds	r1, #4
 801e408:	f7ff b8cc 	b.w	801d5a4 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801e40c:	6829      	ldr	r1, [r5, #0]
 801e40e:	4809      	ldr	r0, [pc, #36]	; (801e434 <prvAddCurrentTaskToDelayedList+0x88>)
 801e410:	3104      	adds	r1, #4
}
 801e412:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801e416:	f7ff b8b5 	b.w	801d584 <vListInsertEnd>
 801e41a:	bf00      	nop
 801e41c:	20006388 	.word	0x20006388
 801e420:	20006264 	.word	0x20006264
 801e424:	20006310 	.word	0x20006310
 801e428:	20006268 	.word	0x20006268
 801e42c:	20006340 	.word	0x20006340
 801e430:	2000626c 	.word	0x2000626c
 801e434:	20006360 	.word	0x20006360

0801e438 <prvIdleTask>:
{
 801e438:	b580      	push	{r7, lr}
 801e43a:	4d17      	ldr	r5, [pc, #92]	; (801e498 <prvIdleTask+0x60>)
				taskYIELD();
 801e43c:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 801e440:	4f16      	ldr	r7, [pc, #88]	; (801e49c <prvIdleTask+0x64>)
 801e442:	4e17      	ldr	r6, [pc, #92]	; (801e4a0 <prvIdleTask+0x68>)
 801e444:	f8df 805c 	ldr.w	r8, [pc, #92]	; 801e4a4 <prvIdleTask+0x6c>
 801e448:	f8df 905c 	ldr.w	r9, [pc, #92]	; 801e4a8 <prvIdleTask+0x70>
 801e44c:	e014      	b.n	801e478 <prvIdleTask+0x40>
			taskENTER_CRITICAL();
 801e44e:	f000 fec1 	bl	801f1d4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 801e452:	68fb      	ldr	r3, [r7, #12]
 801e454:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801e456:	1d20      	adds	r0, r4, #4
 801e458:	f7ff f8be 	bl	801d5d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801e45c:	6833      	ldr	r3, [r6, #0]
 801e45e:	3b01      	subs	r3, #1
 801e460:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 801e462:	682b      	ldr	r3, [r5, #0]
 801e464:	3b01      	subs	r3, #1
 801e466:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 801e468:	f000 feda 	bl	801f220 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 801e46c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e46e:	f001 f8b7 	bl	801f5e0 <vPortFree>
			vPortFree( pxTCB );
 801e472:	4620      	mov	r0, r4
 801e474:	f001 f8b4 	bl	801f5e0 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801e478:	682b      	ldr	r3, [r5, #0]
 801e47a:	2b00      	cmp	r3, #0
 801e47c:	d1e7      	bne.n	801e44e <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801e47e:	f8d8 3000 	ldr.w	r3, [r8]
 801e482:	2b01      	cmp	r3, #1
 801e484:	d905      	bls.n	801e492 <prvIdleTask+0x5a>
				taskYIELD();
 801e486:	f8c9 a000 	str.w	sl, [r9]
 801e48a:	f3bf 8f4f 	dsb	sy
 801e48e:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 801e492:	f7e5 fb3b 	bl	8003b0c <vApplicationIdleHook>
   		prvCheckTasksWaitingTermination();
 801e496:	e7ef      	b.n	801e478 <prvIdleTask+0x40>
 801e498:	20006300 	.word	0x20006300
 801e49c:	20006374 	.word	0x20006374
 801e4a0:	200062fc 	.word	0x200062fc
 801e4a4:	20006270 	.word	0x20006270
 801e4a8:	e000ed04 	.word	0xe000ed04

0801e4ac <xTaskCreate>:
	{
 801e4ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e4b0:	0096      	lsls	r6, r2, #2
	{
 801e4b2:	4680      	mov	r8, r0
 801e4b4:	460d      	mov	r5, r1
 801e4b6:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e4b8:	4630      	mov	r0, r6
	{
 801e4ba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e4bc:	f000 fff2 	bl	801f4a4 <pvPortMalloc>
			if( pxStack != NULL )
 801e4c0:	2800      	cmp	r0, #0
 801e4c2:	f000 810e 	beq.w	801e6e2 <xTaskCreate+0x236>
 801e4c6:	4682      	mov	sl, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801e4c8:	2058      	movs	r0, #88	; 0x58
 801e4ca:	f000 ffeb 	bl	801f4a4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801e4ce:	4604      	mov	r4, r0
 801e4d0:	2800      	cmp	r0, #0
 801e4d2:	f000 80da 	beq.w	801e68a <xTaskCreate+0x1de>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801e4d6:	4632      	mov	r2, r6
					pxNewTCB->pxStack = pxStack;
 801e4d8:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801e4dc:	21a5      	movs	r1, #165	; 0xa5
 801e4de:	4650      	mov	r0, sl
 801e4e0:	f001 f918 	bl	801f714 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801e4e4:	3e04      	subs	r6, #4
 801e4e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e4e8:	782a      	ldrb	r2, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801e4ea:	441e      	add	r6, r3
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e4ec:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 801e4f0:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 801e4f2:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	d04d      	beq.n	801e596 <xTaskCreate+0xea>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e4fa:	786b      	ldrb	r3, [r5, #1]
 801e4fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 801e500:	786b      	ldrb	r3, [r5, #1]
 801e502:	2b00      	cmp	r3, #0
 801e504:	d047      	beq.n	801e596 <xTaskCreate+0xea>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e506:	78ab      	ldrb	r3, [r5, #2]
 801e508:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 801e50c:	78ab      	ldrb	r3, [r5, #2]
 801e50e:	2b00      	cmp	r3, #0
 801e510:	d041      	beq.n	801e596 <xTaskCreate+0xea>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e512:	78eb      	ldrb	r3, [r5, #3]
 801e514:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 801e518:	78eb      	ldrb	r3, [r5, #3]
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	d03b      	beq.n	801e596 <xTaskCreate+0xea>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e51e:	792b      	ldrb	r3, [r5, #4]
 801e520:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 801e524:	792b      	ldrb	r3, [r5, #4]
 801e526:	2b00      	cmp	r3, #0
 801e528:	d035      	beq.n	801e596 <xTaskCreate+0xea>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e52a:	796b      	ldrb	r3, [r5, #5]
 801e52c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 801e530:	796b      	ldrb	r3, [r5, #5]
 801e532:	2b00      	cmp	r3, #0
 801e534:	d02f      	beq.n	801e596 <xTaskCreate+0xea>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e536:	79ab      	ldrb	r3, [r5, #6]
 801e538:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 801e53c:	79ab      	ldrb	r3, [r5, #6]
 801e53e:	b353      	cbz	r3, 801e596 <xTaskCreate+0xea>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e540:	79eb      	ldrb	r3, [r5, #7]
 801e542:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 801e546:	79eb      	ldrb	r3, [r5, #7]
 801e548:	b32b      	cbz	r3, 801e596 <xTaskCreate+0xea>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e54a:	7a2b      	ldrb	r3, [r5, #8]
 801e54c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 801e550:	7a2b      	ldrb	r3, [r5, #8]
 801e552:	b303      	cbz	r3, 801e596 <xTaskCreate+0xea>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e554:	7a6b      	ldrb	r3, [r5, #9]
 801e556:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 801e55a:	7a6b      	ldrb	r3, [r5, #9]
 801e55c:	b1db      	cbz	r3, 801e596 <xTaskCreate+0xea>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e55e:	7aab      	ldrb	r3, [r5, #10]
 801e560:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 801e564:	7aab      	ldrb	r3, [r5, #10]
 801e566:	b1b3      	cbz	r3, 801e596 <xTaskCreate+0xea>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e568:	7aeb      	ldrb	r3, [r5, #11]
 801e56a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 801e56e:	7aeb      	ldrb	r3, [r5, #11]
 801e570:	b18b      	cbz	r3, 801e596 <xTaskCreate+0xea>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e572:	7b2b      	ldrb	r3, [r5, #12]
 801e574:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 801e578:	7b2b      	ldrb	r3, [r5, #12]
 801e57a:	b163      	cbz	r3, 801e596 <xTaskCreate+0xea>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e57c:	7b6b      	ldrb	r3, [r5, #13]
 801e57e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 801e582:	7b6b      	ldrb	r3, [r5, #13]
 801e584:	b13b      	cbz	r3, 801e596 <xTaskCreate+0xea>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e586:	7bab      	ldrb	r3, [r5, #14]
 801e588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 801e58c:	7bab      	ldrb	r3, [r5, #14]
 801e58e:	b113      	cbz	r3, 801e596 <xTaskCreate+0xea>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e590:	7beb      	ldrb	r3, [r5, #15]
 801e592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e596:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801e598:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801e59c:	f104 0a04 	add.w	sl, r4, #4
 801e5a0:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801e5a2:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801e5a6:	4650      	mov	r0, sl
		pxNewTCB->uxMutexesHeld = 0;
 801e5a8:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 801e5ac:	bf28      	it	cs
 801e5ae:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 801e5b0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 801e5b2:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e5b4:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801e5b8:	f7fe ffe0 	bl	801d57c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801e5bc:	f104 0018 	add.w	r0, r4, #24
 801e5c0:	f7fe ffdc 	bl	801d57c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 801e5c4:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801e5c8:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e5ca:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801e5cc:	4641      	mov	r1, r8
		pxNewTCB->pxTaskTag = NULL;
 801e5ce:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801e5d2:	4630      	mov	r0, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801e5d4:	f884 b054 	strb.w	fp, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801e5d8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801e5da:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801e5dc:	f000 fdd0 	bl	801f180 <pxPortInitialiseStack>
 801e5e0:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 801e5e2:	b107      	cbz	r7, 801e5e6 <xTaskCreate+0x13a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801e5e4:	603c      	str	r4, [r7, #0]
	taskENTER_CRITICAL();
 801e5e6:	f000 fdf5 	bl	801f1d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 801e5ea:	4a3f      	ldr	r2, [pc, #252]	; (801e6e8 <xTaskCreate+0x23c>)
		if( pxCurrentTCB == NULL )
 801e5ec:	4e3f      	ldr	r6, [pc, #252]	; (801e6ec <xTaskCreate+0x240>)
		uxCurrentNumberOfTasks++;
 801e5ee:	6813      	ldr	r3, [r2, #0]
 801e5f0:	3301      	adds	r3, #1
 801e5f2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801e5f4:	6833      	ldr	r3, [r6, #0]
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d03e      	beq.n	801e678 <xTaskCreate+0x1cc>
			if( xSchedulerRunning == pdFALSE )
 801e5fa:	4f3d      	ldr	r7, [pc, #244]	; (801e6f0 <xTaskCreate+0x244>)
 801e5fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801e5fe:	683a      	ldr	r2, [r7, #0]
 801e600:	b37a      	cbz	r2, 801e662 <xTaskCreate+0x1b6>
 801e602:	f8df 810c 	ldr.w	r8, [pc, #268]	; 801e710 <xTaskCreate+0x264>
		uxTaskNumber++;
 801e606:	f8df e10c 	ldr.w	lr, [pc, #268]	; 801e714 <xTaskCreate+0x268>
		prvAddTaskToReadyList( pxNewTCB );
 801e60a:	f04f 0b01 	mov.w	fp, #1
 801e60e:	f8df c108 	ldr.w	ip, [pc, #264]	; 801e718 <xTaskCreate+0x26c>
 801e612:	4651      	mov	r1, sl
		uxTaskNumber++;
 801e614:	f8de 5000 	ldr.w	r5, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 801e618:	fa0b f203 	lsl.w	r2, fp, r3
 801e61c:	f8dc 0000 	ldr.w	r0, [ip]
 801e620:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		uxTaskNumber++;
 801e624:	eb05 090b 	add.w	r9, r5, fp
		prvAddTaskToReadyList( pxNewTCB );
 801e628:	4302      	orrs	r2, r0
 801e62a:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 801e62e:	f8ce 9000 	str.w	r9, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 801e632:	f8cc 2000 	str.w	r2, [ip]
 801e636:	f7fe ffa5 	bl	801d584 <vListInsertEnd>
	taskEXIT_CRITICAL();
 801e63a:	f000 fdf1 	bl	801f220 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 801e63e:	683b      	ldr	r3, [r7, #0]
 801e640:	b1bb      	cbz	r3, 801e672 <xTaskCreate+0x1c6>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801e642:	6832      	ldr	r2, [r6, #0]
 801e644:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801e646:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801e648:	429a      	cmp	r2, r3
 801e64a:	d212      	bcs.n	801e672 <xTaskCreate+0x1c6>
			taskYIELD_IF_USING_PREEMPTION();
 801e64c:	4b29      	ldr	r3, [pc, #164]	; (801e6f4 <xTaskCreate+0x248>)
 801e64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e652:	601a      	str	r2, [r3, #0]
 801e654:	f3bf 8f4f 	dsb	sy
 801e658:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 801e65c:	4658      	mov	r0, fp
	}
 801e65e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801e662:	6832      	ldr	r2, [r6, #0]
 801e664:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 801e710 <xTaskCreate+0x264>
 801e668:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801e66a:	429a      	cmp	r2, r3
 801e66c:	d8cb      	bhi.n	801e606 <xTaskCreate+0x15a>
					pxCurrentTCB = pxNewTCB;
 801e66e:	6034      	str	r4, [r6, #0]
 801e670:	e7c9      	b.n	801e606 <xTaskCreate+0x15a>
			xReturn = pdPASS;
 801e672:	4658      	mov	r0, fp
	}
 801e674:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 801e678:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801e67a:	6813      	ldr	r3, [r2, #0]
 801e67c:	2b01      	cmp	r3, #1
 801e67e:	d00b      	beq.n	801e698 <xTaskCreate+0x1ec>
 801e680:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801e682:	f8df 808c 	ldr.w	r8, [pc, #140]	; 801e710 <xTaskCreate+0x264>
 801e686:	4f1a      	ldr	r7, [pc, #104]	; (801e6f0 <xTaskCreate+0x244>)
 801e688:	e7bd      	b.n	801e606 <xTaskCreate+0x15a>
					vPortFree( pxStack );
 801e68a:	4650      	mov	r0, sl
 801e68c:	f000 ffa8 	bl	801f5e0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801e690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 801e694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e698:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801e710 <xTaskCreate+0x264>
 801e69c:	4645      	mov	r5, r8
 801e69e:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801e6a2:	4628      	mov	r0, r5
 801e6a4:	3514      	adds	r5, #20
 801e6a6:	f7fe ff5d 	bl	801d564 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801e6aa:	42bd      	cmp	r5, r7
 801e6ac:	d1f9      	bne.n	801e6a2 <xTaskCreate+0x1f6>
	vListInitialise( &xDelayedTaskList1 );
 801e6ae:	f8df 906c 	ldr.w	r9, [pc, #108]	; 801e71c <xTaskCreate+0x270>
	vListInitialise( &xDelayedTaskList2 );
 801e6b2:	4d11      	ldr	r5, [pc, #68]	; (801e6f8 <xTaskCreate+0x24c>)
	vListInitialise( &xDelayedTaskList1 );
 801e6b4:	4648      	mov	r0, r9
 801e6b6:	4f0e      	ldr	r7, [pc, #56]	; (801e6f0 <xTaskCreate+0x244>)
 801e6b8:	f7fe ff54 	bl	801d564 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801e6bc:	4628      	mov	r0, r5
 801e6be:	f7fe ff51 	bl	801d564 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801e6c2:	480e      	ldr	r0, [pc, #56]	; (801e6fc <xTaskCreate+0x250>)
 801e6c4:	f7fe ff4e 	bl	801d564 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 801e6c8:	480d      	ldr	r0, [pc, #52]	; (801e700 <xTaskCreate+0x254>)
 801e6ca:	f7fe ff4b 	bl	801d564 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 801e6ce:	480d      	ldr	r0, [pc, #52]	; (801e704 <xTaskCreate+0x258>)
 801e6d0:	f7fe ff48 	bl	801d564 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801e6d4:	4b0c      	ldr	r3, [pc, #48]	; (801e708 <xTaskCreate+0x25c>)
	pxDelayedTaskList = &xDelayedTaskList1;
 801e6d6:	4a0d      	ldr	r2, [pc, #52]	; (801e70c <xTaskCreate+0x260>)
 801e6d8:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801e6dc:	601d      	str	r5, [r3, #0]
 801e6de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801e6e0:	e791      	b.n	801e606 <xTaskCreate+0x15a>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801e6e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e6e6:	e7ba      	b.n	801e65e <xTaskCreate+0x1b2>
 801e6e8:	200062fc 	.word	0x200062fc
 801e6ec:	20006264 	.word	0x20006264
 801e6f0:	2000635c 	.word	0x2000635c
 801e6f4:	e000ed04 	.word	0xe000ed04
 801e6f8:	20006328 	.word	0x20006328
 801e6fc:	20006348 	.word	0x20006348
 801e700:	20006374 	.word	0x20006374
 801e704:	20006360 	.word	0x20006360
 801e708:	2000626c 	.word	0x2000626c
 801e70c:	20006268 	.word	0x20006268
 801e710:	20006270 	.word	0x20006270
 801e714:	2000630c 	.word	0x2000630c
 801e718:	20006310 	.word	0x20006310
 801e71c:	20006314 	.word	0x20006314

0801e720 <vTaskStartScheduler>:
{
 801e720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e724:	f44f 7000 	mov.w	r0, #512	; 0x200
 801e728:	f000 febc 	bl	801f4a4 <pvPortMalloc>
			if( pxStack != NULL )
 801e72c:	2800      	cmp	r0, #0
 801e72e:	f000 8099 	beq.w	801e864 <vTaskStartScheduler+0x144>
 801e732:	4605      	mov	r5, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801e734:	2058      	movs	r0, #88	; 0x58
 801e736:	f000 feb5 	bl	801f4a4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801e73a:	4604      	mov	r4, r0
 801e73c:	2800      	cmp	r0, #0
 801e73e:	f000 808e 	beq.w	801e85e <vTaskStartScheduler+0x13e>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801e742:	21a5      	movs	r1, #165	; 0xa5
					pxNewTCB->pxStack = pxStack;
 801e744:	6305      	str	r5, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801e746:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e74a:	4628      	mov	r0, r5
 801e74c:	f000 ffe2 	bl	801f714 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801e750:	6b23      	ldr	r3, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e752:	2500      	movs	r5, #0
 801e754:	4a5c      	ldr	r2, [pc, #368]	; (801e8c8 <vTaskStartScheduler+0x1a8>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801e756:	f104 0804 	add.w	r8, r4, #4
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801e75a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e75e:	6362      	str	r2, [r4, #52]	; 0x34
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801e760:	4640      	mov	r0, r8
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e762:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801e766:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 801e76a:	f023 0607 	bic.w	r6, r3, #7
	pxNewTCB->uxPriority = uxPriority;
 801e76e:	62e5      	str	r5, [r4, #44]	; 0x2c
		if( pxCurrentTCB == NULL )
 801e770:	4f56      	ldr	r7, [pc, #344]	; (801e8cc <vTaskStartScheduler+0x1ac>)
		pxNewTCB->uxMutexesHeld = 0;
 801e772:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801e776:	f7fe ff01 	bl	801d57c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801e77a:	f104 0018 	add.w	r0, r4, #24
 801e77e:	f7fe fefd 	bl	801d57c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e782:	2307      	movs	r3, #7
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801e784:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
 801e786:	6525      	str	r5, [r4, #80]	; 0x50
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e788:	61a3      	str	r3, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801e78a:	4630      	mov	r0, r6
 801e78c:	4950      	ldr	r1, [pc, #320]	; (801e8d0 <vTaskStartScheduler+0x1b0>)
		pxNewTCB->pxTaskTag = NULL;
 801e78e:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801e790:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801e794:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801e796:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801e798:	f000 fcf2 	bl	801f180 <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801e79c:	4b4d      	ldr	r3, [pc, #308]	; (801e8d4 <vTaskStartScheduler+0x1b4>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801e79e:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801e7a0:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 801e7a2:	f000 fd17 	bl	801f1d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 801e7a6:	4b4c      	ldr	r3, [pc, #304]	; (801e8d8 <vTaskStartScheduler+0x1b8>)
 801e7a8:	681a      	ldr	r2, [r3, #0]
 801e7aa:	3201      	adds	r2, #1
 801e7ac:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 801e7ae:	683a      	ldr	r2, [r7, #0]
 801e7b0:	2a00      	cmp	r2, #0
 801e7b2:	d04c      	beq.n	801e84e <vTaskStartScheduler+0x12e>
			if( xSchedulerRunning == pdFALSE )
 801e7b4:	4e49      	ldr	r6, [pc, #292]	; (801e8dc <vTaskStartScheduler+0x1bc>)
 801e7b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801e7b8:	6833      	ldr	r3, [r6, #0]
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	d040      	beq.n	801e840 <vTaskStartScheduler+0x120>
 801e7be:	4d48      	ldr	r5, [pc, #288]	; (801e8e0 <vTaskStartScheduler+0x1c0>)
		uxTaskNumber++;
 801e7c0:	f8df e140 	ldr.w	lr, [pc, #320]	; 801e904 <vTaskStartScheduler+0x1e4>
		prvAddTaskToReadyList( pxNewTCB );
 801e7c4:	2301      	movs	r3, #1
 801e7c6:	f8df c140 	ldr.w	ip, [pc, #320]	; 801e908 <vTaskStartScheduler+0x1e8>
 801e7ca:	4641      	mov	r1, r8
		uxTaskNumber++;
 801e7cc:	f8de 2000 	ldr.w	r2, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 801e7d0:	4083      	lsls	r3, r0
 801e7d2:	f8dc 8000 	ldr.w	r8, [ip]
 801e7d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		uxTaskNumber++;
 801e7da:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 801e7dc:	ea43 0308 	orr.w	r3, r3, r8
 801e7e0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
		uxTaskNumber++;
 801e7e4:	f8ce 2000 	str.w	r2, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 801e7e8:	f8cc 3000 	str.w	r3, [ip]
 801e7ec:	f7fe feca 	bl	801d584 <vListInsertEnd>
	taskEXIT_CRITICAL();
 801e7f0:	f000 fd16 	bl	801f220 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 801e7f4:	6833      	ldr	r3, [r6, #0]
 801e7f6:	b163      	cbz	r3, 801e812 <vTaskStartScheduler+0xf2>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801e7f8:	683a      	ldr	r2, [r7, #0]
 801e7fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801e7fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801e7fe:	429a      	cmp	r2, r3
 801e800:	d207      	bcs.n	801e812 <vTaskStartScheduler+0xf2>
			taskYIELD_IF_USING_PREEMPTION();
 801e802:	4b38      	ldr	r3, [pc, #224]	; (801e8e4 <vTaskStartScheduler+0x1c4>)
 801e804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e808:	601a      	str	r2, [r3, #0]
 801e80a:	f3bf 8f4f 	dsb	sy
 801e80e:	f3bf 8f6f 	isb	sy
 801e812:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e816:	b672      	cpsid	i
 801e818:	f383 8811 	msr	BASEPRI, r3
 801e81c:	f3bf 8f6f 	isb	sy
 801e820:	f3bf 8f4f 	dsb	sy
 801e824:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 801e826:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801e82a:	482f      	ldr	r0, [pc, #188]	; (801e8e8 <vTaskStartScheduler+0x1c8>)
		xSchedulerRunning = pdTRUE;
 801e82c:	2101      	movs	r1, #1
		xTickCount = ( TickType_t ) 0U;
 801e82e:	4b2f      	ldr	r3, [pc, #188]	; (801e8ec <vTaskStartScheduler+0x1cc>)
 801e830:	2200      	movs	r2, #0
		xNextTaskUnblockTime = portMAX_DELAY;
 801e832:	6004      	str	r4, [r0, #0]
		xSchedulerRunning = pdTRUE;
 801e834:	6031      	str	r1, [r6, #0]
		xTickCount = ( TickType_t ) 0U;
 801e836:	601a      	str	r2, [r3, #0]
}
 801e838:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if( xPortStartScheduler() != pdFALSE )
 801e83c:	f000 bd70 	b.w	801f320 <xPortStartScheduler>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801e840:	683b      	ldr	r3, [r7, #0]
 801e842:	4d27      	ldr	r5, [pc, #156]	; (801e8e0 <vTaskStartScheduler+0x1c0>)
 801e844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e846:	4283      	cmp	r3, r0
 801e848:	d8ba      	bhi.n	801e7c0 <vTaskStartScheduler+0xa0>
					pxCurrentTCB = pxNewTCB;
 801e84a:	603c      	str	r4, [r7, #0]
 801e84c:	e7b8      	b.n	801e7c0 <vTaskStartScheduler+0xa0>
			pxCurrentTCB = pxNewTCB;
 801e84e:	603c      	str	r4, [r7, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801e850:	681b      	ldr	r3, [r3, #0]
 801e852:	2b01      	cmp	r3, #1
 801e854:	d011      	beq.n	801e87a <vTaskStartScheduler+0x15a>
 801e856:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801e858:	4d21      	ldr	r5, [pc, #132]	; (801e8e0 <vTaskStartScheduler+0x1c0>)
 801e85a:	4e20      	ldr	r6, [pc, #128]	; (801e8dc <vTaskStartScheduler+0x1bc>)
 801e85c:	e7b0      	b.n	801e7c0 <vTaskStartScheduler+0xa0>
					vPortFree( pxStack );
 801e85e:	4628      	mov	r0, r5
 801e860:	f000 febe 	bl	801f5e0 <vPortFree>
 801e864:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e868:	b672      	cpsid	i
 801e86a:	f383 8811 	msr	BASEPRI, r3
 801e86e:	f3bf 8f6f 	isb	sy
 801e872:	f3bf 8f4f 	dsb	sy
 801e876:	b662      	cpsie	i
 801e878:	e7fe      	b.n	801e878 <vTaskStartScheduler+0x158>
 801e87a:	4d19      	ldr	r5, [pc, #100]	; (801e8e0 <vTaskStartScheduler+0x1c0>)
 801e87c:	462e      	mov	r6, r5
 801e87e:	f105 098c 	add.w	r9, r5, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801e882:	4630      	mov	r0, r6
 801e884:	3614      	adds	r6, #20
 801e886:	f7fe fe6d 	bl	801d564 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801e88a:	45b1      	cmp	r9, r6
 801e88c:	d1f9      	bne.n	801e882 <vTaskStartScheduler+0x162>
	vListInitialise( &xDelayedTaskList1 );
 801e88e:	f8df a07c 	ldr.w	sl, [pc, #124]	; 801e90c <vTaskStartScheduler+0x1ec>
	vListInitialise( &xDelayedTaskList2 );
 801e892:	f8df 907c 	ldr.w	r9, [pc, #124]	; 801e910 <vTaskStartScheduler+0x1f0>
	vListInitialise( &xDelayedTaskList1 );
 801e896:	4650      	mov	r0, sl
 801e898:	4e10      	ldr	r6, [pc, #64]	; (801e8dc <vTaskStartScheduler+0x1bc>)
 801e89a:	f7fe fe63 	bl	801d564 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801e89e:	4648      	mov	r0, r9
 801e8a0:	f7fe fe60 	bl	801d564 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801e8a4:	4812      	ldr	r0, [pc, #72]	; (801e8f0 <vTaskStartScheduler+0x1d0>)
 801e8a6:	f7fe fe5d 	bl	801d564 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 801e8aa:	4812      	ldr	r0, [pc, #72]	; (801e8f4 <vTaskStartScheduler+0x1d4>)
 801e8ac:	f7fe fe5a 	bl	801d564 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 801e8b0:	4811      	ldr	r0, [pc, #68]	; (801e8f8 <vTaskStartScheduler+0x1d8>)
 801e8b2:	f7fe fe57 	bl	801d564 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 801e8b6:	4a11      	ldr	r2, [pc, #68]	; (801e8fc <vTaskStartScheduler+0x1dc>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801e8b8:	4b11      	ldr	r3, [pc, #68]	; (801e900 <vTaskStartScheduler+0x1e0>)
	pxDelayedTaskList = &xDelayedTaskList1;
 801e8ba:	f8c2 a000 	str.w	sl, [r2]
 801e8be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801e8c0:	f8c3 9000 	str.w	r9, [r3]
 801e8c4:	e77c      	b.n	801e7c0 <vTaskStartScheduler+0xa0>
 801e8c6:	bf00      	nop
 801e8c8:	454c4449 	.word	0x454c4449
 801e8cc:	20006264 	.word	0x20006264
 801e8d0:	0801e439 	.word	0x0801e439
 801e8d4:	2000633c 	.word	0x2000633c
 801e8d8:	200062fc 	.word	0x200062fc
 801e8dc:	2000635c 	.word	0x2000635c
 801e8e0:	20006270 	.word	0x20006270
 801e8e4:	e000ed04 	.word	0xe000ed04
 801e8e8:	20006340 	.word	0x20006340
 801e8ec:	20006388 	.word	0x20006388
 801e8f0:	20006348 	.word	0x20006348
 801e8f4:	20006374 	.word	0x20006374
 801e8f8:	20006360 	.word	0x20006360
 801e8fc:	20006268 	.word	0x20006268
 801e900:	2000626c 	.word	0x2000626c
 801e904:	2000630c 	.word	0x2000630c
 801e908:	20006310 	.word	0x20006310
 801e90c:	20006314 	.word	0x20006314
 801e910:	20006328 	.word	0x20006328

0801e914 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 801e914:	4a02      	ldr	r2, [pc, #8]	; (801e920 <vTaskSuspendAll+0xc>)
 801e916:	6813      	ldr	r3, [r2, #0]
 801e918:	3301      	adds	r3, #1
 801e91a:	6013      	str	r3, [r2, #0]
}
 801e91c:	4770      	bx	lr
 801e91e:	bf00      	nop
 801e920:	20006308 	.word	0x20006308

0801e924 <xTaskGetTickCount>:
		xTicks = xTickCount;
 801e924:	4b01      	ldr	r3, [pc, #4]	; (801e92c <xTaskGetTickCount+0x8>)
 801e926:	6818      	ldr	r0, [r3, #0]
}
 801e928:	4770      	bx	lr
 801e92a:	bf00      	nop
 801e92c:	20006388 	.word	0x20006388

0801e930 <xTaskGetTickCountFromISR>:
{
 801e930:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801e932:	f000 fd5d 	bl	801f3f0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 801e936:	4b01      	ldr	r3, [pc, #4]	; (801e93c <xTaskGetTickCountFromISR+0xc>)
 801e938:	6818      	ldr	r0, [r3, #0]
}
 801e93a:	bd08      	pop	{r3, pc}
 801e93c:	20006388 	.word	0x20006388

0801e940 <xTaskIncrementTick>:
{
 801e940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801e944:	4b4a      	ldr	r3, [pc, #296]	; (801ea70 <xTaskIncrementTick+0x130>)
 801e946:	681b      	ldr	r3, [r3, #0]
 801e948:	b9cb      	cbnz	r3, 801e97e <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801e94a:	4b4a      	ldr	r3, [pc, #296]	; (801ea74 <xTaskIncrementTick+0x134>)
 801e94c:	681e      	ldr	r6, [r3, #0]
 801e94e:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 801e950:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801e952:	b30e      	cbz	r6, 801e998 <xTaskIncrementTick+0x58>
 801e954:	f8df b13c 	ldr.w	fp, [pc, #316]	; 801ea94 <xTaskIncrementTick+0x154>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801e958:	f8db 2000 	ldr.w	r2, [fp]
BaseType_t xSwitchRequired = pdFALSE;
 801e95c:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 801e95e:	42b2      	cmp	r2, r6
 801e960:	d92a      	bls.n	801e9b8 <xTaskIncrementTick+0x78>
 801e962:	4f45      	ldr	r7, [pc, #276]	; (801ea78 <xTaskIncrementTick+0x138>)
 801e964:	f8df 8130 	ldr.w	r8, [pc, #304]	; 801ea98 <xTaskIncrementTick+0x158>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801e968:	f8d8 3000 	ldr.w	r3, [r8]
 801e96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e96e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801e972:	009b      	lsls	r3, r3, #2
 801e974:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 801e976:	2b02      	cmp	r3, #2
 801e978:	bf28      	it	cs
 801e97a:	2501      	movcs	r5, #1
 801e97c:	e004      	b.n	801e988 <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 801e97e:	4a3f      	ldr	r2, [pc, #252]	; (801ea7c <xTaskIncrementTick+0x13c>)
BaseType_t xSwitchRequired = pdFALSE;
 801e980:	2500      	movs	r5, #0
		++uxPendedTicks;
 801e982:	6813      	ldr	r3, [r2, #0]
 801e984:	3301      	adds	r3, #1
 801e986:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 801e988:	4b3d      	ldr	r3, [pc, #244]	; (801ea80 <xTaskIncrementTick+0x140>)
 801e98a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 801e98c:	2b00      	cmp	r3, #0
}
 801e98e:	bf0c      	ite	eq
 801e990:	4628      	moveq	r0, r5
 801e992:	2001      	movne	r0, #1
 801e994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 801e998:	4c3a      	ldr	r4, [pc, #232]	; (801ea84 <xTaskIncrementTick+0x144>)
 801e99a:	6823      	ldr	r3, [r4, #0]
 801e99c:	681b      	ldr	r3, [r3, #0]
 801e99e:	2b00      	cmp	r3, #0
 801e9a0:	d04a      	beq.n	801ea38 <xTaskIncrementTick+0xf8>
 801e9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e9a6:	b672      	cpsid	i
 801e9a8:	f383 8811 	msr	BASEPRI, r3
 801e9ac:	f3bf 8f6f 	isb	sy
 801e9b0:	f3bf 8f4f 	dsb	sy
 801e9b4:	b662      	cpsie	i
 801e9b6:	e7fe      	b.n	801e9b6 <xTaskIncrementTick+0x76>
 801e9b8:	4c32      	ldr	r4, [pc, #200]	; (801ea84 <xTaskIncrementTick+0x144>)
 801e9ba:	4f2f      	ldr	r7, [pc, #188]	; (801ea78 <xTaskIncrementTick+0x138>)
 801e9bc:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 801ea98 <xTaskIncrementTick+0x158>
 801e9c0:	e02e      	b.n	801ea20 <xTaskIncrementTick+0xe0>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801e9c2:	6822      	ldr	r2, [r4, #0]
 801e9c4:	68d2      	ldr	r2, [r2, #12]
 801e9c6:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801e9ca:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801e9ce:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 801e9d2:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801e9d4:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 801e9d6:	d32c      	bcc.n	801ea32 <xTaskIncrementTick+0xf2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801e9d8:	f7fe fdfe 	bl	801d5d8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801e9dc:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801e9e0:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801e9e4:	b109      	cbz	r1, 801e9ea <xTaskIncrementTick+0xaa>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801e9e6:	f7fe fdf7 	bl	801d5d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801e9ea:	4a27      	ldr	r2, [pc, #156]	; (801ea88 <xTaskIncrementTick+0x148>)
 801e9ec:	f04f 0c01 	mov.w	ip, #1
 801e9f0:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 801e9f4:	4651      	mov	r1, sl
 801e9f6:	6813      	ldr	r3, [r2, #0]
 801e9f8:	fa0c fc00 	lsl.w	ip, ip, r0
 801e9fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ea00:	ea4c 0c03 	orr.w	ip, ip, r3
 801ea04:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801ea08:	f8c2 c000 	str.w	ip, [r2]
 801ea0c:	f7fe fdba 	bl	801d584 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ea10:	f8d8 0000 	ldr.w	r0, [r8]
 801ea14:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 801ea18:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 801ea1a:	4291      	cmp	r1, r2
 801ea1c:	bf28      	it	cs
 801ea1e:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801ea20:	6822      	ldr	r2, [r4, #0]
 801ea22:	6812      	ldr	r2, [r2, #0]
 801ea24:	2a00      	cmp	r2, #0
 801ea26:	d1cc      	bne.n	801e9c2 <xTaskIncrementTick+0x82>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ea28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ea2c:	f8cb 2000 	str.w	r2, [fp]
					break;
 801ea30:	e79a      	b.n	801e968 <xTaskIncrementTick+0x28>
						xNextTaskUnblockTime = xItemValue;
 801ea32:	f8cb 1000 	str.w	r1, [fp]
						break;
 801ea36:	e797      	b.n	801e968 <xTaskIncrementTick+0x28>
			taskSWITCH_DELAYED_LISTS();
 801ea38:	4b14      	ldr	r3, [pc, #80]	; (801ea8c <xTaskIncrementTick+0x14c>)
 801ea3a:	6821      	ldr	r1, [r4, #0]
 801ea3c:	4a14      	ldr	r2, [pc, #80]	; (801ea90 <xTaskIncrementTick+0x150>)
 801ea3e:	6818      	ldr	r0, [r3, #0]
 801ea40:	6020      	str	r0, [r4, #0]
 801ea42:	6019      	str	r1, [r3, #0]
 801ea44:	6813      	ldr	r3, [r2, #0]
 801ea46:	3301      	adds	r3, #1
 801ea48:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801ea4a:	6823      	ldr	r3, [r4, #0]
 801ea4c:	681b      	ldr	r3, [r3, #0]
 801ea4e:	b933      	cbnz	r3, 801ea5e <xTaskIncrementTick+0x11e>
		xNextTaskUnblockTime = portMAX_DELAY;
 801ea50:	f8df b040 	ldr.w	fp, [pc, #64]	; 801ea94 <xTaskIncrementTick+0x154>
 801ea54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ea58:	f8cb 2000 	str.w	r2, [fp]
 801ea5c:	e77c      	b.n	801e958 <xTaskIncrementTick+0x18>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801ea5e:	6822      	ldr	r2, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801ea60:	f8df b030 	ldr.w	fp, [pc, #48]	; 801ea94 <xTaskIncrementTick+0x154>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801ea64:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801ea66:	68d2      	ldr	r2, [r2, #12]
 801ea68:	6852      	ldr	r2, [r2, #4]
 801ea6a:	f8cb 2000 	str.w	r2, [fp]
 801ea6e:	e773      	b.n	801e958 <xTaskIncrementTick+0x18>
 801ea70:	20006308 	.word	0x20006308
 801ea74:	20006388 	.word	0x20006388
 801ea78:	20006270 	.word	0x20006270
 801ea7c:	20006304 	.word	0x20006304
 801ea80:	2000638c 	.word	0x2000638c
 801ea84:	20006268 	.word	0x20006268
 801ea88:	20006310 	.word	0x20006310
 801ea8c:	2000626c 	.word	0x2000626c
 801ea90:	20006344 	.word	0x20006344
 801ea94:	20006340 	.word	0x20006340
 801ea98:	20006264 	.word	0x20006264

0801ea9c <xTaskResumeAll>:
{
 801ea9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 801eaa0:	4c38      	ldr	r4, [pc, #224]	; (801eb84 <xTaskResumeAll+0xe8>)
 801eaa2:	6823      	ldr	r3, [r4, #0]
 801eaa4:	b953      	cbnz	r3, 801eabc <xTaskResumeAll+0x20>
 801eaa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eaaa:	b672      	cpsid	i
 801eaac:	f383 8811 	msr	BASEPRI, r3
 801eab0:	f3bf 8f6f 	isb	sy
 801eab4:	f3bf 8f4f 	dsb	sy
 801eab8:	b662      	cpsie	i
 801eaba:	e7fe      	b.n	801eaba <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 801eabc:	f000 fb8a 	bl	801f1d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801eac0:	6823      	ldr	r3, [r4, #0]
 801eac2:	3b01      	subs	r3, #1
 801eac4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801eac6:	6824      	ldr	r4, [r4, #0]
 801eac8:	bb74      	cbnz	r4, 801eb28 <xTaskResumeAll+0x8c>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801eaca:	4b2f      	ldr	r3, [pc, #188]	; (801eb88 <xTaskResumeAll+0xec>)
 801eacc:	681b      	ldr	r3, [r3, #0]
 801eace:	b35b      	cbz	r3, 801eb28 <xTaskResumeAll+0x8c>
 801ead0:	4d2e      	ldr	r5, [pc, #184]	; (801eb8c <xTaskResumeAll+0xf0>)
 801ead2:	4f2f      	ldr	r7, [pc, #188]	; (801eb90 <xTaskResumeAll+0xf4>)
					prvAddTaskToReadyList( pxTCB );
 801ead4:	4e2f      	ldr	r6, [pc, #188]	; (801eb94 <xTaskResumeAll+0xf8>)
 801ead6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 801eba8 <xTaskResumeAll+0x10c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801eada:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 801ebac <xTaskResumeAll+0x110>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801eade:	683b      	ldr	r3, [r7, #0]
					prvAddTaskToReadyList( pxTCB );
 801eae0:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801eae4:	b333      	cbz	r3, 801eb34 <xTaskResumeAll+0x98>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 801eae6:	68fb      	ldr	r3, [r7, #12]
 801eae8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801eaea:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801eaee:	f104 0018 	add.w	r0, r4, #24
 801eaf2:	f7fe fd71 	bl	801d5d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801eaf6:	4650      	mov	r0, sl
 801eaf8:	f7fe fd6e 	bl	801d5d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801eafc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801eafe:	6832      	ldr	r2, [r6, #0]
 801eb00:	4651      	mov	r1, sl
 801eb02:	fa08 f300 	lsl.w	r3, r8, r0
 801eb06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801eb0a:	4313      	orrs	r3, r2
 801eb0c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 801eb10:	6033      	str	r3, [r6, #0]
 801eb12:	f7fe fd37 	bl	801d584 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801eb16:	f8db 3000 	ldr.w	r3, [fp]
 801eb1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801eb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb1e:	429a      	cmp	r2, r3
 801eb20:	d3dd      	bcc.n	801eade <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 801eb22:	f8c5 8000 	str.w	r8, [r5]
 801eb26:	e7da      	b.n	801eade <xTaskResumeAll+0x42>
BaseType_t xAlreadyYielded = pdFALSE;
 801eb28:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801eb2a:	f000 fb79 	bl	801f220 <vPortExitCritical>
}
 801eb2e:	4620      	mov	r0, r4
 801eb30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 801eb34:	b13c      	cbz	r4, 801eb46 <xTaskResumeAll+0xaa>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801eb36:	4b18      	ldr	r3, [pc, #96]	; (801eb98 <xTaskResumeAll+0xfc>)
 801eb38:	681a      	ldr	r2, [r3, #0]
 801eb3a:	6812      	ldr	r2, [r2, #0]
 801eb3c:	b9da      	cbnz	r2, 801eb76 <xTaskResumeAll+0xda>
		xNextTaskUnblockTime = portMAX_DELAY;
 801eb3e:	4b17      	ldr	r3, [pc, #92]	; (801eb9c <xTaskResumeAll+0x100>)
 801eb40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801eb44:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801eb46:	4e16      	ldr	r6, [pc, #88]	; (801eba0 <xTaskResumeAll+0x104>)
 801eb48:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801eb4a:	b13c      	cbz	r4, 801eb5c <xTaskResumeAll+0xc0>
								xYieldPending = pdTRUE;
 801eb4c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 801eb4e:	f7ff fef7 	bl	801e940 <xTaskIncrementTick>
 801eb52:	b100      	cbz	r0, 801eb56 <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 801eb54:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801eb56:	3c01      	subs	r4, #1
 801eb58:	d1f9      	bne.n	801eb4e <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 801eb5a:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 801eb5c:	682b      	ldr	r3, [r5, #0]
 801eb5e:	2b00      	cmp	r3, #0
 801eb60:	d0e2      	beq.n	801eb28 <xTaskResumeAll+0x8c>
					taskYIELD_IF_USING_PREEMPTION();
 801eb62:	4b10      	ldr	r3, [pc, #64]	; (801eba4 <xTaskResumeAll+0x108>)
 801eb64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801eb68:	601a      	str	r2, [r3, #0]
 801eb6a:	f3bf 8f4f 	dsb	sy
 801eb6e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801eb72:	2401      	movs	r4, #1
 801eb74:	e7d9      	b.n	801eb2a <xTaskResumeAll+0x8e>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801eb76:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801eb78:	4b08      	ldr	r3, [pc, #32]	; (801eb9c <xTaskResumeAll+0x100>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801eb7a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801eb7c:	68d2      	ldr	r2, [r2, #12]
 801eb7e:	6852      	ldr	r2, [r2, #4]
 801eb80:	601a      	str	r2, [r3, #0]
 801eb82:	e7e0      	b.n	801eb46 <xTaskResumeAll+0xaa>
 801eb84:	20006308 	.word	0x20006308
 801eb88:	200062fc 	.word	0x200062fc
 801eb8c:	2000638c 	.word	0x2000638c
 801eb90:	20006348 	.word	0x20006348
 801eb94:	20006310 	.word	0x20006310
 801eb98:	20006268 	.word	0x20006268
 801eb9c:	20006340 	.word	0x20006340
 801eba0:	20006304 	.word	0x20006304
 801eba4:	e000ed04 	.word	0xe000ed04
 801eba8:	20006270 	.word	0x20006270
 801ebac:	20006264 	.word	0x20006264

0801ebb0 <vTaskDelay>:
	{
 801ebb0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801ebb2:	b1a8      	cbz	r0, 801ebe0 <vTaskDelay+0x30>
			configASSERT( uxSchedulerSuspended == 0 );
 801ebb4:	4b0f      	ldr	r3, [pc, #60]	; (801ebf4 <vTaskDelay+0x44>)
 801ebb6:	6819      	ldr	r1, [r3, #0]
 801ebb8:	b151      	cbz	r1, 801ebd0 <vTaskDelay+0x20>
 801ebba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ebbe:	b672      	cpsid	i
 801ebc0:	f383 8811 	msr	BASEPRI, r3
 801ebc4:	f3bf 8f6f 	isb	sy
 801ebc8:	f3bf 8f4f 	dsb	sy
 801ebcc:	b662      	cpsie	i
 801ebce:	e7fe      	b.n	801ebce <vTaskDelay+0x1e>
	++uxSchedulerSuspended;
 801ebd0:	681a      	ldr	r2, [r3, #0]
 801ebd2:	3201      	adds	r2, #1
 801ebd4:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801ebd6:	f7ff fbe9 	bl	801e3ac <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 801ebda:	f7ff ff5f 	bl	801ea9c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 801ebde:	b938      	cbnz	r0, 801ebf0 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 801ebe0:	4b05      	ldr	r3, [pc, #20]	; (801ebf8 <vTaskDelay+0x48>)
 801ebe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ebe6:	601a      	str	r2, [r3, #0]
 801ebe8:	f3bf 8f4f 	dsb	sy
 801ebec:	f3bf 8f6f 	isb	sy
	}
 801ebf0:	bd08      	pop	{r3, pc}
 801ebf2:	bf00      	nop
 801ebf4:	20006308 	.word	0x20006308
 801ebf8:	e000ed04 	.word	0xe000ed04

0801ebfc <vTaskSwitchContext>:
{
 801ebfc:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801ebfe:	4b25      	ldr	r3, [pc, #148]	; (801ec94 <vTaskSwitchContext+0x98>)
 801ec00:	681b      	ldr	r3, [r3, #0]
 801ec02:	2b00      	cmp	r3, #0
 801ec04:	d131      	bne.n	801ec6a <vTaskSwitchContext+0x6e>
		xYieldPending = pdFALSE;
 801ec06:	4a24      	ldr	r2, [pc, #144]	; (801ec98 <vTaskSwitchContext+0x9c>)
		taskCHECK_FOR_STACK_OVERFLOW();
 801ec08:	4c24      	ldr	r4, [pc, #144]	; (801ec9c <vTaskSwitchContext+0xa0>)
		xYieldPending = pdFALSE;
 801ec0a:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801ec0c:	6823      	ldr	r3, [r4, #0]
 801ec0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ec10:	681a      	ldr	r2, [r3, #0]
 801ec12:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 801ec16:	d10b      	bne.n	801ec30 <vTaskSwitchContext+0x34>
 801ec18:	685a      	ldr	r2, [r3, #4]
 801ec1a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 801ec1e:	d107      	bne.n	801ec30 <vTaskSwitchContext+0x34>
 801ec20:	689a      	ldr	r2, [r3, #8]
 801ec22:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 801ec26:	d103      	bne.n	801ec30 <vTaskSwitchContext+0x34>
 801ec28:	68db      	ldr	r3, [r3, #12]
 801ec2a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 801ec2e:	d004      	beq.n	801ec3a <vTaskSwitchContext+0x3e>
 801ec30:	6820      	ldr	r0, [r4, #0]
 801ec32:	6821      	ldr	r1, [r4, #0]
 801ec34:	3134      	adds	r1, #52	; 0x34
 801ec36:	f7e4 ff6b 	bl	8003b10 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801ec3a:	4b19      	ldr	r3, [pc, #100]	; (801eca0 <vTaskSwitchContext+0xa4>)
 801ec3c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801ec3e:	fab3 f383 	clz	r3, r3
 801ec42:	b2db      	uxtb	r3, r3
 801ec44:	4817      	ldr	r0, [pc, #92]	; (801eca4 <vTaskSwitchContext+0xa8>)
 801ec46:	f1c3 031f 	rsb	r3, r3, #31
 801ec4a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801ec4e:	0092      	lsls	r2, r2, #2
 801ec50:	5881      	ldr	r1, [r0, r2]
 801ec52:	1885      	adds	r5, r0, r2
 801ec54:	b169      	cbz	r1, 801ec72 <vTaskSwitchContext+0x76>
 801ec56:	6869      	ldr	r1, [r5, #4]
 801ec58:	3208      	adds	r2, #8
 801ec5a:	6849      	ldr	r1, [r1, #4]
 801ec5c:	4402      	add	r2, r0
 801ec5e:	4291      	cmp	r1, r2
 801ec60:	6069      	str	r1, [r5, #4]
 801ec62:	d011      	beq.n	801ec88 <vTaskSwitchContext+0x8c>
 801ec64:	68cb      	ldr	r3, [r1, #12]
 801ec66:	6023      	str	r3, [r4, #0]
}
 801ec68:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdTRUE;
 801ec6a:	4b0b      	ldr	r3, [pc, #44]	; (801ec98 <vTaskSwitchContext+0x9c>)
 801ec6c:	2201      	movs	r2, #1
 801ec6e:	601a      	str	r2, [r3, #0]
}
 801ec70:	bd38      	pop	{r3, r4, r5, pc}
	__asm volatile
 801ec72:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ec76:	b672      	cpsid	i
 801ec78:	f383 8811 	msr	BASEPRI, r3
 801ec7c:	f3bf 8f6f 	isb	sy
 801ec80:	f3bf 8f4f 	dsb	sy
 801ec84:	b662      	cpsie	i
 801ec86:	e7fe      	b.n	801ec86 <vTaskSwitchContext+0x8a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801ec88:	2214      	movs	r2, #20
 801ec8a:	6849      	ldr	r1, [r1, #4]
 801ec8c:	fb02 0303 	mla	r3, r2, r3, r0
 801ec90:	6059      	str	r1, [r3, #4]
 801ec92:	e7e7      	b.n	801ec64 <vTaskSwitchContext+0x68>
 801ec94:	20006308 	.word	0x20006308
 801ec98:	2000638c 	.word	0x2000638c
 801ec9c:	20006264 	.word	0x20006264
 801eca0:	20006310 	.word	0x20006310
 801eca4:	20006270 	.word	0x20006270

0801eca8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 801eca8:	b950      	cbnz	r0, 801ecc0 <vTaskPlaceOnEventList+0x18>
 801ecaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ecae:	b672      	cpsid	i
 801ecb0:	f383 8811 	msr	BASEPRI, r3
 801ecb4:	f3bf 8f6f 	isb	sy
 801ecb8:	f3bf 8f4f 	dsb	sy
 801ecbc:	b662      	cpsie	i
 801ecbe:	e7fe      	b.n	801ecbe <vTaskPlaceOnEventList+0x16>
{
 801ecc0:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801ecc2:	4d1b      	ldr	r5, [pc, #108]	; (801ed30 <vTaskPlaceOnEventList+0x88>)
 801ecc4:	460c      	mov	r4, r1
 801ecc6:	6829      	ldr	r1, [r5, #0]
 801ecc8:	3118      	adds	r1, #24
 801ecca:	f7fe fc6b 	bl	801d5a4 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 801ecce:	4b19      	ldr	r3, [pc, #100]	; (801ed34 <vTaskPlaceOnEventList+0x8c>)
 801ecd0:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ecd2:	6828      	ldr	r0, [r5, #0]
 801ecd4:	3004      	adds	r0, #4
 801ecd6:	f7fe fc7f 	bl	801d5d8 <uxListRemove>
 801ecda:	b940      	cbnz	r0, 801ecee <vTaskPlaceOnEventList+0x46>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801ecdc:	682b      	ldr	r3, [r5, #0]
 801ecde:	2201      	movs	r2, #1
 801ece0:	4915      	ldr	r1, [pc, #84]	; (801ed38 <vTaskPlaceOnEventList+0x90>)
 801ece2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801ece4:	680b      	ldr	r3, [r1, #0]
 801ece6:	4082      	lsls	r2, r0
 801ece8:	ea23 0302 	bic.w	r3, r3, r2
 801ecec:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801ecee:	1c63      	adds	r3, r4, #1
 801ecf0:	d00f      	beq.n	801ed12 <vTaskPlaceOnEventList+0x6a>
 801ecf2:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801ecf4:	682b      	ldr	r3, [r5, #0]
 801ecf6:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801ecf8:	d212      	bcs.n	801ed20 <vTaskPlaceOnEventList+0x78>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ecfa:	4b10      	ldr	r3, [pc, #64]	; (801ed3c <vTaskPlaceOnEventList+0x94>)
 801ecfc:	6818      	ldr	r0, [r3, #0]
 801ecfe:	6829      	ldr	r1, [r5, #0]
 801ed00:	3104      	adds	r1, #4
 801ed02:	f7fe fc4f 	bl	801d5a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801ed06:	4b0e      	ldr	r3, [pc, #56]	; (801ed40 <vTaskPlaceOnEventList+0x98>)
 801ed08:	681a      	ldr	r2, [r3, #0]
 801ed0a:	4294      	cmp	r4, r2
 801ed0c:	d200      	bcs.n	801ed10 <vTaskPlaceOnEventList+0x68>
					xNextTaskUnblockTime = xTimeToWake;
 801ed0e:	601c      	str	r4, [r3, #0]
}
 801ed10:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ed12:	6829      	ldr	r1, [r5, #0]
 801ed14:	480b      	ldr	r0, [pc, #44]	; (801ed44 <vTaskPlaceOnEventList+0x9c>)
 801ed16:	3104      	adds	r1, #4
}
 801ed18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ed1c:	f7fe bc32 	b.w	801d584 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ed20:	4b09      	ldr	r3, [pc, #36]	; (801ed48 <vTaskPlaceOnEventList+0xa0>)
 801ed22:	6818      	ldr	r0, [r3, #0]
 801ed24:	6829      	ldr	r1, [r5, #0]
}
 801ed26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ed2a:	3104      	adds	r1, #4
 801ed2c:	f7fe bc3a 	b.w	801d5a4 <vListInsert>
 801ed30:	20006264 	.word	0x20006264
 801ed34:	20006388 	.word	0x20006388
 801ed38:	20006310 	.word	0x20006310
 801ed3c:	20006268 	.word	0x20006268
 801ed40:	20006340 	.word	0x20006340
 801ed44:	20006360 	.word	0x20006360
 801ed48:	2000626c 	.word	0x2000626c

0801ed4c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 801ed4c:	68c3      	ldr	r3, [r0, #12]
{
 801ed4e:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 801ed50:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801ed52:	b34c      	cbz	r4, 801eda8 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801ed54:	f104 0518 	add.w	r5, r4, #24
 801ed58:	4628      	mov	r0, r5
 801ed5a:	f7fe fc3d 	bl	801d5d8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ed5e:	4b19      	ldr	r3, [pc, #100]	; (801edc4 <xTaskRemoveFromEventList+0x78>)
 801ed60:	681b      	ldr	r3, [r3, #0]
 801ed62:	b9e3      	cbnz	r3, 801ed9e <xTaskRemoveFromEventList+0x52>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801ed64:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 801ed66:	4d18      	ldr	r5, [pc, #96]	; (801edc8 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801ed68:	4630      	mov	r0, r6
 801ed6a:	f7fe fc35 	bl	801d5d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801ed6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801ed70:	2301      	movs	r3, #1
 801ed72:	4631      	mov	r1, r6
 801ed74:	682e      	ldr	r6, [r5, #0]
 801ed76:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 801ed7a:	4093      	lsls	r3, r2
 801ed7c:	4a13      	ldr	r2, [pc, #76]	; (801edcc <xTaskRemoveFromEventList+0x80>)
 801ed7e:	4333      	orrs	r3, r6
 801ed80:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801ed84:	602b      	str	r3, [r5, #0]
 801ed86:	f7fe fbfd 	bl	801d584 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801ed8a:	4b11      	ldr	r3, [pc, #68]	; (801edd0 <xTaskRemoveFromEventList+0x84>)
 801ed8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801ed8e:	681b      	ldr	r3, [r3, #0]
 801ed90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ed92:	429a      	cmp	r2, r3
 801ed94:	d913      	bls.n	801edbe <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 801ed96:	4b0f      	ldr	r3, [pc, #60]	; (801edd4 <xTaskRemoveFromEventList+0x88>)
 801ed98:	2001      	movs	r0, #1
 801ed9a:	6018      	str	r0, [r3, #0]
}
 801ed9c:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801ed9e:	4629      	mov	r1, r5
 801eda0:	480d      	ldr	r0, [pc, #52]	; (801edd8 <xTaskRemoveFromEventList+0x8c>)
 801eda2:	f7fe fbef 	bl	801d584 <vListInsertEnd>
 801eda6:	e7f0      	b.n	801ed8a <xTaskRemoveFromEventList+0x3e>
 801eda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801edac:	b672      	cpsid	i
 801edae:	f383 8811 	msr	BASEPRI, r3
 801edb2:	f3bf 8f6f 	isb	sy
 801edb6:	f3bf 8f4f 	dsb	sy
 801edba:	b662      	cpsie	i
 801edbc:	e7fe      	b.n	801edbc <xTaskRemoveFromEventList+0x70>
		xReturn = pdFALSE;
 801edbe:	2000      	movs	r0, #0
}
 801edc0:	bd70      	pop	{r4, r5, r6, pc}
 801edc2:	bf00      	nop
 801edc4:	20006308 	.word	0x20006308
 801edc8:	20006310 	.word	0x20006310
 801edcc:	20006270 	.word	0x20006270
 801edd0:	20006264 	.word	0x20006264
 801edd4:	2000638c 	.word	0x2000638c
 801edd8:	20006348 	.word	0x20006348

0801eddc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801eddc:	4a03      	ldr	r2, [pc, #12]	; (801edec <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 801edde:	4b04      	ldr	r3, [pc, #16]	; (801edf0 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801ede0:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801ede2:	681b      	ldr	r3, [r3, #0]
 801ede4:	e9c0 2300 	strd	r2, r3, [r0]
}
 801ede8:	4770      	bx	lr
 801edea:	bf00      	nop
 801edec:	20006344 	.word	0x20006344
 801edf0:	20006388 	.word	0x20006388

0801edf4 <xTaskCheckForTimeOut>:
{
 801edf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 801edf6:	b350      	cbz	r0, 801ee4e <xTaskCheckForTimeOut+0x5a>
	configASSERT( pxTicksToWait );
 801edf8:	b1f1      	cbz	r1, 801ee38 <xTaskCheckForTimeOut+0x44>
 801edfa:	460d      	mov	r5, r1
 801edfc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801edfe:	f000 f9e9 	bl	801f1d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801ee02:	f8df c080 	ldr.w	ip, [pc, #128]	; 801ee84 <xTaskCheckForTimeOut+0x90>
			if( *pxTicksToWait == portMAX_DELAY )
 801ee06:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801ee08:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 801ee0a:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 801ee0e:	1c5a      	adds	r2, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801ee10:	eba6 0007 	sub.w	r0, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 801ee14:	d026      	beq.n	801ee64 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801ee16:	491a      	ldr	r1, [pc, #104]	; (801ee80 <xTaskCheckForTimeOut+0x8c>)
 801ee18:	6822      	ldr	r2, [r4, #0]
 801ee1a:	f8d1 e000 	ldr.w	lr, [r1]
 801ee1e:	4572      	cmp	r2, lr
 801ee20:	d001      	beq.n	801ee26 <xTaskCheckForTimeOut+0x32>
 801ee22:	42b7      	cmp	r7, r6
 801ee24:	d929      	bls.n	801ee7a <xTaskCheckForTimeOut+0x86>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801ee26:	4283      	cmp	r3, r0
 801ee28:	d81e      	bhi.n	801ee68 <xTaskCheckForTimeOut+0x74>
			*pxTicksToWait = 0;
 801ee2a:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 801ee2c:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 801ee2e:	602b      	str	r3, [r5, #0]
	taskEXIT_CRITICAL();
 801ee30:	f000 f9f6 	bl	801f220 <vPortExitCritical>
}
 801ee34:	4630      	mov	r0, r6
 801ee36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee38:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ee3c:	b672      	cpsid	i
 801ee3e:	f383 8811 	msr	BASEPRI, r3
 801ee42:	f3bf 8f6f 	isb	sy
 801ee46:	f3bf 8f4f 	dsb	sy
 801ee4a:	b662      	cpsie	i
 801ee4c:	e7fe      	b.n	801ee4c <xTaskCheckForTimeOut+0x58>
 801ee4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ee52:	b672      	cpsid	i
 801ee54:	f383 8811 	msr	BASEPRI, r3
 801ee58:	f3bf 8f6f 	isb	sy
 801ee5c:	f3bf 8f4f 	dsb	sy
 801ee60:	b662      	cpsie	i
 801ee62:	e7fe      	b.n	801ee62 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 801ee64:	2600      	movs	r6, #0
 801ee66:	e7e3      	b.n	801ee30 <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801ee68:	6809      	ldr	r1, [r1, #0]
			*pxTicksToWait -= xElapsedTime;
 801ee6a:	1a1b      	subs	r3, r3, r0
	pxTimeOut->xTimeOnEntering = xTickCount;
 801ee6c:	f8dc 2000 	ldr.w	r2, [ip]
			xReturn = pdFALSE;
 801ee70:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 801ee72:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801ee74:	e9c4 1200 	strd	r1, r2, [r4]
 801ee78:	e7da      	b.n	801ee30 <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 801ee7a:	2601      	movs	r6, #1
 801ee7c:	e7d8      	b.n	801ee30 <xTaskCheckForTimeOut+0x3c>
 801ee7e:	bf00      	nop
 801ee80:	20006344 	.word	0x20006344
 801ee84:	20006388 	.word	0x20006388

0801ee88 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801ee88:	4b01      	ldr	r3, [pc, #4]	; (801ee90 <vTaskMissedYield+0x8>)
 801ee8a:	2201      	movs	r2, #1
 801ee8c:	601a      	str	r2, [r3, #0]
}
 801ee8e:	4770      	bx	lr
 801ee90:	2000638c 	.word	0x2000638c

0801ee94 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 801ee94:	4b05      	ldr	r3, [pc, #20]	; (801eeac <xTaskGetSchedulerState+0x18>)
 801ee96:	681b      	ldr	r3, [r3, #0]
 801ee98:	b133      	cbz	r3, 801eea8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ee9a:	4b05      	ldr	r3, [pc, #20]	; (801eeb0 <xTaskGetSchedulerState+0x1c>)
 801ee9c:	681b      	ldr	r3, [r3, #0]
 801ee9e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 801eea0:	bf0c      	ite	eq
 801eea2:	2002      	moveq	r0, #2
 801eea4:	2000      	movne	r0, #0
 801eea6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 801eea8:	2001      	movs	r0, #1
	}
 801eeaa:	4770      	bx	lr
 801eeac:	2000635c 	.word	0x2000635c
 801eeb0:	20006308 	.word	0x20006308

0801eeb4 <xTaskPriorityInherit>:
	{
 801eeb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 801eeb8:	4607      	mov	r7, r0
 801eeba:	b1c8      	cbz	r0, 801eef0 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801eebc:	4c26      	ldr	r4, [pc, #152]	; (801ef58 <xTaskPriorityInherit+0xa4>)
 801eebe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801eec0:	6821      	ldr	r1, [r4, #0]
 801eec2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801eec4:	428a      	cmp	r2, r1
 801eec6:	d215      	bcs.n	801eef4 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801eec8:	6981      	ldr	r1, [r0, #24]
 801eeca:	2900      	cmp	r1, #0
 801eecc:	db04      	blt.n	801eed8 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801eece:	6821      	ldr	r1, [r4, #0]
 801eed0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801eed2:	f1c1 0107 	rsb	r1, r1, #7
 801eed6:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801eed8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801eedc:	4d1f      	ldr	r5, [pc, #124]	; (801ef5c <xTaskPriorityInherit+0xa8>)
 801eede:	6979      	ldr	r1, [r7, #20]
 801eee0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801eee4:	4291      	cmp	r1, r2
 801eee6:	d00e      	beq.n	801ef06 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801eee8:	6822      	ldr	r2, [r4, #0]
				xReturn = pdTRUE;
 801eeea:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801eeec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801eeee:	62fa      	str	r2, [r7, #44]	; 0x2c
	}
 801eef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801eef4:	6822      	ldr	r2, [r4, #0]
 801eef6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801eef8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801eefa:	4298      	cmp	r0, r3
 801eefc:	bf2c      	ite	cs
 801eefe:	2000      	movcs	r0, #0
 801ef00:	2001      	movcc	r0, #1
	}
 801ef02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ef06:	f107 0804 	add.w	r8, r7, #4
 801ef0a:	4640      	mov	r0, r8
 801ef0c:	f7fe fb64 	bl	801d5d8 <uxListRemove>
 801ef10:	b9f8      	cbnz	r0, 801ef52 <xTaskPriorityInherit+0x9e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801ef12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ef14:	4e12      	ldr	r6, [pc, #72]	; (801ef60 <xTaskPriorityInherit+0xac>)
 801ef16:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801ef1a:	009b      	lsls	r3, r3, #2
 801ef1c:	58eb      	ldr	r3, [r5, r3]
 801ef1e:	b933      	cbnz	r3, 801ef2e <xTaskPriorityInherit+0x7a>
 801ef20:	2101      	movs	r1, #1
 801ef22:	6833      	ldr	r3, [r6, #0]
 801ef24:	fa01 f202 	lsl.w	r2, r1, r2
 801ef28:	ea23 0202 	bic.w	r2, r3, r2
 801ef2c:	6032      	str	r2, [r6, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ef2e:	6822      	ldr	r2, [r4, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801ef30:	2401      	movs	r4, #1
 801ef32:	6833      	ldr	r3, [r6, #0]
 801ef34:	4641      	mov	r1, r8
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ef36:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801ef38:	fa04 f200 	lsl.w	r2, r4, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ef3c:	62f8      	str	r0, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801ef3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ef42:	4313      	orrs	r3, r2
 801ef44:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 801ef48:	6033      	str	r3, [r6, #0]
 801ef4a:	f7fe fb1b 	bl	801d584 <vListInsertEnd>
				xReturn = pdTRUE;
 801ef4e:	4620      	mov	r0, r4
 801ef50:	e7ce      	b.n	801eef0 <xTaskPriorityInherit+0x3c>
 801ef52:	4e03      	ldr	r6, [pc, #12]	; (801ef60 <xTaskPriorityInherit+0xac>)
 801ef54:	e7eb      	b.n	801ef2e <xTaskPriorityInherit+0x7a>
 801ef56:	bf00      	nop
 801ef58:	20006264 	.word	0x20006264
 801ef5c:	20006270 	.word	0x20006270
 801ef60:	20006310 	.word	0x20006310

0801ef64 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 801ef64:	b178      	cbz	r0, 801ef86 <xTaskPriorityDisinherit+0x22>
	{
 801ef66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 801ef68:	4b2a      	ldr	r3, [pc, #168]	; (801f014 <xTaskPriorityDisinherit+0xb0>)
 801ef6a:	681b      	ldr	r3, [r3, #0]
 801ef6c:	4283      	cmp	r3, r0
 801ef6e:	d00c      	beq.n	801ef8a <xTaskPriorityDisinherit+0x26>
 801ef70:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ef74:	b672      	cpsid	i
 801ef76:	f383 8811 	msr	BASEPRI, r3
 801ef7a:	f3bf 8f6f 	isb	sy
 801ef7e:	f3bf 8f4f 	dsb	sy
 801ef82:	b662      	cpsie	i
 801ef84:	e7fe      	b.n	801ef84 <xTaskPriorityDisinherit+0x20>
	BaseType_t xReturn = pdFALSE;
 801ef86:	2000      	movs	r0, #0
	}
 801ef88:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 801ef8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ef8c:	b953      	cbnz	r3, 801efa4 <xTaskPriorityDisinherit+0x40>
 801ef8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ef92:	b672      	cpsid	i
 801ef94:	f383 8811 	msr	BASEPRI, r3
 801ef98:	f3bf 8f6f 	isb	sy
 801ef9c:	f3bf 8f4f 	dsb	sy
 801efa0:	b662      	cpsie	i
 801efa2:	e7fe      	b.n	801efa2 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801efa4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 801efa6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801efa8:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 801efaa:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801efac:	4291      	cmp	r1, r2
 801efae:	d000      	beq.n	801efb2 <xTaskPriorityDisinherit+0x4e>
 801efb0:	b10b      	cbz	r3, 801efb6 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 801efb2:	2000      	movs	r0, #0
	}
 801efb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801efb6:	1d07      	adds	r7, r0, #4
 801efb8:	4604      	mov	r4, r0
 801efba:	4638      	mov	r0, r7
 801efbc:	f7fe fb0c 	bl	801d5d8 <uxListRemove>
 801efc0:	b1b8      	cbz	r0, 801eff2 <xTaskPriorityDisinherit+0x8e>
 801efc2:	4815      	ldr	r0, [pc, #84]	; (801f018 <xTaskPriorityDisinherit+0xb4>)
 801efc4:	4a15      	ldr	r2, [pc, #84]	; (801f01c <xTaskPriorityDisinherit+0xb8>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801efc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 801efc8:	2501      	movs	r5, #1
 801efca:	f04f 0c14 	mov.w	ip, #20
 801efce:	f8d2 e000 	ldr.w	lr, [r2]
 801efd2:	fa05 f603 	lsl.w	r6, r5, r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801efd6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 801efd8:	fb0c 0003 	mla	r0, ip, r3, r0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801efdc:	f1c3 0307 	rsb	r3, r3, #7
					prvAddTaskToReadyList( pxTCB );
 801efe0:	ea46 060e 	orr.w	r6, r6, lr
 801efe4:	4639      	mov	r1, r7
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801efe6:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801efe8:	6016      	str	r6, [r2, #0]
 801efea:	f7fe facb 	bl	801d584 <vListInsertEnd>
					xReturn = pdTRUE;
 801efee:	4628      	mov	r0, r5
	}
 801eff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801eff2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801eff4:	2314      	movs	r3, #20
 801eff6:	4808      	ldr	r0, [pc, #32]	; (801f018 <xTaskPriorityDisinherit+0xb4>)
 801eff8:	fb03 f301 	mul.w	r3, r3, r1
 801effc:	4a07      	ldr	r2, [pc, #28]	; (801f01c <xTaskPriorityDisinherit+0xb8>)
 801effe:	58c3      	ldr	r3, [r0, r3]
 801f000:	2b00      	cmp	r3, #0
 801f002:	d1e0      	bne.n	801efc6 <xTaskPriorityDisinherit+0x62>
 801f004:	2501      	movs	r5, #1
 801f006:	6813      	ldr	r3, [r2, #0]
 801f008:	408d      	lsls	r5, r1
 801f00a:	ea23 0305 	bic.w	r3, r3, r5
 801f00e:	6013      	str	r3, [r2, #0]
 801f010:	e7d9      	b.n	801efc6 <xTaskPriorityDisinherit+0x62>
 801f012:	bf00      	nop
 801f014:	20006264 	.word	0x20006264
 801f018:	20006270 	.word	0x20006270
 801f01c:	20006310 	.word	0x20006310

0801f020 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 801f020:	b1b8      	cbz	r0, 801f052 <vTaskPriorityDisinheritAfterTimeout+0x32>
	{
 801f022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 801f024:	6c84      	ldr	r4, [r0, #72]	; 0x48
 801f026:	b954      	cbnz	r4, 801f03e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 801f028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f02c:	b672      	cpsid	i
 801f02e:	f383 8811 	msr	BASEPRI, r3
 801f032:	f3bf 8f6f 	isb	sy
 801f036:	f3bf 8f4f 	dsb	sy
 801f03a:	b662      	cpsie	i
 801f03c:	e7fe      	b.n	801f03c <vTaskPriorityDisinheritAfterTimeout+0x1c>
 801f03e:	6c43      	ldr	r3, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 801f040:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801f042:	428b      	cmp	r3, r1
 801f044:	bf38      	it	cc
 801f046:	460b      	movcc	r3, r1
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801f048:	429a      	cmp	r2, r3
 801f04a:	d001      	beq.n	801f050 <vTaskPriorityDisinheritAfterTimeout+0x30>
 801f04c:	2c01      	cmp	r4, #1
 801f04e:	d001      	beq.n	801f054 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 801f050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f052:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 801f054:	4920      	ldr	r1, [pc, #128]	; (801f0d8 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 801f056:	6809      	ldr	r1, [r1, #0]
 801f058:	4281      	cmp	r1, r0
 801f05a:	d022      	beq.n	801f0a2 <vTaskPriorityDisinheritAfterTimeout+0x82>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801f05c:	6981      	ldr	r1, [r0, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 801f05e:	62c3      	str	r3, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801f060:	2900      	cmp	r1, #0
 801f062:	db02      	blt.n	801f06a <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f064:	f1c3 0307 	rsb	r3, r3, #7
 801f068:	6183      	str	r3, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801f06a:	4e1c      	ldr	r6, [pc, #112]	; (801f0dc <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 801f06c:	2514      	movs	r5, #20
 801f06e:	6943      	ldr	r3, [r0, #20]
 801f070:	fb05 6202 	mla	r2, r5, r2, r6
 801f074:	4293      	cmp	r3, r2
 801f076:	d1eb      	bne.n	801f050 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801f078:	1d07      	adds	r7, r0, #4
 801f07a:	4604      	mov	r4, r0
 801f07c:	4638      	mov	r0, r7
 801f07e:	f7fe faab 	bl	801d5d8 <uxListRemove>
 801f082:	b1c8      	cbz	r0, 801f0b8 <vTaskPriorityDisinheritAfterTimeout+0x98>
 801f084:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801f086:	4b16      	ldr	r3, [pc, #88]	; (801f0e0 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
						prvAddTaskToReadyList( pxTCB );
 801f088:	2201      	movs	r2, #1
 801f08a:	681c      	ldr	r4, [r3, #0]
 801f08c:	2514      	movs	r5, #20
 801f08e:	4639      	mov	r1, r7
 801f090:	4082      	lsls	r2, r0
 801f092:	fb05 6000 	mla	r0, r5, r0, r6
 801f096:	4322      	orrs	r2, r4
 801f098:	601a      	str	r2, [r3, #0]
	}
 801f09a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 801f09e:	f7fe ba71 	b.w	801d584 <vListInsertEnd>
 801f0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f0a6:	b672      	cpsid	i
 801f0a8:	f383 8811 	msr	BASEPRI, r3
 801f0ac:	f3bf 8f6f 	isb	sy
 801f0b0:	f3bf 8f4f 	dsb	sy
 801f0b4:	b662      	cpsie	i
 801f0b6:	e7fe      	b.n	801f0b6 <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801f0b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801f0ba:	2201      	movs	r2, #1
 801f0bc:	fb05 f500 	mul.w	r5, r5, r0
 801f0c0:	fa02 f400 	lsl.w	r4, r2, r0
 801f0c4:	5973      	ldr	r3, [r6, r5]
 801f0c6:	b10b      	cbz	r3, 801f0cc <vTaskPriorityDisinheritAfterTimeout+0xac>
 801f0c8:	4b05      	ldr	r3, [pc, #20]	; (801f0e0 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 801f0ca:	e7dd      	b.n	801f088 <vTaskPriorityDisinheritAfterTimeout+0x68>
 801f0cc:	4b04      	ldr	r3, [pc, #16]	; (801f0e0 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 801f0ce:	681a      	ldr	r2, [r3, #0]
 801f0d0:	ea22 0204 	bic.w	r2, r2, r4
 801f0d4:	601a      	str	r2, [r3, #0]
 801f0d6:	e7d7      	b.n	801f088 <vTaskPriorityDisinheritAfterTimeout+0x68>
 801f0d8:	20006264 	.word	0x20006264
 801f0dc:	20006270 	.word	0x20006270
 801f0e0:	20006310 	.word	0x20006310

0801f0e4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801f0e4:	4b04      	ldr	r3, [pc, #16]	; (801f0f8 <pvTaskIncrementMutexHeldCount+0x14>)
 801f0e6:	681a      	ldr	r2, [r3, #0]
 801f0e8:	b11a      	cbz	r2, 801f0f2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 801f0ea:	6819      	ldr	r1, [r3, #0]
 801f0ec:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 801f0ee:	3201      	adds	r2, #1
 801f0f0:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 801f0f2:	6818      	ldr	r0, [r3, #0]
	}
 801f0f4:	4770      	bx	lr
 801f0f6:	bf00      	nop
 801f0f8:	20006264 	.word	0x20006264

0801f0fc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801f0fc:	4b10      	ldr	r3, [pc, #64]	; (801f140 <prvTaskExitError+0x44>)
{
 801f0fe:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801f100:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 801f102:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 801f104:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 801f106:	3301      	adds	r3, #1
 801f108:	d00a      	beq.n	801f120 <prvTaskExitError+0x24>
 801f10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f10e:	b672      	cpsid	i
 801f110:	f383 8811 	msr	BASEPRI, r3
 801f114:	f3bf 8f6f 	isb	sy
 801f118:	f3bf 8f4f 	dsb	sy
 801f11c:	b662      	cpsie	i
 801f11e:	e7fe      	b.n	801f11e <prvTaskExitError+0x22>
 801f120:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f124:	b672      	cpsid	i
 801f126:	f383 8811 	msr	BASEPRI, r3
 801f12a:	f3bf 8f6f 	isb	sy
 801f12e:	f3bf 8f4f 	dsb	sy
 801f132:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801f134:	9b01      	ldr	r3, [sp, #4]
 801f136:	2b00      	cmp	r3, #0
 801f138:	d0fc      	beq.n	801f134 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801f13a:	b002      	add	sp, #8
 801f13c:	4770      	bx	lr
 801f13e:	bf00      	nop
 801f140:	200000b8 	.word	0x200000b8

0801f144 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801f144:	4808      	ldr	r0, [pc, #32]	; (801f168 <prvPortStartFirstTask+0x24>)
 801f146:	6800      	ldr	r0, [r0, #0]
 801f148:	6800      	ldr	r0, [r0, #0]
 801f14a:	f380 8808 	msr	MSP, r0
 801f14e:	f04f 0000 	mov.w	r0, #0
 801f152:	f380 8814 	msr	CONTROL, r0
 801f156:	b662      	cpsie	i
 801f158:	b661      	cpsie	f
 801f15a:	f3bf 8f4f 	dsb	sy
 801f15e:	f3bf 8f6f 	isb	sy
 801f162:	df00      	svc	0
 801f164:	bf00      	nop
 801f166:	0000      	.short	0x0000
 801f168:	e000ed08 	.word	0xe000ed08

0801f16c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801f16c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801f17c <vPortEnableVFP+0x10>
 801f170:	6801      	ldr	r1, [r0, #0]
 801f172:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801f176:	6001      	str	r1, [r0, #0]
 801f178:	4770      	bx	lr
 801f17a:	0000      	.short	0x0000
 801f17c:	e000ed88 	.word	0xe000ed88

0801f180 <pxPortInitialiseStack>:
{
 801f180:	b470      	push	{r4, r5, r6}
 801f182:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801f184:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801f188:	4d08      	ldr	r5, [pc, #32]	; (801f1ac <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801f18a:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801f18e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801f192:	f840 2c20 	str.w	r2, [r0, #-32]
}
 801f196:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801f198:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801f19a:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801f19e:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801f1a2:	f843 4c24 	str.w	r4, [r3, #-36]
}
 801f1a6:	bc70      	pop	{r4, r5, r6}
 801f1a8:	4770      	bx	lr
 801f1aa:	bf00      	nop
 801f1ac:	0801f0fd 	.word	0x0801f0fd

0801f1b0 <SVC_Handler>:
	__asm volatile (
 801f1b0:	4b07      	ldr	r3, [pc, #28]	; (801f1d0 <pxCurrentTCBConst2>)
 801f1b2:	6819      	ldr	r1, [r3, #0]
 801f1b4:	6808      	ldr	r0, [r1, #0]
 801f1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1ba:	f380 8809 	msr	PSP, r0
 801f1be:	f3bf 8f6f 	isb	sy
 801f1c2:	f04f 0000 	mov.w	r0, #0
 801f1c6:	f380 8811 	msr	BASEPRI, r0
 801f1ca:	4770      	bx	lr
 801f1cc:	f3af 8000 	nop.w

0801f1d0 <pxCurrentTCBConst2>:
 801f1d0:	20006264 	.word	0x20006264

0801f1d4 <vPortEnterCritical>:
 801f1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f1d8:	b672      	cpsid	i
 801f1da:	f383 8811 	msr	BASEPRI, r3
 801f1de:	f3bf 8f6f 	isb	sy
 801f1e2:	f3bf 8f4f 	dsb	sy
 801f1e6:	b662      	cpsie	i
	uxCriticalNesting++;
 801f1e8:	4a0b      	ldr	r2, [pc, #44]	; (801f218 <vPortEnterCritical+0x44>)
 801f1ea:	6813      	ldr	r3, [r2, #0]
 801f1ec:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801f1ee:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 801f1f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801f1f2:	d000      	beq.n	801f1f6 <vPortEnterCritical+0x22>
}
 801f1f4:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801f1f6:	4b09      	ldr	r3, [pc, #36]	; (801f21c <vPortEnterCritical+0x48>)
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 801f1fe:	d0f9      	beq.n	801f1f4 <vPortEnterCritical+0x20>
 801f200:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f204:	b672      	cpsid	i
 801f206:	f383 8811 	msr	BASEPRI, r3
 801f20a:	f3bf 8f6f 	isb	sy
 801f20e:	f3bf 8f4f 	dsb	sy
 801f212:	b662      	cpsie	i
 801f214:	e7fe      	b.n	801f214 <vPortEnterCritical+0x40>
 801f216:	bf00      	nop
 801f218:	200000b8 	.word	0x200000b8
 801f21c:	e000ed04 	.word	0xe000ed04

0801f220 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 801f220:	4a09      	ldr	r2, [pc, #36]	; (801f248 <vPortExitCritical+0x28>)
 801f222:	6813      	ldr	r3, [r2, #0]
 801f224:	b953      	cbnz	r3, 801f23c <vPortExitCritical+0x1c>
 801f226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f22a:	b672      	cpsid	i
 801f22c:	f383 8811 	msr	BASEPRI, r3
 801f230:	f3bf 8f6f 	isb	sy
 801f234:	f3bf 8f4f 	dsb	sy
 801f238:	b662      	cpsie	i
 801f23a:	e7fe      	b.n	801f23a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 801f23c:	3b01      	subs	r3, #1
 801f23e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801f240:	b90b      	cbnz	r3, 801f246 <vPortExitCritical+0x26>
	__asm volatile
 801f242:	f383 8811 	msr	BASEPRI, r3
}
 801f246:	4770      	bx	lr
 801f248:	200000b8 	.word	0x200000b8
 801f24c:	00000000 	.word	0x00000000

0801f250 <PendSV_Handler>:
	__asm volatile
 801f250:	f3ef 8009 	mrs	r0, PSP
 801f254:	f3bf 8f6f 	isb	sy
 801f258:	4b15      	ldr	r3, [pc, #84]	; (801f2b0 <pxCurrentTCBConst>)
 801f25a:	681a      	ldr	r2, [r3, #0]
 801f25c:	f01e 0f10 	tst.w	lr, #16
 801f260:	bf08      	it	eq
 801f262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801f266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f26a:	6010      	str	r0, [r2, #0]
 801f26c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801f270:	f04f 0050 	mov.w	r0, #80	; 0x50
 801f274:	b672      	cpsid	i
 801f276:	f380 8811 	msr	BASEPRI, r0
 801f27a:	f3bf 8f4f 	dsb	sy
 801f27e:	f3bf 8f6f 	isb	sy
 801f282:	b662      	cpsie	i
 801f284:	f7ff fcba 	bl	801ebfc <vTaskSwitchContext>
 801f288:	f04f 0000 	mov.w	r0, #0
 801f28c:	f380 8811 	msr	BASEPRI, r0
 801f290:	bc09      	pop	{r0, r3}
 801f292:	6819      	ldr	r1, [r3, #0]
 801f294:	6808      	ldr	r0, [r1, #0]
 801f296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f29a:	f01e 0f10 	tst.w	lr, #16
 801f29e:	bf08      	it	eq
 801f2a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801f2a4:	f380 8809 	msr	PSP, r0
 801f2a8:	f3bf 8f6f 	isb	sy
 801f2ac:	4770      	bx	lr
 801f2ae:	bf00      	nop

0801f2b0 <pxCurrentTCBConst>:
 801f2b0:	20006264 	.word	0x20006264

0801f2b4 <xPortSysTickHandler>:
{
 801f2b4:	b508      	push	{r3, lr}
	__asm volatile
 801f2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f2ba:	b672      	cpsid	i
 801f2bc:	f383 8811 	msr	BASEPRI, r3
 801f2c0:	f3bf 8f6f 	isb	sy
 801f2c4:	f3bf 8f4f 	dsb	sy
 801f2c8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 801f2ca:	f7ff fb39 	bl	801e940 <xTaskIncrementTick>
 801f2ce:	b118      	cbz	r0, 801f2d8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801f2d0:	4b03      	ldr	r3, [pc, #12]	; (801f2e0 <xPortSysTickHandler+0x2c>)
 801f2d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f2d6:	601a      	str	r2, [r3, #0]
	__asm volatile
 801f2d8:	2300      	movs	r3, #0
 801f2da:	f383 8811 	msr	BASEPRI, r3
}
 801f2de:	bd08      	pop	{r3, pc}
 801f2e0:	e000ed04 	.word	0xe000ed04

0801f2e4 <vPortSetupTimerInterrupt>:
{
 801f2e4:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801f2e6:	2300      	movs	r3, #0
 801f2e8:	4a08      	ldr	r2, [pc, #32]	; (801f30c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801f2ea:	4c09      	ldr	r4, [pc, #36]	; (801f310 <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801f2ec:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801f2ee:	4809      	ldr	r0, [pc, #36]	; (801f314 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801f2f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801f2f2:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801f2f4:	4c08      	ldr	r4, [pc, #32]	; (801f318 <vPortSetupTimerInterrupt+0x34>)
 801f2f6:	6803      	ldr	r3, [r0, #0]
 801f2f8:	4808      	ldr	r0, [pc, #32]	; (801f31c <vPortSetupTimerInterrupt+0x38>)
 801f2fa:	fba4 4303 	umull	r4, r3, r4, r3
}
 801f2fe:	f85d 4b04 	ldr.w	r4, [sp], #4
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801f302:	099b      	lsrs	r3, r3, #6
 801f304:	3b01      	subs	r3, #1
 801f306:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801f308:	6011      	str	r1, [r2, #0]
}
 801f30a:	4770      	bx	lr
 801f30c:	e000e010 	.word	0xe000e010
 801f310:	e000e018 	.word	0xe000e018
 801f314:	2000002c 	.word	0x2000002c
 801f318:	10624dd3 	.word	0x10624dd3
 801f31c:	e000e014 	.word	0xe000e014

0801f320 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801f320:	4b2d      	ldr	r3, [pc, #180]	; (801f3d8 <xPortStartScheduler+0xb8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801f322:	492e      	ldr	r1, [pc, #184]	; (801f3dc <xPortStartScheduler+0xbc>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801f324:	482e      	ldr	r0, [pc, #184]	; (801f3e0 <xPortStartScheduler+0xc0>)
{
 801f326:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801f328:	781a      	ldrb	r2, [r3, #0]
{
 801f32a:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801f32c:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801f32e:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801f330:	b2d2      	uxtb	r2, r2
 801f332:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801f334:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801f336:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801f338:	6004      	str	r4, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801f33a:	b2db      	uxtb	r3, r3
 801f33c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801f340:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801f344:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801f348:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801f34c:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801f34e:	0611      	lsls	r1, r2, #24
 801f350:	d510      	bpl.n	801f374 <xPortStartScheduler+0x54>
 801f352:	2306      	movs	r3, #6
 801f354:	e000      	b.n	801f358 <xPortStartScheduler+0x38>
 801f356:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801f358:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801f35c:	1e59      	subs	r1, r3, #1
 801f35e:	0052      	lsls	r2, r2, #1
 801f360:	b2d2      	uxtb	r2, r2
 801f362:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801f366:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801f36a:	0612      	lsls	r2, r2, #24
 801f36c:	d4f3      	bmi.n	801f356 <xPortStartScheduler+0x36>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801f36e:	2b03      	cmp	r3, #3
 801f370:	6003      	str	r3, [r0, #0]
 801f372:	d00a      	beq.n	801f38a <xPortStartScheduler+0x6a>
	__asm volatile
 801f374:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f378:	b672      	cpsid	i
 801f37a:	f383 8811 	msr	BASEPRI, r3
 801f37e:	f3bf 8f6f 	isb	sy
 801f382:	f3bf 8f4f 	dsb	sy
 801f386:	b662      	cpsie	i
 801f388:	e7fe      	b.n	801f388 <xPortStartScheduler+0x68>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801f38a:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801f38c:	021b      	lsls	r3, r3, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801f38e:	4a15      	ldr	r2, [pc, #84]	; (801f3e4 <xPortStartScheduler+0xc4>)
	uxCriticalNesting = 0;
 801f390:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801f392:	b2c9      	uxtb	r1, r1
 801f394:	4d10      	ldr	r5, [pc, #64]	; (801f3d8 <xPortStartScheduler+0xb8>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801f396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801f39a:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801f39c:	7029      	strb	r1, [r5, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801f39e:	6813      	ldr	r3, [r2, #0]
 801f3a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801f3a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801f3a6:	6813      	ldr	r3, [r2, #0]
 801f3a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801f3ac:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 801f3ae:	f7ff ff99 	bl	801f2e4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 801f3b2:	4b0d      	ldr	r3, [pc, #52]	; (801f3e8 <xPortStartScheduler+0xc8>)
 801f3b4:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 801f3b6:	f7ff fed9 	bl	801f16c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801f3ba:	4a0c      	ldr	r2, [pc, #48]	; (801f3ec <xPortStartScheduler+0xcc>)
 801f3bc:	6813      	ldr	r3, [r2, #0]
 801f3be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801f3c2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 801f3c4:	f7ff febe 	bl	801f144 <prvPortStartFirstTask>
	vTaskSwitchContext();
 801f3c8:	f7ff fc18 	bl	801ebfc <vTaskSwitchContext>
	prvTaskExitError();
 801f3cc:	f7ff fe96 	bl	801f0fc <prvTaskExitError>
}
 801f3d0:	4620      	mov	r0, r4
 801f3d2:	b003      	add	sp, #12
 801f3d4:	bd30      	pop	{r4, r5, pc}
 801f3d6:	bf00      	nop
 801f3d8:	e000e400 	.word	0xe000e400
 801f3dc:	20006390 	.word	0x20006390
 801f3e0:	20006394 	.word	0x20006394
 801f3e4:	e000ed20 	.word	0xe000ed20
 801f3e8:	200000b8 	.word	0x200000b8
 801f3ec:	e000ef34 	.word	0xe000ef34

0801f3f0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801f3f0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801f3f4:	2b0f      	cmp	r3, #15
 801f3f6:	d910      	bls.n	801f41a <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801f3f8:	4912      	ldr	r1, [pc, #72]	; (801f444 <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801f3fa:	4a13      	ldr	r2, [pc, #76]	; (801f448 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801f3fc:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801f3fe:	7812      	ldrb	r2, [r2, #0]
 801f400:	429a      	cmp	r2, r3
 801f402:	d90a      	bls.n	801f41a <vPortValidateInterruptPriority+0x2a>
 801f404:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f408:	b672      	cpsid	i
 801f40a:	f383 8811 	msr	BASEPRI, r3
 801f40e:	f3bf 8f6f 	isb	sy
 801f412:	f3bf 8f4f 	dsb	sy
 801f416:	b662      	cpsie	i
 801f418:	e7fe      	b.n	801f418 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801f41a:	4b0c      	ldr	r3, [pc, #48]	; (801f44c <vPortValidateInterruptPriority+0x5c>)
 801f41c:	4a0c      	ldr	r2, [pc, #48]	; (801f450 <vPortValidateInterruptPriority+0x60>)
 801f41e:	681b      	ldr	r3, [r3, #0]
 801f420:	6812      	ldr	r2, [r2, #0]
 801f422:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801f426:	4293      	cmp	r3, r2
 801f428:	d90a      	bls.n	801f440 <vPortValidateInterruptPriority+0x50>
 801f42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f42e:	b672      	cpsid	i
 801f430:	f383 8811 	msr	BASEPRI, r3
 801f434:	f3bf 8f6f 	isb	sy
 801f438:	f3bf 8f4f 	dsb	sy
 801f43c:	b662      	cpsie	i
 801f43e:	e7fe      	b.n	801f43e <vPortValidateInterruptPriority+0x4e>
	}
 801f440:	4770      	bx	lr
 801f442:	bf00      	nop
 801f444:	e000e3f0 	.word	0xe000e3f0
 801f448:	20006390 	.word	0x20006390
 801f44c:	e000ed0c 	.word	0xe000ed0c
 801f450:	20006394 	.word	0x20006394

0801f454 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801f454:	4b11      	ldr	r3, [pc, #68]	; (801f49c <prvInsertBlockIntoFreeList+0x48>)
{
 801f456:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801f458:	681a      	ldr	r2, [r3, #0]
 801f45a:	4282      	cmp	r2, r0
 801f45c:	d201      	bcs.n	801f462 <prvInsertBlockIntoFreeList+0xe>
 801f45e:	4613      	mov	r3, r2
 801f460:	e7fa      	b.n	801f458 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801f462:	685c      	ldr	r4, [r3, #4]
 801f464:	1919      	adds	r1, r3, r4
 801f466:	4288      	cmp	r0, r1
 801f468:	d103      	bne.n	801f472 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801f46a:	6841      	ldr	r1, [r0, #4]
 801f46c:	4618      	mov	r0, r3
 801f46e:	4421      	add	r1, r4
 801f470:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801f472:	6844      	ldr	r4, [r0, #4]
 801f474:	1901      	adds	r1, r0, r4
 801f476:	428a      	cmp	r2, r1
 801f478:	d109      	bne.n	801f48e <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801f47a:	4909      	ldr	r1, [pc, #36]	; (801f4a0 <prvInsertBlockIntoFreeList+0x4c>)
 801f47c:	6809      	ldr	r1, [r1, #0]
 801f47e:	428a      	cmp	r2, r1
 801f480:	d005      	beq.n	801f48e <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801f482:	e9d2 5100 	ldrd	r5, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801f486:	4421      	add	r1, r4
 801f488:	e9c0 5100 	strd	r5, r1, [r0]
 801f48c:	e000      	b.n	801f490 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801f48e:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801f490:	4298      	cmp	r0, r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f492:	bc30      	pop	{r4, r5}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801f494:	bf18      	it	ne
 801f496:	6018      	strne	r0, [r3, #0]
}
 801f498:	4770      	bx	lr
 801f49a:	bf00      	nop
 801f49c:	2000e3a8 	.word	0x2000e3a8
 801f4a0:	20006398 	.word	0x20006398

0801f4a4 <pvPortMalloc>:
{
 801f4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f4a8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801f4aa:	f7ff fa33 	bl	801e914 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801f4ae:	4845      	ldr	r0, [pc, #276]	; (801f5c4 <pvPortMalloc+0x120>)
 801f4b0:	6802      	ldr	r2, [r0, #0]
 801f4b2:	2a00      	cmp	r2, #0
 801f4b4:	d036      	beq.n	801f524 <pvPortMalloc+0x80>
 801f4b6:	4b44      	ldr	r3, [pc, #272]	; (801f5c8 <pvPortMalloc+0x124>)
 801f4b8:	681e      	ldr	r6, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801f4ba:	4234      	tst	r4, r6
 801f4bc:	d155      	bne.n	801f56a <pvPortMalloc+0xc6>
			if( xWantedSize > 0 )
 801f4be:	2c00      	cmp	r4, #0
 801f4c0:	d053      	beq.n	801f56a <pvPortMalloc+0xc6>
				xWantedSize += xHeapStructSize;
 801f4c2:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801f4c6:	0758      	lsls	r0, r3, #29
 801f4c8:	d002      	beq.n	801f4d0 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801f4ca:	f023 0307 	bic.w	r3, r3, #7
 801f4ce:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801f4d0:	2b00      	cmp	r3, #0
 801f4d2:	d04a      	beq.n	801f56a <pvPortMalloc+0xc6>
 801f4d4:	f8df 8104 	ldr.w	r8, [pc, #260]	; 801f5dc <pvPortMalloc+0x138>
 801f4d8:	f8d8 5000 	ldr.w	r5, [r8]
 801f4dc:	429d      	cmp	r5, r3
 801f4de:	d344      	bcc.n	801f56a <pvPortMalloc+0xc6>
				pxBlock = xStart.pxNextFreeBlock;
 801f4e0:	483a      	ldr	r0, [pc, #232]	; (801f5cc <pvPortMalloc+0x128>)
 801f4e2:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801f4e4:	e006      	b.n	801f4f4 <pvPortMalloc+0x50>
 801f4e6:	f8d4 c000 	ldr.w	ip, [r4]
 801f4ea:	f1bc 0f00 	cmp.w	ip, #0
 801f4ee:	d004      	beq.n	801f4fa <pvPortMalloc+0x56>
 801f4f0:	4620      	mov	r0, r4
 801f4f2:	4664      	mov	r4, ip
 801f4f4:	6861      	ldr	r1, [r4, #4]
 801f4f6:	4299      	cmp	r1, r3
 801f4f8:	d3f5      	bcc.n	801f4e6 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 801f4fa:	4294      	cmp	r4, r2
 801f4fc:	d035      	beq.n	801f56a <pvPortMalloc+0xc6>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801f4fe:	1aca      	subs	r2, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801f500:	6827      	ldr	r7, [r4, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801f502:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801f504:	6007      	str	r7, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801f506:	d93d      	bls.n	801f584 <pvPortMalloc+0xe0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801f508:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801f50a:	0741      	lsls	r1, r0, #29
 801f50c:	d035      	beq.n	801f57a <pvPortMalloc+0xd6>
 801f50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f512:	b672      	cpsid	i
 801f514:	f383 8811 	msr	BASEPRI, r3
 801f518:	f3bf 8f6f 	isb	sy
 801f51c:	f3bf 8f4f 	dsb	sy
 801f520:	b662      	cpsie	i
 801f522:	e7fe      	b.n	801f522 <pvPortMalloc+0x7e>
	uxAddress = ( size_t ) ucHeap;
 801f524:	4b2a      	ldr	r3, [pc, #168]	; (801f5d0 <pvPortMalloc+0x12c>)
	uxAddress -= xHeapStructSize;
 801f526:	4a2b      	ldr	r2, [pc, #172]	; (801f5d4 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801f528:	075d      	lsls	r5, r3, #29
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801f52a:	4e2b      	ldr	r6, [pc, #172]	; (801f5d8 <pvPortMalloc+0x134>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801f52c:	f022 0207 	bic.w	r2, r2, #7
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801f530:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801f534:	bf18      	it	ne
 801f536:	3307      	addne	r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801f538:	4f24      	ldr	r7, [pc, #144]	; (801f5cc <pvPortMalloc+0x128>)
	pxEnd = ( void * ) uxAddress;
 801f53a:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801f53c:	f04f 0000 	mov.w	r0, #0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801f540:	bf18      	it	ne
 801f542:	f023 0307 	bicne.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801f546:	f8df c094 	ldr.w	ip, [pc, #148]	; 801f5dc <pvPortMalloc+0x138>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801f54a:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801f54c:	1ad3      	subs	r3, r2, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801f54e:	6033      	str	r3, [r6, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801f550:	462e      	mov	r6, r5
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801f552:	f8cc 3000 	str.w	r3, [ip]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801f556:	4234      	tst	r4, r6
	xStart.xBlockSize = ( size_t ) 0;
 801f558:	e9c7 1000 	strd	r1, r0, [r7]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801f55c:	4f1a      	ldr	r7, [pc, #104]	; (801f5c8 <pvPortMalloc+0x124>)
	pxEnd->pxNextFreeBlock = NULL;
 801f55e:	e9c2 0000 	strd	r0, r0, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801f562:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801f564:	e9c1 2300 	strd	r2, r3, [r1]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801f568:	d0a9      	beq.n	801f4be <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
 801f56a:	f7ff fa97 	bl	801ea9c <xTaskResumeAll>
			vApplicationMallocFailedHook();
 801f56e:	2500      	movs	r5, #0
 801f570:	f7e4 fad0 	bl	8003b14 <vApplicationMallocFailedHook>
}
 801f574:	4628      	mov	r0, r5
 801f576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801f57a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801f57c:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801f57e:	f7ff ff69 	bl	801f454 <prvInsertBlockIntoFreeList>
 801f582:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801f584:	4a14      	ldr	r2, [pc, #80]	; (801f5d8 <pvPortMalloc+0x134>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801f586:	1a6d      	subs	r5, r5, r1
					pxBlock->pxNextFreeBlock = NULL;
 801f588:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801f58a:	4331      	orrs	r1, r6
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801f58c:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801f58e:	f8c8 5000 	str.w	r5, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801f592:	4285      	cmp	r5, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801f594:	bf38      	it	cc
 801f596:	6015      	strcc	r5, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801f598:	f104 0508 	add.w	r5, r4, #8
					pxBlock->pxNextFreeBlock = NULL;
 801f59c:	e9c4 3100 	strd	r3, r1, [r4]
	( void ) xTaskResumeAll();
 801f5a0:	f7ff fa7c 	bl	801ea9c <xTaskResumeAll>
		if( pvReturn == NULL )
 801f5a4:	2d00      	cmp	r5, #0
 801f5a6:	d0e2      	beq.n	801f56e <pvPortMalloc+0xca>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801f5a8:	076b      	lsls	r3, r5, #29
 801f5aa:	d0e3      	beq.n	801f574 <pvPortMalloc+0xd0>
 801f5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f5b0:	b672      	cpsid	i
 801f5b2:	f383 8811 	msr	BASEPRI, r3
 801f5b6:	f3bf 8f6f 	isb	sy
 801f5ba:	f3bf 8f4f 	dsb	sy
 801f5be:	b662      	cpsie	i
 801f5c0:	e7fe      	b.n	801f5c0 <pvPortMalloc+0x11c>
 801f5c2:	bf00      	nop
 801f5c4:	20006398 	.word	0x20006398
 801f5c8:	2000e39c 	.word	0x2000e39c
 801f5cc:	2000e3a8 	.word	0x2000e3a8
 801f5d0:	2000639c 	.word	0x2000639c
 801f5d4:	2000e394 	.word	0x2000e394
 801f5d8:	2000e3a4 	.word	0x2000e3a4
 801f5dc:	2000e3a0 	.word	0x2000e3a0

0801f5e0 <vPortFree>:
	if( pv != NULL )
 801f5e0:	b1f0      	cbz	r0, 801f620 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801f5e2:	4a1b      	ldr	r2, [pc, #108]	; (801f650 <vPortFree+0x70>)
 801f5e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801f5e8:	6812      	ldr	r2, [r2, #0]
 801f5ea:	4213      	tst	r3, r2
 801f5ec:	d10a      	bne.n	801f604 <vPortFree+0x24>
 801f5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f5f2:	b672      	cpsid	i
 801f5f4:	f383 8811 	msr	BASEPRI, r3
 801f5f8:	f3bf 8f6f 	isb	sy
 801f5fc:	f3bf 8f4f 	dsb	sy
 801f600:	b662      	cpsie	i
 801f602:	e7fe      	b.n	801f602 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801f604:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801f608:	b159      	cbz	r1, 801f622 <vPortFree+0x42>
 801f60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f60e:	b672      	cpsid	i
 801f610:	f383 8811 	msr	BASEPRI, r3
 801f614:	f3bf 8f6f 	isb	sy
 801f618:	f3bf 8f4f 	dsb	sy
 801f61c:	b662      	cpsie	i
 801f61e:	e7fe      	b.n	801f61e <vPortFree+0x3e>
 801f620:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801f622:	ea23 0302 	bic.w	r3, r3, r2
{
 801f626:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801f628:	f840 3c04 	str.w	r3, [r0, #-4]
 801f62c:	4604      	mov	r4, r0
				vTaskSuspendAll();
 801f62e:	f7ff f971 	bl	801e914 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801f632:	4a08      	ldr	r2, [pc, #32]	; (801f654 <vPortFree+0x74>)
 801f634:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801f638:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 801f63c:	6811      	ldr	r1, [r2, #0]
 801f63e:	440b      	add	r3, r1
 801f640:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801f642:	f7ff ff07 	bl	801f454 <prvInsertBlockIntoFreeList>
}
 801f646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 801f64a:	f7ff ba27 	b.w	801ea9c <xTaskResumeAll>
 801f64e:	bf00      	nop
 801f650:	2000e39c 	.word	0x2000e39c
 801f654:	2000e3a0 	.word	0x2000e3a0

0801f658 <__errno>:
 801f658:	4b01      	ldr	r3, [pc, #4]	; (801f660 <__errno+0x8>)
 801f65a:	6818      	ldr	r0, [r3, #0]
 801f65c:	4770      	bx	lr
 801f65e:	bf00      	nop
 801f660:	200000bc 	.word	0x200000bc

0801f664 <__libc_init_array>:
 801f664:	b570      	push	{r4, r5, r6, lr}
 801f666:	4e0d      	ldr	r6, [pc, #52]	; (801f69c <__libc_init_array+0x38>)
 801f668:	4c0d      	ldr	r4, [pc, #52]	; (801f6a0 <__libc_init_array+0x3c>)
 801f66a:	1ba4      	subs	r4, r4, r6
 801f66c:	10a4      	asrs	r4, r4, #2
 801f66e:	2500      	movs	r5, #0
 801f670:	42a5      	cmp	r5, r4
 801f672:	d109      	bne.n	801f688 <__libc_init_array+0x24>
 801f674:	4e0b      	ldr	r6, [pc, #44]	; (801f6a4 <__libc_init_array+0x40>)
 801f676:	4c0c      	ldr	r4, [pc, #48]	; (801f6a8 <__libc_init_array+0x44>)
 801f678:	f001 f9a8 	bl	80209cc <_init>
 801f67c:	1ba4      	subs	r4, r4, r6
 801f67e:	10a4      	asrs	r4, r4, #2
 801f680:	2500      	movs	r5, #0
 801f682:	42a5      	cmp	r5, r4
 801f684:	d105      	bne.n	801f692 <__libc_init_array+0x2e>
 801f686:	bd70      	pop	{r4, r5, r6, pc}
 801f688:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f68c:	4798      	blx	r3
 801f68e:	3501      	adds	r5, #1
 801f690:	e7ee      	b.n	801f670 <__libc_init_array+0xc>
 801f692:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f696:	4798      	blx	r3
 801f698:	3501      	adds	r5, #1
 801f69a:	e7f2      	b.n	801f682 <__libc_init_array+0x1e>
 801f69c:	080263b0 	.word	0x080263b0
 801f6a0:	080263b0 	.word	0x080263b0
 801f6a4:	080263b0 	.word	0x080263b0
 801f6a8:	080263b4 	.word	0x080263b4

0801f6ac <malloc>:
 801f6ac:	4b02      	ldr	r3, [pc, #8]	; (801f6b8 <malloc+0xc>)
 801f6ae:	4601      	mov	r1, r0
 801f6b0:	6818      	ldr	r0, [r3, #0]
 801f6b2:	f000 b885 	b.w	801f7c0 <_malloc_r>
 801f6b6:	bf00      	nop
 801f6b8:	200000bc 	.word	0x200000bc

0801f6bc <free>:
 801f6bc:	4b02      	ldr	r3, [pc, #8]	; (801f6c8 <free+0xc>)
 801f6be:	4601      	mov	r1, r0
 801f6c0:	6818      	ldr	r0, [r3, #0]
 801f6c2:	f000 b82f 	b.w	801f724 <_free_r>
 801f6c6:	bf00      	nop
 801f6c8:	200000bc 	.word	0x200000bc

0801f6cc <memcpy>:
 801f6cc:	b510      	push	{r4, lr}
 801f6ce:	1e43      	subs	r3, r0, #1
 801f6d0:	440a      	add	r2, r1
 801f6d2:	4291      	cmp	r1, r2
 801f6d4:	d100      	bne.n	801f6d8 <memcpy+0xc>
 801f6d6:	bd10      	pop	{r4, pc}
 801f6d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f6dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f6e0:	e7f7      	b.n	801f6d2 <memcpy+0x6>

0801f6e2 <memmove>:
 801f6e2:	4288      	cmp	r0, r1
 801f6e4:	b510      	push	{r4, lr}
 801f6e6:	eb01 0302 	add.w	r3, r1, r2
 801f6ea:	d807      	bhi.n	801f6fc <memmove+0x1a>
 801f6ec:	1e42      	subs	r2, r0, #1
 801f6ee:	4299      	cmp	r1, r3
 801f6f0:	d00a      	beq.n	801f708 <memmove+0x26>
 801f6f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f6f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 801f6fa:	e7f8      	b.n	801f6ee <memmove+0xc>
 801f6fc:	4283      	cmp	r3, r0
 801f6fe:	d9f5      	bls.n	801f6ec <memmove+0xa>
 801f700:	1881      	adds	r1, r0, r2
 801f702:	1ad2      	subs	r2, r2, r3
 801f704:	42d3      	cmn	r3, r2
 801f706:	d100      	bne.n	801f70a <memmove+0x28>
 801f708:	bd10      	pop	{r4, pc}
 801f70a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f70e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801f712:	e7f7      	b.n	801f704 <memmove+0x22>

0801f714 <memset>:
 801f714:	4402      	add	r2, r0
 801f716:	4603      	mov	r3, r0
 801f718:	4293      	cmp	r3, r2
 801f71a:	d100      	bne.n	801f71e <memset+0xa>
 801f71c:	4770      	bx	lr
 801f71e:	f803 1b01 	strb.w	r1, [r3], #1
 801f722:	e7f9      	b.n	801f718 <memset+0x4>

0801f724 <_free_r>:
 801f724:	b538      	push	{r3, r4, r5, lr}
 801f726:	4605      	mov	r5, r0
 801f728:	2900      	cmp	r1, #0
 801f72a:	d045      	beq.n	801f7b8 <_free_r+0x94>
 801f72c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f730:	1f0c      	subs	r4, r1, #4
 801f732:	2b00      	cmp	r3, #0
 801f734:	bfb8      	it	lt
 801f736:	18e4      	addlt	r4, r4, r3
 801f738:	f000 fc1c 	bl	801ff74 <__malloc_lock>
 801f73c:	4a1f      	ldr	r2, [pc, #124]	; (801f7bc <_free_r+0x98>)
 801f73e:	6813      	ldr	r3, [r2, #0]
 801f740:	4610      	mov	r0, r2
 801f742:	b933      	cbnz	r3, 801f752 <_free_r+0x2e>
 801f744:	6063      	str	r3, [r4, #4]
 801f746:	6014      	str	r4, [r2, #0]
 801f748:	4628      	mov	r0, r5
 801f74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f74e:	f000 bc12 	b.w	801ff76 <__malloc_unlock>
 801f752:	42a3      	cmp	r3, r4
 801f754:	d90c      	bls.n	801f770 <_free_r+0x4c>
 801f756:	6821      	ldr	r1, [r4, #0]
 801f758:	1862      	adds	r2, r4, r1
 801f75a:	4293      	cmp	r3, r2
 801f75c:	bf04      	itt	eq
 801f75e:	681a      	ldreq	r2, [r3, #0]
 801f760:	685b      	ldreq	r3, [r3, #4]
 801f762:	6063      	str	r3, [r4, #4]
 801f764:	bf04      	itt	eq
 801f766:	1852      	addeq	r2, r2, r1
 801f768:	6022      	streq	r2, [r4, #0]
 801f76a:	6004      	str	r4, [r0, #0]
 801f76c:	e7ec      	b.n	801f748 <_free_r+0x24>
 801f76e:	4613      	mov	r3, r2
 801f770:	685a      	ldr	r2, [r3, #4]
 801f772:	b10a      	cbz	r2, 801f778 <_free_r+0x54>
 801f774:	42a2      	cmp	r2, r4
 801f776:	d9fa      	bls.n	801f76e <_free_r+0x4a>
 801f778:	6819      	ldr	r1, [r3, #0]
 801f77a:	1858      	adds	r0, r3, r1
 801f77c:	42a0      	cmp	r0, r4
 801f77e:	d10b      	bne.n	801f798 <_free_r+0x74>
 801f780:	6820      	ldr	r0, [r4, #0]
 801f782:	4401      	add	r1, r0
 801f784:	1858      	adds	r0, r3, r1
 801f786:	4282      	cmp	r2, r0
 801f788:	6019      	str	r1, [r3, #0]
 801f78a:	d1dd      	bne.n	801f748 <_free_r+0x24>
 801f78c:	6810      	ldr	r0, [r2, #0]
 801f78e:	6852      	ldr	r2, [r2, #4]
 801f790:	605a      	str	r2, [r3, #4]
 801f792:	4401      	add	r1, r0
 801f794:	6019      	str	r1, [r3, #0]
 801f796:	e7d7      	b.n	801f748 <_free_r+0x24>
 801f798:	d902      	bls.n	801f7a0 <_free_r+0x7c>
 801f79a:	230c      	movs	r3, #12
 801f79c:	602b      	str	r3, [r5, #0]
 801f79e:	e7d3      	b.n	801f748 <_free_r+0x24>
 801f7a0:	6820      	ldr	r0, [r4, #0]
 801f7a2:	1821      	adds	r1, r4, r0
 801f7a4:	428a      	cmp	r2, r1
 801f7a6:	bf04      	itt	eq
 801f7a8:	6811      	ldreq	r1, [r2, #0]
 801f7aa:	6852      	ldreq	r2, [r2, #4]
 801f7ac:	6062      	str	r2, [r4, #4]
 801f7ae:	bf04      	itt	eq
 801f7b0:	1809      	addeq	r1, r1, r0
 801f7b2:	6021      	streq	r1, [r4, #0]
 801f7b4:	605c      	str	r4, [r3, #4]
 801f7b6:	e7c7      	b.n	801f748 <_free_r+0x24>
 801f7b8:	bd38      	pop	{r3, r4, r5, pc}
 801f7ba:	bf00      	nop
 801f7bc:	2000e3b0 	.word	0x2000e3b0

0801f7c0 <_malloc_r>:
 801f7c0:	b570      	push	{r4, r5, r6, lr}
 801f7c2:	1ccd      	adds	r5, r1, #3
 801f7c4:	f025 0503 	bic.w	r5, r5, #3
 801f7c8:	3508      	adds	r5, #8
 801f7ca:	2d0c      	cmp	r5, #12
 801f7cc:	bf38      	it	cc
 801f7ce:	250c      	movcc	r5, #12
 801f7d0:	2d00      	cmp	r5, #0
 801f7d2:	4606      	mov	r6, r0
 801f7d4:	db01      	blt.n	801f7da <_malloc_r+0x1a>
 801f7d6:	42a9      	cmp	r1, r5
 801f7d8:	d903      	bls.n	801f7e2 <_malloc_r+0x22>
 801f7da:	230c      	movs	r3, #12
 801f7dc:	6033      	str	r3, [r6, #0]
 801f7de:	2000      	movs	r0, #0
 801f7e0:	bd70      	pop	{r4, r5, r6, pc}
 801f7e2:	f000 fbc7 	bl	801ff74 <__malloc_lock>
 801f7e6:	4a21      	ldr	r2, [pc, #132]	; (801f86c <_malloc_r+0xac>)
 801f7e8:	6814      	ldr	r4, [r2, #0]
 801f7ea:	4621      	mov	r1, r4
 801f7ec:	b991      	cbnz	r1, 801f814 <_malloc_r+0x54>
 801f7ee:	4c20      	ldr	r4, [pc, #128]	; (801f870 <_malloc_r+0xb0>)
 801f7f0:	6823      	ldr	r3, [r4, #0]
 801f7f2:	b91b      	cbnz	r3, 801f7fc <_malloc_r+0x3c>
 801f7f4:	4630      	mov	r0, r6
 801f7f6:	f000 f8cd 	bl	801f994 <_sbrk_r>
 801f7fa:	6020      	str	r0, [r4, #0]
 801f7fc:	4629      	mov	r1, r5
 801f7fe:	4630      	mov	r0, r6
 801f800:	f000 f8c8 	bl	801f994 <_sbrk_r>
 801f804:	1c43      	adds	r3, r0, #1
 801f806:	d124      	bne.n	801f852 <_malloc_r+0x92>
 801f808:	230c      	movs	r3, #12
 801f80a:	6033      	str	r3, [r6, #0]
 801f80c:	4630      	mov	r0, r6
 801f80e:	f000 fbb2 	bl	801ff76 <__malloc_unlock>
 801f812:	e7e4      	b.n	801f7de <_malloc_r+0x1e>
 801f814:	680b      	ldr	r3, [r1, #0]
 801f816:	1b5b      	subs	r3, r3, r5
 801f818:	d418      	bmi.n	801f84c <_malloc_r+0x8c>
 801f81a:	2b0b      	cmp	r3, #11
 801f81c:	d90f      	bls.n	801f83e <_malloc_r+0x7e>
 801f81e:	600b      	str	r3, [r1, #0]
 801f820:	50cd      	str	r5, [r1, r3]
 801f822:	18cc      	adds	r4, r1, r3
 801f824:	4630      	mov	r0, r6
 801f826:	f000 fba6 	bl	801ff76 <__malloc_unlock>
 801f82a:	f104 000b 	add.w	r0, r4, #11
 801f82e:	1d23      	adds	r3, r4, #4
 801f830:	f020 0007 	bic.w	r0, r0, #7
 801f834:	1ac3      	subs	r3, r0, r3
 801f836:	d0d3      	beq.n	801f7e0 <_malloc_r+0x20>
 801f838:	425a      	negs	r2, r3
 801f83a:	50e2      	str	r2, [r4, r3]
 801f83c:	e7d0      	b.n	801f7e0 <_malloc_r+0x20>
 801f83e:	428c      	cmp	r4, r1
 801f840:	684b      	ldr	r3, [r1, #4]
 801f842:	bf16      	itet	ne
 801f844:	6063      	strne	r3, [r4, #4]
 801f846:	6013      	streq	r3, [r2, #0]
 801f848:	460c      	movne	r4, r1
 801f84a:	e7eb      	b.n	801f824 <_malloc_r+0x64>
 801f84c:	460c      	mov	r4, r1
 801f84e:	6849      	ldr	r1, [r1, #4]
 801f850:	e7cc      	b.n	801f7ec <_malloc_r+0x2c>
 801f852:	1cc4      	adds	r4, r0, #3
 801f854:	f024 0403 	bic.w	r4, r4, #3
 801f858:	42a0      	cmp	r0, r4
 801f85a:	d005      	beq.n	801f868 <_malloc_r+0xa8>
 801f85c:	1a21      	subs	r1, r4, r0
 801f85e:	4630      	mov	r0, r6
 801f860:	f000 f898 	bl	801f994 <_sbrk_r>
 801f864:	3001      	adds	r0, #1
 801f866:	d0cf      	beq.n	801f808 <_malloc_r+0x48>
 801f868:	6025      	str	r5, [r4, #0]
 801f86a:	e7db      	b.n	801f824 <_malloc_r+0x64>
 801f86c:	2000e3b0 	.word	0x2000e3b0
 801f870:	2000e3b4 	.word	0x2000e3b4

0801f874 <iprintf>:
 801f874:	b40f      	push	{r0, r1, r2, r3}
 801f876:	4b0a      	ldr	r3, [pc, #40]	; (801f8a0 <iprintf+0x2c>)
 801f878:	b513      	push	{r0, r1, r4, lr}
 801f87a:	681c      	ldr	r4, [r3, #0]
 801f87c:	b124      	cbz	r4, 801f888 <iprintf+0x14>
 801f87e:	69a3      	ldr	r3, [r4, #24]
 801f880:	b913      	cbnz	r3, 801f888 <iprintf+0x14>
 801f882:	4620      	mov	r0, r4
 801f884:	f000 fa88 	bl	801fd98 <__sinit>
 801f888:	ab05      	add	r3, sp, #20
 801f88a:	9a04      	ldr	r2, [sp, #16]
 801f88c:	68a1      	ldr	r1, [r4, #8]
 801f88e:	9301      	str	r3, [sp, #4]
 801f890:	4620      	mov	r0, r4
 801f892:	f000 fced 	bl	8020270 <_vfiprintf_r>
 801f896:	b002      	add	sp, #8
 801f898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f89c:	b004      	add	sp, #16
 801f89e:	4770      	bx	lr
 801f8a0:	200000bc 	.word	0x200000bc

0801f8a4 <putchar>:
 801f8a4:	b538      	push	{r3, r4, r5, lr}
 801f8a6:	4b08      	ldr	r3, [pc, #32]	; (801f8c8 <putchar+0x24>)
 801f8a8:	681c      	ldr	r4, [r3, #0]
 801f8aa:	4605      	mov	r5, r0
 801f8ac:	b124      	cbz	r4, 801f8b8 <putchar+0x14>
 801f8ae:	69a3      	ldr	r3, [r4, #24]
 801f8b0:	b913      	cbnz	r3, 801f8b8 <putchar+0x14>
 801f8b2:	4620      	mov	r0, r4
 801f8b4:	f000 fa70 	bl	801fd98 <__sinit>
 801f8b8:	68a2      	ldr	r2, [r4, #8]
 801f8ba:	4629      	mov	r1, r5
 801f8bc:	4620      	mov	r0, r4
 801f8be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f8c2:	f000 bf73 	b.w	80207ac <_putc_r>
 801f8c6:	bf00      	nop
 801f8c8:	200000bc 	.word	0x200000bc

0801f8cc <_puts_r>:
 801f8cc:	b570      	push	{r4, r5, r6, lr}
 801f8ce:	460e      	mov	r6, r1
 801f8d0:	4605      	mov	r5, r0
 801f8d2:	b118      	cbz	r0, 801f8dc <_puts_r+0x10>
 801f8d4:	6983      	ldr	r3, [r0, #24]
 801f8d6:	b90b      	cbnz	r3, 801f8dc <_puts_r+0x10>
 801f8d8:	f000 fa5e 	bl	801fd98 <__sinit>
 801f8dc:	69ab      	ldr	r3, [r5, #24]
 801f8de:	68ac      	ldr	r4, [r5, #8]
 801f8e0:	b913      	cbnz	r3, 801f8e8 <_puts_r+0x1c>
 801f8e2:	4628      	mov	r0, r5
 801f8e4:	f000 fa58 	bl	801fd98 <__sinit>
 801f8e8:	4b23      	ldr	r3, [pc, #140]	; (801f978 <_puts_r+0xac>)
 801f8ea:	429c      	cmp	r4, r3
 801f8ec:	d117      	bne.n	801f91e <_puts_r+0x52>
 801f8ee:	686c      	ldr	r4, [r5, #4]
 801f8f0:	89a3      	ldrh	r3, [r4, #12]
 801f8f2:	071b      	lsls	r3, r3, #28
 801f8f4:	d51d      	bpl.n	801f932 <_puts_r+0x66>
 801f8f6:	6923      	ldr	r3, [r4, #16]
 801f8f8:	b1db      	cbz	r3, 801f932 <_puts_r+0x66>
 801f8fa:	3e01      	subs	r6, #1
 801f8fc:	68a3      	ldr	r3, [r4, #8]
 801f8fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f902:	3b01      	subs	r3, #1
 801f904:	60a3      	str	r3, [r4, #8]
 801f906:	b9e9      	cbnz	r1, 801f944 <_puts_r+0x78>
 801f908:	2b00      	cmp	r3, #0
 801f90a:	da2e      	bge.n	801f96a <_puts_r+0x9e>
 801f90c:	4622      	mov	r2, r4
 801f90e:	210a      	movs	r1, #10
 801f910:	4628      	mov	r0, r5
 801f912:	f000 f891 	bl	801fa38 <__swbuf_r>
 801f916:	3001      	adds	r0, #1
 801f918:	d011      	beq.n	801f93e <_puts_r+0x72>
 801f91a:	200a      	movs	r0, #10
 801f91c:	e011      	b.n	801f942 <_puts_r+0x76>
 801f91e:	4b17      	ldr	r3, [pc, #92]	; (801f97c <_puts_r+0xb0>)
 801f920:	429c      	cmp	r4, r3
 801f922:	d101      	bne.n	801f928 <_puts_r+0x5c>
 801f924:	68ac      	ldr	r4, [r5, #8]
 801f926:	e7e3      	b.n	801f8f0 <_puts_r+0x24>
 801f928:	4b15      	ldr	r3, [pc, #84]	; (801f980 <_puts_r+0xb4>)
 801f92a:	429c      	cmp	r4, r3
 801f92c:	bf08      	it	eq
 801f92e:	68ec      	ldreq	r4, [r5, #12]
 801f930:	e7de      	b.n	801f8f0 <_puts_r+0x24>
 801f932:	4621      	mov	r1, r4
 801f934:	4628      	mov	r0, r5
 801f936:	f000 f8d1 	bl	801fadc <__swsetup_r>
 801f93a:	2800      	cmp	r0, #0
 801f93c:	d0dd      	beq.n	801f8fa <_puts_r+0x2e>
 801f93e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f942:	bd70      	pop	{r4, r5, r6, pc}
 801f944:	2b00      	cmp	r3, #0
 801f946:	da04      	bge.n	801f952 <_puts_r+0x86>
 801f948:	69a2      	ldr	r2, [r4, #24]
 801f94a:	429a      	cmp	r2, r3
 801f94c:	dc06      	bgt.n	801f95c <_puts_r+0x90>
 801f94e:	290a      	cmp	r1, #10
 801f950:	d004      	beq.n	801f95c <_puts_r+0x90>
 801f952:	6823      	ldr	r3, [r4, #0]
 801f954:	1c5a      	adds	r2, r3, #1
 801f956:	6022      	str	r2, [r4, #0]
 801f958:	7019      	strb	r1, [r3, #0]
 801f95a:	e7cf      	b.n	801f8fc <_puts_r+0x30>
 801f95c:	4622      	mov	r2, r4
 801f95e:	4628      	mov	r0, r5
 801f960:	f000 f86a 	bl	801fa38 <__swbuf_r>
 801f964:	3001      	adds	r0, #1
 801f966:	d1c9      	bne.n	801f8fc <_puts_r+0x30>
 801f968:	e7e9      	b.n	801f93e <_puts_r+0x72>
 801f96a:	6823      	ldr	r3, [r4, #0]
 801f96c:	200a      	movs	r0, #10
 801f96e:	1c5a      	adds	r2, r3, #1
 801f970:	6022      	str	r2, [r4, #0]
 801f972:	7018      	strb	r0, [r3, #0]
 801f974:	e7e5      	b.n	801f942 <_puts_r+0x76>
 801f976:	bf00      	nop
 801f978:	08026334 	.word	0x08026334
 801f97c:	08026354 	.word	0x08026354
 801f980:	08026314 	.word	0x08026314

0801f984 <puts>:
 801f984:	4b02      	ldr	r3, [pc, #8]	; (801f990 <puts+0xc>)
 801f986:	4601      	mov	r1, r0
 801f988:	6818      	ldr	r0, [r3, #0]
 801f98a:	f7ff bf9f 	b.w	801f8cc <_puts_r>
 801f98e:	bf00      	nop
 801f990:	200000bc 	.word	0x200000bc

0801f994 <_sbrk_r>:
 801f994:	b538      	push	{r3, r4, r5, lr}
 801f996:	4c06      	ldr	r4, [pc, #24]	; (801f9b0 <_sbrk_r+0x1c>)
 801f998:	2300      	movs	r3, #0
 801f99a:	4605      	mov	r5, r0
 801f99c:	4608      	mov	r0, r1
 801f99e:	6023      	str	r3, [r4, #0]
 801f9a0:	f7ec fa84 	bl	800beac <_sbrk>
 801f9a4:	1c43      	adds	r3, r0, #1
 801f9a6:	d102      	bne.n	801f9ae <_sbrk_r+0x1a>
 801f9a8:	6823      	ldr	r3, [r4, #0]
 801f9aa:	b103      	cbz	r3, 801f9ae <_sbrk_r+0x1a>
 801f9ac:	602b      	str	r3, [r5, #0]
 801f9ae:	bd38      	pop	{r3, r4, r5, pc}
 801f9b0:	20013280 	.word	0x20013280

0801f9b4 <siprintf>:
 801f9b4:	b40e      	push	{r1, r2, r3}
 801f9b6:	b500      	push	{lr}
 801f9b8:	b09c      	sub	sp, #112	; 0x70
 801f9ba:	ab1d      	add	r3, sp, #116	; 0x74
 801f9bc:	9002      	str	r0, [sp, #8]
 801f9be:	9006      	str	r0, [sp, #24]
 801f9c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f9c4:	4809      	ldr	r0, [pc, #36]	; (801f9ec <siprintf+0x38>)
 801f9c6:	9107      	str	r1, [sp, #28]
 801f9c8:	9104      	str	r1, [sp, #16]
 801f9ca:	4909      	ldr	r1, [pc, #36]	; (801f9f0 <siprintf+0x3c>)
 801f9cc:	f853 2b04 	ldr.w	r2, [r3], #4
 801f9d0:	9105      	str	r1, [sp, #20]
 801f9d2:	6800      	ldr	r0, [r0, #0]
 801f9d4:	9301      	str	r3, [sp, #4]
 801f9d6:	a902      	add	r1, sp, #8
 801f9d8:	f000 fb28 	bl	802002c <_svfiprintf_r>
 801f9dc:	9b02      	ldr	r3, [sp, #8]
 801f9de:	2200      	movs	r2, #0
 801f9e0:	701a      	strb	r2, [r3, #0]
 801f9e2:	b01c      	add	sp, #112	; 0x70
 801f9e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801f9e8:	b003      	add	sp, #12
 801f9ea:	4770      	bx	lr
 801f9ec:	200000bc 	.word	0x200000bc
 801f9f0:	ffff0208 	.word	0xffff0208

0801f9f4 <strcpy>:
 801f9f4:	4603      	mov	r3, r0
 801f9f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f9fa:	f803 2b01 	strb.w	r2, [r3], #1
 801f9fe:	2a00      	cmp	r2, #0
 801fa00:	d1f9      	bne.n	801f9f6 <strcpy+0x2>
 801fa02:	4770      	bx	lr

0801fa04 <strstr>:
 801fa04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa06:	7803      	ldrb	r3, [r0, #0]
 801fa08:	b17b      	cbz	r3, 801fa2a <strstr+0x26>
 801fa0a:	4604      	mov	r4, r0
 801fa0c:	7823      	ldrb	r3, [r4, #0]
 801fa0e:	4620      	mov	r0, r4
 801fa10:	1c66      	adds	r6, r4, #1
 801fa12:	b17b      	cbz	r3, 801fa34 <strstr+0x30>
 801fa14:	1e4a      	subs	r2, r1, #1
 801fa16:	1e63      	subs	r3, r4, #1
 801fa18:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801fa1c:	b14d      	cbz	r5, 801fa32 <strstr+0x2e>
 801fa1e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801fa22:	42af      	cmp	r7, r5
 801fa24:	4634      	mov	r4, r6
 801fa26:	d0f7      	beq.n	801fa18 <strstr+0x14>
 801fa28:	e7f0      	b.n	801fa0c <strstr+0x8>
 801fa2a:	780b      	ldrb	r3, [r1, #0]
 801fa2c:	2b00      	cmp	r3, #0
 801fa2e:	bf18      	it	ne
 801fa30:	2000      	movne	r0, #0
 801fa32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa34:	4618      	mov	r0, r3
 801fa36:	e7fc      	b.n	801fa32 <strstr+0x2e>

0801fa38 <__swbuf_r>:
 801fa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa3a:	460e      	mov	r6, r1
 801fa3c:	4614      	mov	r4, r2
 801fa3e:	4605      	mov	r5, r0
 801fa40:	b118      	cbz	r0, 801fa4a <__swbuf_r+0x12>
 801fa42:	6983      	ldr	r3, [r0, #24]
 801fa44:	b90b      	cbnz	r3, 801fa4a <__swbuf_r+0x12>
 801fa46:	f000 f9a7 	bl	801fd98 <__sinit>
 801fa4a:	4b21      	ldr	r3, [pc, #132]	; (801fad0 <__swbuf_r+0x98>)
 801fa4c:	429c      	cmp	r4, r3
 801fa4e:	d12a      	bne.n	801faa6 <__swbuf_r+0x6e>
 801fa50:	686c      	ldr	r4, [r5, #4]
 801fa52:	69a3      	ldr	r3, [r4, #24]
 801fa54:	60a3      	str	r3, [r4, #8]
 801fa56:	89a3      	ldrh	r3, [r4, #12]
 801fa58:	071a      	lsls	r2, r3, #28
 801fa5a:	d52e      	bpl.n	801faba <__swbuf_r+0x82>
 801fa5c:	6923      	ldr	r3, [r4, #16]
 801fa5e:	b363      	cbz	r3, 801faba <__swbuf_r+0x82>
 801fa60:	6923      	ldr	r3, [r4, #16]
 801fa62:	6820      	ldr	r0, [r4, #0]
 801fa64:	1ac0      	subs	r0, r0, r3
 801fa66:	6963      	ldr	r3, [r4, #20]
 801fa68:	b2f6      	uxtb	r6, r6
 801fa6a:	4283      	cmp	r3, r0
 801fa6c:	4637      	mov	r7, r6
 801fa6e:	dc04      	bgt.n	801fa7a <__swbuf_r+0x42>
 801fa70:	4621      	mov	r1, r4
 801fa72:	4628      	mov	r0, r5
 801fa74:	f000 f926 	bl	801fcc4 <_fflush_r>
 801fa78:	bb28      	cbnz	r0, 801fac6 <__swbuf_r+0x8e>
 801fa7a:	68a3      	ldr	r3, [r4, #8]
 801fa7c:	3b01      	subs	r3, #1
 801fa7e:	60a3      	str	r3, [r4, #8]
 801fa80:	6823      	ldr	r3, [r4, #0]
 801fa82:	1c5a      	adds	r2, r3, #1
 801fa84:	6022      	str	r2, [r4, #0]
 801fa86:	701e      	strb	r6, [r3, #0]
 801fa88:	6963      	ldr	r3, [r4, #20]
 801fa8a:	3001      	adds	r0, #1
 801fa8c:	4283      	cmp	r3, r0
 801fa8e:	d004      	beq.n	801fa9a <__swbuf_r+0x62>
 801fa90:	89a3      	ldrh	r3, [r4, #12]
 801fa92:	07db      	lsls	r3, r3, #31
 801fa94:	d519      	bpl.n	801faca <__swbuf_r+0x92>
 801fa96:	2e0a      	cmp	r6, #10
 801fa98:	d117      	bne.n	801faca <__swbuf_r+0x92>
 801fa9a:	4621      	mov	r1, r4
 801fa9c:	4628      	mov	r0, r5
 801fa9e:	f000 f911 	bl	801fcc4 <_fflush_r>
 801faa2:	b190      	cbz	r0, 801faca <__swbuf_r+0x92>
 801faa4:	e00f      	b.n	801fac6 <__swbuf_r+0x8e>
 801faa6:	4b0b      	ldr	r3, [pc, #44]	; (801fad4 <__swbuf_r+0x9c>)
 801faa8:	429c      	cmp	r4, r3
 801faaa:	d101      	bne.n	801fab0 <__swbuf_r+0x78>
 801faac:	68ac      	ldr	r4, [r5, #8]
 801faae:	e7d0      	b.n	801fa52 <__swbuf_r+0x1a>
 801fab0:	4b09      	ldr	r3, [pc, #36]	; (801fad8 <__swbuf_r+0xa0>)
 801fab2:	429c      	cmp	r4, r3
 801fab4:	bf08      	it	eq
 801fab6:	68ec      	ldreq	r4, [r5, #12]
 801fab8:	e7cb      	b.n	801fa52 <__swbuf_r+0x1a>
 801faba:	4621      	mov	r1, r4
 801fabc:	4628      	mov	r0, r5
 801fabe:	f000 f80d 	bl	801fadc <__swsetup_r>
 801fac2:	2800      	cmp	r0, #0
 801fac4:	d0cc      	beq.n	801fa60 <__swbuf_r+0x28>
 801fac6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801faca:	4638      	mov	r0, r7
 801facc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801face:	bf00      	nop
 801fad0:	08026334 	.word	0x08026334
 801fad4:	08026354 	.word	0x08026354
 801fad8:	08026314 	.word	0x08026314

0801fadc <__swsetup_r>:
 801fadc:	4b32      	ldr	r3, [pc, #200]	; (801fba8 <__swsetup_r+0xcc>)
 801fade:	b570      	push	{r4, r5, r6, lr}
 801fae0:	681d      	ldr	r5, [r3, #0]
 801fae2:	4606      	mov	r6, r0
 801fae4:	460c      	mov	r4, r1
 801fae6:	b125      	cbz	r5, 801faf2 <__swsetup_r+0x16>
 801fae8:	69ab      	ldr	r3, [r5, #24]
 801faea:	b913      	cbnz	r3, 801faf2 <__swsetup_r+0x16>
 801faec:	4628      	mov	r0, r5
 801faee:	f000 f953 	bl	801fd98 <__sinit>
 801faf2:	4b2e      	ldr	r3, [pc, #184]	; (801fbac <__swsetup_r+0xd0>)
 801faf4:	429c      	cmp	r4, r3
 801faf6:	d10f      	bne.n	801fb18 <__swsetup_r+0x3c>
 801faf8:	686c      	ldr	r4, [r5, #4]
 801fafa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fafe:	b29a      	uxth	r2, r3
 801fb00:	0715      	lsls	r5, r2, #28
 801fb02:	d42c      	bmi.n	801fb5e <__swsetup_r+0x82>
 801fb04:	06d0      	lsls	r0, r2, #27
 801fb06:	d411      	bmi.n	801fb2c <__swsetup_r+0x50>
 801fb08:	2209      	movs	r2, #9
 801fb0a:	6032      	str	r2, [r6, #0]
 801fb0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fb10:	81a3      	strh	r3, [r4, #12]
 801fb12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fb16:	e03e      	b.n	801fb96 <__swsetup_r+0xba>
 801fb18:	4b25      	ldr	r3, [pc, #148]	; (801fbb0 <__swsetup_r+0xd4>)
 801fb1a:	429c      	cmp	r4, r3
 801fb1c:	d101      	bne.n	801fb22 <__swsetup_r+0x46>
 801fb1e:	68ac      	ldr	r4, [r5, #8]
 801fb20:	e7eb      	b.n	801fafa <__swsetup_r+0x1e>
 801fb22:	4b24      	ldr	r3, [pc, #144]	; (801fbb4 <__swsetup_r+0xd8>)
 801fb24:	429c      	cmp	r4, r3
 801fb26:	bf08      	it	eq
 801fb28:	68ec      	ldreq	r4, [r5, #12]
 801fb2a:	e7e6      	b.n	801fafa <__swsetup_r+0x1e>
 801fb2c:	0751      	lsls	r1, r2, #29
 801fb2e:	d512      	bpl.n	801fb56 <__swsetup_r+0x7a>
 801fb30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fb32:	b141      	cbz	r1, 801fb46 <__swsetup_r+0x6a>
 801fb34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fb38:	4299      	cmp	r1, r3
 801fb3a:	d002      	beq.n	801fb42 <__swsetup_r+0x66>
 801fb3c:	4630      	mov	r0, r6
 801fb3e:	f7ff fdf1 	bl	801f724 <_free_r>
 801fb42:	2300      	movs	r3, #0
 801fb44:	6363      	str	r3, [r4, #52]	; 0x34
 801fb46:	89a3      	ldrh	r3, [r4, #12]
 801fb48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fb4c:	81a3      	strh	r3, [r4, #12]
 801fb4e:	2300      	movs	r3, #0
 801fb50:	6063      	str	r3, [r4, #4]
 801fb52:	6923      	ldr	r3, [r4, #16]
 801fb54:	6023      	str	r3, [r4, #0]
 801fb56:	89a3      	ldrh	r3, [r4, #12]
 801fb58:	f043 0308 	orr.w	r3, r3, #8
 801fb5c:	81a3      	strh	r3, [r4, #12]
 801fb5e:	6923      	ldr	r3, [r4, #16]
 801fb60:	b94b      	cbnz	r3, 801fb76 <__swsetup_r+0x9a>
 801fb62:	89a3      	ldrh	r3, [r4, #12]
 801fb64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fb68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fb6c:	d003      	beq.n	801fb76 <__swsetup_r+0x9a>
 801fb6e:	4621      	mov	r1, r4
 801fb70:	4630      	mov	r0, r6
 801fb72:	f000 f9bf 	bl	801fef4 <__smakebuf_r>
 801fb76:	89a2      	ldrh	r2, [r4, #12]
 801fb78:	f012 0301 	ands.w	r3, r2, #1
 801fb7c:	d00c      	beq.n	801fb98 <__swsetup_r+0xbc>
 801fb7e:	2300      	movs	r3, #0
 801fb80:	60a3      	str	r3, [r4, #8]
 801fb82:	6963      	ldr	r3, [r4, #20]
 801fb84:	425b      	negs	r3, r3
 801fb86:	61a3      	str	r3, [r4, #24]
 801fb88:	6923      	ldr	r3, [r4, #16]
 801fb8a:	b953      	cbnz	r3, 801fba2 <__swsetup_r+0xc6>
 801fb8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fb90:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801fb94:	d1ba      	bne.n	801fb0c <__swsetup_r+0x30>
 801fb96:	bd70      	pop	{r4, r5, r6, pc}
 801fb98:	0792      	lsls	r2, r2, #30
 801fb9a:	bf58      	it	pl
 801fb9c:	6963      	ldrpl	r3, [r4, #20]
 801fb9e:	60a3      	str	r3, [r4, #8]
 801fba0:	e7f2      	b.n	801fb88 <__swsetup_r+0xac>
 801fba2:	2000      	movs	r0, #0
 801fba4:	e7f7      	b.n	801fb96 <__swsetup_r+0xba>
 801fba6:	bf00      	nop
 801fba8:	200000bc 	.word	0x200000bc
 801fbac:	08026334 	.word	0x08026334
 801fbb0:	08026354 	.word	0x08026354
 801fbb4:	08026314 	.word	0x08026314

0801fbb8 <__sflush_r>:
 801fbb8:	898a      	ldrh	r2, [r1, #12]
 801fbba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fbbe:	4605      	mov	r5, r0
 801fbc0:	0710      	lsls	r0, r2, #28
 801fbc2:	460c      	mov	r4, r1
 801fbc4:	d458      	bmi.n	801fc78 <__sflush_r+0xc0>
 801fbc6:	684b      	ldr	r3, [r1, #4]
 801fbc8:	2b00      	cmp	r3, #0
 801fbca:	dc05      	bgt.n	801fbd8 <__sflush_r+0x20>
 801fbcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801fbce:	2b00      	cmp	r3, #0
 801fbd0:	dc02      	bgt.n	801fbd8 <__sflush_r+0x20>
 801fbd2:	2000      	movs	r0, #0
 801fbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fbd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fbda:	2e00      	cmp	r6, #0
 801fbdc:	d0f9      	beq.n	801fbd2 <__sflush_r+0x1a>
 801fbde:	2300      	movs	r3, #0
 801fbe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fbe4:	682f      	ldr	r7, [r5, #0]
 801fbe6:	6a21      	ldr	r1, [r4, #32]
 801fbe8:	602b      	str	r3, [r5, #0]
 801fbea:	d032      	beq.n	801fc52 <__sflush_r+0x9a>
 801fbec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801fbee:	89a3      	ldrh	r3, [r4, #12]
 801fbf0:	075a      	lsls	r2, r3, #29
 801fbf2:	d505      	bpl.n	801fc00 <__sflush_r+0x48>
 801fbf4:	6863      	ldr	r3, [r4, #4]
 801fbf6:	1ac0      	subs	r0, r0, r3
 801fbf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fbfa:	b10b      	cbz	r3, 801fc00 <__sflush_r+0x48>
 801fbfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fbfe:	1ac0      	subs	r0, r0, r3
 801fc00:	2300      	movs	r3, #0
 801fc02:	4602      	mov	r2, r0
 801fc04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fc06:	6a21      	ldr	r1, [r4, #32]
 801fc08:	4628      	mov	r0, r5
 801fc0a:	47b0      	blx	r6
 801fc0c:	1c43      	adds	r3, r0, #1
 801fc0e:	89a3      	ldrh	r3, [r4, #12]
 801fc10:	d106      	bne.n	801fc20 <__sflush_r+0x68>
 801fc12:	6829      	ldr	r1, [r5, #0]
 801fc14:	291d      	cmp	r1, #29
 801fc16:	d848      	bhi.n	801fcaa <__sflush_r+0xf2>
 801fc18:	4a29      	ldr	r2, [pc, #164]	; (801fcc0 <__sflush_r+0x108>)
 801fc1a:	40ca      	lsrs	r2, r1
 801fc1c:	07d6      	lsls	r6, r2, #31
 801fc1e:	d544      	bpl.n	801fcaa <__sflush_r+0xf2>
 801fc20:	2200      	movs	r2, #0
 801fc22:	6062      	str	r2, [r4, #4]
 801fc24:	04d9      	lsls	r1, r3, #19
 801fc26:	6922      	ldr	r2, [r4, #16]
 801fc28:	6022      	str	r2, [r4, #0]
 801fc2a:	d504      	bpl.n	801fc36 <__sflush_r+0x7e>
 801fc2c:	1c42      	adds	r2, r0, #1
 801fc2e:	d101      	bne.n	801fc34 <__sflush_r+0x7c>
 801fc30:	682b      	ldr	r3, [r5, #0]
 801fc32:	b903      	cbnz	r3, 801fc36 <__sflush_r+0x7e>
 801fc34:	6560      	str	r0, [r4, #84]	; 0x54
 801fc36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fc38:	602f      	str	r7, [r5, #0]
 801fc3a:	2900      	cmp	r1, #0
 801fc3c:	d0c9      	beq.n	801fbd2 <__sflush_r+0x1a>
 801fc3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fc42:	4299      	cmp	r1, r3
 801fc44:	d002      	beq.n	801fc4c <__sflush_r+0x94>
 801fc46:	4628      	mov	r0, r5
 801fc48:	f7ff fd6c 	bl	801f724 <_free_r>
 801fc4c:	2000      	movs	r0, #0
 801fc4e:	6360      	str	r0, [r4, #52]	; 0x34
 801fc50:	e7c0      	b.n	801fbd4 <__sflush_r+0x1c>
 801fc52:	2301      	movs	r3, #1
 801fc54:	4628      	mov	r0, r5
 801fc56:	47b0      	blx	r6
 801fc58:	1c41      	adds	r1, r0, #1
 801fc5a:	d1c8      	bne.n	801fbee <__sflush_r+0x36>
 801fc5c:	682b      	ldr	r3, [r5, #0]
 801fc5e:	2b00      	cmp	r3, #0
 801fc60:	d0c5      	beq.n	801fbee <__sflush_r+0x36>
 801fc62:	2b1d      	cmp	r3, #29
 801fc64:	d001      	beq.n	801fc6a <__sflush_r+0xb2>
 801fc66:	2b16      	cmp	r3, #22
 801fc68:	d101      	bne.n	801fc6e <__sflush_r+0xb6>
 801fc6a:	602f      	str	r7, [r5, #0]
 801fc6c:	e7b1      	b.n	801fbd2 <__sflush_r+0x1a>
 801fc6e:	89a3      	ldrh	r3, [r4, #12]
 801fc70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fc74:	81a3      	strh	r3, [r4, #12]
 801fc76:	e7ad      	b.n	801fbd4 <__sflush_r+0x1c>
 801fc78:	690f      	ldr	r7, [r1, #16]
 801fc7a:	2f00      	cmp	r7, #0
 801fc7c:	d0a9      	beq.n	801fbd2 <__sflush_r+0x1a>
 801fc7e:	0793      	lsls	r3, r2, #30
 801fc80:	680e      	ldr	r6, [r1, #0]
 801fc82:	bf08      	it	eq
 801fc84:	694b      	ldreq	r3, [r1, #20]
 801fc86:	600f      	str	r7, [r1, #0]
 801fc88:	bf18      	it	ne
 801fc8a:	2300      	movne	r3, #0
 801fc8c:	eba6 0807 	sub.w	r8, r6, r7
 801fc90:	608b      	str	r3, [r1, #8]
 801fc92:	f1b8 0f00 	cmp.w	r8, #0
 801fc96:	dd9c      	ble.n	801fbd2 <__sflush_r+0x1a>
 801fc98:	4643      	mov	r3, r8
 801fc9a:	463a      	mov	r2, r7
 801fc9c:	6a21      	ldr	r1, [r4, #32]
 801fc9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fca0:	4628      	mov	r0, r5
 801fca2:	47b0      	blx	r6
 801fca4:	2800      	cmp	r0, #0
 801fca6:	dc06      	bgt.n	801fcb6 <__sflush_r+0xfe>
 801fca8:	89a3      	ldrh	r3, [r4, #12]
 801fcaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fcae:	81a3      	strh	r3, [r4, #12]
 801fcb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fcb4:	e78e      	b.n	801fbd4 <__sflush_r+0x1c>
 801fcb6:	4407      	add	r7, r0
 801fcb8:	eba8 0800 	sub.w	r8, r8, r0
 801fcbc:	e7e9      	b.n	801fc92 <__sflush_r+0xda>
 801fcbe:	bf00      	nop
 801fcc0:	20400001 	.word	0x20400001

0801fcc4 <_fflush_r>:
 801fcc4:	b538      	push	{r3, r4, r5, lr}
 801fcc6:	690b      	ldr	r3, [r1, #16]
 801fcc8:	4605      	mov	r5, r0
 801fcca:	460c      	mov	r4, r1
 801fccc:	b1db      	cbz	r3, 801fd06 <_fflush_r+0x42>
 801fcce:	b118      	cbz	r0, 801fcd8 <_fflush_r+0x14>
 801fcd0:	6983      	ldr	r3, [r0, #24]
 801fcd2:	b90b      	cbnz	r3, 801fcd8 <_fflush_r+0x14>
 801fcd4:	f000 f860 	bl	801fd98 <__sinit>
 801fcd8:	4b0c      	ldr	r3, [pc, #48]	; (801fd0c <_fflush_r+0x48>)
 801fcda:	429c      	cmp	r4, r3
 801fcdc:	d109      	bne.n	801fcf2 <_fflush_r+0x2e>
 801fcde:	686c      	ldr	r4, [r5, #4]
 801fce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fce4:	b17b      	cbz	r3, 801fd06 <_fflush_r+0x42>
 801fce6:	4621      	mov	r1, r4
 801fce8:	4628      	mov	r0, r5
 801fcea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fcee:	f7ff bf63 	b.w	801fbb8 <__sflush_r>
 801fcf2:	4b07      	ldr	r3, [pc, #28]	; (801fd10 <_fflush_r+0x4c>)
 801fcf4:	429c      	cmp	r4, r3
 801fcf6:	d101      	bne.n	801fcfc <_fflush_r+0x38>
 801fcf8:	68ac      	ldr	r4, [r5, #8]
 801fcfa:	e7f1      	b.n	801fce0 <_fflush_r+0x1c>
 801fcfc:	4b05      	ldr	r3, [pc, #20]	; (801fd14 <_fflush_r+0x50>)
 801fcfe:	429c      	cmp	r4, r3
 801fd00:	bf08      	it	eq
 801fd02:	68ec      	ldreq	r4, [r5, #12]
 801fd04:	e7ec      	b.n	801fce0 <_fflush_r+0x1c>
 801fd06:	2000      	movs	r0, #0
 801fd08:	bd38      	pop	{r3, r4, r5, pc}
 801fd0a:	bf00      	nop
 801fd0c:	08026334 	.word	0x08026334
 801fd10:	08026354 	.word	0x08026354
 801fd14:	08026314 	.word	0x08026314

0801fd18 <std>:
 801fd18:	2300      	movs	r3, #0
 801fd1a:	b510      	push	{r4, lr}
 801fd1c:	4604      	mov	r4, r0
 801fd1e:	e9c0 3300 	strd	r3, r3, [r0]
 801fd22:	6083      	str	r3, [r0, #8]
 801fd24:	8181      	strh	r1, [r0, #12]
 801fd26:	6643      	str	r3, [r0, #100]	; 0x64
 801fd28:	81c2      	strh	r2, [r0, #14]
 801fd2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fd2e:	6183      	str	r3, [r0, #24]
 801fd30:	4619      	mov	r1, r3
 801fd32:	2208      	movs	r2, #8
 801fd34:	305c      	adds	r0, #92	; 0x5c
 801fd36:	f7ff fced 	bl	801f714 <memset>
 801fd3a:	4b05      	ldr	r3, [pc, #20]	; (801fd50 <std+0x38>)
 801fd3c:	6263      	str	r3, [r4, #36]	; 0x24
 801fd3e:	4b05      	ldr	r3, [pc, #20]	; (801fd54 <std+0x3c>)
 801fd40:	62a3      	str	r3, [r4, #40]	; 0x28
 801fd42:	4b05      	ldr	r3, [pc, #20]	; (801fd58 <std+0x40>)
 801fd44:	62e3      	str	r3, [r4, #44]	; 0x2c
 801fd46:	4b05      	ldr	r3, [pc, #20]	; (801fd5c <std+0x44>)
 801fd48:	6224      	str	r4, [r4, #32]
 801fd4a:	6323      	str	r3, [r4, #48]	; 0x30
 801fd4c:	bd10      	pop	{r4, pc}
 801fd4e:	bf00      	nop
 801fd50:	08020819 	.word	0x08020819
 801fd54:	0802083b 	.word	0x0802083b
 801fd58:	08020873 	.word	0x08020873
 801fd5c:	08020897 	.word	0x08020897

0801fd60 <_cleanup_r>:
 801fd60:	4901      	ldr	r1, [pc, #4]	; (801fd68 <_cleanup_r+0x8>)
 801fd62:	f000 b885 	b.w	801fe70 <_fwalk_reent>
 801fd66:	bf00      	nop
 801fd68:	0801fcc5 	.word	0x0801fcc5

0801fd6c <__sfmoreglue>:
 801fd6c:	b570      	push	{r4, r5, r6, lr}
 801fd6e:	1e4a      	subs	r2, r1, #1
 801fd70:	2568      	movs	r5, #104	; 0x68
 801fd72:	4355      	muls	r5, r2
 801fd74:	460e      	mov	r6, r1
 801fd76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801fd7a:	f7ff fd21 	bl	801f7c0 <_malloc_r>
 801fd7e:	4604      	mov	r4, r0
 801fd80:	b140      	cbz	r0, 801fd94 <__sfmoreglue+0x28>
 801fd82:	2100      	movs	r1, #0
 801fd84:	e9c0 1600 	strd	r1, r6, [r0]
 801fd88:	300c      	adds	r0, #12
 801fd8a:	60a0      	str	r0, [r4, #8]
 801fd8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801fd90:	f7ff fcc0 	bl	801f714 <memset>
 801fd94:	4620      	mov	r0, r4
 801fd96:	bd70      	pop	{r4, r5, r6, pc}

0801fd98 <__sinit>:
 801fd98:	6983      	ldr	r3, [r0, #24]
 801fd9a:	b510      	push	{r4, lr}
 801fd9c:	4604      	mov	r4, r0
 801fd9e:	bb33      	cbnz	r3, 801fdee <__sinit+0x56>
 801fda0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801fda4:	6503      	str	r3, [r0, #80]	; 0x50
 801fda6:	4b12      	ldr	r3, [pc, #72]	; (801fdf0 <__sinit+0x58>)
 801fda8:	4a12      	ldr	r2, [pc, #72]	; (801fdf4 <__sinit+0x5c>)
 801fdaa:	681b      	ldr	r3, [r3, #0]
 801fdac:	6282      	str	r2, [r0, #40]	; 0x28
 801fdae:	4298      	cmp	r0, r3
 801fdb0:	bf04      	itt	eq
 801fdb2:	2301      	moveq	r3, #1
 801fdb4:	6183      	streq	r3, [r0, #24]
 801fdb6:	f000 f81f 	bl	801fdf8 <__sfp>
 801fdba:	6060      	str	r0, [r4, #4]
 801fdbc:	4620      	mov	r0, r4
 801fdbe:	f000 f81b 	bl	801fdf8 <__sfp>
 801fdc2:	60a0      	str	r0, [r4, #8]
 801fdc4:	4620      	mov	r0, r4
 801fdc6:	f000 f817 	bl	801fdf8 <__sfp>
 801fdca:	2200      	movs	r2, #0
 801fdcc:	60e0      	str	r0, [r4, #12]
 801fdce:	2104      	movs	r1, #4
 801fdd0:	6860      	ldr	r0, [r4, #4]
 801fdd2:	f7ff ffa1 	bl	801fd18 <std>
 801fdd6:	2201      	movs	r2, #1
 801fdd8:	2109      	movs	r1, #9
 801fdda:	68a0      	ldr	r0, [r4, #8]
 801fddc:	f7ff ff9c 	bl	801fd18 <std>
 801fde0:	2202      	movs	r2, #2
 801fde2:	2112      	movs	r1, #18
 801fde4:	68e0      	ldr	r0, [r4, #12]
 801fde6:	f7ff ff97 	bl	801fd18 <std>
 801fdea:	2301      	movs	r3, #1
 801fdec:	61a3      	str	r3, [r4, #24]
 801fdee:	bd10      	pop	{r4, pc}
 801fdf0:	08026310 	.word	0x08026310
 801fdf4:	0801fd61 	.word	0x0801fd61

0801fdf8 <__sfp>:
 801fdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fdfa:	4b1b      	ldr	r3, [pc, #108]	; (801fe68 <__sfp+0x70>)
 801fdfc:	681e      	ldr	r6, [r3, #0]
 801fdfe:	69b3      	ldr	r3, [r6, #24]
 801fe00:	4607      	mov	r7, r0
 801fe02:	b913      	cbnz	r3, 801fe0a <__sfp+0x12>
 801fe04:	4630      	mov	r0, r6
 801fe06:	f7ff ffc7 	bl	801fd98 <__sinit>
 801fe0a:	3648      	adds	r6, #72	; 0x48
 801fe0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801fe10:	3b01      	subs	r3, #1
 801fe12:	d503      	bpl.n	801fe1c <__sfp+0x24>
 801fe14:	6833      	ldr	r3, [r6, #0]
 801fe16:	b133      	cbz	r3, 801fe26 <__sfp+0x2e>
 801fe18:	6836      	ldr	r6, [r6, #0]
 801fe1a:	e7f7      	b.n	801fe0c <__sfp+0x14>
 801fe1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801fe20:	b16d      	cbz	r5, 801fe3e <__sfp+0x46>
 801fe22:	3468      	adds	r4, #104	; 0x68
 801fe24:	e7f4      	b.n	801fe10 <__sfp+0x18>
 801fe26:	2104      	movs	r1, #4
 801fe28:	4638      	mov	r0, r7
 801fe2a:	f7ff ff9f 	bl	801fd6c <__sfmoreglue>
 801fe2e:	6030      	str	r0, [r6, #0]
 801fe30:	2800      	cmp	r0, #0
 801fe32:	d1f1      	bne.n	801fe18 <__sfp+0x20>
 801fe34:	230c      	movs	r3, #12
 801fe36:	603b      	str	r3, [r7, #0]
 801fe38:	4604      	mov	r4, r0
 801fe3a:	4620      	mov	r0, r4
 801fe3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fe3e:	4b0b      	ldr	r3, [pc, #44]	; (801fe6c <__sfp+0x74>)
 801fe40:	6665      	str	r5, [r4, #100]	; 0x64
 801fe42:	e9c4 5500 	strd	r5, r5, [r4]
 801fe46:	60a5      	str	r5, [r4, #8]
 801fe48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801fe4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801fe50:	2208      	movs	r2, #8
 801fe52:	4629      	mov	r1, r5
 801fe54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801fe58:	f7ff fc5c 	bl	801f714 <memset>
 801fe5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801fe60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801fe64:	e7e9      	b.n	801fe3a <__sfp+0x42>
 801fe66:	bf00      	nop
 801fe68:	08026310 	.word	0x08026310
 801fe6c:	ffff0001 	.word	0xffff0001

0801fe70 <_fwalk_reent>:
 801fe70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe74:	4680      	mov	r8, r0
 801fe76:	4689      	mov	r9, r1
 801fe78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801fe7c:	2600      	movs	r6, #0
 801fe7e:	b914      	cbnz	r4, 801fe86 <_fwalk_reent+0x16>
 801fe80:	4630      	mov	r0, r6
 801fe82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fe86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801fe8a:	3f01      	subs	r7, #1
 801fe8c:	d501      	bpl.n	801fe92 <_fwalk_reent+0x22>
 801fe8e:	6824      	ldr	r4, [r4, #0]
 801fe90:	e7f5      	b.n	801fe7e <_fwalk_reent+0xe>
 801fe92:	89ab      	ldrh	r3, [r5, #12]
 801fe94:	2b01      	cmp	r3, #1
 801fe96:	d907      	bls.n	801fea8 <_fwalk_reent+0x38>
 801fe98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fe9c:	3301      	adds	r3, #1
 801fe9e:	d003      	beq.n	801fea8 <_fwalk_reent+0x38>
 801fea0:	4629      	mov	r1, r5
 801fea2:	4640      	mov	r0, r8
 801fea4:	47c8      	blx	r9
 801fea6:	4306      	orrs	r6, r0
 801fea8:	3568      	adds	r5, #104	; 0x68
 801feaa:	e7ee      	b.n	801fe8a <_fwalk_reent+0x1a>

0801feac <__swhatbuf_r>:
 801feac:	b570      	push	{r4, r5, r6, lr}
 801feae:	460e      	mov	r6, r1
 801feb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801feb4:	2900      	cmp	r1, #0
 801feb6:	b096      	sub	sp, #88	; 0x58
 801feb8:	4614      	mov	r4, r2
 801feba:	461d      	mov	r5, r3
 801febc:	da07      	bge.n	801fece <__swhatbuf_r+0x22>
 801febe:	2300      	movs	r3, #0
 801fec0:	602b      	str	r3, [r5, #0]
 801fec2:	89b3      	ldrh	r3, [r6, #12]
 801fec4:	061a      	lsls	r2, r3, #24
 801fec6:	d410      	bmi.n	801feea <__swhatbuf_r+0x3e>
 801fec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fecc:	e00e      	b.n	801feec <__swhatbuf_r+0x40>
 801fece:	466a      	mov	r2, sp
 801fed0:	f000 fd08 	bl	80208e4 <_fstat_r>
 801fed4:	2800      	cmp	r0, #0
 801fed6:	dbf2      	blt.n	801febe <__swhatbuf_r+0x12>
 801fed8:	9a01      	ldr	r2, [sp, #4]
 801feda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801fede:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fee2:	425a      	negs	r2, r3
 801fee4:	415a      	adcs	r2, r3
 801fee6:	602a      	str	r2, [r5, #0]
 801fee8:	e7ee      	b.n	801fec8 <__swhatbuf_r+0x1c>
 801feea:	2340      	movs	r3, #64	; 0x40
 801feec:	2000      	movs	r0, #0
 801feee:	6023      	str	r3, [r4, #0]
 801fef0:	b016      	add	sp, #88	; 0x58
 801fef2:	bd70      	pop	{r4, r5, r6, pc}

0801fef4 <__smakebuf_r>:
 801fef4:	898b      	ldrh	r3, [r1, #12]
 801fef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fef8:	079d      	lsls	r5, r3, #30
 801fefa:	4606      	mov	r6, r0
 801fefc:	460c      	mov	r4, r1
 801fefe:	d507      	bpl.n	801ff10 <__smakebuf_r+0x1c>
 801ff00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ff04:	6023      	str	r3, [r4, #0]
 801ff06:	6123      	str	r3, [r4, #16]
 801ff08:	2301      	movs	r3, #1
 801ff0a:	6163      	str	r3, [r4, #20]
 801ff0c:	b002      	add	sp, #8
 801ff0e:	bd70      	pop	{r4, r5, r6, pc}
 801ff10:	ab01      	add	r3, sp, #4
 801ff12:	466a      	mov	r2, sp
 801ff14:	f7ff ffca 	bl	801feac <__swhatbuf_r>
 801ff18:	9900      	ldr	r1, [sp, #0]
 801ff1a:	4605      	mov	r5, r0
 801ff1c:	4630      	mov	r0, r6
 801ff1e:	f7ff fc4f 	bl	801f7c0 <_malloc_r>
 801ff22:	b948      	cbnz	r0, 801ff38 <__smakebuf_r+0x44>
 801ff24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ff28:	059a      	lsls	r2, r3, #22
 801ff2a:	d4ef      	bmi.n	801ff0c <__smakebuf_r+0x18>
 801ff2c:	f023 0303 	bic.w	r3, r3, #3
 801ff30:	f043 0302 	orr.w	r3, r3, #2
 801ff34:	81a3      	strh	r3, [r4, #12]
 801ff36:	e7e3      	b.n	801ff00 <__smakebuf_r+0xc>
 801ff38:	4b0d      	ldr	r3, [pc, #52]	; (801ff70 <__smakebuf_r+0x7c>)
 801ff3a:	62b3      	str	r3, [r6, #40]	; 0x28
 801ff3c:	89a3      	ldrh	r3, [r4, #12]
 801ff3e:	6020      	str	r0, [r4, #0]
 801ff40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ff44:	81a3      	strh	r3, [r4, #12]
 801ff46:	9b00      	ldr	r3, [sp, #0]
 801ff48:	6163      	str	r3, [r4, #20]
 801ff4a:	9b01      	ldr	r3, [sp, #4]
 801ff4c:	6120      	str	r0, [r4, #16]
 801ff4e:	b15b      	cbz	r3, 801ff68 <__smakebuf_r+0x74>
 801ff50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ff54:	4630      	mov	r0, r6
 801ff56:	f000 fcd7 	bl	8020908 <_isatty_r>
 801ff5a:	b128      	cbz	r0, 801ff68 <__smakebuf_r+0x74>
 801ff5c:	89a3      	ldrh	r3, [r4, #12]
 801ff5e:	f023 0303 	bic.w	r3, r3, #3
 801ff62:	f043 0301 	orr.w	r3, r3, #1
 801ff66:	81a3      	strh	r3, [r4, #12]
 801ff68:	89a3      	ldrh	r3, [r4, #12]
 801ff6a:	431d      	orrs	r5, r3
 801ff6c:	81a5      	strh	r5, [r4, #12]
 801ff6e:	e7cd      	b.n	801ff0c <__smakebuf_r+0x18>
 801ff70:	0801fd61 	.word	0x0801fd61

0801ff74 <__malloc_lock>:
 801ff74:	4770      	bx	lr

0801ff76 <__malloc_unlock>:
 801ff76:	4770      	bx	lr

0801ff78 <__ssputs_r>:
 801ff78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ff7c:	688e      	ldr	r6, [r1, #8]
 801ff7e:	429e      	cmp	r6, r3
 801ff80:	4682      	mov	sl, r0
 801ff82:	460c      	mov	r4, r1
 801ff84:	4690      	mov	r8, r2
 801ff86:	4699      	mov	r9, r3
 801ff88:	d837      	bhi.n	801fffa <__ssputs_r+0x82>
 801ff8a:	898a      	ldrh	r2, [r1, #12]
 801ff8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ff90:	d031      	beq.n	801fff6 <__ssputs_r+0x7e>
 801ff92:	6825      	ldr	r5, [r4, #0]
 801ff94:	6909      	ldr	r1, [r1, #16]
 801ff96:	1a6f      	subs	r7, r5, r1
 801ff98:	6965      	ldr	r5, [r4, #20]
 801ff9a:	2302      	movs	r3, #2
 801ff9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ffa0:	fb95 f5f3 	sdiv	r5, r5, r3
 801ffa4:	f109 0301 	add.w	r3, r9, #1
 801ffa8:	443b      	add	r3, r7
 801ffaa:	429d      	cmp	r5, r3
 801ffac:	bf38      	it	cc
 801ffae:	461d      	movcc	r5, r3
 801ffb0:	0553      	lsls	r3, r2, #21
 801ffb2:	d530      	bpl.n	8020016 <__ssputs_r+0x9e>
 801ffb4:	4629      	mov	r1, r5
 801ffb6:	f7ff fc03 	bl	801f7c0 <_malloc_r>
 801ffba:	4606      	mov	r6, r0
 801ffbc:	b950      	cbnz	r0, 801ffd4 <__ssputs_r+0x5c>
 801ffbe:	230c      	movs	r3, #12
 801ffc0:	f8ca 3000 	str.w	r3, [sl]
 801ffc4:	89a3      	ldrh	r3, [r4, #12]
 801ffc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ffca:	81a3      	strh	r3, [r4, #12]
 801ffcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ffd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ffd4:	463a      	mov	r2, r7
 801ffd6:	6921      	ldr	r1, [r4, #16]
 801ffd8:	f7ff fb78 	bl	801f6cc <memcpy>
 801ffdc:	89a3      	ldrh	r3, [r4, #12]
 801ffde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ffe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ffe6:	81a3      	strh	r3, [r4, #12]
 801ffe8:	6126      	str	r6, [r4, #16]
 801ffea:	6165      	str	r5, [r4, #20]
 801ffec:	443e      	add	r6, r7
 801ffee:	1bed      	subs	r5, r5, r7
 801fff0:	6026      	str	r6, [r4, #0]
 801fff2:	60a5      	str	r5, [r4, #8]
 801fff4:	464e      	mov	r6, r9
 801fff6:	454e      	cmp	r6, r9
 801fff8:	d900      	bls.n	801fffc <__ssputs_r+0x84>
 801fffa:	464e      	mov	r6, r9
 801fffc:	4632      	mov	r2, r6
 801fffe:	4641      	mov	r1, r8
 8020000:	6820      	ldr	r0, [r4, #0]
 8020002:	f7ff fb6e 	bl	801f6e2 <memmove>
 8020006:	68a3      	ldr	r3, [r4, #8]
 8020008:	1b9b      	subs	r3, r3, r6
 802000a:	60a3      	str	r3, [r4, #8]
 802000c:	6823      	ldr	r3, [r4, #0]
 802000e:	441e      	add	r6, r3
 8020010:	6026      	str	r6, [r4, #0]
 8020012:	2000      	movs	r0, #0
 8020014:	e7dc      	b.n	801ffd0 <__ssputs_r+0x58>
 8020016:	462a      	mov	r2, r5
 8020018:	f000 fc98 	bl	802094c <_realloc_r>
 802001c:	4606      	mov	r6, r0
 802001e:	2800      	cmp	r0, #0
 8020020:	d1e2      	bne.n	801ffe8 <__ssputs_r+0x70>
 8020022:	6921      	ldr	r1, [r4, #16]
 8020024:	4650      	mov	r0, sl
 8020026:	f7ff fb7d 	bl	801f724 <_free_r>
 802002a:	e7c8      	b.n	801ffbe <__ssputs_r+0x46>

0802002c <_svfiprintf_r>:
 802002c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020030:	461d      	mov	r5, r3
 8020032:	898b      	ldrh	r3, [r1, #12]
 8020034:	061f      	lsls	r7, r3, #24
 8020036:	b09d      	sub	sp, #116	; 0x74
 8020038:	4680      	mov	r8, r0
 802003a:	460c      	mov	r4, r1
 802003c:	4616      	mov	r6, r2
 802003e:	d50f      	bpl.n	8020060 <_svfiprintf_r+0x34>
 8020040:	690b      	ldr	r3, [r1, #16]
 8020042:	b96b      	cbnz	r3, 8020060 <_svfiprintf_r+0x34>
 8020044:	2140      	movs	r1, #64	; 0x40
 8020046:	f7ff fbbb 	bl	801f7c0 <_malloc_r>
 802004a:	6020      	str	r0, [r4, #0]
 802004c:	6120      	str	r0, [r4, #16]
 802004e:	b928      	cbnz	r0, 802005c <_svfiprintf_r+0x30>
 8020050:	230c      	movs	r3, #12
 8020052:	f8c8 3000 	str.w	r3, [r8]
 8020056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802005a:	e0c8      	b.n	80201ee <_svfiprintf_r+0x1c2>
 802005c:	2340      	movs	r3, #64	; 0x40
 802005e:	6163      	str	r3, [r4, #20]
 8020060:	2300      	movs	r3, #0
 8020062:	9309      	str	r3, [sp, #36]	; 0x24
 8020064:	2320      	movs	r3, #32
 8020066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802006a:	2330      	movs	r3, #48	; 0x30
 802006c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020070:	9503      	str	r5, [sp, #12]
 8020072:	f04f 0b01 	mov.w	fp, #1
 8020076:	4637      	mov	r7, r6
 8020078:	463d      	mov	r5, r7
 802007a:	f815 3b01 	ldrb.w	r3, [r5], #1
 802007e:	b10b      	cbz	r3, 8020084 <_svfiprintf_r+0x58>
 8020080:	2b25      	cmp	r3, #37	; 0x25
 8020082:	d13e      	bne.n	8020102 <_svfiprintf_r+0xd6>
 8020084:	ebb7 0a06 	subs.w	sl, r7, r6
 8020088:	d00b      	beq.n	80200a2 <_svfiprintf_r+0x76>
 802008a:	4653      	mov	r3, sl
 802008c:	4632      	mov	r2, r6
 802008e:	4621      	mov	r1, r4
 8020090:	4640      	mov	r0, r8
 8020092:	f7ff ff71 	bl	801ff78 <__ssputs_r>
 8020096:	3001      	adds	r0, #1
 8020098:	f000 80a4 	beq.w	80201e4 <_svfiprintf_r+0x1b8>
 802009c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802009e:	4453      	add	r3, sl
 80200a0:	9309      	str	r3, [sp, #36]	; 0x24
 80200a2:	783b      	ldrb	r3, [r7, #0]
 80200a4:	2b00      	cmp	r3, #0
 80200a6:	f000 809d 	beq.w	80201e4 <_svfiprintf_r+0x1b8>
 80200aa:	2300      	movs	r3, #0
 80200ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80200b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80200b4:	9304      	str	r3, [sp, #16]
 80200b6:	9307      	str	r3, [sp, #28]
 80200b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80200bc:	931a      	str	r3, [sp, #104]	; 0x68
 80200be:	462f      	mov	r7, r5
 80200c0:	2205      	movs	r2, #5
 80200c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80200c6:	4850      	ldr	r0, [pc, #320]	; (8020208 <_svfiprintf_r+0x1dc>)
 80200c8:	f7e0 f8aa 	bl	8000220 <memchr>
 80200cc:	9b04      	ldr	r3, [sp, #16]
 80200ce:	b9d0      	cbnz	r0, 8020106 <_svfiprintf_r+0xda>
 80200d0:	06d9      	lsls	r1, r3, #27
 80200d2:	bf44      	itt	mi
 80200d4:	2220      	movmi	r2, #32
 80200d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80200da:	071a      	lsls	r2, r3, #28
 80200dc:	bf44      	itt	mi
 80200de:	222b      	movmi	r2, #43	; 0x2b
 80200e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80200e4:	782a      	ldrb	r2, [r5, #0]
 80200e6:	2a2a      	cmp	r2, #42	; 0x2a
 80200e8:	d015      	beq.n	8020116 <_svfiprintf_r+0xea>
 80200ea:	9a07      	ldr	r2, [sp, #28]
 80200ec:	462f      	mov	r7, r5
 80200ee:	2000      	movs	r0, #0
 80200f0:	250a      	movs	r5, #10
 80200f2:	4639      	mov	r1, r7
 80200f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80200f8:	3b30      	subs	r3, #48	; 0x30
 80200fa:	2b09      	cmp	r3, #9
 80200fc:	d94d      	bls.n	802019a <_svfiprintf_r+0x16e>
 80200fe:	b1b8      	cbz	r0, 8020130 <_svfiprintf_r+0x104>
 8020100:	e00f      	b.n	8020122 <_svfiprintf_r+0xf6>
 8020102:	462f      	mov	r7, r5
 8020104:	e7b8      	b.n	8020078 <_svfiprintf_r+0x4c>
 8020106:	4a40      	ldr	r2, [pc, #256]	; (8020208 <_svfiprintf_r+0x1dc>)
 8020108:	1a80      	subs	r0, r0, r2
 802010a:	fa0b f000 	lsl.w	r0, fp, r0
 802010e:	4318      	orrs	r0, r3
 8020110:	9004      	str	r0, [sp, #16]
 8020112:	463d      	mov	r5, r7
 8020114:	e7d3      	b.n	80200be <_svfiprintf_r+0x92>
 8020116:	9a03      	ldr	r2, [sp, #12]
 8020118:	1d11      	adds	r1, r2, #4
 802011a:	6812      	ldr	r2, [r2, #0]
 802011c:	9103      	str	r1, [sp, #12]
 802011e:	2a00      	cmp	r2, #0
 8020120:	db01      	blt.n	8020126 <_svfiprintf_r+0xfa>
 8020122:	9207      	str	r2, [sp, #28]
 8020124:	e004      	b.n	8020130 <_svfiprintf_r+0x104>
 8020126:	4252      	negs	r2, r2
 8020128:	f043 0302 	orr.w	r3, r3, #2
 802012c:	9207      	str	r2, [sp, #28]
 802012e:	9304      	str	r3, [sp, #16]
 8020130:	783b      	ldrb	r3, [r7, #0]
 8020132:	2b2e      	cmp	r3, #46	; 0x2e
 8020134:	d10c      	bne.n	8020150 <_svfiprintf_r+0x124>
 8020136:	787b      	ldrb	r3, [r7, #1]
 8020138:	2b2a      	cmp	r3, #42	; 0x2a
 802013a:	d133      	bne.n	80201a4 <_svfiprintf_r+0x178>
 802013c:	9b03      	ldr	r3, [sp, #12]
 802013e:	1d1a      	adds	r2, r3, #4
 8020140:	681b      	ldr	r3, [r3, #0]
 8020142:	9203      	str	r2, [sp, #12]
 8020144:	2b00      	cmp	r3, #0
 8020146:	bfb8      	it	lt
 8020148:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802014c:	3702      	adds	r7, #2
 802014e:	9305      	str	r3, [sp, #20]
 8020150:	4d2e      	ldr	r5, [pc, #184]	; (802020c <_svfiprintf_r+0x1e0>)
 8020152:	7839      	ldrb	r1, [r7, #0]
 8020154:	2203      	movs	r2, #3
 8020156:	4628      	mov	r0, r5
 8020158:	f7e0 f862 	bl	8000220 <memchr>
 802015c:	b138      	cbz	r0, 802016e <_svfiprintf_r+0x142>
 802015e:	2340      	movs	r3, #64	; 0x40
 8020160:	1b40      	subs	r0, r0, r5
 8020162:	fa03 f000 	lsl.w	r0, r3, r0
 8020166:	9b04      	ldr	r3, [sp, #16]
 8020168:	4303      	orrs	r3, r0
 802016a:	3701      	adds	r7, #1
 802016c:	9304      	str	r3, [sp, #16]
 802016e:	7839      	ldrb	r1, [r7, #0]
 8020170:	4827      	ldr	r0, [pc, #156]	; (8020210 <_svfiprintf_r+0x1e4>)
 8020172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020176:	2206      	movs	r2, #6
 8020178:	1c7e      	adds	r6, r7, #1
 802017a:	f7e0 f851 	bl	8000220 <memchr>
 802017e:	2800      	cmp	r0, #0
 8020180:	d038      	beq.n	80201f4 <_svfiprintf_r+0x1c8>
 8020182:	4b24      	ldr	r3, [pc, #144]	; (8020214 <_svfiprintf_r+0x1e8>)
 8020184:	bb13      	cbnz	r3, 80201cc <_svfiprintf_r+0x1a0>
 8020186:	9b03      	ldr	r3, [sp, #12]
 8020188:	3307      	adds	r3, #7
 802018a:	f023 0307 	bic.w	r3, r3, #7
 802018e:	3308      	adds	r3, #8
 8020190:	9303      	str	r3, [sp, #12]
 8020192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020194:	444b      	add	r3, r9
 8020196:	9309      	str	r3, [sp, #36]	; 0x24
 8020198:	e76d      	b.n	8020076 <_svfiprintf_r+0x4a>
 802019a:	fb05 3202 	mla	r2, r5, r2, r3
 802019e:	2001      	movs	r0, #1
 80201a0:	460f      	mov	r7, r1
 80201a2:	e7a6      	b.n	80200f2 <_svfiprintf_r+0xc6>
 80201a4:	2300      	movs	r3, #0
 80201a6:	3701      	adds	r7, #1
 80201a8:	9305      	str	r3, [sp, #20]
 80201aa:	4619      	mov	r1, r3
 80201ac:	250a      	movs	r5, #10
 80201ae:	4638      	mov	r0, r7
 80201b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80201b4:	3a30      	subs	r2, #48	; 0x30
 80201b6:	2a09      	cmp	r2, #9
 80201b8:	d903      	bls.n	80201c2 <_svfiprintf_r+0x196>
 80201ba:	2b00      	cmp	r3, #0
 80201bc:	d0c8      	beq.n	8020150 <_svfiprintf_r+0x124>
 80201be:	9105      	str	r1, [sp, #20]
 80201c0:	e7c6      	b.n	8020150 <_svfiprintf_r+0x124>
 80201c2:	fb05 2101 	mla	r1, r5, r1, r2
 80201c6:	2301      	movs	r3, #1
 80201c8:	4607      	mov	r7, r0
 80201ca:	e7f0      	b.n	80201ae <_svfiprintf_r+0x182>
 80201cc:	ab03      	add	r3, sp, #12
 80201ce:	9300      	str	r3, [sp, #0]
 80201d0:	4622      	mov	r2, r4
 80201d2:	4b11      	ldr	r3, [pc, #68]	; (8020218 <_svfiprintf_r+0x1ec>)
 80201d4:	a904      	add	r1, sp, #16
 80201d6:	4640      	mov	r0, r8
 80201d8:	f3af 8000 	nop.w
 80201dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80201e0:	4681      	mov	r9, r0
 80201e2:	d1d6      	bne.n	8020192 <_svfiprintf_r+0x166>
 80201e4:	89a3      	ldrh	r3, [r4, #12]
 80201e6:	065b      	lsls	r3, r3, #25
 80201e8:	f53f af35 	bmi.w	8020056 <_svfiprintf_r+0x2a>
 80201ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80201ee:	b01d      	add	sp, #116	; 0x74
 80201f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201f4:	ab03      	add	r3, sp, #12
 80201f6:	9300      	str	r3, [sp, #0]
 80201f8:	4622      	mov	r2, r4
 80201fa:	4b07      	ldr	r3, [pc, #28]	; (8020218 <_svfiprintf_r+0x1ec>)
 80201fc:	a904      	add	r1, sp, #16
 80201fe:	4640      	mov	r0, r8
 8020200:	f000 f9c2 	bl	8020588 <_printf_i>
 8020204:	e7ea      	b.n	80201dc <_svfiprintf_r+0x1b0>
 8020206:	bf00      	nop
 8020208:	08026374 	.word	0x08026374
 802020c:	0802637a 	.word	0x0802637a
 8020210:	0802637e 	.word	0x0802637e
 8020214:	00000000 	.word	0x00000000
 8020218:	0801ff79 	.word	0x0801ff79

0802021c <__sfputc_r>:
 802021c:	6893      	ldr	r3, [r2, #8]
 802021e:	3b01      	subs	r3, #1
 8020220:	2b00      	cmp	r3, #0
 8020222:	b410      	push	{r4}
 8020224:	6093      	str	r3, [r2, #8]
 8020226:	da08      	bge.n	802023a <__sfputc_r+0x1e>
 8020228:	6994      	ldr	r4, [r2, #24]
 802022a:	42a3      	cmp	r3, r4
 802022c:	db01      	blt.n	8020232 <__sfputc_r+0x16>
 802022e:	290a      	cmp	r1, #10
 8020230:	d103      	bne.n	802023a <__sfputc_r+0x1e>
 8020232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020236:	f7ff bbff 	b.w	801fa38 <__swbuf_r>
 802023a:	6813      	ldr	r3, [r2, #0]
 802023c:	1c58      	adds	r0, r3, #1
 802023e:	6010      	str	r0, [r2, #0]
 8020240:	7019      	strb	r1, [r3, #0]
 8020242:	4608      	mov	r0, r1
 8020244:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020248:	4770      	bx	lr

0802024a <__sfputs_r>:
 802024a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802024c:	4606      	mov	r6, r0
 802024e:	460f      	mov	r7, r1
 8020250:	4614      	mov	r4, r2
 8020252:	18d5      	adds	r5, r2, r3
 8020254:	42ac      	cmp	r4, r5
 8020256:	d101      	bne.n	802025c <__sfputs_r+0x12>
 8020258:	2000      	movs	r0, #0
 802025a:	e007      	b.n	802026c <__sfputs_r+0x22>
 802025c:	463a      	mov	r2, r7
 802025e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020262:	4630      	mov	r0, r6
 8020264:	f7ff ffda 	bl	802021c <__sfputc_r>
 8020268:	1c43      	adds	r3, r0, #1
 802026a:	d1f3      	bne.n	8020254 <__sfputs_r+0xa>
 802026c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020270 <_vfiprintf_r>:
 8020270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020274:	460c      	mov	r4, r1
 8020276:	b09d      	sub	sp, #116	; 0x74
 8020278:	4617      	mov	r7, r2
 802027a:	461d      	mov	r5, r3
 802027c:	4606      	mov	r6, r0
 802027e:	b118      	cbz	r0, 8020288 <_vfiprintf_r+0x18>
 8020280:	6983      	ldr	r3, [r0, #24]
 8020282:	b90b      	cbnz	r3, 8020288 <_vfiprintf_r+0x18>
 8020284:	f7ff fd88 	bl	801fd98 <__sinit>
 8020288:	4b7c      	ldr	r3, [pc, #496]	; (802047c <_vfiprintf_r+0x20c>)
 802028a:	429c      	cmp	r4, r3
 802028c:	d158      	bne.n	8020340 <_vfiprintf_r+0xd0>
 802028e:	6874      	ldr	r4, [r6, #4]
 8020290:	89a3      	ldrh	r3, [r4, #12]
 8020292:	0718      	lsls	r0, r3, #28
 8020294:	d55e      	bpl.n	8020354 <_vfiprintf_r+0xe4>
 8020296:	6923      	ldr	r3, [r4, #16]
 8020298:	2b00      	cmp	r3, #0
 802029a:	d05b      	beq.n	8020354 <_vfiprintf_r+0xe4>
 802029c:	2300      	movs	r3, #0
 802029e:	9309      	str	r3, [sp, #36]	; 0x24
 80202a0:	2320      	movs	r3, #32
 80202a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80202a6:	2330      	movs	r3, #48	; 0x30
 80202a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80202ac:	9503      	str	r5, [sp, #12]
 80202ae:	f04f 0b01 	mov.w	fp, #1
 80202b2:	46b8      	mov	r8, r7
 80202b4:	4645      	mov	r5, r8
 80202b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80202ba:	b10b      	cbz	r3, 80202c0 <_vfiprintf_r+0x50>
 80202bc:	2b25      	cmp	r3, #37	; 0x25
 80202be:	d154      	bne.n	802036a <_vfiprintf_r+0xfa>
 80202c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80202c4:	d00b      	beq.n	80202de <_vfiprintf_r+0x6e>
 80202c6:	4653      	mov	r3, sl
 80202c8:	463a      	mov	r2, r7
 80202ca:	4621      	mov	r1, r4
 80202cc:	4630      	mov	r0, r6
 80202ce:	f7ff ffbc 	bl	802024a <__sfputs_r>
 80202d2:	3001      	adds	r0, #1
 80202d4:	f000 80c2 	beq.w	802045c <_vfiprintf_r+0x1ec>
 80202d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202da:	4453      	add	r3, sl
 80202dc:	9309      	str	r3, [sp, #36]	; 0x24
 80202de:	f898 3000 	ldrb.w	r3, [r8]
 80202e2:	2b00      	cmp	r3, #0
 80202e4:	f000 80ba 	beq.w	802045c <_vfiprintf_r+0x1ec>
 80202e8:	2300      	movs	r3, #0
 80202ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80202ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80202f2:	9304      	str	r3, [sp, #16]
 80202f4:	9307      	str	r3, [sp, #28]
 80202f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80202fa:	931a      	str	r3, [sp, #104]	; 0x68
 80202fc:	46a8      	mov	r8, r5
 80202fe:	2205      	movs	r2, #5
 8020300:	f818 1b01 	ldrb.w	r1, [r8], #1
 8020304:	485e      	ldr	r0, [pc, #376]	; (8020480 <_vfiprintf_r+0x210>)
 8020306:	f7df ff8b 	bl	8000220 <memchr>
 802030a:	9b04      	ldr	r3, [sp, #16]
 802030c:	bb78      	cbnz	r0, 802036e <_vfiprintf_r+0xfe>
 802030e:	06d9      	lsls	r1, r3, #27
 8020310:	bf44      	itt	mi
 8020312:	2220      	movmi	r2, #32
 8020314:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8020318:	071a      	lsls	r2, r3, #28
 802031a:	bf44      	itt	mi
 802031c:	222b      	movmi	r2, #43	; 0x2b
 802031e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8020322:	782a      	ldrb	r2, [r5, #0]
 8020324:	2a2a      	cmp	r2, #42	; 0x2a
 8020326:	d02a      	beq.n	802037e <_vfiprintf_r+0x10e>
 8020328:	9a07      	ldr	r2, [sp, #28]
 802032a:	46a8      	mov	r8, r5
 802032c:	2000      	movs	r0, #0
 802032e:	250a      	movs	r5, #10
 8020330:	4641      	mov	r1, r8
 8020332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020336:	3b30      	subs	r3, #48	; 0x30
 8020338:	2b09      	cmp	r3, #9
 802033a:	d969      	bls.n	8020410 <_vfiprintf_r+0x1a0>
 802033c:	b360      	cbz	r0, 8020398 <_vfiprintf_r+0x128>
 802033e:	e024      	b.n	802038a <_vfiprintf_r+0x11a>
 8020340:	4b50      	ldr	r3, [pc, #320]	; (8020484 <_vfiprintf_r+0x214>)
 8020342:	429c      	cmp	r4, r3
 8020344:	d101      	bne.n	802034a <_vfiprintf_r+0xda>
 8020346:	68b4      	ldr	r4, [r6, #8]
 8020348:	e7a2      	b.n	8020290 <_vfiprintf_r+0x20>
 802034a:	4b4f      	ldr	r3, [pc, #316]	; (8020488 <_vfiprintf_r+0x218>)
 802034c:	429c      	cmp	r4, r3
 802034e:	bf08      	it	eq
 8020350:	68f4      	ldreq	r4, [r6, #12]
 8020352:	e79d      	b.n	8020290 <_vfiprintf_r+0x20>
 8020354:	4621      	mov	r1, r4
 8020356:	4630      	mov	r0, r6
 8020358:	f7ff fbc0 	bl	801fadc <__swsetup_r>
 802035c:	2800      	cmp	r0, #0
 802035e:	d09d      	beq.n	802029c <_vfiprintf_r+0x2c>
 8020360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020364:	b01d      	add	sp, #116	; 0x74
 8020366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802036a:	46a8      	mov	r8, r5
 802036c:	e7a2      	b.n	80202b4 <_vfiprintf_r+0x44>
 802036e:	4a44      	ldr	r2, [pc, #272]	; (8020480 <_vfiprintf_r+0x210>)
 8020370:	1a80      	subs	r0, r0, r2
 8020372:	fa0b f000 	lsl.w	r0, fp, r0
 8020376:	4318      	orrs	r0, r3
 8020378:	9004      	str	r0, [sp, #16]
 802037a:	4645      	mov	r5, r8
 802037c:	e7be      	b.n	80202fc <_vfiprintf_r+0x8c>
 802037e:	9a03      	ldr	r2, [sp, #12]
 8020380:	1d11      	adds	r1, r2, #4
 8020382:	6812      	ldr	r2, [r2, #0]
 8020384:	9103      	str	r1, [sp, #12]
 8020386:	2a00      	cmp	r2, #0
 8020388:	db01      	blt.n	802038e <_vfiprintf_r+0x11e>
 802038a:	9207      	str	r2, [sp, #28]
 802038c:	e004      	b.n	8020398 <_vfiprintf_r+0x128>
 802038e:	4252      	negs	r2, r2
 8020390:	f043 0302 	orr.w	r3, r3, #2
 8020394:	9207      	str	r2, [sp, #28]
 8020396:	9304      	str	r3, [sp, #16]
 8020398:	f898 3000 	ldrb.w	r3, [r8]
 802039c:	2b2e      	cmp	r3, #46	; 0x2e
 802039e:	d10e      	bne.n	80203be <_vfiprintf_r+0x14e>
 80203a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80203a4:	2b2a      	cmp	r3, #42	; 0x2a
 80203a6:	d138      	bne.n	802041a <_vfiprintf_r+0x1aa>
 80203a8:	9b03      	ldr	r3, [sp, #12]
 80203aa:	1d1a      	adds	r2, r3, #4
 80203ac:	681b      	ldr	r3, [r3, #0]
 80203ae:	9203      	str	r2, [sp, #12]
 80203b0:	2b00      	cmp	r3, #0
 80203b2:	bfb8      	it	lt
 80203b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80203b8:	f108 0802 	add.w	r8, r8, #2
 80203bc:	9305      	str	r3, [sp, #20]
 80203be:	4d33      	ldr	r5, [pc, #204]	; (802048c <_vfiprintf_r+0x21c>)
 80203c0:	f898 1000 	ldrb.w	r1, [r8]
 80203c4:	2203      	movs	r2, #3
 80203c6:	4628      	mov	r0, r5
 80203c8:	f7df ff2a 	bl	8000220 <memchr>
 80203cc:	b140      	cbz	r0, 80203e0 <_vfiprintf_r+0x170>
 80203ce:	2340      	movs	r3, #64	; 0x40
 80203d0:	1b40      	subs	r0, r0, r5
 80203d2:	fa03 f000 	lsl.w	r0, r3, r0
 80203d6:	9b04      	ldr	r3, [sp, #16]
 80203d8:	4303      	orrs	r3, r0
 80203da:	f108 0801 	add.w	r8, r8, #1
 80203de:	9304      	str	r3, [sp, #16]
 80203e0:	f898 1000 	ldrb.w	r1, [r8]
 80203e4:	482a      	ldr	r0, [pc, #168]	; (8020490 <_vfiprintf_r+0x220>)
 80203e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80203ea:	2206      	movs	r2, #6
 80203ec:	f108 0701 	add.w	r7, r8, #1
 80203f0:	f7df ff16 	bl	8000220 <memchr>
 80203f4:	2800      	cmp	r0, #0
 80203f6:	d037      	beq.n	8020468 <_vfiprintf_r+0x1f8>
 80203f8:	4b26      	ldr	r3, [pc, #152]	; (8020494 <_vfiprintf_r+0x224>)
 80203fa:	bb1b      	cbnz	r3, 8020444 <_vfiprintf_r+0x1d4>
 80203fc:	9b03      	ldr	r3, [sp, #12]
 80203fe:	3307      	adds	r3, #7
 8020400:	f023 0307 	bic.w	r3, r3, #7
 8020404:	3308      	adds	r3, #8
 8020406:	9303      	str	r3, [sp, #12]
 8020408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802040a:	444b      	add	r3, r9
 802040c:	9309      	str	r3, [sp, #36]	; 0x24
 802040e:	e750      	b.n	80202b2 <_vfiprintf_r+0x42>
 8020410:	fb05 3202 	mla	r2, r5, r2, r3
 8020414:	2001      	movs	r0, #1
 8020416:	4688      	mov	r8, r1
 8020418:	e78a      	b.n	8020330 <_vfiprintf_r+0xc0>
 802041a:	2300      	movs	r3, #0
 802041c:	f108 0801 	add.w	r8, r8, #1
 8020420:	9305      	str	r3, [sp, #20]
 8020422:	4619      	mov	r1, r3
 8020424:	250a      	movs	r5, #10
 8020426:	4640      	mov	r0, r8
 8020428:	f810 2b01 	ldrb.w	r2, [r0], #1
 802042c:	3a30      	subs	r2, #48	; 0x30
 802042e:	2a09      	cmp	r2, #9
 8020430:	d903      	bls.n	802043a <_vfiprintf_r+0x1ca>
 8020432:	2b00      	cmp	r3, #0
 8020434:	d0c3      	beq.n	80203be <_vfiprintf_r+0x14e>
 8020436:	9105      	str	r1, [sp, #20]
 8020438:	e7c1      	b.n	80203be <_vfiprintf_r+0x14e>
 802043a:	fb05 2101 	mla	r1, r5, r1, r2
 802043e:	2301      	movs	r3, #1
 8020440:	4680      	mov	r8, r0
 8020442:	e7f0      	b.n	8020426 <_vfiprintf_r+0x1b6>
 8020444:	ab03      	add	r3, sp, #12
 8020446:	9300      	str	r3, [sp, #0]
 8020448:	4622      	mov	r2, r4
 802044a:	4b13      	ldr	r3, [pc, #76]	; (8020498 <_vfiprintf_r+0x228>)
 802044c:	a904      	add	r1, sp, #16
 802044e:	4630      	mov	r0, r6
 8020450:	f3af 8000 	nop.w
 8020454:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8020458:	4681      	mov	r9, r0
 802045a:	d1d5      	bne.n	8020408 <_vfiprintf_r+0x198>
 802045c:	89a3      	ldrh	r3, [r4, #12]
 802045e:	065b      	lsls	r3, r3, #25
 8020460:	f53f af7e 	bmi.w	8020360 <_vfiprintf_r+0xf0>
 8020464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020466:	e77d      	b.n	8020364 <_vfiprintf_r+0xf4>
 8020468:	ab03      	add	r3, sp, #12
 802046a:	9300      	str	r3, [sp, #0]
 802046c:	4622      	mov	r2, r4
 802046e:	4b0a      	ldr	r3, [pc, #40]	; (8020498 <_vfiprintf_r+0x228>)
 8020470:	a904      	add	r1, sp, #16
 8020472:	4630      	mov	r0, r6
 8020474:	f000 f888 	bl	8020588 <_printf_i>
 8020478:	e7ec      	b.n	8020454 <_vfiprintf_r+0x1e4>
 802047a:	bf00      	nop
 802047c:	08026334 	.word	0x08026334
 8020480:	08026374 	.word	0x08026374
 8020484:	08026354 	.word	0x08026354
 8020488:	08026314 	.word	0x08026314
 802048c:	0802637a 	.word	0x0802637a
 8020490:	0802637e 	.word	0x0802637e
 8020494:	00000000 	.word	0x00000000
 8020498:	0802024b 	.word	0x0802024b

0802049c <_printf_common>:
 802049c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80204a0:	4691      	mov	r9, r2
 80204a2:	461f      	mov	r7, r3
 80204a4:	688a      	ldr	r2, [r1, #8]
 80204a6:	690b      	ldr	r3, [r1, #16]
 80204a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80204ac:	4293      	cmp	r3, r2
 80204ae:	bfb8      	it	lt
 80204b0:	4613      	movlt	r3, r2
 80204b2:	f8c9 3000 	str.w	r3, [r9]
 80204b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80204ba:	4606      	mov	r6, r0
 80204bc:	460c      	mov	r4, r1
 80204be:	b112      	cbz	r2, 80204c6 <_printf_common+0x2a>
 80204c0:	3301      	adds	r3, #1
 80204c2:	f8c9 3000 	str.w	r3, [r9]
 80204c6:	6823      	ldr	r3, [r4, #0]
 80204c8:	0699      	lsls	r1, r3, #26
 80204ca:	bf42      	ittt	mi
 80204cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80204d0:	3302      	addmi	r3, #2
 80204d2:	f8c9 3000 	strmi.w	r3, [r9]
 80204d6:	6825      	ldr	r5, [r4, #0]
 80204d8:	f015 0506 	ands.w	r5, r5, #6
 80204dc:	d107      	bne.n	80204ee <_printf_common+0x52>
 80204de:	f104 0a19 	add.w	sl, r4, #25
 80204e2:	68e3      	ldr	r3, [r4, #12]
 80204e4:	f8d9 2000 	ldr.w	r2, [r9]
 80204e8:	1a9b      	subs	r3, r3, r2
 80204ea:	42ab      	cmp	r3, r5
 80204ec:	dc28      	bgt.n	8020540 <_printf_common+0xa4>
 80204ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80204f2:	6822      	ldr	r2, [r4, #0]
 80204f4:	3300      	adds	r3, #0
 80204f6:	bf18      	it	ne
 80204f8:	2301      	movne	r3, #1
 80204fa:	0692      	lsls	r2, r2, #26
 80204fc:	d42d      	bmi.n	802055a <_printf_common+0xbe>
 80204fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020502:	4639      	mov	r1, r7
 8020504:	4630      	mov	r0, r6
 8020506:	47c0      	blx	r8
 8020508:	3001      	adds	r0, #1
 802050a:	d020      	beq.n	802054e <_printf_common+0xb2>
 802050c:	6823      	ldr	r3, [r4, #0]
 802050e:	68e5      	ldr	r5, [r4, #12]
 8020510:	f8d9 2000 	ldr.w	r2, [r9]
 8020514:	f003 0306 	and.w	r3, r3, #6
 8020518:	2b04      	cmp	r3, #4
 802051a:	bf08      	it	eq
 802051c:	1aad      	subeq	r5, r5, r2
 802051e:	68a3      	ldr	r3, [r4, #8]
 8020520:	6922      	ldr	r2, [r4, #16]
 8020522:	bf0c      	ite	eq
 8020524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020528:	2500      	movne	r5, #0
 802052a:	4293      	cmp	r3, r2
 802052c:	bfc4      	itt	gt
 802052e:	1a9b      	subgt	r3, r3, r2
 8020530:	18ed      	addgt	r5, r5, r3
 8020532:	f04f 0900 	mov.w	r9, #0
 8020536:	341a      	adds	r4, #26
 8020538:	454d      	cmp	r5, r9
 802053a:	d11a      	bne.n	8020572 <_printf_common+0xd6>
 802053c:	2000      	movs	r0, #0
 802053e:	e008      	b.n	8020552 <_printf_common+0xb6>
 8020540:	2301      	movs	r3, #1
 8020542:	4652      	mov	r2, sl
 8020544:	4639      	mov	r1, r7
 8020546:	4630      	mov	r0, r6
 8020548:	47c0      	blx	r8
 802054a:	3001      	adds	r0, #1
 802054c:	d103      	bne.n	8020556 <_printf_common+0xba>
 802054e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020556:	3501      	adds	r5, #1
 8020558:	e7c3      	b.n	80204e2 <_printf_common+0x46>
 802055a:	18e1      	adds	r1, r4, r3
 802055c:	1c5a      	adds	r2, r3, #1
 802055e:	2030      	movs	r0, #48	; 0x30
 8020560:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020564:	4422      	add	r2, r4
 8020566:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802056a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802056e:	3302      	adds	r3, #2
 8020570:	e7c5      	b.n	80204fe <_printf_common+0x62>
 8020572:	2301      	movs	r3, #1
 8020574:	4622      	mov	r2, r4
 8020576:	4639      	mov	r1, r7
 8020578:	4630      	mov	r0, r6
 802057a:	47c0      	blx	r8
 802057c:	3001      	adds	r0, #1
 802057e:	d0e6      	beq.n	802054e <_printf_common+0xb2>
 8020580:	f109 0901 	add.w	r9, r9, #1
 8020584:	e7d8      	b.n	8020538 <_printf_common+0x9c>
	...

08020588 <_printf_i>:
 8020588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802058c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8020590:	460c      	mov	r4, r1
 8020592:	7e09      	ldrb	r1, [r1, #24]
 8020594:	b085      	sub	sp, #20
 8020596:	296e      	cmp	r1, #110	; 0x6e
 8020598:	4617      	mov	r7, r2
 802059a:	4606      	mov	r6, r0
 802059c:	4698      	mov	r8, r3
 802059e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80205a0:	f000 80b3 	beq.w	802070a <_printf_i+0x182>
 80205a4:	d822      	bhi.n	80205ec <_printf_i+0x64>
 80205a6:	2963      	cmp	r1, #99	; 0x63
 80205a8:	d036      	beq.n	8020618 <_printf_i+0x90>
 80205aa:	d80a      	bhi.n	80205c2 <_printf_i+0x3a>
 80205ac:	2900      	cmp	r1, #0
 80205ae:	f000 80b9 	beq.w	8020724 <_printf_i+0x19c>
 80205b2:	2958      	cmp	r1, #88	; 0x58
 80205b4:	f000 8083 	beq.w	80206be <_printf_i+0x136>
 80205b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80205bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80205c0:	e032      	b.n	8020628 <_printf_i+0xa0>
 80205c2:	2964      	cmp	r1, #100	; 0x64
 80205c4:	d001      	beq.n	80205ca <_printf_i+0x42>
 80205c6:	2969      	cmp	r1, #105	; 0x69
 80205c8:	d1f6      	bne.n	80205b8 <_printf_i+0x30>
 80205ca:	6820      	ldr	r0, [r4, #0]
 80205cc:	6813      	ldr	r3, [r2, #0]
 80205ce:	0605      	lsls	r5, r0, #24
 80205d0:	f103 0104 	add.w	r1, r3, #4
 80205d4:	d52a      	bpl.n	802062c <_printf_i+0xa4>
 80205d6:	681b      	ldr	r3, [r3, #0]
 80205d8:	6011      	str	r1, [r2, #0]
 80205da:	2b00      	cmp	r3, #0
 80205dc:	da03      	bge.n	80205e6 <_printf_i+0x5e>
 80205de:	222d      	movs	r2, #45	; 0x2d
 80205e0:	425b      	negs	r3, r3
 80205e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80205e6:	486f      	ldr	r0, [pc, #444]	; (80207a4 <_printf_i+0x21c>)
 80205e8:	220a      	movs	r2, #10
 80205ea:	e039      	b.n	8020660 <_printf_i+0xd8>
 80205ec:	2973      	cmp	r1, #115	; 0x73
 80205ee:	f000 809d 	beq.w	802072c <_printf_i+0x1a4>
 80205f2:	d808      	bhi.n	8020606 <_printf_i+0x7e>
 80205f4:	296f      	cmp	r1, #111	; 0x6f
 80205f6:	d020      	beq.n	802063a <_printf_i+0xb2>
 80205f8:	2970      	cmp	r1, #112	; 0x70
 80205fa:	d1dd      	bne.n	80205b8 <_printf_i+0x30>
 80205fc:	6823      	ldr	r3, [r4, #0]
 80205fe:	f043 0320 	orr.w	r3, r3, #32
 8020602:	6023      	str	r3, [r4, #0]
 8020604:	e003      	b.n	802060e <_printf_i+0x86>
 8020606:	2975      	cmp	r1, #117	; 0x75
 8020608:	d017      	beq.n	802063a <_printf_i+0xb2>
 802060a:	2978      	cmp	r1, #120	; 0x78
 802060c:	d1d4      	bne.n	80205b8 <_printf_i+0x30>
 802060e:	2378      	movs	r3, #120	; 0x78
 8020610:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020614:	4864      	ldr	r0, [pc, #400]	; (80207a8 <_printf_i+0x220>)
 8020616:	e055      	b.n	80206c4 <_printf_i+0x13c>
 8020618:	6813      	ldr	r3, [r2, #0]
 802061a:	1d19      	adds	r1, r3, #4
 802061c:	681b      	ldr	r3, [r3, #0]
 802061e:	6011      	str	r1, [r2, #0]
 8020620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020628:	2301      	movs	r3, #1
 802062a:	e08c      	b.n	8020746 <_printf_i+0x1be>
 802062c:	681b      	ldr	r3, [r3, #0]
 802062e:	6011      	str	r1, [r2, #0]
 8020630:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020634:	bf18      	it	ne
 8020636:	b21b      	sxthne	r3, r3
 8020638:	e7cf      	b.n	80205da <_printf_i+0x52>
 802063a:	6813      	ldr	r3, [r2, #0]
 802063c:	6825      	ldr	r5, [r4, #0]
 802063e:	1d18      	adds	r0, r3, #4
 8020640:	6010      	str	r0, [r2, #0]
 8020642:	0628      	lsls	r0, r5, #24
 8020644:	d501      	bpl.n	802064a <_printf_i+0xc2>
 8020646:	681b      	ldr	r3, [r3, #0]
 8020648:	e002      	b.n	8020650 <_printf_i+0xc8>
 802064a:	0668      	lsls	r0, r5, #25
 802064c:	d5fb      	bpl.n	8020646 <_printf_i+0xbe>
 802064e:	881b      	ldrh	r3, [r3, #0]
 8020650:	4854      	ldr	r0, [pc, #336]	; (80207a4 <_printf_i+0x21c>)
 8020652:	296f      	cmp	r1, #111	; 0x6f
 8020654:	bf14      	ite	ne
 8020656:	220a      	movne	r2, #10
 8020658:	2208      	moveq	r2, #8
 802065a:	2100      	movs	r1, #0
 802065c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020660:	6865      	ldr	r5, [r4, #4]
 8020662:	60a5      	str	r5, [r4, #8]
 8020664:	2d00      	cmp	r5, #0
 8020666:	f2c0 8095 	blt.w	8020794 <_printf_i+0x20c>
 802066a:	6821      	ldr	r1, [r4, #0]
 802066c:	f021 0104 	bic.w	r1, r1, #4
 8020670:	6021      	str	r1, [r4, #0]
 8020672:	2b00      	cmp	r3, #0
 8020674:	d13d      	bne.n	80206f2 <_printf_i+0x16a>
 8020676:	2d00      	cmp	r5, #0
 8020678:	f040 808e 	bne.w	8020798 <_printf_i+0x210>
 802067c:	4665      	mov	r5, ip
 802067e:	2a08      	cmp	r2, #8
 8020680:	d10b      	bne.n	802069a <_printf_i+0x112>
 8020682:	6823      	ldr	r3, [r4, #0]
 8020684:	07db      	lsls	r3, r3, #31
 8020686:	d508      	bpl.n	802069a <_printf_i+0x112>
 8020688:	6923      	ldr	r3, [r4, #16]
 802068a:	6862      	ldr	r2, [r4, #4]
 802068c:	429a      	cmp	r2, r3
 802068e:	bfde      	ittt	le
 8020690:	2330      	movle	r3, #48	; 0x30
 8020692:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020696:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 802069a:	ebac 0305 	sub.w	r3, ip, r5
 802069e:	6123      	str	r3, [r4, #16]
 80206a0:	f8cd 8000 	str.w	r8, [sp]
 80206a4:	463b      	mov	r3, r7
 80206a6:	aa03      	add	r2, sp, #12
 80206a8:	4621      	mov	r1, r4
 80206aa:	4630      	mov	r0, r6
 80206ac:	f7ff fef6 	bl	802049c <_printf_common>
 80206b0:	3001      	adds	r0, #1
 80206b2:	d14d      	bne.n	8020750 <_printf_i+0x1c8>
 80206b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80206b8:	b005      	add	sp, #20
 80206ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80206be:	4839      	ldr	r0, [pc, #228]	; (80207a4 <_printf_i+0x21c>)
 80206c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80206c4:	6813      	ldr	r3, [r2, #0]
 80206c6:	6821      	ldr	r1, [r4, #0]
 80206c8:	1d1d      	adds	r5, r3, #4
 80206ca:	681b      	ldr	r3, [r3, #0]
 80206cc:	6015      	str	r5, [r2, #0]
 80206ce:	060a      	lsls	r2, r1, #24
 80206d0:	d50b      	bpl.n	80206ea <_printf_i+0x162>
 80206d2:	07ca      	lsls	r2, r1, #31
 80206d4:	bf44      	itt	mi
 80206d6:	f041 0120 	orrmi.w	r1, r1, #32
 80206da:	6021      	strmi	r1, [r4, #0]
 80206dc:	b91b      	cbnz	r3, 80206e6 <_printf_i+0x15e>
 80206de:	6822      	ldr	r2, [r4, #0]
 80206e0:	f022 0220 	bic.w	r2, r2, #32
 80206e4:	6022      	str	r2, [r4, #0]
 80206e6:	2210      	movs	r2, #16
 80206e8:	e7b7      	b.n	802065a <_printf_i+0xd2>
 80206ea:	064d      	lsls	r5, r1, #25
 80206ec:	bf48      	it	mi
 80206ee:	b29b      	uxthmi	r3, r3
 80206f0:	e7ef      	b.n	80206d2 <_printf_i+0x14a>
 80206f2:	4665      	mov	r5, ip
 80206f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80206f8:	fb02 3311 	mls	r3, r2, r1, r3
 80206fc:	5cc3      	ldrb	r3, [r0, r3]
 80206fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8020702:	460b      	mov	r3, r1
 8020704:	2900      	cmp	r1, #0
 8020706:	d1f5      	bne.n	80206f4 <_printf_i+0x16c>
 8020708:	e7b9      	b.n	802067e <_printf_i+0xf6>
 802070a:	6813      	ldr	r3, [r2, #0]
 802070c:	6825      	ldr	r5, [r4, #0]
 802070e:	6961      	ldr	r1, [r4, #20]
 8020710:	1d18      	adds	r0, r3, #4
 8020712:	6010      	str	r0, [r2, #0]
 8020714:	0628      	lsls	r0, r5, #24
 8020716:	681b      	ldr	r3, [r3, #0]
 8020718:	d501      	bpl.n	802071e <_printf_i+0x196>
 802071a:	6019      	str	r1, [r3, #0]
 802071c:	e002      	b.n	8020724 <_printf_i+0x19c>
 802071e:	066a      	lsls	r2, r5, #25
 8020720:	d5fb      	bpl.n	802071a <_printf_i+0x192>
 8020722:	8019      	strh	r1, [r3, #0]
 8020724:	2300      	movs	r3, #0
 8020726:	6123      	str	r3, [r4, #16]
 8020728:	4665      	mov	r5, ip
 802072a:	e7b9      	b.n	80206a0 <_printf_i+0x118>
 802072c:	6813      	ldr	r3, [r2, #0]
 802072e:	1d19      	adds	r1, r3, #4
 8020730:	6011      	str	r1, [r2, #0]
 8020732:	681d      	ldr	r5, [r3, #0]
 8020734:	6862      	ldr	r2, [r4, #4]
 8020736:	2100      	movs	r1, #0
 8020738:	4628      	mov	r0, r5
 802073a:	f7df fd71 	bl	8000220 <memchr>
 802073e:	b108      	cbz	r0, 8020744 <_printf_i+0x1bc>
 8020740:	1b40      	subs	r0, r0, r5
 8020742:	6060      	str	r0, [r4, #4]
 8020744:	6863      	ldr	r3, [r4, #4]
 8020746:	6123      	str	r3, [r4, #16]
 8020748:	2300      	movs	r3, #0
 802074a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802074e:	e7a7      	b.n	80206a0 <_printf_i+0x118>
 8020750:	6923      	ldr	r3, [r4, #16]
 8020752:	462a      	mov	r2, r5
 8020754:	4639      	mov	r1, r7
 8020756:	4630      	mov	r0, r6
 8020758:	47c0      	blx	r8
 802075a:	3001      	adds	r0, #1
 802075c:	d0aa      	beq.n	80206b4 <_printf_i+0x12c>
 802075e:	6823      	ldr	r3, [r4, #0]
 8020760:	079b      	lsls	r3, r3, #30
 8020762:	d413      	bmi.n	802078c <_printf_i+0x204>
 8020764:	68e0      	ldr	r0, [r4, #12]
 8020766:	9b03      	ldr	r3, [sp, #12]
 8020768:	4298      	cmp	r0, r3
 802076a:	bfb8      	it	lt
 802076c:	4618      	movlt	r0, r3
 802076e:	e7a3      	b.n	80206b8 <_printf_i+0x130>
 8020770:	2301      	movs	r3, #1
 8020772:	464a      	mov	r2, r9
 8020774:	4639      	mov	r1, r7
 8020776:	4630      	mov	r0, r6
 8020778:	47c0      	blx	r8
 802077a:	3001      	adds	r0, #1
 802077c:	d09a      	beq.n	80206b4 <_printf_i+0x12c>
 802077e:	3501      	adds	r5, #1
 8020780:	68e3      	ldr	r3, [r4, #12]
 8020782:	9a03      	ldr	r2, [sp, #12]
 8020784:	1a9b      	subs	r3, r3, r2
 8020786:	42ab      	cmp	r3, r5
 8020788:	dcf2      	bgt.n	8020770 <_printf_i+0x1e8>
 802078a:	e7eb      	b.n	8020764 <_printf_i+0x1dc>
 802078c:	2500      	movs	r5, #0
 802078e:	f104 0919 	add.w	r9, r4, #25
 8020792:	e7f5      	b.n	8020780 <_printf_i+0x1f8>
 8020794:	2b00      	cmp	r3, #0
 8020796:	d1ac      	bne.n	80206f2 <_printf_i+0x16a>
 8020798:	7803      	ldrb	r3, [r0, #0]
 802079a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802079e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80207a2:	e76c      	b.n	802067e <_printf_i+0xf6>
 80207a4:	08026385 	.word	0x08026385
 80207a8:	08026396 	.word	0x08026396

080207ac <_putc_r>:
 80207ac:	b570      	push	{r4, r5, r6, lr}
 80207ae:	460d      	mov	r5, r1
 80207b0:	4614      	mov	r4, r2
 80207b2:	4606      	mov	r6, r0
 80207b4:	b118      	cbz	r0, 80207be <_putc_r+0x12>
 80207b6:	6983      	ldr	r3, [r0, #24]
 80207b8:	b90b      	cbnz	r3, 80207be <_putc_r+0x12>
 80207ba:	f7ff faed 	bl	801fd98 <__sinit>
 80207be:	4b13      	ldr	r3, [pc, #76]	; (802080c <_putc_r+0x60>)
 80207c0:	429c      	cmp	r4, r3
 80207c2:	d112      	bne.n	80207ea <_putc_r+0x3e>
 80207c4:	6874      	ldr	r4, [r6, #4]
 80207c6:	68a3      	ldr	r3, [r4, #8]
 80207c8:	3b01      	subs	r3, #1
 80207ca:	2b00      	cmp	r3, #0
 80207cc:	60a3      	str	r3, [r4, #8]
 80207ce:	da16      	bge.n	80207fe <_putc_r+0x52>
 80207d0:	69a2      	ldr	r2, [r4, #24]
 80207d2:	4293      	cmp	r3, r2
 80207d4:	db02      	blt.n	80207dc <_putc_r+0x30>
 80207d6:	b2eb      	uxtb	r3, r5
 80207d8:	2b0a      	cmp	r3, #10
 80207da:	d110      	bne.n	80207fe <_putc_r+0x52>
 80207dc:	4622      	mov	r2, r4
 80207de:	4629      	mov	r1, r5
 80207e0:	4630      	mov	r0, r6
 80207e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80207e6:	f7ff b927 	b.w	801fa38 <__swbuf_r>
 80207ea:	4b09      	ldr	r3, [pc, #36]	; (8020810 <_putc_r+0x64>)
 80207ec:	429c      	cmp	r4, r3
 80207ee:	d101      	bne.n	80207f4 <_putc_r+0x48>
 80207f0:	68b4      	ldr	r4, [r6, #8]
 80207f2:	e7e8      	b.n	80207c6 <_putc_r+0x1a>
 80207f4:	4b07      	ldr	r3, [pc, #28]	; (8020814 <_putc_r+0x68>)
 80207f6:	429c      	cmp	r4, r3
 80207f8:	bf08      	it	eq
 80207fa:	68f4      	ldreq	r4, [r6, #12]
 80207fc:	e7e3      	b.n	80207c6 <_putc_r+0x1a>
 80207fe:	6823      	ldr	r3, [r4, #0]
 8020800:	1c5a      	adds	r2, r3, #1
 8020802:	6022      	str	r2, [r4, #0]
 8020804:	701d      	strb	r5, [r3, #0]
 8020806:	b2e8      	uxtb	r0, r5
 8020808:	bd70      	pop	{r4, r5, r6, pc}
 802080a:	bf00      	nop
 802080c:	08026334 	.word	0x08026334
 8020810:	08026354 	.word	0x08026354
 8020814:	08026314 	.word	0x08026314

08020818 <__sread>:
 8020818:	b510      	push	{r4, lr}
 802081a:	460c      	mov	r4, r1
 802081c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020820:	f000 f8ba 	bl	8020998 <_read_r>
 8020824:	2800      	cmp	r0, #0
 8020826:	bfab      	itete	ge
 8020828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802082a:	89a3      	ldrhlt	r3, [r4, #12]
 802082c:	181b      	addge	r3, r3, r0
 802082e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020832:	bfac      	ite	ge
 8020834:	6563      	strge	r3, [r4, #84]	; 0x54
 8020836:	81a3      	strhlt	r3, [r4, #12]
 8020838:	bd10      	pop	{r4, pc}

0802083a <__swrite>:
 802083a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802083e:	461f      	mov	r7, r3
 8020840:	898b      	ldrh	r3, [r1, #12]
 8020842:	05db      	lsls	r3, r3, #23
 8020844:	4605      	mov	r5, r0
 8020846:	460c      	mov	r4, r1
 8020848:	4616      	mov	r6, r2
 802084a:	d505      	bpl.n	8020858 <__swrite+0x1e>
 802084c:	2302      	movs	r3, #2
 802084e:	2200      	movs	r2, #0
 8020850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020854:	f000 f868 	bl	8020928 <_lseek_r>
 8020858:	89a3      	ldrh	r3, [r4, #12]
 802085a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802085e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020862:	81a3      	strh	r3, [r4, #12]
 8020864:	4632      	mov	r2, r6
 8020866:	463b      	mov	r3, r7
 8020868:	4628      	mov	r0, r5
 802086a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802086e:	f000 b817 	b.w	80208a0 <_write_r>

08020872 <__sseek>:
 8020872:	b510      	push	{r4, lr}
 8020874:	460c      	mov	r4, r1
 8020876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802087a:	f000 f855 	bl	8020928 <_lseek_r>
 802087e:	1c43      	adds	r3, r0, #1
 8020880:	89a3      	ldrh	r3, [r4, #12]
 8020882:	bf15      	itete	ne
 8020884:	6560      	strne	r0, [r4, #84]	; 0x54
 8020886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802088a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802088e:	81a3      	strheq	r3, [r4, #12]
 8020890:	bf18      	it	ne
 8020892:	81a3      	strhne	r3, [r4, #12]
 8020894:	bd10      	pop	{r4, pc}

08020896 <__sclose>:
 8020896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802089a:	f000 b813 	b.w	80208c4 <_close_r>
	...

080208a0 <_write_r>:
 80208a0:	b538      	push	{r3, r4, r5, lr}
 80208a2:	4c07      	ldr	r4, [pc, #28]	; (80208c0 <_write_r+0x20>)
 80208a4:	4605      	mov	r5, r0
 80208a6:	4608      	mov	r0, r1
 80208a8:	4611      	mov	r1, r2
 80208aa:	2200      	movs	r2, #0
 80208ac:	6022      	str	r2, [r4, #0]
 80208ae:	461a      	mov	r2, r3
 80208b0:	f7eb fb1e 	bl	800bef0 <_write>
 80208b4:	1c43      	adds	r3, r0, #1
 80208b6:	d102      	bne.n	80208be <_write_r+0x1e>
 80208b8:	6823      	ldr	r3, [r4, #0]
 80208ba:	b103      	cbz	r3, 80208be <_write_r+0x1e>
 80208bc:	602b      	str	r3, [r5, #0]
 80208be:	bd38      	pop	{r3, r4, r5, pc}
 80208c0:	20013280 	.word	0x20013280

080208c4 <_close_r>:
 80208c4:	b538      	push	{r3, r4, r5, lr}
 80208c6:	4c06      	ldr	r4, [pc, #24]	; (80208e0 <_close_r+0x1c>)
 80208c8:	2300      	movs	r3, #0
 80208ca:	4605      	mov	r5, r0
 80208cc:	4608      	mov	r0, r1
 80208ce:	6023      	str	r3, [r4, #0]
 80208d0:	f7eb fb1c 	bl	800bf0c <_close>
 80208d4:	1c43      	adds	r3, r0, #1
 80208d6:	d102      	bne.n	80208de <_close_r+0x1a>
 80208d8:	6823      	ldr	r3, [r4, #0]
 80208da:	b103      	cbz	r3, 80208de <_close_r+0x1a>
 80208dc:	602b      	str	r3, [r5, #0]
 80208de:	bd38      	pop	{r3, r4, r5, pc}
 80208e0:	20013280 	.word	0x20013280

080208e4 <_fstat_r>:
 80208e4:	b538      	push	{r3, r4, r5, lr}
 80208e6:	4c07      	ldr	r4, [pc, #28]	; (8020904 <_fstat_r+0x20>)
 80208e8:	2300      	movs	r3, #0
 80208ea:	4605      	mov	r5, r0
 80208ec:	4608      	mov	r0, r1
 80208ee:	4611      	mov	r1, r2
 80208f0:	6023      	str	r3, [r4, #0]
 80208f2:	f7eb fb0f 	bl	800bf14 <_fstat>
 80208f6:	1c43      	adds	r3, r0, #1
 80208f8:	d102      	bne.n	8020900 <_fstat_r+0x1c>
 80208fa:	6823      	ldr	r3, [r4, #0]
 80208fc:	b103      	cbz	r3, 8020900 <_fstat_r+0x1c>
 80208fe:	602b      	str	r3, [r5, #0]
 8020900:	bd38      	pop	{r3, r4, r5, pc}
 8020902:	bf00      	nop
 8020904:	20013280 	.word	0x20013280

08020908 <_isatty_r>:
 8020908:	b538      	push	{r3, r4, r5, lr}
 802090a:	4c06      	ldr	r4, [pc, #24]	; (8020924 <_isatty_r+0x1c>)
 802090c:	2300      	movs	r3, #0
 802090e:	4605      	mov	r5, r0
 8020910:	4608      	mov	r0, r1
 8020912:	6023      	str	r3, [r4, #0]
 8020914:	f7eb fb04 	bl	800bf20 <_isatty>
 8020918:	1c43      	adds	r3, r0, #1
 802091a:	d102      	bne.n	8020922 <_isatty_r+0x1a>
 802091c:	6823      	ldr	r3, [r4, #0]
 802091e:	b103      	cbz	r3, 8020922 <_isatty_r+0x1a>
 8020920:	602b      	str	r3, [r5, #0]
 8020922:	bd38      	pop	{r3, r4, r5, pc}
 8020924:	20013280 	.word	0x20013280

08020928 <_lseek_r>:
 8020928:	b538      	push	{r3, r4, r5, lr}
 802092a:	4c07      	ldr	r4, [pc, #28]	; (8020948 <_lseek_r+0x20>)
 802092c:	4605      	mov	r5, r0
 802092e:	4608      	mov	r0, r1
 8020930:	4611      	mov	r1, r2
 8020932:	2200      	movs	r2, #0
 8020934:	6022      	str	r2, [r4, #0]
 8020936:	461a      	mov	r2, r3
 8020938:	f7eb faf4 	bl	800bf24 <_lseek>
 802093c:	1c43      	adds	r3, r0, #1
 802093e:	d102      	bne.n	8020946 <_lseek_r+0x1e>
 8020940:	6823      	ldr	r3, [r4, #0]
 8020942:	b103      	cbz	r3, 8020946 <_lseek_r+0x1e>
 8020944:	602b      	str	r3, [r5, #0]
 8020946:	bd38      	pop	{r3, r4, r5, pc}
 8020948:	20013280 	.word	0x20013280

0802094c <_realloc_r>:
 802094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802094e:	4607      	mov	r7, r0
 8020950:	4614      	mov	r4, r2
 8020952:	460e      	mov	r6, r1
 8020954:	b921      	cbnz	r1, 8020960 <_realloc_r+0x14>
 8020956:	4611      	mov	r1, r2
 8020958:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802095c:	f7fe bf30 	b.w	801f7c0 <_malloc_r>
 8020960:	b922      	cbnz	r2, 802096c <_realloc_r+0x20>
 8020962:	f7fe fedf 	bl	801f724 <_free_r>
 8020966:	4625      	mov	r5, r4
 8020968:	4628      	mov	r0, r5
 802096a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802096c:	f000 f826 	bl	80209bc <_malloc_usable_size_r>
 8020970:	42a0      	cmp	r0, r4
 8020972:	d20f      	bcs.n	8020994 <_realloc_r+0x48>
 8020974:	4621      	mov	r1, r4
 8020976:	4638      	mov	r0, r7
 8020978:	f7fe ff22 	bl	801f7c0 <_malloc_r>
 802097c:	4605      	mov	r5, r0
 802097e:	2800      	cmp	r0, #0
 8020980:	d0f2      	beq.n	8020968 <_realloc_r+0x1c>
 8020982:	4631      	mov	r1, r6
 8020984:	4622      	mov	r2, r4
 8020986:	f7fe fea1 	bl	801f6cc <memcpy>
 802098a:	4631      	mov	r1, r6
 802098c:	4638      	mov	r0, r7
 802098e:	f7fe fec9 	bl	801f724 <_free_r>
 8020992:	e7e9      	b.n	8020968 <_realloc_r+0x1c>
 8020994:	4635      	mov	r5, r6
 8020996:	e7e7      	b.n	8020968 <_realloc_r+0x1c>

08020998 <_read_r>:
 8020998:	b538      	push	{r3, r4, r5, lr}
 802099a:	4c07      	ldr	r4, [pc, #28]	; (80209b8 <_read_r+0x20>)
 802099c:	4605      	mov	r5, r0
 802099e:	4608      	mov	r0, r1
 80209a0:	4611      	mov	r1, r2
 80209a2:	2200      	movs	r2, #0
 80209a4:	6022      	str	r2, [r4, #0]
 80209a6:	461a      	mov	r2, r3
 80209a8:	f7eb fabe 	bl	800bf28 <_read>
 80209ac:	1c43      	adds	r3, r0, #1
 80209ae:	d102      	bne.n	80209b6 <_read_r+0x1e>
 80209b0:	6823      	ldr	r3, [r4, #0]
 80209b2:	b103      	cbz	r3, 80209b6 <_read_r+0x1e>
 80209b4:	602b      	str	r3, [r5, #0]
 80209b6:	bd38      	pop	{r3, r4, r5, pc}
 80209b8:	20013280 	.word	0x20013280

080209bc <_malloc_usable_size_r>:
 80209bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80209c0:	1f18      	subs	r0, r3, #4
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	bfbc      	itt	lt
 80209c6:	580b      	ldrlt	r3, [r1, r0]
 80209c8:	18c0      	addlt	r0, r0, r3
 80209ca:	4770      	bx	lr

080209cc <_init>:
 80209cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80209ce:	bf00      	nop
 80209d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80209d2:	bc08      	pop	{r3}
 80209d4:	469e      	mov	lr, r3
 80209d6:	4770      	bx	lr

080209d8 <_fini>:
 80209d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80209da:	bf00      	nop
 80209dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80209de:	bc08      	pop	{r3}
 80209e0:	469e      	mov	lr, r3
 80209e2:	4770      	bx	lr
